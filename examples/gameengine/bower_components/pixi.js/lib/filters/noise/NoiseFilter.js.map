{"version":3,"sources":["../../../src/filters/noise/NoiseFilter.js"],"names":["core","NoiseFilter","noise","uniforms","value","Filter"],"mappings":";;;;;;AAAA;;IAAYA,I;;AAEZ;;;;;;;;;;AAEA;;;;;AAKA;;;;;;;IAOqBC,W;;;AAEjB;;;AAGA,yBACA;AAAA;;AAAA,iDACI;AACI;AADJ;AAGI;AAHJ,qdADJ;;AAQI,UAAKC,KAAL,GAAa,GAAb;AARJ;AASC;;AAED;;;;;;;;;;;wBAQA;AACI,aAAO,KAAKC,QAAL,CAAcD,KAArB;AACH;;AAED;;;;;;sBAKUE,K,EACV;AACI,WAAKD,QAAL,CAAcD,KAAd,GAAsBE,KAAtB;AACH;;;;EArCoCJ,KAAKK,M;;kBAAzBJ,W","file":"NoiseFilter.js","sourcesContent":["import * as core from '../../core';\nimport { readFileSync } from 'fs';\nimport { join } from 'path';\n\n/**\n * @author Vico @vicocotea\n * original filter: https://github.com/evanw/glfx.js/blob/master/src/filters/adjust/noise.js\n */\n\n/**\n * A Noise effect filter.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n */\nexport default class NoiseFilter extends core.Filter\n{\n    /**\n     *\n     */\n    constructor()\n    {\n        super(\n            // vertex shader\n            readFileSync(join(__dirname, '../fragments/default.vert'), 'utf8'),\n            // fragment shader\n            readFileSync(join(__dirname, './noise.frag'), 'utf8')\n        );\n\n        this.noise = 0.5;\n    }\n\n    /**\n     * The amount of noise to apply.\n     *\n     * @member {number}\n     * @memberof PIXI.filters.NoiseFilter#\n     * @default 0.5\n     */\n    get noise()\n    {\n        return this.uniforms.noise;\n    }\n\n    /**\n     * Sets the amount of noise to apply.\n     *\n     * @param {number} value - The value to set to.\n     */\n    set noise(value)\n    {\n        this.uniforms.noise = value;\n    }\n}\n"]}