{"version":3,"sources":["../../src/loaders/loader.js"],"names":["Loader","baseUrl","concurrency","i","_pixiMiddleware","length","use","addPixiMiddleware","fn","push","middleware","parsing","blob","Resource","setExtensionXhrType","XHR_RESPONSE_TYPE","DOCUMENT"],"mappings":";;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;IAwBqBA,M;;;AAEjB;;;;AAIA,oBAAYC,OAAZ,EAAqBC,WAArB,EACA;AAAA;;AAAA,qDACI,2BAAMD,OAAN,EAAeC,WAAf,CADJ;;AAGI,aAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIH,OAAOI,eAAP,CAAuBC,MAA3C,EAAmD,EAAEF,CAArD,EACA;AACI,kBAAKG,GAAL,CAASN,OAAOI,eAAP,CAAuBD,CAAvB,GAAT;AACH;AANL;AAOC;;AAED;;;;;;;;WAMOI,iB,8BAAkBC,E,EACzB;AACIR,eAAOI,eAAP,CAAuBK,IAAvB,CAA4BD,EAA5B;AACH,K;;;;;kBAzBgBR,M;;;AA4BrBA,OAAOI,eAAP,GAAyB;AACrB;AACA,yBAAeM,UAAf,CAA0BC,OAA1B,CAAkCC,IAFb;AAGrB;AAHqB;AAKrB;AALqB;AAOrB;AAPqB,2BAAzB;;AAWA;AACA,IAAMC,WAAW,yBAAeA,QAAhC;;AAEAA,SAASC,mBAAT,CAA6B,KAA7B,EAAoCD,SAASE,iBAAT,CAA2BC,QAA/D","file":"loader.js","sourcesContent":["import ResourceLoader from 'resource-loader';\nimport textureParser from './textureParser';\nimport spritesheetParser from './spritesheetParser';\nimport bitmapFontParser from './bitmapFontParser';\n\n/**\n *\n * The new loader, extends Resource Loader by Chad Engler : https://github.com/englercj/resource-loader\n *\n * ```js\n * let loader = PIXI.loader; // pixi exposes a premade instance for you to use.\n * //or\n * let loader = new PIXI.loaders.Loader(); // you can also create your own if you want\n *\n * loader.add('bunny', 'data/bunny.png');\n * loader.add('spaceship', 'assets/spritesheet.json');\n * loader.add('scoreFont', 'assets/score.fnt');\n *\n * loader.once('complete',onAssetsLoaded);\n *\n * loader.load();\n * ```\n *\n * @see https://github.com/englercj/resource-loader\n *\n * @class\n * @extends module:resource-loader.ResourceLoader\n * @memberof PIXI.loaders\n */\nexport default class Loader extends ResourceLoader\n{\n    /**\n     * @param {string} [baseUrl=''] - The base url for all resources loaded by this loader.\n     * @param {number} [concurrency=10] - The number of resources to load concurrently.\n     */\n    constructor(baseUrl, concurrency)\n    {\n        super(baseUrl, concurrency);\n\n        for (let i = 0; i < Loader._pixiMiddleware.length; ++i)\n        {\n            this.use(Loader._pixiMiddleware[i]());\n        }\n    }\n\n    /**\n     * Adds a default middleware to the pixi loader.\n     *\n     * @static\n     * @param {Function} fn - The middleware to add.\n     */\n    static addPixiMiddleware(fn)\n    {\n        Loader._pixiMiddleware.push(fn);\n    }\n}\n\nLoader._pixiMiddleware = [\n    // parse any blob into more usable objects (e.g. Image)\n    ResourceLoader.middleware.parsing.blob,\n    // parse any Image objects into textures\n    textureParser,\n    // parse any spritesheet data into multiple textures\n    spritesheetParser,\n    // parse bitmap font data into multiple textures\n    bitmapFontParser,\n];\n\n// Add custom extentions\nconst Resource = ResourceLoader.Resource;\n\nResource.setExtensionXhrType('fnt', Resource.XHR_RESPONSE_TYPE.DOCUMENT);\n"]}