{"version":3,"sources":["../../src/extras/TextureTransform.js"],"names":["tempMat","TextureTransform","texture","clampMargin","_texture","mapCoord","uClampFrame","Float32Array","uClampOffset","_lastTextureID","clampOffset","update","forceUpdate","tex","valid","_updateID","uvs","_uvs","set","x1","x0","y1","y0","x3","y3","orig","trim","width","height","x","y","append","texBase","baseTexture","frame","margin","resolution","offset","_frame","realWidth","realHeight","value"],"mappings":"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","file":"TextureTransform.js","sourcesContent":["import { default as Matrix } from '../core/math/Matrix';\n\nconst tempMat = new Matrix();\n\n/**\n * class controls uv transform and frame clamp for texture\n */\nexport default class TextureTransform {\n    /**\n     *\n     * @param {PIXI.Texture} texture observed texture\n     * @param {number} [clampMargin] Changes frame clamping, 0.5 by default. Use -0.5 for extra border.\n     * @constructor\n     */\n    constructor(texture, clampMargin)\n    {\n        this._texture = texture;\n\n        this.mapCoord = new Matrix();\n\n        this.uClampFrame = new Float32Array(4);\n\n        this.uClampOffset = new Float32Array(2);\n\n        this._lastTextureID = -1;\n\n        /**\n         * Changes frame clamping\n         * Works with TilingSprite and Mesh\n         * Change to 1.5 if you tex ture has repeated right and bottom lines, that leads to smoother borders\n         *\n         * @default 0\n         * @member {number}\n         */\n        this.clampOffset = 0;\n\n        /**\n         * Changes frame clamping\n         * Works with TilingSprite and Mesh\n         * Change to -0.5 to add a pixel to the edge, recommended for transparent trimmed textures in atlas\n         *\n         * @default 0.5\n         * @member {number}\n         */\n        this.clampMargin = (typeof clampMargin === 'undefined') ? 0.5 : clampMargin;\n    }\n\n    /**\n     * texture property\n     * @member {PIXI.Texture}\n     * @memberof PIXI.TextureTransform\n     */\n    get texture()\n    {\n        return this._texture;\n    }\n\n    /**\n     * sets texture value\n     * @param {PIXI.Texture} value texture to be set\n     */\n    set texture(value)\n    {\n        this._texture = value;\n        this._lastTextureID = -1;\n    }\n\n    /**\n     * updates matrices if texture was changed\n     * @param {boolean} forceUpdate if true, matrices will be updated any case\n     */\n    update(forceUpdate)\n    {\n        const tex = this.texture;\n\n        if (!tex || !tex.valid)\n        {\n            return;\n        }\n\n        if (!forceUpdate\n            && this._lastTextureID === this.texture._updateID)\n        {\n            return;\n        }\n\n        this._lastTextureID = this.texture._updateID;\n\n        const uvs = this.texture._uvs;\n\n        this.mapCoord.set(uvs.x1 - uvs.x0, uvs.y1 - uvs.y0, uvs.x3 - uvs.x0, uvs.y3 - uvs.y0, uvs.x0, uvs.y0);\n\n        const orig = tex.orig;\n        const trim = tex.trim;\n\n        if (trim)\n        {\n            tempMat.set(orig.width / trim.width, 0, 0, orig.height / trim.height,\n                -trim.x / trim.width, -trim.y / trim.height);\n            this.mapCoord.append(tempMat);\n        }\n\n        const texBase = tex.baseTexture;\n        const frame = this.uClampFrame;\n        const margin = this.clampMargin / texBase.resolution;\n        const offset = this.clampOffset;\n\n        frame[0] = (tex._frame.x + margin + offset) / texBase.width;\n        frame[1] = (tex._frame.y + margin + offset) / texBase.height;\n        frame[2] = (tex._frame.x + tex._frame.width - margin + offset) / texBase.width;\n        frame[3] = (tex._frame.y + tex._frame.height - margin + offset) / texBase.height;\n        this.uClampOffset[0] = offset / texBase.realWidth;\n        this.uClampOffset[1] = offset / texBase.realHeight;\n    }\n}\n"]}