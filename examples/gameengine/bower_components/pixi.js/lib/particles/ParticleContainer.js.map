{"version":3,"sources":["../../src/particles/ParticleContainer.js"],"names":["core","ParticleContainer","maxSize","properties","batchSize","maxBatchSize","_properties","_maxSize","_batchSize","_glBuffers","_bufferToUpdate","interactiveChildren","blendMode","BLEND_MODES","NORMAL","roundPixels","baseTexture","setProperties","scale","position","rotation","uvs","alpha","updateTransform","displayObjectUpdateTransform","renderWebGL","renderer","visible","worldAlpha","children","length","renderable","_texture","hasLoaded","once","onChildrenChange","setObjectRenderer","plugins","particle","render","smallestChildIndex","bufferIndex","Math","floor","renderCanvas","context","transform","worldTransform","isRotated","positionX","positionY","finalWidth","finalHeight","compositeOperation","blendModes","globalCompositeOperation","globalAlpha","i","child","frame","texture","PI","setTransform","a","b","c","d","tx","resolution","ty","anchor","x","width","y","height","childTransform","drawImage","source","destroy","options","_buffers","Container"],"mappings":"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","file":"ParticleContainer.js","sourcesContent":["import * as core from '../core';\n\n/**\n * The ParticleContainer class is a really fast version of the Container built solely for speed,\n * so use when you need a lot of sprites or particles. The tradeoff of the ParticleContainer is that advanced\n * functionality will not work. ParticleContainer implements only the basic object transform (position, scale, rotation).\n * Any other functionality like tinting, masking, etc will not work on sprites in this batch.\n *\n * It's extremely easy to use :\n *\n * ```js\n * let container = new ParticleContainer();\n *\n * for (let i = 0; i < 100; ++i)\n * {\n *     let sprite = new PIXI.Sprite.fromImage(\"myImage.png\");\n *     container.addChild(sprite);\n * }\n * ```\n *\n * And here you have a hundred sprites that will be renderer at the speed of light.\n *\n * @class\n * @extends PIXI.Container\n * @memberof PIXI.particles\n */\nexport default class ParticleContainer extends core.Container\n{\n    /**\n     * @param {number} [maxSize=15000] - The maximum number of particles that can be renderer by the container.\n     * @param {object} [properties] - The properties of children that should be uploaded to the gpu and applied.\n     * @param {boolean} [properties.scale=false] - When true, scale be uploaded and applied.\n     * @param {boolean} [properties.position=true] - When true, position be uploaded and applied.\n     * @param {boolean} [properties.rotation=false] - When true, rotation be uploaded and applied.\n     * @param {boolean} [properties.uvs=false] - When true, uvs be uploaded and applied.\n     * @param {boolean} [properties.alpha=false] - When true, alpha be uploaded and applied.\n     * @param {number} [batchSize=15000] - Number of particles per batch.\n     */\n    constructor(maxSize = 1500, properties, batchSize = 16384)\n    {\n        super();\n\n        // Making sure the batch size is valid\n        // 65535 is max vertex index in the index buffer (see ParticleRenderer)\n        // so max number of particles is 65536 / 4 = 16384\n        const maxBatchSize = 16384;\n\n        if (batchSize > maxBatchSize)\n        {\n            batchSize = maxBatchSize;\n        }\n\n        if (batchSize > maxSize)\n        {\n            batchSize = maxSize;\n        }\n\n        /**\n         * Set properties to be dynamic (true) / static (false)\n         *\n         * @member {boolean[]}\n         * @private\n         */\n        this._properties = [false, true, false, false, false];\n\n        /**\n         * @member {number}\n         * @private\n         */\n        this._maxSize = maxSize;\n\n        /**\n         * @member {number}\n         * @private\n         */\n        this._batchSize = batchSize;\n\n        /**\n         * @member {object<number, WebGLBuffer>}\n         * @private\n         */\n        this._glBuffers = {};\n\n        /**\n         * @member {number}\n         * @private\n         */\n        this._bufferToUpdate = 0;\n\n        /**\n         * @member {boolean}\n         *\n         */\n        this.interactiveChildren = false;\n\n        /**\n         * The blend mode to be applied to the sprite. Apply a value of `PIXI.BLEND_MODES.NORMAL`\n         * to reset the blend mode.\n         *\n         * @member {number}\n         * @default PIXI.BLEND_MODES.NORMAL\n         * @see PIXI.BLEND_MODES\n         */\n        this.blendMode = core.BLEND_MODES.NORMAL;\n\n        /**\n         * Used for canvas renderering. If true then the elements will be positioned at the\n         * nearest pixel. This provides a nice speed boost.\n         *\n         * @member {boolean}\n         * @default true;\n         */\n        this.roundPixels = true;\n\n        /**\n         * The texture used to render the children.\n         *\n         * @readonly\n         * @member {BaseTexture}\n         */\n        this.baseTexture = null;\n\n        this.setProperties(properties);\n    }\n\n    /**\n     * Sets the private properties array to dynamic / static based on the passed properties object\n     *\n     * @param {object} properties - The properties to be uploaded\n     */\n    setProperties(properties)\n    {\n        if (properties)\n        {\n            this._properties[0] = 'scale' in properties ? !!properties.scale : this._properties[0];\n            this._properties[1] = 'position' in properties ? !!properties.position : this._properties[1];\n            this._properties[2] = 'rotation' in properties ? !!properties.rotation : this._properties[2];\n            this._properties[3] = 'uvs' in properties ? !!properties.uvs : this._properties[3];\n            this._properties[4] = 'alpha' in properties ? !!properties.alpha : this._properties[4];\n        }\n    }\n\n    /**\n     * Updates the object transform for rendering\n     *\n     * @private\n     */\n    updateTransform()\n    {\n        // TODO don't need to!\n        this.displayObjectUpdateTransform();\n        //  PIXI.Container.prototype.updateTransform.call( this );\n    }\n\n    /**\n     * Renders the container using the WebGL renderer\n     *\n     * @private\n     * @param {PIXI.WebGLRenderer} renderer - The webgl renderer\n     */\n    renderWebGL(renderer)\n    {\n        if (!this.visible || this.worldAlpha <= 0 || !this.children.length || !this.renderable)\n        {\n            return;\n        }\n\n        if (!this.baseTexture)\n        {\n            this.baseTexture = this.children[0]._texture.baseTexture;\n            if (!this.baseTexture.hasLoaded)\n            {\n                this.baseTexture.once('update', () => this.onChildrenChange(0));\n            }\n        }\n\n        renderer.setObjectRenderer(renderer.plugins.particle);\n        renderer.plugins.particle.render(this);\n    }\n\n    /**\n     * Set the flag that static data should be updated to true\n     *\n     * @private\n     * @param {number} smallestChildIndex - The smallest child index\n     */\n    onChildrenChange(smallestChildIndex)\n    {\n        const bufferIndex = Math.floor(smallestChildIndex / this._batchSize);\n\n        if (bufferIndex < this._bufferToUpdate)\n        {\n            this._bufferToUpdate = bufferIndex;\n        }\n    }\n\n    /**\n     * Renders the object using the Canvas renderer\n     *\n     * @private\n     * @param {PIXI.CanvasRenderer} renderer - The canvas renderer\n     */\n    renderCanvas(renderer)\n    {\n        if (!this.visible || this.worldAlpha <= 0 || !this.children.length || !this.renderable)\n        {\n            return;\n        }\n\n        const context = renderer.context;\n        const transform = this.worldTransform;\n        let isRotated = true;\n\n        let positionX = 0;\n        let positionY = 0;\n\n        let finalWidth = 0;\n        let finalHeight = 0;\n\n        const compositeOperation = renderer.blendModes[this.blendMode];\n\n        if (compositeOperation !== context.globalCompositeOperation)\n        {\n            context.globalCompositeOperation = compositeOperation;\n        }\n\n        context.globalAlpha = this.worldAlpha;\n\n        this.displayObjectUpdateTransform();\n\n        for (let i = 0; i < this.children.length; ++i)\n        {\n            const child = this.children[i];\n\n            if (!child.visible)\n            {\n                continue;\n            }\n\n            const frame = child.texture.frame;\n\n            context.globalAlpha = this.worldAlpha * child.alpha;\n\n            if (child.rotation % (Math.PI * 2) === 0)\n            {\n                // this is the fastest  way to optimise! - if rotation is 0 then we can avoid any kind of setTransform call\n                if (isRotated)\n                {\n                    context.setTransform(\n                        transform.a,\n                        transform.b,\n                        transform.c,\n                        transform.d,\n                        transform.tx * renderer.resolution,\n                        transform.ty * renderer.resolution\n                    );\n\n                    isRotated = false;\n                }\n\n                positionX = ((child.anchor.x) * (-frame.width * child.scale.x)) + child.position.x + 0.5;\n                positionY = ((child.anchor.y) * (-frame.height * child.scale.y)) + child.position.y + 0.5;\n\n                finalWidth = frame.width * child.scale.x;\n                finalHeight = frame.height * child.scale.y;\n            }\n            else\n            {\n                if (!isRotated)\n                {\n                    isRotated = true;\n                }\n\n                child.displayObjectUpdateTransform();\n\n                const childTransform = child.worldTransform;\n\n                if (renderer.roundPixels)\n                {\n                    context.setTransform(\n                        childTransform.a,\n                        childTransform.b,\n                        childTransform.c,\n                        childTransform.d,\n                        (childTransform.tx * renderer.resolution) | 0,\n                        (childTransform.ty * renderer.resolution) | 0\n                    );\n                }\n                else\n                {\n                    context.setTransform(\n                        childTransform.a,\n                        childTransform.b,\n                        childTransform.c,\n                        childTransform.d,\n                        childTransform.tx * renderer.resolution,\n                        childTransform.ty * renderer.resolution\n                    );\n                }\n\n                positionX = ((child.anchor.x) * (-frame.width)) + 0.5;\n                positionY = ((child.anchor.y) * (-frame.height)) + 0.5;\n\n                finalWidth = frame.width;\n                finalHeight = frame.height;\n            }\n\n            const resolution = child.texture.baseTexture.resolution;\n\n            context.drawImage(\n                child.texture.baseTexture.source,\n                frame.x * resolution,\n                frame.y * resolution,\n                frame.width * resolution,\n                frame.height * resolution,\n                positionX * resolution,\n                positionY * resolution,\n                finalWidth * resolution,\n                finalHeight * resolution\n            );\n        }\n    }\n\n    /**\n     * Destroys the container\n     *\n     * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have their\n     *  destroy method called as well. 'options' will be passed on to those calls.\n     */\n    destroy(options)\n    {\n        super.destroy(options);\n\n        if (this._buffers)\n        {\n            for (let i = 0; i < this._buffers.length; ++i)\n            {\n                this._buffers[i].destroy();\n            }\n        }\n\n        this._properties = null;\n        this._buffers = null;\n    }\n}\n"]}