{"version":3,"sources":["../../src/interaction/InteractionManager.js"],"names":["core","Object","assign","DisplayObject","prototype","InteractionManager","renderer","options","autoPreventDefault","undefined","interactionFrequency","mouse","global","set","pointer","eventData","interactiveDataPool","interactionDOMElement","moveWhenInside","eventsAdded","mouseOverRenderer","supportsTouchEvents","window","supportsPointerEvents","PointerEvent","normalizeTouchEvents","normalizeMouseEvents","any","onMouseUp","bind","processMouseUp","onMouseDown","processMouseDown","onMouseMove","processMouseMove","onMouseOut","processMouseOverOut","onMouseOver","onPointerUp","processPointerUp","onPointerDown","processPointerDown","onPointerMove","processPointerMove","onPointerOut","processPointerOverOut","onPointerOver","onTouchStart","processTouchStart","onTouchEnd","processTouchEnd","onTouchMove","processTouchMove","defaultCursorStyle","currentCursorStyle","_tempPoint","Point","resolution","setTargetElement","view","element","removeEvents","addEvents","ticker","shared","add","update","navigator","msPointerEnabled","style","document","addEventListener","remove","removeEventListener","deltaTime","_deltaTime","didMove","cursor","_reset","processInteractive","_lastObjectRendered","dispatchEvent","displayObject","eventString","stopped","currentTarget","type","emit","mapPositionToPoint","point","x","y","rect","parentElement","width","height","getBoundingClientRect","resolutionMultiplier","isCocoonJS","left","top","func","hitTest","interactive","visible","hit","interactiveParent","hitArea","_mask","containsPoint","filterArea","contains","interactiveChildren","children","i","length","child","parent","worldTransform","applyInverse","target","event","originalEvent","data","clientX","clientY","preventDefault","isRightButton","button","which","e","isDown","_mouseOver","buttonMode","defaultCursor","normalizeToPointerData","_pointerDown","changedTouches","_pointerOver","cLength","touch","touchData","getTouchData","returnTouchData","_touchDown","touchEvent","pop","identifier","globalX","globalY","push","touches","buttons","isPrimary","radiusX","radiusY","tiltX","tiltY","pointerType","pointerId","pressure","force","rotation","rotationAngle","pageX","pageY","screenX","screenY","layerX","offsetX","layerY","offsetY","destroy","removeAllListeners","WebGLRenderer","registerPlugin","CanvasRenderer"],"mappings":"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","file":"InteractionManager.js","sourcesContent":["import * as core from '../core';\nimport InteractionData from './InteractionData';\nimport InteractionEvent from './InteractionEvent';\nimport EventEmitter from 'eventemitter3';\nimport interactiveTarget from './interactiveTarget';\nimport MobileDevice from 'ismobilejs';\n\n// Mix interactiveTarget into core.DisplayObject.prototype\nObject.assign(\n    core.DisplayObject.prototype,\n    interactiveTarget\n);\n\n/**\n * The interaction manager deals with mouse and touch events. Any DisplayObject can be interactive\n * if its interactive parameter is set to true\n * This manager also supports multitouch.\n *\n * @class\n * @extends EventEmitter\n * @memberof PIXI.interaction\n */\nexport default class InteractionManager extends EventEmitter\n{\n    /**\n     * @param {PIXI.CanvasRenderer|PIXI.WebGLRenderer} renderer - A reference to the current renderer\n     * @param {object} [options] - The options for the manager.\n     * @param {boolean} [options.autoPreventDefault=true] - Should the manager automatically prevent default browser actions.\n     * @param {number} [options.interactionFrequency=10] - Frequency increases the interaction events will be checked.\n     */\n    constructor(renderer, options)\n    {\n        super();\n\n        options = options || {};\n\n        /**\n         * The renderer this interaction manager works for.\n         *\n         * @member {PIXI.SystemRenderer}\n         */\n        this.renderer = renderer;\n\n        /**\n         * Should default browser actions automatically be prevented.\n         * Does not apply to pointer events for backwards compatibility\n         * preventDefault on pointer events stops mouse events from firing\n         * Thus, for every pointer event, there will always be either a mouse of touch event alongside it.\n         *\n         * @member {boolean}\n         * @default true\n         */\n        this.autoPreventDefault = options.autoPreventDefault !== undefined ? options.autoPreventDefault : true;\n\n        /**\n         * As this frequency increases the interaction events will be checked more often.\n         *\n         * @member {number}\n         * @default 10\n         */\n        this.interactionFrequency = options.interactionFrequency || 10;\n\n        /**\n         * The mouse data\n         *\n         * @member {PIXI.interaction.InteractionData}\n         */\n        this.mouse = new InteractionData();\n\n        // setting the mouse to start off far off screen will mean that mouse over does\n        //  not get called before we even move the mouse.\n        this.mouse.global.set(-999999);\n\n        /**\n         * The pointer data\n         *\n         * @member {PIXI.interaction.InteractionData}\n         */\n        this.pointer = new InteractionData();\n\n        // setting the pointer to start off far off screen will mean that pointer over does\n        //  not get called before we even move the pointer.\n        this.pointer.global.set(-999999);\n\n        /**\n         * An event data object to handle all the event tracking/dispatching\n         *\n         * @member {object}\n         */\n        this.eventData = new InteractionEvent();\n\n        /**\n         * Tiny little interactiveData pool !\n         *\n         * @member {PIXI.interaction.InteractionData[]}\n         */\n        this.interactiveDataPool = [];\n\n        /**\n         * The DOM element to bind to.\n         *\n         * @private\n         * @member {HTMLElement}\n         */\n        this.interactionDOMElement = null;\n\n        /**\n         * This property determines if mousemove and touchmove events are fired only when the cursror\n         * is over the object.\n         * Setting to true will make things work more in line with how the DOM verison works.\n         * Setting to false can make things easier for things like dragging\n         * It is currently set to false as this is how pixi used to work. This will be set to true in\n         * future versions of pixi.\n         *\n         * @member {boolean} moveWhenInside\n         * @memberof PIXI.interaction.InteractionManager#\n         * @default false\n         */\n        this.moveWhenInside = false;\n\n        /**\n         * Have events been attached to the dom element?\n         *\n         * @private\n         * @member {boolean}\n         */\n        this.eventsAdded = false;\n\n        /**\n         * Is the mouse hovering over the renderer?\n         *\n         * @private\n         * @member {boolean}\n         */\n        this.mouseOverRenderer = false;\n\n        /**\n         * Does the device support touch events\n         * https://www.w3.org/TR/touch-events/\n         *\n         * @readonly\n         * @member {boolean}\n         */\n        this.supportsTouchEvents = 'ontouchstart' in window;\n\n        /**\n         * Does the device support pointer events\n         * https://www.w3.org/Submission/pointer-events/\n         *\n         * @readonly\n         * @member {boolean}\n         */\n        this.supportsPointerEvents = !!window.PointerEvent;\n\n        /**\n         * Are touch events being 'normalized' and converted into pointer events if pointer events are not supported\n         * For example, on a touch screen mobile device, a touchstart would also be emitted as a pointerdown\n         *\n         * @private\n         * @readonly\n         * @member {boolean}\n         */\n        this.normalizeTouchEvents = !this.supportsPointerEvents && this.supportsTouchEvents;\n\n        /**\n         * Are mouse events being 'normalized' and converted into pointer events if pointer events are not supported\n         * For example, on a desktop pc, a mousedown would also be emitted as a pointerdown\n         *\n         * @private\n         * @readonly\n         * @member {boolean}\n         */\n        this.normalizeMouseEvents = !this.supportsPointerEvents && !MobileDevice.any;\n\n        // this will make it so that you don't have to call bind all the time\n\n        /**\n         * @private\n         * @member {Function}\n         */\n        this.onMouseUp = this.onMouseUp.bind(this);\n        this.processMouseUp = this.processMouseUp.bind(this);\n\n        /**\n         * @private\n         * @member {Function}\n         */\n        this.onMouseDown = this.onMouseDown.bind(this);\n        this.processMouseDown = this.processMouseDown.bind(this);\n\n        /**\n         * @private\n         * @member {Function}\n         */\n        this.onMouseMove = this.onMouseMove.bind(this);\n        this.processMouseMove = this.processMouseMove.bind(this);\n\n        /**\n         * @private\n         * @member {Function}\n         */\n        this.onMouseOut = this.onMouseOut.bind(this);\n        this.processMouseOverOut = this.processMouseOverOut.bind(this);\n\n        /**\n        * @private\n        * @member {Function}\n        */\n        this.onMouseOver = this.onMouseOver.bind(this);\n\n        /**\n         * @private\n         * @member {Function}\n         */\n        this.onPointerUp = this.onPointerUp.bind(this);\n        this.processPointerUp = this.processPointerUp.bind(this);\n\n        /**\n         * @private\n         * @member {Function}\n         */\n        this.onPointerDown = this.onPointerDown.bind(this);\n        this.processPointerDown = this.processPointerDown.bind(this);\n\n        /**\n         * @private\n         * @member {Function}\n         */\n        this.onPointerMove = this.onPointerMove.bind(this);\n        this.processPointerMove = this.processPointerMove.bind(this);\n\n        /**\n         * @private\n         * @member {Function}\n         */\n        this.onPointerOut = this.onPointerOut.bind(this);\n        this.processPointerOverOut = this.processPointerOverOut.bind(this);\n\n        /**\n         * @private\n         * @member {Function}\n         */\n        this.onPointerOver = this.onPointerOver.bind(this);\n\n        /**\n         * @private\n         * @member {Function}\n         */\n        this.onTouchStart = this.onTouchStart.bind(this);\n        this.processTouchStart = this.processTouchStart.bind(this);\n\n        /**\n         * @private\n         * @member {Function}\n         */\n        this.onTouchEnd = this.onTouchEnd.bind(this);\n        this.processTouchEnd = this.processTouchEnd.bind(this);\n\n        /**\n         * @private\n         * @member {Function}\n         */\n        this.onTouchMove = this.onTouchMove.bind(this);\n        this.processTouchMove = this.processTouchMove.bind(this);\n\n        /**\n         * Every update cursor will be reset to this value, if some element wont override it in\n         * its hitTest.\n         *\n         * @member {string}\n         * @default 'inherit'\n         */\n        this.defaultCursorStyle = 'inherit';\n\n        /**\n         * The css style of the cursor that is being used.\n         *\n         * @member {string}\n         */\n        this.currentCursorStyle = 'inherit';\n\n        /**\n         * Internal cached let.\n         *\n         * @private\n         * @member {PIXI.Point}\n         */\n        this._tempPoint = new core.Point();\n\n        /**\n         * The current resolution / device pixel ratio.\n         *\n         * @member {number}\n         * @default 1\n         */\n        this.resolution = 1;\n\n        this.setTargetElement(this.renderer.view, this.renderer.resolution);\n\n        /**\n         * Fired when a pointer device button (usually a mouse button) is pressed on the display\n         * object.\n         *\n         * @event mousedown\n         * @memberof PIXI.interaction.InteractionManager#\n         */\n\n        /**\n         * Fired when a pointer device secondary button (usually a mouse right-button) is pressed\n         * on the display object.\n         *\n         * @event rightdown\n         * @memberof PIXI.interaction.InteractionManager#\n         */\n\n        /**\n         * Fired when a pointer device button (usually a mouse button) is released over the display\n         * object.\n         *\n         * @event mouseup\n         * @memberof PIXI.interaction.InteractionManager#\n         */\n\n        /**\n         * Fired when a pointer device secondary button (usually a mouse right-button) is released\n         * over the display object.\n         *\n         * @event rightup\n         * @memberof PIXI.interaction.InteractionManager#\n         */\n\n        /**\n         * Fired when a pointer device button (usually a mouse button) is pressed and released on\n         * the display object.\n         *\n         * @event click\n         * @memberof PIXI.interaction.InteractionManager#\n         */\n\n        /**\n         * Fired when a pointer device secondary button (usually a mouse right-button) is pressed\n         * and released on the display object.\n         *\n         * @event rightclick\n         * @memberof PIXI.interaction.InteractionManager#\n         */\n\n        /**\n         * Fired when a pointer device button (usually a mouse button) is released outside the\n         * display object that initially registered a\n         * [mousedown]{@link PIXI.interaction.InteractionManager#event:mousedown}.\n         *\n         * @event mouseupoutside\n         * @memberof PIXI.interaction.InteractionManager#\n         */\n\n        /**\n         * Fired when a pointer device secondary button (usually a mouse right-button) is released\n         * outside the display object that initially registered a\n         * [rightdown]{@link PIXI.interaction.InteractionManager#event:rightdown}.\n         *\n         * @event rightupoutside\n         * @memberof PIXI.interaction.InteractionManager#\n         */\n\n        /**\n         * Fired when a pointer device (usually a mouse) is moved while over the display object\n         *\n         * @event mousemove\n         * @memberof PIXI.interaction.InteractionManager#\n         */\n\n        /**\n         * Fired when a pointer device (usually a mouse) is moved onto the display object\n         *\n         * @event mouseover\n         * @memberof PIXI.interaction.InteractionManager#\n         */\n\n        /**\n         * Fired when a pointer device (usually a mouse) is moved off the display object\n         *\n         * @event mouseout\n         * @memberof PIXI.interaction.InteractionManager#\n         */\n\n        /**\n         * Fired when a pointer device button is pressed on the display object.\n         *\n         * @event pointerdown\n         * @memberof PIXI.interaction.InteractionManager#\n         */\n\n        /**\n         * Fired when a pointer device button is released over the display object.\n         *\n         * @event pointerup\n         * @memberof PIXI.interaction.InteractionManager#\n         */\n\n        /**\n         * Fired when a pointer device button is pressed and released on the display object.\n         *\n         * @event pointertap\n         * @memberof PIXI.interaction.InteractionManager#\n         */\n\n        /**\n         * Fired when a pointer device button is released outside the display object that initially\n         * registered a [pointerdown]{@link PIXI.interaction.InteractionManager#event:pointerdown}.\n         *\n         * @event pointerupoutside\n         * @memberof PIXI.interaction.InteractionManager#\n         */\n\n        /**\n         * Fired when a pointer device is moved while over the display object\n         *\n         * @event pointermove\n         * @memberof PIXI.interaction.InteractionManager#\n         */\n\n        /**\n         * Fired when a pointer device is moved onto the display object\n         *\n         * @event pointerover\n         * @memberof PIXI.interaction.InteractionManager#\n         */\n\n        /**\n         * Fired when a pointer device is moved off the display object\n         *\n         * @event pointerout\n         * @memberof PIXI.interaction.InteractionManager#\n         */\n\n        /**\n         * Fired when a touch point is placed on the display object.\n         *\n         * @event touchstart\n         * @memberof PIXI.interaction.InteractionManager#\n         */\n\n        /**\n         * Fired when a touch point is removed from the display object.\n         *\n         * @event touchend\n         * @memberof PIXI.interaction.InteractionManager#\n         */\n\n        /**\n         * Fired when a touch point is placed and removed from the display object.\n         *\n         * @event tap\n         * @memberof PIXI.interaction.InteractionManager#\n         */\n\n        /**\n         * Fired when a touch point is removed outside of the display object that initially\n         * registered a [touchstart]{@link PIXI.interaction.InteractionManager#event:touchstart}.\n         *\n         * @event touchendoutside\n         * @memberof PIXI.interaction.InteractionManager#\n         */\n\n        /**\n         * Fired when a touch point is moved along the display object.\n         *\n         * @event touchmove\n         * @memberof PIXI.interaction.InteractionManager#\n         */\n    }\n\n    /**\n     * Sets the DOM element which will receive mouse/touch events. This is useful for when you have\n     * other DOM elements on top of the renderers Canvas element. With this you'll be bale to deletegate\n     * another DOM element to receive those events.\n     *\n     * @param {HTMLCanvasElement} element - the DOM element which will receive mouse and touch events.\n     * @param {number} [resolution=1] - The resolution / device pixel ratio of the new element (relative to the canvas).\n     * @private\n     */\n    setTargetElement(element, resolution = 1)\n    {\n        this.removeEvents();\n\n        this.interactionDOMElement = element;\n\n        this.resolution = resolution;\n\n        this.addEvents();\n    }\n\n    /**\n     * Registers all the DOM events\n     *\n     * @private\n     */\n    addEvents()\n    {\n        if (!this.interactionDOMElement)\n        {\n            return;\n        }\n\n        core.ticker.shared.add(this.update, this);\n\n        if (window.navigator.msPointerEnabled)\n        {\n            this.interactionDOMElement.style['-ms-content-zooming'] = 'none';\n            this.interactionDOMElement.style['-ms-touch-action'] = 'none';\n        }\n        else if (this.supportsPointerEvents)\n        {\n            this.interactionDOMElement.style['touch-action'] = 'none';\n        }\n\n        /**\n         * These events are added first, so that if pointer events are normalised, they are fired\n         * in the same order as non-normalised events. ie. pointer event 1st, mouse / touch 2nd\n         */\n        if (this.supportsPointerEvents)\n        {\n            window.document.addEventListener('pointermove', this.onPointerMove, true);\n            this.interactionDOMElement.addEventListener('pointerdown', this.onPointerDown, true);\n            this.interactionDOMElement.addEventListener('pointerout', this.onPointerOut, true);\n            this.interactionDOMElement.addEventListener('pointerover', this.onPointerOver, true);\n            window.addEventListener('pointerup', this.onPointerUp, true);\n        }\n        else\n        {\n            /**\n             * If pointer events aren't available on a device, this will turn either the touch or\n             * mouse events into pointer events. This allows a developer to just listen for emitted\n             * pointer events on interactive sprites\n             */\n            if (this.normalizeTouchEvents)\n            {\n                this.interactionDOMElement.addEventListener('touchstart', this.onPointerDown, true);\n                this.interactionDOMElement.addEventListener('touchend', this.onPointerUp, true);\n                this.interactionDOMElement.addEventListener('touchmove', this.onPointerMove, true);\n            }\n\n            if (this.normalizeMouseEvents)\n            {\n                window.document.addEventListener('mousemove', this.onPointerMove, true);\n                this.interactionDOMElement.addEventListener('mousedown', this.onPointerDown, true);\n                this.interactionDOMElement.addEventListener('mouseout', this.onPointerOut, true);\n                this.interactionDOMElement.addEventListener('mouseover', this.onPointerOver, true);\n                window.addEventListener('mouseup', this.onPointerUp, true);\n            }\n        }\n\n        window.document.addEventListener('mousemove', this.onMouseMove, true);\n        this.interactionDOMElement.addEventListener('mousedown', this.onMouseDown, true);\n        this.interactionDOMElement.addEventListener('mouseout', this.onMouseOut, true);\n        this.interactionDOMElement.addEventListener('mouseover', this.onMouseOver, true);\n        window.addEventListener('mouseup', this.onMouseUp, true);\n\n        if (this.supportsTouchEvents)\n        {\n            this.interactionDOMElement.addEventListener('touchstart', this.onTouchStart, true);\n            this.interactionDOMElement.addEventListener('touchend', this.onTouchEnd, true);\n            this.interactionDOMElement.addEventListener('touchmove', this.onTouchMove, true);\n        }\n\n        this.eventsAdded = true;\n    }\n\n    /**\n     * Removes all the DOM events that were previously registered\n     *\n     * @private\n     */\n    removeEvents()\n    {\n        if (!this.interactionDOMElement)\n        {\n            return;\n        }\n\n        core.ticker.shared.remove(this.update, this);\n\n        if (window.navigator.msPointerEnabled)\n        {\n            this.interactionDOMElement.style['-ms-content-zooming'] = '';\n            this.interactionDOMElement.style['-ms-touch-action'] = '';\n        }\n        else if (this.supportsPointerEvents)\n        {\n            this.interactionDOMElement.style['touch-action'] = '';\n        }\n\n        if (this.supportsPointerEvents)\n        {\n            window.document.removeEventListener('pointermove', this.onPointerMove, true);\n            this.interactionDOMElement.removeEventListener('pointerdown', this.onPointerDown, true);\n            this.interactionDOMElement.removeEventListener('pointerout', this.onPointerOut, true);\n            this.interactionDOMElement.removeEventListener('pointerover', this.onPointerOver, true);\n            window.removeEventListener('pointerup', this.onPointerUp, true);\n        }\n        else\n        {\n            /**\n             * If pointer events aren't available on a device, this will turn either the touch or\n             * mouse events into pointer events. This allows a developer to just listen for emitted\n             * pointer events on interactive sprites\n             */\n            if (this.normalizeTouchEvents)\n            {\n                this.interactionDOMElement.removeEventListener('touchstart', this.onPointerDown, true);\n                this.interactionDOMElement.removeEventListener('touchend', this.onPointerUp, true);\n                this.interactionDOMElement.removeEventListener('touchmove', this.onPointerMove, true);\n            }\n\n            if (this.normalizeMouseEvents)\n            {\n                window.document.removeEventListener('mousemove', this.onPointerMove, true);\n                this.interactionDOMElement.removeEventListener('mousedown', this.onPointerDown, true);\n                this.interactionDOMElement.removeEventListener('mouseout', this.onPointerOut, true);\n                this.interactionDOMElement.removeEventListener('mouseover', this.onPointerOver, true);\n                window.removeEventListener('mouseup', this.onPointerUp, true);\n            }\n        }\n\n        window.document.removeEventListener('mousemove', this.onMouseMove, true);\n        this.interactionDOMElement.removeEventListener('mousedown', this.onMouseDown, true);\n        this.interactionDOMElement.removeEventListener('mouseout', this.onMouseOut, true);\n        this.interactionDOMElement.removeEventListener('mouseover', this.onMouseOver, true);\n        window.removeEventListener('mouseup', this.onMouseUp, true);\n\n        if (this.supportsTouchEvents)\n        {\n            this.interactionDOMElement.removeEventListener('touchstart', this.onTouchStart, true);\n            this.interactionDOMElement.removeEventListener('touchend', this.onTouchEnd, true);\n            this.interactionDOMElement.removeEventListener('touchmove', this.onTouchMove, true);\n        }\n\n        this.interactionDOMElement = null;\n\n        this.eventsAdded = false;\n    }\n\n    /**\n     * Updates the state of interactive objects.\n     * Invoked by a throttled ticker update from {@link PIXI.ticker.shared}.\n     *\n     * @param {number} deltaTime - time delta since last tick\n     */\n    update(deltaTime)\n    {\n        this._deltaTime += deltaTime;\n\n        if (this._deltaTime < this.interactionFrequency)\n        {\n            return;\n        }\n\n        this._deltaTime = 0;\n\n        if (!this.interactionDOMElement)\n        {\n            return;\n        }\n\n        // if the user move the mouse this check has already been dfone using the mouse move!\n        if (this.didMove)\n        {\n            this.didMove = false;\n\n            return;\n        }\n\n        this.cursor = this.defaultCursorStyle;\n\n        // Resets the flag as set by a stopPropagation call. This flag is usually reset by a user interaction of any kind,\n        // but there was a scenario of a display object moving under a static mouse cursor.\n        // In this case, mouseover and mouseevents would not pass the flag test in dispatchEvent function\n        this.eventData._reset();\n\n        this.processInteractive(this.mouse.global, this.renderer._lastObjectRendered, this.processMouseOverOut, true);\n\n        if (this.currentCursorStyle !== this.cursor)\n        {\n            this.currentCursorStyle = this.cursor;\n            this.interactionDOMElement.style.cursor = this.cursor;\n        }\n\n        // TODO\n    }\n\n    /**\n     * Dispatches an event on the display object that was interacted with\n     *\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - the display object in question\n     * @param {string} eventString - the name of the event (e.g, mousedown)\n     * @param {object} eventData - the event data object\n     * @private\n     */\n    dispatchEvent(displayObject, eventString, eventData)\n    {\n        if (!eventData.stopped)\n        {\n            eventData.currentTarget = displayObject;\n            eventData.type = eventString;\n\n            displayObject.emit(eventString, eventData);\n\n            if (displayObject[eventString])\n            {\n                displayObject[eventString](eventData);\n            }\n        }\n    }\n\n    /**\n     * Maps x and y coords from a DOM object and maps them correctly to the pixi view. The\n     * resulting value is stored in the point. This takes into account the fact that the DOM\n     * element could be scaled and positioned anywhere on the screen.\n     *\n     * @param  {PIXI.Point} point - the point that the result will be stored in\n     * @param  {number} x - the x coord of the position to map\n     * @param  {number} y - the y coord of the position to map\n     */\n    mapPositionToPoint(point, x, y)\n    {\n        let rect;\n\n        // IE 11 fix\n        if (!this.interactionDOMElement.parentElement)\n        {\n            rect = { x: 0, y: 0, width: 0, height: 0 };\n        }\n        else\n        {\n            rect = this.interactionDOMElement.getBoundingClientRect();\n        }\n\n        const resolutionMultiplier = navigator.isCocoonJS ? this.resolution : (1.0 / this.resolution);\n\n        point.x = ((x - rect.left) * (this.interactionDOMElement.width / rect.width)) * resolutionMultiplier;\n        point.y = ((y - rect.top) * (this.interactionDOMElement.height / rect.height)) * resolutionMultiplier;\n    }\n\n    /**\n     * This function is provides a neat way of crawling through the scene graph and running a\n     * specified function on all interactive objects it finds. It will also take care of hit\n     * testing the interactive objects and passes the hit across in the function.\n     *\n     * @param {PIXI.Point} point - the point that is tested for collision\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - the displayObject\n     *  that will be hit test (recursively crawls its children)\n     * @param {Function} [func] - the function that will be called on each interactive object. The\n     *  displayObject and hit will be passed to the function\n     * @param {boolean} [hitTest] - this indicates if the objects inside should be hit test against the point\n     * @param {boolean} [interactive] - Whether the displayObject is interactive\n     * @return {boolean} returns true if the displayObject hit the point\n     */\n    processInteractive(point, displayObject, func, hitTest, interactive)\n    {\n        if (!displayObject || !displayObject.visible)\n        {\n            return false;\n        }\n\n        // Took a little while to rework this function correctly! But now it is done and nice and optimised. ^_^\n        //\n        // This function will now loop through all objects and then only hit test the objects it HAS\n        // to, not all of them. MUCH faster..\n        // An object will be hit test if the following is true:\n        //\n        // 1: It is interactive.\n        // 2: It belongs to a parent that is interactive AND one of the parents children have not already been hit.\n        //\n        // As another little optimisation once an interactive object has been hit we can carry on\n        // through the scenegraph, but we know that there will be no more hits! So we can avoid extra hit tests\n        // A final optimisation is that an object is not hit test directly if a child has already been hit.\n\n        interactive = displayObject.interactive || interactive;\n\n        let hit = false;\n        let interactiveParent = interactive;\n\n        // if the displayobject has a hitArea, then it does not need to hitTest children.\n        if (displayObject.hitArea)\n        {\n            interactiveParent = false;\n        }\n\n        // it has a mask! Then lets hit test that before continuing..\n        if (hitTest && displayObject._mask)\n        {\n            if (!displayObject._mask.containsPoint(point))\n            {\n                hitTest = false;\n            }\n        }\n\n        // it has a filterArea! Same as mask but easier, its a rectangle\n        if (hitTest && displayObject.filterArea)\n        {\n            if (!displayObject.filterArea.contains(point.x, point.y))\n            {\n                hitTest = false;\n            }\n        }\n\n        // ** FREE TIP **! If an object is not interactive or has no buttons in it\n        // (such as a game scene!) set interactiveChildren to false for that displayObject.\n        // This will allow pixi to completely ignore and bypass checking the displayObjects children.\n        if (displayObject.interactiveChildren && displayObject.children)\n        {\n            const children = displayObject.children;\n\n            for (let i = children.length - 1; i >= 0; i--)\n            {\n                const child = children[i];\n\n                // time to get recursive.. if this function will return if something is hit..\n                if (this.processInteractive(point, child, func, hitTest, interactiveParent))\n                {\n                    // its a good idea to check if a child has lost its parent.\n                    // this means it has been removed whilst looping so its best\n                    if (!child.parent)\n                    {\n                        continue;\n                    }\n\n                    hit = true;\n\n                    // we no longer need to hit test any more objects in this container as we we\n                    // now know the parent has been hit\n                    interactiveParent = false;\n\n                    // If the child is interactive , that means that the object hit was actually\n                    // interactive and not just the child of an interactive object.\n                    // This means we no longer need to hit test anything else. We still need to run\n                    // through all objects, but we don't need to perform any hit tests.\n\n                    // {\n                    hitTest = false;\n                    // }\n\n                    // we can break now as we have hit an object.\n                }\n            }\n        }\n\n        // no point running this if the item is not interactive or does not have an interactive parent.\n        if (interactive)\n        {\n            // if we are hit testing (as in we have no hit any objects yet)\n            // We also don't need to worry about hit testing if once of the displayObjects children\n            // has already been hit!\n            if (hitTest && !hit)\n            {\n                if (displayObject.hitArea)\n                {\n                    displayObject.worldTransform.applyInverse(point, this._tempPoint);\n                    hit = displayObject.hitArea.contains(this._tempPoint.x, this._tempPoint.y);\n                }\n                else if (displayObject.containsPoint)\n                {\n                    hit = displayObject.containsPoint(point);\n                }\n            }\n\n            if (displayObject.interactive)\n            {\n                if (hit && !this.eventData.target)\n                {\n                    this.eventData.target = displayObject;\n                    this.mouse.target = displayObject;\n                    this.pointer.target = displayObject;\n                }\n\n                func(displayObject, hit);\n            }\n        }\n\n        return hit;\n    }\n\n    /**\n     * Is called when the mouse button is pressed down on the renderer element\n     *\n     * @private\n     * @param {MouseEvent} event - The DOM event of a mouse button being pressed down\n     */\n    onMouseDown(event)\n    {\n        this.mouse.originalEvent = event;\n        this.eventData.data = this.mouse;\n        this.eventData._reset();\n\n        // Update internal mouse reference\n        this.mapPositionToPoint(this.mouse.global, event.clientX, event.clientY);\n\n        if (this.autoPreventDefault)\n        {\n            this.mouse.originalEvent.preventDefault();\n        }\n\n        this.processInteractive(this.mouse.global, this.renderer._lastObjectRendered, this.processMouseDown, true);\n\n        const isRightButton = event.button === 2 || event.which === 3;\n\n        this.emit(isRightButton ? 'rightdown' : 'mousedown', this.eventData);\n    }\n\n    /**\n     * Processes the result of the mouse down check and dispatches the event if need be\n     *\n     * @private\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - The display object that was tested\n     * @param {boolean} hit - the result of the hit test on the display object\n     */\n    processMouseDown(displayObject, hit)\n    {\n        const e = this.mouse.originalEvent;\n\n        const isRightButton = e.button === 2 || e.which === 3;\n\n        if (hit)\n        {\n            displayObject[isRightButton ? '_isRightDown' : '_isLeftDown'] = true;\n            this.dispatchEvent(displayObject, isRightButton ? 'rightdown' : 'mousedown', this.eventData);\n        }\n    }\n\n    /**\n     * Is called when the mouse button is released on the renderer element\n     *\n     * @private\n     * @param {MouseEvent} event - The DOM event of a mouse button being released\n     */\n    onMouseUp(event)\n    {\n        this.mouse.originalEvent = event;\n        this.eventData.data = this.mouse;\n        this.eventData._reset();\n\n        // Update internal mouse reference\n        this.mapPositionToPoint(this.mouse.global, event.clientX, event.clientY);\n\n        this.processInteractive(this.mouse.global, this.renderer._lastObjectRendered, this.processMouseUp, true);\n\n        const isRightButton = event.button === 2 || event.which === 3;\n\n        this.emit(isRightButton ? 'rightup' : 'mouseup', this.eventData);\n    }\n\n    /**\n     * Processes the result of the mouse up check and dispatches the event if need be\n     *\n     * @private\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - The display object that was tested\n     * @param {boolean} hit - the result of the hit test on the display object\n     */\n    processMouseUp(displayObject, hit)\n    {\n        const e = this.mouse.originalEvent;\n\n        const isRightButton = e.button === 2 || e.which === 3;\n        const isDown = isRightButton ? '_isRightDown' : '_isLeftDown';\n\n        if (hit)\n        {\n            this.dispatchEvent(displayObject, isRightButton ? 'rightup' : 'mouseup', this.eventData);\n\n            if (displayObject[isDown])\n            {\n                displayObject[isDown] = false;\n                this.dispatchEvent(displayObject, isRightButton ? 'rightclick' : 'click', this.eventData);\n            }\n        }\n        else if (displayObject[isDown])\n        {\n            displayObject[isDown] = false;\n            this.dispatchEvent(displayObject, isRightButton ? 'rightupoutside' : 'mouseupoutside', this.eventData);\n        }\n    }\n\n    /**\n     * Is called when the mouse moves across the renderer element\n     *\n     * @private\n     * @param {MouseEvent} event - The DOM event of the mouse moving\n     */\n    onMouseMove(event)\n    {\n        this.mouse.originalEvent = event;\n        this.eventData.data = this.mouse;\n        this.eventData._reset();\n\n        this.mapPositionToPoint(this.mouse.global, event.clientX, event.clientY);\n\n        this.didMove = true;\n\n        this.cursor = this.defaultCursorStyle;\n\n        this.processInteractive(this.mouse.global, this.renderer._lastObjectRendered, this.processMouseMove, true);\n\n        this.emit('mousemove', this.eventData);\n\n        if (this.currentCursorStyle !== this.cursor)\n        {\n            this.currentCursorStyle = this.cursor;\n            this.interactionDOMElement.style.cursor = this.cursor;\n        }\n\n        // TODO BUG for parents interactive object (border order issue)\n    }\n\n    /**\n     * Processes the result of the mouse move check and dispatches the event if need be\n     *\n     * @private\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - The display object that was tested\n     * @param {boolean} hit - the result of the hit test on the display object\n     */\n    processMouseMove(displayObject, hit)\n    {\n        this.processMouseOverOut(displayObject, hit);\n\n        // only display on mouse over\n        if (!this.moveWhenInside || hit)\n        {\n            this.dispatchEvent(displayObject, 'mousemove', this.eventData);\n        }\n    }\n\n    /**\n     * Is called when the mouse is moved out of the renderer element\n     *\n     * @private\n     * @param {MouseEvent} event - The DOM event of the mouse being moved out\n     */\n    onMouseOut(event)\n    {\n        this.mouseOverRenderer = false;\n\n        this.mouse.originalEvent = event;\n        this.eventData.data = this.mouse;\n        this.eventData._reset();\n\n        // Update internal mouse reference\n        this.mapPositionToPoint(this.mouse.global, event.clientX, event.clientY);\n\n        this.interactionDOMElement.style.cursor = this.defaultCursorStyle;\n\n        // TODO optimize by not check EVERY TIME! maybe half as often? //\n        this.mapPositionToPoint(this.mouse.global, event.clientX, event.clientY);\n\n        this.processInteractive(this.mouse.global, this.renderer._lastObjectRendered, this.processMouseOverOut, false);\n\n        this.emit('mouseout', this.eventData);\n    }\n\n    /**\n     * Processes the result of the mouse over/out check and dispatches the event if need be\n     *\n     * @private\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - The display object that was tested\n     * @param {boolean} hit - the result of the hit test on the display object\n     */\n    processMouseOverOut(displayObject, hit)\n    {\n        if (hit && this.mouseOverRenderer)\n        {\n            if (!displayObject._mouseOver)\n            {\n                displayObject._mouseOver = true;\n                this.dispatchEvent(displayObject, 'mouseover', this.eventData);\n            }\n\n            if (displayObject.buttonMode)\n            {\n                this.cursor = displayObject.defaultCursor;\n            }\n        }\n        else if (displayObject._mouseOver)\n        {\n            displayObject._mouseOver = false;\n            this.dispatchEvent(displayObject, 'mouseout', this.eventData);\n        }\n    }\n\n    /**\n     * Is called when the mouse enters the renderer element area\n     *\n     * @private\n     * @param {MouseEvent} event - The DOM event of the mouse moving into the renderer view\n     */\n    onMouseOver(event)\n    {\n        this.mouseOverRenderer = true;\n\n        this.mouse.originalEvent = event;\n        this.eventData.data = this.mouse;\n        this.eventData._reset();\n\n        this.emit('mouseover', this.eventData);\n    }\n\n    /**\n     * Is called when the pointer button is pressed down on the renderer element\n     *\n     * @private\n     * @param {PointerEvent} event - The DOM event of a pointer button being pressed down\n     */\n    onPointerDown(event)\n    {\n        this.normalizeToPointerData(event);\n        this.pointer.originalEvent = event;\n        this.eventData.data = this.pointer;\n        this.eventData._reset();\n\n        // Update internal pointer reference\n        this.mapPositionToPoint(this.pointer.global, event.clientX, event.clientY);\n\n        /**\n         * No need to prevent default on natural pointer events, as there are no side effects\n         * Normalized events, however, may have the double mousedown/touchstart issue on the native android browser,\n         * so still need to be prevented.\n         */\n        if (this.autoPreventDefault && (this.normalizeMouseEvents || this.normalizeTouchEvents))\n        {\n            this.pointer.originalEvent.preventDefault();\n        }\n\n        this.processInteractive(this.pointer.global, this.renderer._lastObjectRendered, this.processPointerDown, true);\n\n        this.emit('pointerdown', this.eventData);\n    }\n\n    /**\n     * Processes the result of the pointer down check and dispatches the event if need be\n     *\n     * @private\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - The display object that was tested\n     * @param {boolean} hit - the result of the hit test on the display object\n     */\n    processPointerDown(displayObject, hit)\n    {\n        if (hit)\n        {\n            displayObject._pointerDown = true;\n            this.dispatchEvent(displayObject, 'pointerdown', this.eventData);\n        }\n    }\n\n    /**\n     * Is called when the pointer button is released on the renderer element\n     *\n     * @private\n     * @param {PointerEvent} event - The DOM event of a pointer button being released\n     */\n    onPointerUp(event)\n    {\n        this.normalizeToPointerData(event);\n        this.pointer.originalEvent = event;\n        this.eventData.data = this.pointer;\n        this.eventData._reset();\n\n        // Update internal pointer reference\n        this.mapPositionToPoint(this.pointer.global, event.clientX, event.clientY);\n\n        this.processInteractive(this.pointer.global, this.renderer._lastObjectRendered, this.processPointerUp, true);\n\n        this.emit('pointerup', this.eventData);\n    }\n\n    /**\n     * Processes the result of the pointer up check and dispatches the event if need be\n     *\n     * @private\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - The display object that was tested\n     * @param {boolean} hit - the result of the hit test on the display object\n     */\n    processPointerUp(displayObject, hit)\n    {\n        if (hit)\n        {\n            this.dispatchEvent(displayObject, 'pointerup', this.eventData);\n\n            if (displayObject._pointerDown)\n            {\n                displayObject._pointerDown = false;\n                this.dispatchEvent(displayObject, 'pointertap', this.eventData);\n            }\n        }\n        else if (displayObject._pointerDown)\n        {\n            displayObject._pointerDown = false;\n            this.dispatchEvent(displayObject, 'pointerupoutside', this.eventData);\n        }\n    }\n\n    /**\n     * Is called when the pointer moves across the renderer element\n     *\n     * @private\n     * @param {PointerEvent} event - The DOM event of a pointer moving\n     */\n    onPointerMove(event)\n    {\n        this.normalizeToPointerData(event);\n        this.pointer.originalEvent = event;\n        this.eventData.data = this.pointer;\n        this.eventData._reset();\n\n        this.mapPositionToPoint(this.pointer.global, event.clientX, event.clientY);\n\n        this.processInteractive(this.pointer.global, this.renderer._lastObjectRendered, this.processPointerMove, true);\n\n        this.emit('pointermove', this.eventData);\n    }\n\n    /**\n     * Processes the result of the pointer move check and dispatches the event if need be\n     *\n     * @private\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - The display object that was tested\n     * @param {boolean} hit - the result of the hit test on the display object\n     */\n    processPointerMove(displayObject, hit)\n    {\n        if (!this.pointer.originalEvent.changedTouches)\n        {\n            this.processPointerOverOut(displayObject, hit);\n        }\n\n        if (!this.moveWhenInside || hit)\n        {\n            this.dispatchEvent(displayObject, 'pointermove', this.eventData);\n        }\n    }\n\n    /**\n     * Is called when the pointer is moved out of the renderer element\n     *\n     * @private\n     * @param {PointerEvent} event - The DOM event of a pointer being moved out\n     */\n    onPointerOut(event)\n    {\n        this.normalizeToPointerData(event);\n        this.pointer.originalEvent = event;\n        this.eventData.data = this.pointer;\n        this.eventData._reset();\n\n        // Update internal pointer reference\n        this.mapPositionToPoint(this.pointer.global, event.clientX, event.clientY);\n\n        this.processInteractive(this.pointer.global, this.renderer._lastObjectRendered, this.processPointerOverOut, false);\n\n        this.emit('pointerout', this.eventData);\n    }\n\n    /**\n     * Processes the result of the pointer over/out check and dispatches the event if need be\n     *\n     * @private\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - The display object that was tested\n     * @param {boolean} hit - the result of the hit test on the display object\n     */\n    processPointerOverOut(displayObject, hit)\n    {\n        if (hit && this.mouseOverRenderer)\n        {\n            if (!displayObject._pointerOver)\n            {\n                displayObject._pointerOver = true;\n                this.dispatchEvent(displayObject, 'pointerover', this.eventData);\n            }\n        }\n        else if (displayObject._pointerOver)\n        {\n            displayObject._pointerOver = false;\n            this.dispatchEvent(displayObject, 'pointerout', this.eventData);\n        }\n    }\n\n    /**\n     * Is called when the pointer is moved into the renderer element\n     *\n     * @private\n     * @param {PointerEvent} event - The DOM event of a pointer button being moved into the renderer view\n     */\n    onPointerOver(event)\n    {\n        this.pointer.originalEvent = event;\n        this.eventData.data = this.pointer;\n        this.eventData._reset();\n\n        this.emit('pointerover', this.eventData);\n    }\n\n    /**\n     * Is called when a touch is started on the renderer element\n     *\n     * @private\n     * @param {TouchEvent} event - The DOM event of a touch starting on the renderer view\n     */\n    onTouchStart(event)\n    {\n        if (this.autoPreventDefault)\n        {\n            event.preventDefault();\n        }\n\n        const changedTouches = event.changedTouches;\n        const cLength = changedTouches.length;\n\n        for (let i = 0; i < cLength; i++)\n        {\n            const touch = changedTouches[i];\n            const touchData = this.getTouchData(touch);\n\n            touchData.originalEvent = event;\n\n            this.eventData.data = touchData;\n            this.eventData._reset();\n\n            this.processInteractive(touchData.global, this.renderer._lastObjectRendered, this.processTouchStart, true);\n\n            this.emit('touchstart', this.eventData);\n\n            this.returnTouchData(touchData);\n        }\n    }\n\n    /**\n     * Processes the result of a touch check and dispatches the event if need be\n     *\n     * @private\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - The display object that was tested\n     * @param {boolean} hit - the result of the hit test on the display object\n     */\n    processTouchStart(displayObject, hit)\n    {\n        if (hit)\n        {\n            displayObject._touchDown = true;\n            this.dispatchEvent(displayObject, 'touchstart', this.eventData);\n        }\n    }\n\n    /**\n     * Is called when a touch ends on the renderer element\n     *\n     * @private\n     * @param {TouchEvent} event - The DOM event of a touch ending on the renderer view\n     */\n    onTouchEnd(event)\n    {\n        if (this.autoPreventDefault)\n        {\n            event.preventDefault();\n        }\n\n        const changedTouches = event.changedTouches;\n        const cLength = changedTouches.length;\n\n        for (let i = 0; i < cLength; i++)\n        {\n            const touchEvent = changedTouches[i];\n\n            const touchData = this.getTouchData(touchEvent);\n\n            touchData.originalEvent = event;\n\n            // TODO this should be passed along.. no set\n            this.eventData.data = touchData;\n            this.eventData._reset();\n\n            this.processInteractive(touchData.global, this.renderer._lastObjectRendered, this.processTouchEnd, true);\n\n            this.emit('touchend', this.eventData);\n\n            this.returnTouchData(touchData);\n        }\n    }\n\n    /**\n     * Processes the result of the end of a touch and dispatches the event if need be\n     *\n     * @private\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - The display object that was tested\n     * @param {boolean} hit - the result of the hit test on the display object\n     */\n    processTouchEnd(displayObject, hit)\n    {\n        if (hit)\n        {\n            this.dispatchEvent(displayObject, 'touchend', this.eventData);\n\n            if (displayObject._touchDown)\n            {\n                displayObject._touchDown = false;\n                this.dispatchEvent(displayObject, 'tap', this.eventData);\n            }\n        }\n        else if (displayObject._touchDown)\n        {\n            displayObject._touchDown = false;\n            this.dispatchEvent(displayObject, 'touchendoutside', this.eventData);\n        }\n    }\n\n    /**\n     * Is called when a touch is moved across the renderer element\n     *\n     * @private\n     * @param {TouchEvent} event - The DOM event of a touch moving accross the renderer view\n     */\n    onTouchMove(event)\n    {\n        if (this.autoPreventDefault)\n        {\n            event.preventDefault();\n        }\n\n        const changedTouches = event.changedTouches;\n        const cLength = changedTouches.length;\n\n        for (let i = 0; i < cLength; i++)\n        {\n            const touchEvent = changedTouches[i];\n\n            const touchData = this.getTouchData(touchEvent);\n\n            touchData.originalEvent = event;\n\n            this.eventData.data = touchData;\n            this.eventData._reset();\n\n            this.processInteractive(\n                touchData.global,\n                this.renderer._lastObjectRendered,\n                this.processTouchMove,\n                this.moveWhenInside\n            );\n\n            this.emit('touchmove', this.eventData);\n\n            this.returnTouchData(touchData);\n        }\n    }\n\n    /**\n     * Processes the result of a touch move check and dispatches the event if need be\n     *\n     * @private\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.extras.TilingSprite} displayObject - The display object that was tested\n     * @param {boolean} hit - the result of the hit test on the display object\n     */\n    processTouchMove(displayObject, hit)\n    {\n        if (!this.moveWhenInside || hit)\n        {\n            this.dispatchEvent(displayObject, 'touchmove', this.eventData);\n        }\n    }\n\n    /**\n     * Grabs an interaction data object from the internal pool\n     *\n     * @private\n     * @param {Touch} touch - The touch data we need to pair with an interactionData object\n     * @return {PIXI.interaction.InteractionData} The built data object.\n     */\n    getTouchData(touch)\n    {\n        const touchData = this.interactiveDataPool.pop() || new InteractionData();\n\n        touchData.identifier = touch.identifier;\n        this.mapPositionToPoint(touchData.global, touch.clientX, touch.clientY);\n\n        if (navigator.isCocoonJS)\n        {\n            touchData.global.x = touchData.global.x / this.resolution;\n            touchData.global.y = touchData.global.y / this.resolution;\n        }\n\n        touch.globalX = touchData.global.x;\n        touch.globalY = touchData.global.y;\n\n        return touchData;\n    }\n\n    /**\n     * Returns an interaction data object to the internal pool\n     *\n     * @private\n     * @param {PIXI.interaction.InteractionData} touchData - The touch data object we want to return to the pool\n     */\n    returnTouchData(touchData)\n    {\n        this.interactiveDataPool.push(touchData);\n    }\n\n    /**\n     * Ensures that the original event object contains all data that a regular pointer event would have\n     *\n     * @private\n     * @param {TouchEvent|MouseEvent} event - The original event data from a touch or mouse event\n     */\n    normalizeToPointerData(event)\n    {\n        if (this.normalizeTouchEvents && event.changedTouches)\n        {\n            if (typeof event.button === 'undefined') event.button = event.touches.length ? 1 : 0;\n            if (typeof event.buttons === 'undefined') event.buttons = event.touches.length ? 1 : 0;\n            if (typeof event.isPrimary === 'undefined') event.isPrimary = event.touches.length === 1;\n            if (typeof event.width === 'undefined') event.width = event.changedTouches[0].radiusX || 1;\n            if (typeof event.height === 'undefined') event.height = event.changedTouches[0].radiusY || 1;\n            if (typeof event.tiltX === 'undefined') event.tiltX = 0;\n            if (typeof event.tiltY === 'undefined') event.tiltY = 0;\n            if (typeof event.pointerType === 'undefined') event.pointerType = 'touch';\n            if (typeof event.pointerId === 'undefined') event.pointerId = event.changedTouches[0].identifier || 0;\n            if (typeof event.pressure === 'undefined') event.pressure = event.changedTouches[0].force || 0.5;\n            if (typeof event.rotation === 'undefined') event.rotation = event.changedTouches[0].rotationAngle || 0;\n\n            if (typeof event.clientX === 'undefined') event.clientX = event.changedTouches[0].clientX;\n            if (typeof event.clientY === 'undefined') event.clientY = event.changedTouches[0].clientY;\n            if (typeof event.pageX === 'undefined') event.pageX = event.changedTouches[0].pageX;\n            if (typeof event.pageY === 'undefined') event.pageY = event.changedTouches[0].pageY;\n            if (typeof event.screenX === 'undefined') event.screenX = event.changedTouches[0].screenX;\n            if (typeof event.screenY === 'undefined') event.screenY = event.changedTouches[0].screenY;\n            if (typeof event.layerX === 'undefined') event.layerX = event.offsetX = event.clientX;\n            if (typeof event.layerY === 'undefined') event.layerY = event.offsetY = event.clientY;\n        }\n        else if (this.normalizeMouseEvents)\n        {\n            if (typeof event.isPrimary === 'undefined') event.isPrimary = true;\n            if (typeof event.width === 'undefined') event.width = 1;\n            if (typeof event.height === 'undefined') event.height = 1;\n            if (typeof event.tiltX === 'undefined') event.tiltX = 0;\n            if (typeof event.tiltY === 'undefined') event.tiltY = 0;\n            if (typeof event.pointerType === 'undefined') event.pointerType = 'mouse';\n            if (typeof event.pointerId === 'undefined') event.pointerId = 1;\n            if (typeof event.pressure === 'undefined') event.pressure = 0.5;\n            if (typeof event.rotation === 'undefined') event.rotation = 0;\n        }\n    }\n\n    /**\n     * Destroys the interaction manager\n     *\n     */\n    destroy()\n    {\n        this.removeEvents();\n\n        this.removeAllListeners();\n\n        this.renderer = null;\n\n        this.mouse = null;\n\n        this.eventData = null;\n\n        this.interactiveDataPool = null;\n\n        this.interactionDOMElement = null;\n\n        this.onMouseDown = null;\n        this.processMouseDown = null;\n\n        this.onMouseUp = null;\n        this.processMouseUp = null;\n\n        this.onMouseMove = null;\n        this.processMouseMove = null;\n\n        this.onMouseOut = null;\n        this.processMouseOverOut = null;\n\n        this.onMouseOver = null;\n\n        this.onPointerDown = null;\n        this.processPointerDown = null;\n\n        this.onPointerUp = null;\n        this.processPointerUp = null;\n\n        this.onPointerMove = null;\n        this.processPointerMove = null;\n\n        this.onPointerOut = null;\n        this.processPointerOverOut = null;\n\n        this.onPointerOver = null;\n\n        this.onTouchStart = null;\n        this.processTouchStart = null;\n\n        this.onTouchEnd = null;\n        this.processTouchEnd = null;\n\n        this.onTouchMove = null;\n        this.processTouchMove = null;\n\n        this._tempPoint = null;\n    }\n}\n\ncore.WebGLRenderer.registerPlugin('interaction', InteractionManager);\ncore.CanvasRenderer.registerPlugin('interaction', InteractionManager);\n"]}