{"version":3,"sources":["../../../src/core/textures/Texture.js"],"names":["Texture","baseTexture","frame","orig","trim","rotate","noFrame","_frame","valid","requiresUpdate","_uvs","_rotate","Number","Error","hasLoaded","width","height","on","onBaseTextureUpdated","once","onBaseTextureLoaded","_updateID","transform","update","emit","destroy","destroyBase","imageUrl","off","dispose","clone","_updateUvs","set","fromImage","crossorigin","scaleMode","sourceScale","texture","fromFrame","frameId","fromCanvas","canvas","fromVideo","video","fromVideoUrl","videoUrl","fromUrl","from","source","isVideo","match","HTMLImageElement","HTMLCanvasElement","HTMLVideoElement","addTextureToCache","id","removeTextureFromCache","x","y","EMPTY","_emptyDestroy","_emptyOn","_emptyOnce","_emptyEmit"],"mappings":"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","file":"Texture.js","sourcesContent":["import BaseTexture from './BaseTexture';\nimport VideoBaseTexture from './VideoBaseTexture';\nimport TextureUvs from './TextureUvs';\nimport EventEmitter from 'eventemitter3';\nimport { Rectangle } from '../math';\nimport { TextureCache, BaseTextureCache } from '../utils';\n\n/**\n * A texture stores the information that represents an image or part of an image. It cannot be added\n * to the display list directly. Instead use it as the texture for a Sprite. If no frame is provided\n * then the whole image is used.\n *\n * You can directly create a texture from an image and then reuse it multiple times like this :\n *\n * ```js\n * let texture = PIXI.Texture.fromImage('assets/image.png');\n * let sprite1 = new PIXI.Sprite(texture);\n * let sprite2 = new PIXI.Sprite(texture);\n * ```\n *\n * Textures made from SVGs, loaded or not, cannot be used before the file finishes processing.\n * You can check for this by checking the sprite's _textureID property.\n * ```js\n * var texture = PIXI.Texture.fromImage('assets/image.svg');\n * var sprite1 = new PIXI.Sprite(texture);\n * //sprite1._textureID should not be undefined if the texture has finished processing the SVG file\n * ```\n * You can use a ticker or rAF to ensure your sprites load the finished textures after processing. See issue #3068.\n *\n * @class\n * @extends EventEmitter\n * @memberof PIXI\n */\nexport default class Texture extends EventEmitter\n{\n    /**\n     * @param {PIXI.BaseTexture} baseTexture - The base texture source to create the texture from\n     * @param {PIXI.Rectangle} [frame] - The rectangle frame of the texture to show\n     * @param {PIXI.Rectangle} [orig] - The area of original texture\n     * @param {PIXI.Rectangle} [trim] - Trimmed rectangle of original texture\n     * @param {number} [rotate] - indicates how the texture was rotated by texture packer. See {@link PIXI.GroupD8}\n     */\n    constructor(baseTexture, frame, orig, trim, rotate)\n    {\n        super();\n\n        /**\n         * Does this Texture have any frame data assigned to it?\n         *\n         * @member {boolean}\n         */\n        this.noFrame = false;\n\n        if (!frame)\n        {\n            this.noFrame = true;\n            frame = new Rectangle(0, 0, 1, 1);\n        }\n\n        if (baseTexture instanceof Texture)\n        {\n            baseTexture = baseTexture.baseTexture;\n        }\n\n        /**\n         * The base texture that this texture uses.\n         *\n         * @member {PIXI.BaseTexture}\n         */\n        this.baseTexture = baseTexture;\n\n        /**\n         * This is the area of the BaseTexture image to actually copy to the Canvas / WebGL when rendering,\n         * irrespective of the actual frame size or placement (which can be influenced by trimmed texture atlases)\n         *\n         * @member {PIXI.Rectangle}\n         */\n        this._frame = frame;\n\n        /**\n         * This is the trimmed area of original texture, before it was put in atlas\n         *\n         * @member {PIXI.Rectangle}\n         */\n        this.trim = trim;\n\n        /**\n         * This will let the renderer know if the texture is valid. If it's not then it cannot be rendered.\n         *\n         * @member {boolean}\n         */\n        this.valid = false;\n\n        /**\n         * This will let a renderer know that a texture has been updated (used mainly for webGL uv updates)\n         *\n         * @member {boolean}\n         */\n        this.requiresUpdate = false;\n\n        /**\n         * The WebGL UV data cache.\n         *\n         * @member {PIXI.TextureUvs}\n         * @private\n         */\n        this._uvs = null;\n\n        /**\n         * This is the area of original texture, before it was put in atlas\n         *\n         * @member {PIXI.Rectangle}\n         */\n        this.orig = orig || frame;// new Rectangle(0, 0, 1, 1);\n\n        this._rotate = Number(rotate || 0);\n\n        if (rotate === true)\n        {\n            // this is old texturepacker legacy, some games/libraries are passing \"true\" for rotated textures\n            this._rotate = 2;\n        }\n        else if (this._rotate % 2 !== 0)\n        {\n            throw new Error('attempt to use diamond-shaped UVs. If you are sure, set rotation manually');\n        }\n\n        if (baseTexture.hasLoaded)\n        {\n            if (this.noFrame)\n            {\n                frame = new Rectangle(0, 0, baseTexture.width, baseTexture.height);\n\n                // if there is no frame we should monitor for any base texture changes..\n                baseTexture.on('update', this.onBaseTextureUpdated, this);\n            }\n            this.frame = frame;\n        }\n        else\n        {\n            baseTexture.once('loaded', this.onBaseTextureLoaded, this);\n        }\n\n        /**\n         * Fired when the texture is updated. This happens if the frame or the baseTexture is updated.\n         *\n         * @event update\n         * @memberof PIXI.Texture#\n         * @protected\n         */\n\n        this._updateID = 0;\n\n        /**\n         * Extra field for extra plugins. May contain clamp settings and some matrices\n         * @type {Object}\n         */\n        this.transform = null;\n    }\n\n    /**\n     * Updates this texture on the gpu.\n     *\n     */\n    update()\n    {\n        this.baseTexture.update();\n    }\n\n    /**\n     * Called when the base texture is loaded\n     *\n     * @private\n     * @param {PIXI.BaseTexture} baseTexture - The base texture.\n     */\n    onBaseTextureLoaded(baseTexture)\n    {\n        this._updateID++;\n\n        // TODO this code looks confusing.. boo to abusing getters and setters!\n        if (this.noFrame)\n        {\n            this.frame = new Rectangle(0, 0, baseTexture.width, baseTexture.height);\n        }\n        else\n        {\n            this.frame = this._frame;\n        }\n\n        this.baseTexture.on('update', this.onBaseTextureUpdated, this);\n        this.emit('update', this);\n    }\n\n    /**\n     * Called when the base texture is updated\n     *\n     * @private\n     * @param {PIXI.BaseTexture} baseTexture - The base texture.\n     */\n    onBaseTextureUpdated(baseTexture)\n    {\n        this._updateID++;\n\n        this._frame.width = baseTexture.width;\n        this._frame.height = baseTexture.height;\n\n        this.emit('update', this);\n    }\n\n    /**\n     * Destroys this texture\n     *\n     * @param {boolean} [destroyBase=false] Whether to destroy the base texture as well\n     */\n    destroy(destroyBase)\n    {\n        if (this.baseTexture)\n        {\n            if (destroyBase)\n            {\n                // delete the texture if it exists in the texture cache..\n                // this only needs to be removed if the base texture is actually destroyed too..\n                if (TextureCache[this.baseTexture.imageUrl])\n                {\n                    delete TextureCache[this.baseTexture.imageUrl];\n                }\n\n                this.baseTexture.destroy();\n            }\n\n            this.baseTexture.off('update', this.onBaseTextureUpdated, this);\n            this.baseTexture.off('loaded', this.onBaseTextureLoaded, this);\n\n            this.baseTexture = null;\n        }\n\n        this._frame = null;\n        this._uvs = null;\n        this.trim = null;\n        this.orig = null;\n\n        this.valid = false;\n\n        this.off('dispose', this.dispose, this);\n        this.off('update', this.update, this);\n    }\n\n    /**\n     * Creates a new texture object that acts the same as this one.\n     *\n     * @return {PIXI.Texture} The new texture\n     */\n    clone()\n    {\n        return new Texture(this.baseTexture, this.frame, this.orig, this.trim, this.rotate);\n    }\n\n    /**\n     * Updates the internal WebGL UV cache.\n     *\n     * @protected\n     */\n    _updateUvs()\n    {\n        if (!this._uvs)\n        {\n            this._uvs = new TextureUvs();\n        }\n\n        this._uvs.set(this._frame, this.baseTexture, this.rotate);\n\n        this._updateID++;\n    }\n\n    /**\n     * Helper function that creates a Texture object from the given image url.\n     * If the image is not in the texture cache it will be  created and loaded.\n     *\n     * @static\n     * @param {string} imageUrl - The image url of the texture\n     * @param {boolean} [crossorigin] - Whether requests should be treated as crossorigin\n     * @param {number} [scaleMode=PIXI.settings.SCALE_MODE] - See {@link PIXI.SCALE_MODES} for possible values\n     * @param {number} [sourceScale=(auto)] - Scale for the original image, used with SVG images.\n     * @return {PIXI.Texture} The newly created texture\n     */\n    static fromImage(imageUrl, crossorigin, scaleMode, sourceScale)\n    {\n        let texture = TextureCache[imageUrl];\n\n        if (!texture)\n        {\n            texture = new Texture(BaseTexture.fromImage(imageUrl, crossorigin, scaleMode, sourceScale));\n            TextureCache[imageUrl] = texture;\n        }\n\n        return texture;\n    }\n\n    /**\n     * Helper function that creates a sprite that will contain a texture from the TextureCache based on the frameId\n     * The frame ids are created when a Texture packer file has been loaded\n     *\n     * @static\n     * @param {string} frameId - The frame Id of the texture in the cache\n     * @return {PIXI.Texture} The newly created texture\n     */\n    static fromFrame(frameId)\n    {\n        const texture = TextureCache[frameId];\n\n        if (!texture)\n        {\n            throw new Error(`The frameId \"${frameId}\" does not exist in the texture cache`);\n        }\n\n        return texture;\n    }\n\n    /**\n     * Helper function that creates a new Texture based on the given canvas element.\n     *\n     * @static\n     * @param {HTMLCanvasElement} canvas - The canvas element source of the texture\n     * @param {number} [scaleMode=PIXI.settings.SCALE_MODE] - See {@link PIXI.SCALE_MODES} for possible values\n     * @return {PIXI.Texture} The newly created texture\n     */\n    static fromCanvas(canvas, scaleMode)\n    {\n        return new Texture(BaseTexture.fromCanvas(canvas, scaleMode));\n    }\n\n    /**\n     * Helper function that creates a new Texture based on the given video element.\n     *\n     * @static\n     * @param {HTMLVideoElement|string} video - The URL or actual element of the video\n     * @param {number} [scaleMode=PIXI.settings.SCALE_MODE] - See {@link PIXI.SCALE_MODES} for possible values\n     * @return {PIXI.Texture} The newly created texture\n     */\n    static fromVideo(video, scaleMode)\n    {\n        if (typeof video === 'string')\n        {\n            return Texture.fromVideoUrl(video, scaleMode);\n        }\n\n        return new Texture(VideoBaseTexture.fromVideo(video, scaleMode));\n    }\n\n    /**\n     * Helper function that creates a new Texture based on the video url.\n     *\n     * @static\n     * @param {string} videoUrl - URL of the video\n     * @param {number} [scaleMode=PIXI.settings.SCALE_MODE] - See {@link PIXI.SCALE_MODES} for possible values\n     * @return {PIXI.Texture} The newly created texture\n     */\n    static fromVideoUrl(videoUrl, scaleMode)\n    {\n        return new Texture(VideoBaseTexture.fromUrl(videoUrl, scaleMode));\n    }\n\n    /**\n     * Helper function that creates a new Texture based on the source you provide.\n     * The source can be - frame id, image url, video url, canvas element, video element, base texture\n     *\n     * @static\n     * @param {number|string|PIXI.BaseTexture|HTMLCanvasElement|HTMLVideoElement} source - Source to create texture from\n     * @return {PIXI.Texture} The newly created texture\n     */\n    static from(source)\n    {\n        // TODO auto detect cross origin..\n        // TODO pass in scale mode?\n        if (typeof source === 'string')\n        {\n            const texture = TextureCache[source];\n\n            if (!texture)\n            {\n                // check if its a video..\n                const isVideo = source.match(/\\.(mp4|webm|ogg|h264|avi|mov)$/) !== null;\n\n                if (isVideo)\n                {\n                    return Texture.fromVideoUrl(source);\n                }\n\n                return Texture.fromImage(source);\n            }\n\n            return texture;\n        }\n        else if (source instanceof HTMLImageElement)\n        {\n            return new Texture(new BaseTexture(source));\n        }\n        else if (source instanceof HTMLCanvasElement)\n        {\n            return Texture.fromCanvas(source);\n        }\n        else if (source instanceof HTMLVideoElement)\n        {\n            return Texture.fromVideo(source);\n        }\n        else if (source instanceof BaseTexture)\n        {\n            return new Texture(source);\n        }\n\n        // lets assume its a texture!\n        return source;\n    }\n\n    /**\n     * Adds a texture to the global TextureCache. This cache is shared across the whole PIXI object.\n     *\n     * @static\n     * @param {PIXI.Texture} texture - The Texture to add to the cache.\n     * @param {string} id - The id that the texture will be stored against.\n     */\n    static addTextureToCache(texture, id)\n    {\n        TextureCache[id] = texture;\n    }\n\n    /**\n     * Remove a texture from the global TextureCache.\n     *\n     * @static\n     * @param {string} id - The id of the texture to be removed\n     * @return {PIXI.Texture} The texture that was removed\n     */\n    static removeTextureFromCache(id)\n    {\n        const texture = TextureCache[id];\n\n        delete TextureCache[id];\n        delete BaseTextureCache[id];\n\n        return texture;\n    }\n\n    /**\n     * The frame specifies the region of the base texture that this texture uses.\n     *\n     * @member {PIXI.Rectangle}\n     * @memberof PIXI.Texture#\n     */\n    get frame()\n    {\n        return this._frame;\n    }\n\n    /**\n     * Set the frame.\n     *\n     * @param {Rectangle} frame - The new frame to set.\n     */\n    set frame(frame)\n    {\n        this._frame = frame;\n\n        this.noFrame = false;\n\n        if (frame.x + frame.width > this.baseTexture.width || frame.y + frame.height > this.baseTexture.height)\n        {\n            throw new Error(`Texture Error: frame does not fit inside the base Texture dimensions ${this}`);\n        }\n\n        // this.valid = frame && frame.width && frame.height && this.baseTexture.source && this.baseTexture.hasLoaded;\n        this.valid = frame && frame.width && frame.height && this.baseTexture.hasLoaded;\n\n        if (!this.trim && !this.rotate)\n        {\n            this.orig = frame;\n        }\n\n        if (this.valid)\n        {\n            this._updateUvs();\n        }\n    }\n\n    /**\n     * Indicates whether the texture is rotated inside the atlas\n     * set to 2 to compensate for texture packer rotation\n     * set to 6 to compensate for spine packer rotation\n     * can be used to rotate or mirror sprites\n     * See {@link PIXI.GroupD8} for explanation\n     *\n     * @member {number}\n     */\n    get rotate()\n    {\n        return this._rotate;\n    }\n\n    /**\n     * Set the rotation\n     *\n     * @param {number} rotate - The new rotation to set.\n     */\n    set rotate(rotate)\n    {\n        this._rotate = rotate;\n        if (this.valid)\n        {\n            this._updateUvs();\n        }\n    }\n\n    /**\n     * The width of the Texture in pixels.\n     *\n     * @member {number}\n     */\n    get width()\n    {\n        return this.orig ? this.orig.width : 0;\n    }\n\n    /**\n     * The height of the Texture in pixels.\n     *\n     * @member {number}\n     */\n    get height()\n    {\n        return this.orig ? this.orig.height : 0;\n    }\n}\n\n/**\n * An empty texture, used often to not have to create multiple empty textures.\n * Can not be destroyed.\n *\n * @static\n * @constant\n */\nTexture.EMPTY = new Texture(new BaseTexture());\nTexture.EMPTY.destroy = function _emptyDestroy() { /* empty */ };\nTexture.EMPTY.on = function _emptyOn() { /* empty */ };\nTexture.EMPTY.once = function _emptyOnce() { /* empty */ };\nTexture.EMPTY.emit = function _emptyEmit() { /* empty */ };\n"]}