{"version":3,"sources":["../../../src/core/textures/BaseTexture.js"],"names":["BaseTexture","source","scaleMode","resolution","uid","touched","RESOLUTION","width","height","realWidth","realHeight","SCALE_MODE","hasLoaded","isLoading","origSource","imageType","sourceScale","premultipliedAlpha","imageUrl","isPowerOfTwo","mipmap","MIPMAP_TEXTURES","wrapMode","WRAP_MODE","_glTextures","_enabled","_virtalBoundId","loadSource","update","naturalWidth","videoWidth","naturalHeight","videoHeight","isPow2","emit","wasLoading","onload","onerror","firstSourceLoaded","src","complete","getContext","_updateImageType","_loadSvgSource","_sourceLoaded","scope","dataUri","mediaType","firstSubType","subType","split","Error","_loadSvgSourceUsingDataUri","_loadSvgSourceUsingXhr","svgString","encoding","atob","data","_loadSvgSourceUsingString","svgXhr","XMLHttpRequest","readyState","DONE","status","response","open","send","svgSize","svgWidth","svgHeight","Math","round","canvas","document","createElement","_pixiId","drawImage","destroy","navigator","isCocoonJS","dispose","updateSourceImage","newSrc","fromImage","crossorigin","baseTexture","image","Image","undefined","indexOf","crossOrigin","fromCanvas"],"mappings":"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","file":"BaseTexture.js","sourcesContent":["import {\n    uid, getUrlFileExtension, decomposeDataUri, getSvgSize,\n    getResolutionOfUrl, BaseTextureCache, TextureCache,\n} from '../utils';\nimport settings from '../settings';\nimport EventEmitter from 'eventemitter3';\nimport determineCrossOrigin from '../utils/determineCrossOrigin';\nimport bitTwiddle from 'bit-twiddle';\n\n/**\n * A texture stores the information that represents an image. All textures have a base texture.\n *\n * @class\n * @extends EventEmitter\n * @memberof PIXI\n */\nexport default class BaseTexture extends EventEmitter\n{\n    /**\n     * @param {HTMLImageElement|HTMLCanvasElement} [source] - the source object of the texture.\n     * @param {number} [scaleMode=PIXI.settings.SCALE_MODE] - See {@link PIXI.SCALE_MODES} for possible values\n     * @param {number} [resolution=1] - The resolution / device pixel ratio of the texture\n     */\n    constructor(source, scaleMode, resolution)\n    {\n        super();\n\n        this.uid = uid();\n\n        this.touched = 0;\n\n        /**\n         * The resolution / device pixel ratio of the texture\n         *\n         * @member {number}\n         * @default 1\n         */\n        this.resolution = resolution || settings.RESOLUTION;\n\n        /**\n         * The width of the base texture set when the image has loaded\n         *\n         * @readonly\n         * @member {number}\n         */\n        this.width = 100;\n\n        /**\n         * The height of the base texture set when the image has loaded\n         *\n         * @readonly\n         * @member {number}\n         */\n        this.height = 100;\n\n        // TODO docs\n        // used to store the actual dimensions of the source\n        /**\n         * Used to store the actual width of the source of this texture\n         *\n         * @readonly\n         * @member {number}\n         */\n        this.realWidth = 100;\n        /**\n         * Used to store the actual height of the source of this texture\n         *\n         * @readonly\n         * @member {number}\n         */\n        this.realHeight = 100;\n\n        /**\n         * The scale mode to apply when scaling this texture\n         *\n         * @member {number}\n         * @default PIXI.settings.SCALE_MODE\n         * @see PIXI.SCALE_MODES\n         */\n        this.scaleMode = scaleMode || settings.SCALE_MODE;\n\n        /**\n         * Set to true once the base texture has successfully loaded.\n         *\n         * This is never true if the underlying source fails to load or has no texture data.\n         *\n         * @readonly\n         * @member {boolean}\n         */\n        this.hasLoaded = false;\n\n        /**\n         * Set to true if the source is currently loading.\n         *\n         * If an Image source is loading the 'loaded' or 'error' event will be\n         * dispatched when the operation ends. An underyling source that is\n         * immediately-available bypasses loading entirely.\n         *\n         * @readonly\n         * @member {boolean}\n         */\n        this.isLoading = false;\n\n        /**\n         * The image source that is used to create the texture.\n         *\n         * TODO: Make this a setter that calls loadSource();\n         *\n         * @readonly\n         * @member {HTMLImageElement|HTMLCanvasElement}\n         */\n        this.source = null; // set in loadSource, if at all\n\n        /**\n         * The image source that is used to create the texture. This is used to\n         * store the original Svg source when it is replaced with a canvas element.\n         *\n         * TODO: Currently not in use but could be used when re-scaling svg.\n         *\n         * @readonly\n         * @member {Image}\n         */\n        this.origSource = null; // set in loadSvg, if at all\n\n        /**\n         * Type of image defined in source, eg. `png` or `svg`\n         *\n         * @readonly\n         * @member {string}\n         */\n        this.imageType = null; // set in updateImageType\n\n        /**\n         * Scale for source image. Used with Svg images to scale them before rasterization.\n         *\n         * @readonly\n         * @member {number}\n         */\n        this.sourceScale = 1.0;\n\n        /**\n         * Controls if RGB channels should be pre-multiplied by Alpha  (WebGL only)\n         * All blend modes, and shaders written for default value. Change it on your own risk.\n         *\n         * @member {boolean}\n         * @default true\n         */\n        this.premultipliedAlpha = true;\n\n        /**\n         * The image url of the texture\n         *\n         * @member {string}\n         */\n        this.imageUrl = null;\n\n        /**\n         * Whether or not the texture is a power of two, try to use power of two textures as much\n         * as you can\n         *\n         * @private\n         * @member {boolean}\n         */\n        this.isPowerOfTwo = false;\n\n        // used for webGL\n\n        /**\n         *\n         * Set this to true if a mipmap of this texture needs to be generated. This value needs\n         * to be set before the texture is used\n         * Also the texture must be a power of two size to work\n         *\n         * @member {boolean}\n         * @see PIXI.MIPMAP_TEXTURES\n         */\n        this.mipmap = settings.MIPMAP_TEXTURES;\n\n        /**\n         *\n         * WebGL Texture wrap mode\n         *\n         * @member {number}\n         * @see PIXI.WRAP_MODES\n         */\n        this.wrapMode = settings.WRAP_MODE;\n\n        /**\n         * A map of renderer IDs to webgl textures\n         *\n         * @private\n         * @member {object<number, WebGLTexture>}\n         */\n        this._glTextures = {};\n\n        this._enabled = 0;\n        this._virtalBoundId = -1;\n\n        // if no source passed don't try to load\n        if (source)\n        {\n            this.loadSource(source);\n        }\n\n        /**\n         * Fired when a not-immediately-available source finishes loading.\n         *\n         * @protected\n         * @event loaded\n         * @memberof PIXI.BaseTexture#\n         */\n\n        /**\n         * Fired when a not-immediately-available source fails to load.\n         *\n         * @protected\n         * @event error\n         * @memberof PIXI.BaseTexture#\n         */\n    }\n\n    /**\n     * Updates the texture on all the webgl renderers, this also assumes the src has changed.\n     *\n     * @fires update\n     */\n    update()\n    {\n        // Svg size is handled during load\n        if (this.imageType !== 'svg')\n        {\n            this.realWidth = this.source.naturalWidth || this.source.videoWidth || this.source.width;\n            this.realHeight = this.source.naturalHeight || this.source.videoHeight || this.source.height;\n\n            this.width = this.realWidth / this.resolution;\n            this.height = this.realHeight / this.resolution;\n\n            this.isPowerOfTwo = bitTwiddle.isPow2(this.realWidth) && bitTwiddle.isPow2(this.realHeight);\n        }\n\n        this.emit('update', this);\n    }\n\n    /**\n     * Load a source.\n     *\n     * If the source is not-immediately-available, such as an image that needs to be\n     * downloaded, then the 'loaded' or 'error' event will be dispatched in the future\n     * and `hasLoaded` will remain false after this call.\n     *\n     * The logic state after calling `loadSource` directly or indirectly (eg. `fromImage`, `new BaseTexture`) is:\n     *\n     *     if (texture.hasLoaded) {\n     *        // texture ready for use\n     *     } else if (texture.isLoading) {\n     *        // listen to 'loaded' and/or 'error' events on texture\n     *     } else {\n     *        // not loading, not going to load UNLESS the source is reloaded\n     *        // (it may still make sense to listen to the events)\n     *     }\n     *\n     * @protected\n     * @param {HTMLImageElement|HTMLCanvasElement} source - the source object of the texture.\n     */\n    loadSource(source)\n    {\n        const wasLoading = this.isLoading;\n\n        this.hasLoaded = false;\n        this.isLoading = false;\n\n        if (wasLoading && this.source)\n        {\n            this.source.onload = null;\n            this.source.onerror = null;\n        }\n\n        const firstSourceLoaded = !this.source;\n\n        this.source = source;\n\n        // Apply source if loaded. Otherwise setup appropriate loading monitors.\n        if (((source.src && source.complete) || source.getContext) && source.width && source.height)\n        {\n            this._updateImageType();\n\n            if (this.imageType === 'svg')\n            {\n                this._loadSvgSource();\n            }\n            else\n            {\n                this._sourceLoaded();\n            }\n\n            if (firstSourceLoaded)\n            {\n                // send loaded event if previous source was null and we have been passed a pre-loaded IMG element\n                this.emit('loaded', this);\n            }\n        }\n        else if (!source.getContext)\n        {\n            // Image fail / not ready\n            this.isLoading = true;\n\n            const scope = this;\n\n            source.onload = () =>\n            {\n                scope._updateImageType();\n                source.onload = null;\n                source.onerror = null;\n\n                if (!scope.isLoading)\n                {\n                    return;\n                }\n\n                scope.isLoading = false;\n                scope._sourceLoaded();\n\n                if (scope.imageType === 'svg')\n                {\n                    scope._loadSvgSource();\n\n                    return;\n                }\n\n                scope.emit('loaded', scope);\n            };\n\n            source.onerror = () =>\n            {\n                source.onload = null;\n                source.onerror = null;\n\n                if (!scope.isLoading)\n                {\n                    return;\n                }\n\n                scope.isLoading = false;\n                scope.emit('error', scope);\n            };\n\n            // Per http://www.w3.org/TR/html5/embedded-content-0.html#the-img-element\n            //   \"The value of `complete` can thus change while a script is executing.\"\n            // So complete needs to be re-checked after the callbacks have been added..\n            // NOTE: complete will be true if the image has no src so best to check if the src is set.\n            if (source.complete && source.src)\n            {\n                // ..and if we're complete now, no need for callbacks\n                source.onload = null;\n                source.onerror = null;\n\n                if (scope.imageType === 'svg')\n                {\n                    scope._loadSvgSource();\n\n                    return;\n                }\n\n                this.isLoading = false;\n\n                if (source.width && source.height)\n                {\n                    this._sourceLoaded();\n\n                    // If any previous subscribers possible\n                    if (wasLoading)\n                    {\n                        this.emit('loaded', this);\n                    }\n                }\n                // If any previous subscribers possible\n                else if (wasLoading)\n                {\n                    this.emit('error', this);\n                }\n            }\n        }\n    }\n\n    /**\n     * Updates type of the source image.\n     */\n    _updateImageType()\n    {\n        if (!this.imageUrl)\n        {\n            return;\n        }\n\n        const dataUri = decomposeDataUri(this.imageUrl);\n        let imageType;\n\n        if (dataUri && dataUri.mediaType === 'image')\n        {\n            // Check for subType validity\n            const firstSubType = dataUri.subType.split('+')[0];\n\n            imageType = getUrlFileExtension(`.${firstSubType}`);\n\n            if (!imageType)\n            {\n                throw new Error('Invalid image type in data URI.');\n            }\n        }\n        else\n        {\n            imageType = getUrlFileExtension(this.imageUrl);\n\n            if (!imageType)\n            {\n                imageType = 'png';\n            }\n        }\n\n        this.imageType = imageType;\n    }\n\n    /**\n     * Checks if `source` is an SVG image and whether it's loaded via a URL or a data URI. Then calls\n     * `_loadSvgSourceUsingDataUri` or `_loadSvgSourceUsingXhr`.\n     */\n    _loadSvgSource()\n    {\n        if (this.imageType !== 'svg')\n        {\n            // Do nothing if source is not svg\n            return;\n        }\n\n        const dataUri = decomposeDataUri(this.imageUrl);\n\n        if (dataUri)\n        {\n            this._loadSvgSourceUsingDataUri(dataUri);\n        }\n        else\n        {\n            // We got an URL, so we need to do an XHR to check the svg size\n            this._loadSvgSourceUsingXhr();\n        }\n    }\n\n    /**\n     * Reads an SVG string from data URI and then calls `_loadSvgSourceUsingString`.\n     *\n     * @param {string} dataUri - The data uri to load from.\n     */\n    _loadSvgSourceUsingDataUri(dataUri)\n    {\n        let svgString;\n\n        if (dataUri.encoding === 'base64')\n        {\n            if (!atob)\n            {\n                throw new Error('Your browser doesn\\'t support base64 conversions.');\n            }\n            svgString = atob(dataUri.data);\n        }\n        else\n        {\n            svgString = dataUri.data;\n        }\n\n        this._loadSvgSourceUsingString(svgString);\n    }\n\n    /**\n     * Loads an SVG string from `imageUrl` using XHR and then calls `_loadSvgSourceUsingString`.\n     */\n    _loadSvgSourceUsingXhr()\n    {\n        const svgXhr = new XMLHttpRequest();\n\n        // This throws error on IE, so SVG Document can't be used\n        // svgXhr.responseType = 'document';\n\n        // This is not needed since we load the svg as string (breaks IE too)\n        // but overrideMimeType() can be used to force the response to be parsed as XML\n        // svgXhr.overrideMimeType('image/svg+xml');\n\n        svgXhr.onload = () =>\n        {\n            if (svgXhr.readyState !== svgXhr.DONE || svgXhr.status !== 200)\n            {\n                throw new Error('Failed to load SVG using XHR.');\n            }\n\n            this._loadSvgSourceUsingString(svgXhr.response);\n        };\n\n        svgXhr.onerror = () => this.emit('error', this);\n\n        svgXhr.open('GET', this.imageUrl, true);\n        svgXhr.send();\n    }\n\n    /**\n     * Loads texture using an SVG string. The original SVG Image is stored as `origSource` and the\n     * created canvas is the new `source`. The SVG is scaled using `sourceScale`. Called by\n     * `_loadSvgSourceUsingXhr` or `_loadSvgSourceUsingDataUri`.\n     *\n     * @param  {string} svgString SVG source as string\n     *\n     * @fires loaded\n     */\n    _loadSvgSourceUsingString(svgString)\n    {\n        const svgSize = getSvgSize(svgString);\n\n        const svgWidth = svgSize.width;\n        const svgHeight = svgSize.height;\n\n        if (!svgWidth || !svgHeight)\n        {\n            throw new Error('The SVG image must have width and height defined (in pixels), canvas API needs them.');\n        }\n\n        // Scale realWidth and realHeight\n        this.realWidth = Math.round(svgWidth * this.sourceScale);\n        this.realHeight = Math.round(svgHeight * this.sourceScale);\n\n        this.width = this.realWidth / this.resolution;\n        this.height = this.realHeight / this.resolution;\n\n        // Check pow2 after scale\n        this.isPowerOfTwo = bitTwiddle.isPow2(this.realWidth) && bitTwiddle.isPow2(this.realHeight);\n\n        // Create a canvas element\n        const canvas = document.createElement('canvas');\n\n        canvas.width = this.realWidth;\n        canvas.height = this.realHeight;\n        canvas._pixiId = `canvas_${uid()}`;\n\n        // Draw the Svg to the canvas\n        canvas\n            .getContext('2d')\n            .drawImage(this.source, 0, 0, svgWidth, svgHeight, 0, 0, this.realWidth, this.realHeight);\n\n        // Replace the original source image with the canvas\n        this.origSource = this.source;\n        this.source = canvas;\n\n        // Add also the canvas in cache (destroy clears by `imageUrl` and `source._pixiId`)\n        BaseTextureCache[canvas._pixiId] = this;\n\n        this.isLoading = false;\n        this._sourceLoaded();\n        this.emit('loaded', this);\n    }\n\n    /**\n     * Used internally to update the width, height, and some other tracking vars once\n     * a source has successfully loaded.\n     *\n     * @private\n     */\n    _sourceLoaded()\n    {\n        this.hasLoaded = true;\n        this.update();\n    }\n\n    /**\n     * Destroys this base texture\n     *\n     */\n    destroy()\n    {\n        if (this.imageUrl)\n        {\n            delete BaseTextureCache[this.imageUrl];\n            delete TextureCache[this.imageUrl];\n\n            this.imageUrl = null;\n\n            if (!navigator.isCocoonJS)\n            {\n                this.source.src = '';\n            }\n        }\n        // An svg source has both `imageUrl` and `__pixiId`, so no `else if` here\n        if (this.source && this.source._pixiId)\n        {\n            delete BaseTextureCache[this.source._pixiId];\n        }\n\n        this.source = null;\n\n        this.dispose();\n    }\n\n    /**\n     * Frees the texture from WebGL memory without destroying this texture object.\n     * This means you can still use the texture later which will upload it to GPU\n     * memory again.\n     *\n     */\n    dispose()\n    {\n        this.emit('dispose', this);\n    }\n\n    /**\n     * Changes the source image of the texture.\n     * The original source must be an Image element.\n     *\n     * @param {string} newSrc - the path of the image\n     */\n    updateSourceImage(newSrc)\n    {\n        this.source.src = newSrc;\n\n        this.loadSource(this.source);\n    }\n\n    /**\n     * Helper function that creates a base texture from the given image url.\n     * If the image is not in the base texture cache it will be created and loaded.\n     *\n     * @static\n     * @param {string} imageUrl - The image url of the texture\n     * @param {boolean} [crossorigin=(auto)] - Should use anonymous CORS? Defaults to true if the URL is not a data-URI.\n     * @param {number} [scaleMode=PIXI.settings.SCALE_MODE] - See {@link PIXI.SCALE_MODES} for possible values\n     * @param {number} [sourceScale=(auto)] - Scale for the original image, used with Svg images.\n     * @return {PIXI.BaseTexture} The new base texture.\n     */\n    static fromImage(imageUrl, crossorigin, scaleMode, sourceScale)\n    {\n        let baseTexture = BaseTextureCache[imageUrl];\n\n        if (!baseTexture)\n        {\n            // new Image() breaks tex loading in some versions of Chrome.\n            // See https://code.google.com/p/chromium/issues/detail?id=238071\n            const image = new Image();// document.createElement('img');\n\n            if (crossorigin === undefined && imageUrl.indexOf('data:') !== 0)\n            {\n                image.crossOrigin = determineCrossOrigin(imageUrl);\n            }\n\n            baseTexture = new BaseTexture(image, scaleMode);\n            baseTexture.imageUrl = imageUrl;\n\n            if (sourceScale)\n            {\n                baseTexture.sourceScale = sourceScale;\n            }\n\n            // if there is an @2x at the end of the url we are going to assume its a highres image\n            baseTexture.resolution = getResolutionOfUrl(imageUrl);\n\n            image.src = imageUrl; // Setting this triggers load\n\n            BaseTextureCache[imageUrl] = baseTexture;\n        }\n\n        return baseTexture;\n    }\n\n    /**\n     * Helper function that creates a base texture from the given canvas element.\n     *\n     * @static\n     * @param {HTMLCanvasElement} canvas - The canvas element source of the texture\n     * @param {number} scaleMode - See {@link PIXI.SCALE_MODES} for possible values\n     * @return {PIXI.BaseTexture} The new base texture.\n     */\n    static fromCanvas(canvas, scaleMode)\n    {\n        if (!canvas._pixiId)\n        {\n            canvas._pixiId = `canvas_${uid()}`;\n        }\n\n        let baseTexture = BaseTextureCache[canvas._pixiId];\n\n        if (!baseTexture)\n        {\n            baseTexture = new BaseTexture(canvas, scaleMode);\n            BaseTextureCache[canvas._pixiId] = baseTexture;\n        }\n\n        return baseTexture;\n    }\n}\n"]}