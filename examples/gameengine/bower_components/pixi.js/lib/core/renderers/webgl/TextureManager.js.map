{"version":3,"sources":["../../../../src/core/renderers/webgl/TextureManager.js"],"names":["TextureManager","renderer","gl","_managedTextures","bindTexture","getTexture","updateTexture","texture","location","isRenderTexture","_glRenderTargets","hasLoaded","activeTexture","TEXTURE0","glTexture","_glTextures","CONTEXT_UID","renderTarget","width","height","scaleMode","resolution","resize","bind","premultiplyAlpha","upload","source","on","destroyTexture","push","isPowerOfTwo","mipmap","enableMipmap","wrapMode","CLAMP","enableWrapClamp","REPEAT","enableWrapRepeat","enableWrapMirrorRepeat","NEAREST","enableNearestScaling","enableLinearScaling","boundTextures","skipRemove","baseTexture","unbindTexture","destroy","off","i","indexOf","removeAll","length"],"mappings":"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","file":"TextureManager.js","sourcesContent":["import { GLTexture } from 'pixi-gl-core';\nimport { WRAP_MODES, SCALE_MODES } from '../../const';\nimport RenderTarget from './utils/RenderTarget';\nimport { removeItems } from '../../utils';\n\n/**\n * Helper class to create a webGL Texture\n *\n * @class\n * @memberof PIXI\n */\nexport default class TextureManager\n{\n    /**\n     * @param {PIXI.WebGLRenderer} renderer - A reference to the current renderer\n     */\n    constructor(renderer)\n    {\n        /**\n         * A reference to the current renderer\n         *\n         * @member {PIXI.WebGLRenderer}\n         */\n        this.renderer = renderer;\n\n        /**\n         * The current WebGL rendering context\n         *\n         * @member {WebGLRenderingContext}\n         */\n        this.gl = renderer.gl;\n\n        /**\n         * Track textures in the renderer so we can no longer listen to them on destruction.\n         *\n         * @member {Array<*>}\n         * @private\n         */\n        this._managedTextures = [];\n    }\n\n    /**\n     * Binds a texture.\n     *\n     */\n    bindTexture()\n    {\n        // empty\n    }\n\n    /**\n     * Gets a texture.\n     *\n     */\n    getTexture()\n    {\n        // empty\n    }\n\n    /**\n     * Updates and/or Creates a WebGL texture for the renderer's context.\n     *\n     * @param {PIXI.BaseTexture|PIXI.Texture} texture - the texture to update\n     * @param {Number} location - the location the texture will be bound to.\n     * @return {GLTexture} The gl texture.\n     */\n    updateTexture(texture, location)\n    {\n        // assume it good!\n        // texture = texture.baseTexture || texture;\n        location = location || 0;\n\n        const gl = this.gl;\n\n        const isRenderTexture = !!texture._glRenderTargets;\n\n        if (!texture.hasLoaded)\n        {\n            return null;\n        }\n\n        gl.activeTexture(gl.TEXTURE0 + location);\n\n        let glTexture = texture._glTextures[this.renderer.CONTEXT_UID];\n\n        if (!glTexture)\n        {\n            if (isRenderTexture)\n            {\n                const renderTarget = new RenderTarget(\n                    this.gl,\n                    texture.width,\n                    texture.height,\n                    texture.scaleMode,\n                    texture.resolution\n                );\n\n                renderTarget.resize(texture.width, texture.height);\n                texture._glRenderTargets[this.renderer.CONTEXT_UID] = renderTarget;\n                glTexture = renderTarget.texture;\n            }\n            else\n            {\n                glTexture = new GLTexture(this.gl, null, null, null, null);\n                glTexture.bind(location);\n                glTexture.premultiplyAlpha = true;\n                glTexture.upload(texture.source);\n            }\n\n            texture._glTextures[this.renderer.CONTEXT_UID] = glTexture;\n\n            texture.on('update', this.updateTexture, this);\n            texture.on('dispose', this.destroyTexture, this);\n\n            this._managedTextures.push(texture);\n\n            if (texture.isPowerOfTwo)\n            {\n                if (texture.mipmap)\n                {\n                    glTexture.enableMipmap();\n                }\n\n                if (texture.wrapMode === WRAP_MODES.CLAMP)\n                {\n                    glTexture.enableWrapClamp();\n                }\n                else if (texture.wrapMode === WRAP_MODES.REPEAT)\n                {\n                    glTexture.enableWrapRepeat();\n                }\n                else\n                {\n                    glTexture.enableWrapMirrorRepeat();\n                }\n            }\n            else\n            {\n                glTexture.enableWrapClamp();\n            }\n\n            if (texture.scaleMode === SCALE_MODES.NEAREST)\n            {\n                glTexture.enableNearestScaling();\n            }\n            else\n            {\n                glTexture.enableLinearScaling();\n            }\n        }\n        // the texture already exists so we only need to update it..\n        else if (isRenderTexture)\n        {\n            texture._glRenderTargets[this.renderer.CONTEXT_UID].resize(texture.width, texture.height);\n        }\n        else\n        {\n            glTexture.upload(texture.source);\n        }\n\n        this.renderer.boundTextures[location] = texture;\n\n        return glTexture;\n    }\n\n    /**\n     * Deletes the texture from WebGL\n     *\n     * @param {PIXI.BaseTexture|PIXI.Texture} texture - the texture to destroy\n     * @param {boolean} [skipRemove=false] - Whether to skip removing the texture from the TextureManager.\n     */\n    destroyTexture(texture, skipRemove)\n    {\n        texture = texture.baseTexture || texture;\n\n        if (!texture.hasLoaded)\n        {\n            return;\n        }\n\n        if (texture._glTextures[this.renderer.CONTEXT_UID])\n        {\n            this.renderer.unbindTexture(texture);\n\n            texture._glTextures[this.renderer.CONTEXT_UID].destroy();\n            texture.off('update', this.updateTexture, this);\n            texture.off('dispose', this.destroyTexture, this);\n\n            delete texture._glTextures[this.renderer.CONTEXT_UID];\n\n            if (!skipRemove)\n            {\n                const i = this._managedTextures.indexOf(texture);\n\n                if (i !== -1)\n                {\n                    removeItems(this._managedTextures, i, 1);\n                }\n            }\n        }\n    }\n\n    /**\n     * Deletes all the textures from WebGL\n     */\n    removeAll()\n    {\n        // empty all the old gl textures as they are useless now\n        for (let i = 0; i < this._managedTextures.length; ++i)\n        {\n            const texture = this._managedTextures[i];\n\n            if (texture._glTextures[this.renderer.CONTEXT_UID])\n            {\n                delete texture._glTextures[this.renderer.CONTEXT_UID];\n            }\n        }\n    }\n\n    /**\n     * Destroys this manager and removes all its textures\n     */\n    destroy()\n    {\n        // destroy managed textures\n        for (let i = 0; i < this._managedTextures.length; ++i)\n        {\n            const texture = this._managedTextures[i];\n\n            this.destroyTexture(texture, true);\n\n            texture.off('update', this.updateTexture, this);\n            texture.off('dispose', this.destroyTexture, this);\n        }\n\n        this._managedTextures = null;\n    }\n}\n"]}