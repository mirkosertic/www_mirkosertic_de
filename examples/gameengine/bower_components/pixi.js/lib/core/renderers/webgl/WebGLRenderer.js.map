{"version":3,"sources":["../../../../src/core/renderers/webgl/WebGLRenderer.js"],"names":["CONTEXT_UID","WebGLRenderer","width","height","options","type","WEBGL","handleContextLost","bind","handleContextRestored","view","addEventListener","_contextOptions","alpha","transparent","antialias","premultipliedAlpha","stencil","preserveDrawingBuffer","_backgroundColorRgba","maskManager","stencilManager","emptyRenderer","currentRenderer","initPlugins","context","gl","createContext","state","renderingToScreen","boundTextures","_initContext","filterManager","drawModes","_activeShader","_activeVao","_activeRenderTarget","_nextTextureLocation","setBlendMode","isContextLost","getExtension","restoreContext","maxTextures","getParameter","MAX_TEXTURE_IMAGE_UNITS","Array","emptyTextures","textureManager","textureGC","resetToDefault","rootRenderTarget","resolution","clearColor","bindRenderTarget","emptyGLTexture","GLTexture","fromData","tempObj","_glTextures","i","empty","bindTexture","emit","resize","render","displayObject","renderTexture","clear","transform","skipUpdateTransform","_lastObjectRendered","cacheParent","parent","_tempDisplayObjectParent","updateTransform","bindRenderTexture","start","undefined","clearBeforeRender","renderWebGL","flush","update","setObjectRenderer","objectRenderer","stop","prototype","call","activate","uniforms","projectionMatrix","toArray","blendMode","setTransform","matrix","renderTarget","baseTexture","_glRenderTargets","updateTexture","unbindTexture","setFrame","frame","setMaskStack","stencilMaskStack","bindShader","shader","texture","location","forceLocation","touched","count","length","glTexture","activeTexture","TEXTURE0","TEXTURE_2D","createVao","VertexArrayObject","attribState","bindVao","vao","unbind","reset","event","preventDefault","removeAll","destroy","removeView","destroyPlugins","removeEventListener","uid","useProgram","loseContext","mixin"],"mappings":"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","file":"WebGLRenderer.js","sourcesContent":["import SystemRenderer from '../SystemRenderer';\nimport MaskManager from './managers/MaskManager';\nimport StencilManager from './managers/StencilManager';\nimport FilterManager from './managers/FilterManager';\nimport RenderTarget from './utils/RenderTarget';\nimport ObjectRenderer from './utils/ObjectRenderer';\nimport TextureManager from './TextureManager';\nimport BaseTexture from '../../textures/BaseTexture';\nimport TextureGarbageCollector from './TextureGarbageCollector';\nimport WebGLState from './WebGLState';\nimport mapWebGLDrawModesToPixi from './utils/mapWebGLDrawModesToPixi';\nimport validateContext from './utils/validateContext';\nimport { pluginTarget } from '../../utils';\nimport glCore from 'pixi-gl-core';\nimport { RENDERER_TYPE } from '../../const';\n\nlet CONTEXT_UID = 0;\n\n/**\n * The WebGLRenderer draws the scene and all its content onto a webGL enabled canvas. This renderer\n * should be used for browsers that support webGL. This Render works by automatically managing webGLBatchs.\n * So no need for Sprite Batches or Sprite Clouds.\n * Don't forget to add the view to your DOM or you will not see anything :)\n *\n * @class\n * @memberof PIXI\n * @extends PIXI.SystemRenderer\n */\nexport default class WebGLRenderer extends SystemRenderer\n{\n    /**\n     *\n     * @param {number} [width=0] - the width of the canvas view\n     * @param {number} [height=0] - the height of the canvas view\n     * @param {object} [options] - The optional renderer parameters\n     * @param {HTMLCanvasElement} [options.view] - the canvas to use as a view, optional\n     * @param {boolean} [options.transparent=false] - If the render view is transparent, default false\n     * @param {boolean} [options.autoResize=false] - If the render view is automatically resized, default false\n     * @param {boolean} [options.antialias=false] - sets antialias. If not available natively then FXAA\n     *  antialiasing is used\n     * @param {boolean} [options.forceFXAA=false] - forces FXAA antialiasing to be used over native.\n     *  FXAA is faster, but may not always look as great\n     * @param {number} [options.resolution=1] - The resolution / device pixel ratio of the renderer.\n     *  The resolution of the renderer retina would be 2.\n     * @param {boolean} [options.clearBeforeRender=true] - This sets if the CanvasRenderer will clear\n     *  the canvas or not before the new render pass. If you wish to set this to false, you *must* set\n     *  preserveDrawingBuffer to `true`.\n     * @param {boolean} [options.preserveDrawingBuffer=false] - enables drawing buffer preservation,\n     *  enable this if you need to call toDataUrl on the webgl context.\n     * @param {boolean} [options.roundPixels=false] - If true Pixi will Math.floor() x/y values when\n     *  rendering, stopping pixel interpolation.\n     */\n    constructor(width, height, options = {})\n    {\n        super('WebGL', width, height, options);\n\n        /**\n         * The type of this renderer as a standardised const\n         *\n         * @member {number}\n         * @see PIXI.RENDERER_TYPE\n         */\n        this.type = RENDERER_TYPE.WEBGL;\n\n        this.handleContextLost = this.handleContextLost.bind(this);\n        this.handleContextRestored = this.handleContextRestored.bind(this);\n\n        this.view.addEventListener('webglcontextlost', this.handleContextLost, false);\n        this.view.addEventListener('webglcontextrestored', this.handleContextRestored, false);\n\n        /**\n         * The options passed in to create a new webgl context.\n         *\n         * @member {object}\n         * @private\n         */\n        this._contextOptions = {\n            alpha: this.transparent,\n            antialias: options.antialias,\n            premultipliedAlpha: this.transparent && this.transparent !== 'notMultiplied',\n            stencil: true,\n            preserveDrawingBuffer: options.preserveDrawingBuffer,\n        };\n\n        this._backgroundColorRgba[3] = this.transparent ? 0 : 1;\n\n        /**\n         * Manages the masks using the stencil buffer.\n         *\n         * @member {PIXI.MaskManager}\n         */\n        this.maskManager = new MaskManager(this);\n\n        /**\n         * Manages the stencil buffer.\n         *\n         * @member {PIXI.StencilManager}\n         */\n        this.stencilManager = new StencilManager(this);\n\n        /**\n         * An empty renderer.\n         *\n         * @member {PIXI.ObjectRenderer}\n         */\n        this.emptyRenderer = new ObjectRenderer(this);\n\n        /**\n         * The currently active ObjectRenderer.\n         *\n         * @member {PIXI.ObjectRenderer}\n         */\n        this.currentRenderer = this.emptyRenderer;\n\n        this.initPlugins();\n\n        /**\n         * The current WebGL rendering context, it is created here\n         *\n         * @member {WebGLRenderingContext}\n         */\n        // initialize the context so it is ready for the managers.\n        if (options.context)\n        {\n            // checks to see if a context is valid..\n            validateContext(options.context);\n        }\n\n        this.gl = options.context || glCore.createContext(this.view, this._contextOptions);\n\n        this.CONTEXT_UID = CONTEXT_UID++;\n\n        /**\n         * The currently active ObjectRenderer.\n         *\n         * @member {PIXI.WebGLState}\n         */\n        this.state = new WebGLState(this.gl);\n\n        this.renderingToScreen = true;\n\n        /**\n         * Holds the current state of textures bound to the GPU.\n         * @type {Array}\n         */\n        this.boundTextures = null;\n\n        this._initContext();\n        /**\n         * Manages the filters.\n         *\n         * @member {PIXI.FilterManager}\n         */\n        this.filterManager = new FilterManager(this);\n        // map some webGL blend and drawmodes..\n        this.drawModes = mapWebGLDrawModesToPixi(this.gl);\n\n        /**\n         * Holds the current shader\n         *\n         * @member {PIXI.Shader}\n         */\n        this._activeShader = null;\n\n        this._activeVao = null;\n\n        /**\n         * Holds the current render target\n         *\n         * @member {PIXI.RenderTarget}\n         */\n        this._activeRenderTarget = null;\n\n        this._nextTextureLocation = 0;\n\n        this.setBlendMode(0);\n    }\n\n    /**\n     * Creates the WebGL context\n     *\n     * @private\n     */\n    _initContext()\n    {\n        const gl = this.gl;\n\n        // restore a context if it was previously lost\n        if (gl.isContextLost() && gl.getExtension('WEBGL_lose_context'))\n        {\n            gl.getExtension('WEBGL_lose_context').restoreContext();\n        }\n\n        const maxTextures = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n\n        this.boundTextures = new Array(maxTextures);\n        this.emptyTextures = new Array(maxTextures);\n\n        // create a texture manager...\n        this.textureManager = new TextureManager(this);\n        this.textureGC = new TextureGarbageCollector(this);\n\n        this.state.resetToDefault();\n\n        this.rootRenderTarget = new RenderTarget(gl, this.width, this.height, null, this.resolution, true);\n        this.rootRenderTarget.clearColor = this._backgroundColorRgba;\n\n        this.bindRenderTarget(this.rootRenderTarget);\n\n        // now lets fill up the textures with empty ones!\n        const emptyGLTexture = new glCore.GLTexture.fromData(gl, null, 1, 1);\n\n        const tempObj = { _glTextures: {} };\n\n        tempObj._glTextures[this.CONTEXT_UID] = {};\n\n        for (let i = 0; i < maxTextures; i++)\n        {\n            const empty = new BaseTexture();\n\n            empty._glTextures[this.CONTEXT_UID] = emptyGLTexture;\n\n            this.boundTextures[i] = tempObj;\n            this.emptyTextures[i] = empty;\n            this.bindTexture(null, i);\n        }\n\n        this.emit('context', gl);\n\n        // setup the width/height properties and gl viewport\n        this.resize(this.width, this.height);\n    }\n\n    /**\n     * Renders the object to its webGL view\n     *\n     * @param {PIXI.DisplayObject} displayObject - the object to be rendered\n     * @param {PIXI.RenderTexture} renderTexture - The render texture to render to.\n     * @param {boolean} [clear] - Should the canvas be cleared before the new render\n     * @param {PIXI.Transform} [transform] - A transform to apply to the render texture before rendering.\n     * @param {boolean} [skipUpdateTransform] - Should we skip the update transform pass?\n     */\n    render(displayObject, renderTexture, clear, transform, skipUpdateTransform)\n    {\n        // can be handy to know!\n        this.renderingToScreen = !renderTexture;\n\n        this.emit('prerender');\n\n        // no point rendering if our context has been blown up!\n        if (!this.gl || this.gl.isContextLost())\n        {\n            return;\n        }\n\n        this._nextTextureLocation = 0;\n\n        if (!renderTexture)\n        {\n            this._lastObjectRendered = displayObject;\n        }\n\n        if (!skipUpdateTransform)\n        {\n            // update the scene graph\n            const cacheParent = displayObject.parent;\n\n            displayObject.parent = this._tempDisplayObjectParent;\n            displayObject.updateTransform();\n            displayObject.parent = cacheParent;\n           // displayObject.hitArea = //TODO add a temp hit area\n        }\n\n        this.bindRenderTexture(renderTexture, transform);\n\n        this.currentRenderer.start();\n\n        if (clear !== undefined ? clear : this.clearBeforeRender)\n        {\n            this._activeRenderTarget.clear();\n        }\n\n        displayObject.renderWebGL(this);\n\n        // apply transform..\n        this.currentRenderer.flush();\n\n        // this.setObjectRenderer(this.emptyRenderer);\n\n        this.textureGC.update();\n\n        this.emit('postrender');\n    }\n\n    /**\n     * Changes the current renderer to the one given in parameter\n     *\n     * @param {PIXI.ObjectRenderer} objectRenderer - The object renderer to use.\n     */\n    setObjectRenderer(objectRenderer)\n    {\n        if (this.currentRenderer === objectRenderer)\n        {\n            return;\n        }\n\n        this.currentRenderer.stop();\n        this.currentRenderer = objectRenderer;\n        this.currentRenderer.start();\n    }\n\n    /**\n     * This should be called if you wish to do some custom rendering\n     * It will basically render anything that may be batched up such as sprites\n     *\n     */\n    flush()\n    {\n        this.setObjectRenderer(this.emptyRenderer);\n    }\n\n    /**\n     * Resizes the webGL view to the specified width and height.\n     *\n     * @param {number} width - the new width of the webGL view\n     * @param {number} height - the new height of the webGL view\n     */\n    resize(width, height)\n    {\n      //  if(width * this.resolution === this.width && height * this.resolution === this.height)return;\n\n        SystemRenderer.prototype.resize.call(this, width, height);\n\n        this.rootRenderTarget.resize(width, height);\n\n        if (this._activeRenderTarget === this.rootRenderTarget)\n        {\n            this.rootRenderTarget.activate();\n\n            if (this._activeShader)\n            {\n                this._activeShader.uniforms.projectionMatrix = this.rootRenderTarget.projectionMatrix.toArray(true);\n            }\n        }\n    }\n\n    /**\n     * Resizes the webGL view to the specified width and height.\n     *\n     * @param {number} blendMode - the desired blend mode\n     */\n    setBlendMode(blendMode)\n    {\n        this.state.setBlendMode(blendMode);\n    }\n\n    /**\n     * Erases the active render target and fills the drawing area with a colour\n     *\n     * @param {number} [clearColor] - The colour\n     */\n    clear(clearColor)\n    {\n        this._activeRenderTarget.clear(clearColor);\n    }\n\n    /**\n     * Sets the transform of the active render target to the given matrix\n     *\n     * @param {PIXI.Matrix} matrix - The transformation matrix\n     */\n    setTransform(matrix)\n    {\n        this._activeRenderTarget.transform = matrix;\n    }\n\n    /**\n     * Binds a render texture for rendering\n     *\n     * @param {PIXI.RenderTexture} renderTexture - The render texture to render\n     * @param {PIXI.Transform} transform - The transform to be applied to the render texture\n     * @return {PIXI.WebGLRenderer} Returns itself.\n     */\n    bindRenderTexture(renderTexture, transform)\n    {\n        let renderTarget;\n\n        if (renderTexture)\n        {\n            const baseTexture = renderTexture.baseTexture;\n\n            if (!baseTexture._glRenderTargets[this.CONTEXT_UID])\n            {\n                // bind the current texture\n                this.textureManager.updateTexture(baseTexture, 0);\n            }\n\n            this.unbindTexture(baseTexture);\n\n            renderTarget = baseTexture._glRenderTargets[this.CONTEXT_UID];\n            renderTarget.setFrame(renderTexture.frame);\n        }\n        else\n        {\n            renderTarget = this.rootRenderTarget;\n        }\n\n        renderTarget.transform = transform;\n        this.bindRenderTarget(renderTarget);\n\n        return this;\n    }\n\n    /**\n     * Changes the current render target to the one given in parameter\n     *\n     * @param {PIXI.RenderTarget} renderTarget - the new render target\n     * @return {PIXI.WebGLRenderer} Returns itself.\n     */\n    bindRenderTarget(renderTarget)\n    {\n        if (renderTarget !== this._activeRenderTarget)\n        {\n            this._activeRenderTarget = renderTarget;\n            renderTarget.activate();\n\n            if (this._activeShader)\n            {\n                this._activeShader.uniforms.projectionMatrix = renderTarget.projectionMatrix.toArray(true);\n            }\n\n            this.stencilManager.setMaskStack(renderTarget.stencilMaskStack);\n        }\n\n        return this;\n    }\n\n    /**\n     * Changes the current shader to the one given in parameter\n     *\n     * @param {PIXI.Shader} shader - the new shader\n     * @return {PIXI.WebGLRenderer} Returns itself.\n     */\n    bindShader(shader)\n    {\n        // TODO cache\n        if (this._activeShader !== shader)\n        {\n            this._activeShader = shader;\n            shader.bind();\n\n            // automatically set the projection matrix\n            shader.uniforms.projectionMatrix = this._activeRenderTarget.projectionMatrix.toArray(true);\n        }\n\n        return this;\n    }\n\n    /**\n     * Binds the texture. This will return the location of the bound texture.\n     * It may not be the same as the one you pass in. This is due to optimisation that prevents\n     * needless binding of textures. For example if the texture is already bound it will return the\n     * current location of the texture instead of the one provided. To bypass this use force location\n     *\n     * @param {PIXI.Texture} texture - the new texture\n     * @param {number} location - the suggested texture location\n     * @param {boolean} forceLocation - force the location\n     * @return {PIXI.WebGLRenderer} Returns itself.\n     */\n    bindTexture(texture, location, forceLocation)\n    {\n        texture = texture || this.emptyTextures[location];\n        texture = texture.baseTexture || texture;\n        texture.touched = this.textureGC.count;\n\n        if (!forceLocation)\n        {\n            // TODO - maybe look into adding boundIds.. save us the loop?\n            for (let i = 0; i < this.boundTextures.length; i++)\n            {\n                if (this.boundTextures[i] === texture)\n                {\n                    return i;\n                }\n            }\n\n            if (location === undefined)\n            {\n                this._nextTextureLocation++;\n                this._nextTextureLocation %= this.boundTextures.length;\n                location = this.boundTextures.length - this._nextTextureLocation - 1;\n            }\n        }\n        else\n        {\n            location = location || 0;\n        }\n\n        const gl = this.gl;\n        const glTexture = texture._glTextures[this.CONTEXT_UID];\n\n        if (!glTexture)\n        {\n            // this will also bind the texture..\n            this.textureManager.updateTexture(texture, location);\n        }\n        else\n        {\n            // bind the current texture\n            this.boundTextures[location] = texture;\n            gl.activeTexture(gl.TEXTURE0 + location);\n            gl.bindTexture(gl.TEXTURE_2D, glTexture.texture);\n        }\n\n        return location;\n    }\n\n     /**\n     * unbinds the texture ...\n     *\n     * @param {PIXI.Texture} texture - the texture to unbind\n     * @return {PIXI.WebGLRenderer} Returns itself.\n     */\n    unbindTexture(texture)\n    {\n        const gl = this.gl;\n\n        texture = texture.baseTexture || texture;\n\n        for (let i = 0; i < this.boundTextures.length; i++)\n        {\n            if (this.boundTextures[i] === texture)\n            {\n                this.boundTextures[i] = this.emptyTextures[i];\n\n                gl.activeTexture(gl.TEXTURE0 + i);\n                gl.bindTexture(gl.TEXTURE_2D, this.emptyTextures[i]._glTextures[this.CONTEXT_UID].texture);\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * Creates a new VAO from this renderer's context and state.\n     *\n     * @return {VertexArrayObject} The new VAO.\n     */\n    createVao()\n    {\n        return new glCore.VertexArrayObject(this.gl, this.state.attribState);\n    }\n\n    /**\n     * Changes the current Vao to the one given in parameter\n     *\n     * @param {PIXI.VertexArrayObject} vao - the new Vao\n     * @return {PIXI.WebGLRenderer} Returns itself.\n     */\n    bindVao(vao)\n    {\n        if (this._activeVao === vao)\n        {\n            return this;\n        }\n\n        if (vao)\n        {\n            vao.bind();\n        }\n        else if (this._activeVao)\n        {\n            // TODO this should always be true i think?\n            this._activeVao.unbind();\n        }\n\n        this._activeVao = vao;\n\n        return this;\n    }\n\n    /**\n     * Resets the WebGL state so you can render things however you fancy!\n     *\n     * @return {PIXI.WebGLRenderer} Returns itself.\n     */\n    reset()\n    {\n        this.setObjectRenderer(this.emptyRenderer);\n\n        this._activeShader = null;\n        this._activeRenderTarget = this.rootRenderTarget;\n\n        // bind the main frame buffer (the screen);\n        this.rootRenderTarget.activate();\n\n        this.state.resetToDefault();\n\n        return this;\n    }\n\n    /**\n     * Handles a lost webgl context\n     *\n     * @private\n     * @param {WebGLContextEvent} event - The context lost event.\n     */\n    handleContextLost(event)\n    {\n        event.preventDefault();\n    }\n\n    /**\n     * Handles a restored webgl context\n     *\n     * @private\n     */\n    handleContextRestored()\n    {\n        this._initContext();\n        this.textureManager.removeAll();\n    }\n\n    /**\n     * Removes everything from the renderer (event listeners, spritebatch, etc...)\n     *\n     * @param {boolean} [removeView=false] - Removes the Canvas element from the DOM.\n     *  See: https://github.com/pixijs/pixi.js/issues/2233\n     */\n    destroy(removeView)\n    {\n        this.destroyPlugins();\n\n        // remove listeners\n        this.view.removeEventListener('webglcontextlost', this.handleContextLost);\n        this.view.removeEventListener('webglcontextrestored', this.handleContextRestored);\n\n        this.textureManager.destroy();\n\n        // call base destroy\n        super.destroy(removeView);\n\n        this.uid = 0;\n\n        // destroy the managers\n        this.maskManager.destroy();\n        this.stencilManager.destroy();\n        this.filterManager.destroy();\n\n        this.maskManager = null;\n        this.filterManager = null;\n        this.textureManager = null;\n        this.currentRenderer = null;\n\n        this.handleContextLost = null;\n        this.handleContextRestored = null;\n\n        this._contextOptions = null;\n        this.gl.useProgram(null);\n\n        if (this.gl.getExtension('WEBGL_lose_context'))\n        {\n            this.gl.getExtension('WEBGL_lose_context').loseContext();\n        }\n\n        this.gl = null;\n\n        // this = null;\n    }\n}\n\npluginTarget.mixin(WebGLRenderer);\n"]}