{"version":3,"sources":["../../../../../src/core/renderers/canvas/utils/CanvasRenderTarget.js"],"names":["RESOLUTION","CanvasRenderTarget","width","height","resolution","canvas","document","createElement","context","getContext","resize","clear","setTransform","clearRect","destroy","val"],"mappings":";;;;;;AAAA;;;;;;;;IACQA,U,sBAAAA,U;;AAER;;;;;;;IAMqBC,kB;AAEjB;;;;;AAKA,8BAAYC,KAAZ,EAAmBC,MAAnB,EAA2BC,UAA3B,EACA;AAAA;;AACI;;;;;AAKA,SAAKC,MAAL,GAAcC,SAASC,aAAT,CAAuB,QAAvB,CAAd;;AAEA;;;;;AAKA,SAAKC,OAAL,GAAe,KAAKH,MAAL,CAAYI,UAAZ,CAAuB,IAAvB,CAAf;;AAEA,SAAKL,UAAL,GAAkBA,cAAcJ,UAAhC;;AAEA,SAAKU,MAAL,CAAYR,KAAZ,EAAmBC,MAAnB;AACH;;AAED;;;;;;;+BAKAQ,K,oBACA;AACI,SAAKH,OAAL,CAAaI,YAAb,CAA0B,CAA1B,EAA6B,CAA7B,EAAgC,CAAhC,EAAmC,CAAnC,EAAsC,CAAtC,EAAyC,CAAzC;AACA,SAAKJ,OAAL,CAAaK,SAAb,CAAuB,CAAvB,EAA0B,CAA1B,EAA6B,KAAKR,MAAL,CAAYH,KAAzC,EAAgD,KAAKG,MAAL,CAAYF,MAA5D;AACH,G;;AAED;;;;;;;;+BAMAO,M,mBAAOR,K,EAAOC,M,EACd;AACI,SAAKE,MAAL,CAAYH,KAAZ,GAAoBA,QAAQ,KAAKE,UAAjC;AACA,SAAKC,MAAL,CAAYF,MAAZ,GAAqBA,SAAS,KAAKC,UAAnC;AACH,G;;AAED;;;;;;+BAIAU,O,sBACA;AACI,SAAKN,OAAL,GAAe,IAAf;AACA,SAAKH,MAAL,GAAc,IAAd;AACH,G;;AAED;;;;;;;;;;wBAOA;AACI,aAAO,KAAKA,MAAL,CAAYH,KAAnB;AACH;;AAED;;;;;;sBAKUa,G,EACV;AACI,WAAKV,MAAL,CAAYH,KAAZ,GAAoBa,GAApB;AACH;;AAED;;;;;;;;;wBAOA;AACI,aAAO,KAAKV,MAAL,CAAYF,MAAnB;AACH;;AAED;;;;;;sBAKWY,G,EACX;AACI,WAAKV,MAAL,CAAYF,MAAZ,GAAqBY,GAArB;AACH;;;;;;kBArGgBd,kB","file":"CanvasRenderTarget.js","sourcesContent":["import settings from '../../../settings';\nconst { RESOLUTION } = settings;\n\n/**\n * Creates a Canvas element of the given size.\n *\n * @class\n * @memberof PIXI\n */\nexport default class CanvasRenderTarget\n{\n    /**\n     * @param {number} width - the width for the newly created canvas\n     * @param {number} height - the height for the newly created canvas\n     * @param {number} [resolution=1] - The resolution / device pixel ratio of the canvas\n     */\n    constructor(width, height, resolution)\n    {\n        /**\n         * The Canvas object that belongs to this CanvasRenderTarget.\n         *\n         * @member {HTMLCanvasElement}\n         */\n        this.canvas = document.createElement('canvas');\n\n        /**\n         * A CanvasRenderingContext2D object representing a two-dimensional rendering context.\n         *\n         * @member {CanvasRenderingContext2D}\n         */\n        this.context = this.canvas.getContext('2d');\n\n        this.resolution = resolution || RESOLUTION;\n\n        this.resize(width, height);\n    }\n\n    /**\n     * Clears the canvas that was created by the CanvasRenderTarget class.\n     *\n     * @private\n     */\n    clear()\n    {\n        this.context.setTransform(1, 0, 0, 1, 0, 0);\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n\n    /**\n     * Resizes the canvas to the specified width and height.\n     *\n     * @param {number} width - the new width of the canvas\n     * @param {number} height - the new height of the canvas\n     */\n    resize(width, height)\n    {\n        this.canvas.width = width * this.resolution;\n        this.canvas.height = height * this.resolution;\n    }\n\n    /**\n     * Destroys this canvas.\n     *\n     */\n    destroy()\n    {\n        this.context = null;\n        this.canvas = null;\n    }\n\n    /**\n     * The width of the canvas buffer in pixels.\n     *\n     * @member {number}\n     * @memberof PIXI.CanvasRenderTarget#\n     */\n    get width()\n    {\n        return this.canvas.width;\n    }\n\n    /**\n     * Sets the width.\n     *\n     * @param {number} val - The value to set.\n     */\n    set width(val)\n    {\n        this.canvas.width = val;\n    }\n\n    /**\n     * The height of the canvas buffer in pixels.\n     *\n     * @member {number}\n     * @memberof PIXI.CanvasRenderTarget#\n     */\n    get height()\n    {\n        return this.canvas.height;\n    }\n\n    /**\n     * Sets the height.\n     *\n     * @param {number} val - The value to set.\n     */\n    set height(val)\n    {\n        this.canvas.height = val;\n    }\n}\n"]}