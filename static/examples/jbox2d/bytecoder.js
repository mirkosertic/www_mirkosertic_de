'use strict';

var bytecoder = {

     logDebug : function(aValue) { 
         console.log(aValue);
     }, 

     logByteArrayAsString : function(aArray) { 
         var theResult = '';
         for (var i=0;i<aArray.data.length;i++) {
             theResult += String.fromCharCode(aArray.data[i]);
         }
         console.log(theResult);
     }, 

     newString : function(aByteArray) { 
          var theNewString = new jlString.Create();
          var theBytes = new jlrArray.Create();
          theBytes.data = aByteArray;
          jlString.VOIDinitA1BYTE(theNewString, theBytes);
          return theNewString;
     },

     newMultiArray : function(aDimensions, aDefault) {
         var theLength = aDimensions[0];
         var theArray = bytecoder.newArray(theLength, aDefault);
         if (aDimensions.length > 1) {
             var theNewDimensions = aDimensions.slice(0);
             theNewDimensions.shift();
             for (var i=0;i<theLength;i++) {
                 theArray.data[i] = bytecoder.newMultiArray(theNewDimensions, aDefault);
             }
         }
         return theArray;
     },

     newArray : function(aLength, aDefault) {
          var theInstance = new jlrArray.Create();
          theInstance.data = [];
          theInstance.data.length = aLength;
          for (var i=0;i<aLength;i++) {
             theInstance.data[i] = aDefault;
          }
          return theInstance;
     },

     toBytecoderString: function(aJSString) {
         var theLength = aJSString.length;
         var theArray = [];
         for (var i=0;i<theLength;i++) {
             theArray.push(aJSString.charCodeAt(i));
         }
         return bytecoder.newString(theArray);
     },

     toJSString: function(aBytecoderString) {
         var theArray = aBytecoderString.data.data;
         var theResult = '';
         for (var i=0;i<theArray.length;i++) {
             theResult+=String.fromCharCode(theArray[i]);
         }
         return theResult;
     },

     dynamicType : function(aFunction) { 
         return new Proxy({}, {
             get: function(target, name) {
                 return function(inst, _p1, _p2, _p3, _p4, _p5, _p6, _p7, _p8, _p9) {
                    return aFunction(_p1, _p2, _p3, _p4, _p5, _p6, _p7, _p8, _p9);
                 }
             }
         });
     }, 

     resolveStaticCallSiteObject: function(aWhere, aKey, aProducerFunction) {
         var resolvedCallsiteObject = aWhere.__staticCallSites[aKey];
         if (resolvedCallsiteObject == null) {
             resolvedCallsiteObject = aProducerFunction();
             aWhere.__staticCallSites[aKey] = resolvedCallsiteObject;
         }
         return resolvedCallsiteObject;
     },

     imports : {
         system : {
             currentTimeMillis: function() {
                 return Date.now();
             },
             nanoTime: function() {
                 return Date.now() * 1000000;
             },
             writeByteArrayToConsole: function(thisRef, p1) {
                 bytecoder.logByteArrayAsString(p1);
             },
             logDebug: function(thisref, p1) {
                 bytecoder.logDebug(p1);
             },
         },
         printstream : {
             logDebug: function(p1) {
                 bytecoder.logDebug(p1);
             },
         },
         math : {
             ceil: function(p1) {
                 return Math.ceil(p1);
             },
             floor: function(p1) {
                 return Math.floor(p1);
             },
             sin: function(p1) {
                 return Math.sin(p1);
             },
             cos: function(p1) {
                 return Math.cos(p1);
             },
             sqrt: function(p1) {
                 return Math.sqrt(p1);
             },
             round: function(p1) {
                 return Math.round(p1);
             },
             NaN: function(p1) {
                 return NaN;
             },
             atan2: function(p1, p2) {
                 return Math.atan2(p1, p2);
             },
             max: function(p1, p2) {
                 return Math.max(p1, p2);
             },
             random: function() {
                 return Math.random();
             },
             tan: function(p1) {
                 return Math.tan(p1);
             },
             toRadians: function(p1) {
                 return Math.toRadians(p1);
             },
             toDegrees: function(p1) {
                 return Math.toDegrees(p1);
             },
             min: function (p1, p2) {
                 return Math.min(p1, p2);
             },
             add: function(p1, p2) {
                 return p1 + p2;
             },
         },
         strictmath : {
             sin: function(p1) {
                 return Math.sin(p1);
             },
             cos: function(p1) {
                 return Math.cos(p1);
             },
             sqrt: function(p1) {
                 return Math.sqrt(p1);
             },
             round: function(p1) {
                 return Math.round(p1);
             },
             atan2: function(p1, p2) {
                 return Math.atan2(p1, p2);
             },
         },
         runtime : {
             nativewindow: function() {
                 return window;
             },
         },
     },

     exports : {},

     stringpool : [],

};

var jlClass = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 0,
    __implementedTypes : [4,0,2,5,1,3],

    Create : function() {
    },

    instanceOf : function(aType) {
        return jlClass.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jlClass;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    jlStringgetName : function(thisRef) {
        var __label__ = null;
        return bytecoder.stringpool[0];
    },

    jlClassgetComponentType : function(thisRef) {
        var __label__ = null;
        return null;
    },

    classInitCheck : function() {
        if (!jlClass.__initialized) {
            jlClass.__initialized = true;
            var thePrototype = jlClass.Create.prototype;
            thePrototype.instanceOf = jlClass.instanceOf;
            thePrototype.ClassgetClass = jlClass.ClassgetClass;
            thePrototype.jlClassgetComponentType = jlClass.jlClassgetComponentType;
            thePrototype.jlStringgetName = jlClass.jlStringgetName;
            thePrototype.BOOLEANdesiredAssertionStatus = jlClass.BOOLEANdesiredAssertionStatus;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            jlrAnnotatedElement.classInitCheck();
            jiSerializable.classInitCheck();
            jlrType.classInitCheck();
            jlrGenericDeclaration.classInitCheck();
        }
    },

};

var jlObject = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 1,
    __implementedTypes : [1],

    Create : function() {
    },

    instanceOf : function(aType) {
        return jlObject.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jlObject;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    INThashCode : function(thisRef) {
        var __label__ = null;
        return 0;
    },

    BOOLEANequalsjlObject : function(thisRef,aObject) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((thisRef != aObject)) {
                __label__ = 9;
                break $S_0;
            }
            __label__ = 5;
            }
        for(;;) switch (__label__) {
            case 9 :
            // NORMAL
                var var0 = 0; // type is INT value type is INT
                return var0;
            case 5 :
            // NORMAL
                var var0 = 1; // type is INT value type is INT
                return var0;
        }
    },

    jlStringtoString : function(thisRef) {
        var __label__ = null;
        return bytecoder.stringpool[0];
    },

    classInitCheck : function() {
        if (!jlObject.__initialized) {
            jlObject.__initialized = true;
            var thePrototype = jlObject.Create.prototype;
            thePrototype.instanceOf = jlObject.instanceOf;
            thePrototype.ClassgetClass = jlObject.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
        }
    },

};

var jiSerializable = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 2,
    __implementedTypes : [2,1],


    classInitCheck : function() {
        if (!jiSerializable.__initialized) {
            jiSerializable.__initialized = true;
            jlObject.classInitCheck();
        }
    },

};

var jlrGenericDeclaration = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 3,
    __implementedTypes : [4,1,3],


    classInitCheck : function() {
        if (!jlrGenericDeclaration.__initialized) {
            jlrGenericDeclaration.__initialized = true;
            jlObject.classInitCheck();
            jlrAnnotatedElement.classInitCheck();
        }
    },

};

var jlrAnnotatedElement = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 4,
    __implementedTypes : [4,1],


    classInitCheck : function() {
        if (!jlrAnnotatedElement.__initialized) {
            jlrAnnotatedElement.__initialized = true;
            jlObject.classInitCheck();
        }
    },

};

var jlrType = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 5,
    __implementedTypes : [5,1],


    classInitCheck : function() {
        if (!jlrType.__initialized) {
            jlrType.__initialized = true;
            jlObject.classInitCheck();
        }
    },

};

var dmbcVM$ImplementingCallsite = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 6,
    __implementedTypes : [6,8,7,1],

    instanceOf : function(aType) {
        return dmbcVM$ImplementingCallsite.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return dmbcVM$ImplementingCallsite;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    classInitCheck : function() {
        if (!dmbcVM$ImplementingCallsite.__initialized) {
            dmbcVM$ImplementingCallsite.__initialized = true;
            jliConstantCallSite.classInitCheck();
            jliCallSite.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var jliConstantCallSite = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 7,
    __implementedTypes : [8,7,1],

    Create : function() {
    },

    instanceOf : function(aType) {
        return jliConstantCallSite.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jliConstantCallSite;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    classInitCheck : function() {
        if (!jliConstantCallSite.__initialized) {
            jliConstantCallSite.__initialized = true;
            var thePrototype = jliConstantCallSite.Create.prototype;
            thePrototype.instanceOf = jliConstantCallSite.instanceOf;
            thePrototype.ClassgetClass = jliConstantCallSite.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jliCallSite.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var jliCallSite = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 8,
    __implementedTypes : [8,1],

    instanceOf : function(aType) {
        return jliCallSite.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jliCallSite;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    classInitCheck : function() {
        if (!jliCallSite.__initialized) {
            jliCallSite.__initialized = true;
            jlObject.classInitCheck();
        }
    },

};

var dmbiJBox2DSimulation = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 9,
    __implementedTypes : [9,1],
    scene : null, // declared in de.mirkosertic.bytecoder.integrationtest.JBox2DSimulation
    renderingContext2D : null, // declared in de.mirkosertic.bytecoder.integrationtest.JBox2DSimulation

    Create : function() {
    },

    instanceOf : function(aType) {
        return dmbiJBox2DSimulation.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return dmbiJBox2DSimulation;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDmainA1jlString : function(args) {
        var __label__ = null;
        var var0 = new dmbiJBox2DSimulation$Scene.Create(); // type is REFERENCE value type is REFERENCE
        dmbiJBox2DSimulation$Scene.VOIDinit(var0);
        dmbiJBox2DSimulation.scene = var0;
        var var1 = bytecoder.imports.runtime.nativewindow(); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6140ffc8
        var var2 = var1.document; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3c7314b5
        var var3 = var2.getElementById(bytecoder.toJSString(bytecoder.stringpool[1])); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3dc21cfb
        var local_1_REFERENCE = var3; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@19b0714a
        var var6 = local_1_REFERENCE.getContext(bytecoder.toJSString(bytecoder.stringpool[2])); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@357049d4
        dmbiJBox2DSimulation.renderingContext2D = var6;
        return;
    },

    VOIDproceedSimulation : function() {
        var __label__ = null;
        var var0 = jlSystem.LONGcurrentTimeMillis(); // type is LONG value type is LONG
        var local_0_LONG = var0; // type is LONG value type is LONG
        dmbiJBox2DSimulation.scene.VOIDcalculate(dmbiJBox2DSimulation.scene);
        dmbiJBox2DSimulation.VOIDrender();
        var var4 = jlSystem.LONGcurrentTimeMillis(); // type is LONG value type is LONG
        var local_2_LONG = (var4 - local_0_LONG); // type is LONG value type is LONG
        dmbiJBox2DSimulation.VOIDlogRuntimeINT(Math.floor(local_2_LONG));
        return;
    },

    VOIDrender : function() {
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_0_REFERENCE = null; // type is REFERENCE # of inits = 4
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_6_INT = null; // type is INT # of inits = 3
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 4
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            dmbiJBox2DSimulation.renderingContext2D.fillStyle=bytecoder.toJSString(bytecoder.stringpool[3]);
            dmbiJBox2DSimulation.renderingContext2D.strokeStyle=bytecoder.toJSString(bytecoder.stringpool[4]);
            dmbiJBox2DSimulation.renderingContext2D.fillRect(0.0,0.0,600.0,600.0);
            dmbiJBox2DSimulation.renderingContext2D.save();
            dmbiJBox2DSimulation.renderingContext2D.translate(0.0,600.0);
            dmbiJBox2DSimulation.renderingContext2D.scale(1.0,-1.0);
            dmbiJBox2DSimulation.renderingContext2D.scale(100.0,100.0);
            dmbiJBox2DSimulation.renderingContext2D.lineWidth=0.01;
            var var9 = dmbiJBox2DSimulation.scene.ojdWorldgetWorld(dmbiJBox2DSimulation.scene); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5ad260ad
            var var10 = var9.ojdBodygetBodyList(var9); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@18c5dc0f
            local_0_REFERENCE = var10; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6dd3ab53
            __label__ = 96;
            }
        $L_96 : for (;;) {
            $S_96 : {
            // NORMAL
                var var12 = local_0_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6dd3ab53
                if (var12 == null ) {
                    __label__ = 371;
                    break $S_96;
                }
                __label__ = 100;
                }
            for(;;) switch (__label__) {
                case 371 :
                // NORMAL
                    dmbiJBox2DSimulation.renderingContext2D.restore();
                    return;
                case 100 :
                // NORMAL
                    $S_100 : {
                    // NORMAL
                        var var14 = local_0_REFERENCE.ojcVec2getPosition(local_0_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@709893e4
                        var local_1_REFERENCE = var14; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@eaf9a5d
                        dmbiJBox2DSimulation.renderingContext2D.save();
                        dmbiJBox2DSimulation.renderingContext2D.translate(local_1_REFERENCE.x,local_1_REFERENCE.y);
                        var var22 = dmbiJBox2DSimulation.renderingContext2D; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@38bc1a23
                        var var24 = local_0_REFERENCE.FLOATgetAngle(local_0_REFERENCE); // type is FLOAT value type is FLOAT
                        var22.rotate(var24);
                        var var26 = local_0_REFERENCE.ojdFixturegetFixtureList(local_0_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@336a9396
                        local_2_REFERENCE = var26; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@78b42f63
                        __label__ = 146;
                        }
                    $L_146 : for (;;) {
                        $S_146 : {
                        // NORMAL
                            var var28 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@78b42f63
                            if (var28 == null ) {
                                __label__ = 355;
                                break $S_146;
                            }
                            __label__ = 150;
                            }
                        for(;;) switch (__label__) {
                            case 355 :
                            // NORMAL
                                dmbiJBox2DSimulation.renderingContext2D.restore();
                                var var88 = local_0_REFERENCE.ojdBodygetNext(local_0_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7d931ac
                                local_0_REFERENCE = var88; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1e092860
                                __label__ = 96;
                                continue $L_96;
                            case 150 :
                            // NORMAL
                                $S_150 : {
                                // NORMAL
                                    var var30 = local_2_REFERENCE.ojcsShapegetShape(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2d635fe3
                                    local_3_REFERENCE = var30; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@377d6446
                                    var var33 = local_3_REFERENCE.ojcsShapeTypegetType(local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4a729ffa
                                    var var34 = ojcsShapeType.CIRCLE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4e89349
                                    if ((var33 != var34)) {
                                        __label__ = 235;
                                        break $S_150;
                                    }
                                    __label__ = 165;
                                    }
                                $M_235_165 : for(;;) switch (__label__) {
                                    case 165 :
                                    // NORMAL
                                        var var66 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@377d6446
                                        local_4_REFERENCE = var66; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@377d6446
                                        dmbiJBox2DSimulation.renderingContext2D.beginPath();
                                        var var68 = dmbiJBox2DSimulation.renderingContext2D; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@40095852
                                        var var72 = local_4_REFERENCE.m_p.x; // type is DOUBLE value type is DOUBLE
                                        var var76 = local_4_REFERENCE.m_p.y; // type is DOUBLE value type is DOUBLE
                                        var var78 = local_4_REFERENCE.FLOATgetRadius(local_4_REFERENCE); // type is FLOAT value type is FLOAT
                                        var68.arc(var72,var76,var78,0.0,6.283185307179586,1);
                                        dmbiJBox2DSimulation.renderingContext2D.closePath();
                                        dmbiJBox2DSimulation.renderingContext2D.stroke();
                                        break $M_235_165;
                                    case 235 :
                                    // NORMAL
                                        $S_235 : {
                                        // NORMAL
                                            var var36 = local_3_REFERENCE.ojcsShapeTypegetType(local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@77228bf7
                                            var var37 = ojcsShapeType.POLYGON; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@297157a6
                                            if ((var36 != var37)) {
                                                break $M_235_165;
                                            }
                                            }
                                        $S_245 : {
                                        // NORMAL
                                            var var38 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@377d6446
                                            local_4_REFERENCE = var38; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@377d6446
                                            var var41 = local_4_REFERENCE.A1ojcVec2getVertices(local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@6302e5b8
                                            local_5_REFERENCE = var41; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@606010e1
                                            dmbiJBox2DSimulation.renderingContext2D.beginPath();
                                            var var44 = dmbiJBox2DSimulation.renderingContext2D; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@9cb71c
                                            var var46 = local_5_REFERENCE.data[0]; // type is REFERENCE value type is REFERENCE
                                            var var47 = var46.x; // type is FLOAT value type is FLOAT
                                            var var49 = local_5_REFERENCE.data[0]; // type is REFERENCE value type is REFERENCE
                                            var44.moveTo(var47,var49.y);
                                            local_6_INT = 1; // type is INT value type is INT
                                            __label__ = 291;
                                            }
                                        $L_291 : for (;;) {
                                            $S_291 : {
                                            // NORMAL
                                                var var53 = local_6_INT; // type is INT value type is INT
                                                var var55 = local_4_REFERENCE.INTgetVertexCount(local_4_REFERENCE); // type is INT value type is INT
                                                if ((var53 >= var55)) {
                                                    __label__ = 331;
                                                    break $S_291;
                                                }
                                                __label__ = 301;
                                                }
                                            for(;;) switch (__label__) {
                                                case 331 :
                                                // NORMAL
                                                    dmbiJBox2DSimulation.renderingContext2D.closePath();
                                                    dmbiJBox2DSimulation.renderingContext2D.stroke();
                                                    break $M_235_165;
                                                case 301 :
                                                // NORMAL
                                                    var var56 = dmbiJBox2DSimulation.renderingContext2D; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@23f31cce
                                                    var var59 = local_5_REFERENCE.data[local_6_INT]; // type is REFERENCE value type is REFERENCE
                                                    var var60 = var59.x; // type is FLOAT value type is FLOAT
                                                    var var63 = local_5_REFERENCE.data[local_6_INT]; // type is REFERENCE value type is REFERENCE
                                                    var56.lineTo(var60,var63.y);
                                                    local_6_INT = (local_6_INT + 1); // type is INT value type is INT
                                                    __label__ = 291;
                                                    continue $L_291;
                                            }
                                        }
                                }
                                var var85 = local_2_REFERENCE.ojdFixturegetNext(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@551e3881
                                local_2_REFERENCE = var85; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4704d6c6
                                __label__ = 146;
                                continue $L_146;
                        }
                    }
            }
        }
    },

    VOIDlogRuntimeINT : function(p1) {
         return bytecoder.imports.debug.logRuntime(p1);
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    classInitCheck : function() {
        if (!dmbiJBox2DSimulation.__initialized) {
            dmbiJBox2DSimulation.__initialized = true;
            var thePrototype = dmbiJBox2DSimulation.Create.prototype;
            thePrototype.instanceOf = dmbiJBox2DSimulation.instanceOf;
            thePrototype.ClassgetClass = dmbiJBox2DSimulation.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var jlString = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 10,
    __implementedTypes : [12,2,1,10,11],

    Create : function() {
        this.data = null; // declared in java.lang.String
        this.computedHash = 0; // declared in java.lang.String
    },

    instanceOf : function(aType) {
        return jlString.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jlString;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitA1BYTE : function(thisRef,aData) {
        var __label__ = null;
        thisRef.data = aData;
        return;
    },

    INTcompareTojlString : function(thisRef,o) {
        var __label__ = null;
        return 0;
    },

    jlStringvalueOfjlObject : function(obj) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if (obj != null ) {
                __label__ = 9;
                break $S_0;
            }
            __label__ = 4;
            }
        for(;;) switch (__label__) {
            case 4 :
            // NORMAL
                var var1 = bytecoder.stringpool[5]; // type is REFERENCE value type is REFERENCE
                return var1;
            case 9 :
            // NORMAL
                var var0 = obj.jlStringtoString(obj); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@27ba14cd
                var var1 = var0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@32c07dfe
                return var1;
        }
    },

    A1BYTEgetBytes : function(thisRef) {
        var __label__ = null;
        return thisRef.data;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = bytecoder.newArray(0,0); // type is REFERENCE value type is REFERENCE
        thisRef.data = var0;
        return;
    },

    INThashCode : function(thisRef) {
        var local_1_INT = null; // type is INT # of inits = 3
        var local_2_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_1_INT = thisRef.computedHash; // type is INT value type is INT
            var var3 = local_1_INT; // type is INT value type is INT
            if ((var3 != 0)) {
                return local_1_INT;
            }
            }
        $S_9 : {
        // NORMAL
            var var5 = thisRef.data.data.length; // type is INT value type is INT
            if ((var5 <= 0)) {
                return local_1_INT;
            }
            }
        $S_17 : {
        // NORMAL
            local_2_INT = 0; // type is INT value type is INT
            __label__ = 19;
            }
        $L_19 : for (;;) {
            $S_19 : {
            // NORMAL
                var var8 = local_2_INT; // type is INT value type is INT
                var var10 = thisRef.data.data.length; // type is INT value type is INT
                if ((var8 >= var10)) {
                    __label__ = 46;
                    break $S_19;
                }
                __label__ = 28;
                }
            for(;;) switch (__label__) {
                case 46 :
                // NORMAL
                    var var11 = local_1_INT; // type is INT value type is INT
                    thisRef.computedHash = var11;
                    return local_1_INT;
                case 28 :
                // NORMAL
                    var var14 = (31 * local_1_INT); // type is INT value type is INT
                    var var17 = thisRef.data.data[local_2_INT]; // type is BYTE value type is BYTE
                    local_1_INT = (var14 + var17); // type is INT value type is INT
                    local_2_INT = (local_2_INT + 1); // type is INT value type is INT
                    __label__ = 19;
                    continue $L_19;
            }
        }
    },

    BOOLEANequalsjlObject : function(thisRef,aOtherObject) {
        var local_4_INT = null; // type is INT # of inits = 3
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((thisRef != aOtherObject)) {
                break $S_0;
            }
            return 1;
            }
        $S_7 : {
        // NORMAL
            var var0 = (aOtherObject == null ? false : aOtherObject.instanceOf(jlString)); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                break $S_7;
            }
            return 0;
            }
        $S_16 : {
        // NORMAL
            local_2_REFERENCE = aOtherObject; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@af3e859
            var var3 = local_2_REFERENCE.INTlength(local_2_REFERENCE); // type is INT value type is INT
            var var5 = thisRef.data.data.length; // type is INT value type is INT
            if ((var3 == var5)) {
                break $S_16;
            }
            return 0;
            }
        $S_35 : {
        // NORMAL
            var var7 = local_2_REFERENCE.A1BYTEgetBytes(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@31d679cd
            local_3_REFERENCE = var7; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@c4720b6
            local_4_INT = 0; // type is INT value type is INT
            __label__ = 43;
            }
        $L_43 : for (;;) {
            $S_43 : {
            // NORMAL
                var var11 = local_4_INT; // type is INT value type is INT
                var var13 = thisRef.data.data.length; // type is INT value type is INT
                if ((var11 >= var13)) {
                    return 1;
                }
                }
            $S_53 : {
            // NORMAL
                var var16 = thisRef.data.data[local_4_INT]; // type is BYTE value type is BYTE
                var var19 = local_3_REFERENCE.data[local_4_INT]; // type is BYTE value type is BYTE
                if ((var16 == var19)) {
                    break $S_53;
                }
                return 0;
                }
            local_4_INT = (local_4_INT + 1); // type is INT value type is INT
            __label__ = 43;
            continue $L_43;
        }
    },

    INTlength : function(thisRef) {
        var __label__ = null;
        return thisRef.data.data.length;
    },

    jlStringtoString : function(thisRef) {
        var __label__ = null;
        var local_1_REFERENCE = thisRef; // type is REFERENCE value type is REFERENCE
        var var1 = local_1_REFERENCE; // type is REFERENCE value type is REFERENCE
        return var1;
    },

    INTcompareTojlObject : function(thisRef,p1) {
        var __label__ = null;
        var var0 = thisRef.INTcompareTojlString(thisRef,p1); // type is INT value type is INT
        return var0;
    },

    CHARcharAtINT : function(thisRef,aIndex) {
        var __label__ = null;
        var var1 = thisRef.data.data[aIndex]; // type is BYTE value type is BYTE
        return Math.floor(var1);
    },

    jlStringformatjlStringA1jlObject : function(aPattern,aValues) {
        var __label__ = null;
        return aPattern;
    },

    classInitCheck : function() {
        if (!jlString.__initialized) {
            jlString.__initialized = true;
            var thePrototype = jlString.Create.prototype;
            thePrototype.instanceOf = jlString.instanceOf;
            thePrototype.ClassgetClass = jlString.ClassgetClass;
            thePrototype.CHARcharAtINT = jlString.CHARcharAtINT;
            thePrototype.INTcompareTojlObject = jlString.INTcompareTojlObject;
            thePrototype.jlStringtoString = jlString.jlStringtoString;
            thePrototype.INTlength = jlString.INTlength;
            thePrototype.BOOLEANequalsjlObject = jlString.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlString.INThashCode;
            thePrototype.A1BYTEgetBytes = jlString.A1BYTEgetBytes;
            thePrototype.INTcompareTojlString = jlString.INTcompareTojlString;
            jlObject.classInitCheck();
            jlCharSequence.classInitCheck();
            jiSerializable.classInitCheck();
            jlComparable.classInitCheck();
        }
    },

};

var jlComparable = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 11,
    __implementedTypes : [1,11],


    classInitCheck : function() {
        if (!jlComparable.__initialized) {
            jlComparable.__initialized = true;
            jlObject.classInitCheck();
        }
    },

};

var jlCharSequence = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 12,
    __implementedTypes : [12,1],


    classInitCheck : function() {
        if (!jlCharSequence.__initialized) {
            jlCharSequence.__initialized = true;
            jlObject.classInitCheck();
        }
    },

};

var dmbiJBox2DSimulation$Scene = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 13,
    __implementedTypes : [13,1],

    Create : function() {
        this.world = null; // declared in de.mirkosertic.bytecoder.integrationtest.JBox2DSimulation$Scene
        this.axis = null; // declared in de.mirkosertic.bytecoder.integrationtest.JBox2DSimulation$Scene
        this.reel = null; // declared in de.mirkosertic.bytecoder.integrationtest.JBox2DSimulation$Scene
        this.lastCalculated = 0; // declared in de.mirkosertic.bytecoder.integrationtest.JBox2DSimulation$Scene
        this.startTime = 0; // declared in de.mirkosertic.bytecoder.integrationtest.JBox2DSimulation$Scene
    },

    instanceOf : function(aType) {
        return dmbiJBox2DSimulation$Scene.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return dmbiJBox2DSimulation$Scene;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = new ojdWorld.Create(); // type is REFERENCE value type is REFERENCE
        var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinitFLOATFLOAT(var1,0.0,-9.8);
        ojdWorld.VOIDinitojcVec2(var0,var1);
        thisRef.world = var0;
        thisRef.VOIDinitAxis(thisRef);
        thisRef.VOIDinitReel(thisRef);
        thisRef.VOIDjoinReelToAxis(thisRef);
        thisRef.VOIDinitBalls(thisRef);
        var var2 = jlSystem.LONGcurrentTimeMillis(); // type is LONG value type is LONG
        thisRef.lastCalculated = var2;
        var var3 = thisRef.lastCalculated; // type is LONG value type is LONG
        thisRef.startTime = var3;
        return;
    },

    VOIDinitAxis : function(thisRef) {
        var __label__ = null;
        var var0 = new ojdBodyDef.Create(); // type is REFERENCE value type is REFERENCE
        ojdBodyDef.VOIDinit(var0);
        var local_1_REFERENCE = var0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7fdb64e
        var var2 = local_1_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7fdb64e
        var var3 = ojdBodyType.STATIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5cad35a3
        var2.type = var3;
        var var4 = local_1_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7fdb64e
        var var5 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinitFLOATFLOAT(var5,3.0,3.0);
        var4.position = var5;
        var var8 = thisRef.world.ojdBodycreateBodyojdBodyDef(thisRef.world,local_1_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@19706691
        thisRef.axis = var8;
        var var9 = new ojcsCircleShape.Create(); // type is REFERENCE value type is REFERENCE
        ojcsCircleShape.VOIDinit(var9);
        var local_2_REFERENCE = var9; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@48383b4
        local_2_REFERENCE.VOIDsetRadiusFLOAT(local_2_REFERENCE,0.02);
        var var14 = local_2_REFERENCE.m_p.ojcVec2setFLOATFLOAT(local_2_REFERENCE.m_p,0.0,0.0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3136beaa
        var var15 = new ojdFixtureDef.Create(); // type is REFERENCE value type is REFERENCE
        ojdFixtureDef.VOIDinit(var15);
        var local_3_REFERENCE = var15; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@752fc9a1
        var var17 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@752fc9a1
        var var18 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@48383b4
        var17.shape = var18;
        var var21 = thisRef.axis.ojdFixturecreateFixtureojdFixtureDef(thisRef.axis,local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6d297a93
        return;
    },

    VOIDinitReel : function(thisRef) {
        var local_4_INT = null; // type is INT # of inits = 3
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = new ojdBodyDef.Create(); // type is REFERENCE value type is REFERENCE
            ojdBodyDef.VOIDinit(var0);
            var local_1_REFERENCE = var0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4590b68c
            var var2 = local_1_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4590b68c
            var var3 = ojdBodyType.DYNAMIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4145f4f5
            var2.type = var3;
            var var4 = local_1_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4590b68c
            var var5 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinitFLOATFLOAT(var5,3.0,3.0);
            var4.position = var5;
            var var8 = thisRef.world.ojdBodycreateBodyojdBodyDef(thisRef.world,local_1_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1792cddf
            thisRef.reel = var8;
            var var9 = new ojdFixtureDef.Create(); // type is REFERENCE value type is REFERENCE
            ojdFixtureDef.VOIDinit(var9);
            local_2_REFERENCE = var9; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5bbf9da6
            var var11 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5bbf9da6
            var11.friction = 0.5;
            var var12 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5bbf9da6
            var12.restitution = 0.4;
            var var13 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5bbf9da6
            var13.density = 1.0;
            var local_3_INT = 30; // type is INT value type is INT
            local_4_INT = 0; // type is INT value type is INT
            __label__ = 73;
            }
        $L_73 : for (;;) {
            $S_73 : {
            // NORMAL
                var var18 = local_4_INT; // type is INT value type is INT
                if ((var18 >= 30)) {
                    return;
                }
                }
            var var19 = new ojcsPolygonShape.Create(); // type is REFERENCE value type is REFERENCE
            ojcsPolygonShape.VOIDinit(var19);
            var local_5_REFERENCE = var19; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5ea59a63
            var local_6_DOUBLE = (((local_4_INT / 30.0) * 2.0) * 3.141592653589793); // type is DOUBLE value type is DOUBLE
            var var29 = jlMath.DOUBLEcosDOUBLE(local_6_DOUBLE); // type is DOUBLE value type is DOUBLE
            var local_8_DOUBLE = (2.7 * var29); // type is DOUBLE value type is DOUBLE
            var var34 = jlMath.DOUBLEsinDOUBLE(local_6_DOUBLE); // type is DOUBLE value type is DOUBLE
            var local_10_DOUBLE = (2.7 * var34); // type is DOUBLE value type is DOUBLE
            var local_12_DOUBLE = ((((local_4_INT + 1) / 30.0) * 2.0) * 3.141592653589793); // type is DOUBLE value type is DOUBLE
            var var47 = jlMath.DOUBLEcosDOUBLE(local_12_DOUBLE); // type is DOUBLE value type is DOUBLE
            var local_14_DOUBLE = (2.7 * var47); // type is DOUBLE value type is DOUBLE
            var var52 = jlMath.DOUBLEsinDOUBLE(local_12_DOUBLE); // type is DOUBLE value type is DOUBLE
            var local_16_DOUBLE = (2.7 * var52); // type is DOUBLE value type is DOUBLE
            var local_18_DOUBLE = ((local_6_DOUBLE + local_12_DOUBLE) / 2.0); // type is DOUBLE value type is DOUBLE
            var var63 = jlMath.DOUBLEcosDOUBLE(local_18_DOUBLE); // type is DOUBLE value type is DOUBLE
            var local_20_DOUBLE = (0.01 * var63); // type is DOUBLE value type is DOUBLE
            var var68 = jlMath.DOUBLEsinDOUBLE(local_18_DOUBLE); // type is DOUBLE value type is DOUBLE
            var local_22_DOUBLE = (0.01 * var68); // type is DOUBLE value type is DOUBLE
            var var72 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5ea59a63
            var var73 = bytecoder.newArray(4,null); // type is REFERENCE value type is REFERENCE
            var var74 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinitFLOATFLOAT(var74,local_8_DOUBLE,local_10_DOUBLE);
            var73.data[0] = var74;
            var var79 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinitFLOATFLOAT(var79,local_14_DOUBLE,local_16_DOUBLE);
            var73.data[1] = var79;
            var var84 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinitFLOATFLOAT(var84,(local_14_DOUBLE - local_20_DOUBLE),(local_16_DOUBLE - local_22_DOUBLE));
            var73.data[2] = var84;
            var var93 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinitFLOATFLOAT(var93,(local_8_DOUBLE - local_20_DOUBLE),(local_10_DOUBLE - local_22_DOUBLE));
            var73.data[3] = var93;
            var72.VOIDsetA1ojcVec2INT(var72,var73,4);
            var var102 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5bbf9da6
            var var103 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5ea59a63
            var102.shape = var103;
            var var106 = thisRef.reel.ojdFixturecreateFixtureojdFixtureDef(thisRef.reel,local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@704dce8c
            local_4_INT = (local_4_INT + 1); // type is INT value type is INT
            __label__ = 73;
            continue $L_73;
        }
    },

    VOIDjoinReelToAxis : function(thisRef) {
        var __label__ = null;
        var var0 = new ojdjRevoluteJointDef.Create(); // type is REFERENCE value type is REFERENCE
        ojdjRevoluteJointDef.VOIDinit(var0);
        var local_1_REFERENCE = var0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7dfdb9
        var var2 = local_1_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7dfdb9
        var var3 = thisRef.axis; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@58983edb
        var2.bodyA = var3;
        var var4 = local_1_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7dfdb9
        var var5 = thisRef.reel; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@247474bf
        var4.bodyB = var5;
        var var8 = thisRef.world.ojdjJointcreateJointojdjJointDef(thisRef.world,local_1_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5b458171
        return;
    },

    VOIDinitBalls : function(thisRef) {
        var local_6_INT = null; // type is INT # of inits = 3
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_5_INT = null; // type is INT # of inits = 4
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var local_1_FLOAT = 0.15; // type is FLOAT value type is FLOAT
            var var2 = new ojdBodyDef.Create(); // type is REFERENCE value type is REFERENCE
            ojdBodyDef.VOIDinit(var2);
            local_2_REFERENCE = var2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@57fe647e
            var var4 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@57fe647e
            var var5 = ojdBodyType.DYNAMIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7b9e4749
            var4.type = var5;
            var var6 = new ojdFixtureDef.Create(); // type is REFERENCE value type is REFERENCE
            ojdFixtureDef.VOIDinit(var6);
            local_3_REFERENCE = var6; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@332a10d8
            var var8 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@332a10d8
            var8.friction = 0.3;
            var var9 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@332a10d8
            var9.restitution = 0.3;
            var var10 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@332a10d8
            var10.density = 0.2;
            var var11 = new ojcsCircleShape.Create(); // type is REFERENCE value type is REFERENCE
            ojcsCircleShape.VOIDinit(var11);
            var local_4_REFERENCE = var11; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6897d81a
            var var13 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6897d81a
            var13.m_radius = 0.15;
            var var14 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@332a10d8
            var var15 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6897d81a
            var14.shape = var15;
            local_5_INT = 0; // type is INT value type is INT
            __label__ = 69;
            }
        $L_69 : for (;;) {
            $S_69 : {
            // NORMAL
                var var18 = local_5_INT; // type is INT value type is INT
                if ((var18 >= 6)) {
                    return;
                }
                }
            $S_76 : {
            // NORMAL
                local_6_INT = 0; // type is INT value type is INT
                __label__ = 79;
                }
            $L_79 : for (;;) {
                $S_79 : {
                // NORMAL
                    var var21 = local_6_INT; // type is INT value type is INT
                    if ((var21 >= 6)) {
                        __label__ = 278;
                        break $S_79;
                    }
                    __label__ = 86;
                    }
                for(;;) switch (__label__) {
                    case 86 :
                    // NORMAL
                        var local_7_FLOAT = ((local_6_INT + 0.5) * 0.31); // type is FLOAT value type is FLOAT
                        var local_8_FLOAT = ((local_5_INT + 0.5) * 0.31); // type is FLOAT value type is FLOAT
                        var var35 = local_2_REFERENCE.position; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@68ab7f23
                        var var37 = (3.0 + local_7_FLOAT); // type is FLOAT value type is FLOAT
                        var35.x = var37;
                        var var39 = local_2_REFERENCE.position; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@655fe42
                        var var41 = (3.0 + local_8_FLOAT); // type is FLOAT value type is FLOAT
                        var39.y = var41;
                        var var44 = thisRef.world.ojdBodycreateBodyojdBodyDef(thisRef.world,local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@f7855ce
                        var local_9_REFERENCE = var44; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@59791b33
                        var var48 = local_9_REFERENCE.ojdFixturecreateFixtureojdFixtureDef(local_9_REFERENCE,local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6a183558
                        var var50 = local_2_REFERENCE.position; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@431661b7
                        var var52 = (3.0 - local_7_FLOAT); // type is FLOAT value type is FLOAT
                        var50.x = var52;
                        var var54 = local_2_REFERENCE.position; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@e8d9a3e
                        var var56 = (3.0 + local_8_FLOAT); // type is FLOAT value type is FLOAT
                        var54.y = var56;
                        var var59 = thisRef.world.ojdBodycreateBodyojdBodyDef(thisRef.world,local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1f3cb85f
                        var local_9_REFERENCE = var59; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@34a5fc15
                        var var62 = local_9_REFERENCE.ojdFixturecreateFixtureojdFixtureDef(local_9_REFERENCE,local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@444e38ef
                        var var64 = local_2_REFERENCE.position; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@26701632
                        var var66 = (3.0 + local_7_FLOAT); // type is FLOAT value type is FLOAT
                        var64.x = var66;
                        var var68 = local_2_REFERENCE.position; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5c74bce3
                        var var70 = (3.0 - local_8_FLOAT); // type is FLOAT value type is FLOAT
                        var68.y = var70;
                        var var73 = thisRef.world.ojdBodycreateBodyojdBodyDef(thisRef.world,local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@472aa62c
                        var local_9_REFERENCE = var73; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@72166766
                        var var76 = local_9_REFERENCE.ojdFixturecreateFixtureojdFixtureDef(local_9_REFERENCE,local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@54f13e90
                        var var78 = local_2_REFERENCE.position; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2d9b1349
                        var var80 = (3.0 - local_7_FLOAT); // type is FLOAT value type is FLOAT
                        var78.x = var80;
                        var var82 = local_2_REFERENCE.position; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3f92cb10
                        var var84 = (3.0 - local_8_FLOAT); // type is FLOAT value type is FLOAT
                        var82.y = var84;
                        var var87 = thisRef.world.ojdBodycreateBodyojdBodyDef(thisRef.world,local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7efeb6d3
                        var local_9_REFERENCE = var87; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@23a60222
                        var var90 = local_9_REFERENCE.ojdFixturecreateFixtureojdFixtureDef(local_9_REFERENCE,local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@56525c44
                        local_6_INT = (local_6_INT + 1); // type is INT value type is INT
                        __label__ = 79;
                        continue $L_79;
                    case 278 :
                    // NORMAL
                        local_5_INT = (local_5_INT + 1); // type is INT value type is INT
                        __label__ = 69;
                        continue $L_69;
                }
            }
        }
    },

    VOIDcalculate : function(thisRef) {
        var var35 = null; // type is FLOAT # of inits = 2
        var local_3_INT = null; // type is INT # of inits = 3
        var local_4_LONG = null; // type is LONG # of inits = 2
        var var32 = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = jlSystem.LONGcurrentTimeMillis(); // type is LONG value type is LONG
            var local_1_LONG = var0; // type is LONG value type is LONG
            local_3_INT = Math.floor((local_1_LONG - thisRef.lastCalculated)); // type is INT value type is INT
            local_4_LONG = (local_1_LONG - thisRef.startTime); // type is LONG value type is LONG
            jlSystem.out.VOIDprintlnjlString(jlSystem.out,bytecoder.stringpool[6]);
            jlSystem.out.VOIDprintlnLONG(jlSystem.out,local_1_LONG);
            jlSystem.out.VOIDprintlnINT(jlSystem.out,local_3_INT);
            __label__ = 42;
            }
        $L_42 : for (;;) {
            $S_42 : {
            // NORMAL
                var var19 = local_3_INT; // type is INT value type is INT
                if ((var19 <= 10)) {
                    __label__ = 129;
                    break $S_42;
                }
                __label__ = 48;
                }
            for(;;) switch (__label__) {
                case 129 :
                // NORMAL
                    var var20 = jlSystem.LONGcurrentTimeMillis(); // type is LONG value type is LONG
                    thisRef.lastCalculated = var20;
                    jlSystem.out.VOIDprintlnjlString(jlSystem.out,bytecoder.stringpool[7]);
                    return;
                case 48 :
                // NORMAL
                    $S_48 : {
                    // NORMAL
                        jlSystem.out.VOIDprintlnjlString(jlSystem.out,bytecoder.stringpool[8]);
                        jlSystem.out.VOIDprintlnLONG(jlSystem.out,Math.floor(local_3_INT));
                        var local_6_INT = Math.floor(Math.floor(((local_4_LONG + 5000) / 10000))); // type is INT value type is INT
                        var32 = thisRef.reel; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@361cfcc6
                        var var34 = (local_6_INT % 2); // type is INT value type is INT
                        if ((var34 != 0)) {
                            __label__ = 93;
                            break $S_48;
                        }
                        __label__ = 88;
                        }
                    $M_88_93 : for(;;) switch (__label__) {
                        case 88 :
                        // NORMAL
                            var35 = 8.0; // type is FLOAT value type is FLOAT
                            break $M_88_93;
                        case 93 :
                        // NORMAL
                            var35 = -8.0; // type is FLOAT value type is FLOAT
                            break $M_88_93;
                    }
                    var32.VOIDapplyTorqueFLOAT(var32,var35);
                    thisRef.world.VOIDstepFLOATINTINT(thisRef.world,0.01,20,40);
                    var var38 = (thisRef.lastCalculated + 10); // type is LONG value type is LONG
                    thisRef.lastCalculated = var38;
                    local_3_INT = (local_3_INT + -10); // type is INT value type is INT
                    __label__ = 42;
                    continue $L_42;
            }
        }
    },

    ojdWorldgetWorld : function(thisRef) {
        var __label__ = null;
        return thisRef.world;
    },

    classInitCheck : function() {
        if (!dmbiJBox2DSimulation$Scene.__initialized) {
            dmbiJBox2DSimulation$Scene.__initialized = true;
            var thePrototype = dmbiJBox2DSimulation$Scene.Create.prototype;
            thePrototype.instanceOf = dmbiJBox2DSimulation$Scene.instanceOf;
            thePrototype.ClassgetClass = dmbiJBox2DSimulation$Scene.ClassgetClass;
            thePrototype.ojdWorldgetWorld = dmbiJBox2DSimulation$Scene.ojdWorldgetWorld;
            thePrototype.VOIDcalculate = dmbiJBox2DSimulation$Scene.VOIDcalculate;
            thePrototype.VOIDinitBalls = dmbiJBox2DSimulation$Scene.VOIDinitBalls;
            thePrototype.VOIDjoinReelToAxis = dmbiJBox2DSimulation$Scene.VOIDjoinReelToAxis;
            thePrototype.VOIDinitReel = dmbiJBox2DSimulation$Scene.VOIDinitReel;
            thePrototype.VOIDinitAxis = dmbiJBox2DSimulation$Scene.VOIDinitAxis;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojdWorld = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 14,
    __implementedTypes : [14,1],
    $assertionsDisabled : false, // declared in org.jbox2d.dynamics.World
    LIQUID_INT : null, // declared in org.jbox2d.dynamics.World

    Create : function() {
        this.activeContacts = 0; // declared in org.jbox2d.dynamics.World
        this.contactPoolCount = 0; // declared in org.jbox2d.dynamics.World
        this.m_gravity = null; // declared in org.jbox2d.dynamics.World
        this.contactStacks = null; // declared in org.jbox2d.dynamics.World
        this.step = null; // declared in org.jbox2d.dynamics.World
        this.stepTimer = null; // declared in org.jbox2d.dynamics.World
        this.tempTimer = null; // declared in org.jbox2d.dynamics.World
        this.color = null; // declared in org.jbox2d.dynamics.World
        this.xf = null; // declared in org.jbox2d.dynamics.World
        this.cA = null; // declared in org.jbox2d.dynamics.World
        this.cB = null; // declared in org.jbox2d.dynamics.World
        this.avs = null; // declared in org.jbox2d.dynamics.World
        this.wqwrapper = null; // declared in org.jbox2d.dynamics.World
        this.wrcwrapper = null; // declared in org.jbox2d.dynamics.World
        this.input = null; // declared in org.jbox2d.dynamics.World
        this.island = null; // declared in org.jbox2d.dynamics.World
        this.stack = null; // declared in org.jbox2d.dynamics.World
        this.islandProfile = null; // declared in org.jbox2d.dynamics.World
        this.broadphaseTimer = null; // declared in org.jbox2d.dynamics.World
        this.toiIsland = null; // declared in org.jbox2d.dynamics.World
        this.toiInput = null; // declared in org.jbox2d.dynamics.World
        this.toiOutput = null; // declared in org.jbox2d.dynamics.World
        this.subStep = null; // declared in org.jbox2d.dynamics.World
        this.tempBodies = null; // declared in org.jbox2d.dynamics.World
        this.backup1 = null; // declared in org.jbox2d.dynamics.World
        this.backup2 = null; // declared in org.jbox2d.dynamics.World
        this.liquidLength = 0; // declared in org.jbox2d.dynamics.World
        this.averageLinearVel = 0; // declared in org.jbox2d.dynamics.World
        this.liquidOffset = null; // declared in org.jbox2d.dynamics.World
        this.circCenterMoved = null; // declared in org.jbox2d.dynamics.World
        this.liquidColor = null; // declared in org.jbox2d.dynamics.World
        this.center = null; // declared in org.jbox2d.dynamics.World
        this.axis = null; // declared in org.jbox2d.dynamics.World
        this.v1 = null; // declared in org.jbox2d.dynamics.World
        this.v2 = null; // declared in org.jbox2d.dynamics.World
        this.tlvertices = null; // declared in org.jbox2d.dynamics.World
        this.pool = null; // declared in org.jbox2d.dynamics.World
        this.m_destructionListener = null; // declared in org.jbox2d.dynamics.World
        this.m_debugDraw = null; // declared in org.jbox2d.dynamics.World
        this.m_bodyList = null; // declared in org.jbox2d.dynamics.World
        this.m_jointList = null; // declared in org.jbox2d.dynamics.World
        this.m_bodyCount = 0; // declared in org.jbox2d.dynamics.World
        this.m_jointCount = 0; // declared in org.jbox2d.dynamics.World
        this.m_warmStarting = false; // declared in org.jbox2d.dynamics.World
        this.m_continuousPhysics = false; // declared in org.jbox2d.dynamics.World
        this.m_subStepping = false; // declared in org.jbox2d.dynamics.World
        this.m_stepComplete = false; // declared in org.jbox2d.dynamics.World
        this.m_allowSleep = false; // declared in org.jbox2d.dynamics.World
        this.m_flags = 0; // declared in org.jbox2d.dynamics.World
        this.m_inv_dt0 = 0; // declared in org.jbox2d.dynamics.World
        this.m_contactManager = null; // declared in org.jbox2d.dynamics.World
        this.m_profile = null; // declared in org.jbox2d.dynamics.World
    },

    instanceOf : function(aType) {
        return ojdWorld.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdWorld;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdWorld.BOOLEANdesiredAssertionStatus(ojdWorld); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_13_9 : for(;;) switch (__label__) {
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_13_9;
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_13_9;
        }
        ojdWorld.$assertionsDisabled = var1;
        var var2 = new jlInteger.Create(); // type is REFERENCE value type is REFERENCE
        jlInteger.VOIDinitINT(var2,1234598372);
        ojdWorld.LIQUID_INT = var2;
        return;
    },

    VOIDinitojcVec2 : function(thisRef,gravity) {
        var __label__ = null;
        var var0 = new ojpnDefaultWorldPool.Create(); // type is REFERENCE value type is REFERENCE
        ojpnDefaultWorldPool.VOIDinitINTINT(var0,100,10);
        ojdWorld.VOIDinitojcVec2ojpIWorldPool(thisRef,gravity,var0);
        return;
    },

    VOIDinitojcVec2ojpIWorldPool : function(thisRef,gravity,pool) {
        var __label__ = null;
        var var0 = new ojcbDynamicTree.Create(); // type is REFERENCE value type is REFERENCE
        ojcbDynamicTree.VOIDinit(var0);
        ojdWorld.VOIDinitojcVec2ojpIWorldPoolojcbBroadPhaseStrategy(thisRef,gravity,pool,var0);
        return;
    },

    VOIDinitojcVec2ojpIWorldPoolojcbBroadPhaseStrategy : function(thisRef,gravity,argPool,broadPhaseStrategy) {
        var __label__ = null;
        thisRef.activeContacts = 0;
        thisRef.contactPoolCount = 0;
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var0);
        thisRef.m_gravity = var0;
        var var1 = ojcsShapeType.A1ojcsShapeTypevalues(); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@32c547c
        var var2 = var1.data.length; // type is INT value type is INT
        var var3 = ojcsShapeType.A1ojcsShapeTypevalues(); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@12dad04c
        var var5 = bytecoder.newMultiArray([var2,var3.data.length],null); // type is REFERENCE value type is REFERENCE
        thisRef.contactStacks = var5;
        var var6 = new ojdTimeStep.Create(); // type is REFERENCE value type is REFERENCE
        ojdTimeStep.VOIDinit(var6);
        thisRef.step = var6;
        var var7 = new ojcTimer.Create(); // type is REFERENCE value type is REFERENCE
        ojcTimer.VOIDinit(var7);
        thisRef.stepTimer = var7;
        var var8 = new ojcTimer.Create(); // type is REFERENCE value type is REFERENCE
        ojcTimer.VOIDinit(var8);
        thisRef.tempTimer = var8;
        var var9 = new ojcColor3f.Create(); // type is REFERENCE value type is REFERENCE
        ojcColor3f.VOIDinit(var9);
        thisRef.color = var9;
        var var10 = new ojcTransform.Create(); // type is REFERENCE value type is REFERENCE
        ojcTransform.VOIDinit(var10);
        thisRef.xf = var10;
        var var11 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var11);
        thisRef.cA = var11;
        var var12 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var12);
        thisRef.cB = var12;
        var var13 = new ojpaVec2Array.Create(); // type is REFERENCE value type is REFERENCE
        ojpaVec2Array.VOIDinit(var13);
        thisRef.avs = var13;
        var var14 = new ojdWorldQueryWrapper.Create(); // type is REFERENCE value type is REFERENCE
        ojdWorldQueryWrapper.VOIDinit(var14);
        thisRef.wqwrapper = var14;
        var var15 = new ojdWorldRayCastWrapper.Create(); // type is REFERENCE value type is REFERENCE
        ojdWorldRayCastWrapper.VOIDinit(var15);
        thisRef.wrcwrapper = var15;
        var var16 = new ojcRayCastInput.Create(); // type is REFERENCE value type is REFERENCE
        ojcRayCastInput.VOIDinit(var16);
        thisRef.input = var16;
        var var17 = new ojdIsland.Create(); // type is REFERENCE value type is REFERENCE
        ojdIsland.VOIDinit(var17);
        thisRef.island = var17;
        var var18 = bytecoder.newArray(10,null); // type is REFERENCE value type is REFERENCE
        thisRef.stack = var18;
        var var19 = new ojdProfile.Create(); // type is REFERENCE value type is REFERENCE
        ojdProfile.VOIDinit(var19);
        thisRef.islandProfile = var19;
        var var20 = new ojcTimer.Create(); // type is REFERENCE value type is REFERENCE
        ojcTimer.VOIDinit(var20);
        thisRef.broadphaseTimer = var20;
        var var21 = new ojdIsland.Create(); // type is REFERENCE value type is REFERENCE
        ojdIsland.VOIDinit(var21);
        thisRef.toiIsland = var21;
        var var22 = new ojcTimeOfImpact$TOIInput.Create(); // type is REFERENCE value type is REFERENCE
        ojcTimeOfImpact$TOIInput.VOIDinit(var22);
        thisRef.toiInput = var22;
        var var23 = new ojcTimeOfImpact$TOIOutput.Create(); // type is REFERENCE value type is REFERENCE
        ojcTimeOfImpact$TOIOutput.VOIDinit(var23);
        thisRef.toiOutput = var23;
        var var24 = new ojdTimeStep.Create(); // type is REFERENCE value type is REFERENCE
        ojdTimeStep.VOIDinit(var24);
        thisRef.subStep = var24;
        var var25 = bytecoder.newArray(2,null); // type is REFERENCE value type is REFERENCE
        thisRef.tempBodies = var25;
        var var26 = new ojcSweep.Create(); // type is REFERENCE value type is REFERENCE
        ojcSweep.VOIDinit(var26);
        thisRef.backup1 = var26;
        var var27 = new ojcSweep.Create(); // type is REFERENCE value type is REFERENCE
        ojcSweep.VOIDinit(var27);
        thisRef.backup2 = var27;
        thisRef.liquidLength = 0.12;
        thisRef.averageLinearVel = -1.0;
        var var28 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var28);
        thisRef.liquidOffset = var28;
        var var29 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var29);
        thisRef.circCenterMoved = var29;
        var var30 = new ojcColor3f.Create(); // type is REFERENCE value type is REFERENCE
        ojcColor3f.VOIDinitFLOATFLOATFLOAT(var30,0.4,0.4,1.0);
        thisRef.liquidColor = var30;
        var var31 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var31);
        thisRef.center = var31;
        var var32 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var32);
        thisRef.axis = var32;
        var var33 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var33);
        thisRef.v1 = var33;
        var var34 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var34);
        thisRef.v2 = var34;
        var var35 = new ojpaVec2Array.Create(); // type is REFERENCE value type is REFERENCE
        ojpaVec2Array.VOIDinit(var35);
        thisRef.tlvertices = var35;
        thisRef.pool = argPool;
        thisRef.m_destructionListener = null;
        thisRef.m_debugDraw = null;
        thisRef.m_bodyList = null;
        thisRef.m_jointList = null;
        thisRef.m_bodyCount = 0;
        thisRef.m_jointCount = 0;
        thisRef.m_warmStarting = 1;
        thisRef.m_continuousPhysics = 1;
        thisRef.m_subStepping = 0;
        thisRef.m_stepComplete = 1;
        thisRef.m_allowSleep = 1;
        var var37 = thisRef.m_gravity.ojcVec2setojcVec2(thisRef.m_gravity,gravity); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@14b07b61
        thisRef.m_flags = 4;
        thisRef.m_inv_dt0 = 0.0;
        var var38 = new ojdContactManager.Create(); // type is REFERENCE value type is REFERENCE
        ojdContactManager.VOIDinitojdWorldojcbBroadPhaseStrategy(var38,thisRef,broadPhaseStrategy);
        thisRef.m_contactManager = var38;
        var var39 = new ojdProfile.Create(); // type is REFERENCE value type is REFERENCE
        ojdProfile.VOIDinit(var39);
        thisRef.m_profile = var39;
        thisRef.VOIDinitializeRegisters(thisRef);
        return;
    },

    VOIDinitializeRegisters : function(thisRef) {
        var __label__ = null;
        var var1 = thisRef.pool.ojpIDynamicStackgetCircleContactStack(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3a6c1080
        thisRef.VOIDaddTypeojpIDynamicStackojcsShapeTypeojcsShapeType(thisRef,var1,ojcsShapeType.CIRCLE,ojcsShapeType.CIRCLE);
        var var5 = thisRef.pool.ojpIDynamicStackgetPolyCircleContactStack(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2f6848bb
        thisRef.VOIDaddTypeojpIDynamicStackojcsShapeTypeojcsShapeType(thisRef,var5,ojcsShapeType.POLYGON,ojcsShapeType.CIRCLE);
        var var9 = thisRef.pool.ojpIDynamicStackgetPolyContactStack(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5f684f92
        thisRef.VOIDaddTypeojpIDynamicStackojcsShapeTypeojcsShapeType(thisRef,var9,ojcsShapeType.POLYGON,ojcsShapeType.POLYGON);
        var var13 = thisRef.pool.ojpIDynamicStackgetEdgeCircleContactStack(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@b6d2c2f
        thisRef.VOIDaddTypeojpIDynamicStackojcsShapeTypeojcsShapeType(thisRef,var13,ojcsShapeType.EDGE,ojcsShapeType.CIRCLE);
        var var17 = thisRef.pool.ojpIDynamicStackgetEdgePolyContactStack(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@51dfc5d2
        thisRef.VOIDaddTypeojpIDynamicStackojcsShapeTypeojcsShapeType(thisRef,var17,ojcsShapeType.EDGE,ojcsShapeType.POLYGON);
        var var21 = thisRef.pool.ojpIDynamicStackgetChainCircleContactStack(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3c1f62c2
        thisRef.VOIDaddTypeojpIDynamicStackojcsShapeTypeojcsShapeType(thisRef,var21,ojcsShapeType.CHAIN,ojcsShapeType.CIRCLE);
        var var25 = thisRef.pool.ojpIDynamicStackgetChainPolyContactStack(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2196ae0c
        thisRef.VOIDaddTypeojpIDynamicStackojcsShapeTypeojcsShapeType(thisRef,var25,ojcsShapeType.CHAIN,ojcsShapeType.POLYGON);
        return;
    },

    VOIDaddTypeojpIDynamicStackojcsShapeTypeojcsShapeType : function(thisRef,creator,type1,type2) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = new ojdcContactRegister.Create(); // type is REFERENCE value type is REFERENCE
            ojdcContactRegister.VOIDinit(var0);
            var local_4_REFERENCE = var0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@66f2acd8
            var var2 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@66f2acd8
            var2.creator = creator;
            var var3 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@66f2acd8
            var3.primary = 1;
            var var4 = thisRef.contactStacks; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1f77b34c
            var var5 = type1.INTordinal(type1); // type is INT value type is INT
            var var6 = var4.data[var5]; // type is REFERENCE value type is REFERENCE
            var var7 = type2.INTordinal(type2); // type is INT value type is INT
            var var8 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@66f2acd8
            var6.data[var7] = var8;
            if ((type1 == type2)) {
                return;
            }
            }
        var var9 = new ojdcContactRegister.Create(); // type is REFERENCE value type is REFERENCE
        ojdcContactRegister.VOIDinit(var9);
        var local_5_REFERENCE = var9; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@667a80e7
        var var11 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@667a80e7
        var11.creator = creator;
        var var12 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@667a80e7
        var12.primary = 0;
        var var13 = thisRef.contactStacks; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@649c7662
        var var14 = type2.INTordinal(type2); // type is INT value type is INT
        var var15 = var13.data[var14]; // type is REFERENCE value type is REFERENCE
        var var16 = type1.INTordinal(type1); // type is INT value type is INT
        var var17 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@667a80e7
        var15.data[var16] = var17;
        return;
    },

    ojdBodycreateBodyojdBodyDef : function(thisRef,def) {
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdWorld.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 21;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_6_21 : for(;;) switch (__label__) {
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    var var1 = thisRef.BOOLEANisLocked(thisRef); // type is BOOLEAN value type is BOOLEAN
                    if ((var1 == 0)) {
                        __label__ = 21;
                        continue $M_6_21;
                    }
                    }
                var var15 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var15);
                throw var15;
            case 21 :
            // NORMAL
                $S_21 : {
                // NORMAL
                    var var2 = thisRef.BOOLEANisLocked(thisRef); // type is BOOLEAN value type is BOOLEAN
                    if ((var2 == 0)) {
                        break $S_21;
                    }
                    return null;
                    }
                $S_30 : {
                // NORMAL
                    var var3 = new ojdBody.Create(); // type is REFERENCE value type is REFERENCE
                    ojdBody.VOIDinitojdBodyDefojdWorld(var3,def,thisRef);
                    local_2_REFERENCE = var3; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@722dcc02
                    var var5 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@722dcc02
                    var5.m_prev = null;
                    var var6 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@722dcc02
                    var var7 = thisRef.m_bodyList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@51db7b46
                    var6.m_next = var7;
                    var var8 = thisRef.m_bodyList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1db8ecd7
                    if (var8 == null ) {
                        __label__ = 68;
                        break $S_30;
                    }
                    __label__ = 60;
                    }
                $M_68_60 : for(;;) switch (__label__) {
                    case 60 :
                    // NORMAL
                        var var9 = thisRef.m_bodyList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@e75f1
                        var var10 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@722dcc02
                        var9.m_prev = var10;
                        __label__ = 68;
                        continue $M_68_60;
                    case 68 :
                    // NORMAL
                        var var11 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@722dcc02
                        thisRef.m_bodyList = var11;
                        var var13 = (thisRef.m_bodyCount + 1); // type is INT value type is INT
                        thisRef.m_bodyCount = var13;
                        return local_2_REFERENCE;
                }
        }
    },

    BOOLEANisLocked : function(thisRef) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var1 = (thisRef.m_flags & 2); // type is INT value type is INT
            if ((var1 != 2)) {
                __label__ = 14;
                break $S_0;
            }
            __label__ = 10;
            }
        for(;;) switch (__label__) {
            case 14 :
            // NORMAL
                var var2 = 0; // type is INT value type is INT
                return var2;
            case 10 :
            // NORMAL
                var var2 = 1; // type is INT value type is INT
                return var2;
        }
    },

    ojpIWorldPoolgetPool : function(thisRef) {
        var __label__ = null;
        return thisRef.pool;
    },

    ojdjJointcreateJointojdjJointDef : function(thisRef,def) {
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdWorld.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 21;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_21_6 : for(;;) switch (__label__) {
            case 21 :
            // NORMAL
                $S_21 : {
                // NORMAL
                    var var2 = thisRef.BOOLEANisLocked(thisRef); // type is BOOLEAN value type is BOOLEAN
                    if ((var2 == 0)) {
                        break $S_21;
                    }
                    return null;
                    }
                $S_30 : {
                // NORMAL
                    var var3 = ojdjJoint.ojdjJointcreateojdWorldojdjJointDef(thisRef,def); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@162a33d9
                    local_2_REFERENCE = var3; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3c66b82c
                    var var5 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3c66b82c
                    var5.m_prev = null;
                    var var6 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3c66b82c
                    var var7 = thisRef.m_jointList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3f3a1f51
                    var6.m_next = var7;
                    var var8 = thisRef.m_jointList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5a6fd48
                    if (var8 == null ) {
                        __label__ = 64;
                        break $S_30;
                    }
                    __label__ = 56;
                    }
                $M_64_56 : for(;;) switch (__label__) {
                    case 64 :
                    // NORMAL
                        $S_64 : {
                        // NORMAL
                            var var11 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3c66b82c
                            thisRef.m_jointList = var11;
                            var var13 = (thisRef.m_jointCount + 1); // type is INT value type is INT
                            thisRef.m_jointCount = var13;
                            var var15 = local_2_REFERENCE.m_edgeA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3d0dae9d
                            var var16 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3c66b82c
                            var15.joint = var16;
                            var var18 = local_2_REFERENCE.m_edgeA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7afee61e
                            var var20 = local_2_REFERENCE.ojdBodygetBodyB(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@15d1be87
                            var18.other = var20;
                            var var22 = local_2_REFERENCE.m_edgeA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@27af5dc8
                            var22.prev = null;
                            var var24 = local_2_REFERENCE.m_edgeA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@778676e6
                            var var26 = local_2_REFERENCE.ojdBodygetBodyA(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7ac5b01e
                            var var27 = var26.m_jointList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@62f81c47
                            var24.next = var27;
                            var var29 = local_2_REFERENCE.ojdBodygetBodyA(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3f644ccd
                            var var30 = var29.m_jointList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7b912c81
                            if (var30 == null ) {
                                __label__ = 144;
                                break $S_64;
                            }
                            __label__ = 130;
                            }
                        $M_130_144 : for(;;) switch (__label__) {
                            case 144 :
                            // NORMAL
                                $S_144 : {
                                // NORMAL
                                    var var37 = local_2_REFERENCE.ojdBodygetBodyA(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2c8326ad
                                    var var39 = local_2_REFERENCE.m_edgeA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@e3b1d5e
                                    var37.m_jointList = var39;
                                    var var41 = local_2_REFERENCE.m_edgeB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@13a42a70
                                    var var42 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3c66b82c
                                    var41.joint = var42;
                                    var var44 = local_2_REFERENCE.m_edgeB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@61a3f9a1
                                    var var46 = local_2_REFERENCE.ojdBodygetBodyA(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@54201d76
                                    var44.other = var46;
                                    var var48 = local_2_REFERENCE.m_edgeB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2a73b41
                                    var48.prev = null;
                                    var var50 = local_2_REFERENCE.m_edgeB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@306276cf
                                    var var52 = local_2_REFERENCE.ojdBodygetBodyB(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4ef2ff93
                                    var var53 = var52.m_jointList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1aed9096
                                    var50.next = var53;
                                    var var55 = local_2_REFERENCE.ojdBodygetBodyB(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@212bcdb9
                                    var var56 = var55.m_jointList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@25c135d
                                    if (var56 == null ) {
                                        __label__ = 220;
                                        break $S_144;
                                    }
                                    __label__ = 206;
                                    }
                                $M_220_206 : for(;;) switch (__label__) {
                                    case 220 :
                                    // NORMAL
                                        $S_220 : {
                                        // NORMAL
                                            var var63 = local_2_REFERENCE.ojdBodygetBodyB(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5b8b6ae2
                                            var var65 = local_2_REFERENCE.m_edgeB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2d142825
                                            var63.m_jointList = var65;
                                            local_3_REFERENCE = def.bodyA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@522d7e3b
                                            local_4_REFERENCE = def.bodyB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@308959d8
                                            var var70 = def.collideConnected; // type is BOOLEAN value type is BOOLEAN
                                            if ((var70 != 0)) {
                                                return local_2_REFERENCE;
                                            }
                                            }
                                        $S_249 : {
                                        // NORMAL
                                            var var72 = local_4_REFERENCE.ojdcContactEdgegetContactList(local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3055e951
                                            local_5_REFERENCE = var72; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@51f5a79f
                                            __label__ = 256;
                                            }
                                        $L_256 : for (;;) {
                                            $S_256 : {
                                            // NORMAL
                                                var var74 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@51f5a79f
                                                if (var74 == null ) {
                                                    return local_2_REFERENCE;
                                                }
                                                }
                                            $S_261 : {
                                            // NORMAL
                                                var var76 = local_5_REFERENCE.other; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3c0caa7e
                                                var var77 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@132629df
                                                if ((var76 != var77)) {
                                                    __label__ = 278;
                                                    break $S_261;
                                                }
                                                __label__ = 270;
                                                }
                                            $M_278_270 : for(;;) switch (__label__) {
                                                case 278 :
                                                // NORMAL
                                                    local_5_REFERENCE = local_5_REFERENCE.next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@569c762
                                                    __label__ = 256;
                                                    continue $L_256;
                                                case 270 :
                                                // NORMAL
                                                    local_5_REFERENCE.contact.VOIDflagForFiltering(local_5_REFERENCE.contact);
                                                    __label__ = 278;
                                                    continue $M_278_270;
                                            }
                                        }
                                    case 206 :
                                    // NORMAL
                                        var var58 = local_2_REFERENCE.ojdBodygetBodyB(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7fd4198e
                                        var var59 = var58.m_jointList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@60d47844
                                        var var61 = local_2_REFERENCE.m_edgeB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3952617a
                                        var59.prev = var61;
                                        __label__ = 220;
                                        continue $M_220_206;
                                }
                            case 130 :
                            // NORMAL
                                var var32 = local_2_REFERENCE.ojdBodygetBodyA(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@724be3e5
                                var var33 = var32.m_jointList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2d0c9c4b
                                var var35 = local_2_REFERENCE.m_edgeA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6e59d7f6
                                var33.prev = var35;
                                __label__ = 144;
                                continue $M_130_144;
                        }
                    case 56 :
                    // NORMAL
                        var var9 = thisRef.m_jointList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@44aa32f6
                        var var10 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3c66b82c
                        var9.m_prev = var10;
                        __label__ = 64;
                        continue $M_64_56;
                }
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    var var1 = thisRef.BOOLEANisLocked(thisRef); // type is BOOLEAN value type is BOOLEAN
                    if ((var1 == 0)) {
                        __label__ = 21;
                        continue $M_21_6;
                    }
                    }
                var var83 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var83);
                throw var83;
        }
    },

    VOIDstepFLOATINTINT : function(thisRef,dt,velocityIterations,positionIterations) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            thisRef.stepTimer.VOIDreset(thisRef.stepTimer);
            var var2 = (thisRef.m_flags & 1); // type is INT value type is INT
            if ((var2 != 1)) {
                __label__ = 35;
                break $S_0;
            }
            __label__ = 17;
            }
        $M_17_35 : for(;;) switch (__label__) {
            case 17 :
            // NORMAL
                thisRef.m_contactManager.VOIDfindNewContacts(thisRef.m_contactManager);
                var var5 = (thisRef.m_flags & -2); // type is INT value type is INT
                thisRef.m_flags = var5;
                __label__ = 35;
                continue $M_17_35;
            case 35 :
            // NORMAL
                $S_35 : {
                // NORMAL
                    var var7 = (thisRef.m_flags | 2); // type is INT value type is INT
                    thisRef.m_flags = var7;
                    var var8 = thisRef.step; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@17d800e6
                    var8.dt = dt;
                    var var9 = thisRef.step; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7d9a0189
                    var9.velocityIterations = velocityIterations;
                    var var10 = thisRef.step; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@30d55353
                    var10.positionIterations = positionIterations;
                    if ((dt <= 0.0)) {
                        __label__ = 88;
                        break $S_35;
                    }
                    __label__ = 75;
                    }
                $M_88_75 : for(;;) switch (__label__) {
                    case 88 :
                    // NORMAL
                        var var12 = thisRef.step; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2c019bfd
                        var12.inv_dt = 0.0;
                        break $M_88_75;
                    case 75 :
                    // NORMAL
                        var var13 = thisRef.step; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7b0961ab
                        var var14 = (1.0 / dt); // type is FLOAT value type is FLOAT
                        var13.inv_dt = var14;
                        break $M_88_75;
                }
                $S_96 : {
                // NORMAL
                    var var15 = thisRef.step; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5632b10a
                    var var17 = (thisRef.m_inv_dt0 * dt); // type is FLOAT value type is FLOAT
                    var15.dtRatio = var17;
                    var var18 = thisRef.step; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4c672f54
                    var var19 = thisRef.m_warmStarting; // type is BOOLEAN value type is BOOLEAN
                    var18.warmStarting = var19;
                    thisRef.tempTimer.VOIDreset(thisRef.tempTimer);
                    thisRef.m_contactManager.VOIDcollide(thisRef.m_contactManager);
                    var var22 = thisRef.m_profile; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6c199b56
                    var var24 = thisRef.tempTimer.FLOATgetMilliseconds(thisRef.tempTimer); // type is FLOAT value type is FLOAT
                    var22.collide = var24;
                    var var25 = thisRef.m_stepComplete; // type is BOOLEAN value type is BOOLEAN
                    if ((var25 == 0)) {
                        __label__ = 196;
                        break $S_96;
                    }
                    __label__ = 155;
                    }
                $M_196_155 : for(;;) switch (__label__) {
                    case 155 :
                    // NORMAL
                        $S_155 : {
                        // NORMAL
                            var var27 = thisRef.step.dt; // type is FLOAT value type is FLOAT
                            if ((var27 <= 0.0)) {
                                __label__ = 196;
                                continue $M_196_155;
                            }
                            }
                        thisRef.tempTimer.VOIDreset(thisRef.tempTimer);
                        thisRef.VOIDsolveojdTimeStep(thisRef,thisRef.step);
                        var var31 = thisRef.m_profile; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5c2dab47
                        var var33 = thisRef.tempTimer.FLOATgetMilliseconds(thisRef.tempTimer); // type is FLOAT value type is FLOAT
                        var31.solve = var33;
                        __label__ = 196;
                        continue $M_196_155;
                    case 196 :
                    // NORMAL
                        $S_196 : {
                        // NORMAL
                            var var34 = thisRef.m_continuousPhysics; // type is BOOLEAN value type is BOOLEAN
                            if ((var34 == 0)) {
                                __label__ = 244;
                                break $S_196;
                            }
                            __label__ = 203;
                            }
                        $M_203_244 : for(;;) switch (__label__) {
                            case 244 :
                            // NORMAL
                                $S_244 : {
                                // NORMAL
                                    var var44 = thisRef.step.dt; // type is FLOAT value type is FLOAT
                                    if ((var44 <= 0.0)) {
                                        __label__ = 267;
                                        break $S_244;
                                    }
                                    __label__ = 256;
                                    }
                                $M_256_267 : for(;;) switch (__label__) {
                                    case 256 :
                                    // NORMAL
                                        var var47 = thisRef.step.inv_dt; // type is FLOAT value type is FLOAT
                                        thisRef.m_inv_dt0 = var47;
                                        __label__ = 267;
                                        continue $M_256_267;
                                    case 267 :
                                    // NORMAL
                                        $S_267 : {
                                        // NORMAL
                                            var var49 = (thisRef.m_flags & 4); // type is INT value type is INT
                                            if ((var49 != 4)) {
                                                __label__ = 281;
                                                break $S_267;
                                            }
                                            __label__ = 277;
                                            }
                                        $M_281_277 : for(;;) switch (__label__) {
                                            case 281 :
                                            // NORMAL
                                                var var51 = (thisRef.m_flags & -3); // type is INT value type is INT
                                                thisRef.m_flags = var51;
                                                var var52 = thisRef.m_profile; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1fd4fb29
                                                var var54 = thisRef.stepTimer.FLOATgetMilliseconds(thisRef.stepTimer); // type is FLOAT value type is FLOAT
                                                var52.step = var54;
                                                return;
                                            case 277 :
                                            // NORMAL
                                                thisRef.VOIDclearForces(thisRef);
                                                __label__ = 281;
                                                continue $M_281_277;
                                        }
                                }
                            case 203 :
                            // NORMAL
                                $S_203 : {
                                // NORMAL
                                    var var36 = thisRef.step.dt; // type is FLOAT value type is FLOAT
                                    if ((var36 <= 0.0)) {
                                        __label__ = 244;
                                        continue $M_203_244;
                                    }
                                    }
                                thisRef.tempTimer.VOIDreset(thisRef.tempTimer);
                                thisRef.VOIDsolveTOIojdTimeStep(thisRef,thisRef.step);
                                var var40 = thisRef.m_profile; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6a3c6a08
                                var var42 = thisRef.tempTimer.FLOATgetMilliseconds(thisRef.tempTimer); // type is FLOAT value type is FLOAT
                                var40.solveTOI = var42;
                                __label__ = 244;
                                continue $M_203_244;
                        }
                }
        }
    },

    VOIDpushContactojdcContact : function(thisRef,contact) {
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = contact.ojdFixturegetFixtureA(contact); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@c4681a3
            local_2_REFERENCE = var0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@24dc0578
            var var2 = contact.ojdFixturegetFixtureB(contact); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6ac2c1ee
            local_3_REFERENCE = var2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1c10dcdc
            var var5 = contact.m_manifold.pointCount; // type is INT value type is INT
            if ((var5 <= 0)) {
                __label__ = 50;
                break $S_0;
            }
            __label__ = 20;
            }
        $M_20_50 : for(;;) switch (__label__) {
            case 50 :
            // NORMAL
                var var15 = local_2_REFERENCE.ojcsShapeTypegetType(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2adcdedc
                var local_4_REFERENCE = var15; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@43f7b184
                var var18 = local_3_REFERENCE.ojcsShapeTypegetType(local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7b846bc0
                var local_5_REFERENCE = var18; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@73518ef
                var var20 = thisRef.contactStacks; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@4bd30ceb
                var var22 = local_4_REFERENCE.INTordinal(local_4_REFERENCE); // type is INT value type is INT
                var var23 = var20.data[var22]; // type is REFERENCE value type is REFERENCE
                var var25 = local_5_REFERENCE.INTordinal(local_5_REFERENCE); // type is INT value type is INT
                var var26 = var23.data[var25]; // type is REFERENCE value type is REFERENCE
                var local_6_REFERENCE = var26.creator; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3556ff84
                local_6_REFERENCE.VOIDpushjlObject(local_6_REFERENCE,contact);
                return;
            case 20 :
            // NORMAL
                $S_20 : {
                // NORMAL
                    var var7 = local_2_REFERENCE.BOOLEANisSensor(local_2_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                    if ((var7 != 0)) {
                        __label__ = 50;
                        continue $M_20_50;
                    }
                    }
                $S_27 : {
                // NORMAL
                    var var9 = local_3_REFERENCE.BOOLEANisSensor(local_3_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                    if ((var9 != 0)) {
                        __label__ = 50;
                        continue $M_20_50;
                    }
                    }
                var var11 = local_2_REFERENCE.ojdBodygetBody(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6dd44885
                var11.VOIDsetAwakeBOOLEAN(var11,1);
                var var13 = local_3_REFERENCE.ojdBodygetBody(local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4289d7b0
                var13.VOIDsetAwakeBOOLEAN(var13,1);
                __label__ = 50;
                continue $M_20_50;
        }
    },

    VOIDsolveojdTimeStep : function(thisRef,step) {
        var local_7_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_2_INT = null; // type is INT # of inits = 6
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 7
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 9
        var local_9_BOOLEAN = null; // type is BOOLEAN # of inits = 1
        var local_5_INT = null; // type is INT # of inits = 3
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 9
        var local_4_INT = null; // type is INT # of inits = 9
        var local_10_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.m_profile; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@64716e82
            var0.solveInit = 0.0;
            var var1 = thisRef.m_profile; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5277f466
            var1.solveVelocity = 0.0;
            var var2 = thisRef.m_profile; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1e966001
            var2.solvePosition = 0.0;
            thisRef.island.VOIDinitINTINTINTojcContactListener(thisRef.island,thisRef.m_bodyCount,thisRef.m_contactManager.m_contactCount,thisRef.m_jointCount,thisRef.m_contactManager.m_contactListener);
            local_2_REFERENCE = thisRef.m_bodyList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4014b722
            __label__ = 58;
            }
        $L_58 : for (;;) {
            $S_58 : {
            // NORMAL
                var var12 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@353dabaa
                if (var12 == null ) {
                    __label__ = 81;
                    break $S_58;
                }
                __label__ = 62;
                }
            for(;;) switch (__label__) {
                case 62 :
                // NORMAL
                    var var198 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@353dabaa
                    var var200 = (var198.m_flags & -2); // type is INT value type is INT
                    var198.m_flags = var200;
                    local_2_REFERENCE = local_2_REFERENCE.m_next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2f7ed4dc
                    __label__ = 58;
                    continue $L_58;
                case 81 :
                // NORMAL
                    $S_81 : {
                    // NORMAL
                        local_2_REFERENCE = thisRef.m_contactManager.m_contactList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@42c7d191
                        __label__ = 89;
                        }
                    $L_89 : for (;;) {
                        $S_89 : {
                        // NORMAL
                            var var15 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@353dabaa
                            if (var15 == null ) {
                                __label__ = 112;
                                break $S_89;
                            }
                            __label__ = 93;
                            }
                        for(;;) switch (__label__) {
                            case 93 :
                            // NORMAL
                                var var173 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@353dabaa
                                var var175 = (var173.m_flags & -2); // type is INT value type is INT
                                var173.m_flags = var175;
                                local_2_REFERENCE = local_2_REFERENCE.m_next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6f7c37a0
                                __label__ = 89;
                                continue $L_89;
                            case 112 :
                            // NORMAL
                                $S_112 : {
                                // NORMAL
                                    local_2_REFERENCE = thisRef.m_jointList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@ab420ca
                                    __label__ = 117;
                                    }
                                $L_117 : for (;;) {
                                    $S_117 : {
                                    // NORMAL
                                        var var17 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@353dabaa
                                        if (var17 == null ) {
                                            __label__ = 134;
                                            break $S_117;
                                        }
                                        __label__ = 121;
                                        }
                                    for(;;) switch (__label__) {
                                        case 121 :
                                        // NORMAL
                                            var var75 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@353dabaa
                                            var75.m_islandFlag = 0;
                                            local_2_REFERENCE = local_2_REFERENCE.m_next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5335dd74
                                            __label__ = 117;
                                            continue $L_117;
                                        case 134 :
                                        // NORMAL
                                            $S_134 : {
                                            // NORMAL
                                                local_2_INT = thisRef.m_bodyCount; // type is INT value type is INT
                                                var var22 = thisRef.stack.data.length; // type is INT value type is INT
                                                var var23 = local_2_INT; // type is INT value type is INT
                                                if ((var22 >= var23)) {
                                                    __label__ = 156;
                                                    break $S_134;
                                                }
                                                __label__ = 148;
                                                }
                                            $M_156_148 : for(;;) switch (__label__) {
                                                case 156 :
                                                // NORMAL
                                                    $S_156 : {
                                                    // NORMAL
                                                        local_3_REFERENCE = thisRef.m_bodyList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2f82d5da
                                                        __label__ = 161;
                                                        }
                                                    $L_161 : for (;;) {
                                                        $S_161 : {
                                                        // NORMAL
                                                            var var28 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@75dd997c
                                                            if (var28 == null ) {
                                                                __label__ = 764;
                                                                break $S_161;
                                                            }
                                                            __label__ = 165;
                                                            }
                                                        for(;;) switch (__label__) {
                                                            case 764 :
                                                            // NORMAL
                                                                $S_764 : {
                                                                // NORMAL
                                                                    thisRef.broadphaseTimer.VOIDreset(thisRef.broadphaseTimer);
                                                                    local_3_REFERENCE = thisRef.m_bodyList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@214d26bd
                                                                    __label__ = 776;
                                                                    }
                                                                $L_776 : for (;;) {
                                                                    $S_776 : {
                                                                    // NORMAL
                                                                        var var188 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@75dd997c
                                                                        if (var188 == null ) {
                                                                            __label__ = 817;
                                                                            break $S_776;
                                                                        }
                                                                        __label__ = 780;
                                                                        }
                                                                    for(;;) switch (__label__) {
                                                                        case 817 :
                                                                        // NORMAL
                                                                            thisRef.m_contactManager.VOIDfindNewContacts(thisRef.m_contactManager);
                                                                            var var204 = thisRef.m_profile; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@ad4e02e
                                                                            var var206 = thisRef.broadphaseTimer.FLOATgetMilliseconds(thisRef.broadphaseTimer); // type is FLOAT value type is FLOAT
                                                                            var204.broadphase = var206;
                                                                            return;
                                                                        case 780 :
                                                                        // NORMAL
                                                                            $S_780 : {
                                                                            // NORMAL
                                                                                var var191 = (local_3_REFERENCE.m_flags & 1); // type is INT value type is INT
                                                                                if ((var191 != 0)) {
                                                                                    __label__ = 792;
                                                                                    break $S_780;
                                                                                }
                                                                                __label__ = 789;
                                                                                }
                                                                            $M_789_792 : for(;;) switch (__label__) {
                                                                                case 792 :
                                                                                // NORMAL
                                                                                    $S_792 : {
                                                                                    // NORMAL
                                                                                        var var193 = local_3_REFERENCE.ojdBodyTypegetType(local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7777427d
                                                                                        var var194 = ojdBodyType.STATIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4e62654c
                                                                                        if ((var193 != var194)) {
                                                                                            __label__ = 805;
                                                                                            break $S_792;
                                                                                        }
                                                                                        __label__ = 802;
                                                                                        }
                                                                                    for(;;) switch (__label__) {
                                                                                        case 802 :
                                                                                        // NORMAL
                                                                                            break $M_789_792;
                                                                                        case 805 :
                                                                                        // NORMAL
                                                                                            local_3_REFERENCE.VOIDsynchronizeFixtures(local_3_REFERENCE);
                                                                                            break $M_789_792;
                                                                                    }
                                                                                case 789 :
                                                                                // NORMAL
                                                                                    break $M_789_792;
                                                                            }
                                                                            var var197 = local_3_REFERENCE.ojdBodygetNext(local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@652daf3
                                                                            local_3_REFERENCE = var197; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6cffbe05
                                                                            __label__ = 776;
                                                                            continue $L_776;
                                                                    }
                                                                }
                                                            case 165 :
                                                            // NORMAL
                                                                $S_165 : {
                                                                // NORMAL
                                                                    var var31 = (local_3_REFERENCE.m_flags & 1); // type is INT value type is INT
                                                                    if ((var31 != 1)) {
                                                                        __label__ = 178;
                                                                        break $S_165;
                                                                    }
                                                                    __label__ = 175;
                                                                    }
                                                                $M_178_175 : for(;;) switch (__label__) {
                                                                    case 175 :
                                                                    // NORMAL
                                                                        break $M_178_175;
                                                                    case 178 :
                                                                    // NORMAL
                                                                        $S_178 : {
                                                                        // NORMAL
                                                                            var var33 = local_3_REFERENCE.BOOLEANisAwake(local_3_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                                                            if ((var33 == 0)) {
                                                                                break $M_178_175;
                                                                            }
                                                                            }
                                                                        $S_185 : {
                                                                        // NORMAL
                                                                            var var35 = local_3_REFERENCE.BOOLEANisActive(local_3_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                                                            if ((var35 != 0)) {
                                                                                __label__ = 195;
                                                                                break $S_185;
                                                                            }
                                                                            __label__ = 192;
                                                                            }
                                                                        for(;;) switch (__label__) {
                                                                            case 195 :
                                                                            // NORMAL
                                                                                $S_195 : {
                                                                                // NORMAL
                                                                                    var var37 = local_3_REFERENCE.ojdBodyTypegetType(local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2b2a9f87
                                                                                    var var38 = ojdBodyType.STATIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@66834435
                                                                                    if ((var37 != var38)) {
                                                                                        __label__ = 208;
                                                                                        break $S_195;
                                                                                    }
                                                                                    __label__ = 205;
                                                                                    }
                                                                                for(;;) switch (__label__) {
                                                                                    case 205 :
                                                                                    // NORMAL
                                                                                        break $M_178_175;
                                                                                    case 208 :
                                                                                    // NORMAL
                                                                                        $S_208 : {
                                                                                        // NORMAL
                                                                                            thisRef.island.VOIDclear(thisRef.island);
                                                                                            local_4_INT = 0; // type is INT value type is INT
                                                                                            var var42 = thisRef.stack; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3b9605ac
                                                                                            var var43 = local_4_INT; // type is INT value type is INT
                                                                                            local_4_INT = (local_4_INT + 1); // type is INT value type is INT
                                                                                            var var44 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@75dd997c
                                                                                            var42.data[var43] = var44;
                                                                                            var var45 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@75dd997c
                                                                                            var var47 = (var45.m_flags | 1); // type is INT value type is INT
                                                                                            var45.m_flags = var47;
                                                                                            __label__ = 239;
                                                                                            }
                                                                                        $L_239 : for (;;) {
                                                                                            $S_239 : {
                                                                                            // NORMAL
                                                                                                var var48 = local_4_INT; // type is INT value type is INT
                                                                                                if ((var48 <= 0)) {
                                                                                                    __label__ = 623;
                                                                                                    break $S_239;
                                                                                                }
                                                                                                __label__ = 244;
                                                                                                }
                                                                                            for(;;) switch (__label__) {
                                                                                                case 244 :
                                                                                                // NORMAL
                                                                                                    $S_244 : {
                                                                                                    // NORMAL
                                                                                                        var var78 = thisRef.stack; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@2b83c56f
                                                                                                        local_4_INT = (local_4_INT + -1); // type is INT value type is INT
                                                                                                        var var80 = var78.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                                                                                                        local_5_REFERENCE = var80; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@25f19127
                                                                                                        var var82 = ojdWorld.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                                                                                                        if ((var82 != 0)) {
                                                                                                            __label__ = 279;
                                                                                                            break $S_244;
                                                                                                        }
                                                                                                        __label__ = 262;
                                                                                                        }
                                                                                                    $M_279_262 : for(;;) switch (__label__) {
                                                                                                        case 262 :
                                                                                                        // NORMAL
                                                                                                            $S_262 : {
                                                                                                            // NORMAL
                                                                                                                var var84 = local_5_REFERENCE.BOOLEANisActive(local_5_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                                                                                                if ((var84 == 1)) {
                                                                                                                    __label__ = 279;
                                                                                                                    continue $M_279_262;
                                                                                                                }
                                                                                                                }
                                                                                                            var var85 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                                                                                            jlAssertionError.VOIDinit(var85);
                                                                                                            throw var85;
                                                                                                        case 279 :
                                                                                                        // NORMAL
                                                                                                            $S_279 : {
                                                                                                            // NORMAL
                                                                                                                thisRef.island.VOIDaddojdBody(thisRef.island,local_5_REFERENCE);
                                                                                                                local_5_REFERENCE.VOIDsetAwakeBOOLEAN(local_5_REFERENCE,1);
                                                                                                                var var90 = local_5_REFERENCE.ojdBodyTypegetType(local_5_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@54aaa13f
                                                                                                                var var91 = ojdBodyType.STATIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2874e573
                                                                                                                if ((var90 != var91)) {
                                                                                                                    __label__ = 308;
                                                                                                                    break $S_279;
                                                                                                                }
                                                                                                                __label__ = 305;
                                                                                                                }
                                                                                                            for(;;) switch (__label__) {
                                                                                                                case 308 :
                                                                                                                // NORMAL
                                                                                                                    $S_308 : {
                                                                                                                    // NORMAL
                                                                                                                        local_6_REFERENCE = local_5_REFERENCE.m_contactList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@23443eb4
                                                                                                                        __label__ = 315;
                                                                                                                        }
                                                                                                                    $L_315 : for (;;) {
                                                                                                                        $S_315 : {
                                                                                                                        // NORMAL
                                                                                                                            var var95 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@249271e4
                                                                                                                            if (var95 == null ) {
                                                                                                                                __label__ = 487;
                                                                                                                                break $S_315;
                                                                                                                            }
                                                                                                                            __label__ = 320;
                                                                                                                            }
                                                                                                                        for(;;) switch (__label__) {
                                                                                                                            case 487 :
                                                                                                                            // NORMAL
                                                                                                                                $S_487 : {
                                                                                                                                // NORMAL
                                                                                                                                    local_6_REFERENCE = local_5_REFERENCE.m_jointList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@16593f0e
                                                                                                                                    __label__ = 494;
                                                                                                                                    }
                                                                                                                                $L_494 : for (;;) {
                                                                                                                                    $S_494 : {
                                                                                                                                    // NORMAL
                                                                                                                                        var var153 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@249271e4
                                                                                                                                        if (var153 == null ) {
                                                                                                                                            __label__ = 620;
                                                                                                                                            break $S_494;
                                                                                                                                        }
                                                                                                                                        __label__ = 499;
                                                                                                                                        }
                                                                                                                                    for(;;) switch (__label__) {
                                                                                                                                        case 499 :
                                                                                                                                        // NORMAL
                                                                                                                                            $S_499 : {
                                                                                                                                            // NORMAL
                                                                                                                                                var var156 = local_6_REFERENCE.joint.m_islandFlag; // type is BOOLEAN value type is BOOLEAN
                                                                                                                                                if ((var156 != 1)) {
                                                                                                                                                    __label__ = 514;
                                                                                                                                                    break $S_499;
                                                                                                                                                }
                                                                                                                                                __label__ = 511;
                                                                                                                                                }
                                                                                                                                            $M_511_514 : for(;;) switch (__label__) {
                                                                                                                                                case 511 :
                                                                                                                                                // NORMAL
                                                                                                                                                    break $M_511_514;
                                                                                                                                                case 514 :
                                                                                                                                                // NORMAL
                                                                                                                                                    $S_514 : {
                                                                                                                                                    // NORMAL
                                                                                                                                                        local_7_REFERENCE = local_6_REFERENCE.other; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@17fbc7a3
                                                                                                                                                        var var160 = local_7_REFERENCE.BOOLEANisActive(local_7_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                                                                                                                                        if ((var160 != 0)) {
                                                                                                                                                            __label__ = 532;
                                                                                                                                                            break $S_514;
                                                                                                                                                        }
                                                                                                                                                        __label__ = 529;
                                                                                                                                                        }
                                                                                                                                                    for(;;) switch (__label__) {
                                                                                                                                                        case 532 :
                                                                                                                                                        // NORMAL
                                                                                                                                                            $S_532 : {
                                                                                                                                                            // NORMAL
                                                                                                                                                                thisRef.island.VOIDaddojdjJoint(thisRef.island,local_6_REFERENCE.joint);
                                                                                                                                                                var var165 = local_6_REFERENCE.joint; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@182be752
                                                                                                                                                                var165.m_islandFlag = 1;
                                                                                                                                                                var var168 = (local_7_REFERENCE.m_flags & 1); // type is INT value type is INT
                                                                                                                                                                if ((var168 != 1)) {
                                                                                                                                                                    __label__ = 567;
                                                                                                                                                                    break $S_532;
                                                                                                                                                                }
                                                                                                                                                                __label__ = 564;
                                                                                                                                                                }
                                                                                                                                                            for(;;) switch (__label__) {
                                                                                                                                                                case 564 :
                                                                                                                                                                // NORMAL
                                                                                                                                                                    break $M_511_514;
                                                                                                                                                                case 567 :
                                                                                                                                                                // NORMAL
                                                                                                                                                                    $S_567 : {
                                                                                                                                                                    // NORMAL
                                                                                                                                                                        var var169 = ojdWorld.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                                                                                                                                                                        if ((var169 != 0)) {
                                                                                                                                                                            __label__ = 587;
                                                                                                                                                                            break $S_567;
                                                                                                                                                                        }
                                                                                                                                                                        __label__ = 573;
                                                                                                                                                                        }
                                                                                                                                                                    $M_587_573 : for(;;) switch (__label__) {
                                                                                                                                                                        case 573 :
                                                                                                                                                                        // NORMAL
                                                                                                                                                                            $S_573 : {
                                                                                                                                                                            // NORMAL
                                                                                                                                                                                var var170 = local_4_INT; // type is INT value type is INT
                                                                                                                                                                                var var171 = local_2_INT; // type is INT value type is INT
                                                                                                                                                                                if ((var170 < var171)) {
                                                                                                                                                                                    __label__ = 587;
                                                                                                                                                                                    continue $M_587_573;
                                                                                                                                                                                }
                                                                                                                                                                                }
                                                                                                                                                                            var var172 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                                                                                                                                                            jlAssertionError.VOIDinit(var172);
                                                                                                                                                                            throw var172;
                                                                                                                                                                        case 587 :
                                                                                                                                                                        // NORMAL
                                                                                                                                                                            var var178 = thisRef.stack; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1a18db7d
                                                                                                                                                                            var var179 = local_4_INT; // type is INT value type is INT
                                                                                                                                                                            local_4_INT = (local_4_INT + 1); // type is INT value type is INT
                                                                                                                                                                            var var180 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@16a979c8
                                                                                                                                                                            var178.data[var179] = var180;
                                                                                                                                                                            var var181 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@16a979c8
                                                                                                                                                                            var var183 = (var181.m_flags | 1); // type is INT value type is INT
                                                                                                                                                                            var181.m_flags = var183;
                                                                                                                                                                            break $M_511_514;
                                                                                                                                                                    }
                                                                                                                                                            }
                                                                                                                                                        case 529 :
                                                                                                                                                        // NORMAL
                                                                                                                                                            break $M_511_514;
                                                                                                                                                    }
                                                                                                                                            }
                                                                                                                                            local_6_REFERENCE = local_6_REFERENCE.next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4566367f
                                                                                                                                            __label__ = 494;
                                                                                                                                            continue $L_494;
                                                                                                                                        case 620 :
                                                                                                                                        // NORMAL
                                                                                                                                            __label__ = 239;
                                                                                                                                            continue $L_239;
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            case 320 :
                                                                                                                            // NORMAL
                                                                                                                                $S_320 : {
                                                                                                                                // NORMAL
                                                                                                                                    local_7_REFERENCE = local_6_REFERENCE.contact; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@c6937af
                                                                                                                                    var var101 = (local_7_REFERENCE.m_flags & 1); // type is INT value type is INT
                                                                                                                                    if ((var101 != 1)) {
                                                                                                                                        __label__ = 341;
                                                                                                                                        break $S_320;
                                                                                                                                    }
                                                                                                                                    __label__ = 338;
                                                                                                                                    }
                                                                                                                                $M_338_341 : for(;;) switch (__label__) {
                                                                                                                                    case 341 :
                                                                                                                                    // NORMAL
                                                                                                                                        $S_341 : {
                                                                                                                                        // NORMAL
                                                                                                                                            var var103 = local_7_REFERENCE.BOOLEANisEnabled(local_7_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                                                                                                                            if ((var103 == 0)) {
                                                                                                                                                break $M_338_341;
                                                                                                                                            }
                                                                                                                                            }
                                                                                                                                        $S_349 : {
                                                                                                                                        // NORMAL
                                                                                                                                            var var105 = local_7_REFERENCE.BOOLEANisTouching(local_7_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                                                                                                                            if ((var105 != 0)) {
                                                                                                                                                __label__ = 360;
                                                                                                                                                break $S_349;
                                                                                                                                            }
                                                                                                                                            __label__ = 357;
                                                                                                                                            }
                                                                                                                                        for(;;) switch (__label__) {
                                                                                                                                            case 357 :
                                                                                                                                            // NORMAL
                                                                                                                                                break $M_338_341;
                                                                                                                                            case 360 :
                                                                                                                                            // NORMAL
                                                                                                                                                $S_360 : {
                                                                                                                                                // NORMAL
                                                                                                                                                    var local_8_BOOLEAN = local_7_REFERENCE.m_fixtureA.m_isSensor; // type is BOOLEAN value type is BOOLEAN
                                                                                                                                                    local_9_BOOLEAN = local_7_REFERENCE.m_fixtureB.m_isSensor; // type is BOOLEAN value type is BOOLEAN
                                                                                                                                                    var var116 = local_8_BOOLEAN; // type is BOOLEAN value type is BOOLEAN
                                                                                                                                                    if ((var116 != 0)) {
                                                                                                                                                        break $M_338_341;
                                                                                                                                                    }
                                                                                                                                                    }
                                                                                                                                                $S_385 : {
                                                                                                                                                // NORMAL
                                                                                                                                                    var var117 = local_9_BOOLEAN; // type is BOOLEAN value type is BOOLEAN
                                                                                                                                                    if ((var117 == 0)) {
                                                                                                                                                        __label__ = 393;
                                                                                                                                                        break $S_385;
                                                                                                                                                    }
                                                                                                                                                    __label__ = 390;
                                                                                                                                                    }
                                                                                                                                                for(;;) switch (__label__) {
                                                                                                                                                    case 393 :
                                                                                                                                                    // NORMAL
                                                                                                                                                        $S_393 : {
                                                                                                                                                        // NORMAL
                                                                                                                                                            thisRef.island.VOIDaddojdcContact(thisRef.island,local_7_REFERENCE);
                                                                                                                                                            var var120 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@16a979c8
                                                                                                                                                            var var122 = (var120.m_flags | 1); // type is INT value type is INT
                                                                                                                                                            var120.m_flags = var122;
                                                                                                                                                            local_10_REFERENCE = local_6_REFERENCE.other; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4bbf5007
                                                                                                                                                            var var128 = (local_10_REFERENCE.m_flags & 1); // type is INT value type is INT
                                                                                                                                                            if ((var128 != 1)) {
                                                                                                                                                                __label__ = 434;
                                                                                                                                                                break $S_393;
                                                                                                                                                            }
                                                                                                                                                            __label__ = 431;
                                                                                                                                                            }
                                                                                                                                                        for(;;) switch (__label__) {
                                                                                                                                                            case 434 :
                                                                                                                                                            // NORMAL
                                                                                                                                                                $S_434 : {
                                                                                                                                                                // NORMAL
                                                                                                                                                                    var var129 = ojdWorld.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                                                                                                                                                                    if ((var129 != 0)) {
                                                                                                                                                                        __label__ = 454;
                                                                                                                                                                        break $S_434;
                                                                                                                                                                    }
                                                                                                                                                                    __label__ = 440;
                                                                                                                                                                    }
                                                                                                                                                                $M_440_454 : for(;;) switch (__label__) {
                                                                                                                                                                    case 454 :
                                                                                                                                                                    // NORMAL
                                                                                                                                                                        var var132 = thisRef.stack; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@17a0b93e
                                                                                                                                                                        var var133 = local_4_INT; // type is INT value type is INT
                                                                                                                                                                        local_4_INT = (local_4_INT + 1); // type is INT value type is INT
                                                                                                                                                                        var var134 = local_10_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@319226e0
                                                                                                                                                                        var132.data[var133] = var134;
                                                                                                                                                                        var var135 = local_10_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@319226e0
                                                                                                                                                                        var var137 = (var135.m_flags | 1); // type is INT value type is INT
                                                                                                                                                                        var135.m_flags = var137;
                                                                                                                                                                        break $M_338_341;
                                                                                                                                                                    case 440 :
                                                                                                                                                                    // NORMAL
                                                                                                                                                                        $S_440 : {
                                                                                                                                                                        // NORMAL
                                                                                                                                                                            var var130 = local_4_INT; // type is INT value type is INT
                                                                                                                                                                            var var131 = local_2_INT; // type is INT value type is INT
                                                                                                                                                                            if ((var130 < var131)) {
                                                                                                                                                                                __label__ = 454;
                                                                                                                                                                                continue $M_440_454;
                                                                                                                                                                            }
                                                                                                                                                                            }
                                                                                                                                                                        var var150 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                                                                                                                                                        jlAssertionError.VOIDinit(var150);
                                                                                                                                                                        throw var150;
                                                                                                                                                                }
                                                                                                                                                            case 431 :
                                                                                                                                                            // NORMAL
                                                                                                                                                                break $M_338_341;
                                                                                                                                                        }
                                                                                                                                                    case 390 :
                                                                                                                                                    // NORMAL
                                                                                                                                                        break $M_338_341;
                                                                                                                                                }
                                                                                                                                        }
                                                                                                                                    case 338 :
                                                                                                                                    // NORMAL
                                                                                                                                        break $M_338_341;
                                                                                                                                }
                                                                                                                                local_6_REFERENCE = local_6_REFERENCE.next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6381a07b
                                                                                                                                __label__ = 315;
                                                                                                                                continue $L_315;
                                                                                                                        }
                                                                                                                    }
                                                                                                                case 305 :
                                                                                                                // NORMAL
                                                                                                                    __label__ = 239;
                                                                                                                    continue $L_239;
                                                                                                            }
                                                                                                    }
                                                                                                case 623 :
                                                                                                // NORMAL
                                                                                                    $S_623 : {
                                                                                                    // NORMAL
                                                                                                        thisRef.island.VOIDsolveojdProfileojdTimeStepojcVec2BOOLEAN(thisRef.island,thisRef.islandProfile,step,thisRef.m_gravity,thisRef.m_allowSleep);
                                                                                                        var var53 = thisRef.m_profile; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@261027eb
                                                                                                        var var57 = (var53.solveInit + thisRef.islandProfile.solveInit); // type is FLOAT value type is FLOAT
                                                                                                        var53.solveInit = var57;
                                                                                                        var var58 = thisRef.m_profile; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@171e6446
                                                                                                        var var62 = (var58.solveVelocity + thisRef.islandProfile.solveVelocity); // type is FLOAT value type is FLOAT
                                                                                                        var58.solveVelocity = var62;
                                                                                                        var var63 = thisRef.m_profile; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@56556d2
                                                                                                        var var67 = (var63.solvePosition + thisRef.islandProfile.solvePosition); // type is FLOAT value type is FLOAT
                                                                                                        var63.solvePosition = var67;
                                                                                                        local_5_INT = 0; // type is INT value type is INT
                                                                                                        __label__ = 703;
                                                                                                        }
                                                                                                    $L_703 : for (;;) {
                                                                                                        $S_703 : {
                                                                                                        // NORMAL
                                                                                                            var var70 = local_5_INT; // type is INT value type is INT
                                                                                                            var var72 = thisRef.island.m_bodyCount; // type is INT value type is INT
                                                                                                            if ((var70 >= var72)) {
                                                                                                                break $M_178_175;
                                                                                                            }
                                                                                                            }
                                                                                                        $S_715 : {
                                                                                                        // NORMAL
                                                                                                            var var143 = thisRef.island.m_bodies.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                                                                                                            local_6_REFERENCE = var143; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@41e2e5dc
                                                                                                            var var145 = local_6_REFERENCE.ojdBodyTypegetType(local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6b09bc7d
                                                                                                            var var146 = ojdBodyType.STATIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4c01e188
                                                                                                            if ((var145 != var146)) {
                                                                                                                __label__ = 750;
                                                                                                                break $S_715;
                                                                                                            }
                                                                                                            __label__ = 738;
                                                                                                            }
                                                                                                        $M_738_750 : for(;;) switch (__label__) {
                                                                                                            case 738 :
                                                                                                            // NORMAL
                                                                                                                var var147 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@249271e4
                                                                                                                var var149 = (var147.m_flags & -2); // type is INT value type is INT
                                                                                                                var147.m_flags = var149;
                                                                                                                __label__ = 750;
                                                                                                                continue $M_738_750;
                                                                                                            case 750 :
                                                                                                            // NORMAL
                                                                                                                local_5_INT = (local_5_INT + 1); // type is INT value type is INT
                                                                                                                __label__ = 703;
                                                                                                                continue $L_703;
                                                                                                        }
                                                                                                    }
                                                                                            }
                                                                                        }
                                                                                }
                                                                            case 192 :
                                                                            // NORMAL
                                                                                break $M_178_175;
                                                                        }
                                                                }
                                                                local_3_REFERENCE = local_3_REFERENCE.m_next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2859801a
                                                                __label__ = 161;
                                                                continue $L_161;
                                                        }
                                                    }
                                                case 148 :
                                                // NORMAL
                                                    var var25 = bytecoder.newArray(local_2_INT,null); // type is REFERENCE value type is REFERENCE
                                                    thisRef.stack = var25;
                                                    __label__ = 156;
                                                    continue $M_156_148;
                                            }
                                    }
                                }
                        }
                    }
            }
        }
    },

    VOIDsolveTOIojdTimeStep : function(thisRef,step) {
        var local_4_FLOAT = null; // type is FLOAT # of inits = 5
        var local_7_REFERENCE = null; // type is REFERENCE # of inits = 3
        var var73 = null; // type is INT # of inits = 2
        var local_15_INT = null; // type is INT # of inits = 1
        var local_14_INT = null; // type is INT # of inits = 1
        var var89 = null; // type is INT # of inits = 2
        var local_15_BOOLEAN = null; // type is BOOLEAN # of inits = 1
        var var66 = null; // type is INT # of inits = 2
        var local_11_REFERENCE = null; // type is REFERENCE # of inits = 7
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 4
        var local_9_INT = null; // type is INT # of inits = 8
        var local_10_REFERENCE = null; // type is REFERENCE # of inits = 4
        var local_12_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_13_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 9
        var local_13_INT = null; // type is INT # of inits = 1
        var local_8_REFERENCE = null; // type is REFERENCE # of inits = 3
        var var82 = null; // type is INT # of inits = 2
        var local_16_INT = null; // type is INT # of inits = 1
        var local_6_FLOAT = null; // type is FLOAT # of inits = 4
        var local_17_FLOAT = null; // type is FLOAT # of inits = 3
        var local_21_FLOAT = null; // type is FLOAT # of inits = 1
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 9
        var local_9_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_2_REFERENCE = thisRef.toiIsland; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7d2c1285
            local_2_REFERENCE.VOIDinitINTINTINTojcContactListener(local_2_REFERENCE,64,32,0,thisRef.m_contactManager.m_contactListener);
            var var5 = thisRef.m_stepComplete; // type is BOOLEAN value type is BOOLEAN
            if ((var5 == 0)) {
                __label__ = 105;
                break $S_0;
            }
            __label__ = 28;
            }
        $M_28_105 : for(;;) switch (__label__) {
            case 105 :
            // NORMAL
                for (;;) {
                    $S_105 : {
                    // NORMAL
                        local_3_REFERENCE = null; // type is REFERENCE value type is REFERENCE
                        local_4_FLOAT = 1.0; // type is FLOAT value type is FLOAT
                        local_5_REFERENCE = thisRef.m_contactManager.m_contactList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@777b4595
                        __label__ = 119;
                        }
                    $L_119 : for (;;) {
                        $S_119 : {
                        // NORMAL
                            var var24 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5fd80ca1
                            if (var24 == null ) {
                                __label__ = 687;
                                break $S_119;
                            }
                            __label__ = 124;
                            }
                        for(;;) switch (__label__) {
                            case 124 :
                            // NORMAL
                                $S_124 : {
                                // NORMAL
                                    var var26 = local_5_REFERENCE.BOOLEANisEnabled(local_5_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                    if ((var26 != 0)) {
                                        __label__ = 135;
                                        break $S_124;
                                    }
                                    __label__ = 132;
                                    }
                                $M_135_132 : for(;;) switch (__label__) {
                                    case 135 :
                                    // NORMAL
                                        $S_135 : {
                                        // NORMAL
                                            var var28 = local_5_REFERENCE.m_toiCount; // type is FLOAT value type is FLOAT
                                            if ((var28 <= 8.0)) {
                                                __label__ = 150;
                                                break $S_135;
                                            }
                                            __label__ = 147;
                                            }
                                        for(;;) switch (__label__) {
                                            case 150 :
                                            // NORMAL
                                                $S_150 : {
                                                // NORMAL
                                                    local_6_FLOAT = 1.0; // type is FLOAT value type is FLOAT
                                                    var var34 = (local_5_REFERENCE.m_flags & 32); // type is INT value type is INT
                                                    if ((var34 == 0)) {
                                                        __label__ = 174;
                                                        break $S_150;
                                                    }
                                                    __label__ = 164;
                                                    }
                                                $M_164_174 : for(;;) switch (__label__) {
                                                    case 174 :
                                                    // NORMAL
                                                        $S_174 : {
                                                        // NORMAL
                                                            var var36 = local_5_REFERENCE.ojdFixturegetFixtureA(local_5_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@528189e9
                                                            local_7_REFERENCE = var36; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@92fb4a4
                                                            var var39 = local_5_REFERENCE.ojdFixturegetFixtureB(local_5_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@12bbbb34
                                                            local_8_REFERENCE = var39; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4e1b1c6a
                                                            var var42 = local_7_REFERENCE.BOOLEANisSensor(local_7_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                                            if ((var42 != 0)) {
                                                                break $M_135_132;
                                                            }
                                                            }
                                                        $S_196 : {
                                                        // NORMAL
                                                            var var44 = local_8_REFERENCE.BOOLEANisSensor(local_8_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                                            if ((var44 == 0)) {
                                                                __label__ = 207;
                                                                break $S_196;
                                                            }
                                                            __label__ = 204;
                                                            }
                                                        for(;;) switch (__label__) {
                                                            case 204 :
                                                            // NORMAL
                                                                break $M_135_132;
                                                            case 207 :
                                                            // NORMAL
                                                                $S_207 : {
                                                                // NORMAL
                                                                    var var46 = local_7_REFERENCE.ojdBodygetBody(local_7_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@f1e3bdc
                                                                    local_9_REFERENCE = var46; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3492db1d
                                                                    var var49 = local_8_REFERENCE.ojdBodygetBody(local_8_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@22e48047
                                                                    local_10_REFERENCE = var49; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4a009d97
                                                                    local_11_REFERENCE = local_9_REFERENCE.m_type; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7c749b33
                                                                    local_12_REFERENCE = local_10_REFERENCE.m_type; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@33d9fd92
                                                                    var var57 = ojdWorld.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                                                                    if ((var57 != 0)) {
                                                                        __label__ = 265;
                                                                        break $S_207;
                                                                    }
                                                                    __label__ = 241;
                                                                    }
                                                                $M_241_265 : for(;;) switch (__label__) {
                                                                    case 241 :
                                                                    // NORMAL
                                                                        $S_241 : {
                                                                        // NORMAL
                                                                            var var58 = local_11_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@58a59576
                                                                            var var59 = ojdBodyType.DYNAMIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4de7e0ee
                                                                            if ((var58 == var59)) {
                                                                                __label__ = 265;
                                                                                continue $M_241_265;
                                                                            }
                                                                            }
                                                                        $S_249 : {
                                                                        // NORMAL
                                                                            var var60 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@766cf610
                                                                            var var61 = ojdBodyType.DYNAMIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4b87a7ad
                                                                            if ((var60 == var61)) {
                                                                                __label__ = 265;
                                                                                continue $M_241_265;
                                                                            }
                                                                            }
                                                                        var var131 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                                                        jlAssertionError.VOIDinit(var131);
                                                                        throw var131;
                                                                    case 265 :
                                                                    // NORMAL
                                                                        $S_265 : {
                                                                        // NORMAL
                                                                            var var63 = local_9_REFERENCE.BOOLEANisAwake(local_9_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                                                            if ((var63 == 0)) {
                                                                                __label__ = 285;
                                                                                break $S_265;
                                                                            }
                                                                            __label__ = 273;
                                                                            }
                                                                        $M_273_285 : for(;;) switch (__label__) {
                                                                            case 285 :
                                                                            // NORMAL
                                                                                var66 = 0; // type is INT value type is INT
                                                                                break $M_273_285;
                                                                            case 273 :
                                                                            // NORMAL
                                                                                $S_273 : {
                                                                                // NORMAL
                                                                                    var var64 = local_11_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@58a59576
                                                                                    var var65 = ojdBodyType.STATIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@137200ed
                                                                                    if ((var64 == var65)) {
                                                                                        __label__ = 285;
                                                                                        continue $M_273_285;
                                                                                    }
                                                                                    }
                                                                                var66 = 1; // type is INT value type is INT
                                                                                break $M_273_285;
                                                                        }
                                                                        $S_286 : {
                                                                        // NORMAL
                                                                            local_13_INT = var66; // type is INT value type is INT
                                                                            var var70 = local_10_REFERENCE.BOOLEANisAwake(local_10_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                                                            if ((var70 == 0)) {
                                                                                __label__ = 308;
                                                                                break $S_286;
                                                                            }
                                                                            __label__ = 296;
                                                                            }
                                                                        $M_308_296 : for(;;) switch (__label__) {
                                                                            case 308 :
                                                                            // NORMAL
                                                                                var73 = 0; // type is INT value type is INT
                                                                                break $M_308_296;
                                                                            case 296 :
                                                                            // NORMAL
                                                                                $S_296 : {
                                                                                // NORMAL
                                                                                    var var71 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@766cf610
                                                                                    var var72 = ojdBodyType.STATIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6fbb5a7c
                                                                                    if ((var71 == var72)) {
                                                                                        __label__ = 308;
                                                                                        continue $M_308_296;
                                                                                    }
                                                                                    }
                                                                                var73 = 1; // type is INT value type is INT
                                                                                break $M_308_296;
                                                                        }
                                                                        $S_309 : {
                                                                        // NORMAL
                                                                            local_14_INT = var73; // type is INT value type is INT
                                                                            var var76 = local_13_INT; // type is INT value type is INT
                                                                            if ((var76 != 0)) {
                                                                                __label__ = 324;
                                                                                break $S_309;
                                                                            }
                                                                            __label__ = 316;
                                                                            }
                                                                        $M_324_316 : for(;;) switch (__label__) {
                                                                            case 324 :
                                                                            // NORMAL
                                                                                $S_324 : {
                                                                                // NORMAL
                                                                                    var var79 = local_9_REFERENCE.BOOLEANisBullet(local_9_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                                                                    if ((var79 != 0)) {
                                                                                        __label__ = 340;
                                                                                        break $S_324;
                                                                                    }
                                                                                    __label__ = 332;
                                                                                    }
                                                                                $M_332_340 : for(;;) switch (__label__) {
                                                                                    case 340 :
                                                                                    // NORMAL
                                                                                        var82 = 1; // type is INT value type is INT
                                                                                        break $M_332_340;
                                                                                    case 332 :
                                                                                    // NORMAL
                                                                                        $S_332 : {
                                                                                        // NORMAL
                                                                                            var var80 = local_11_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@58a59576
                                                                                            var var81 = ojdBodyType.DYNAMIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1da937f5
                                                                                            if ((var80 == var81)) {
                                                                                                break $S_332;
                                                                                            }
                                                                                            __label__ = 340;
                                                                                            continue $M_332_340;
                                                                                            }
                                                                                        var82 = 0; // type is INT value type is INT
                                                                                        break $M_332_340;
                                                                                }
                                                                                $S_345 : {
                                                                                // NORMAL
                                                                                    local_15_INT = var82; // type is INT value type is INT
                                                                                    var var86 = local_10_REFERENCE.BOOLEANisBullet(local_10_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                                                                    if ((var86 != 0)) {
                                                                                        __label__ = 363;
                                                                                        break $S_345;
                                                                                    }
                                                                                    __label__ = 355;
                                                                                    }
                                                                                $M_363_355 : for(;;) switch (__label__) {
                                                                                    case 355 :
                                                                                    // NORMAL
                                                                                        $S_355 : {
                                                                                        // NORMAL
                                                                                            var var87 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@766cf610
                                                                                            var var88 = ojdBodyType.DYNAMIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6b654122
                                                                                            if ((var87 == var88)) {
                                                                                                break $S_355;
                                                                                            }
                                                                                            __label__ = 363;
                                                                                            continue $M_363_355;
                                                                                            }
                                                                                        var89 = 0; // type is INT value type is INT
                                                                                        break $M_363_355;
                                                                                    case 363 :
                                                                                    // NORMAL
                                                                                        var89 = 1; // type is INT value type is INT
                                                                                        break $M_363_355;
                                                                                }
                                                                                $S_368 : {
                                                                                // NORMAL
                                                                                    local_16_INT = var89; // type is INT value type is INT
                                                                                    var var92 = local_15_INT; // type is INT value type is INT
                                                                                    if ((var92 != 0)) {
                                                                                        __label__ = 383;
                                                                                        break $S_368;
                                                                                    }
                                                                                    __label__ = 375;
                                                                                    }
                                                                                $M_383_375 : for(;;) switch (__label__) {
                                                                                    case 375 :
                                                                                    // NORMAL
                                                                                        $S_375 : {
                                                                                        // NORMAL
                                                                                            var var93 = local_16_INT; // type is INT value type is INT
                                                                                            if ((var93 != 0)) {
                                                                                                __label__ = 383;
                                                                                                continue $M_383_375;
                                                                                            }
                                                                                            }
                                                                                        break $M_135_132;
                                                                                    case 383 :
                                                                                    // NORMAL
                                                                                        $S_383 : {
                                                                                        // NORMAL
                                                                                            local_17_FLOAT = local_9_REFERENCE.m_sweep.alpha0; // type is FLOAT value type is FLOAT
                                                                                            var var101 = local_9_REFERENCE.m_sweep.alpha0; // type is FLOAT value type is FLOAT
                                                                                            var var104 = local_10_REFERENCE.m_sweep.alpha0; // type is FLOAT value type is FLOAT
                                                                                            if ((var101 >= var104)) {
                                                                                                __label__ = 436;
                                                                                                break $S_383;
                                                                                            }
                                                                                            __label__ = 413;
                                                                                            }
                                                                                        $M_436_413 : for(;;) switch (__label__) {
                                                                                            case 436 :
                                                                                            // NORMAL
                                                                                                $S_436 : {
                                                                                                // NORMAL
                                                                                                    var var108 = local_10_REFERENCE.m_sweep.alpha0; // type is FLOAT value type is FLOAT
                                                                                                    var var111 = local_9_REFERENCE.m_sweep.alpha0; // type is FLOAT value type is FLOAT
                                                                                                    if ((var108 >= var111)) {
                                                                                                        break $M_436_413;
                                                                                                    }
                                                                                                    }
                                                                                                local_17_FLOAT = local_9_REFERENCE.m_sweep.alpha0; // type is FLOAT value type is FLOAT
                                                                                                local_10_REFERENCE.m_sweep.VOIDadvanceFLOAT(local_10_REFERENCE.m_sweep,local_17_FLOAT);
                                                                                                break $M_436_413;
                                                                                            case 413 :
                                                                                            // NORMAL
                                                                                                local_17_FLOAT = local_10_REFERENCE.m_sweep.alpha0; // type is FLOAT value type is FLOAT
                                                                                                local_9_REFERENCE.m_sweep.VOIDadvanceFLOAT(local_9_REFERENCE.m_sweep,local_17_FLOAT);
                                                                                                break $M_436_413;
                                                                                        }
                                                                                        $S_476 : {
                                                                                        // NORMAL
                                                                                            var var127 = ojdWorld.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                                                                                            if ((var127 != 0)) {
                                                                                                __label__ = 497;
                                                                                                break $S_476;
                                                                                            }
                                                                                            __label__ = 482;
                                                                                            }
                                                                                        $M_497_482 : for(;;) switch (__label__) {
                                                                                            case 497 :
                                                                                            // NORMAL
                                                                                                $S_497 : {
                                                                                                // NORMAL
                                                                                                    var var349 = local_5_REFERENCE.INTgetChildIndexA(local_5_REFERENCE); // type is INT value type is INT
                                                                                                    var local_18_INT = var349; // type is INT value type is INT
                                                                                                    var var353 = local_5_REFERENCE.INTgetChildIndexB(local_5_REFERENCE); // type is INT value type is INT
                                                                                                    var local_19_INT = var353; // type is INT value type is INT
                                                                                                    var local_20_REFERENCE = thisRef.toiInput; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@689351cb
                                                                                                    var var359 = local_20_REFERENCE.proxyA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5dce9e1f
                                                                                                    var var361 = local_7_REFERENCE.ojcsShapegetShape(local_7_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@98c0ccc
                                                                                                    var359.VOIDsetojcsShapeINT(var359,var361,local_18_INT);
                                                                                                    var var364 = local_20_REFERENCE.proxyB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3ace2d58
                                                                                                    var var366 = local_8_REFERENCE.ojcsShapegetShape(local_8_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@13596278
                                                                                                    var364.VOIDsetojcsShapeINT(var364,var366,local_19_INT);
                                                                                                    var var372 = local_20_REFERENCE.sweepA.ojcSweepsetojcSweep(local_20_REFERENCE.sweepA,local_9_REFERENCE.m_sweep); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7a5ae6b3
                                                                                                    var var377 = local_20_REFERENCE.sweepB.ojcSweepsetojcSweep(local_20_REFERENCE.sweepB,local_10_REFERENCE.m_sweep); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3b3e0c26
                                                                                                    var var378 = local_20_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@705142f4
                                                                                                    var378.tMax = 1.0;
                                                                                                    var var380 = thisRef.pool.ojcTimeOfImpactgetTimeOfImpact(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@28c3b424
                                                                                                    var380.VOIDtimeOfImpactojcTimeOfImpact$TOIOutputojcTimeOfImpact$TOIInput(var380,thisRef.toiOutput,local_20_REFERENCE);
                                                                                                    local_21_FLOAT = thisRef.toiOutput.t; // type is FLOAT value type is FLOAT
                                                                                                    var var388 = thisRef.toiOutput.state; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4e15c35b
                                                                                                    var var389 = ojcTimeOfImpact$TOIOutputState.TOUCHING; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@34297e8f
                                                                                                    if ((var388 != var389)) {
                                                                                                        __label__ = 640;
                                                                                                        break $S_497;
                                                                                                    }
                                                                                                    __label__ = 621;
                                                                                                    }
                                                                                                $M_640_621 : for(;;) switch (__label__) {
                                                                                                    case 621 :
                                                                                                    // NORMAL
                                                                                                        var var397 = ojcMathUtils.FLOATminFLOATFLOAT((local_17_FLOAT + ((1.0 - local_17_FLOAT) * local_21_FLOAT)),1.0); // type is FLOAT value type is FLOAT
                                                                                                        local_6_FLOAT = var397; // type is FLOAT value type is FLOAT
                                                                                                        break $M_640_621;
                                                                                                    case 640 :
                                                                                                    // NORMAL
                                                                                                        local_6_FLOAT = 1.0; // type is FLOAT value type is FLOAT
                                                                                                        break $M_640_621;
                                                                                                }
                                                                                                var var399 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5fd80ca1
                                                                                                var var400 = local_6_FLOAT; // type is FLOAT value type is FLOAT
                                                                                                var399.m_toi = var400;
                                                                                                var var401 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5fd80ca1
                                                                                                var var403 = (var401.m_flags | 32); // type is INT value type is INT
                                                                                                var401.m_flags = var403;
                                                                                                break $M_164_174;
                                                                                            case 482 :
                                                                                            // NORMAL
                                                                                                $S_482 : {
                                                                                                // NORMAL
                                                                                                    var var128 = local_17_FLOAT; // type is FLOAT value type is FLOAT
                                                                                                    if ((var128 < 1.0)) {
                                                                                                        __label__ = 497;
                                                                                                        continue $M_497_482;
                                                                                                    }
                                                                                                    }
                                                                                                var var130 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                                                                                jlAssertionError.VOIDinit(var130);
                                                                                                throw var130;
                                                                                        }
                                                                                }
                                                                            case 316 :
                                                                            // NORMAL
                                                                                $S_316 : {
                                                                                // NORMAL
                                                                                    var var77 = local_14_INT; // type is INT value type is INT
                                                                                    if ((var77 != 0)) {
                                                                                        __label__ = 324;
                                                                                        continue $M_324_316;
                                                                                    }
                                                                                    }
                                                                                break $M_135_132;
                                                                        }
                                                                }
                                                        }
                                                    case 164 :
                                                    // NORMAL
                                                        local_6_FLOAT = local_5_REFERENCE.m_toi; // type is FLOAT value type is FLOAT
                                                        break $M_164_174;
                                                }
                                                $S_662 : {
                                                // NORMAL
                                                    var var404 = local_6_FLOAT; // type is FLOAT value type is FLOAT
                                                    var var405 = local_4_FLOAT; // type is FLOAT value type is FLOAT
                                                    if ((var404 >= var405)) {
                                                        break $M_135_132;
                                                    }
                                                    }
                                                local_3_REFERENCE = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5fd80ca1
                                                local_4_FLOAT = local_6_FLOAT; // type is FLOAT value type is FLOAT
                                                break $M_135_132;
                                            case 147 :
                                            // NORMAL
                                                break $M_135_132;
                                        }
                                    case 132 :
                                    // NORMAL
                                        break $M_135_132;
                                }
                                local_5_REFERENCE = local_5_REFERENCE.m_next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@9f0204c
                                __label__ = 119;
                                continue $L_119;
                            case 687 :
                            // NORMAL
                                $S_687 : {
                                // NORMAL
                                    var var139 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5719986a
                                    if (var139 == null ) {
                                        __label__ = 700;
                                        break $S_687;
                                    }
                                    __label__ = 691;
                                    }
                                $M_700_691 : for(;;) switch (__label__) {
                                    case 691 :
                                    // NORMAL
                                        $S_691 : {
                                        // NORMAL
                                            var var140 = local_4_FLOAT; // type is FLOAT value type is FLOAT
                                            if ((0.9999988 >= var140)) {
                                                break $S_691;
                                            }
                                            __label__ = 700;
                                            continue $M_700_691;
                                            }
                                        $S_708 : {
                                        // NORMAL
                                            var var143 = local_3_REFERENCE.ojdFixturegetFixtureA(local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@699f2532
                                            local_5_REFERENCE = var143; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1a6844c3
                                            var var145 = local_3_REFERENCE.ojdFixturegetFixtureB(local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@16bde388
                                            var local_6_REFERENCE = var145; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@634324ab
                                            var var148 = local_5_REFERENCE.ojdBodygetBody(local_5_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6bb99acf
                                            local_7_REFERENCE = var148; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@168d1c24
                                            var var150 = local_6_REFERENCE.ojdBodygetBody(local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7b1f943f
                                            local_8_REFERENCE = var150; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@40eccd30
                                            var var154 = thisRef.backup1.ojcSweepsetojcSweep(thisRef.backup1,local_7_REFERENCE.m_sweep); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2479977
                                            var var158 = thisRef.backup2.ojcSweepsetojcSweep(thisRef.backup2,local_8_REFERENCE.m_sweep); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@785b93e8
                                            local_7_REFERENCE.VOIDadvanceFLOAT(local_7_REFERENCE,local_4_FLOAT);
                                            local_8_REFERENCE.VOIDadvanceFLOAT(local_8_REFERENCE,local_4_FLOAT);
                                            local_3_REFERENCE.VOIDupdateojcContactListener(local_3_REFERENCE,thisRef.m_contactManager.m_contactListener);
                                            var var166 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5719986a
                                            var var168 = (var166.m_flags & -33); // type is INT value type is INT
                                            var166.m_flags = var168;
                                            var var169 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5719986a
                                            var var171 = (var169.m_toiCount + 1.0); // type is FLOAT value type is FLOAT
                                            var169.m_toiCount = var171;
                                            var var173 = local_3_REFERENCE.BOOLEANisEnabled(local_3_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                            if ((var173 == 0)) {
                                                __label__ = 820;
                                                break $S_708;
                                            }
                                            __label__ = 813;
                                            }
                                        $M_813_820 : for(;;) switch (__label__) {
                                            case 813 :
                                            // NORMAL
                                                $S_813 : {
                                                // NORMAL
                                                    var var175 = local_3_REFERENCE.BOOLEANisTouching(local_3_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                                    if ((var175 != 0)) {
                                                        break $S_813;
                                                    }
                                                    __label__ = 820;
                                                    continue $M_813_820;
                                                    }
                                                $S_864 : {
                                                // NORMAL
                                                    local_7_REFERENCE.VOIDsetAwakeBOOLEAN(local_7_REFERENCE,1);
                                                    local_8_REFERENCE.VOIDsetAwakeBOOLEAN(local_8_REFERENCE,1);
                                                    local_2_REFERENCE.VOIDclear(local_2_REFERENCE);
                                                    local_2_REFERENCE.VOIDaddojdBody(local_2_REFERENCE,local_7_REFERENCE);
                                                    local_2_REFERENCE.VOIDaddojdBody(local_2_REFERENCE,local_8_REFERENCE);
                                                    local_2_REFERENCE.VOIDaddojdcContact(local_2_REFERENCE,local_3_REFERENCE);
                                                    var var185 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@92fb4a4
                                                    var var187 = (var185.m_flags | 1); // type is INT value type is INT
                                                    var185.m_flags = var187;
                                                    var var188 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4e1b1c6a
                                                    var var190 = (var188.m_flags | 1); // type is INT value type is INT
                                                    var188.m_flags = var190;
                                                    var var191 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5719986a
                                                    var var193 = (var191.m_flags | 1); // type is INT value type is INT
                                                    var191.m_flags = var193;
                                                    var var194 = thisRef.tempBodies; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@5f9301ce
                                                    var var195 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@92fb4a4
                                                    var194.data[0] = var195;
                                                    var var196 = thisRef.tempBodies; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@58aad86f
                                                    var var197 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4e1b1c6a
                                                    var196.data[1] = var197;
                                                    local_9_INT = 0; // type is INT value type is INT
                                                    __label__ = 948;
                                                    }
                                                $L_948 : for (;;) {
                                                    $S_948 : {
                                                    // NORMAL
                                                        var var200 = local_9_INT; // type is INT value type is INT
                                                        if ((var200 >= 2)) {
                                                            __label__ = 1284;
                                                            break $S_948;
                                                        }
                                                        __label__ = 954;
                                                        }
                                                    for(;;) switch (__label__) {
                                                        case 954 :
                                                        // NORMAL
                                                            $S_954 : {
                                                            // NORMAL
                                                                var var203 = thisRef.tempBodies.data[local_9_INT]; // type is REFERENCE value type is REFERENCE
                                                                local_10_REFERENCE = var203; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@5c6e20f1
                                                                var var205 = local_10_REFERENCE.m_type; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@66986e2c
                                                                var var206 = ojdBodyType.DYNAMIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@427875c4
                                                                if ((var205 != var206)) {
                                                                    __label__ = 1278;
                                                                    break $S_954;
                                                                }
                                                                __label__ = 974;
                                                                }
                                                            $M_974_1278 : for(;;) switch (__label__) {
                                                                case 1278 :
                                                                // NORMAL
                                                                    local_9_INT = (local_9_INT + 1); // type is INT value type is INT
                                                                    __label__ = 948;
                                                                    continue $L_948;
                                                                case 974 :
                                                                // NORMAL
                                                                    $S_974 : {
                                                                    // NORMAL
                                                                        local_11_REFERENCE = local_10_REFERENCE.m_contactList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5229134
                                                                        __label__ = 981;
                                                                        }
                                                                    $L_981 : for (;;) {
                                                                        $S_981 : {
                                                                        // NORMAL
                                                                            var var209 = local_11_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@58a59576
                                                                            if (var209 == null ) {
                                                                                __label__ = 1278;
                                                                                continue $M_974_1278;
                                                                            }
                                                                            }
                                                                        $S_986 : {
                                                                        // NORMAL
                                                                            var var211 = local_2_REFERENCE.m_bodyCount; // type is INT value type is INT
                                                                            var var213 = local_2_REFERENCE.m_bodyCapacity; // type is INT value type is INT
                                                                            if ((var211 != var213)) {
                                                                                __label__ = 1000;
                                                                                break $S_986;
                                                                            }
                                                                            __label__ = 997;
                                                                            }
                                                                        for(;;) switch (__label__) {
                                                                            case 997 :
                                                                            // NORMAL
                                                                                __label__ = 1278;
                                                                                continue $M_974_1278;
                                                                            case 1000 :
                                                                            // NORMAL
                                                                                $S_1000 : {
                                                                                // NORMAL
                                                                                    var var215 = local_2_REFERENCE.m_contactCount; // type is INT value type is INT
                                                                                    var var217 = local_2_REFERENCE.m_contactCapacity; // type is INT value type is INT
                                                                                    if ((var215 != var217)) {
                                                                                        __label__ = 1014;
                                                                                        break $S_1000;
                                                                                    }
                                                                                    __label__ = 1011;
                                                                                    }
                                                                                for(;;) switch (__label__) {
                                                                                    case 1011 :
                                                                                    // NORMAL
                                                                                        __label__ = 1278;
                                                                                        continue $M_974_1278;
                                                                                    case 1014 :
                                                                                    // NORMAL
                                                                                        $S_1014 : {
                                                                                        // NORMAL
                                                                                            local_12_REFERENCE = local_11_REFERENCE.contact; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@bc5485f
                                                                                            var var222 = (local_12_REFERENCE.m_flags & 1); // type is INT value type is INT
                                                                                            if ((var222 == 0)) {
                                                                                                __label__ = 1034;
                                                                                                break $S_1014;
                                                                                            }
                                                                                            __label__ = 1031;
                                                                                            }
                                                                                        $M_1031_1034 : for(;;) switch (__label__) {
                                                                                            case 1031 :
                                                                                            // NORMAL
                                                                                                break $M_1031_1034;
                                                                                            case 1034 :
                                                                                            // NORMAL
                                                                                                $S_1034 : {
                                                                                                // NORMAL
                                                                                                    local_13_REFERENCE = local_11_REFERENCE.other; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2e89ae05
                                                                                                    var var227 = local_13_REFERENCE.m_type; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2fde3845
                                                                                                    var var228 = ojdBodyType.DYNAMIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3ee4a7bb
                                                                                                    if ((var227 != var228)) {
                                                                                                        __label__ = 1071;
                                                                                                        break $S_1034;
                                                                                                    }
                                                                                                    __label__ = 1052;
                                                                                                    }
                                                                                                $M_1071_1052 : for(;;) switch (__label__) {
                                                                                                    case 1071 :
                                                                                                    // NORMAL
                                                                                                        $S_1071 : {
                                                                                                        // NORMAL
                                                                                                            var local_14_BOOLEAN = local_12_REFERENCE.m_fixtureA.m_isSensor; // type is BOOLEAN value type is BOOLEAN
                                                                                                            local_15_BOOLEAN = local_12_REFERENCE.m_fixtureB.m_isSensor; // type is BOOLEAN value type is BOOLEAN
                                                                                                            var var243 = local_14_BOOLEAN; // type is BOOLEAN value type is BOOLEAN
                                                                                                            if ((var243 != 0)) {
                                                                                                                break $M_1031_1034;
                                                                                                            }
                                                                                                            }
                                                                                                        $S_1096 : {
                                                                                                        // NORMAL
                                                                                                            var var244 = local_15_BOOLEAN; // type is BOOLEAN value type is BOOLEAN
                                                                                                            if ((var244 == 0)) {
                                                                                                                __label__ = 1104;
                                                                                                                break $S_1096;
                                                                                                            }
                                                                                                            __label__ = 1101;
                                                                                                            }
                                                                                                        for(;;) switch (__label__) {
                                                                                                            case 1101 :
                                                                                                            // NORMAL
                                                                                                                break $M_1031_1034;
                                                                                                            case 1104 :
                                                                                                            // NORMAL
                                                                                                                $S_1104 : {
                                                                                                                // NORMAL
                                                                                                                    var var248 = thisRef.backup1.ojcSweepsetojcSweep(thisRef.backup1,local_13_REFERENCE.m_sweep); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1f428788
                                                                                                                    var var251 = (local_13_REFERENCE.m_flags & 1); // type is INT value type is INT
                                                                                                                    if ((var251 != 0)) {
                                                                                                                        __label__ = 1134;
                                                                                                                        break $S_1104;
                                                                                                                    }
                                                                                                                    __label__ = 1127;
                                                                                                                    }
                                                                                                                $M_1127_1134 : for(;;) switch (__label__) {
                                                                                                                    case 1127 :
                                                                                                                    // NORMAL
                                                                                                                        local_13_REFERENCE.VOIDadvanceFLOAT(local_13_REFERENCE,local_4_FLOAT);
                                                                                                                        __label__ = 1134;
                                                                                                                        continue $M_1127_1134;
                                                                                                                    case 1134 :
                                                                                                                    // NORMAL
                                                                                                                        $S_1134 : {
                                                                                                                        // NORMAL
                                                                                                                            local_12_REFERENCE.VOIDupdateojcContactListener(local_12_REFERENCE,thisRef.m_contactManager.m_contactListener);
                                                                                                                            var var258 = local_12_REFERENCE.BOOLEANisEnabled(local_12_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                                                                                                            if ((var258 != 0)) {
                                                                                                                                __label__ = 1175;
                                                                                                                                break $S_1134;
                                                                                                                            }
                                                                                                                            __label__ = 1154;
                                                                                                                            }
                                                                                                                        for(;;) switch (__label__) {
                                                                                                                            case 1154 :
                                                                                                                            // NORMAL
                                                                                                                                var var272 = local_13_REFERENCE.m_sweep.ojcSweepsetojcSweep(local_13_REFERENCE.m_sweep,thisRef.backup1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7c58ebe3
                                                                                                                                local_13_REFERENCE.VOIDsynchronizeTransform(local_13_REFERENCE);
                                                                                                                                break $M_1031_1034;
                                                                                                                            case 1175 :
                                                                                                                            // NORMAL
                                                                                                                                $S_1175 : {
                                                                                                                                // NORMAL
                                                                                                                                    var var260 = local_12_REFERENCE.BOOLEANisTouching(local_12_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                                                                                                                    if ((var260 != 0)) {
                                                                                                                                        __label__ = 1204;
                                                                                                                                        break $S_1175;
                                                                                                                                    }
                                                                                                                                    __label__ = 1183;
                                                                                                                                    }
                                                                                                                                for(;;) switch (__label__) {
                                                                                                                                    case 1204 :
                                                                                                                                    // NORMAL
                                                                                                                                        $S_1204 : {
                                                                                                                                        // NORMAL
                                                                                                                                            var var261 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@766cf610
                                                                                                                                            var var263 = (var261.m_flags | 1); // type is INT value type is INT
                                                                                                                                            var261.m_flags = var263;
                                                                                                                                            local_2_REFERENCE.VOIDaddojdcContact(local_2_REFERENCE,local_12_REFERENCE);
                                                                                                                                            var var268 = (local_13_REFERENCE.m_flags & 1); // type is INT value type is INT
                                                                                                                                            if ((var268 == 0)) {
                                                                                                                                                __label__ = 1234;
                                                                                                                                                break $S_1204;
                                                                                                                                            }
                                                                                                                                            __label__ = 1231;
                                                                                                                                            }
                                                                                                                                        for(;;) switch (__label__) {
                                                                                                                                            case 1231 :
                                                                                                                                            // NORMAL
                                                                                                                                                break $M_1031_1034;
                                                                                                                                            case 1234 :
                                                                                                                                            // NORMAL
                                                                                                                                                $S_1234 : {
                                                                                                                                                // NORMAL
                                                                                                                                                    var var279 = local_13_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@654c5f70
                                                                                                                                                    var var281 = (var279.m_flags | 1); // type is INT value type is INT
                                                                                                                                                    var279.m_flags = var281;
                                                                                                                                                    var var283 = local_13_REFERENCE.m_type; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@229ae83d
                                                                                                                                                    var var284 = ojdBodyType.STATIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@39d85aaa
                                                                                                                                                    if ((var283 == var284)) {
                                                                                                                                                        __label__ = 1262;
                                                                                                                                                        break $S_1234;
                                                                                                                                                    }
                                                                                                                                                    __label__ = 1256;
                                                                                                                                                    }
                                                                                                                                                $M_1256_1262 : for(;;) switch (__label__) {
                                                                                                                                                    case 1256 :
                                                                                                                                                    // NORMAL
                                                                                                                                                        local_13_REFERENCE.VOIDsetAwakeBOOLEAN(local_13_REFERENCE,1);
                                                                                                                                                        __label__ = 1262;
                                                                                                                                                        continue $M_1256_1262;
                                                                                                                                                    case 1262 :
                                                                                                                                                    // NORMAL
                                                                                                                                                        local_2_REFERENCE.VOIDaddojdBody(local_2_REFERENCE,local_13_REFERENCE);
                                                                                                                                                        break $M_1031_1034;
                                                                                                                                                }
                                                                                                                                        }
                                                                                                                                    case 1183 :
                                                                                                                                    // NORMAL
                                                                                                                                        var var277 = local_13_REFERENCE.m_sweep.ojcSweepsetojcSweep(local_13_REFERENCE.m_sweep,thisRef.backup1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@322de4de
                                                                                                                                        local_13_REFERENCE.VOIDsynchronizeTransform(local_13_REFERENCE);
                                                                                                                                        break $M_1031_1034;
                                                                                                                                }
                                                                                                                        }
                                                                                                                }
                                                                                                        }
                                                                                                    case 1052 :
                                                                                                    // NORMAL
                                                                                                        $S_1052 : {
                                                                                                        // NORMAL
                                                                                                            var var230 = local_10_REFERENCE.BOOLEANisBullet(local_10_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                                                                                            if ((var230 != 0)) {
                                                                                                                __label__ = 1071;
                                                                                                                continue $M_1071_1052;
                                                                                                            }
                                                                                                            }
                                                                                                        $S_1060 : {
                                                                                                        // NORMAL
                                                                                                            var var232 = local_13_REFERENCE.BOOLEANisBullet(local_13_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                                                                                            if ((var232 != 0)) {
                                                                                                                __label__ = 1071;
                                                                                                                continue $M_1071_1052;
                                                                                                            }
                                                                                                            }
                                                                                                        break $M_1031_1034;
                                                                                                }
                                                                                        }
                                                                                        local_11_REFERENCE = local_11_REFERENCE.next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@991068b
                                                                                        __label__ = 981;
                                                                                        continue $L_981;
                                                                                }
                                                                        }
                                                                    }
                                                            }
                                                        case 1284 :
                                                        // NORMAL
                                                            $S_1284 : {
                                                            // NORMAL
                                                                var var301 = thisRef.subStep; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7c3fdc84
                                                                var var305 = ((1.0 - local_4_FLOAT) * step.dt); // type is FLOAT value type is FLOAT
                                                                var301.dt = var305;
                                                                var var306 = thisRef.subStep; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7c9d4a3
                                                                var var309 = (1.0 / thisRef.subStep.dt); // type is FLOAT value type is FLOAT
                                                                var306.inv_dt = var309;
                                                                var var310 = thisRef.subStep; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5a1fdb90
                                                                var310.dtRatio = 1.0;
                                                                var var311 = thisRef.subStep; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5b3b2b06
                                                                var311.positionIterations = 20;
                                                                var var312 = thisRef.subStep; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@59621719
                                                                var var313 = step.velocityIterations; // type is INT value type is INT
                                                                var312.velocityIterations = var313;
                                                                var var314 = thisRef.subStep; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@10c7bc5a
                                                                var314.warmStarting = 0;
                                                                local_2_REFERENCE.VOIDsolveTOIojdTimeStepINTINT(local_2_REFERENCE,thisRef.subStep,local_7_REFERENCE.m_islandIndex,local_8_REFERENCE.m_islandIndex);
                                                                local_9_INT = 0; // type is INT value type is INT
                                                                __label__ = 1373;
                                                                }
                                                            $L_1373 : for (;;) {
                                                                $S_1373 : {
                                                                // NORMAL
                                                                    var var322 = local_9_INT; // type is INT value type is INT
                                                                    var var324 = local_2_REFERENCE.m_bodyCount; // type is INT value type is INT
                                                                    if ((var322 >= var324)) {
                                                                        __label__ = 1465;
                                                                        break $S_1373;
                                                                    }
                                                                    __label__ = 1382;
                                                                    }
                                                                for(;;) switch (__label__) {
                                                                    case 1382 :
                                                                    // NORMAL
                                                                        $S_1382 : {
                                                                        // NORMAL
                                                                            var var328 = local_2_REFERENCE.m_bodies.data[local_9_INT]; // type is REFERENCE value type is REFERENCE
                                                                            local_10_REFERENCE = var328; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@7acdf301
                                                                            var var329 = local_10_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4a009d97
                                                                            var var331 = (var329.m_flags & -2); // type is INT value type is INT
                                                                            var329.m_flags = var331;
                                                                            var var333 = local_10_REFERENCE.m_type; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@34a03689
                                                                            var var334 = ojdBodyType.DYNAMIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@36c14800
                                                                            if ((var333 == var334)) {
                                                                                __label__ = 1417;
                                                                                break $S_1382;
                                                                            }
                                                                            __label__ = 1414;
                                                                            }
                                                                        $M_1414_1417 : for(;;) switch (__label__) {
                                                                            case 1414 :
                                                                            // NORMAL
                                                                                break $M_1414_1417;
                                                                            case 1417 :
                                                                            // NORMAL
                                                                                $S_1417 : {
                                                                                // NORMAL
                                                                                    local_10_REFERENCE.VOIDsynchronizeFixtures(local_10_REFERENCE);
                                                                                    local_11_REFERENCE = local_10_REFERENCE.m_contactList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7f524b1e
                                                                                    __label__ = 1429;
                                                                                    }
                                                                                $L_1429 : for (;;) {
                                                                                    $S_1429 : {
                                                                                    // NORMAL
                                                                                        var var338 = local_11_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@58a59576
                                                                                        if (var338 == null ) {
                                                                                            break $M_1414_1417;
                                                                                        }
                                                                                        }
                                                                                    var var340 = local_11_REFERENCE.contact; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@52da0dc2
                                                                                    var var342 = (var340.m_flags & -34); // type is INT value type is INT
                                                                                    var340.m_flags = var342;
                                                                                    local_11_REFERENCE = local_11_REFERENCE.next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@67fb7d6e
                                                                                    __label__ = 1429;
                                                                                    continue $L_1429;
                                                                                }
                                                                        }
                                                                        local_9_INT = (local_9_INT + 1); // type is INT value type is INT
                                                                        __label__ = 1373;
                                                                        continue $L_1373;
                                                                    case 1465 :
                                                                    // NORMAL
                                                                        $S_1465 : {
                                                                        // NORMAL
                                                                            thisRef.m_contactManager.VOIDfindNewContacts(thisRef.m_contactManager);
                                                                            var var413 = thisRef.m_subStepping; // type is BOOLEAN value type is BOOLEAN
                                                                            if ((var413 == 0)) {
                                                                                __label__ = 1487;
                                                                                break $S_1465;
                                                                            }
                                                                            __label__ = 1479;
                                                                            }
                                                                        for(;;) switch (__label__) {
                                                                            case 1487 :
                                                                            // NORMAL
                                                                                __label__ = 105;
                                                                                continue $M_28_105;
                                                                            case 1479 :
                                                                            // NORMAL
                                                                                thisRef.m_stepComplete = 0;
                                                                                return;
                                                                        }
                                                                }
                                                            }
                                                    }
                                                }
                                            case 820 :
                                            // NORMAL
                                                local_3_REFERENCE.VOIDsetEnabledBOOLEAN(local_3_REFERENCE,0);
                                                var var294 = local_7_REFERENCE.m_sweep.ojcSweepsetojcSweep(local_7_REFERENCE.m_sweep,thisRef.backup1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5b46a8d9
                                                var var298 = local_8_REFERENCE.m_sweep.ojcSweepsetojcSweep(local_8_REFERENCE.m_sweep,thisRef.backup2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@36a10214
                                                local_7_REFERENCE.VOIDsynchronizeTransform(local_7_REFERENCE);
                                                local_8_REFERENCE.VOIDsynchronizeTransform(local_8_REFERENCE);
                                                __label__ = 105;
                                                continue $M_28_105;
                                        }
                                    case 700 :
                                    // NORMAL
                                        thisRef.m_stepComplete = 1;
                                        return;
                                }
                        }
                    }
                }
            case 28 :
            // NORMAL
                $S_28 : {
                // NORMAL
                    local_3_REFERENCE = thisRef.m_bodyList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3417ad1f
                    __label__ = 33;
                    }
                $L_33 : for (;;) {
                    $S_33 : {
                    // NORMAL
                        var var8 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5719986a
                        if (var8 == null ) {
                            __label__ = 64;
                            break $S_33;
                        }
                        __label__ = 37;
                        }
                    for(;;) switch (__label__) {
                        case 64 :
                        // NORMAL
                            $S_64 : {
                            // NORMAL
                                local_3_REFERENCE = thisRef.m_contactManager.m_contactList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@83bb6fe
                                __label__ = 72;
                                }
                            $L_72 : for (;;) {
                                $S_72 : {
                                // NORMAL
                                    var var18 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5719986a
                                    if (var18 == null ) {
                                        __label__ = 105;
                                        continue $M_28_105;
                                    }
                                    }
                                var var132 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5719986a
                                var var134 = (var132.m_flags & -34); // type is INT value type is INT
                                var132.m_flags = var134;
                                var var135 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5719986a
                                var135.m_toiCount = 0.0;
                                var var136 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5719986a
                                var136.m_toi = 1.0;
                                local_3_REFERENCE = local_3_REFERENCE.m_next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@66d5d740
                                __label__ = 72;
                                continue $L_72;
                            }
                        case 37 :
                        // NORMAL
                            var var9 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5719986a
                            var var11 = (var9.m_flags & -2); // type is INT value type is INT
                            var9.m_flags = var11;
                            var var13 = local_3_REFERENCE.m_sweep; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@585ad82c
                            var13.alpha0 = 0.0;
                            local_3_REFERENCE = local_3_REFERENCE.m_next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@51ace96d
                            __label__ = 33;
                            continue $L_33;
                    }
                }
        }
    },

    VOIDclearForces : function(thisRef) {
        var local_1_REFERENCE = null; // type is REFERENCE # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_1_REFERENCE = thisRef.m_bodyList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7804db0e
            __label__ = 5;
            }
        $L_5 : for (;;) {
            $S_5 : {
            // NORMAL
                var var2 = local_1_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@24592ff8
                if (var2 == null ) {
                    return;
                }
                }
            local_1_REFERENCE.m_force.VOIDsetZero(local_1_REFERENCE.m_force);
            var var5 = local_1_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@24592ff8
            var5.m_torque = 0.0;
            var var7 = local_1_REFERENCE.ojdBodygetNext(local_1_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6cf79f7c
            local_1_REFERENCE = var7; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@30c68c0c
            __label__ = 5;
            continue $L_5;
        }
    },

    ojdBodygetBodyList : function(thisRef) {
        var __label__ = null;
        return thisRef.m_bodyList;
    },

    ojdcContactpopContactojdFixtureINTojdFixtureINT : function(thisRef,fixtureA,indexA,fixtureB,indexB) {
        var local_8_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_7_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = fixtureA.ojcsShapeTypegetType(fixtureA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@22fcad21
            var local_5_REFERENCE = var0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2c31e1e7
            var var2 = fixtureB.ojcsShapeTypegetType(fixtureB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5f45a21a
            var local_6_REFERENCE = var2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2d4544dc
            var var4 = thisRef.contactStacks; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@6a1761f0
            var var6 = local_5_REFERENCE.INTordinal(local_5_REFERENCE); // type is INT value type is INT
            var var7 = var4.data[var6]; // type is REFERENCE value type is REFERENCE
            var var9 = local_6_REFERENCE.INTordinal(local_6_REFERENCE); // type is INT value type is INT
            var var10 = var7.data[var9]; // type is REFERENCE value type is REFERENCE
            local_7_REFERENCE = var10; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@388f7773
            local_8_REFERENCE = local_7_REFERENCE.creator; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@498a8b8c
            var var15 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@370c4633
            if (var15 == null ) {
                return null;
            }
            }
        $S_42 : {
        // NORMAL
            var var17 = local_7_REFERENCE.primary; // type is BOOLEAN value type is BOOLEAN
            if ((var17 == 0)) {
                __label__ = 75;
                break $S_42;
            }
            __label__ = 50;
            }
        for(;;) switch (__label__) {
            case 75 :
            // NORMAL
                var var19 = local_8_REFERENCE.jlObjectpop(local_8_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3badb5d5
                var local_9_REFERENCE = var19; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3c4965d8
                local_9_REFERENCE.VOIDinitojdFixtureINTojdFixtureINT(local_9_REFERENCE,fixtureB,indexB,fixtureA,indexA);
                return local_9_REFERENCE;
            case 50 :
            // NORMAL
                var var24 = local_8_REFERENCE.jlObjectpop(local_8_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6d809b40
                var local_9_REFERENCE = var24; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@70cbbb97
                local_9_REFERENCE.VOIDinitojdFixtureINTojdFixtureINT(local_9_REFERENCE,fixtureA,indexA,fixtureB,indexB);
                return local_9_REFERENCE;
        }
    },

    classInitCheck : function() {
        if (!ojdWorld.__initialized) {
            ojdWorld.__initialized = true;
            var thePrototype = ojdWorld.Create.prototype;
            thePrototype.instanceOf = ojdWorld.instanceOf;
            thePrototype.ClassgetClass = ojdWorld.ClassgetClass;
            thePrototype.ojdcContactpopContactojdFixtureINTojdFixtureINT = ojdWorld.ojdcContactpopContactojdFixtureINTojdFixtureINT;
            thePrototype.ojdBodygetBodyList = ojdWorld.ojdBodygetBodyList;
            thePrototype.VOIDclearForces = ojdWorld.VOIDclearForces;
            thePrototype.VOIDsolveTOIojdTimeStep = ojdWorld.VOIDsolveTOIojdTimeStep;
            thePrototype.VOIDsolveojdTimeStep = ojdWorld.VOIDsolveojdTimeStep;
            thePrototype.VOIDpushContactojdcContact = ojdWorld.VOIDpushContactojdcContact;
            thePrototype.VOIDstepFLOATINTINT = ojdWorld.VOIDstepFLOATINTINT;
            thePrototype.ojdjJointcreateJointojdjJointDef = ojdWorld.ojdjJointcreateJointojdjJointDef;
            thePrototype.ojpIWorldPoolgetPool = ojdWorld.ojpIWorldPoolgetPool;
            thePrototype.BOOLEANisLocked = ojdWorld.BOOLEANisLocked;
            thePrototype.ojdBodycreateBodyojdBodyDef = ojdWorld.ojdBodycreateBodyojdBodyDef;
            thePrototype.VOIDaddTypeojpIDynamicStackojcsShapeTypeojcsShapeType = ojdWorld.VOIDaddTypeojpIDynamicStackojcsShapeTypeojcsShapeType;
            thePrototype.VOIDinitializeRegisters = ojdWorld.VOIDinitializeRegisters;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            jlInteger.classInitCheck();
            ojdWorld.VOIDclinit();
        }
    },

};

var jlInteger = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 15,
    __implementedTypes : [16,2,15,1,11],
    TYPE : null, // declared in java.lang.Integer

    Create : function() {
        this.integerValue = 0; // declared in java.lang.Integer
    },

    instanceOf : function(aType) {
        return jlInteger.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jlInteger;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var __label__ = null;
        jlInteger.TYPE = jlInteger;
        return;
    },

    VOIDinitINT : function(thisRef,aIntegerValue) {
        var __label__ = null;
        jlNumber.VOIDinit(thisRef);
        thisRef.integerValue = aIntegerValue;
        return;
    },

    jlIntegervalueOfINT : function(aValue) {
        var __label__ = null;
        var var0 = new jlInteger.Create(); // type is REFERENCE value type is REFERENCE
        jlInteger.VOIDinitINT(var0,aValue);
        return var0;
    },

    jlStringtoStringINT : function(aValue) {
        var __label__ = null;
        var var0 = new jlStringBuilder.Create(); // type is REFERENCE value type is REFERENCE
        jlStringBuilder.VOIDinit(var0);
        var local_1_REFERENCE = var0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@38e314b8
        var var3 = local_1_REFERENCE.jlStringBuilderappendINT(local_1_REFERENCE,aValue); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5f096266
        var var5 = local_1_REFERENCE.jlStringtoString(local_1_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@13af7c6b
        return var5;
    },

    INThashCode : function(thisRef) {
        var __label__ = null;
        return thisRef.integerValue;
    },

    BOOLEANequalsjlObject : function(thisRef,o) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((thisRef != o)) {
                break $S_0;
            }
            return 1;
            }
        $S_7 : {
        // NORMAL
            var var0 = (o == null ? false : o.instanceOf(jlInteger)); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                break $S_7;
            }
            return 0;
            }
        $S_16 : {
        // NORMAL
            var local_2_REFERENCE = o; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@207c03e5
            var var2 = thisRef.integerValue; // type is INT value type is INT
            var var4 = local_2_REFERENCE.integerValue; // type is INT value type is INT
            if ((var2 != var4)) {
                __label__ = 36;
                break $S_16;
            }
            __label__ = 32;
            }
        for(;;) switch (__label__) {
            case 36 :
            // NORMAL
                var var5 = 0; // type is INT value type is INT
                return var5;
            case 32 :
            // NORMAL
                var var5 = 1; // type is INT value type is INT
                return var5;
        }
    },

    jlStringtoString : function(thisRef) {
        var __label__ = null;
        var var1 = jlInteger.jlStringtoStringINT(thisRef.integerValue); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@219a01a5
        return var1;
    },

    INTintValue : function(thisRef) {
        var __label__ = null;
        return thisRef.integerValue;
    },

    classInitCheck : function() {
        if (!jlInteger.__initialized) {
            jlInteger.__initialized = true;
            var thePrototype = jlInteger.Create.prototype;
            thePrototype.instanceOf = jlInteger.instanceOf;
            thePrototype.ClassgetClass = jlInteger.ClassgetClass;
            thePrototype.INTintValue = jlInteger.INTintValue;
            thePrototype.jlStringtoString = jlInteger.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlInteger.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlInteger.INThashCode;
            jlNumber.classInitCheck();
            jiSerializable.classInitCheck();
            jlObject.classInitCheck();
            jlComparable.classInitCheck();
            jlInteger.VOIDclinit();
        }
    },

};

var jlNumber = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 16,
    __implementedTypes : [16,2,1],

    instanceOf : function(aType) {
        return jlNumber.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jlNumber;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    classInitCheck : function() {
        if (!jlNumber.__initialized) {
            jlNumber.__initialized = true;
            jlObject.classInitCheck();
            jiSerializable.classInitCheck();
        }
    },

};

var ojcVec2 = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 17,
    __implementedTypes : [17,2,1],
    $assertionsDisabled : false, // declared in org.jbox2d.common.Vec2

    Create : function() {
        this.x = 0; // declared in org.jbox2d.common.Vec2
        this.y = 0; // declared in org.jbox2d.common.Vec2
    },

    instanceOf : function(aType) {
        return ojcVec2.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcVec2;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcVec2.BOOLEANdesiredAssertionStatus(ojcVec2); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_9_13 : for(;;) switch (__label__) {
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_9_13;
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_9_13;
        }
        ojcVec2.$assertionsDisabled = var1;
        return;
    },

    VOIDinitFLOATFLOAT : function(thisRef,x,y) {
        var __label__ = null;
        thisRef.x = x;
        thisRef.y = y;
        return;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        ojcVec2.VOIDinitFLOATFLOAT(thisRef,0.0,0.0);
        return;
    },

    ojcVec2setojcVec2 : function(thisRef,v) {
        var __label__ = null;
        var var0 = v.x; // type is FLOAT value type is FLOAT
        thisRef.x = var0;
        var var1 = v.y; // type is FLOAT value type is FLOAT
        thisRef.y = var1;
        return thisRef;
    },

    BOOLEANisValid : function(thisRef) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var1 = jlFloat.BOOLEANisNaNFLOAT(thisRef.x); // type is BOOLEAN value type is BOOLEAN
            if ((var1 != 0)) {
                __label__ = 44;
                break $S_0;
            }
            __label__ = 10;
            }
        $M_44_10 : for(;;) switch (__label__) {
            case 10 :
            // NORMAL
                $S_10 : {
                // NORMAL
                    var var3 = jlFloat.BOOLEANisInfiniteFLOAT(thisRef.x); // type is BOOLEAN value type is BOOLEAN
                    if ((var3 != 0)) {
                        __label__ = 44;
                        continue $M_44_10;
                    }
                    }
                $S_20 : {
                // NORMAL
                    var var5 = jlFloat.BOOLEANisNaNFLOAT(thisRef.y); // type is BOOLEAN value type is BOOLEAN
                    if ((var5 != 0)) {
                        __label__ = 44;
                        continue $M_44_10;
                    }
                    }
                $S_30 : {
                // NORMAL
                    var var7 = jlFloat.BOOLEANisInfiniteFLOAT(thisRef.y); // type is BOOLEAN value type is BOOLEAN
                    if ((var7 != 0)) {
                        __label__ = 44;
                        continue $M_44_10;
                    }
                    }
                var var8 = 1; // type is INT value type is INT
                return var8;
            case 44 :
            // NORMAL
                var var8 = 0; // type is INT value type is INT
                return var8;
        }
    },

    VOIDsetZero : function(thisRef) {
        var __label__ = null;
        thisRef.x = 0.0;
        thisRef.y = 0.0;
        return;
    },

    ojcVec2setFLOATFLOAT : function(thisRef,x,y) {
        var __label__ = null;
        thisRef.x = x;
        thisRef.y = y;
        return thisRef;
    },

    ojcVec2mulLocalFLOAT : function(thisRef,a) {
        var __label__ = null;
        var var1 = (thisRef.x * a); // type is FLOAT value type is FLOAT
        thisRef.x = var1;
        var var3 = (thisRef.y * a); // type is FLOAT value type is FLOAT
        thisRef.y = var3;
        return thisRef;
    },

    ojcVec2addLocalojcVec2 : function(thisRef,v) {
        var __label__ = null;
        var var2 = (thisRef.x + v.x); // type is FLOAT value type is FLOAT
        thisRef.x = var2;
        var var5 = (thisRef.y + v.y); // type is FLOAT value type is FLOAT
        thisRef.y = var5;
        return thisRef;
    },

    FLOATdotojcVec2ojcVec2 : function(a,b) {
        var __label__ = null;
        return ((a.x * b.x) + (a.y * b.y));
    },

    ojcVec2subLocalojcVec2 : function(thisRef,v) {
        var __label__ = null;
        var var2 = (thisRef.x - v.x); // type is FLOAT value type is FLOAT
        thisRef.x = var2;
        var var5 = (thisRef.y - v.y); // type is FLOAT value type is FLOAT
        thisRef.y = var5;
        return thisRef;
    },

    VOIDcrossToOutUnsafeFLOATojcVec2ojcVec2 : function(s,a,out) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcVec2.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 19;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_19_6 : for(;;) switch (__label__) {
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    if ((out != a)) {
                        __label__ = 19;
                        continue $M_19_6;
                    }
                    }
                var var6 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var6);
                throw var6;
            case 19 :
            // NORMAL
                var var3 = ((-s) * a.y); // type is FLOAT value type is FLOAT
                out.x = var3;
                var var5 = (s * a.x); // type is FLOAT value type is FLOAT
                out.y = var5;
                return;
        }
    },

    FLOATcrossojcVec2ojcVec2 : function(a,b) {
        var __label__ = null;
        return ((a.x * b.y) - (a.y * b.x));
    },

    FLOATlengthSquared : function(thisRef) {
        var __label__ = null;
        return ((thisRef.x * thisRef.x) + (thisRef.y * thisRef.y));
    },

    VOIDcrossToOutUnsafeojcVec2FLOATojcVec2 : function(a,s,out) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcVec2.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 19;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_6_19 : for(;;) switch (__label__) {
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    if ((out != a)) {
                        __label__ = 19;
                        continue $M_6_19;
                    }
                    }
                var var1 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var1);
                throw var1;
            case 19 :
            // NORMAL
                var var3 = (s * a.y); // type is FLOAT value type is FLOAT
                out.x = var3;
                var var6 = ((-s) * a.x); // type is FLOAT value type is FLOAT
                out.y = var6;
                return;
        }
    },

    FLOATnormalize : function(thisRef) {
        var local_1_FLOAT = null; // type is FLOAT # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.FLOATlength(thisRef); // type is FLOAT value type is FLOAT
            local_1_FLOAT = var0; // type is FLOAT value type is FLOAT
            var var3 = local_1_FLOAT; // type is FLOAT value type is FLOAT
            if ((var3 >= 1.1920929E-7)) {
                break $S_0;
            }
            return 0.0;
            }
        var local_2_FLOAT = (1.0 / local_1_FLOAT); // type is FLOAT value type is FLOAT
        var var11 = (thisRef.x * local_2_FLOAT); // type is FLOAT value type is FLOAT
        thisRef.x = var11;
        var var14 = (thisRef.y * local_2_FLOAT); // type is FLOAT value type is FLOAT
        thisRef.y = var14;
        return local_1_FLOAT;
    },

    FLOATlength : function(thisRef) {
        var __label__ = null;
        var var7 = ojcMathUtils.FLOATsqrtFLOAT(((thisRef.x * thisRef.x) + (thisRef.y * thisRef.y))); // type is FLOAT value type is FLOAT
        return var7;
    },

    ojcVec2clone : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinitFLOATFLOAT(var0,thisRef.x,thisRef.y);
        return var0;
    },

    VOIDinitojcVec2 : function(thisRef,toCopy) {
        var __label__ = null;
        ojcVec2.VOIDinitFLOATFLOAT(thisRef,toCopy.x,toCopy.y);
        return;
    },

    ojcVec2subojcVec2 : function(thisRef,v) {
        var __label__ = null;
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinitFLOATFLOAT(var0,(thisRef.x - v.x),(thisRef.y - v.y));
        return var0;
    },

    ojcVec2negateLocal : function(thisRef) {
        var __label__ = null;
        var var1 = (-thisRef.x); // type is FLOAT value type is FLOAT
        thisRef.x = var1;
        var var3 = (-thisRef.y); // type is FLOAT value type is FLOAT
        thisRef.y = var3;
        return thisRef;
    },

    INThashCode : function(thisRef) {
        var __label__ = null;
        var local_1_INT = 31; // type is INT value type is INT
        var local_2_INT = 1; // type is INT value type is INT
        var var5 = (31 * local_2_INT); // type is INT value type is INT
        var var7 = jlFloat.INTfloatToIntBitsFLOAT(thisRef.x); // type is INT value type is INT
        var local_2_INT = (var5 + var7); // type is INT value type is INT
        var var11 = (31 * local_2_INT); // type is INT value type is INT
        var var13 = jlFloat.INTfloatToIntBitsFLOAT(thisRef.y); // type is INT value type is INT
        var local_2_INT = (var11 + var13); // type is INT value type is INT
        return local_2_INT;
    },

    BOOLEANequalsjlObject : function(thisRef,obj) {
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((thisRef != obj)) {
                break $S_0;
            }
            return 1;
            }
        $S_7 : {
        // NORMAL
            if (obj != null ) {
                break $S_7;
            }
            return 0;
            }
        $S_13 : {
        // NORMAL
            var var0 = thisRef.ClassgetClass(); // type is REFERENCE value type is REFERENCE
            var var1 = obj.ClassgetClass(); // type is REFERENCE value type is REFERENCE
            if ((var0 == var1)) {
                break $S_13;
            }
            return 0;
            }
        $S_26 : {
        // NORMAL
            local_2_REFERENCE = obj; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5f60c87e
            var var4 = jlFloat.INTfloatToIntBitsFLOAT(thisRef.x); // type is INT value type is INT
            var var7 = jlFloat.INTfloatToIntBitsFLOAT(local_2_REFERENCE.x); // type is INT value type is INT
            if ((var4 == var7)) {
                break $S_26;
            }
            return 0;
            }
        var var9 = jlFloat.INTfloatToIntBitsFLOAT(thisRef.y); // type is INT value type is INT
        var var12 = jlFloat.INTfloatToIntBitsFLOAT(local_2_REFERENCE.y); // type is INT value type is INT
        if ((var9 == var12)) {
            return 1;
        }
        return 0;
    },

    jlStringtoString : function(thisRef) {
        var __label__ = null;
        var var0 = new jlStringBuilder.Create(); // type is REFERENCE value type is REFERENCE
        jlStringBuilder.VOIDinit(var0);
        var var1 = var0.jlStringBuilderappendjlString(var0,bytecoder.stringpool[9]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@11d48e3e
        var var3 = var1.jlStringBuilderappendFLOAT(var1,thisRef.x); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4b5e327e
        var var4 = var3.jlStringBuilderappendjlString(var3,bytecoder.stringpool[10]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@705b8b69
        var var6 = var4.jlStringBuilderappendFLOAT(var4,thisRef.y); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@42c225e8
        var var7 = var6.jlStringBuilderappendjlString(var6,bytecoder.stringpool[11]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7752f6f0
        var var8 = var7.jlStringtoString(var7); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4d25f7a6
        return var8;
    },

    ojcVec2addLocalFLOATFLOAT : function(thisRef,x,y) {
        var __label__ = null;
        var var1 = (thisRef.x + x); // type is FLOAT value type is FLOAT
        thisRef.x = var1;
        var var3 = (thisRef.y + y); // type is FLOAT value type is FLOAT
        thisRef.y = var3;
        return thisRef;
    },

    classInitCheck : function() {
        if (!ojcVec2.__initialized) {
            ojcVec2.__initialized = true;
            var thePrototype = ojcVec2.Create.prototype;
            thePrototype.instanceOf = ojcVec2.instanceOf;
            thePrototype.ClassgetClass = ojcVec2.ClassgetClass;
            thePrototype.ojcVec2addLocalFLOATFLOAT = ojcVec2.ojcVec2addLocalFLOATFLOAT;
            thePrototype.jlStringtoString = ojcVec2.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = ojcVec2.BOOLEANequalsjlObject;
            thePrototype.INThashCode = ojcVec2.INThashCode;
            thePrototype.ojcVec2negateLocal = ojcVec2.ojcVec2negateLocal;
            thePrototype.ojcVec2subojcVec2 = ojcVec2.ojcVec2subojcVec2;
            thePrototype.ojcVec2clone = ojcVec2.ojcVec2clone;
            thePrototype.FLOATlength = ojcVec2.FLOATlength;
            thePrototype.FLOATnormalize = ojcVec2.FLOATnormalize;
            thePrototype.FLOATlengthSquared = ojcVec2.FLOATlengthSquared;
            thePrototype.ojcVec2subLocalojcVec2 = ojcVec2.ojcVec2subLocalojcVec2;
            thePrototype.ojcVec2addLocalojcVec2 = ojcVec2.ojcVec2addLocalojcVec2;
            thePrototype.ojcVec2mulLocalFLOAT = ojcVec2.ojcVec2mulLocalFLOAT;
            thePrototype.ojcVec2setFLOATFLOAT = ojcVec2.ojcVec2setFLOATFLOAT;
            thePrototype.VOIDsetZero = ojcVec2.VOIDsetZero;
            thePrototype.BOOLEANisValid = ojcVec2.BOOLEANisValid;
            thePrototype.ojcVec2setojcVec2 = ojcVec2.ojcVec2setojcVec2;
            jlObject.classInitCheck();
            jiSerializable.classInitCheck();
            ojcVec2.VOIDclinit();
        }
    },

};

var ojpnDefaultWorldPool = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 18,
    __implementedTypes : [18,19,1],
    $assertionsDisabled : false, // declared in org.jbox2d.pooling.normal.DefaultWorldPool

    Create : function() {
        this.afloats = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool
        this.aints = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool
        this.avecs = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool
        this.world = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool
        this.pcstack = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool
        this.ccstack = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool
        this.cpstack = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool
        this.ecstack = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool
        this.epstack = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool
        this.chcstack = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool
        this.chpstack = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool
        this.vecs = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool
        this.vec3s = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool
        this.mats = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool
        this.aabbs = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool
        this.rots = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool
        this.mat33s = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool
        this.dist = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool
        this.collision = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool
        this.toi = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool
    },

    instanceOf : function(aType) {
        return ojpnDefaultWorldPool.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojpnDefaultWorldPool;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojpnDefaultWorldPool.BOOLEANdesiredAssertionStatus(ojpnDefaultWorldPool); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_13_9 : for(;;) switch (__label__) {
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_13_9;
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_13_9;
        }
        ojpnDefaultWorldPool.$assertionsDisabled = var1;
        return;
    },

    VOIDinitINTINT : function(thisRef,argSize,argContainerSize) {
        var __label__ = null;
        var var0 = new juHashMap.Create(); // type is REFERENCE value type is REFERENCE
        juHashMap.VOIDinit(var0);
        thisRef.afloats = var0;
        var var1 = new juHashMap.Create(); // type is REFERENCE value type is REFERENCE
        juHashMap.VOIDinit(var1);
        thisRef.aints = var1;
        var var2 = new juHashMap.Create(); // type is REFERENCE value type is REFERENCE
        juHashMap.VOIDinit(var2);
        thisRef.avecs = var2;
        thisRef.world = thisRef;
        var var3 = new ojpnDefaultWorldPool$1.Create(); // type is REFERENCE value type is REFERENCE
        ojpnDefaultWorldPool$1.VOIDinitojpnDefaultWorldPoolINT(var3,thisRef,ojcSettings.CONTACT_STACK_INIT_SIZE);
        thisRef.pcstack = var3;
        var var5 = new ojpnDefaultWorldPool$2.Create(); // type is REFERENCE value type is REFERENCE
        ojpnDefaultWorldPool$2.VOIDinitojpnDefaultWorldPoolINT(var5,thisRef,ojcSettings.CONTACT_STACK_INIT_SIZE);
        thisRef.ccstack = var5;
        var var7 = new ojpnDefaultWorldPool$3.Create(); // type is REFERENCE value type is REFERENCE
        ojpnDefaultWorldPool$3.VOIDinitojpnDefaultWorldPoolINT(var7,thisRef,ojcSettings.CONTACT_STACK_INIT_SIZE);
        thisRef.cpstack = var7;
        var var9 = new ojpnDefaultWorldPool$4.Create(); // type is REFERENCE value type is REFERENCE
        ojpnDefaultWorldPool$4.VOIDinitojpnDefaultWorldPoolINT(var9,thisRef,ojcSettings.CONTACT_STACK_INIT_SIZE);
        thisRef.ecstack = var9;
        var var11 = new ojpnDefaultWorldPool$5.Create(); // type is REFERENCE value type is REFERENCE
        ojpnDefaultWorldPool$5.VOIDinitojpnDefaultWorldPoolINT(var11,thisRef,ojcSettings.CONTACT_STACK_INIT_SIZE);
        thisRef.epstack = var11;
        var var13 = new ojpnDefaultWorldPool$6.Create(); // type is REFERENCE value type is REFERENCE
        ojpnDefaultWorldPool$6.VOIDinitojpnDefaultWorldPoolINT(var13,thisRef,ojcSettings.CONTACT_STACK_INIT_SIZE);
        thisRef.chcstack = var13;
        var var15 = new ojpnDefaultWorldPool$7.Create(); // type is REFERENCE value type is REFERENCE
        ojpnDefaultWorldPool$7.VOIDinitojpnDefaultWorldPoolINT(var15,thisRef,ojcSettings.CONTACT_STACK_INIT_SIZE);
        thisRef.chpstack = var15;
        var var17 = new ojpnDefaultWorldPool$8.Create(); // type is REFERENCE value type is REFERENCE
        ojpnDefaultWorldPool$8.VOIDinitojpnDefaultWorldPoolINTINT(var17,thisRef,argSize,argContainerSize);
        thisRef.vecs = var17;
        var var18 = new ojpnDefaultWorldPool$9.Create(); // type is REFERENCE value type is REFERENCE
        ojpnDefaultWorldPool$9.VOIDinitojpnDefaultWorldPoolINTINT(var18,thisRef,argSize,argContainerSize);
        thisRef.vec3s = var18;
        var var19 = new ojpnDefaultWorldPool$10.Create(); // type is REFERENCE value type is REFERENCE
        ojpnDefaultWorldPool$10.VOIDinitojpnDefaultWorldPoolINTINT(var19,thisRef,argSize,argContainerSize);
        thisRef.mats = var19;
        var var20 = new ojpnDefaultWorldPool$11.Create(); // type is REFERENCE value type is REFERENCE
        ojpnDefaultWorldPool$11.VOIDinitojpnDefaultWorldPoolINTINT(var20,thisRef,argSize,argContainerSize);
        thisRef.aabbs = var20;
        var var21 = new ojpnDefaultWorldPool$12.Create(); // type is REFERENCE value type is REFERENCE
        ojpnDefaultWorldPool$12.VOIDinitojpnDefaultWorldPoolINTINT(var21,thisRef,argSize,argContainerSize);
        thisRef.rots = var21;
        var var22 = new ojpnDefaultWorldPool$13.Create(); // type is REFERENCE value type is REFERENCE
        ojpnDefaultWorldPool$13.VOIDinitojpnDefaultWorldPoolINTINT(var22,thisRef,argSize,argContainerSize);
        thisRef.mat33s = var22;
        var var23 = new ojcDistance.Create(); // type is REFERENCE value type is REFERENCE
        ojcDistance.VOIDinit(var23);
        thisRef.dist = var23;
        var var24 = new ojcCollision.Create(); // type is REFERENCE value type is REFERENCE
        ojcCollision.VOIDinitojpIWorldPool(var24,thisRef);
        thisRef.collision = var24;
        var var25 = new ojcTimeOfImpact.Create(); // type is REFERENCE value type is REFERENCE
        ojcTimeOfImpact.VOIDinitojpIWorldPool(var25,thisRef);
        thisRef.toi = var25;
        return;
    },

    ojpIDynamicStackgetCircleContactStack : function(thisRef) {
        var __label__ = null;
        return thisRef.ccstack;
    },

    ojpIDynamicStackgetPolyCircleContactStack : function(thisRef) {
        var __label__ = null;
        return thisRef.cpstack;
    },

    ojpIDynamicStackgetPolyContactStack : function(thisRef) {
        var __label__ = null;
        return thisRef.pcstack;
    },

    ojpIDynamicStackgetEdgeCircleContactStack : function(thisRef) {
        var __label__ = null;
        return thisRef.ecstack;
    },

    ojpIDynamicStackgetEdgePolyContactStack : function(thisRef) {
        var __label__ = null;
        return thisRef.epstack;
    },

    ojpIDynamicStackgetChainCircleContactStack : function(thisRef) {
        var __label__ = null;
        return thisRef.chcstack;
    },

    ojpIDynamicStackgetChainPolyContactStack : function(thisRef) {
        var __label__ = null;
        return thisRef.chpstack;
    },

    ojcVec2popVec2 : function(thisRef) {
        var __label__ = null;
        var var1 = thisRef.vecs.jlObjectpop(thisRef.vecs); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6fa953b6
        return var1;
    },

    VOIDpushVec2INT : function(thisRef,argNum) {
        var __label__ = null;
        thisRef.vecs.VOIDpushINT(thisRef.vecs,argNum);
        return;
    },

    ojcCollisiongetCollision : function(thisRef) {
        var __label__ = null;
        return thisRef.collision;
    },

    ojcDistancegetDistance : function(thisRef) {
        var __label__ = null;
        return thisRef.dist;
    },

    ojcTimeOfImpactgetTimeOfImpact : function(thisRef) {
        var __label__ = null;
        return thisRef.toi;
    },

    ojpIWorldPoolaccess$000ojpnDefaultWorldPool : function(x0) {
        var __label__ = null;
        return x0.world;
    },

    ojcRotpopRot : function(thisRef) {
        var __label__ = null;
        var var1 = thisRef.rots.jlObjectpop(thisRef.rots); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@30f45d6a
        return var1;
    },

    ojcMat22popMat22 : function(thisRef) {
        var __label__ = null;
        var var1 = thisRef.mats.jlObjectpop(thisRef.mats); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4fbbc2ac
        return var1;
    },

    VOIDpushMat22INT : function(thisRef,argNum) {
        var __label__ = null;
        thisRef.mats.VOIDpushINT(thisRef.mats,argNum);
        return;
    },

    VOIDpushRotINT : function(thisRef,num) {
        var __label__ = null;
        thisRef.rots.VOIDpushINT(thisRef.rots,num);
        return;
    },

    ojcVec3popVec3 : function(thisRef) {
        var __label__ = null;
        var var1 = thisRef.vec3s.jlObjectpop(thisRef.vec3s); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@350ba556
        return var1;
    },

    VOIDpushVec3INT : function(thisRef,argNum) {
        var __label__ = null;
        thisRef.vec3s.VOIDpushINT(thisRef.vec3s,argNum);
        return;
    },

    ojcMat33popMat33 : function(thisRef) {
        var __label__ = null;
        var var1 = thisRef.mat33s.jlObjectpop(thisRef.mat33s); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@9e12a14
        return var1;
    },

    VOIDpushMat33INT : function(thisRef,argNum) {
        var __label__ = null;
        thisRef.mat33s.VOIDpushINT(thisRef.mat33s,argNum);
        return;
    },

    A1ojcVec2getVec2ArrayINT : function(thisRef,argLength) {
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_3_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.avecs; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@d5577cf
            var var1 = jlInteger.jlIntegervalueOfINT(argLength); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7782c765
            var var2 = var0.BOOLEANcontainsKeyjlObject(var0,var1); // type is BOOLEAN value type is BOOLEAN
            if ((var2 != 0)) {
                __label__ = 55;
                break $S_0;
            }
            __label__ = 14;
            }
        $M_14_55 : for(;;) switch (__label__) {
            case 14 :
            // NORMAL
                $S_14 : {
                // NORMAL
                    local_2_REFERENCE = bytecoder.newArray(argLength,null); // type is REFERENCE value type is REFERENCE
                    local_3_INT = 0; // type is INT value type is INT
                    __label__ = 21;
                    }
                $L_21 : for (;;) {
                    $S_21 : {
                    // NORMAL
                        var var7 = local_3_INT; // type is INT value type is INT
                        if ((var7 >= argLength)) {
                            __label__ = 42;
                            break $S_21;
                        }
                        __label__ = 26;
                        }
                    for(;;) switch (__label__) {
                        case 26 :
                        // NORMAL
                            var var8 = local_2_REFERENCE; // type is REFERENCE value type is REFERENCE
                            var var9 = local_3_INT; // type is INT value type is INT
                            var var10 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
                            ojcVec2.VOIDinit(var10);
                            var8.data[var9] = var10;
                            local_3_INT = (local_3_INT + 1); // type is INT value type is INT
                            __label__ = 21;
                            continue $L_21;
                        case 42 :
                        // NORMAL
                            var var11 = thisRef.avecs; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5b325c08
                            var var12 = jlInteger.jlIntegervalueOfINT(argLength); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@718eff7a
                            var var14 = var11.jlObjectputjlObjectjlObject(var11,var12,local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@57c3058b
                            __label__ = 55;
                            continue $M_14_55;
                    }
                }
            case 55 :
            // NORMAL
                $S_55 : {
                // NORMAL
                    var var15 = ojpnDefaultWorldPool.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                    if ((var15 != 0)) {
                        __label__ = 90;
                        break $S_55;
                    }
                    __label__ = 61;
                    }
                $M_90_61 : for(;;) switch (__label__) {
                    case 90 :
                    // NORMAL
                        var var21 = thisRef.avecs; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@361b59f9
                        var var22 = jlInteger.jlIntegervalueOfINT(argLength); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7f00912e
                        var var23 = var21.jlObjectgetjlObject(var21,var22); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@79f3d49b
                        return var23;
                    case 61 :
                    // NORMAL
                        $S_61 : {
                        // NORMAL
                            var var16 = thisRef.avecs; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@36536973
                            var var17 = jlInteger.jlIntegervalueOfINT(argLength); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5a6b2ad1
                            var var18 = var16.jlObjectgetjlObject(var16,var17); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@21195953
                            var var19 = var18.data.length; // type is INT value type is INT
                            if ((var19 == argLength)) {
                                __label__ = 90;
                                continue $M_90_61;
                            }
                            }
                        var var20 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                        jlAssertionError.VOIDinitjlObject(var20,bytecoder.stringpool[12]);
                        throw var20;
                }
        }
    },

    classInitCheck : function() {
        if (!ojpnDefaultWorldPool.__initialized) {
            ojpnDefaultWorldPool.__initialized = true;
            var thePrototype = ojpnDefaultWorldPool.Create.prototype;
            thePrototype.instanceOf = ojpnDefaultWorldPool.instanceOf;
            thePrototype.ClassgetClass = ojpnDefaultWorldPool.ClassgetClass;
            thePrototype.A1ojcVec2getVec2ArrayINT = ojpnDefaultWorldPool.A1ojcVec2getVec2ArrayINT;
            thePrototype.VOIDpushMat33INT = ojpnDefaultWorldPool.VOIDpushMat33INT;
            thePrototype.ojcMat33popMat33 = ojpnDefaultWorldPool.ojcMat33popMat33;
            thePrototype.VOIDpushVec3INT = ojpnDefaultWorldPool.VOIDpushVec3INT;
            thePrototype.ojcVec3popVec3 = ojpnDefaultWorldPool.ojcVec3popVec3;
            thePrototype.VOIDpushRotINT = ojpnDefaultWorldPool.VOIDpushRotINT;
            thePrototype.VOIDpushMat22INT = ojpnDefaultWorldPool.VOIDpushMat22INT;
            thePrototype.ojcMat22popMat22 = ojpnDefaultWorldPool.ojcMat22popMat22;
            thePrototype.ojcRotpopRot = ojpnDefaultWorldPool.ojcRotpopRot;
            thePrototype.ojcTimeOfImpactgetTimeOfImpact = ojpnDefaultWorldPool.ojcTimeOfImpactgetTimeOfImpact;
            thePrototype.ojcDistancegetDistance = ojpnDefaultWorldPool.ojcDistancegetDistance;
            thePrototype.ojcCollisiongetCollision = ojpnDefaultWorldPool.ojcCollisiongetCollision;
            thePrototype.VOIDpushVec2INT = ojpnDefaultWorldPool.VOIDpushVec2INT;
            thePrototype.ojcVec2popVec2 = ojpnDefaultWorldPool.ojcVec2popVec2;
            thePrototype.ojpIDynamicStackgetChainPolyContactStack = ojpnDefaultWorldPool.ojpIDynamicStackgetChainPolyContactStack;
            thePrototype.ojpIDynamicStackgetChainCircleContactStack = ojpnDefaultWorldPool.ojpIDynamicStackgetChainCircleContactStack;
            thePrototype.ojpIDynamicStackgetEdgePolyContactStack = ojpnDefaultWorldPool.ojpIDynamicStackgetEdgePolyContactStack;
            thePrototype.ojpIDynamicStackgetEdgeCircleContactStack = ojpnDefaultWorldPool.ojpIDynamicStackgetEdgeCircleContactStack;
            thePrototype.ojpIDynamicStackgetPolyContactStack = ojpnDefaultWorldPool.ojpIDynamicStackgetPolyContactStack;
            thePrototype.ojpIDynamicStackgetPolyCircleContactStack = ojpnDefaultWorldPool.ojpIDynamicStackgetPolyCircleContactStack;
            thePrototype.ojpIDynamicStackgetCircleContactStack = ojpnDefaultWorldPool.ojpIDynamicStackgetCircleContactStack;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            ojpIWorldPool.classInitCheck();
            ojpnDefaultWorldPool.VOIDclinit();
        }
    },

};

var ojpIWorldPool = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 19,
    __implementedTypes : [19,1],


    classInitCheck : function() {
        if (!ojpIWorldPool.__initialized) {
            ojpIWorldPool.__initialized = true;
            jlObject.classInitCheck();
        }
    },

};

var juHashMap = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 20,
    __implementedTypes : [20,23,2,21,1,22],

    Create : function() {
        this.loadFactor = 0; // declared in java.util.HashMap
        this.table = null; // declared in java.util.HashMap
        this.threshold = 0; // declared in java.util.HashMap
        this.modCount = 0; // declared in java.util.HashMap
        this.size = 0; // declared in java.util.HashMap
        this.entrySet = null; // declared in java.util.HashMap
    },

    instanceOf : function(aType) {
        return juHashMap.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return juHashMap;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        juAbstractMap.VOIDinit(thisRef);
        thisRef.loadFactor = 0.75;
        return;
    },

    BOOLEANcontainsKeyjlObject : function(thisRef,key) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = juHashMap.INThashjlObject(key); // type is INT value type is INT
            var var1 = thisRef.juHashMap$NodegetNodeINTjlObject(thisRef,var0,key); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@765de2b2
            if (var1 == null ) {
                __label__ = 16;
                break $S_0;
            }
            __label__ = 12;
            }
        for(;;) switch (__label__) {
            case 12 :
            // NORMAL
                var var2 = 1; // type is INT value type is INT
                return var2;
            case 16 :
            // NORMAL
                var var2 = 0; // type is INT value type is INT
                return var2;
        }
    },

    INThashjlObject : function(key) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if (key != null ) {
                __label__ = 8;
                break $S_0;
            }
            __label__ = 4;
            }
        for(;;) switch (__label__) {
            case 4 :
            // NORMAL
                var var6 = 0; // type is INT value type is INT
                return var6;
            case 8 :
            // NORMAL
                var var0 = key.INThashCode(key); // type is INT value type is INT
                var local_1_INT = var0; // type is INT value type is INT
                var var6 = (var0 ^ (local_1_INT >>> 16)); // type is INT value type is INT
                return var6;
        }
    },

    juHashMap$NodegetNodeINTjlObject : function(thisRef,hash,key) {
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_6_INT = null; // type is INT # of inits = 1
        var local_7_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.table; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@71744adb
            local_3_REFERENCE = var0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@33730698
            if (var0 == null ) {
                return null;
            }
            }
        $S_9 : {
        // NORMAL
            var var3 = local_3_REFERENCE.data.length; // type is INT value type is INT
            local_6_INT = var3; // type is INT value type is INT
            if ((var3 <= 0)) {
                return null;
            }
            }
        $S_17 : {
        // NORMAL
            var var10 = local_3_REFERENCE.data[((local_6_INT - 1) & hash)]; // type is REFERENCE value type is REFERENCE
            local_4_REFERENCE = var10; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@71ef0890
            if (var10 == null ) {
                return null;
            }
            }
        $S_31 : {
        // NORMAL
            var var13 = local_4_REFERENCE.hash; // type is INT value type is INT
            if ((var13 != hash)) {
                __label__ = 68;
                break $S_31;
            }
            __label__ = 40;
            }
        $M_68_40 : for(;;) switch (__label__) {
            case 68 :
            // NORMAL
                $S_68 : {
                // NORMAL
                    var var20 = local_4_REFERENCE.next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@319a074e
                    local_5_REFERENCE = var20; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@28bfdaa9
                    if (var20 == null ) {
                        return null;
                    }
                    }
                $S_79 : {
                // NORMAL
                    var var23 = (local_4_REFERENCE == null ? false : local_4_REFERENCE.instanceOf(juHashMap$TreeNode)); // type is BOOLEAN value type is BOOLEAN
                    if ((var23 == 0)) {
                        __label__ = 98;
                        break $S_79;
                    }
                    __label__ = 87;
                    }
                $M_98_87 : for(;;) switch (__label__) {
                    case 87 :
                    // NORMAL
                        var var31 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@71ef0890
                        var var32 = var31.juHashMap$TreeNodegetTreeNodeINTjlObject(var31,hash,key); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2dbdecc6
                        return var32;
                    case 98 :
                    // NORMAL
                        for (;;) {
                            $S_98 : {
                            // NORMAL
                                var var25 = local_5_REFERENCE.hash; // type is INT value type is INT
                                if ((var25 != hash)) {
                                    __label__ = 135;
                                    break $S_98;
                                }
                                __label__ = 107;
                                }
                            $M_107_135 : for(;;) switch (__label__) {
                                case 107 :
                                // NORMAL
                                    $S_107 : {
                                    // NORMAL
                                        var var27 = local_5_REFERENCE.key; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7e4c5938
                                        local_7_REFERENCE = var27; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3535b9d
                                        if ((var27 == key)) {
                                            return local_5_REFERENCE;
                                        }
                                        }
                                    $S_119 : {
                                    // NORMAL
                                        if (key == null ) {
                                            __label__ = 135;
                                            continue $M_107_135;
                                        }
                                        }
                                    var var29 = key.BOOLEANequalsjlObject(key,local_7_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                    if ((var29 == 0)) {
                                        __label__ = 135;
                                        continue $M_107_135;
                                    }
                                    return local_5_REFERENCE;
                                case 135 :
                                // NORMAL
                                    var var34 = local_5_REFERENCE.next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1f0d91c8
                                    local_5_REFERENCE = var34; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@211deca6
                                    if (var34 != null ) {
                                        __label__ = 98;
                                        continue $M_98_87;
                                    }
                                    return null;
                            }
                        }
                }
            case 40 :
            // NORMAL
                $S_40 : {
                // NORMAL
                    var var15 = local_4_REFERENCE.key; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@11c953e8
                    local_7_REFERENCE = var15; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@27a9d59
                    if ((var15 == key)) {
                        return local_4_REFERENCE;
                    }
                    }
                $S_52 : {
                // NORMAL
                    if (key == null ) {
                        __label__ = 68;
                        continue $M_68_40;
                    }
                    }
                var var18 = key.BOOLEANequalsjlObject(key,local_7_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                if ((var18 == 0)) {
                    __label__ = 68;
                    continue $M_68_40;
                }
                return local_4_REFERENCE;
        }
    },

    jlClasscomparableClassForjlObject : function(x) {
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_8_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_1_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_7_INT = null; // type is INT # of inits = 3
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_6_INT = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = (x == null ? false : x.instanceOf(jlComparable)); // type is BOOLEAN value type is BOOLEAN
            if ((var0 == 0)) {
                return null;
            }
            }
        $S_7 : {
        // NORMAL
            var var1 = x.ClassgetClass(); // type is REFERENCE value type is REFERENCE
            local_1_REFERENCE = var1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3c68d07d
            if ((var1 != jlString)) {
                break $S_7;
            }
            return local_1_REFERENCE;
            }
        $S_20 : {
        // NORMAL
            var var4 = local_1_REFERENCE.A1jlrTypegetGenericInterfaces(local_1_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@2304938d
            local_2_REFERENCE = var4; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@7cc3d2db
            if (var4 == null ) {
                return null;
            }
            }
        $S_29 : {
        // NORMAL
            local_5_REFERENCE = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@7cc3d2db
            local_6_INT = local_5_REFERENCE.data.length; // type is INT value type is INT
            local_7_INT = 0; // type is INT value type is INT
            __label__ = 40;
            }
        $L_40 : for (;;) {
            $S_40 : {
            // NORMAL
                var var14 = local_7_INT; // type is INT value type is INT
                var var15 = local_6_INT; // type is INT value type is INT
                if ((var14 >= var15)) {
                    return null;
                }
                }
            $S_47 : {
            // NORMAL
                var var18 = local_5_REFERENCE.data[local_7_INT]; // type is REFERENCE value type is REFERENCE
                local_8_REFERENCE = var18; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3f2803b4
                var var21 = (local_8_REFERENCE == null ? false : local_8_REFERENCE.instanceOf(jlrParameterizedType)); // type is BOOLEAN value type is BOOLEAN
                if ((var21 == 0)) {
                    __label__ = 107;
                    break $S_47;
                }
                __label__ = 62;
                }
            $M_107_62 : for(;;) switch (__label__) {
                case 107 :
                // NORMAL
                    local_7_INT = (local_7_INT + 1); // type is INT value type is INT
                    __label__ = 40;
                    continue $L_40;
                case 62 :
                // NORMAL
                    $S_62 : {
                    // NORMAL
                        var var22 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3f2803b4
                        local_4_REFERENCE = var22; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3f2803b4
                        var var24 = var22.jlrTypegetRawType(var22); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@155776bb
                        if ((var24 != jlComparable)) {
                            __label__ = 107;
                            continue $M_107_62;
                        }
                        }
                    $S_80 : {
                    // NORMAL
                        var var26 = local_4_REFERENCE.A1jlrTypegetActualTypeArguments(local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3f1ac2ce
                        local_3_REFERENCE = var26; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@45b9c714
                        if (var26 == null ) {
                            __label__ = 107;
                            continue $M_107_62;
                        }
                        }
                    $S_92 : {
                    // NORMAL
                        var var29 = local_3_REFERENCE.data.length; // type is INT value type is INT
                        if ((var29 != 1)) {
                            __label__ = 107;
                            continue $M_107_62;
                        }
                        }
                    var var31 = local_3_REFERENCE.data[0]; // type is REFERENCE value type is REFERENCE
                    var var32 = local_1_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3c68d07d
                    if ((var31 != var32)) {
                        __label__ = 107;
                        continue $M_107_62;
                    }
                    return local_1_REFERENCE;
            }
        }
    },

    INTcompareComparablesjlClassjlObjectjlObject : function(kc,k,x) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if (x == null ) {
                __label__ = 12;
                break $S_0;
            }
            __label__ = 4;
            }
        $M_12_4 : for(;;) switch (__label__) {
            case 12 :
            // NORMAL
                var var2 = 0; // type is INT value type is INT
                return var2;
            case 4 :
            // NORMAL
                $S_4 : {
                // NORMAL
                    var var0 = x.ClassgetClass(); // type is REFERENCE value type is REFERENCE
                    if ((var0 == kc)) {
                        break $S_4;
                    }
                    __label__ = 12;
                    continue $M_12_4;
                    }
                var var1 = k.INTcompareTojlObject(k,x); // type is INT value type is INT
                var var2 = var1; // type is INT value type is INT
                return var2;
        }
    },

    jlObjectputjlObjectjlObject : function(thisRef,key,value) {
        var __label__ = null;
        var var0 = juHashMap.INThashjlObject(key); // type is INT value type is INT
        var var1 = thisRef.jlObjectputValINTjlObjectjlObjectBOOLEANBOOLEAN(thisRef,var0,key,value,0,1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@10b2afa0
        return var1;
    },

    jlObjectputValINTjlObjectjlObjectBOOLEANBOOLEAN : function(thisRef,hash,key,value,onlyIfAbsent,evict) {
        var local_11_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_12_INT = null; // type is INT # of inits = 3
        var local_8_INT = null; // type is INT # of inits = 2
        var local_12_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_7_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_10_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_9_INT = null; // type is INT # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.table; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@4ea17a84
            local_6_REFERENCE = var0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@16242c15
            if (var0 == null ) {
                __label__ = 19;
                break $S_0;
            }
            __label__ = 10;
            }
        $M_19_10 : for(;;) switch (__label__) {
            case 19 :
            // NORMAL
                var var6 = thisRef.A1juHashMap$Noderesize(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@75ed341
                local_6_REFERENCE = var6; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@753d9bcf
                local_8_INT = var6.data.length; // type is INT value type is INT
                break $M_19_10;
            case 10 :
            // NORMAL
                var var3 = local_6_REFERENCE.data.length; // type is INT value type is INT
                local_8_INT = var3; // type is INT value type is INT
                if ((var3 != 0)) {
                    break $M_19_10;
                }
                __label__ = 19;
                continue $M_19_10;
        }
        $S_29 : {
        // NORMAL
            var var9 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@16242c15
            var var12 = ((local_8_INT - 1) & hash); // type is INT value type is INT
            local_9_INT = var12; // type is INT value type is INT
            var var15 = var9.data[var12]; // type is REFERENCE value type is REFERENCE
            local_7_REFERENCE = var15; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3905e5b3
            if (var15 != null ) {
                __label__ = 63;
                break $S_29;
            }
            __label__ = 47;
            }
        $M_63_47 : for(;;) switch (__label__) {
            case 63 :
            // NORMAL
                $S_63 : {
                // NORMAL
                    var var18 = local_7_REFERENCE.hash; // type is INT value type is INT
                    if ((var18 != hash)) {
                        __label__ = 104;
                        break $S_63;
                    }
                    __label__ = 72;
                    }
                $M_104_72 : for(;;) switch (__label__) {
                    case 104 :
                    // NORMAL
                        $S_104 : {
                        // NORMAL
                            var var25 = (local_7_REFERENCE == null ? false : local_7_REFERENCE.instanceOf(juHashMap$TreeNode)); // type is BOOLEAN value type is BOOLEAN
                            if ((var25 == 0)) {
                                __label__ = 131;
                                break $S_104;
                            }
                            __label__ = 112;
                            }
                        for(;;) switch (__label__) {
                            case 131 :
                            // NORMAL
                                $S_131 : {
                                // NORMAL
                                    local_12_INT = 0; // type is INT value type is INT
                                    __label__ = 134;
                                    }
                                $L_134 : for (;;) {
                                    $S_134 : {
                                    // NORMAL
                                        var var29 = local_7_REFERENCE.next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4752e79d
                                        local_10_REFERENCE = var29; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7dbe89d5
                                        if (var29 != null ) {
                                            __label__ = 175;
                                            break $S_134;
                                        }
                                        __label__ = 145;
                                        }
                                    for(;;) switch (__label__) {
                                        case 175 :
                                        // NORMAL
                                            $S_175 : {
                                            // NORMAL
                                                var var32 = local_10_REFERENCE.hash; // type is INT value type is INT
                                                if ((var32 != hash)) {
                                                    __label__ = 212;
                                                    break $S_175;
                                                }
                                                __label__ = 184;
                                                }
                                            $M_184_212 : for(;;) switch (__label__) {
                                                case 212 :
                                                // NORMAL
                                                    local_7_REFERENCE = local_10_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7dbe89d5
                                                    local_12_INT = (local_12_INT + 1); // type is INT value type is INT
                                                    __label__ = 134;
                                                    continue $L_134;
                                                case 184 :
                                                // NORMAL
                                                    $S_184 : {
                                                    // NORMAL
                                                        var var34 = local_10_REFERENCE.key; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7096c54f
                                                        local_11_REFERENCE = var34; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@53374f86
                                                        if ((var34 == key)) {
                                                            break $M_104_72;
                                                        }
                                                        }
                                                    $S_196 : {
                                                    // NORMAL
                                                        if (key == null ) {
                                                            __label__ = 212;
                                                            continue $M_184_212;
                                                        }
                                                        }
                                                    $S_200 : {
                                                    // NORMAL
                                                        var var36 = key.BOOLEANequalsjlObject(key,local_11_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                                        if ((var36 == 0)) {
                                                            __label__ = 212;
                                                            continue $M_184_212;
                                                        }
                                                        }
                                                    break $M_104_72;
                                            }
                                        case 145 :
                                        // NORMAL
                                            $S_145 : {
                                            // NORMAL
                                                var var42 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3905e5b3
                                                var var43 = thisRef.juHashMap$NodenewNodeINTjlObjectjlObjectjuHashMap$Node(thisRef,hash,key,value,null); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@35a6f483
                                                var42.next = var43;
                                                var var44 = local_12_INT; // type is INT value type is INT
                                                if ((var44 < 7)) {
                                                    break $M_104_72;
                                                }
                                                }
                                            thisRef.VOIDtreeifyBinA1juHashMap$NodeINT(thisRef,local_6_REFERENCE,hash);
                                            break $M_104_72;
                                    }
                                }
                            case 112 :
                            // NORMAL
                                var var39 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3905e5b3
                                var var41 = var39.juHashMap$TreeNodeputTreeValjuHashMapA1juHashMap$NodeINTjlObjectjlObject(var39,thisRef,local_6_REFERENCE,hash,key,value); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4413fdad
                                local_10_REFERENCE = var41; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4509102e
                                break $M_104_72;
                        }
                    case 72 :
                    // NORMAL
                        $S_72 : {
                        // NORMAL
                            var var20 = local_7_REFERENCE.key; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@142d84bd
                            local_11_REFERENCE = var20; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4acd46f3
                            if ((var20 == key)) {
                                __label__ = 97;
                                break $S_72;
                            }
                            __label__ = 84;
                            }
                        $M_97_84 : for(;;) switch (__label__) {
                            case 84 :
                            // NORMAL
                                $S_84 : {
                                // NORMAL
                                    if (key == null ) {
                                        __label__ = 104;
                                        continue $M_104_72;
                                    }
                                    }
                                var var23 = key.BOOLEANequalsjlObject(key,local_11_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                if ((var23 == 0)) {
                                    __label__ = 104;
                                    continue $M_104_72;
                                }
                                __label__ = 97;
                                continue $M_97_84;
                            case 97 :
                            // NORMAL
                                local_10_REFERENCE = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3905e5b3
                                break $M_104_72;
                        }
                }
                $S_222 : {
                // NORMAL
                    var var46 = local_10_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7dbe89d5
                    if (var46 == null ) {
                        break $M_63_47;
                    }
                    }
                $S_227 : {
                // NORMAL
                    local_12_REFERENCE = local_10_REFERENCE.value; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@52d797ca
                    if ((onlyIfAbsent == 0)) {
                        __label__ = 244;
                        break $S_227;
                    }
                    __label__ = 239;
                    }
                $M_239_244 : for(;;) switch (__label__) {
                    case 244 :
                    // NORMAL
                        var var51 = local_10_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7dbe89d5
                        var51.value = value;
                        break $M_239_244;
                    case 239 :
                    // NORMAL
                        var var50 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6caaf4d8
                        if (var50 != null ) {
                            break $M_239_244;
                        }
                        __label__ = 244;
                        continue $M_239_244;
                }
                thisRef.VOIDafterNodeAccessjuHashMap$Node(thisRef,local_10_REFERENCE);
                return local_12_REFERENCE;
            case 47 :
            // NORMAL
                var var54 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@16242c15
                var var55 = local_9_INT; // type is INT value type is INT
                var var56 = thisRef.juHashMap$NodenewNodeINTjlObjectjlObjectjuHashMap$Node(thisRef,hash,key,value,null); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@505763ff
                var54.data[var55] = var56;
                break $M_63_47;
        }
        $S_259 : {
        // NORMAL
            var var58 = (thisRef.modCount + 1); // type is INT value type is INT
            thisRef.modCount = var58;
            var var60 = (thisRef.size + 1); // type is INT value type is INT
            thisRef.size = var60;
            var var61 = thisRef.threshold; // type is INT value type is INT
            if ((var60 <= var61)) {
                __label__ = 292;
                break $S_259;
            }
            __label__ = 287;
            }
        $M_287_292 : for(;;) switch (__label__) {
            case 287 :
            // NORMAL
                var var62 = thisRef.A1juHashMap$Noderesize(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@bf202cd
                __label__ = 292;
                continue $M_287_292;
            case 292 :
            // NORMAL
                thisRef.VOIDafterNodeInsertionBOOLEAN(thisRef,evict);
                return null;
        }
    },

    A1juHashMap$Noderesize : function(thisRef) {
        var var40 = null; // type is INT # of inits = 2
        var local_4_INT = null; // type is INT # of inits = 4
        var local_9_REFERENCE = null; // type is REFERENCE # of inits = 3
        var var5 = null; // type is INT # of inits = 2
        var local_13_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_1_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_12_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_7_INT = null; // type is INT # of inits = 4
        var local_2_INT = null; // type is INT # of inits = 3
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_8_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_6_FLOAT = null; // type is FLOAT # of inits = 1
        var local_5_INT = null; // type is INT # of inits = 4
        var local_10_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_11_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_3_INT = null; // type is INT # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_1_REFERENCE = thisRef.table; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@785f0e5
            var var2 = local_1_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@2dc65ff2
            if (var2 != null ) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_9_13 : for(;;) switch (__label__) {
            case 13 :
            // NORMAL
                var5 = local_1_REFERENCE.data.length; // type is INT value type is INT
                break $M_9_13;
            case 9 :
            // NORMAL
                var5 = 0; // type is INT value type is INT
                break $M_9_13;
        }
        $S_15 : {
        // NORMAL
            local_2_INT = var5; // type is INT value type is INT
            local_3_INT = thisRef.threshold; // type is INT value type is INT
            local_5_INT = 0; // type is INT value type is INT
            var var13 = local_2_INT; // type is INT value type is INT
            if ((var13 <= 0)) {
                __label__ = 67;
                break $S_15;
            }
            __label__ = 28;
            }
        $M_67_28 : for(;;) switch (__label__) {
            case 28 :
            // NORMAL
                $S_28 : {
                // NORMAL
                    var var18 = local_2_INT; // type is INT value type is INT
                    if ((var18 < 1073741824)) {
                        __label__ = 42;
                        break $S_28;
                    }
                    __label__ = 34;
                    }
                for(;;) switch (__label__) {
                    case 34 :
                    // NORMAL
                        thisRef.threshold = 2147483647;
                        return local_1_REFERENCE;
                    case 42 :
                    // NORMAL
                        $S_42 : {
                        // NORMAL
                            var var20 = (local_2_INT << 1); // type is INT value type is INT
                            local_4_INT = var20; // type is INT value type is INT
                            if ((var20 >= 1073741824)) {
                                break $M_67_28;
                            }
                            }
                        $S_53 : {
                        // NORMAL
                            var var22 = local_2_INT; // type is INT value type is INT
                            if ((var22 < 16)) {
                                break $M_67_28;
                            }
                            }
                        local_5_INT = (local_3_INT << 1); // type is INT value type is INT
                        break $M_67_28;
                }
            case 67 :
            // NORMAL
                $S_67 : {
                // NORMAL
                    var var14 = local_3_INT; // type is INT value type is INT
                    if ((var14 <= 0)) {
                        __label__ = 77;
                        break $S_67;
                    }
                    __label__ = 71;
                    }
                for(;;) switch (__label__) {
                    case 71 :
                    // NORMAL
                        local_4_INT = local_3_INT; // type is INT value type is INT
                        break $M_67_28;
                    case 77 :
                    // NORMAL
                        local_4_INT = 16; // type is INT value type is INT
                        local_5_INT = 12; // type is INT value type is INT
                        break $M_67_28;
                }
        }
        $S_85 : {
        // NORMAL
            var var28 = local_5_INT; // type is INT value type is INT
            if ((var28 != 0)) {
                __label__ = 125;
                break $S_85;
            }
            __label__ = 90;
            }
        $M_90_125 : for(;;) switch (__label__) {
            case 90 :
            // NORMAL
                $S_90 : {
                // NORMAL
                    local_6_FLOAT = (local_4_INT * thisRef.loadFactor); // type is FLOAT value type is FLOAT
                    var var35 = local_4_INT; // type is INT value type is INT
                    if ((var35 >= 1073741824)) {
                        __label__ = 121;
                        break $S_90;
                    }
                    __label__ = 107;
                    }
                $M_121_107 : for(;;) switch (__label__) {
                    case 121 :
                    // NORMAL
                        var40 = 2147483647; // type is INT value type is INT
                        break $M_121_107;
                    case 107 :
                    // NORMAL
                        $S_107 : {
                        // NORMAL
                            var var36 = local_6_FLOAT; // type is FLOAT value type is FLOAT
                            if ((var36 >= 1.07374182E9)) {
                                __label__ = 121;
                                continue $M_121_107;
                            }
                            }
                        var40 = Math.floor(local_6_FLOAT); // type is INT value type is INT
                        break $M_121_107;
                }
                local_5_INT = var40; // type is INT value type is INT
                __label__ = 125;
                continue $M_90_125;
            case 125 :
            // NORMAL
                $S_125 : {
                // NORMAL
                    var var42 = local_5_INT; // type is INT value type is INT
                    thisRef.threshold = var42;
                    local_6_REFERENCE = bytecoder.newArray(local_4_INT,null); // type is REFERENCE value type is REFERENCE
                    var var46 = local_6_REFERENCE; // type is REFERENCE value type is REFERENCE
                    thisRef.table = var46;
                    var var47 = local_1_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@2dc65ff2
                    if (var47 == null ) {
                        return local_6_REFERENCE;
                    }
                    }
                $S_148 : {
                // NORMAL
                    local_7_INT = 0; // type is INT value type is INT
                    __label__ = 151;
                    }
                $L_151 : for (;;) {
                    $S_151 : {
                    // NORMAL
                        var var50 = local_7_INT; // type is INT value type is INT
                        var var51 = local_2_INT; // type is INT value type is INT
                        if ((var50 >= var51)) {
                            return local_6_REFERENCE;
                        }
                        }
                    $S_157 : {
                    // NORMAL
                        var var54 = local_1_REFERENCE.data[local_7_INT]; // type is REFERENCE value type is REFERENCE
                        local_8_REFERENCE = var54; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@48c212e9
                        if (var54 == null ) {
                            __label__ = 347;
                            break $S_157;
                        }
                        __label__ = 167;
                        }
                    $M_347_167 : for(;;) switch (__label__) {
                        case 167 :
                        // NORMAL
                            $S_167 : {
                            // NORMAL
                                var var56 = local_1_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@2dc65ff2
                                var var57 = local_7_INT; // type is INT value type is INT
                                var56.data[var57] = null;
                                var var59 = local_8_REFERENCE.next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4e89e402
                                if (var59 != null ) {
                                    __label__ = 198;
                                    break $S_167;
                                }
                                __label__ = 180;
                                }
                            for(;;) switch (__label__) {
                                case 198 :
                                // NORMAL
                                    $S_198 : {
                                    // NORMAL
                                        var var61 = (local_8_REFERENCE == null ? false : local_8_REFERENCE.instanceOf(juHashMap$TreeNode)); // type is BOOLEAN value type is BOOLEAN
                                        if ((var61 == 0)) {
                                            __label__ = 223;
                                            break $S_198;
                                        }
                                        __label__ = 206;
                                        }
                                    for(;;) switch (__label__) {
                                        case 206 :
                                        // NORMAL
                                            var var103 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@48c212e9
                                            var103.VOIDsplitjuHashMapA1juHashMap$NodeINTINT(var103,thisRef,local_6_REFERENCE,local_7_INT,local_2_INT);
                                            __label__ = 347;
                                            continue $M_347_167;
                                        case 223 :
                                        // NORMAL
                                            $S_223 : {
                                            // NORMAL
                                                local_9_REFERENCE = null; // type is REFERENCE value type is REFERENCE
                                                local_10_REFERENCE = null; // type is REFERENCE value type is REFERENCE
                                                local_11_REFERENCE = null; // type is REFERENCE value type is REFERENCE
                                                local_12_REFERENCE = null; // type is REFERENCE value type is REFERENCE
                                                __label__ = 235;
                                                }
                                            $L_235 : for (;;) {
                                                $S_235 : {
                                                // NORMAL
                                                    local_13_REFERENCE = local_8_REFERENCE.next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@72109dac
                                                    var var72 = (local_8_REFERENCE.hash & local_2_INT); // type is INT value type is INT
                                                    if ((var72 != 0)) {
                                                        __label__ = 278;
                                                        break $S_235;
                                                    }
                                                    __label__ = 252;
                                                    }
                                                $M_252_278 : for(;;) switch (__label__) {
                                                    case 252 :
                                                    // NORMAL
                                                        $S_252 : {
                                                        // NORMAL
                                                            var var78 = local_10_REFERENCE; // type is REFERENCE value type is REFERENCE
                                                            if (var78 != null ) {
                                                                __label__ = 264;
                                                                break $S_252;
                                                            }
                                                            __label__ = 257;
                                                            }
                                                        $M_264_257 : for(;;) switch (__label__) {
                                                            case 257 :
                                                            // NORMAL
                                                                local_9_REFERENCE = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@48c212e9
                                                                break $M_264_257;
                                                            case 264 :
                                                            // NORMAL
                                                                var var79 = local_10_REFERENCE; // type is REFERENCE value type is REFERENCE
                                                                var var80 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@48c212e9
                                                                var79.next = var80;
                                                                break $M_264_257;
                                                        }
                                                        local_10_REFERENCE = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@48c212e9
                                                        break $M_252_278;
                                                    case 278 :
                                                    // NORMAL
                                                        $S_278 : {
                                                        // NORMAL
                                                            var var73 = local_12_REFERENCE; // type is REFERENCE value type is REFERENCE
                                                            if (var73 != null ) {
                                                                __label__ = 290;
                                                                break $S_278;
                                                            }
                                                            __label__ = 283;
                                                            }
                                                        $M_283_290 : for(;;) switch (__label__) {
                                                            case 283 :
                                                            // NORMAL
                                                                local_11_REFERENCE = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@48c212e9
                                                                break $M_283_290;
                                                            case 290 :
                                                            // NORMAL
                                                                var var75 = local_12_REFERENCE; // type is REFERENCE value type is REFERENCE
                                                                var var76 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@48c212e9
                                                                var75.next = var76;
                                                                break $M_283_290;
                                                        }
                                                        local_12_REFERENCE = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@48c212e9
                                                        break $M_252_278;
                                                }
                                                $S_301 : {
                                                // NORMAL
                                                    var var83 = local_13_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@541e5df0
                                                    local_8_REFERENCE = var83; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@541e5df0
                                                    if (var83 != null ) {
                                                        __label__ = 235;
                                                        continue $L_235;
                                                    }
                                                    }
                                                $S_309 : {
                                                // NORMAL
                                                    var var84 = local_10_REFERENCE; // type is REFERENCE value type is REFERENCE
                                                    if (var84 == null ) {
                                                        __label__ = 327;
                                                        break $S_309;
                                                    }
                                                    __label__ = 314;
                                                    }
                                                $M_327_314 : for(;;) switch (__label__) {
                                                    case 327 :
                                                    // NORMAL
                                                        $S_327 : {
                                                        // NORMAL
                                                            var var89 = local_12_REFERENCE; // type is REFERENCE value type is REFERENCE
                                                            if (var89 == null ) {
                                                                __label__ = 347;
                                                                continue $M_347_167;
                                                            }
                                                            }
                                                        var var97 = local_12_REFERENCE; // type is REFERENCE value type is REFERENCE
                                                        var97.next = null;
                                                        var var98 = local_6_REFERENCE; // type is REFERENCE value type is REFERENCE
                                                        var var101 = (local_7_INT + local_2_INT); // type is INT value type is INT
                                                        var var102 = local_11_REFERENCE; // type is REFERENCE value type is REFERENCE
                                                        var98.data[var101] = var102;
                                                        __label__ = 347;
                                                        continue $M_347_167;
                                                    case 314 :
                                                    // NORMAL
                                                        var var85 = local_10_REFERENCE; // type is REFERENCE value type is REFERENCE
                                                        var85.next = null;
                                                        var var86 = local_6_REFERENCE; // type is REFERENCE value type is REFERENCE
                                                        var var87 = local_7_INT; // type is INT value type is INT
                                                        var var88 = local_9_REFERENCE; // type is REFERENCE value type is REFERENCE
                                                        var86.data[var87] = var88;
                                                        __label__ = 327;
                                                        continue $M_327_314;
                                                }
                                            }
                                    }
                                case 180 :
                                // NORMAL
                                    var var90 = local_6_REFERENCE; // type is REFERENCE value type is REFERENCE
                                    var var95 = (local_8_REFERENCE.hash & (local_4_INT - 1)); // type is INT value type is INT
                                    var var96 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@48c212e9
                                    var90.data[var95] = var96;
                                    __label__ = 347;
                                    continue $M_347_167;
                            }
                        case 347 :
                        // NORMAL
                            local_7_INT = (local_7_INT + 1); // type is INT value type is INT
                            __label__ = 151;
                            continue $L_151;
                    }
                }
        }
    },

    juHashMap$NodereplacementNodejuHashMap$NodejuHashMap$Node : function(thisRef,p,next) {
        var __label__ = null;
        var var0 = new juHashMap$Node.Create(); // type is REFERENCE value type is REFERENCE
        juHashMap$Node.VOIDinitINTjlObjectjlObjectjuHashMap$Node(var0,p.hash,p.key,p.value,next);
        return var0;
    },

    juHashMap$NodenewNodeINTjlObjectjlObjectjuHashMap$Node : function(thisRef,hash,key,value,next) {
        var __label__ = null;
        var var0 = new juHashMap$Node.Create(); // type is REFERENCE value type is REFERENCE
        juHashMap$Node.VOIDinitINTjlObjectjlObjectjuHashMap$Node(var0,hash,key,value,next);
        return var0;
    },

    juHashMap$TreeNodenewTreeNodeINTjlObjectjlObjectjuHashMap$Node : function(thisRef,hash,key,value,next) {
        var __label__ = null;
        var var0 = new juHashMap$TreeNode.Create(); // type is REFERENCE value type is REFERENCE
        juHashMap$TreeNode.VOIDinitINTjlObjectjlObjectjuHashMap$Node(var0,hash,key,value,next);
        return var0;
    },

    VOIDtreeifyBinA1juHashMap$NodeINT : function(thisRef,tab,hash) {
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_8_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_3_INT = null; // type is INT # of inits = 1
        var local_7_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_4_INT = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if (tab == null ) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 4;
            }
        $M_13_4 : for(;;) switch (__label__) {
            case 4 :
            // NORMAL
                $S_4 : {
                // NORMAL
                    var var0 = tab.data.length; // type is INT value type is INT
                    local_3_INT = var0; // type is INT value type is INT
                    if ((var0 >= 64)) {
                        break $S_4;
                    }
                    __label__ = 13;
                    continue $M_13_4;
                    }
                $S_21 : {
                // NORMAL
                    var var5 = ((local_3_INT - 1) & hash); // type is INT value type is INT
                    local_4_INT = var5; // type is INT value type is INT
                    var var8 = tab.data[var5]; // type is REFERENCE value type is REFERENCE
                    local_5_REFERENCE = var8; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@19fa47ab
                    if (var8 == null ) {
                        return;
                    }
                    }
                $S_37 : {
                // NORMAL
                    local_6_REFERENCE = null; // type is REFERENCE value type is REFERENCE
                    local_7_REFERENCE = null; // type is REFERENCE value type is REFERENCE
                    __label__ = 43;
                    }
                $L_43 : for (;;) {
                    $S_43 : {
                    // NORMAL
                        var var13 = thisRef.juHashMap$TreeNodereplacementTreeNodejuHashMap$NodejuHashMap$Node(thisRef,local_5_REFERENCE,null); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@51954276
                        local_8_REFERENCE = var13; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@fae8058
                        var var15 = local_7_REFERENCE; // type is REFERENCE value type is REFERENCE
                        if (var15 != null ) {
                            __label__ = 64;
                            break $S_43;
                        }
                        __label__ = 57;
                        }
                    $M_57_64 : for(;;) switch (__label__) {
                        case 64 :
                        // NORMAL
                            var var17 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@fae8058
                            var var18 = local_7_REFERENCE; // type is REFERENCE value type is REFERENCE
                            var17.prev = var18;
                            var var19 = local_7_REFERENCE; // type is REFERENCE value type is REFERENCE
                            var var20 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@fae8058
                            var19.next = var20;
                            break $M_57_64;
                        case 57 :
                        // NORMAL
                            local_6_REFERENCE = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@fae8058
                            break $M_57_64;
                    }
                    $S_78 : {
                    // NORMAL
                        local_7_REFERENCE = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@fae8058
                        var var23 = local_5_REFERENCE.next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1e8d01a5
                        local_5_REFERENCE = var23; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5fbbe41a
                        if (var23 != null ) {
                            __label__ = 43;
                            continue $L_43;
                        }
                        }
                    $S_93 : {
                    // NORMAL
                        var var24 = local_4_INT; // type is INT value type is INT
                        var var25 = local_6_REFERENCE; // type is REFERENCE value type is REFERENCE
                        tab.data[var24] = var25;
                        if (var25 == null ) {
                            return;
                        }
                        }
                    local_6_REFERENCE.VOIDtreeifyA1juHashMap$Node(local_6_REFERENCE,tab);
                    return;
                }
            case 13 :
            // NORMAL
                var var27 = thisRef.A1juHashMap$Noderesize(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3bcf2712
                return;
        }
    },

    juHashMap$TreeNodereplacementTreeNodejuHashMap$NodejuHashMap$Node : function(thisRef,p,next) {
        var __label__ = null;
        var var0 = new juHashMap$TreeNode.Create(); // type is REFERENCE value type is REFERENCE
        juHashMap$TreeNode.VOIDinitINTjlObjectjlObjectjuHashMap$Node(var0,p.hash,p.key,p.value,next);
        return var0;
    },

    VOIDafterNodeAccessjuHashMap$Node : function(thisRef,p) {
        var __label__ = null;
        return;
    },

    VOIDafterNodeInsertionBOOLEAN : function(thisRef,evict) {
        var __label__ = null;
        return;
    },

    jlObjectgetjlObject : function(thisRef,key) {
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = juHashMap.INThashjlObject(key); // type is INT value type is INT
            var var1 = thisRef.juHashMap$NodegetNodeINTjlObject(thisRef,var0,key); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1b67461f
            local_2_REFERENCE = var1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@fa62225
            if (var1 != null ) {
                __label__ = 18;
                break $S_0;
            }
            __label__ = 14;
            }
        for(;;) switch (__label__) {
            case 14 :
            // NORMAL
                var var5 = null; // type is REFERENCE value type is REFERENCE
                return var5;
            case 18 :
            // NORMAL
                var var5 = local_2_REFERENCE.value; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4017394b
                return var5;
        }
    },

    juSetentrySet : function(thisRef) {
        var local_1_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.entrySet; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7c16aff1
            local_1_REFERENCE = var0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@73d89d0c
            if (var0 != null ) {
                __label__ = 25;
                break $S_0;
            }
            __label__ = 9;
            }
        for(;;) switch (__label__) {
            case 9 :
            // NORMAL
                var var3 = new juHashMap$EntrySet.Create(); // type is REFERENCE value type is REFERENCE
                juHashMap$EntrySet.VOIDinitjuHashMap(var3,thisRef);
                thisRef.entrySet = var3;
                var var4 = var3; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@33c3012
                return var4;
            case 25 :
            // NORMAL
                var var4 = local_1_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@73d89d0c
                return var4;
        }
    },

    INTsize : function(thisRef) {
        var __label__ = null;
        return thisRef.size;
    },

    classInitCheck : function() {
        if (!juHashMap.__initialized) {
            juHashMap.__initialized = true;
            var thePrototype = juHashMap.Create.prototype;
            thePrototype.instanceOf = juHashMap.instanceOf;
            thePrototype.ClassgetClass = juHashMap.ClassgetClass;
            thePrototype.INTsize = juHashMap.INTsize;
            thePrototype.juSetentrySet = juHashMap.juSetentrySet;
            thePrototype.jlObjectgetjlObject = juHashMap.jlObjectgetjlObject;
            thePrototype.VOIDafterNodeInsertionBOOLEAN = juHashMap.VOIDafterNodeInsertionBOOLEAN;
            thePrototype.VOIDafterNodeAccessjuHashMap$Node = juHashMap.VOIDafterNodeAccessjuHashMap$Node;
            thePrototype.juHashMap$TreeNodereplacementTreeNodejuHashMap$NodejuHashMap$Node = juHashMap.juHashMap$TreeNodereplacementTreeNodejuHashMap$NodejuHashMap$Node;
            thePrototype.VOIDtreeifyBinA1juHashMap$NodeINT = juHashMap.VOIDtreeifyBinA1juHashMap$NodeINT;
            thePrototype.juHashMap$TreeNodenewTreeNodeINTjlObjectjlObjectjuHashMap$Node = juHashMap.juHashMap$TreeNodenewTreeNodeINTjlObjectjlObjectjuHashMap$Node;
            thePrototype.juHashMap$NodenewNodeINTjlObjectjlObjectjuHashMap$Node = juHashMap.juHashMap$NodenewNodeINTjlObjectjlObjectjuHashMap$Node;
            thePrototype.juHashMap$NodereplacementNodejuHashMap$NodejuHashMap$Node = juHashMap.juHashMap$NodereplacementNodejuHashMap$NodejuHashMap$Node;
            thePrototype.A1juHashMap$Noderesize = juHashMap.A1juHashMap$Noderesize;
            thePrototype.jlObjectputValINTjlObjectjlObjectBOOLEANBOOLEAN = juHashMap.jlObjectputValINTjlObjectjlObjectBOOLEANBOOLEAN;
            thePrototype.jlObjectputjlObjectjlObject = juHashMap.jlObjectputjlObjectjlObject;
            thePrototype.juHashMap$NodegetNodeINTjlObject = juHashMap.juHashMap$NodegetNodeINTjlObject;
            thePrototype.BOOLEANcontainsKeyjlObject = juHashMap.BOOLEANcontainsKeyjlObject;
            thePrototype.jlStringtoString = juAbstractMap.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = juAbstractMap.BOOLEANequalsjlObject;
            thePrototype.INThashCode = juAbstractMap.INThashCode;
            juAbstractMap.classInitCheck();
            jlCloneable.classInitCheck();
            jiSerializable.classInitCheck();
            jlObject.classInitCheck();
            juMap.classInitCheck();
        }
    },

};

var juAbstractMap = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 21,
    __implementedTypes : [21,1,22],

    instanceOf : function(aType) {
        return juAbstractMap.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return juAbstractMap;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    INThashCode : function(thisRef) {
        var local_1_INT = null; // type is INT # of inits = 3
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_1_INT = 0; // type is INT value type is INT
            var var2 = thisRef.juSetentrySet(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7c05e04c
            var var3 = var2.juIteratoriterator(var2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2bdd6db8
            local_2_REFERENCE = var3; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3ed1fccd
            __label__ = 12;
            }
        $L_12 : for (;;) {
            $S_12 : {
            // NORMAL
                var var6 = local_2_REFERENCE.BOOLEANhasNext(local_2_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                if ((var6 == 0)) {
                    return local_1_INT;
                }
                }
            var var8 = local_2_REFERENCE.jlObjectnext(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@67a01501
            var local_3_REFERENCE = var8; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1b1673da
            var var10 = local_1_INT; // type is INT value type is INT
            var var12 = local_3_REFERENCE.INThashCode(local_3_REFERENCE); // type is INT value type is INT
            local_1_INT = (var10 + var12); // type is INT value type is INT
            __label__ = 12;
            continue $L_12;
        }
    },

    BOOLEANequalsjlObject : function(thisRef,o) {
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 4
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((o != thisRef)) {
                break $S_0;
            }
            return 1;
            }
        $S_7 : {
        // NORMAL
            var var0 = (o == null ? false : o.instanceOf(juMap)); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                break $S_7;
            }
            return 0;
            }
        $S_16 : {
        // NORMAL
            local_2_REFERENCE = o; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@182f2116
            var var3 = local_2_REFERENCE.INTsize(local_2_REFERENCE); // type is INT value type is INT
            var var4 = thisRef.INTsize(thisRef); // type is INT value type is INT
            if ((var3 == var4)) {
                break $S_16;
            }
            return 0;
            }
        try {
            $S_36 : {
            // NORMAL
                var var5 = thisRef.juSetentrySet(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@60e6a4cb
                var var6 = var5.juIteratoriterator(var5); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1b92c9c1
                local_3_REFERENCE = var6; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@514a7d68
                __label__ = 46;
                }
        } catch (e) {
            dmbcExceptionManager.VOIDpushjlThrowable(e);
            if (e.instanceOf(jlClassCastException)) {
                __label__ = 137;
            } else if (e.instanceOf(jlNullPointerException)) {
                __label__ = 140;
            } else {
                throw dmbcExceptionManager.jlThrowablepop();
            }
        }
        $M_140_46_137 : for(;;) switch (__label__) {
            case 137 :
            // EXCEPTION_HANDLER
                var local_0_REFERENCE = thisRef; // type is REFERENCE value type is REFERENCE
                var var33 = dmbcExceptionManager.jlThrowablepop(); // type is REFERENCE value type is REFERENCE
                local_3_REFERENCE = var33; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@77168c32
                return 0;
            case 46 :
            // NORMAL
                for (;;) {
                    try {
                        $S_46 : {
                        // NORMAL
                            var var9 = local_3_REFERENCE.BOOLEANhasNext(local_3_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                            if ((var9 == 0)) {
                                __label__ = 134;
                                break $S_46;
                            }
                            __label__ = 55;
                            }
                    } catch (e) {
                        dmbcExceptionManager.VOIDpushjlThrowable(e);
                        if (e.instanceOf(jlClassCastException)) {
                            __label__ = 137;
                            continue $M_140_46_137;
                        } else if (e.instanceOf(jlNullPointerException)) {
                            __label__ = 140;
                            continue $M_140_46_137;
                        } else {
                            throw dmbcExceptionManager.jlThrowablepop();
                        }
                    }
                    for(;;) switch (__label__) {
                        case 55 :
                        // NORMAL
                            try {
                                $S_55 : {
                                // NORMAL
                                    var var11 = local_3_REFERENCE.jlObjectnext(local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@211c4db7
                                    var local_4_REFERENCE = var11; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@740965a3
                                    var var14 = local_4_REFERENCE.jlObjectgetKey(local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@79587622
                                    local_5_REFERENCE = var14; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@16d03457
                                    var var17 = local_4_REFERENCE.jlObjectgetValue(local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@127a4fa3
                                    local_6_REFERENCE = var17; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1473bad8
                                    var var19 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1473bad8
                                    if (var19 != null ) {
                                        __label__ = 113;
                                        break $S_55;
                                    }
                                    __label__ = 89;
                                    }
                            } catch (e) {
                                dmbcExceptionManager.VOIDpushjlThrowable(e);
                                if (e.instanceOf(jlClassCastException)) {
                                    __label__ = 137;
                                    continue $M_140_46_137;
                                } else if (e.instanceOf(jlNullPointerException)) {
                                    __label__ = 140;
                                    continue $M_140_46_137;
                                } else {
                                    throw dmbcExceptionManager.jlThrowablepop();
                                }
                            }
                            $M_89_113 : for(;;) switch (__label__) {
                                case 89 :
                                // NORMAL
                                    try {
                                        $S_89 : {
                                        // NORMAL
                                            var var22 = local_2_REFERENCE.jlObjectgetjlObject(local_2_REFERENCE,local_5_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5148d9ae
                                            if (var22 != null ) {
                                                return 0;
                                            }
                                            }
                                    } catch (e) {
                                        dmbcExceptionManager.VOIDpushjlThrowable(e);
                                        if (e.instanceOf(jlClassCastException)) {
                                            __label__ = 137;
                                            continue $M_140_46_137;
                                        } else if (e.instanceOf(jlNullPointerException)) {
                                            __label__ = 140;
                                            continue $M_140_46_137;
                                        } else {
                                            throw dmbcExceptionManager.jlThrowablepop();
                                        }
                                    }
                                    try {
                                        var var25 = local_2_REFERENCE.BOOLEANcontainsKeyjlObject(local_2_REFERENCE,local_5_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                        if ((var25 != 0)) {
                                            break $M_89_113;
                                        }
                                        return 0;
                                    } catch (e) {
                                        dmbcExceptionManager.VOIDpushjlThrowable(e);
                                        if (e.instanceOf(jlNullPointerException)) {
                                            __label__ = 140;
                                            continue $M_140_46_137;
                                        } else if (e.instanceOf(jlClassCastException)) {
                                            __label__ = 137;
                                            continue $M_140_46_137;
                                        } else {
                                            throw dmbcExceptionManager.jlThrowablepop();
                                        }
                                    }
                                case 113 :
                                // NORMAL
                                    try {
                                        var var26 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1473bad8
                                        var var29 = local_2_REFERENCE.jlObjectgetjlObject(local_2_REFERENCE,local_5_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6e539a59
                                        var var30 = var26.BOOLEANequalsjlObject(var26,var29); // type is BOOLEAN value type is BOOLEAN
                                        if ((var30 != 0)) {
                                            break $M_89_113;
                                        }
                                        return 0;
                                    } catch (e) {
                                        dmbcExceptionManager.VOIDpushjlThrowable(e);
                                        if (e.instanceOf(jlClassCastException)) {
                                            __label__ = 137;
                                            continue $M_140_46_137;
                                        } else if (e.instanceOf(jlNullPointerException)) {
                                            __label__ = 140;
                                            continue $M_140_46_137;
                                        } else {
                                            throw dmbcExceptionManager.jlThrowablepop();
                                        }
                                    }
                            }
                            try {
                                __label__ = 46;
                                continue $M_140_46_137;
                            } catch (e) {
                                dmbcExceptionManager.VOIDpushjlThrowable(e);
                                if (e.instanceOf(jlNullPointerException)) {
                                    __label__ = 140;
                                    continue $M_140_46_137;
                                } else if (e.instanceOf(jlClassCastException)) {
                                    __label__ = 137;
                                    continue $M_140_46_137;
                                } else {
                                    throw dmbcExceptionManager.jlThrowablepop();
                                }
                            }
                        case 134 :
                        // NORMAL
                            return 1;
                    }
                }
            case 140 :
            // EXCEPTION_HANDLER
                var local_0_REFERENCE = thisRef; // type is REFERENCE value type is REFERENCE
                var var32 = dmbcExceptionManager.jlThrowablepop(); // type is REFERENCE value type is REFERENCE
                local_3_REFERENCE = var32; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@48df4d4c
                return 0;
        }
    },

    INTsize : function(thisRef) {
        var __label__ = null;
        var var0 = thisRef.juSetentrySet(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7126af5d
        var var1 = var0.INTsize(var0); // type is INT value type is INT
        return var1;
    },

    jlStringtoString : function(thisRef) {
        var local_1_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 1
        var var21 = null; // type is REFERENCE # of inits = 2
        var var18 = null; // type is REFERENCE # of inits = 1
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var var25 = null; // type is REFERENCE # of inits = 1
        var var28 = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.juSetentrySet(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2b3f7953
            var var1 = var0.juIteratoriterator(var0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@670e0542
            local_1_REFERENCE = var1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@33017e55
            var var4 = local_1_REFERENCE.BOOLEANhasNext(local_1_REFERENCE); // type is BOOLEAN value type is BOOLEAN
            if ((var4 != 0)) {
                break $S_0;
            }
            return bytecoder.stringpool[13];
            }
        $S_22 : {
        // NORMAL
            var var5 = new jlStringBuilder.Create(); // type is REFERENCE value type is REFERENCE
            jlStringBuilder.VOIDinit(var5);
            local_2_REFERENCE = var5; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@56208fca
            var var8 = local_2_REFERENCE.jlStringBuilderappendCHAR(local_2_REFERENCE,123); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@570ef6fe
            __label__ = 37;
            }
        $L_37 : for (;;) {
            $S_37 : {
            // NORMAL
                var var10 = local_1_REFERENCE.jlObjectnext(local_1_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@15e85213
                var local_3_REFERENCE = var10; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@454d541c
                var var13 = local_3_REFERENCE.jlObjectgetKey(local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@527e7de2
                local_4_REFERENCE = var13; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@424381fe
                var var16 = local_3_REFERENCE.jlObjectgetValue(local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@72e7d855
                local_5_REFERENCE = var16; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1f6b7e2b
                var18 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@56208fca
                var var19 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@424381fe
                if ((var19 != thisRef)) {
                    __label__ = 75;
                    break $S_37;
                }
                __label__ = 70;
                }
            $M_70_75 : for(;;) switch (__label__) {
                case 70 :
                // NORMAL
                    var21 = bytecoder.stringpool[14]; // type is REFERENCE value type is REFERENCE
                    break $M_70_75;
                case 75 :
                // NORMAL
                    var21 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@424381fe
                    break $M_70_75;
            }
            $S_77 : {
            // NORMAL
                var var22 = var18.jlStringBuilderappendjlObject(var18,var21); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@254874d0
                var var24 = local_2_REFERENCE.jlStringBuilderappendCHAR(local_2_REFERENCE,61); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@a0a29d1
                var25 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@56208fca
                var var26 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1f6b7e2b
                if ((var26 != thisRef)) {
                    __label__ = 100;
                    break $S_77;
                }
                __label__ = 95;
                }
            $M_95_100 : for(;;) switch (__label__) {
                case 95 :
                // NORMAL
                    var28 = bytecoder.stringpool[14]; // type is REFERENCE value type is REFERENCE
                    break $M_95_100;
                case 100 :
                // NORMAL
                    var28 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1f6b7e2b
                    break $M_95_100;
            }
            $S_102 : {
            // NORMAL
                var var29 = var25.jlStringBuilderappendjlObject(var25,var28); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2bbac41f
                var var31 = local_1_REFERENCE.BOOLEANhasNext(local_1_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                if ((var31 != 0)) {
                    __label__ = 125;
                    break $S_102;
                }
                __label__ = 115;
                }
            for(;;) switch (__label__) {
                case 125 :
                // NORMAL
                    var var36 = local_2_REFERENCE.jlStringBuilderappendCHAR(local_2_REFERENCE,44); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6753844d
                    var var37 = var36.jlStringBuilderappendCHAR(var36,32); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1db9283
                    __label__ = 37;
                    continue $L_37;
                case 115 :
                // NORMAL
                    var var33 = local_2_REFERENCE.jlStringBuilderappendCHAR(local_2_REFERENCE,125); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5a4477c8
                    var var34 = var33.jlStringtoString(var33); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@27a3caa3
                    return var34;
            }
        }
    },

    BOOLEANcontainsKeyjlObject : function(thisRef,key) {
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.juSetentrySet(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@380ec504
            var var1 = var0.juIteratoriterator(var0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1e50e42f
            local_2_REFERENCE = var1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6e1c9db9
            if (key != null ) {
                __label__ = 47;
                break $S_0;
            }
            __label__ = 14;
            }
        $M_47_14 : for(;;) switch (__label__) {
            case 14 :
            // NORMAL
                for (;;) {
                    $S_14 : {
                    // NORMAL
                        var var12 = local_2_REFERENCE.BOOLEANhasNext(local_2_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                        if ((var12 == 0)) {
                            return 0;
                        }
                        }
                    $S_23 : {
                    // NORMAL
                        var var14 = local_2_REFERENCE.jlObjectnext(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6dd26c34
                        var local_3_REFERENCE = var14; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@68bfe88e
                        var var16 = local_3_REFERENCE.jlObjectgetKey(local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@26573678
                        if (var16 != null ) {
                            break $S_23;
                        }
                        return 1;
                        }
                    __label__ = 14;
                    continue $M_47_14;
                }
            case 47 :
            // NORMAL
                for (;;) {
                    $S_47 : {
                    // NORMAL
                        var var4 = local_2_REFERENCE.BOOLEANhasNext(local_2_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                        if ((var4 == 0)) {
                            return 0;
                        }
                        }
                    $S_56 : {
                    // NORMAL
                        var var6 = local_2_REFERENCE.jlObjectnext(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3fbfdf01
                        var local_3_REFERENCE = var6; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@41f2b70e
                        var var9 = local_3_REFERENCE.jlObjectgetKey(local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@561edc26
                        var var10 = key.BOOLEANequalsjlObject(key,var9); // type is BOOLEAN value type is BOOLEAN
                        if ((var10 == 0)) {
                            break $S_56;
                        }
                        return 1;
                        }
                    __label__ = 47;
                    continue $M_47_14;
                }
        }
    },

    jlObjectputjlObjectjlObject : function(thisRef,key,value) {
        var __label__ = null;
        var var0 = new jlUnsupportedOperationException.Create(); // type is REFERENCE value type is REFERENCE
        jlUnsupportedOperationException.VOIDinit(var0);
        throw var0;
    },

    jlObjectgetjlObject : function(thisRef,key) {
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.juSetentrySet(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@335feacd
            var var1 = var0.juIteratoriterator(var0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2591f03e
            local_2_REFERENCE = var1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2340c75a
            if (key != null ) {
                __label__ = 52;
                break $S_0;
            }
            __label__ = 14;
            }
        $M_14_52 : for(;;) switch (__label__) {
            case 14 :
            // NORMAL
                for (;;) {
                    $S_14 : {
                    // NORMAL
                        var var12 = local_2_REFERENCE.BOOLEANhasNext(local_2_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                        if ((var12 == 0)) {
                            return null;
                        }
                        }
                    $S_23 : {
                    // NORMAL
                        var var14 = local_2_REFERENCE.jlObjectnext(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3c1f210f
                        local_3_REFERENCE = var14; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1b830920
                        var var16 = local_3_REFERENCE.jlObjectgetKey(local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7d043053
                        if (var16 != null ) {
                            __label__ = 49;
                            break $S_23;
                        }
                        __label__ = 42;
                        }
                    for(;;) switch (__label__) {
                        case 49 :
                        // NORMAL
                            __label__ = 14;
                            continue $M_14_52;
                        case 42 :
                        // NORMAL
                            var var20 = local_3_REFERENCE.jlObjectgetValue(local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@31c1a4bc
                            return var20;
                    }
                }
            case 52 :
            // NORMAL
                for (;;) {
                    $S_52 : {
                    // NORMAL
                        var var4 = local_2_REFERENCE.BOOLEANhasNext(local_2_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                        if ((var4 == 0)) {
                            return null;
                        }
                        }
                    $S_61 : {
                    // NORMAL
                        var var6 = local_2_REFERENCE.jlObjectnext(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1b7bb2ba
                        local_3_REFERENCE = var6; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7054eb79
                        var var9 = local_3_REFERENCE.jlObjectgetKey(local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5e29ef83
                        var var10 = key.BOOLEANequalsjlObject(key,var9); // type is BOOLEAN value type is BOOLEAN
                        if ((var10 == 0)) {
                            __label__ = 91;
                            break $S_61;
                        }
                        __label__ = 84;
                        }
                    for(;;) switch (__label__) {
                        case 84 :
                        // NORMAL
                            var var18 = local_3_REFERENCE.jlObjectgetValue(local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@273dabd
                            return var18;
                        case 91 :
                        // NORMAL
                            __label__ = 52;
                            continue $M_14_52;
                    }
                }
        }
    },

    classInitCheck : function() {
        if (!juAbstractMap.__initialized) {
            juAbstractMap.__initialized = true;
            jlObject.classInitCheck();
            juMap.classInitCheck();
        }
    },

};

var juMap = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 22,
    __implementedTypes : [1,22],


    classInitCheck : function() {
        if (!juMap.__initialized) {
            juMap.__initialized = true;
            jlObject.classInitCheck();
        }
    },

};

var jlCloneable = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 23,
    __implementedTypes : [23,1],


    classInitCheck : function() {
        if (!jlCloneable.__initialized) {
            jlCloneable.__initialized = true;
            jlObject.classInitCheck();
        }
    },

};

var ojpnDefaultWorldPool$1 = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 24,
    __implementedTypes : [26,24,25,1],
    $assertionsDisabled : false, // declared in org.jbox2d.pooling.normal.MutableStack

    Create : function() {
        this.index = 0; // declared in org.jbox2d.pooling.normal.MutableStack
        this.stack = null; // declared in org.jbox2d.pooling.normal.MutableStack
        this.size = 0; // declared in org.jbox2d.pooling.normal.MutableStack
        this.this$0 = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool$1
    },

    instanceOf : function(aType) {
        return ojpnDefaultWorldPool$1.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojpnDefaultWorldPool$1;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitojpnDefaultWorldPoolINT : function(thisRef,p1,x0) {
        var __label__ = null;
        thisRef.this$0 = p1;
        ojpnMutableStack.VOIDinitINT(thisRef,x0);
        return;
    },

    jlObjectnewInstance : function(thisRef) {
        var __label__ = null;
        var var0 = thisRef.ojdcContactnewInstance(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@33cd7adf
        return var0;
    },

    ojdcContactnewInstance : function(thisRef) {
        var __label__ = null;
        var var0 = new ojdcPolygonContact.Create(); // type is REFERENCE value type is REFERENCE
        var var2 = ojpnDefaultWorldPool.ojpIWorldPoolaccess$000ojpnDefaultWorldPool(thisRef.this$0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@499de45
        ojdcPolygonContact.VOIDinitojpIWorldPool(var0,var2);
        return var0;
    },

    classInitCheck : function() {
        if (!ojpnDefaultWorldPool$1.__initialized) {
            ojpnDefaultWorldPool$1.__initialized = true;
            var thePrototype = ojpnDefaultWorldPool$1.Create.prototype;
            thePrototype.instanceOf = ojpnDefaultWorldPool$1.instanceOf;
            thePrototype.ClassgetClass = ojpnDefaultWorldPool$1.ClassgetClass;
            thePrototype.ojdcContactnewInstance = ojpnDefaultWorldPool$1.ojdcContactnewInstance;
            thePrototype.jlObjectnewInstance = ojpnDefaultWorldPool$1.jlObjectnewInstance;
            thePrototype.jlObjectpop = ojpnMutableStack.jlObjectpop;
            thePrototype.VOIDpushjlObject = ojpnMutableStack.VOIDpushjlObject;
            thePrototype.VOIDextendStackINT = ojpnMutableStack.VOIDextendStackINT;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojpnMutableStack.classInitCheck();
            ojpIDynamicStack.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var ojpnMutableStack = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 25,
    __implementedTypes : [26,25,1],
    $assertionsDisabled : false, // declared in org.jbox2d.pooling.normal.MutableStack

    instanceOf : function(aType) {
        return ojpnMutableStack.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojpnMutableStack;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojpnMutableStack.BOOLEANdesiredAssertionStatus(ojpnMutableStack); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_9_13 : for(;;) switch (__label__) {
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_9_13;
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_9_13;
        }
        ojpnMutableStack.$assertionsDisabled = var1;
        return;
    },

    VOIDinitINT : function(thisRef,argInitSize) {
        var __label__ = null;
        thisRef.index = 0;
        thisRef.stack = null;
        thisRef.index = 0;
        thisRef.VOIDextendStackINT(thisRef,argInitSize);
        return;
    },

    VOIDextendStackINT : function(thisRef,argSize) {
        var local_3_INT = null; // type is INT # of inits = 3
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_2_REFERENCE = bytecoder.newArray(argSize,null); // type is REFERENCE value type is REFERENCE
            var var2 = thisRef.stack; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@5fa7f86c
            if (var2 == null ) {
                __label__ = 26;
                break $S_0;
            }
            __label__ = 12;
            }
        $M_12_26 : for(;;) switch (__label__) {
            case 12 :
            // NORMAL
                jlSystem.VOIDarraycopyjlObjectINTjlObjectINTINT(thisRef.stack,0,local_2_REFERENCE,0,thisRef.size);
                __label__ = 26;
                continue $M_12_26;
            case 26 :
            // NORMAL
                $S_26 : {
                // NORMAL
                    local_3_INT = 0; // type is INT value type is INT
                    __label__ = 28;
                    }
                $L_28 : for (;;) {
                    $S_28 : {
                    // NORMAL
                        var var8 = local_3_INT; // type is INT value type is INT
                        var var10 = local_2_REFERENCE.data.length; // type is INT value type is INT
                        if ((var8 >= var10)) {
                            __label__ = 47;
                            break $S_28;
                        }
                        __label__ = 34;
                        }
                    for(;;) switch (__label__) {
                        case 34 :
                        // NORMAL
                            var var11 = local_2_REFERENCE; // type is REFERENCE value type is REFERENCE
                            var var12 = local_3_INT; // type is INT value type is INT
                            var var13 = thisRef.jlObjectnewInstance(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@27677b1e
                            var11.data[var12] = var13;
                            local_3_INT = (local_3_INT + 1); // type is INT value type is INT
                            __label__ = 28;
                            continue $L_28;
                        case 47 :
                        // NORMAL
                            var var14 = local_2_REFERENCE; // type is REFERENCE value type is REFERENCE
                            thisRef.stack = var14;
                            var var16 = local_2_REFERENCE.data.length; // type is INT value type is INT
                            thisRef.size = var16;
                            return;
                    }
                }
        }
    },

    VOIDpushjlObject : function(thisRef,argObject) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojpnMutableStack.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 21;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_21_6 : for(;;) switch (__label__) {
            case 21 :
            // NORMAL
                var var2 = thisRef.stack; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@2d82f76d
                var var4 = (thisRef.index - 1); // type is INT value type is INT
                thisRef.index = var4;
                var2.data[var4] = argObject;
                return;
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    var var1 = thisRef.index; // type is INT value type is INT
                    if ((var1 > 0)) {
                        __label__ = 21;
                        continue $M_21_6;
                    }
                    }
                var var5 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var5);
                throw var5;
        }
    },

    jlObjectpop : function(thisRef) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.index; // type is INT value type is INT
            var var1 = thisRef.size; // type is INT value type is INT
            if ((var0 < var1)) {
                __label__ = 21;
                break $S_0;
            }
            __label__ = 11;
            }
        $M_21_11 : for(;;) switch (__label__) {
            case 21 :
            // NORMAL
                var var4 = thisRef.stack; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@4b7b339f
                var var5 = thisRef.index; // type is INT value type is INT
                var var6 = (var5 + 1); // type is INT value type is INT
                thisRef.index = var6;
                var var7 = var4.data[var5]; // type is REFERENCE value type is REFERENCE
                return var7;
            case 11 :
            // NORMAL
                thisRef.VOIDextendStackINT(thisRef,(thisRef.size * 2));
                __label__ = 21;
                continue $M_21_11;
        }
    },

    classInitCheck : function() {
        if (!ojpnMutableStack.__initialized) {
            ojpnMutableStack.__initialized = true;
            jlObject.classInitCheck();
            ojpIDynamicStack.classInitCheck();
            ojpnMutableStack.VOIDclinit();
        }
    },

};

var ojpIDynamicStack = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 26,
    __implementedTypes : [26,1],


    classInitCheck : function() {
        if (!ojpIDynamicStack.__initialized) {
            ojpIDynamicStack.__initialized = true;
            jlObject.classInitCheck();
        }
    },

};

var ojcSettings = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 27,
    __implementedTypes : [27,1],
    FAST_ABS : false, // declared in org.jbox2d.common.Settings
    FAST_FLOOR : false, // declared in org.jbox2d.common.Settings
    FAST_CEIL : false, // declared in org.jbox2d.common.Settings
    FAST_ROUND : false, // declared in org.jbox2d.common.Settings
    FAST_ATAN2 : false, // declared in org.jbox2d.common.Settings
    CONTACT_STACK_INIT_SIZE : 0, // declared in org.jbox2d.common.Settings
    SINCOS_LUT_ENABLED : false, // declared in org.jbox2d.common.Settings
    SINCOS_LUT_LENGTH : 0, // declared in org.jbox2d.common.Settings
    SINCOS_LUT_LERP : false, // declared in org.jbox2d.common.Settings
    maxRotationSquared : 0, // declared in org.jbox2d.common.Settings

    Create : function() {
    },

    instanceOf : function(aType) {
        return ojcSettings.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcSettings;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var __label__ = null;
        ojcSettings.FAST_ABS = 1;
        ojcSettings.FAST_FLOOR = 1;
        ojcSettings.FAST_CEIL = 1;
        ojcSettings.FAST_ROUND = 1;
        ojcSettings.FAST_ATAN2 = 1;
        ojcSettings.CONTACT_STACK_INIT_SIZE = 10;
        ojcSettings.SINCOS_LUT_ENABLED = 1;
        var var1 = Math.floor(Math.ceil(57119.86598277577)); // type is INT value type is INT
        ojcSettings.SINCOS_LUT_LENGTH = var1;
        ojcSettings.SINCOS_LUT_LERP = 0;
        ojcSettings.maxRotationSquared = 2.4674013;
        return;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    classInitCheck : function() {
        if (!ojcSettings.__initialized) {
            ojcSettings.__initialized = true;
            var thePrototype = ojcSettings.Create.prototype;
            thePrototype.instanceOf = ojcSettings.instanceOf;
            thePrototype.ClassgetClass = ojcSettings.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            ojcSettings.VOIDclinit();
        }
    },

};

var jlMath = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 28,
    __implementedTypes : [28,1],

    Create : function() {
    },

    instanceOf : function(aType) {
        return jlMath.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jlMath;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    DOUBLEceilDOUBLE : function(p1) {
         return bytecoder.imports.math.ceil(p1);
    },

    DOUBLEsinDOUBLE : function(p1) {
         return bytecoder.imports.math.sin(p1);
    },

    DOUBLEfloorDOUBLE : function(p1) {
         return bytecoder.imports.math.floor(p1);
    },

    DOUBLEcosDOUBLE : function(p1) {
         return bytecoder.imports.math.cos(p1);
    },

    FLOATabsFLOAT : function(a) {
        var __label__ = null;
        if ((a >= 0.0)) {
            return a;
        }
        return (-a);
    },

    INTgetExponentFLOAT : function(f) {
        var local_6_INT = null; // type is INT # of inits = 6
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_0_FLOAT = null; // type is FLOAT # of inits = 6
        var local_1_INT = null; // type is INT # of inits = 6
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_5_INT = null; // type is INT # of inits = 6
        var local_7_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = jlMath.FLOATabsFLOAT(f); // type is FLOAT value type is FLOAT
            local_0_FLOAT = var0; // type is FLOAT value type is FLOAT
            local_1_INT = 0; // type is INT value type is INT
            local_2_REFERENCE = dmbcjlTMath$FloatExponents.exponents; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3507e555
            local_3_REFERENCE = dmbcjlTMath$FloatExponents.negativeExponents; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@497b86be
            local_4_REFERENCE = dmbcjlTMath$FloatExponents.negativeExponents2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3ba59258
            var var11 = local_0_FLOAT; // type is FLOAT value type is FLOAT
            if ((var11 <= 1.0)) {
                __label__ = 81;
                break $S_0;
            }
            __label__ = 26;
            }
        for(;;) switch (__label__) {
            case 26 :
            // NORMAL
                $S_26 : {
                // NORMAL
                    local_5_INT = (1 << (local_2_REFERENCE.data.length - 1)); // type is INT value type is INT
                    local_6_INT = (local_2_REFERENCE.data.length - 1); // type is INT value type is INT
                    __label__ = 40;
                    }
                $L_40 : for (;;) {
                    $S_40 : {
                    // NORMAL
                        var var24 = local_6_INT; // type is INT value type is INT
                        if ((var24 < 0)) {
                            __label__ = 78;
                            break $S_40;
                        }
                        __label__ = 45;
                        }
                    for(;;) switch (__label__) {
                        case 45 :
                        // NORMAL
                            $S_45 : {
                            // NORMAL
                                var var52 = local_0_FLOAT; // type is FLOAT value type is FLOAT
                                var var55 = local_2_REFERENCE.data[local_6_INT]; // type is FLOAT value type is FLOAT
                                if ((var52 < var55)) {
                                    __label__ = 66;
                                    break $S_45;
                                }
                                __label__ = 54;
                                }
                            $M_54_66 : for(;;) switch (__label__) {
                                case 54 :
                                // NORMAL
                                    var var57 = local_0_FLOAT; // type is FLOAT value type is FLOAT
                                    var var60 = local_3_REFERENCE.data[local_6_INT]; // type is FLOAT value type is FLOAT
                                    local_0_FLOAT = (var57 * var60); // type is FLOAT value type is FLOAT
                                    local_1_INT = (local_1_INT | local_5_INT); // type is INT value type is INT
                                    __label__ = 66;
                                    continue $M_54_66;
                                case 66 :
                                // NORMAL
                                    local_5_INT = (local_5_INT >>> 1); // type is INT value type is INT
                                    local_6_INT = (local_6_INT + -1); // type is INT value type is INT
                                    __label__ = 40;
                                    continue $L_40;
                            }
                        case 78 :
                        // NORMAL
                            return local_1_INT;
                    }
                }
            case 81 :
            // NORMAL
                $S_81 : {
                // NORMAL
                    var var25 = local_0_FLOAT; // type is FLOAT value type is FLOAT
                    if ((var25 >= 1.0)) {
                        return local_1_INT;
                    }
                    }
                $S_87 : {
                // NORMAL
                    local_5_INT = (1 << (local_3_REFERENCE.data.length - 1)); // type is INT value type is INT
                    local_6_INT = 0; // type is INT value type is INT
                    var var34 = local_0_FLOAT; // type is DOUBLE value type is DOUBLE
                    if ((var34 >= 1.1754943508222875E-38)) {
                        __label__ = 116;
                        break $S_87;
                    }
                    __label__ = 107;
                    }
                $M_116_107 : for(;;) switch (__label__) {
                    case 116 :
                    // NORMAL
                        $S_116 : {
                        // NORMAL
                            local_7_INT = (local_4_REFERENCE.data.length - 1); // type is INT value type is INT
                            __label__ = 123;
                            }
                        $L_123 : for (;;) {
                            $S_123 : {
                            // NORMAL
                                var var45 = local_7_INT; // type is INT value type is INT
                                if ((var45 < 0)) {
                                    __label__ = 162;
                                    break $S_123;
                                }
                                __label__ = 128;
                                }
                            for(;;) switch (__label__) {
                                case 128 :
                                // NORMAL
                                    $S_128 : {
                                    // NORMAL
                                        var var70 = local_0_FLOAT; // type is FLOAT value type is FLOAT
                                        var var73 = local_4_REFERENCE.data[local_7_INT]; // type is FLOAT value type is FLOAT
                                        if ((var70 >= var73)) {
                                            __label__ = 150;
                                            break $S_128;
                                        }
                                        __label__ = 138;
                                        }
                                    $M_138_150 : for(;;) switch (__label__) {
                                        case 150 :
                                        // NORMAL
                                            local_5_INT = (local_5_INT >>> 1); // type is INT value type is INT
                                            local_7_INT = (local_7_INT + -1); // type is INT value type is INT
                                            __label__ = 123;
                                            continue $L_123;
                                        case 138 :
                                        // NORMAL
                                            var var75 = local_0_FLOAT; // type is FLOAT value type is FLOAT
                                            var var78 = local_2_REFERENCE.data[local_7_INT]; // type is FLOAT value type is FLOAT
                                            local_0_FLOAT = (var75 * var78); // type is FLOAT value type is FLOAT
                                            local_1_INT = (local_1_INT | local_5_INT); // type is INT value type is INT
                                            __label__ = 150;
                                            continue $M_138_150;
                                    }
                                case 162 :
                                // NORMAL
                                    local_1_INT = (-(local_1_INT + local_6_INT)); // type is INT value type is INT
                                    return local_1_INT;
                            }
                        }
                    case 107 :
                    // NORMAL
                        local_0_FLOAT = (local_0_FLOAT * 8388608.0); // type is FLOAT value type is FLOAT
                        local_6_INT = 23; // type is INT value type is INT
                        __label__ = 116;
                        continue $M_116_107;
                }
        }
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    classInitCheck : function() {
        if (!jlMath.__initialized) {
            jlMath.__initialized = true;
            var thePrototype = jlMath.Create.prototype;
            thePrototype.instanceOf = jlMath.instanceOf;
            thePrototype.ClassgetClass = jlMath.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var jlrArray = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 29,
    __implementedTypes : [29,1],

    Create : function() {
    },

    instanceOf : function(aType) {
        return jlrArray.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jlrArray;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    jlObjectclone : function(thisRef) {
        var __label__ = null;
        return thisRef;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    jlObjectnewInstancejlClassINT : function(componentType,length) {
        var __label__ = null;
        var var0 = new jlIllegalStateException.Create(); // type is REFERENCE value type is REFERENCE
        jlIllegalStateException.VOIDinit(var0);
        throw var0;
    },

    classInitCheck : function() {
        if (!jlrArray.__initialized) {
            jlrArray.__initialized = true;
            var thePrototype = jlrArray.Create.prototype;
            thePrototype.instanceOf = jlrArray.instanceOf;
            thePrototype.ClassgetClass = jlrArray.ClassgetClass;
            thePrototype.jlObjectclone = jlrArray.jlObjectclone;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var jlSystem = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 30,
    __implementedTypes : [30,1],
    out : null, // declared in java.lang.System

    Create : function() {
    },

    instanceOf : function(aType) {
        return jlSystem.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jlSystem;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var __label__ = null;
        var var0 = new jiPrintStream.Create(); // type is REFERENCE value type is REFERENCE
        var var1 = new dmbcjlTSystem$1.Create(); // type is REFERENCE value type is REFERENCE
        dmbcjlTSystem$1.VOIDinit(var1);
        jiPrintStream.VOIDinitjiOutputStream(var0,var1);
        jlSystem.out = var0;
        return;
    },

    VOIDarraycopyjlObjectINTjlObjectINTINT : function(aSource,aSourcePos,aTarget,aTargetPos,aLength) {
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_7_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_5_REFERENCE = aSource; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1c0a4967
            local_6_REFERENCE = aTarget; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@18288ad0
            local_7_INT = 0; // type is INT value type is INT
            __label__ = 15;
            }
        $L_15 : for (;;) {
            $S_15 : {
            // NORMAL
                var var4 = local_7_INT; // type is INT value type is INT
                if ((var4 >= aLength)) {
                    return;
                }
                }
            var var5 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@18288ad0
            var var7 = (aTargetPos + local_7_INT); // type is INT value type is INT
            var var11 = local_5_REFERENCE.data[(aSourcePos + local_7_INT)]; // type is REFERENCE value type is REFERENCE
            var5.data[var7] = var11;
            local_7_INT = (local_7_INT + 1); // type is INT value type is INT
            __label__ = 15;
            continue $L_15;
        }
    },

    LONGnanoTime : function() {
         return bytecoder.imports.system.nanoTime();
    },

    INTidentityHashCodejlObject : function(aValue) {
        var __label__ = null;
        var var0 = aValue.INThashCode(aValue); // type is INT value type is INT
        return var0;
    },

    LONGcurrentTimeMillis : function() {
         return bytecoder.imports.system.currentTimeMillis();
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    classInitCheck : function() {
        if (!jlSystem.__initialized) {
            jlSystem.__initialized = true;
            var thePrototype = jlSystem.Create.prototype;
            thePrototype.instanceOf = jlSystem.instanceOf;
            thePrototype.ClassgetClass = jlSystem.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            jiPrintStream.classInitCheck();
            dmbcjlTSystem$1.classInitCheck();
            jlSystem.VOIDclinit();
        }
    },

};

var jiPrintStream = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 31,
    __implementedTypes : [36,33,31,35,32,34,37,1],

    Create : function() {
        this.delegate = null; // declared in java.io.FilterOutputStream
    },

    instanceOf : function(aType) {
        return jiPrintStream.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jiPrintStream;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitjiOutputStream : function(thisRef,aTarget) {
        var __label__ = null;
        jiFilterOutputStream.VOIDinitjiOutputStream(thisRef,aTarget);
        return;
    },

    VOIDprintlnjlString : function(thisRef,aValue) {
        var __label__ = null;
        thisRef.VOIDprintjlString(thisRef,aValue);
        thisRef.VOIDprintln(thisRef);
        return;
    },

    VOIDprintjlString : function(thisRef,aValue) {
        var __label__ = null;
        var var0 = aValue.A1BYTEgetBytes(aValue); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@20628ba
        thisRef.VOIDwriteA1BYTE(thisRef,var0);
        return;
    },

    VOIDprintln : function(thisRef) {
        var __label__ = null;
        thisRef.VOIDprintCHAR(thisRef,10);
        return;
    },

    VOIDprintCHAR : function(thisRef,aChar) {
        var __label__ = null;
        thisRef.VOIDwriteINT(thisRef,aChar);
        return;
    },

    VOIDprintlnLONG : function(thisRef,aValue) {
        var __label__ = null;
        var var0 = jlLong.jlStringtoStringLONG(aValue); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5ad790b3
        thisRef.VOIDprintjlString(thisRef,var0);
        thisRef.VOIDprintln(thisRef);
        return;
    },

    VOIDprintlnINT : function(thisRef,aValue) {
        var __label__ = null;
        var var0 = jlInteger.jlStringtoStringINT(aValue); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@39461fbb
        thisRef.VOIDprintjlString(thisRef,var0);
        thisRef.VOIDprintln(thisRef);
        return;
    },

    classInitCheck : function() {
        if (!jiPrintStream.__initialized) {
            jiPrintStream.__initialized = true;
            var thePrototype = jiPrintStream.Create.prototype;
            thePrototype.instanceOf = jiPrintStream.instanceOf;
            thePrototype.ClassgetClass = jiPrintStream.ClassgetClass;
            thePrototype.VOIDprintlnINT = jiPrintStream.VOIDprintlnINT;
            thePrototype.VOIDprintlnLONG = jiPrintStream.VOIDprintlnLONG;
            thePrototype.VOIDprintCHAR = jiPrintStream.VOIDprintCHAR;
            thePrototype.VOIDprintln = jiPrintStream.VOIDprintln;
            thePrototype.VOIDprintjlString = jiPrintStream.VOIDprintjlString;
            thePrototype.VOIDprintlnjlString = jiPrintStream.VOIDprintlnjlString;
            thePrototype.VOIDwriteINT = jiFilterOutputStream.VOIDwriteINT;
            thePrototype.VOIDwriteA1BYTEINTINT = jiFilterOutputStream.VOIDwriteA1BYTEINTINT;
            thePrototype.VOIDwriteA1BYTE = jiFilterOutputStream.VOIDwriteA1BYTE;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jiFilterOutputStream.classInitCheck();
            jiFlushable.classInitCheck();
            jiOutputStream.classInitCheck();
            jlAutoCloseable.classInitCheck();
            jiCloseable.classInitCheck();
            jlAppendable.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var jiFilterOutputStream = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 32,
    __implementedTypes : [36,33,32,35,34,1],

    Create : function() {
        this.delegate = null; // declared in java.io.FilterOutputStream
    },

    instanceOf : function(aType) {
        return jiFilterOutputStream.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jiFilterOutputStream;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitjiOutputStream : function(thisRef,aDelegate) {
        var __label__ = null;
        jiOutputStream.VOIDinit(thisRef);
        thisRef.delegate = aDelegate;
        return;
    },

    VOIDwriteA1BYTE : function(thisRef,b) {
        var __label__ = null;
        thisRef.VOIDwriteA1BYTEINTINT(thisRef,b,0,b.data.length);
        return;
    },

    VOIDwriteA1BYTEINTINT : function(thisRef,b,off,len) {
        var __label__ = null;
        thisRef.delegate.VOIDwriteA1BYTEINTINT(thisRef.delegate,b,off,len);
        return;
    },

    VOIDwriteINT : function(thisRef,b) {
        var __label__ = null;
        thisRef.delegate.VOIDwriteINT(thisRef.delegate,b);
        return;
    },

    classInitCheck : function() {
        if (!jiFilterOutputStream.__initialized) {
            jiFilterOutputStream.__initialized = true;
            var thePrototype = jiFilterOutputStream.Create.prototype;
            thePrototype.instanceOf = jiFilterOutputStream.instanceOf;
            thePrototype.ClassgetClass = jiFilterOutputStream.ClassgetClass;
            thePrototype.VOIDwriteINT = jiFilterOutputStream.VOIDwriteINT;
            thePrototype.VOIDwriteA1BYTEINTINT = jiFilterOutputStream.VOIDwriteA1BYTEINTINT;
            thePrototype.VOIDwriteA1BYTE = jiFilterOutputStream.VOIDwriteA1BYTE;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jiOutputStream.classInitCheck();
            jiFlushable.classInitCheck();
            jlAutoCloseable.classInitCheck();
            jiCloseable.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var jiOutputStream = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 33,
    __implementedTypes : [36,33,35,34,1],

    instanceOf : function(aType) {
        return jiOutputStream.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jiOutputStream;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    VOIDwriteA1BYTE : function(thisRef,aBytes) {
        var __label__ = null;
        thisRef.VOIDwriteA1BYTEINTINT(thisRef,aBytes,0,aBytes.data.length);
        return;
    },

    classInitCheck : function() {
        if (!jiOutputStream.__initialized) {
            jiOutputStream.__initialized = true;
            jlObject.classInitCheck();
            jiFlushable.classInitCheck();
            jlAutoCloseable.classInitCheck();
            jiCloseable.classInitCheck();
        }
    },

};

var jiCloseable = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 34,
    __implementedTypes : [35,34,1],


    classInitCheck : function() {
        if (!jiCloseable.__initialized) {
            jiCloseable.__initialized = true;
            jlObject.classInitCheck();
            jlAutoCloseable.classInitCheck();
        }
    },

};

var jlAutoCloseable = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 35,
    __implementedTypes : [35,1],


    classInitCheck : function() {
        if (!jlAutoCloseable.__initialized) {
            jlAutoCloseable.__initialized = true;
            jlObject.classInitCheck();
        }
    },

};

var jiFlushable = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 36,
    __implementedTypes : [36,1],


    classInitCheck : function() {
        if (!jiFlushable.__initialized) {
            jiFlushable.__initialized = true;
            jlObject.classInitCheck();
        }
    },

};

var jlAppendable = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 37,
    __implementedTypes : [37,1],


    classInitCheck : function() {
        if (!jlAppendable.__initialized) {
            jlAppendable.__initialized = true;
            jlObject.classInitCheck();
        }
    },

};

var dmbcjlTSystem$1 = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 38,
    __implementedTypes : [36,33,35,34,38,1],

    Create : function() {
    },

    instanceOf : function(aType) {
        return dmbcjlTSystem$1.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return dmbcjlTSystem$1;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        jiOutputStream.VOIDinit(thisRef);
        return;
    },

    VOIDwriteA1BYTEINTINT : function(thisRef,b,off,len) {
        var __label__ = null;
        thisRef.VOIDwriteByteArrayToConsoleA1BYTE(thisRef,b);
        return;
    },

    VOIDwriteByteArrayToConsoleA1BYTE : function(thisRef,p1) {
         return bytecoder.imports.system.writeByteArrayToConsole(thisRef,p1);
    },

    VOIDwriteINT : function(thisRef,b) {
        var __label__ = null;
        var local_2_REFERENCE = bytecoder.newArray(1,0); // type is REFERENCE value type is REFERENCE
        var var2 = local_2_REFERENCE; // type is REFERENCE value type is REFERENCE
        var var3 = Math.floor(b); // type is BYTE value type is BYTE
        var2.data[0] = var3;
        thisRef.VOIDwriteA1BYTE(thisRef,local_2_REFERENCE);
        return;
    },

    classInitCheck : function() {
        if (!dmbcjlTSystem$1.__initialized) {
            dmbcjlTSystem$1.__initialized = true;
            var thePrototype = dmbcjlTSystem$1.Create.prototype;
            thePrototype.instanceOf = dmbcjlTSystem$1.instanceOf;
            thePrototype.ClassgetClass = dmbcjlTSystem$1.ClassgetClass;
            thePrototype.VOIDwriteINT = dmbcjlTSystem$1.VOIDwriteINT;
            thePrototype.VOIDwriteByteArrayToConsoleA1BYTE = dmbcjlTSystem$1.VOIDwriteByteArrayToConsoleA1BYTE;
            thePrototype.VOIDwriteA1BYTEINTINT = dmbcjlTSystem$1.VOIDwriteA1BYTEINTINT;
            thePrototype.VOIDwriteA1BYTE = jiOutputStream.VOIDwriteA1BYTE;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jiOutputStream.classInitCheck();
            jiFlushable.classInitCheck();
            jlAutoCloseable.classInitCheck();
            jiCloseable.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var ojpnDefaultWorldPool$2 = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 39,
    __implementedTypes : [39,26,25,1],
    $assertionsDisabled : false, // declared in org.jbox2d.pooling.normal.MutableStack

    Create : function() {
        this.index = 0; // declared in org.jbox2d.pooling.normal.MutableStack
        this.stack = null; // declared in org.jbox2d.pooling.normal.MutableStack
        this.size = 0; // declared in org.jbox2d.pooling.normal.MutableStack
        this.this$0 = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool$2
    },

    instanceOf : function(aType) {
        return ojpnDefaultWorldPool$2.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojpnDefaultWorldPool$2;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitojpnDefaultWorldPoolINT : function(thisRef,p1,x0) {
        var __label__ = null;
        thisRef.this$0 = p1;
        ojpnMutableStack.VOIDinitINT(thisRef,x0);
        return;
    },

    jlObjectnewInstance : function(thisRef) {
        var __label__ = null;
        var var0 = thisRef.ojdcContactnewInstance(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@64682f81
        return var0;
    },

    ojdcContactnewInstance : function(thisRef) {
        var __label__ = null;
        var var0 = new ojdcCircleContact.Create(); // type is REFERENCE value type is REFERENCE
        var var2 = ojpnDefaultWorldPool.ojpIWorldPoolaccess$000ojpnDefaultWorldPool(thisRef.this$0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3ca6384a
        ojdcCircleContact.VOIDinitojpIWorldPool(var0,var2);
        return var0;
    },

    classInitCheck : function() {
        if (!ojpnDefaultWorldPool$2.__initialized) {
            ojpnDefaultWorldPool$2.__initialized = true;
            var thePrototype = ojpnDefaultWorldPool$2.Create.prototype;
            thePrototype.instanceOf = ojpnDefaultWorldPool$2.instanceOf;
            thePrototype.ClassgetClass = ojpnDefaultWorldPool$2.ClassgetClass;
            thePrototype.ojdcContactnewInstance = ojpnDefaultWorldPool$2.ojdcContactnewInstance;
            thePrototype.jlObjectnewInstance = ojpnDefaultWorldPool$2.jlObjectnewInstance;
            thePrototype.jlObjectpop = ojpnMutableStack.jlObjectpop;
            thePrototype.VOIDpushjlObject = ojpnMutableStack.VOIDpushjlObject;
            thePrototype.VOIDextendStackINT = ojpnMutableStack.VOIDextendStackINT;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojpnMutableStack.classInitCheck();
            ojpIDynamicStack.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var ojpnDefaultWorldPool$3 = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 40,
    __implementedTypes : [40,26,25,1],
    $assertionsDisabled : false, // declared in org.jbox2d.pooling.normal.MutableStack

    Create : function() {
        this.index = 0; // declared in org.jbox2d.pooling.normal.MutableStack
        this.stack = null; // declared in org.jbox2d.pooling.normal.MutableStack
        this.size = 0; // declared in org.jbox2d.pooling.normal.MutableStack
        this.this$0 = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool$3
    },

    instanceOf : function(aType) {
        return ojpnDefaultWorldPool$3.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojpnDefaultWorldPool$3;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitojpnDefaultWorldPoolINT : function(thisRef,p1,x0) {
        var __label__ = null;
        thisRef.this$0 = p1;
        ojpnMutableStack.VOIDinitINT(thisRef,x0);
        return;
    },

    jlObjectnewInstance : function(thisRef) {
        var __label__ = null;
        var var0 = thisRef.ojdcContactnewInstance(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@365fdb53
        return var0;
    },

    ojdcContactnewInstance : function(thisRef) {
        var __label__ = null;
        var var0 = new ojdcPolygonAndCircleContact.Create(); // type is REFERENCE value type is REFERENCE
        var var2 = ojpnDefaultWorldPool.ojpIWorldPoolaccess$000ojpnDefaultWorldPool(thisRef.this$0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4049b92c
        ojdcPolygonAndCircleContact.VOIDinitojpIWorldPool(var0,var2);
        return var0;
    },

    classInitCheck : function() {
        if (!ojpnDefaultWorldPool$3.__initialized) {
            ojpnDefaultWorldPool$3.__initialized = true;
            var thePrototype = ojpnDefaultWorldPool$3.Create.prototype;
            thePrototype.instanceOf = ojpnDefaultWorldPool$3.instanceOf;
            thePrototype.ClassgetClass = ojpnDefaultWorldPool$3.ClassgetClass;
            thePrototype.ojdcContactnewInstance = ojpnDefaultWorldPool$3.ojdcContactnewInstance;
            thePrototype.jlObjectnewInstance = ojpnDefaultWorldPool$3.jlObjectnewInstance;
            thePrototype.jlObjectpop = ojpnMutableStack.jlObjectpop;
            thePrototype.VOIDpushjlObject = ojpnMutableStack.VOIDpushjlObject;
            thePrototype.VOIDextendStackINT = ojpnMutableStack.VOIDextendStackINT;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojpnMutableStack.classInitCheck();
            ojpIDynamicStack.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var ojpnDefaultWorldPool$4 = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 41,
    __implementedTypes : [26,41,25,1],
    $assertionsDisabled : false, // declared in org.jbox2d.pooling.normal.MutableStack

    Create : function() {
        this.index = 0; // declared in org.jbox2d.pooling.normal.MutableStack
        this.stack = null; // declared in org.jbox2d.pooling.normal.MutableStack
        this.size = 0; // declared in org.jbox2d.pooling.normal.MutableStack
        this.this$0 = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool$4
    },

    instanceOf : function(aType) {
        return ojpnDefaultWorldPool$4.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojpnDefaultWorldPool$4;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitojpnDefaultWorldPoolINT : function(thisRef,p1,x0) {
        var __label__ = null;
        thisRef.this$0 = p1;
        ojpnMutableStack.VOIDinitINT(thisRef,x0);
        return;
    },

    jlObjectnewInstance : function(thisRef) {
        var __label__ = null;
        var var0 = thisRef.ojdcContactnewInstance(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@73d40f3b
        return var0;
    },

    ojdcContactnewInstance : function(thisRef) {
        var __label__ = null;
        var var0 = new ojdcEdgeAndCircleContact.Create(); // type is REFERENCE value type is REFERENCE
        var var2 = ojpnDefaultWorldPool.ojpIWorldPoolaccess$000ojpnDefaultWorldPool(thisRef.this$0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@49119a7d
        ojdcEdgeAndCircleContact.VOIDinitojpIWorldPool(var0,var2);
        return var0;
    },

    classInitCheck : function() {
        if (!ojpnDefaultWorldPool$4.__initialized) {
            ojpnDefaultWorldPool$4.__initialized = true;
            var thePrototype = ojpnDefaultWorldPool$4.Create.prototype;
            thePrototype.instanceOf = ojpnDefaultWorldPool$4.instanceOf;
            thePrototype.ClassgetClass = ojpnDefaultWorldPool$4.ClassgetClass;
            thePrototype.ojdcContactnewInstance = ojpnDefaultWorldPool$4.ojdcContactnewInstance;
            thePrototype.jlObjectnewInstance = ojpnDefaultWorldPool$4.jlObjectnewInstance;
            thePrototype.jlObjectpop = ojpnMutableStack.jlObjectpop;
            thePrototype.VOIDpushjlObject = ojpnMutableStack.VOIDpushjlObject;
            thePrototype.VOIDextendStackINT = ojpnMutableStack.VOIDextendStackINT;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojpnMutableStack.classInitCheck();
            ojpIDynamicStack.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var ojpnDefaultWorldPool$5 = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 42,
    __implementedTypes : [26,42,25,1],
    $assertionsDisabled : false, // declared in org.jbox2d.pooling.normal.MutableStack

    Create : function() {
        this.index = 0; // declared in org.jbox2d.pooling.normal.MutableStack
        this.stack = null; // declared in org.jbox2d.pooling.normal.MutableStack
        this.size = 0; // declared in org.jbox2d.pooling.normal.MutableStack
        this.this$0 = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool$5
    },

    instanceOf : function(aType) {
        return ojpnDefaultWorldPool$5.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojpnDefaultWorldPool$5;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitojpnDefaultWorldPoolINT : function(thisRef,p1,x0) {
        var __label__ = null;
        thisRef.this$0 = p1;
        ojpnMutableStack.VOIDinitINT(thisRef,x0);
        return;
    },

    jlObjectnewInstance : function(thisRef) {
        var __label__ = null;
        var var0 = thisRef.ojdcContactnewInstance(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1d9fd86c
        return var0;
    },

    ojdcContactnewInstance : function(thisRef) {
        var __label__ = null;
        var var0 = new ojdcEdgeAndPolygonContact.Create(); // type is REFERENCE value type is REFERENCE
        var var2 = ojpnDefaultWorldPool.ojpIWorldPoolaccess$000ojpnDefaultWorldPool(thisRef.this$0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@f0c35a5
        ojdcEdgeAndPolygonContact.VOIDinitojpIWorldPool(var0,var2);
        return var0;
    },

    classInitCheck : function() {
        if (!ojpnDefaultWorldPool$5.__initialized) {
            ojpnDefaultWorldPool$5.__initialized = true;
            var thePrototype = ojpnDefaultWorldPool$5.Create.prototype;
            thePrototype.instanceOf = ojpnDefaultWorldPool$5.instanceOf;
            thePrototype.ClassgetClass = ojpnDefaultWorldPool$5.ClassgetClass;
            thePrototype.ojdcContactnewInstance = ojpnDefaultWorldPool$5.ojdcContactnewInstance;
            thePrototype.jlObjectnewInstance = ojpnDefaultWorldPool$5.jlObjectnewInstance;
            thePrototype.jlObjectpop = ojpnMutableStack.jlObjectpop;
            thePrototype.VOIDpushjlObject = ojpnMutableStack.VOIDpushjlObject;
            thePrototype.VOIDextendStackINT = ojpnMutableStack.VOIDextendStackINT;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojpnMutableStack.classInitCheck();
            ojpIDynamicStack.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var ojpnDefaultWorldPool$6 = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 43,
    __implementedTypes : [26,43,25,1],
    $assertionsDisabled : false, // declared in org.jbox2d.pooling.normal.MutableStack

    Create : function() {
        this.index = 0; // declared in org.jbox2d.pooling.normal.MutableStack
        this.stack = null; // declared in org.jbox2d.pooling.normal.MutableStack
        this.size = 0; // declared in org.jbox2d.pooling.normal.MutableStack
        this.this$0 = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool$6
    },

    instanceOf : function(aType) {
        return ojpnDefaultWorldPool$6.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojpnDefaultWorldPool$6;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitojpnDefaultWorldPoolINT : function(thisRef,p1,x0) {
        var __label__ = null;
        thisRef.this$0 = p1;
        ojpnMutableStack.VOIDinitINT(thisRef,x0);
        return;
    },

    jlObjectnewInstance : function(thisRef) {
        var __label__ = null;
        var var0 = thisRef.ojdcContactnewInstance(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@801606b
        return var0;
    },

    ojdcContactnewInstance : function(thisRef) {
        var __label__ = null;
        var var0 = new ojdcChainAndCircleContact.Create(); // type is REFERENCE value type is REFERENCE
        var var2 = ojpnDefaultWorldPool.ojpIWorldPoolaccess$000ojpnDefaultWorldPool(thisRef.this$0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2e645e9a
        ojdcChainAndCircleContact.VOIDinitojpIWorldPool(var0,var2);
        return var0;
    },

    classInitCheck : function() {
        if (!ojpnDefaultWorldPool$6.__initialized) {
            ojpnDefaultWorldPool$6.__initialized = true;
            var thePrototype = ojpnDefaultWorldPool$6.Create.prototype;
            thePrototype.instanceOf = ojpnDefaultWorldPool$6.instanceOf;
            thePrototype.ClassgetClass = ojpnDefaultWorldPool$6.ClassgetClass;
            thePrototype.ojdcContactnewInstance = ojpnDefaultWorldPool$6.ojdcContactnewInstance;
            thePrototype.jlObjectnewInstance = ojpnDefaultWorldPool$6.jlObjectnewInstance;
            thePrototype.jlObjectpop = ojpnMutableStack.jlObjectpop;
            thePrototype.VOIDpushjlObject = ojpnMutableStack.VOIDpushjlObject;
            thePrototype.VOIDextendStackINT = ojpnMutableStack.VOIDextendStackINT;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojpnMutableStack.classInitCheck();
            ojpIDynamicStack.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var ojpnDefaultWorldPool$7 = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 44,
    __implementedTypes : [44,26,25,1],
    $assertionsDisabled : false, // declared in org.jbox2d.pooling.normal.MutableStack

    Create : function() {
        this.index = 0; // declared in org.jbox2d.pooling.normal.MutableStack
        this.stack = null; // declared in org.jbox2d.pooling.normal.MutableStack
        this.size = 0; // declared in org.jbox2d.pooling.normal.MutableStack
        this.this$0 = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool$7
    },

    instanceOf : function(aType) {
        return ojpnDefaultWorldPool$7.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojpnDefaultWorldPool$7;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitojpnDefaultWorldPoolINT : function(thisRef,p1,x0) {
        var __label__ = null;
        thisRef.this$0 = p1;
        ojpnMutableStack.VOIDinitINT(thisRef,x0);
        return;
    },

    jlObjectnewInstance : function(thisRef) {
        var __label__ = null;
        var var0 = thisRef.ojdcContactnewInstance(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@31842e9e
        return var0;
    },

    ojdcContactnewInstance : function(thisRef) {
        var __label__ = null;
        var var0 = new ojdcChainAndPolygonContact.Create(); // type is REFERENCE value type is REFERENCE
        var var2 = ojpnDefaultWorldPool.ojpIWorldPoolaccess$000ojpnDefaultWorldPool(thisRef.this$0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@607c7137
        ojdcChainAndPolygonContact.VOIDinitojpIWorldPool(var0,var2);
        return var0;
    },

    classInitCheck : function() {
        if (!ojpnDefaultWorldPool$7.__initialized) {
            ojpnDefaultWorldPool$7.__initialized = true;
            var thePrototype = ojpnDefaultWorldPool$7.Create.prototype;
            thePrototype.instanceOf = ojpnDefaultWorldPool$7.instanceOf;
            thePrototype.ClassgetClass = ojpnDefaultWorldPool$7.ClassgetClass;
            thePrototype.ojdcContactnewInstance = ojpnDefaultWorldPool$7.ojdcContactnewInstance;
            thePrototype.jlObjectnewInstance = ojpnDefaultWorldPool$7.jlObjectnewInstance;
            thePrototype.jlObjectpop = ojpnMutableStack.jlObjectpop;
            thePrototype.VOIDpushjlObject = ojpnMutableStack.VOIDpushjlObject;
            thePrototype.VOIDextendStackINT = ojpnMutableStack.VOIDextendStackINT;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojpnMutableStack.classInitCheck();
            ojpIDynamicStack.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var ojpnDefaultWorldPool$8 = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 45,
    __implementedTypes : [45,1,46],
    $assertionsDisabled : false, // declared in org.jbox2d.pooling.normal.OrderedStack

    Create : function() {
        this.size = 0; // declared in org.jbox2d.pooling.normal.OrderedStack
        this.pool = null; // declared in org.jbox2d.pooling.normal.OrderedStack
        this.index = 0; // declared in org.jbox2d.pooling.normal.OrderedStack
        this.container = null; // declared in org.jbox2d.pooling.normal.OrderedStack
        this.this$0 = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool$8
    },

    instanceOf : function(aType) {
        return ojpnDefaultWorldPool$8.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojpnDefaultWorldPool$8;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitojpnDefaultWorldPoolINTINT : function(thisRef,p1,x0,x1) {
        var __label__ = null;
        thisRef.this$0 = p1;
        ojpnOrderedStack.VOIDinitINTINT(thisRef,x0,x1);
        return;
    },

    jlObjectnewInstance : function(thisRef) {
        var __label__ = null;
        var var0 = thisRef.ojcVec2newInstance(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@745ef8a6
        return var0;
    },

    ojcVec2newInstance : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var0);
        return var0;
    },

    classInitCheck : function() {
        if (!ojpnDefaultWorldPool$8.__initialized) {
            ojpnDefaultWorldPool$8.__initialized = true;
            var thePrototype = ojpnDefaultWorldPool$8.Create.prototype;
            thePrototype.instanceOf = ojpnDefaultWorldPool$8.instanceOf;
            thePrototype.ClassgetClass = ojpnDefaultWorldPool$8.ClassgetClass;
            thePrototype.ojcVec2newInstance = ojpnDefaultWorldPool$8.ojcVec2newInstance;
            thePrototype.jlObjectnewInstance = ojpnDefaultWorldPool$8.jlObjectnewInstance;
            thePrototype.VOIDpushINT = ojpnOrderedStack.VOIDpushINT;
            thePrototype.jlObjectpop = ojpnOrderedStack.jlObjectpop;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojpnOrderedStack.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var ojpnOrderedStack = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 46,
    __implementedTypes : [1,46],
    $assertionsDisabled : false, // declared in org.jbox2d.pooling.normal.OrderedStack

    instanceOf : function(aType) {
        return ojpnOrderedStack.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojpnOrderedStack;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojpnOrderedStack.BOOLEANdesiredAssertionStatus(ojpnOrderedStack); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_9_13 : for(;;) switch (__label__) {
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_9_13;
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_9_13;
        }
        ojpnOrderedStack.$assertionsDisabled = var1;
        return;
    },

    VOIDinitINTINT : function(thisRef,argStackSize,argContainerSize) {
        var local_3_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            thisRef.size = argStackSize;
            var var0 = bytecoder.newArray(argStackSize,null); // type is REFERENCE value type is REFERENCE
            thisRef.pool = var0;
            local_3_INT = 0; // type is INT value type is INT
            __label__ = 19;
            }
        $L_19 : for (;;) {
            $S_19 : {
            // NORMAL
                var var3 = local_3_INT; // type is INT value type is INT
                if ((var3 >= argStackSize)) {
                    __label__ = 40;
                    break $S_19;
                }
                __label__ = 24;
                }
            for(;;) switch (__label__) {
                case 24 :
                // NORMAL
                    var var5 = thisRef.pool; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@79ee4373
                    var var6 = local_3_INT; // type is INT value type is INT
                    var var7 = thisRef.jlObjectnewInstance(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@177d71b7
                    var5.data[var6] = var7;
                    local_3_INT = (local_3_INT + 1); // type is INT value type is INT
                    __label__ = 19;
                    continue $L_19;
                case 40 :
                // NORMAL
                    thisRef.index = 0;
                    var var4 = bytecoder.newArray(argContainerSize,null); // type is REFERENCE value type is REFERENCE
                    thisRef.container = var4;
                    return;
            }
        }
    },

    jlObjectpop : function(thisRef) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojpnOrderedStack.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 27;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_27_6 : for(;;) switch (__label__) {
            case 27 :
            // NORMAL
                var var4 = thisRef.pool; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@53965228
                var var5 = thisRef.index; // type is INT value type is INT
                var var6 = (var5 + 1); // type is INT value type is INT
                thisRef.index = var6;
                var var7 = var4.data[var5]; // type is REFERENCE value type is REFERENCE
                return var7;
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    var var1 = thisRef.index; // type is INT value type is INT
                    var var2 = thisRef.size; // type is INT value type is INT
                    if ((var1 < var2)) {
                        __label__ = 27;
                        continue $M_27_6;
                    }
                    }
                var var3 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinitjlObject(var3,bytecoder.stringpool[15]);
                throw var3;
        }
    },

    VOIDpushINT : function(thisRef,argNum) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var1 = (thisRef.index - argNum); // type is INT value type is INT
            thisRef.index = var1;
            var var2 = ojpnOrderedStack.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var2 != 0)) {
                return;
            }
            }
        $S_16 : {
        // NORMAL
            var var3 = thisRef.index; // type is INT value type is INT
            if ((var3 >= 0)) {
                return;
            }
            }
        var var4 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
        jlAssertionError.VOIDinitjlObject(var4,bytecoder.stringpool[16]);
        throw var4;
    },

    classInitCheck : function() {
        if (!ojpnOrderedStack.__initialized) {
            ojpnOrderedStack.__initialized = true;
            jlObject.classInitCheck();
            ojpnOrderedStack.VOIDclinit();
        }
    },

};

var ojpnDefaultWorldPool$9 = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 47,
    __implementedTypes : [47,1,46],
    $assertionsDisabled : false, // declared in org.jbox2d.pooling.normal.OrderedStack

    Create : function() {
        this.size = 0; // declared in org.jbox2d.pooling.normal.OrderedStack
        this.pool = null; // declared in org.jbox2d.pooling.normal.OrderedStack
        this.index = 0; // declared in org.jbox2d.pooling.normal.OrderedStack
        this.container = null; // declared in org.jbox2d.pooling.normal.OrderedStack
        this.this$0 = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool$9
    },

    instanceOf : function(aType) {
        return ojpnDefaultWorldPool$9.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojpnDefaultWorldPool$9;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitojpnDefaultWorldPoolINTINT : function(thisRef,p1,x0,x1) {
        var __label__ = null;
        thisRef.this$0 = p1;
        ojpnOrderedStack.VOIDinitINTINT(thisRef,x0,x1);
        return;
    },

    jlObjectnewInstance : function(thisRef) {
        var __label__ = null;
        var var0 = thisRef.ojcVec3newInstance(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6b3397e7
        return var0;
    },

    ojcVec3newInstance : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcVec3.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec3.VOIDinit(var0);
        return var0;
    },

    classInitCheck : function() {
        if (!ojpnDefaultWorldPool$9.__initialized) {
            ojpnDefaultWorldPool$9.__initialized = true;
            var thePrototype = ojpnDefaultWorldPool$9.Create.prototype;
            thePrototype.instanceOf = ojpnDefaultWorldPool$9.instanceOf;
            thePrototype.ClassgetClass = ojpnDefaultWorldPool$9.ClassgetClass;
            thePrototype.ojcVec3newInstance = ojpnDefaultWorldPool$9.ojcVec3newInstance;
            thePrototype.jlObjectnewInstance = ojpnDefaultWorldPool$9.jlObjectnewInstance;
            thePrototype.VOIDpushINT = ojpnOrderedStack.VOIDpushINT;
            thePrototype.jlObjectpop = ojpnOrderedStack.jlObjectpop;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojpnOrderedStack.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var ojpnDefaultWorldPool$10 = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 48,
    __implementedTypes : [1,48,46],
    $assertionsDisabled : false, // declared in org.jbox2d.pooling.normal.OrderedStack

    Create : function() {
        this.size = 0; // declared in org.jbox2d.pooling.normal.OrderedStack
        this.pool = null; // declared in org.jbox2d.pooling.normal.OrderedStack
        this.index = 0; // declared in org.jbox2d.pooling.normal.OrderedStack
        this.container = null; // declared in org.jbox2d.pooling.normal.OrderedStack
        this.this$0 = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool$10
    },

    instanceOf : function(aType) {
        return ojpnDefaultWorldPool$10.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojpnDefaultWorldPool$10;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitojpnDefaultWorldPoolINTINT : function(thisRef,p1,x0,x1) {
        var __label__ = null;
        thisRef.this$0 = p1;
        ojpnOrderedStack.VOIDinitINTINT(thisRef,x0,x1);
        return;
    },

    jlObjectnewInstance : function(thisRef) {
        var __label__ = null;
        var var0 = thisRef.ojcMat22newInstance(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5295c2b4
        return var0;
    },

    ojcMat22newInstance : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcMat22.Create(); // type is REFERENCE value type is REFERENCE
        ojcMat22.VOIDinit(var0);
        return var0;
    },

    classInitCheck : function() {
        if (!ojpnDefaultWorldPool$10.__initialized) {
            ojpnDefaultWorldPool$10.__initialized = true;
            var thePrototype = ojpnDefaultWorldPool$10.Create.prototype;
            thePrototype.instanceOf = ojpnDefaultWorldPool$10.instanceOf;
            thePrototype.ClassgetClass = ojpnDefaultWorldPool$10.ClassgetClass;
            thePrototype.ojcMat22newInstance = ojpnDefaultWorldPool$10.ojcMat22newInstance;
            thePrototype.jlObjectnewInstance = ojpnDefaultWorldPool$10.jlObjectnewInstance;
            thePrototype.VOIDpushINT = ojpnOrderedStack.VOIDpushINT;
            thePrototype.jlObjectpop = ojpnOrderedStack.jlObjectpop;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojpnOrderedStack.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var ojpnDefaultWorldPool$11 = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 49,
    __implementedTypes : [49,1,46],
    $assertionsDisabled : false, // declared in org.jbox2d.pooling.normal.OrderedStack

    Create : function() {
        this.size = 0; // declared in org.jbox2d.pooling.normal.OrderedStack
        this.pool = null; // declared in org.jbox2d.pooling.normal.OrderedStack
        this.index = 0; // declared in org.jbox2d.pooling.normal.OrderedStack
        this.container = null; // declared in org.jbox2d.pooling.normal.OrderedStack
        this.this$0 = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool$11
    },

    instanceOf : function(aType) {
        return ojpnDefaultWorldPool$11.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojpnDefaultWorldPool$11;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitojpnDefaultWorldPoolINTINT : function(thisRef,p1,x0,x1) {
        var __label__ = null;
        thisRef.this$0 = p1;
        ojpnOrderedStack.VOIDinitINTINT(thisRef,x0,x1);
        return;
    },

    jlObjectnewInstance : function(thisRef) {
        var __label__ = null;
        var var0 = thisRef.ojcAABBnewInstance(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@713584ed
        return var0;
    },

    ojcAABBnewInstance : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcAABB.Create(); // type is REFERENCE value type is REFERENCE
        ojcAABB.VOIDinit(var0);
        return var0;
    },

    classInitCheck : function() {
        if (!ojpnDefaultWorldPool$11.__initialized) {
            ojpnDefaultWorldPool$11.__initialized = true;
            var thePrototype = ojpnDefaultWorldPool$11.Create.prototype;
            thePrototype.instanceOf = ojpnDefaultWorldPool$11.instanceOf;
            thePrototype.ClassgetClass = ojpnDefaultWorldPool$11.ClassgetClass;
            thePrototype.ojcAABBnewInstance = ojpnDefaultWorldPool$11.ojcAABBnewInstance;
            thePrototype.jlObjectnewInstance = ojpnDefaultWorldPool$11.jlObjectnewInstance;
            thePrototype.VOIDpushINT = ojpnOrderedStack.VOIDpushINT;
            thePrototype.jlObjectpop = ojpnOrderedStack.jlObjectpop;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojpnOrderedStack.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var ojpnDefaultWorldPool$12 = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 50,
    __implementedTypes : [50,1,46],
    $assertionsDisabled : false, // declared in org.jbox2d.pooling.normal.OrderedStack

    Create : function() {
        this.size = 0; // declared in org.jbox2d.pooling.normal.OrderedStack
        this.pool = null; // declared in org.jbox2d.pooling.normal.OrderedStack
        this.index = 0; // declared in org.jbox2d.pooling.normal.OrderedStack
        this.container = null; // declared in org.jbox2d.pooling.normal.OrderedStack
        this.this$0 = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool$12
    },

    instanceOf : function(aType) {
        return ojpnDefaultWorldPool$12.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojpnDefaultWorldPool$12;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitojpnDefaultWorldPoolINTINT : function(thisRef,p1,x0,x1) {
        var __label__ = null;
        thisRef.this$0 = p1;
        ojpnOrderedStack.VOIDinitINTINT(thisRef,x0,x1);
        return;
    },

    jlObjectnewInstance : function(thisRef) {
        var __label__ = null;
        var var0 = thisRef.ojcRotnewInstance(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@60023f7
        return var0;
    },

    ojcRotnewInstance : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcRot.Create(); // type is REFERENCE value type is REFERENCE
        ojcRot.VOIDinit(var0);
        return var0;
    },

    classInitCheck : function() {
        if (!ojpnDefaultWorldPool$12.__initialized) {
            ojpnDefaultWorldPool$12.__initialized = true;
            var thePrototype = ojpnDefaultWorldPool$12.Create.prototype;
            thePrototype.instanceOf = ojpnDefaultWorldPool$12.instanceOf;
            thePrototype.ClassgetClass = ojpnDefaultWorldPool$12.ClassgetClass;
            thePrototype.ojcRotnewInstance = ojpnDefaultWorldPool$12.ojcRotnewInstance;
            thePrototype.jlObjectnewInstance = ojpnDefaultWorldPool$12.jlObjectnewInstance;
            thePrototype.VOIDpushINT = ojpnOrderedStack.VOIDpushINT;
            thePrototype.jlObjectpop = ojpnOrderedStack.jlObjectpop;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojpnOrderedStack.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var ojpnDefaultWorldPool$13 = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 51,
    __implementedTypes : [51,1,46],
    $assertionsDisabled : false, // declared in org.jbox2d.pooling.normal.OrderedStack

    Create : function() {
        this.size = 0; // declared in org.jbox2d.pooling.normal.OrderedStack
        this.pool = null; // declared in org.jbox2d.pooling.normal.OrderedStack
        this.index = 0; // declared in org.jbox2d.pooling.normal.OrderedStack
        this.container = null; // declared in org.jbox2d.pooling.normal.OrderedStack
        this.this$0 = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool$13
    },

    instanceOf : function(aType) {
        return ojpnDefaultWorldPool$13.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojpnDefaultWorldPool$13;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitojpnDefaultWorldPoolINTINT : function(thisRef,p1,x0,x1) {
        var __label__ = null;
        thisRef.this$0 = p1;
        ojpnOrderedStack.VOIDinitINTINT(thisRef,x0,x1);
        return;
    },

    jlObjectnewInstance : function(thisRef) {
        var __label__ = null;
        var var0 = thisRef.ojcMat33newInstance(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1d4221bc
        return var0;
    },

    ojcMat33newInstance : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcMat33.Create(); // type is REFERENCE value type is REFERENCE
        ojcMat33.VOIDinit(var0);
        return var0;
    },

    classInitCheck : function() {
        if (!ojpnDefaultWorldPool$13.__initialized) {
            ojpnDefaultWorldPool$13.__initialized = true;
            var thePrototype = ojpnDefaultWorldPool$13.Create.prototype;
            thePrototype.instanceOf = ojpnDefaultWorldPool$13.instanceOf;
            thePrototype.ClassgetClass = ojpnDefaultWorldPool$13.ClassgetClass;
            thePrototype.ojcMat33newInstance = ojpnDefaultWorldPool$13.ojcMat33newInstance;
            thePrototype.jlObjectnewInstance = ojpnDefaultWorldPool$13.jlObjectnewInstance;
            thePrototype.VOIDpushINT = ojpnOrderedStack.VOIDpushINT;
            thePrototype.jlObjectpop = ojpnOrderedStack.jlObjectpop;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojpnOrderedStack.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var ojcDistance = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 52,
    __implementedTypes : [52,1],
    $assertionsDisabled : false, // declared in org.jbox2d.collision.Distance
    GJK_CALLS : 0, // declared in org.jbox2d.collision.Distance
    GJK_ITERS : 0, // declared in org.jbox2d.collision.Distance
    GJK_MAX_ITERS : 0, // declared in org.jbox2d.collision.Distance

    Create : function() {
        this.simplex = null; // declared in org.jbox2d.collision.Distance
        this.saveA = null; // declared in org.jbox2d.collision.Distance
        this.saveB = null; // declared in org.jbox2d.collision.Distance
        this.closestPoint = null; // declared in org.jbox2d.collision.Distance
        this.d = null; // declared in org.jbox2d.collision.Distance
        this.temp = null; // declared in org.jbox2d.collision.Distance
        this.normal = null; // declared in org.jbox2d.collision.Distance
    },

    instanceOf : function(aType) {
        return ojcDistance.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcDistance;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcDistance.BOOLEANdesiredAssertionStatus(ojcDistance); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_9_13 : for(;;) switch (__label__) {
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_9_13;
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_9_13;
        }
        ojcDistance.$assertionsDisabled = var1;
        ojcDistance.GJK_CALLS = 0;
        ojcDistance.GJK_ITERS = 0;
        ojcDistance.GJK_MAX_ITERS = 20;
        return;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcDistance$Simplex.Create(); // type is REFERENCE value type is REFERENCE
        ojcDistance$Simplex.VOIDinitojcDistanceojcDistance$1(var0,thisRef,null);
        thisRef.simplex = var0;
        var var1 = bytecoder.newArray(3,0); // type is REFERENCE value type is REFERENCE
        thisRef.saveA = var1;
        var var2 = bytecoder.newArray(3,0); // type is REFERENCE value type is REFERENCE
        thisRef.saveB = var2;
        var var3 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var3);
        thisRef.closestPoint = var3;
        var var4 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var4);
        thisRef.d = var4;
        var var5 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var5);
        thisRef.temp = var5;
        var var6 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var6);
        thisRef.normal = var6;
        return;
    },

    VOIDdistanceojcDistanceOutputojcDistance$SimplexCacheojcDistanceInput : function(thisRef,output,cache,input) {
        var local_9_INT = null; // type is INT # of inits = 4
        var local_13_INT = null; // type is INT # of inits = 3
        var local_13_FLOAT = null; // type is FLOAT # of inits = 1
        var local_10_FLOAT = null; // type is FLOAT # of inits = 4
        var local_7_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_15_INT = null; // type is INT # of inits = 3
        var local_14_INT = null; // type is INT # of inits = 3
        var local_13_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 4
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_8_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_12_INT = null; // type is INT # of inits = 5
        var local_14_FLOAT = null; // type is FLOAT # of inits = 1
        var local_11_FLOAT = null; // type is FLOAT # of inits = 2
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 4
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var1 = (ojcDistance.GJK_CALLS + 1); // type is INT value type is INT
            ojcDistance.GJK_CALLS = var1;
            local_4_REFERENCE = input.proxyA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@a500d2d
            local_5_REFERENCE = input.proxyB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@69ebf406
            local_6_REFERENCE = input.transformA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@20e3f573
            local_7_REFERENCE = input.transformB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4fac8482
            thisRef.simplex.VOIDreadCacheojcDistance$SimplexCacheojcDistance$DistanceProxyojcTransformojcDistance$DistanceProxyojcTransform(thisRef.simplex,cache,local_4_REFERENCE,local_6_REFERENCE,local_5_REFERENCE,local_7_REFERENCE);
            local_8_REFERENCE = thisRef.simplex.vertices; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@451fd13f
            local_9_INT = 0; // type is INT value type is INT
            thisRef.simplex.VOIDgetClosestPointojcVec2(thisRef.simplex,thisRef.closestPoint);
            var var23 = thisRef.closestPoint.FLOATlengthSquared(thisRef.closestPoint); // type is FLOAT value type is FLOAT
            local_10_FLOAT = var23; // type is FLOAT value type is FLOAT
            local_11_FLOAT = local_10_FLOAT; // type is FLOAT value type is FLOAT
            local_12_INT = 0; // type is INT value type is INT
            __label__ = 87;
            }
        $L_87 : for (;;) {
            $S_87 : {
            // NORMAL
                var var31 = local_12_INT; // type is INT value type is INT
                var var32 = ojcDistance.GJK_MAX_ITERS; // type is INT value type is INT
                if ((var31 >= var32)) {
                    __label__ = 524;
                    break $S_87;
                }
                __label__ = 95;
                }
            $M_524_95 : for(;;) switch (__label__) {
                case 95 :
                // NORMAL
                    $S_95 : {
                    // NORMAL
                        local_9_INT = thisRef.simplex.m_count; // type is INT value type is INT
                        local_13_INT = 0; // type is INT value type is INT
                        __label__ = 107;
                        }
                    $L_107 : for (;;) {
                        $S_107 : {
                        // NORMAL
                            var var38 = local_13_INT; // type is INT value type is INT
                            var var39 = local_9_INT; // type is INT value type is INT
                            if ((var38 >= var39)) {
                                __label__ = 150;
                                break $S_107;
                            }
                            __label__ = 114;
                            }
                        for(;;) switch (__label__) {
                            case 114 :
                            // NORMAL
                                var var193 = thisRef.saveA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@73e2465e
                                var var194 = local_13_INT; // type is INT value type is INT
                                var var197 = local_8_REFERENCE.data[local_13_INT]; // type is REFERENCE value type is REFERENCE
                                var var198 = var197.indexA; // type is INT value type is INT
                                var193.data[var194] = var198;
                                var var199 = thisRef.saveB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@4c156d3c
                                var var200 = local_13_INT; // type is INT value type is INT
                                var var203 = local_8_REFERENCE.data[local_13_INT]; // type is REFERENCE value type is REFERENCE
                                var var204 = var203.indexB; // type is INT value type is INT
                                var199.data[var200] = var204;
                                local_13_INT = (local_13_INT + 1); // type is INT value type is INT
                                __label__ = 107;
                                continue $L_107;
                            case 150 :
                            // NORMAL
                                $S_150 : {
                                // NORMAL
                                    var var41 = thisRef.simplex.m_count; // type is INT value type is INT
                                    if (var41 < 1 || var41 > 3) {
                                     __label__ = 207;
                                    break $S_150;
                                    }
                                    switch(var41 - 1) {
                                     case 0:
                                         __label__ = 184;
                                    break $S_150;
                                     case 1:
                                         __label__ = 187;
                                    break $S_150;
                                     case 2:
                                         __label__ = 197;
                                    break $S_150;
                                    }
                                    throw 'Illegal jump target!';
                                    }
                                $M_184_197_187_207 : for(;;) switch (__label__) {
                                    case 187 :
                                    // NORMAL
                                        thisRef.simplex.VOIDsolve2(thisRef.simplex);
                                        break $M_184_197_187_207;
                                    case 207 :
                                    // NORMAL
                                        $S_207 : {
                                        // NORMAL
                                            var var42 = ojcDistance.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                                            if ((var42 != 0)) {
                                                break $M_184_197_187_207;
                                            }
                                            }
                                        var var43 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                        jlAssertionError.VOIDinit(var43);
                                        throw var43;
                                    case 184 :
                                    // NORMAL
                                        break $M_184_197_187_207;
                                    case 197 :
                                    // NORMAL
                                        thisRef.simplex.VOIDsolve3(thisRef.simplex);
                                        break $M_184_197_187_207;
                                }
                                $S_221 : {
                                // NORMAL
                                    var var47 = thisRef.simplex.m_count; // type is INT value type is INT
                                    if ((var47 != 3)) {
                                        __label__ = 235;
                                        break $S_221;
                                    }
                                    __label__ = 232;
                                    }
                                for(;;) switch (__label__) {
                                    case 235 :
                                    // NORMAL
                                        $S_235 : {
                                        // NORMAL
                                            thisRef.simplex.VOIDgetClosestPointojcVec2(thisRef.simplex,thisRef.closestPoint);
                                            var var51 = thisRef.closestPoint.FLOATlengthSquared(thisRef.closestPoint); // type is FLOAT value type is FLOAT
                                            local_11_FLOAT = var51; // type is FLOAT value type is FLOAT
                                            var var53 = local_11_FLOAT; // type is FLOAT value type is FLOAT
                                            var var54 = local_10_FLOAT; // type is FLOAT value type is FLOAT
                                            if ((var53 < var54)) {
                                                break $S_235;
                                            }
                                            }
                                        $S_263 : {
                                        // NORMAL
                                            local_10_FLOAT = local_11_FLOAT; // type is FLOAT value type is FLOAT
                                            thisRef.simplex.VOIDgetSearchDirectionojcVec2(thisRef.simplex,thisRef.d);
                                            var var61 = thisRef.d.FLOATlengthSquared(thisRef.d); // type is FLOAT value type is FLOAT
                                            if ((var61 >= 1.4210855E-14)) {
                                                __label__ = 294;
                                                break $S_263;
                                            }
                                            __label__ = 291;
                                            }
                                        for(;;) switch (__label__) {
                                            case 294 :
                                            // NORMAL
                                                $S_294 : {
                                                // NORMAL
                                                    var var66 = local_8_REFERENCE.data[thisRef.simplex.m_count]; // type is REFERENCE value type is REFERENCE
                                                    local_13_REFERENCE = var66; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1c39200e
                                                    var var69 = local_6_REFERENCE.q; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@67b668a8
                                                    var var71 = thisRef.d.ojcVec2negateLocal(thisRef.d); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5c1bcb48
                                                    ojcRot.VOIDmulTransUnsafeojcRotojcVec2ojcVec2(var69,var71,thisRef.temp);
                                                    var var73 = local_13_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1c39200e
                                                    var var76 = local_4_REFERENCE.INTgetSupportojcVec2(local_4_REFERENCE,thisRef.temp); // type is INT value type is INT
                                                    var73.indexA = var76;
                                                    var var77 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6a5de0e5
                                                    var var81 = local_4_REFERENCE.ojcVec2getVertexINT(local_4_REFERENCE,local_13_REFERENCE.indexA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3daab623
                                                    ojcTransform.VOIDmulToOutUnsafeojcTransformojcVec2ojcVec2(var77,var81,local_13_REFERENCE.wA);
                                                    var var85 = local_7_REFERENCE.q; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5ab15027
                                                    var var87 = thisRef.d.ojcVec2negateLocal(thisRef.d); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@e1690f1
                                                    ojcRot.VOIDmulTransUnsafeojcRotojcVec2ojcVec2(var85,var87,thisRef.temp);
                                                    var var89 = local_13_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1c39200e
                                                    var var92 = local_5_REFERENCE.INTgetSupportojcVec2(local_5_REFERENCE,thisRef.temp); // type is INT value type is INT
                                                    var89.indexB = var92;
                                                    var var93 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@51d4a1ef
                                                    var var97 = local_5_REFERENCE.ojcVec2getVertexINT(local_5_REFERENCE,local_13_REFERENCE.indexB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@c554bf0
                                                    ojcTransform.VOIDmulToOutUnsafeojcTransformojcVec2ojcVec2(var93,var97,local_13_REFERENCE.wB);
                                                    var var104 = local_13_REFERENCE.w.ojcVec2setojcVec2(local_13_REFERENCE.w,local_13_REFERENCE.wB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@64a6eff7
                                                    var var107 = var104.ojcVec2subLocalojcVec2(var104,local_13_REFERENCE.wA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@34c6bb2c
                                                    local_12_INT = (local_12_INT + 1); // type is INT value type is INT
                                                    var var109 = (ojcDistance.GJK_ITERS + 1); // type is INT value type is INT
                                                    ojcDistance.GJK_ITERS = var109;
                                                    local_14_INT = 0; // type is INT value type is INT
                                                    local_15_INT = 0; // type is INT value type is INT
                                                    __label__ = 451;
                                                    }
                                                $L_451 : for (;;) {
                                                    $S_451 : {
                                                    // NORMAL
                                                        var var114 = local_15_INT; // type is INT value type is INT
                                                        var var115 = local_9_INT; // type is INT value type is INT
                                                        if ((var114 >= var115)) {
                                                            __label__ = 500;
                                                            break $S_451;
                                                        }
                                                        __label__ = 458;
                                                        }
                                                    $M_458_500 : for(;;) switch (__label__) {
                                                        case 458 :
                                                        // NORMAL
                                                            $S_458 : {
                                                            // NORMAL
                                                                var var117 = local_13_REFERENCE.indexA; // type is INT value type is INT
                                                                var var120 = thisRef.saveA.data[local_15_INT]; // type is INT value type is INT
                                                                if ((var117 != var120)) {
                                                                    __label__ = 494;
                                                                    break $S_458;
                                                                }
                                                                __label__ = 473;
                                                                }
                                                            $M_494_473 : for(;;) switch (__label__) {
                                                                case 494 :
                                                                // NORMAL
                                                                    local_15_INT = (local_15_INT + 1); // type is INT value type is INT
                                                                    __label__ = 451;
                                                                    continue $L_451;
                                                                case 473 :
                                                                // NORMAL
                                                                    $S_473 : {
                                                                    // NORMAL
                                                                        var var122 = local_13_REFERENCE.indexB; // type is INT value type is INT
                                                                        var var125 = thisRef.saveB.data[local_15_INT]; // type is INT value type is INT
                                                                        if ((var122 != var125)) {
                                                                            __label__ = 494;
                                                                            continue $M_494_473;
                                                                        }
                                                                        }
                                                                    local_14_INT = 1; // type is INT value type is INT
                                                                    __label__ = 500;
                                                                    continue $M_458_500;
                                                            }
                                                        case 500 :
                                                        // NORMAL
                                                            $S_500 : {
                                                            // NORMAL
                                                                var var127 = local_14_INT; // type is INT value type is INT
                                                                if ((var127 == 0)) {
                                                                    __label__ = 508;
                                                                    break $S_500;
                                                                }
                                                                __label__ = 505;
                                                                }
                                                            for(;;) switch (__label__) {
                                                                case 505 :
                                                                // NORMAL
                                                                    __label__ = 524;
                                                                    continue $M_524_95;
                                                                case 508 :
                                                                // NORMAL
                                                                    var var190 = thisRef.simplex; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@e6d345d
                                                                    var var192 = (var190.m_count + 1); // type is INT value type is INT
                                                                    var190.m_count = var192;
                                                                    __label__ = 87;
                                                                    continue $L_87;
                                                            }
                                                    }
                                                }
                                            case 291 :
                                            // NORMAL
                                                __label__ = 524;
                                                continue $M_524_95;
                                        }
                                    case 232 :
                                    // NORMAL
                                        __label__ = 524;
                                        continue $M_524_95;
                                }
                        }
                    }
                case 524 :
                // NORMAL
                    $S_524 : {
                    // NORMAL
                        var var130 = ojcMathUtils.INTmaxINTINT(ojcDistance.GJK_MAX_ITERS,local_12_INT); // type is INT value type is INT
                        ojcDistance.GJK_MAX_ITERS = var130;
                        thisRef.simplex.VOIDgetWitnessPointsojcVec2ojcVec2(thisRef.simplex,output.pointA,output.pointB);
                        var var136 = ojcMathUtils.FLOATdistanceojcVec2ojcVec2(output.pointA,output.pointB); // type is FLOAT value type is FLOAT
                        output.distance = var136;
                        var var137 = local_12_INT; // type is INT value type is INT
                        output.iterations = var137;
                        thisRef.simplex.VOIDwriteCacheojcDistance$SimplexCache(thisRef.simplex,cache);
                        var var139 = input.useRadii; // type is BOOLEAN value type is BOOLEAN
                        if ((var139 == 0)) {
                            return;
                        }
                        }
                    $S_586 : {
                    // NORMAL
                        local_13_FLOAT = local_4_REFERENCE.m_radius; // type is FLOAT value type is FLOAT
                        local_14_FLOAT = local_5_REFERENCE.m_radius; // type is FLOAT value type is FLOAT
                        var var148 = output.distance; // type is FLOAT value type is FLOAT
                        var var151 = (local_13_FLOAT + local_14_FLOAT); // type is FLOAT value type is FLOAT
                        if ((var148 <= var151)) {
                            __label__ = 725;
                            break $S_586;
                        }
                        __label__ = 613;
                        }
                    $M_613_725 : for(;;) switch (__label__) {
                        case 613 :
                        // NORMAL
                            $S_613 : {
                            // NORMAL
                                var var153 = output.distance; // type is FLOAT value type is FLOAT
                                if ((var153 <= 1.1920929E-7)) {
                                    __label__ = 725;
                                    continue $M_613_725;
                                }
                                }
                            var var159 = (output.distance - (local_13_FLOAT + local_14_FLOAT)); // type is FLOAT value type is FLOAT
                            output.distance = var159;
                            var var162 = thisRef.normal.ojcVec2setojcVec2(thisRef.normal,output.pointB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2841f4ab
                            var var164 = var162.ojcVec2subLocalojcVec2(var162,output.pointA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7bcb7f03
                            var var166 = thisRef.normal.FLOATnormalize(thisRef.normal); // type is FLOAT value type is FLOAT
                            var var169 = thisRef.temp.ojcVec2setojcVec2(thisRef.temp,thisRef.normal); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7ad5b48d
                            var var171 = var169.ojcVec2mulLocalFLOAT(var169,local_13_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1d7da856
                            var var174 = output.pointA.ojcVec2addLocalojcVec2(output.pointA,thisRef.temp); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3abee3fe
                            var var177 = thisRef.temp.ojcVec2setojcVec2(thisRef.temp,thisRef.normal); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1aadb0cd
                            var var179 = var177.ojcVec2mulLocalFLOAT(var177,local_14_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4d0b1ec9
                            var var182 = output.pointB.ojcVec2subLocalojcVec2(output.pointB,thisRef.temp); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3dc42026
                            return;
                        case 725 :
                        // NORMAL
                            var var185 = output.pointA.ojcVec2addLocalojcVec2(output.pointA,output.pointB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@70a89573
                            var var186 = var185.ojcVec2mulLocalFLOAT(var185,0.5); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7f47873
                            var var189 = output.pointB.ojcVec2setojcVec2(output.pointB,output.pointA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@129cc312
                            output.distance = 0.0;
                            return;
                    }
            }
        }
    },

    classInitCheck : function() {
        if (!ojcDistance.__initialized) {
            ojcDistance.__initialized = true;
            var thePrototype = ojcDistance.Create.prototype;
            thePrototype.instanceOf = ojcDistance.instanceOf;
            thePrototype.ClassgetClass = ojcDistance.ClassgetClass;
            thePrototype.VOIDdistanceojcDistanceOutputojcDistance$SimplexCacheojcDistanceInput = ojcDistance.VOIDdistanceojcDistanceOutputojcDistance$SimplexCacheojcDistanceInput;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            ojcDistance.VOIDclinit();
        }
    },

};

var ojcDistance$Simplex = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 53,
    __implementedTypes : [53,1],
    $assertionsDisabled : false, // declared in org.jbox2d.collision.Distance$Simplex

    Create : function() {
        this.this$0 = null; // declared in org.jbox2d.collision.Distance$Simplex
        this.m_v1 = null; // declared in org.jbox2d.collision.Distance$Simplex
        this.m_v2 = null; // declared in org.jbox2d.collision.Distance$Simplex
        this.m_v3 = null; // declared in org.jbox2d.collision.Distance$Simplex
        this.vertices = null; // declared in org.jbox2d.collision.Distance$Simplex
        this.e12 = null; // declared in org.jbox2d.collision.Distance$Simplex
        this.case2 = null; // declared in org.jbox2d.collision.Distance$Simplex
        this.case22 = null; // declared in org.jbox2d.collision.Distance$Simplex
        this.case3 = null; // declared in org.jbox2d.collision.Distance$Simplex
        this.case33 = null; // declared in org.jbox2d.collision.Distance$Simplex
        this.e13 = null; // declared in org.jbox2d.collision.Distance$Simplex
        this.e23 = null; // declared in org.jbox2d.collision.Distance$Simplex
        this.w1 = null; // declared in org.jbox2d.collision.Distance$Simplex
        this.w2 = null; // declared in org.jbox2d.collision.Distance$Simplex
        this.w3 = null; // declared in org.jbox2d.collision.Distance$Simplex
        this.m_count = 0; // declared in org.jbox2d.collision.Distance$Simplex
    },

    instanceOf : function(aType) {
        return ojcDistance$Simplex.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcDistance$Simplex;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcDistance.BOOLEANdesiredAssertionStatus(ojcDistance); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_9_13 : for(;;) switch (__label__) {
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_9_13;
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_9_13;
        }
        ojcDistance$Simplex.$assertionsDisabled = var1;
        return;
    },

    VOIDinitojcDistanceojcDistance$1 : function(thisRef,x0,x1) {
        var __label__ = null;
        ojcDistance$Simplex.VOIDinitojcDistance(thisRef,x0);
        return;
    },

    VOIDinitojcDistance : function(thisRef,p1) {
        var __label__ = null;
        thisRef.this$0 = p1;
        var var0 = new ojcDistance$SimplexVertex.Create(); // type is REFERENCE value type is REFERENCE
        ojcDistance$SimplexVertex.VOIDinitojcDistanceojcDistance$1(var0,thisRef.this$0,null);
        thisRef.m_v1 = var0;
        var var2 = new ojcDistance$SimplexVertex.Create(); // type is REFERENCE value type is REFERENCE
        ojcDistance$SimplexVertex.VOIDinitojcDistanceojcDistance$1(var2,thisRef.this$0,null);
        thisRef.m_v2 = var2;
        var var4 = new ojcDistance$SimplexVertex.Create(); // type is REFERENCE value type is REFERENCE
        ojcDistance$SimplexVertex.VOIDinitojcDistanceojcDistance$1(var4,thisRef.this$0,null);
        thisRef.m_v3 = var4;
        var var6 = bytecoder.newArray(3,null); // type is REFERENCE value type is REFERENCE
        var var7 = thisRef.m_v1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3e885661
        var6.data[0] = var7;
        var var8 = thisRef.m_v2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@aebf0fd
        var6.data[1] = var8;
        var var9 = thisRef.m_v3; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@404d8a29
        var6.data[2] = var9;
        thisRef.vertices = var6;
        var var10 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var10);
        thisRef.e12 = var10;
        var var11 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var11);
        thisRef.case2 = var11;
        var var12 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var12);
        thisRef.case22 = var12;
        var var13 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var13);
        thisRef.case3 = var13;
        var var14 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var14);
        thisRef.case33 = var14;
        var var15 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var15);
        thisRef.e13 = var15;
        var var16 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var16);
        thisRef.e23 = var16;
        var var17 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var17);
        thisRef.w1 = var17;
        var var18 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var18);
        thisRef.w2 = var18;
        var var19 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var19);
        thisRef.w3 = var19;
        return;
    },

    VOIDreadCacheojcDistance$SimplexCacheojcDistance$DistanceProxyojcTransformojcDistance$DistanceProxyojcTransform : function(thisRef,cache,proxyA,transformA,proxyB,transformB) {
        var local_7_FLOAT = null; // type is FLOAT # of inits = 1
        var local_6_FLOAT = null; // type is FLOAT # of inits = 1
        var local_6_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcDistance$Simplex.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 22;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_22_6 : for(;;) switch (__label__) {
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    var var1 = cache.count; // type is INT value type is INT
                    if ((var1 <= 3)) {
                        __label__ = 22;
                        continue $M_22_6;
                    }
                    }
                var var2 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var2);
                throw var2;
            case 22 :
            // NORMAL
                $S_22 : {
                // NORMAL
                    var var3 = cache.count; // type is INT value type is INT
                    thisRef.m_count = var3;
                    local_6_INT = 0; // type is INT value type is INT
                    __label__ = 33;
                    }
                $L_33 : for (;;) {
                    $S_33 : {
                    // NORMAL
                        var var6 = local_6_INT; // type is INT value type is INT
                        var var7 = thisRef.m_count; // type is INT value type is INT
                        if ((var6 >= var7)) {
                            __label__ = 155;
                            break $S_33;
                        }
                        __label__ = 42;
                        }
                    for(;;) switch (__label__) {
                        case 42 :
                        // NORMAL
                            var var10 = thisRef.vertices.data[local_6_INT]; // type is REFERENCE value type is REFERENCE
                            var local_7_REFERENCE = var10; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@8f3cf81
                            var var12 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@8f3cf81
                            var var15 = cache.indexA.data[local_6_INT]; // type is INT value type is INT
                            var12.indexA = var15;
                            var var16 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@8f3cf81
                            var var19 = cache.indexB.data[local_6_INT]; // type is INT value type is INT
                            var16.indexB = var19;
                            var var22 = proxyA.ojcVec2getVertexINT(proxyA,local_7_REFERENCE.indexA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@53964bd8
                            var local_8_REFERENCE = var22; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5389c4a2
                            var var26 = proxyB.ojcVec2getVertexINT(proxyB,local_7_REFERENCE.indexB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6227ba9
                            var local_9_REFERENCE = var26; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@103b232b
                            ojcTransform.VOIDmulToOutUnsafeojcTransformojcVec2ojcVec2(transformA,local_8_REFERENCE,local_7_REFERENCE.wA);
                            ojcTransform.VOIDmulToOutUnsafeojcTransformojcVec2ojcVec2(transformB,local_9_REFERENCE,local_7_REFERENCE.wB);
                            var var38 = local_7_REFERENCE.w.ojcVec2setojcVec2(local_7_REFERENCE.w,local_7_REFERENCE.wB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7192627f
                            var var41 = var38.ojcVec2subLocalojcVec2(var38,local_7_REFERENCE.wA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6ca3143b
                            var var42 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@8f3cf81
                            var42.a = 0.0;
                            local_6_INT = (local_6_INT + 1); // type is INT value type is INT
                            __label__ = 33;
                            continue $L_33;
                        case 155 :
                        // NORMAL
                            $S_155 : {
                            // NORMAL
                                var var43 = thisRef.m_count; // type is INT value type is INT
                                if ((var43 <= 1)) {
                                    __label__ = 209;
                                    break $S_155;
                                }
                                __label__ = 163;
                                }
                            $M_163_209 : for(;;) switch (__label__) {
                                case 209 :
                                // NORMAL
                                    $S_209 : {
                                    // NORMAL
                                        var var60 = thisRef.m_count; // type is INT value type is INT
                                        if ((var60 != 0)) {
                                            return;
                                        }
                                        }
                                    var var62 = thisRef.vertices.data[0]; // type is REFERENCE value type is REFERENCE
                                    var local_6_REFERENCE = var62; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@79c9c535
                                    var var64 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@79c9c535
                                    var64.indexA = 0;
                                    var var65 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@79c9c535
                                    var65.indexB = 0;
                                    var var66 = proxyA.ojcVec2getVertexINT(proxyA,0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3022935c
                                    var local_7_REFERENCE = var66; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@52419ebd
                                    var var67 = proxyB.ojcVec2getVertexINT(proxyB,0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@26b75a02
                                    var local_8_REFERENCE = var67; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1160c38c
                                    ojcTransform.VOIDmulToOutUnsafeojcTransformojcVec2ojcVec2(transformA,local_7_REFERENCE,local_6_REFERENCE.wA);
                                    ojcTransform.VOIDmulToOutUnsafeojcTransformojcVec2ojcVec2(transformB,local_8_REFERENCE,local_6_REFERENCE.wB);
                                    var var78 = local_6_REFERENCE.w.ojcVec2setojcVec2(local_6_REFERENCE.w,local_6_REFERENCE.wB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@357c1a8f
                                    var var81 = var78.ojcVec2subLocalojcVec2(var78,local_6_REFERENCE.wA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6b96deeb
                                    thisRef.m_count = 1;
                                    return;
                                case 163 :
                                // NORMAL
                                    $S_163 : {
                                    // NORMAL
                                        local_6_FLOAT = cache.metric; // type is FLOAT value type is FLOAT
                                        var var47 = thisRef.FLOATgetMetric(thisRef); // type is FLOAT value type is FLOAT
                                        local_7_FLOAT = var47; // type is FLOAT value type is FLOAT
                                        var var50 = local_7_FLOAT; // type is FLOAT value type is FLOAT
                                        var var52 = (0.5 * local_6_FLOAT); // type is FLOAT value type is FLOAT
                                        if ((var50 < var52)) {
                                            __label__ = 204;
                                            break $S_163;
                                        }
                                        __label__ = 186;
                                        }
                                    $M_186_204 : for(;;) switch (__label__) {
                                        case 186 :
                                        // NORMAL
                                            $S_186 : {
                                            // NORMAL
                                                var var55 = (2.0 * local_6_FLOAT); // type is FLOAT value type is FLOAT
                                                var var56 = local_7_FLOAT; // type is FLOAT value type is FLOAT
                                                if ((var55 < var56)) {
                                                    __label__ = 204;
                                                    continue $M_186_204;
                                                }
                                                }
                                            var var58 = local_7_FLOAT; // type is FLOAT value type is FLOAT
                                            if ((var58 >= 1.1920929E-7)) {
                                                __label__ = 209;
                                                continue $M_163_209;
                                            }
                                            __label__ = 204;
                                            continue $M_186_204;
                                        case 204 :
                                        // NORMAL
                                            thisRef.m_count = 0;
                                            __label__ = 209;
                                            continue $M_163_209;
                                    }
                            }
                    }
                }
        }
    },

    FLOATgetMetric : function(thisRef) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.m_count; // type is INT value type is INT
            if (var0 < 0 || var0 > 3) {
             __label__ = 134;
            break $S_0;
            }
            switch(var0 - 0) {
             case 0:
                 __label__ = 36;
            break $S_0;
             case 1:
                 return 0.0;
             case 2:
                 __label__ = 54;
            break $S_0;
             case 3:
                 __label__ = 72;
            break $S_0;
            }
            throw 'Illegal jump target!';
            }
        for(;;) switch (__label__) {
            case 72 :
            // NORMAL
                var var7 = thisRef.case3.ojcVec2setojcVec2(thisRef.case3,thisRef.m_v2.w); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@373309f1
                var var10 = var7.ojcVec2subLocalojcVec2(var7,thisRef.m_v1.w); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@53eaa90c
                var var14 = thisRef.case33.ojcVec2setojcVec2(thisRef.case33,thisRef.m_v3.w); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@22d8aa41
                var var17 = var14.ojcVec2subLocalojcVec2(var14,thisRef.m_v1.w); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1b59a505
                var var20 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.case3,thisRef.case33); // type is FLOAT value type is FLOAT
                return var20;
            case 36 :
            // NORMAL
                $S_36 : {
                // NORMAL
                    var var1 = ojcDistance$Simplex.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                    if ((var1 != 0)) {
                        return 0.0;
                    }
                    }
                var var2 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var2);
                throw var2;
            case 54 :
            // NORMAL
                var var26 = ojcMathUtils.FLOATdistanceojcVec2ojcVec2(thisRef.m_v1.w,thisRef.m_v2.w); // type is FLOAT value type is FLOAT
                return var26;
            case 134 :
            // NORMAL
                $S_134 : {
                // NORMAL
                    var var3 = ojcDistance$Simplex.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                    if ((var3 != 0)) {
                        return 0.0;
                    }
                    }
                var var21 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var21);
                throw var21;
        }
    },

    VOIDgetClosestPointojcVec2 : function(thisRef,out) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.m_count; // type is INT value type is INT
            if (var0 < 0 || var0 > 3) {
             __label__ = 140;
            break $S_0;
            }
            switch(var0 - 0) {
             case 0:
                 __label__ = 36;
            break $S_0;
             case 1:
                 __label__ = 55;
            break $S_0;
             case 2:
                 __label__ = 68;
            break $S_0;
             case 3:
                 __label__ = 135;
            break $S_0;
            }
            throw 'Illegal jump target!';
            }
        for(;;) switch (__label__) {
            case 68 :
            // NORMAL
                var var6 = thisRef.case22.ojcVec2setojcVec2(thisRef.case22,thisRef.m_v2.w); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7fa5031
                var var9 = var6.ojcVec2mulLocalFLOAT(var6,thisRef.m_v2.a); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5d0d621e
                var var13 = thisRef.case2.ojcVec2setojcVec2(thisRef.case2,thisRef.m_v1.w); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7f109b84
                var var16 = var13.ojcVec2mulLocalFLOAT(var13,thisRef.m_v1.a); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@55ad6781
                var var18 = var16.ojcVec2addLocalojcVec2(var16,thisRef.case22); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@83cedd
                var var20 = out.ojcVec2setojcVec2(out,thisRef.case2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@36a84141
                return;
            case 55 :
            // NORMAL
                var var24 = out.ojcVec2setojcVec2(out,thisRef.m_v1.w); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4d1f30ab
                return;
            case 135 :
            // NORMAL
                out.VOIDsetZero(out);
                return;
            case 36 :
            // NORMAL
                $S_36 : {
                // NORMAL
                    var var1 = ojcDistance$Simplex.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                    if ((var1 != 0)) {
                        __label__ = 50;
                        break $S_36;
                    }
                    __label__ = 42;
                    }
                for(;;) switch (__label__) {
                    case 50 :
                    // NORMAL
                        out.VOIDsetZero(out);
                        return;
                    case 42 :
                    // NORMAL
                        var var21 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                        jlAssertionError.VOIDinit(var21);
                        throw var21;
                }
            case 140 :
            // NORMAL
                $S_140 : {
                // NORMAL
                    var var2 = ojcDistance$Simplex.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                    if ((var2 != 0)) {
                        __label__ = 154;
                        break $S_140;
                    }
                    __label__ = 146;
                    }
                for(;;) switch (__label__) {
                    case 146 :
                    // NORMAL
                        var var25 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                        jlAssertionError.VOIDinit(var25);
                        throw var25;
                    case 154 :
                    // NORMAL
                        out.VOIDsetZero(out);
                        return;
                }
        }
    },

    VOIDsolve2 : function(thisRef) {
        var local_3_FLOAT = null; // type is FLOAT # of inits = 1
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_4_FLOAT = null; // type is FLOAT # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var local_1_REFERENCE = thisRef.m_v1.w; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@eb2b7e3
            local_2_REFERENCE = thisRef.m_v2.w; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@671fb591
            var var8 = thisRef.e12.ojcVec2setojcVec2(thisRef.e12,local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1601743
            var var10 = var8.ojcVec2subLocalojcVec2(var8,local_1_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@76362284
            var var13 = ojcVec2.FLOATdotojcVec2ojcVec2(local_1_REFERENCE,thisRef.e12); // type is FLOAT value type is FLOAT
            local_3_FLOAT = (-var13); // type is FLOAT value type is FLOAT
            var var17 = local_3_FLOAT; // type is FLOAT value type is FLOAT
            if ((var17 > 0.0)) {
                __label__ = 59;
                break $S_0;
            }
            __label__ = 45;
            }
        for(;;) switch (__label__) {
            case 45 :
            // NORMAL
                var var19 = thisRef.m_v1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6d209e0e
                var19.a = 1.0;
                thisRef.m_count = 1;
                return;
            case 59 :
            // NORMAL
                $S_59 : {
                // NORMAL
                    var var22 = ojcVec2.FLOATdotojcVec2ojcVec2(local_2_REFERENCE,thisRef.e12); // type is FLOAT value type is FLOAT
                    local_4_FLOAT = var22; // type is FLOAT value type is FLOAT
                    var var25 = local_4_FLOAT; // type is FLOAT value type is FLOAT
                    if ((var25 > 0.0)) {
                        __label__ = 101;
                        break $S_59;
                    }
                    __label__ = 76;
                    }
                for(;;) switch (__label__) {
                    case 76 :
                    // NORMAL
                        var var41 = thisRef.m_v2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@77890d06
                        var41.a = 1.0;
                        thisRef.m_count = 1;
                        thisRef.m_v1.VOIDsetojcDistance$SimplexVertex(thisRef.m_v1,thisRef.m_v2);
                        return;
                    case 101 :
                    // NORMAL
                        var local_5_FLOAT = (1.0 / (local_4_FLOAT + local_3_FLOAT)); // type is FLOAT value type is FLOAT
                        var var33 = thisRef.m_v1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@76d2c6bb
                        var var36 = (local_4_FLOAT * local_5_FLOAT); // type is FLOAT value type is FLOAT
                        var33.a = var36;
                        var var37 = thisRef.m_v2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@31b7e8e7
                        var var40 = (local_3_FLOAT * local_5_FLOAT); // type is FLOAT value type is FLOAT
                        var37.a = var40;
                        thisRef.m_count = 2;
                        return;
                }
        }
    },

    VOIDsolve3 : function(thisRef) {
        var local_8_FLOAT = null; // type is FLOAT # of inits = 1
        var local_14_FLOAT = null; // type is FLOAT # of inits = 1
        var local_4_FLOAT = null; // type is FLOAT # of inits = 1
        var local_7_FLOAT = null; // type is FLOAT # of inits = 1
        var local_16_FLOAT = null; // type is FLOAT # of inits = 1
        var local_11_FLOAT = null; // type is FLOAT # of inits = 1
        var local_3_FLOAT = null; // type is FLOAT # of inits = 1
        var local_12_FLOAT = null; // type is FLOAT # of inits = 1
        var local_15_FLOAT = null; // type is FLOAT # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var3 = thisRef.w1.ojcVec2setojcVec2(thisRef.w1,thisRef.m_v1.w); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@53c669a3
            var var7 = thisRef.w2.ojcVec2setojcVec2(thisRef.w2,thisRef.m_v2.w); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@9be8fc8
            var var11 = thisRef.w3.ojcVec2setojcVec2(thisRef.w3,thisRef.m_v3.w); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@392b55c
            var var14 = thisRef.e12.ojcVec2setojcVec2(thisRef.e12,thisRef.w2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1a835a3d
            var var16 = var14.ojcVec2subLocalojcVec2(var14,thisRef.w1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7a68a3bf
            var var19 = ojcVec2.FLOATdotojcVec2ojcVec2(thisRef.w1,thisRef.e12); // type is FLOAT value type is FLOAT
            var local_1_FLOAT = var19; // type is FLOAT value type is FLOAT
            var var24 = ojcVec2.FLOATdotojcVec2ojcVec2(thisRef.w2,thisRef.e12); // type is FLOAT value type is FLOAT
            var local_2_FLOAT = var24; // type is FLOAT value type is FLOAT
            local_3_FLOAT = local_2_FLOAT; // type is FLOAT value type is FLOAT
            local_4_FLOAT = (-local_1_FLOAT); // type is FLOAT value type is FLOAT
            var var36 = thisRef.e13.ojcVec2setojcVec2(thisRef.e13,thisRef.w3); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@755a3f5
            var var38 = var36.ojcVec2subLocalojcVec2(var36,thisRef.w1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@117bde16
            var var41 = ojcVec2.FLOATdotojcVec2ojcVec2(thisRef.w1,thisRef.e13); // type is FLOAT value type is FLOAT
            var local_5_FLOAT = var41; // type is FLOAT value type is FLOAT
            var var46 = ojcVec2.FLOATdotojcVec2ojcVec2(thisRef.w3,thisRef.e13); // type is FLOAT value type is FLOAT
            var local_6_FLOAT = var46; // type is FLOAT value type is FLOAT
            local_7_FLOAT = local_6_FLOAT; // type is FLOAT value type is FLOAT
            local_8_FLOAT = (-local_5_FLOAT); // type is FLOAT value type is FLOAT
            var var58 = thisRef.e23.ojcVec2setojcVec2(thisRef.e23,thisRef.w3); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@11292cb6
            var var60 = var58.ojcVec2subLocalojcVec2(var58,thisRef.w2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2e631077
            var var63 = ojcVec2.FLOATdotojcVec2ojcVec2(thisRef.w2,thisRef.e23); // type is FLOAT value type is FLOAT
            var local_9_FLOAT = var63; // type is FLOAT value type is FLOAT
            var var68 = ojcVec2.FLOATdotojcVec2ojcVec2(thisRef.w3,thisRef.e23); // type is FLOAT value type is FLOAT
            var local_10_FLOAT = var68; // type is FLOAT value type is FLOAT
            local_11_FLOAT = local_10_FLOAT; // type is FLOAT value type is FLOAT
            local_12_FLOAT = (-local_9_FLOAT); // type is FLOAT value type is FLOAT
            var var80 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.e12,thisRef.e13); // type is FLOAT value type is FLOAT
            var local_13_FLOAT = var80; // type is FLOAT value type is FLOAT
            var var83 = local_13_FLOAT; // type is FLOAT value type is FLOAT
            var var86 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.w2,thisRef.w3); // type is FLOAT value type is FLOAT
            local_14_FLOAT = (var83 * var86); // type is FLOAT value type is FLOAT
            var var90 = local_13_FLOAT; // type is FLOAT value type is FLOAT
            var var93 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.w3,thisRef.w1); // type is FLOAT value type is FLOAT
            local_15_FLOAT = (var90 * var93); // type is FLOAT value type is FLOAT
            var var97 = local_13_FLOAT; // type is FLOAT value type is FLOAT
            var var100 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.w1,thisRef.w2); // type is FLOAT value type is FLOAT
            local_16_FLOAT = (var97 * var100); // type is FLOAT value type is FLOAT
            var var104 = local_4_FLOAT; // type is FLOAT value type is FLOAT
            if ((var104 > 0.0)) {
                __label__ = 291;
                break $S_0;
            }
            __label__ = 270;
            }
        $M_291_270 : for(;;) switch (__label__) {
            case 291 :
            // NORMAL
                $S_291 : {
                // NORMAL
                    var var108 = local_3_FLOAT; // type is FLOAT value type is FLOAT
                    if ((var108 <= 0.0)) {
                        __label__ = 348;
                        break $S_291;
                    }
                    __label__ = 297;
                    }
                $M_297_348 : for(;;) switch (__label__) {
                    case 297 :
                    // NORMAL
                        $S_297 : {
                        // NORMAL
                            var var110 = local_4_FLOAT; // type is FLOAT value type is FLOAT
                            if ((var110 <= 0.0)) {
                                __label__ = 348;
                                continue $M_297_348;
                            }
                            }
                        $S_304 : {
                        // NORMAL
                            var var112 = local_16_FLOAT; // type is FLOAT value type is FLOAT
                            if ((var112 > 0.0)) {
                                __label__ = 348;
                                continue $M_297_348;
                            }
                            }
                        var local_17_FLOAT = (1.0 / (local_3_FLOAT + local_4_FLOAT)); // type is FLOAT value type is FLOAT
                        var var180 = thisRef.m_v1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4034445
                        var var183 = (local_3_FLOAT * local_17_FLOAT); // type is FLOAT value type is FLOAT
                        var180.a = var183;
                        var var184 = thisRef.m_v2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4bc7b1bd
                        var var187 = (local_4_FLOAT * local_17_FLOAT); // type is FLOAT value type is FLOAT
                        var184.a = var187;
                        thisRef.m_count = 2;
                        return;
                    case 348 :
                    // NORMAL
                        $S_348 : {
                        // NORMAL
                            var var114 = local_7_FLOAT; // type is FLOAT value type is FLOAT
                            if ((var114 <= 0.0)) {
                                __label__ = 419;
                                break $S_348;
                            }
                            __label__ = 355;
                            }
                        $M_419_355 : for(;;) switch (__label__) {
                            case 419 :
                            // NORMAL
                                $S_419 : {
                                // NORMAL
                                    var var120 = local_3_FLOAT; // type is FLOAT value type is FLOAT
                                    if ((var120 > 0.0)) {
                                        __label__ = 457;
                                        break $S_419;
                                    }
                                    __label__ = 425;
                                    }
                                $M_457_425 : for(;;) switch (__label__) {
                                    case 457 :
                                    // NORMAL
                                        $S_457 : {
                                        // NORMAL
                                            var var124 = local_7_FLOAT; // type is FLOAT value type is FLOAT
                                            if ((var124 > 0.0)) {
                                                __label__ = 496;
                                                break $S_457;
                                            }
                                            __label__ = 464;
                                            }
                                        $M_496_464 : for(;;) switch (__label__) {
                                            case 464 :
                                            // NORMAL
                                                $S_464 : {
                                                // NORMAL
                                                    var var126 = local_11_FLOAT; // type is FLOAT value type is FLOAT
                                                    if ((var126 > 0.0)) {
                                                        __label__ = 496;
                                                        continue $M_496_464;
                                                    }
                                                    }
                                                var var169 = thisRef.m_v3; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@135378ef
                                                var169.a = 1.0;
                                                thisRef.m_count = 1;
                                                thisRef.m_v1.VOIDsetojcDistance$SimplexVertex(thisRef.m_v1,thisRef.m_v3);
                                                return;
                                            case 496 :
                                            // NORMAL
                                                $S_496 : {
                                                // NORMAL
                                                    var var128 = local_11_FLOAT; // type is FLOAT value type is FLOAT
                                                    if ((var128 <= 0.0)) {
                                                        __label__ = 567;
                                                        break $S_496;
                                                    }
                                                    __label__ = 503;
                                                    }
                                                $M_567_503 : for(;;) switch (__label__) {
                                                    case 503 :
                                                    // NORMAL
                                                        $S_503 : {
                                                        // NORMAL
                                                            var var130 = local_12_FLOAT; // type is FLOAT value type is FLOAT
                                                            if ((var130 <= 0.0)) {
                                                                __label__ = 567;
                                                                continue $M_567_503;
                                                            }
                                                            }
                                                        $S_510 : {
                                                        // NORMAL
                                                            var var132 = local_14_FLOAT; // type is FLOAT value type is FLOAT
                                                            if ((var132 > 0.0)) {
                                                                __label__ = 567;
                                                                continue $M_567_503;
                                                            }
                                                            }
                                                        var local_17_FLOAT = (1.0 / (local_11_FLOAT + local_12_FLOAT)); // type is FLOAT value type is FLOAT
                                                        var var140 = thisRef.m_v2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2505325a
                                                        var var143 = (local_11_FLOAT * local_17_FLOAT); // type is FLOAT value type is FLOAT
                                                        var140.a = var143;
                                                        var var144 = thisRef.m_v3; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3bba6bd3
                                                        var var147 = (local_12_FLOAT * local_17_FLOAT); // type is FLOAT value type is FLOAT
                                                        var144.a = var147;
                                                        thisRef.m_count = 2;
                                                        thisRef.m_v1.VOIDsetojcDistance$SimplexVertex(thisRef.m_v1,thisRef.m_v3);
                                                        return;
                                                    case 567 :
                                                    // NORMAL
                                                        var local_17_FLOAT = (1.0 / ((local_14_FLOAT + local_15_FLOAT) + local_16_FLOAT)); // type is FLOAT value type is FLOAT
                                                        var var157 = thisRef.m_v1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4d067f40
                                                        var var160 = (local_14_FLOAT * local_17_FLOAT); // type is FLOAT value type is FLOAT
                                                        var157.a = var160;
                                                        var var161 = thisRef.m_v2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@451af20f
                                                        var var164 = (local_15_FLOAT * local_17_FLOAT); // type is FLOAT value type is FLOAT
                                                        var161.a = var164;
                                                        var var165 = thisRef.m_v3; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@49018f14
                                                        var var168 = (local_16_FLOAT * local_17_FLOAT); // type is FLOAT value type is FLOAT
                                                        var165.a = var168;
                                                        thisRef.m_count = 3;
                                                        return;
                                                }
                                        }
                                    case 425 :
                                    // NORMAL
                                        $S_425 : {
                                        // NORMAL
                                            var var122 = local_12_FLOAT; // type is FLOAT value type is FLOAT
                                            if ((var122 > 0.0)) {
                                                __label__ = 457;
                                                continue $M_457_425;
                                            }
                                            }
                                        var var172 = thisRef.m_v2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@210d8114
                                        var172.a = 1.0;
                                        thisRef.m_count = 1;
                                        thisRef.m_v1.VOIDsetojcDistance$SimplexVertex(thisRef.m_v1,thisRef.m_v2);
                                        return;
                                }
                            case 355 :
                            // NORMAL
                                $S_355 : {
                                // NORMAL
                                    var var116 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                                    if ((var116 <= 0.0)) {
                                        __label__ = 419;
                                        continue $M_419_355;
                                    }
                                    }
                                $S_362 : {
                                // NORMAL
                                    var var118 = local_15_FLOAT; // type is FLOAT value type is FLOAT
                                    if ((var118 > 0.0)) {
                                        __label__ = 419;
                                        continue $M_419_355;
                                    }
                                    }
                                var local_17_FLOAT = (1.0 / (local_7_FLOAT + local_8_FLOAT)); // type is FLOAT value type is FLOAT
                                var var194 = thisRef.m_v1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5f0f060a
                                var var197 = (local_7_FLOAT * local_17_FLOAT); // type is FLOAT value type is FLOAT
                                var194.a = var197;
                                var var198 = thisRef.m_v3; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4d171d6e
                                var var201 = (local_8_FLOAT * local_17_FLOAT); // type is FLOAT value type is FLOAT
                                var198.a = var201;
                                thisRef.m_count = 2;
                                thisRef.m_v2.VOIDsetojcDistance$SimplexVertex(thisRef.m_v2,thisRef.m_v3);
                                return;
                        }
                }
            case 270 :
            // NORMAL
                $S_270 : {
                // NORMAL
                    var var106 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                    if ((var106 > 0.0)) {
                        __label__ = 291;
                        continue $M_291_270;
                    }
                    }
                var var188 = thisRef.m_v1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@8ab42f7
                var188.a = 1.0;
                thisRef.m_count = 1;
                return;
        }
    },

    VOIDgetSearchDirectionojcVec2 : function(thisRef,out) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.m_count; // type is INT value type is INT
            switch(var0) {
             case 1:
                 __label__ = 32;
            break $S_0;
             case 2:
                 __label__ = 48;
            break $S_0;
            }
            __label__ = 123;
            break $S_0;
            }
        for(;;) switch (__label__) {
            case 32 :
            // NORMAL
                var var24 = out.ojcVec2setojcVec2(out,thisRef.m_v1.w); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5aaa2223
                var var25 = var24.ojcVec2negateLocal(var24); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@756874cf
                return;
            case 123 :
            // NORMAL
                $S_123 : {
                // NORMAL
                    var var1 = ojcDistance$Simplex.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                    if ((var1 != 0)) {
                        __label__ = 137;
                        break $S_123;
                    }
                    __label__ = 129;
                    }
                for(;;) switch (__label__) {
                    case 137 :
                    // NORMAL
                        out.VOIDsetZero(out);
                        return;
                    case 129 :
                    // NORMAL
                        var var2 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                        jlAssertionError.VOIDinit(var2);
                        throw var2;
                }
            case 48 :
            // NORMAL
                $S_48 : {
                // NORMAL
                    var var6 = thisRef.e12.ojcVec2setojcVec2(thisRef.e12,thisRef.m_v2.w); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@453d6e25
                    var var9 = var6.ojcVec2subLocalojcVec2(var6,thisRef.m_v1.w); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6d9c323e
                    var var12 = out.ojcVec2setojcVec2(out,thisRef.m_v1.w); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@662cbe94
                    var var13 = var12.ojcVec2negateLocal(var12); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@50547092
                    var var15 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.e12,out); // type is FLOAT value type is FLOAT
                    var local_2_FLOAT = var15; // type is FLOAT value type is FLOAT
                    var var18 = local_2_FLOAT; // type is FLOAT value type is FLOAT
                    if ((var18 <= 0.0)) {
                        __label__ = 113;
                        break $S_48;
                    }
                    __label__ = 103;
                    }
                for(;;) switch (__label__) {
                    case 113 :
                    // NORMAL
                        ojcVec2.VOIDcrossToOutUnsafeojcVec2FLOATojcVec2(thisRef.e12,1.0,out);
                        return;
                    case 103 :
                    // NORMAL
                        ojcVec2.VOIDcrossToOutUnsafeFLOATojcVec2ojcVec2(1.0,thisRef.e12,out);
                        return;
                }
        }
    },

    VOIDgetWitnessPointsojcVec2ojcVec2 : function(thisRef,pA,pB) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.m_count; // type is INT value type is INT
            if (var0 < 0 || var0 > 3) {
             __label__ = 285;
            break $S_0;
            }
            switch(var0 - 0) {
             case 0:
                 __label__ = 36;
            break $S_0;
             case 1:
                 __label__ = 50;
            break $S_0;
             case 2:
                 __label__ = 77;
            break $S_0;
             case 3:
                 __label__ = 188;
            break $S_0;
            }
            throw 'Illegal jump target!';
            }
        for(;;) switch (__label__) {
            case 77 :
            // NORMAL
                var var30 = thisRef.case2.ojcVec2setojcVec2(thisRef.case2,thisRef.m_v1.wA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@421ca1f7
                var var33 = var30.ojcVec2mulLocalFLOAT(var30,thisRef.m_v1.a); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1b474923
                var var36 = pA.ojcVec2setojcVec2(pA,thisRef.m_v2.wA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@8438adf
                var var39 = var36.ojcVec2mulLocalFLOAT(var36,thisRef.m_v2.a); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4b664bb2
                var var41 = var39.ojcVec2addLocalojcVec2(var39,thisRef.case2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6cd24830
                var var45 = thisRef.case2.ojcVec2setojcVec2(thisRef.case2,thisRef.m_v1.wB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4d7d0ad8
                var var48 = var45.ojcVec2mulLocalFLOAT(var45,thisRef.m_v1.a); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@597c64da
                var var51 = pB.ojcVec2setojcVec2(pB,thisRef.m_v2.wB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@203e8f9c
                var var54 = var51.ojcVec2mulLocalFLOAT(var51,thisRef.m_v2.a); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5ed3d063
                var var56 = var54.ojcVec2addLocalojcVec2(var54,thisRef.case2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7b5d3aab
                return;
            case 50 :
            // NORMAL
                var var60 = pA.ojcVec2setojcVec2(pA,thisRef.m_v1.wA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@41bdcbae
                var var63 = pB.ojcVec2setojcVec2(pB,thisRef.m_v1.wB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@152bee6a
                return;
            case 188 :
            // NORMAL
                var var3 = pA.ojcVec2setojcVec2(pA,thisRef.m_v1.wA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@55bb6464
                var var6 = var3.ojcVec2mulLocalFLOAT(var3,thisRef.m_v1.a); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4721841a
                var var10 = thisRef.case3.ojcVec2setojcVec2(thisRef.case3,thisRef.m_v2.wA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@686ed7eb
                var var13 = var10.ojcVec2mulLocalFLOAT(var10,thisRef.m_v2.a); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@22fc2c32
                var var17 = thisRef.case33.ojcVec2setojcVec2(thisRef.case33,thisRef.m_v3.wA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2ceaf44d
                var var20 = var17.ojcVec2mulLocalFLOAT(var17,thisRef.m_v3.a); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@67a0b49e
                var var22 = pA.ojcVec2addLocalojcVec2(pA,thisRef.case3); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@79eff60e
                var var24 = var22.ojcVec2addLocalojcVec2(var22,thisRef.case33); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3ab1d8bd
                var var25 = pB.ojcVec2setojcVec2(pB,pA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@41021b3a
                return;
            case 36 :
            // NORMAL
                $S_36 : {
                // NORMAL
                    var var57 = ojcDistance$Simplex.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                    if ((var57 != 0)) {
                        return;
                    }
                    }
                var var65 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var65);
                throw var65;
            case 285 :
            // NORMAL
                $S_285 : {
                // NORMAL
                    var var26 = ojcDistance$Simplex.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                    if ((var26 != 0)) {
                        return;
                    }
                    }
                var var64 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var64);
                throw var64;
        }
    },

    VOIDwriteCacheojcDistance$SimplexCache : function(thisRef,cache) {
        var local_2_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.FLOATgetMetric(thisRef); // type is FLOAT value type is FLOAT
            cache.metric = var0;
            var var1 = thisRef.m_count; // type is INT value type is INT
            cache.count = var1;
            local_2_INT = 0; // type is INT value type is INT
            __label__ = 18;
            }
        $L_18 : for (;;) {
            $S_18 : {
            // NORMAL
                var var4 = local_2_INT; // type is INT value type is INT
                var var5 = thisRef.m_count; // type is INT value type is INT
                if ((var4 >= var5)) {
                    return;
                }
                }
            var var6 = cache.indexA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@7ba8a834
            var var7 = local_2_INT; // type is INT value type is INT
            var var10 = thisRef.vertices.data[local_2_INT]; // type is REFERENCE value type is REFERENCE
            var var11 = var10.indexA; // type is INT value type is INT
            var6.data[var7] = var11;
            var var12 = cache.indexB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@7fab630
            var var13 = local_2_INT; // type is INT value type is INT
            var var16 = thisRef.vertices.data[local_2_INT]; // type is REFERENCE value type is REFERENCE
            var var17 = var16.indexB; // type is INT value type is INT
            var12.data[var13] = var17;
            local_2_INT = (local_2_INT + 1); // type is INT value type is INT
            __label__ = 18;
            continue $L_18;
        }
    },

    classInitCheck : function() {
        if (!ojcDistance$Simplex.__initialized) {
            ojcDistance$Simplex.__initialized = true;
            var thePrototype = ojcDistance$Simplex.Create.prototype;
            thePrototype.instanceOf = ojcDistance$Simplex.instanceOf;
            thePrototype.ClassgetClass = ojcDistance$Simplex.ClassgetClass;
            thePrototype.VOIDwriteCacheojcDistance$SimplexCache = ojcDistance$Simplex.VOIDwriteCacheojcDistance$SimplexCache;
            thePrototype.VOIDgetWitnessPointsojcVec2ojcVec2 = ojcDistance$Simplex.VOIDgetWitnessPointsojcVec2ojcVec2;
            thePrototype.VOIDgetSearchDirectionojcVec2 = ojcDistance$Simplex.VOIDgetSearchDirectionojcVec2;
            thePrototype.VOIDsolve3 = ojcDistance$Simplex.VOIDsolve3;
            thePrototype.VOIDsolve2 = ojcDistance$Simplex.VOIDsolve2;
            thePrototype.VOIDgetClosestPointojcVec2 = ojcDistance$Simplex.VOIDgetClosestPointojcVec2;
            thePrototype.FLOATgetMetric = ojcDistance$Simplex.FLOATgetMetric;
            thePrototype.VOIDreadCacheojcDistance$SimplexCacheojcDistance$DistanceProxyojcTransformojcDistance$DistanceProxyojcTransform = ojcDistance$Simplex.VOIDreadCacheojcDistance$SimplexCacheojcDistance$DistanceProxyojcTransformojcDistance$DistanceProxyojcTransform;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            ojcDistance$Simplex.VOIDclinit();
        }
    },

};

var ojcDistance$1 = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 54,
    __implementedTypes : [54,1],
    $SwitchMap$org$jbox2d$collision$shapes$ShapeType : null, // declared in org.jbox2d.collision.Distance$1

    Create : function() {
    },

    instanceOf : function(aType) {
        return ojcDistance$1.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcDistance$1;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcsShapeType.A1ojcsShapeTypevalues(); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@45518455
            var var2 = bytecoder.newArray(var0.data.length,0); // type is REFERENCE value type is REFERENCE
            ojcDistance$1.$SwitchMap$org$jbox2d$collision$shapes$ShapeType = var2;
            }
        try {
            $S_9 : {
            // NORMAL
                var var3 = ojcDistance$1.$SwitchMap$org$jbox2d$collision$shapes$ShapeType; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@bbb12fe
                var var5 = ojcsShapeType.CIRCLE.INTordinal(ojcsShapeType.CIRCLE); // type is INT value type is INT
                var3.data[var5] = 1;
                __label__ = 24;
                }
        } catch (e) {
            dmbcExceptionManager.VOIDpushjlThrowable(e);
            if (e.instanceOf(jlNoSuchFieldError)) {
                __label__ = 23;
            } else {
                throw dmbcExceptionManager.jlThrowablepop();
            }
        }
        $M_24_23 : for(;;) switch (__label__) {
            case 23 :
            // EXCEPTION_HANDLER
                var var6 = dmbcExceptionManager.jlThrowablepop(); // type is REFERENCE value type is REFERENCE
                var local_0_REFERENCE = var6; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@dae6dd0
                __label__ = 24;
                continue $M_24_23;
            case 24 :
            // NORMAL
                try {
                    $S_24 : {
                    // NORMAL
                        var var8 = ojcDistance$1.$SwitchMap$org$jbox2d$collision$shapes$ShapeType; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@331fe5f9
                        var var10 = ojcsShapeType.POLYGON.INTordinal(ojcsShapeType.POLYGON); // type is INT value type is INT
                        var8.data[var10] = 2;
                        __label__ = 39;
                        }
                } catch (e) {
                    dmbcExceptionManager.VOIDpushjlThrowable(e);
                    if (e.instanceOf(jlNoSuchFieldError)) {
                        __label__ = 38;
                    } else {
                        throw dmbcExceptionManager.jlThrowablepop();
                    }
                }
                $M_38_39 : for(;;) switch (__label__) {
                    case 38 :
                    // EXCEPTION_HANDLER
                        var var11 = dmbcExceptionManager.jlThrowablepop(); // type is REFERENCE value type is REFERENCE
                        var local_0_REFERENCE = var11; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7a25ace3
                        __label__ = 39;
                        continue $M_38_39;
                    case 39 :
                    // NORMAL
                        try {
                            $S_39 : {
                            // NORMAL
                                var var12 = ojcDistance$1.$SwitchMap$org$jbox2d$collision$shapes$ShapeType; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@295a7dbb
                                var var14 = ojcsShapeType.CHAIN.INTordinal(ojcsShapeType.CHAIN); // type is INT value type is INT
                                var12.data[var14] = 3;
                                __label__ = 54;
                                }
                        } catch (e) {
                            dmbcExceptionManager.VOIDpushjlThrowable(e);
                            if (e.instanceOf(jlNoSuchFieldError)) {
                                __label__ = 53;
                            } else {
                                throw dmbcExceptionManager.jlThrowablepop();
                            }
                        }
                        $M_54_53 : for(;;) switch (__label__) {
                            case 54 :
                            // NORMAL
                                try {
                                    var var16 = ojcDistance$1.$SwitchMap$org$jbox2d$collision$shapes$ShapeType; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@57e445ad
                                    var var18 = ojcsShapeType.EDGE.INTordinal(ojcsShapeType.EDGE); // type is INT value type is INT
                                    var16.data[var18] = 4;
                                    return;
                                } catch (e) {
                                    dmbcExceptionManager.VOIDpushjlThrowable(e);
                                    if (e.instanceOf(jlNoSuchFieldError)) {
                                        __label__ = 68;
                                    } else {
                                        throw dmbcExceptionManager.jlThrowablepop();
                                    }
                                }
                                var var19 = dmbcExceptionManager.jlThrowablepop(); // type is REFERENCE value type is REFERENCE
                                var local_0_REFERENCE = var19; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1b984285
                                return;
                            case 53 :
                            // EXCEPTION_HANDLER
                                var var15 = dmbcExceptionManager.jlThrowablepop(); // type is REFERENCE value type is REFERENCE
                                var local_0_REFERENCE = var15; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4c0da7a1
                                __label__ = 54;
                                continue $M_54_53;
                        }
                }
        }
    },

    classInitCheck : function() {
        if (!ojcDistance$1.__initialized) {
            ojcDistance$1.__initialized = true;
            var thePrototype = ojcDistance$1.Create.prototype;
            thePrototype.instanceOf = ojcDistance$1.instanceOf;
            thePrototype.ClassgetClass = ojcDistance$1.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            ojcsShapeType.classInitCheck();
            ojcDistance$1.VOIDclinit();
        }
    },

};

var ojcsShapeType = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 55,
    __implementedTypes : [56,55,2,1,11],
    CIRCLE : null, // declared in org.jbox2d.collision.shapes.ShapeType
    EDGE : null, // declared in org.jbox2d.collision.shapes.ShapeType
    POLYGON : null, // declared in org.jbox2d.collision.shapes.ShapeType
    CHAIN : null, // declared in org.jbox2d.collision.shapes.ShapeType
    $VALUES : null, // declared in org.jbox2d.collision.shapes.ShapeType

    Create : function() {
        this.name = null; // declared in java.lang.Enum
        this.ordinalNumber = 0; // declared in java.lang.Enum
    },

    instanceOf : function(aType) {
        return ojcsShapeType.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcsShapeType;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var __label__ = null;
        var var0 = new ojcsShapeType.Create(); // type is REFERENCE value type is REFERENCE
        ojcsShapeType.VOIDinitjlStringINT(var0,bytecoder.stringpool[17],0);
        ojcsShapeType.CIRCLE = var0;
        var var1 = new ojcsShapeType.Create(); // type is REFERENCE value type is REFERENCE
        ojcsShapeType.VOIDinitjlStringINT(var1,bytecoder.stringpool[18],1);
        ojcsShapeType.EDGE = var1;
        var var2 = new ojcsShapeType.Create(); // type is REFERENCE value type is REFERENCE
        ojcsShapeType.VOIDinitjlStringINT(var2,bytecoder.stringpool[19],2);
        ojcsShapeType.POLYGON = var2;
        var var3 = new ojcsShapeType.Create(); // type is REFERENCE value type is REFERENCE
        ojcsShapeType.VOIDinitjlStringINT(var3,bytecoder.stringpool[20],3);
        ojcsShapeType.CHAIN = var3;
        var var4 = bytecoder.newArray(4,null); // type is REFERENCE value type is REFERENCE
        var var5 = ojcsShapeType.CIRCLE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1a29a0f6
        var4.data[0] = var5;
        var var6 = ojcsShapeType.EDGE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3b382cbd
        var4.data[1] = var6;
        var var7 = ojcsShapeType.POLYGON; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@82a56a8
        var4.data[2] = var7;
        var var8 = ojcsShapeType.CHAIN; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@290426a5
        var4.data[3] = var8;
        ojcsShapeType.$VALUES = var4;
        return;
    },

    VOIDinitjlStringINT : function(thisRef,p1,p2) {
        var __label__ = null;
        jlEnum.VOIDinitjlStringINT(thisRef,p1,p2);
        return;
    },

    A1ojcsShapeTypevalues : function() {
        var __label__ = null;
        var var1 = ojcsShapeType.$VALUES.jlObjectclone(ojcsShapeType.$VALUES); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@24f3e4e9
        return var1;
    },

    classInitCheck : function() {
        if (!ojcsShapeType.__initialized) {
            ojcsShapeType.__initialized = true;
            var thePrototype = ojcsShapeType.Create.prototype;
            thePrototype.instanceOf = ojcsShapeType.instanceOf;
            thePrototype.ClassgetClass = ojcsShapeType.ClassgetClass;
            thePrototype.INTordinal = jlEnum.INTordinal;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlEnum.classInitCheck();
            jiSerializable.classInitCheck();
            jlObject.classInitCheck();
            jlComparable.classInitCheck();
            jlrArray.classInitCheck();
            ojcsShapeType.VOIDclinit();
        }
    },

};

var jlEnum = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 56,
    __implementedTypes : [56,2,1,11],

    instanceOf : function(aType) {
        return jlEnum.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jlEnum;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitjlStringINT : function(thisRef,aName,aOrdinalNumber) {
        var __label__ = null;
        thisRef.name = aName;
        thisRef.ordinalNumber = aOrdinalNumber;
        return;
    },

    INTordinal : function(thisRef) {
        var __label__ = null;
        return thisRef.ordinalNumber;
    },

    classInitCheck : function() {
        if (!jlEnum.__initialized) {
            jlEnum.__initialized = true;
            jlObject.classInitCheck();
            jiSerializable.classInitCheck();
            jlComparable.classInitCheck();
        }
    },

};

var jlNoSuchFieldError = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 57,
    __implementedTypes : [57,61,59,2,60,58,1],

    Create : function() {
    },

    instanceOf : function(aType) {
        return jlNoSuchFieldError.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jlNoSuchFieldError;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        jlIncompatibleClassChangeError.VOIDinit(thisRef);
        return;
    },

    VOIDinitjlString : function(thisRef,s) {
        var __label__ = null;
        jlIncompatibleClassChangeError.VOIDinitjlString(thisRef,s);
        return;
    },

    classInitCheck : function() {
        if (!jlNoSuchFieldError.__initialized) {
            jlNoSuchFieldError.__initialized = true;
            var thePrototype = jlNoSuchFieldError.Create.prototype;
            thePrototype.instanceOf = jlNoSuchFieldError.instanceOf;
            thePrototype.ClassgetClass = jlNoSuchFieldError.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlIncompatibleClassChangeError.classInitCheck();
            jlThrowable.classInitCheck();
            jlLinkageError.classInitCheck();
            jiSerializable.classInitCheck();
            jlError.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var jlIncompatibleClassChangeError = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 58,
    __implementedTypes : [61,59,2,60,58,1],

    Create : function() {
    },

    instanceOf : function(aType) {
        return jlIncompatibleClassChangeError.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jlIncompatibleClassChangeError;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        jlLinkageError.VOIDinit(thisRef);
        return;
    },

    VOIDinitjlString : function(thisRef,s) {
        var __label__ = null;
        jlLinkageError.VOIDinitjlString(thisRef,s);
        return;
    },

    classInitCheck : function() {
        if (!jlIncompatibleClassChangeError.__initialized) {
            jlIncompatibleClassChangeError.__initialized = true;
            var thePrototype = jlIncompatibleClassChangeError.Create.prototype;
            thePrototype.instanceOf = jlIncompatibleClassChangeError.instanceOf;
            thePrototype.ClassgetClass = jlIncompatibleClassChangeError.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlLinkageError.classInitCheck();
            jlThrowable.classInitCheck();
            jiSerializable.classInitCheck();
            jlError.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var jlLinkageError = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 59,
    __implementedTypes : [61,59,2,60,1],

    Create : function() {
    },

    instanceOf : function(aType) {
        return jlLinkageError.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jlLinkageError;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        jlError.VOIDinit(thisRef);
        return;
    },

    VOIDinitjlString : function(thisRef,s) {
        var __label__ = null;
        jlError.VOIDinitjlString(thisRef,s);
        return;
    },

    classInitCheck : function() {
        if (!jlLinkageError.__initialized) {
            jlLinkageError.__initialized = true;
            var thePrototype = jlLinkageError.Create.prototype;
            thePrototype.instanceOf = jlLinkageError.instanceOf;
            thePrototype.ClassgetClass = jlLinkageError.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlError.classInitCheck();
            jlThrowable.classInitCheck();
            jiSerializable.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var jlError = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 60,
    __implementedTypes : [61,2,60,1],

    Create : function() {
    },

    instanceOf : function(aType) {
        return jlError.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jlError;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        jlThrowable.VOIDinit(thisRef);
        return;
    },

    VOIDinitjlString : function(thisRef,message) {
        var __label__ = null;
        jlThrowable.VOIDinitjlString(thisRef,message);
        return;
    },

    classInitCheck : function() {
        if (!jlError.__initialized) {
            jlError.__initialized = true;
            var thePrototype = jlError.Create.prototype;
            thePrototype.instanceOf = jlError.instanceOf;
            thePrototype.ClassgetClass = jlError.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlThrowable.classInitCheck();
            jiSerializable.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var jlThrowable = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 61,
    __implementedTypes : [61,2,1],

    Create : function() {
    },

    instanceOf : function(aType) {
        return jlThrowable.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jlThrowable;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    VOIDinitjlString : function(thisRef,aMessage) {
        var __label__ = null;
        return;
    },

    classInitCheck : function() {
        if (!jlThrowable.__initialized) {
            jlThrowable.__initialized = true;
            var thePrototype = jlThrowable.Create.prototype;
            thePrototype.instanceOf = jlThrowable.instanceOf;
            thePrototype.ClassgetClass = jlThrowable.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            jiSerializable.classInitCheck();
        }
    },

};

var ojcDistance$SimplexVertex = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 62,
    __implementedTypes : [62,1],

    Create : function() {
        this.this$0 = null; // declared in org.jbox2d.collision.Distance$SimplexVertex
        this.wA = null; // declared in org.jbox2d.collision.Distance$SimplexVertex
        this.wB = null; // declared in org.jbox2d.collision.Distance$SimplexVertex
        this.w = null; // declared in org.jbox2d.collision.Distance$SimplexVertex
        this.indexA = 0; // declared in org.jbox2d.collision.Distance$SimplexVertex
        this.indexB = 0; // declared in org.jbox2d.collision.Distance$SimplexVertex
        this.a = 0; // declared in org.jbox2d.collision.Distance$SimplexVertex
    },

    instanceOf : function(aType) {
        return ojcDistance$SimplexVertex.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcDistance$SimplexVertex;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitojcDistanceojcDistance$1 : function(thisRef,x0,x1) {
        var __label__ = null;
        ojcDistance$SimplexVertex.VOIDinitojcDistance(thisRef,x0);
        return;
    },

    VOIDinitojcDistance : function(thisRef,p1) {
        var __label__ = null;
        thisRef.this$0 = p1;
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var0);
        thisRef.wA = var0;
        var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var1);
        thisRef.wB = var1;
        var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var2);
        thisRef.w = var2;
        return;
    },

    VOIDsetojcDistance$SimplexVertex : function(thisRef,sv) {
        var __label__ = null;
        var var2 = thisRef.wA.ojcVec2setojcVec2(thisRef.wA,sv.wA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2f1e5fde
        var var5 = thisRef.wB.ojcVec2setojcVec2(thisRef.wB,sv.wB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@730d8fcc
        var var8 = thisRef.w.ojcVec2setojcVec2(thisRef.w,sv.w); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@303bfa47
        var var9 = sv.a; // type is FLOAT value type is FLOAT
        thisRef.a = var9;
        var var10 = sv.indexA; // type is INT value type is INT
        thisRef.indexA = var10;
        var var11 = sv.indexB; // type is INT value type is INT
        thisRef.indexB = var11;
        return;
    },

    classInitCheck : function() {
        if (!ojcDistance$SimplexVertex.__initialized) {
            ojcDistance$SimplexVertex.__initialized = true;
            var thePrototype = ojcDistance$SimplexVertex.Create.prototype;
            thePrototype.instanceOf = ojcDistance$SimplexVertex.instanceOf;
            thePrototype.ClassgetClass = ojcDistance$SimplexVertex.ClassgetClass;
            thePrototype.VOIDsetojcDistance$SimplexVertex = ojcDistance$SimplexVertex.VOIDsetojcDistance$SimplexVertex;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojcCollision = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 63,
    __implementedTypes : [63,1],
    $assertionsDisabled : false, // declared in org.jbox2d.collision.Collision
    d : null, // declared in org.jbox2d.collision.Collision

    Create : function() {
        this.input = null; // declared in org.jbox2d.collision.Collision
        this.cache = null; // declared in org.jbox2d.collision.Collision
        this.output = null; // declared in org.jbox2d.collision.Collision
        this.temp = null; // declared in org.jbox2d.collision.Collision
        this.results1 = null; // declared in org.jbox2d.collision.Collision
        this.results2 = null; // declared in org.jbox2d.collision.Collision
        this.incidentEdge = null; // declared in org.jbox2d.collision.Collision
        this.localTangent = null; // declared in org.jbox2d.collision.Collision
        this.localNormal = null; // declared in org.jbox2d.collision.Collision
        this.planePoint = null; // declared in org.jbox2d.collision.Collision
        this.tangent = null; // declared in org.jbox2d.collision.Collision
        this.v11 = null; // declared in org.jbox2d.collision.Collision
        this.v12 = null; // declared in org.jbox2d.collision.Collision
        this.clipPoints1 = null; // declared in org.jbox2d.collision.Collision
        this.clipPoints2 = null; // declared in org.jbox2d.collision.Collision
        this.Q = null; // declared in org.jbox2d.collision.Collision
        this.e = null; // declared in org.jbox2d.collision.Collision
        this.cf = null; // declared in org.jbox2d.collision.Collision
        this.e1 = null; // declared in org.jbox2d.collision.Collision
        this.P = null; // declared in org.jbox2d.collision.Collision
        this.n = null; // declared in org.jbox2d.collision.Collision
        this.collider = null; // declared in org.jbox2d.collision.Collision
        this.pool = null; // declared in org.jbox2d.collision.Collision
    },

    instanceOf : function(aType) {
        return ojcCollision.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcCollision;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcCollision.BOOLEANdesiredAssertionStatus(ojcCollision); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_9_13 : for(;;) switch (__label__) {
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_9_13;
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_9_13;
        }
        ojcCollision.$assertionsDisabled = var1;
        var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var2);
        ojcCollision.d = var2;
        return;
    },

    VOIDinitojpIWorldPool : function(thisRef,argPool) {
        var __label__ = null;
        var var0 = new ojcDistanceInput.Create(); // type is REFERENCE value type is REFERENCE
        ojcDistanceInput.VOIDinit(var0);
        thisRef.input = var0;
        var var1 = new ojcDistance$SimplexCache.Create(); // type is REFERENCE value type is REFERENCE
        ojcDistance$SimplexCache.VOIDinit(var1);
        thisRef.cache = var1;
        var var2 = new ojcDistanceOutput.Create(); // type is REFERENCE value type is REFERENCE
        ojcDistanceOutput.VOIDinit(var2);
        thisRef.output = var2;
        var var3 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var3);
        thisRef.temp = var3;
        var var4 = new ojcCollision$EdgeResults.Create(); // type is REFERENCE value type is REFERENCE
        ojcCollision$EdgeResults.VOIDinitojcCollision$1(var4,null);
        thisRef.results1 = var4;
        var var5 = new ojcCollision$EdgeResults.Create(); // type is REFERENCE value type is REFERENCE
        ojcCollision$EdgeResults.VOIDinitojcCollision$1(var5,null);
        thisRef.results2 = var5;
        var var6 = bytecoder.newArray(2,null); // type is REFERENCE value type is REFERENCE
        thisRef.incidentEdge = var6;
        var var7 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var7);
        thisRef.localTangent = var7;
        var var8 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var8);
        thisRef.localNormal = var8;
        var var9 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var9);
        thisRef.planePoint = var9;
        var var10 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var10);
        thisRef.tangent = var10;
        var var11 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var11);
        thisRef.v11 = var11;
        var var12 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var12);
        thisRef.v12 = var12;
        var var13 = bytecoder.newArray(2,null); // type is REFERENCE value type is REFERENCE
        thisRef.clipPoints1 = var13;
        var var14 = bytecoder.newArray(2,null); // type is REFERENCE value type is REFERENCE
        thisRef.clipPoints2 = var14;
        var var15 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var15);
        thisRef.Q = var15;
        var var16 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var16);
        thisRef.e = var16;
        var var17 = new ojcContactID.Create(); // type is REFERENCE value type is REFERENCE
        ojcContactID.VOIDinit(var17);
        thisRef.cf = var17;
        var var18 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var18);
        thisRef.e1 = var18;
        var var19 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var19);
        thisRef.P = var19;
        var var20 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var20);
        thisRef.n = var20;
        var var21 = new ojcCollision$EPCollider.Create(); // type is REFERENCE value type is REFERENCE
        ojcCollision$EPCollider.VOIDinit(var21);
        thisRef.collider = var21;
        var var22 = thisRef.incidentEdge; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@5b979ad2
        var var23 = new ojcCollision$ClipVertex.Create(); // type is REFERENCE value type is REFERENCE
        ojcCollision$ClipVertex.VOIDinit(var23);
        var22.data[0] = var23;
        var var24 = thisRef.incidentEdge; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@387e629
        var var25 = new ojcCollision$ClipVertex.Create(); // type is REFERENCE value type is REFERENCE
        ojcCollision$ClipVertex.VOIDinit(var25);
        var24.data[1] = var25;
        var var26 = thisRef.clipPoints1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@59452066
        var var27 = new ojcCollision$ClipVertex.Create(); // type is REFERENCE value type is REFERENCE
        ojcCollision$ClipVertex.VOIDinit(var27);
        var26.data[0] = var27;
        var var28 = thisRef.clipPoints1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3ee37096
        var var29 = new ojcCollision$ClipVertex.Create(); // type is REFERENCE value type is REFERENCE
        ojcCollision$ClipVertex.VOIDinit(var29);
        var28.data[1] = var29;
        var var30 = thisRef.clipPoints2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@256b98de
        var var31 = new ojcCollision$ClipVertex.Create(); // type is REFERENCE value type is REFERENCE
        ojcCollision$ClipVertex.VOIDinit(var31);
        var30.data[0] = var31;
        var var32 = thisRef.clipPoints2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@19e194f4
        var var33 = new ojcCollision$ClipVertex.Create(); // type is REFERENCE value type is REFERENCE
        ojcCollision$ClipVertex.VOIDinit(var33);
        var32.data[1] = var33;
        thisRef.pool = argPool;
        return;
    },

    BOOLEANtestOverlapojcsShapeINTojcsShapeINTojcTransformojcTransform : function(thisRef,shapeA,indexA,shapeB,indexB,xfA,xfB) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            thisRef.input.proxyA.VOIDsetojcsShapeINT(thisRef.input.proxyA,shapeA,indexA);
            thisRef.input.proxyB.VOIDsetojcsShapeINT(thisRef.input.proxyB,shapeB,indexB);
            var var6 = thisRef.input.transformA.ojcTransformsetojcTransform(thisRef.input.transformA,xfA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@62c7eff2
            var var9 = thisRef.input.transformB.ojcTransformsetojcTransform(thisRef.input.transformB,xfB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3b304dd
            var var10 = thisRef.input; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@214dd9aa
            var10.useRadii = 1;
            var var11 = thisRef.cache; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@13221dc4
            var11.count = 0;
            var var13 = thisRef.pool.ojcDistancegetDistance(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4e47d82d
            var13.VOIDdistanceojcDistanceOutputojcDistance$SimplexCacheojcDistanceInput(var13,thisRef.output,thisRef.cache,thisRef.input);
            var var18 = thisRef.output.distance; // type is FLOAT value type is FLOAT
            if ((var18 >= 1.1920929E-6)) {
                __label__ = 108;
                break $S_0;
            }
            __label__ = 104;
            }
        for(;;) switch (__label__) {
            case 108 :
            // NORMAL
                var var20 = 0; // type is INT value type is INT
                return var20;
            case 104 :
            // NORMAL
                var var20 = 1; // type is INT value type is INT
                return var20;
        }
    },

    VOIDcollidePolygonsojcManifoldojcsPolygonShapeojcTransformojcsPolygonShapeojcTransform : function(thisRef,manifold,polyA,xfA,polyB,xfB) {
        var local_6_FLOAT = null; // type is FLOAT # of inits = 2
        var local_8_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_19_INT = null; // type is INT # of inits = 1
        var var66 = null; // type is INT # of inits = 2
        var local_20_FLOAT = null; // type is FLOAT # of inits = 2
        var local_9_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_18_INT = null; // type is INT # of inits = 1
        var local_15_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_27_INT = null; // type is INT # of inits = 3
        var local_17_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_10_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_26_INT = null; // type is INT # of inits = 3
        var local_7_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_21_FLOAT = null; // type is FLOAT # of inits = 2
        var local_12_INT = null; // type is INT # of inits = 3
        var local_11_INT = null; // type is INT # of inits = 2
        var local_24_FLOAT = null; // type is FLOAT # of inits = 1
        var local_22_FLOAT = null; // type is FLOAT # of inits = 2
        var local_29_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            manifold.pointCount = 0;
            local_6_FLOAT = (polyA.m_radius + polyB.m_radius); // type is FLOAT value type is FLOAT
            thisRef.VOIDfindMaxSeparationojcCollision$EdgeResultsojcsPolygonShapeojcTransformojcsPolygonShapeojcTransform(thisRef,thisRef.results1,polyA,xfA,polyB,xfB);
            var var7 = thisRef.results1.separation; // type is FLOAT value type is FLOAT
            var var8 = local_6_FLOAT; // type is FLOAT value type is FLOAT
            if ((var7 <= var8)) {
                break $S_0;
            }
            return;
            }
        $S_45 : {
        // NORMAL
            thisRef.VOIDfindMaxSeparationojcCollision$EdgeResultsojcsPolygonShapeojcTransformojcsPolygonShapeojcTransform(thisRef,thisRef.results2,polyB,xfB,polyA,xfA);
            var var12 = thisRef.results2.separation; // type is FLOAT value type is FLOAT
            var var13 = local_6_FLOAT; // type is FLOAT value type is FLOAT
            if ((var12 <= var13)) {
                break $S_45;
            }
            return;
            }
        $S_73 : {
        // NORMAL
            var local_13_FLOAT = 0.98; // type is FLOAT value type is FLOAT
            var local_14_FLOAT = 0.001; // type is FLOAT value type is FLOAT
            var var20 = thisRef.results2.separation; // type is FLOAT value type is FLOAT
            var var24 = ((0.98 * thisRef.results1.separation) + 0.001); // type is FLOAT value type is FLOAT
            if ((var20 <= var24)) {
                __label__ = 141;
                break $S_73;
            }
            __label__ = 105;
            }
        $M_105_141 : for(;;) switch (__label__) {
            case 141 :
            // NORMAL
                local_7_REFERENCE = polyA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6c370fbe
                local_8_REFERENCE = polyB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@13f67189
                local_9_REFERENCE = xfA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@af64415
                local_10_REFERENCE = xfB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@f3c09b
                local_11_INT = thisRef.results1.edgeIndex; // type is INT value type is INT
                var var40 = ojcManifold$ManifoldType.FACE_A; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4e6675a6
                manifold.type = var40;
                local_12_INT = 0; // type is INT value type is INT
                break $M_105_141;
            case 105 :
            // NORMAL
                local_7_REFERENCE = polyB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@13f67189
                local_8_REFERENCE = polyA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6c370fbe
                local_9_REFERENCE = xfB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@f3c09b
                local_10_REFERENCE = xfA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@af64415
                local_11_INT = thisRef.results2.edgeIndex; // type is INT value type is INT
                var var34 = ojcManifold$ManifoldType.FACE_B; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6063d8a1
                manifold.type = var34;
                local_12_INT = 1; // type is INT value type is INT
                break $M_105_141;
        }
        $S_174 : {
        // NORMAL
            local_15_REFERENCE = local_9_REFERENCE.q; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7772fc6d
            thisRef.VOIDfindIncidentEdgeA1ojcCollision$ClipVertexojcsPolygonShapeojcTransformINTojcsPolygonShapeojcTransform(thisRef,thisRef.incidentEdge,local_7_REFERENCE,local_9_REFERENCE,local_11_INT,local_8_REFERENCE,local_10_REFERENCE);
            var local_16_INT = local_7_REFERENCE.m_count; // type is INT value type is INT
            local_17_REFERENCE = local_7_REFERENCE.m_vertices; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@73d521f0
            local_18_INT = local_11_INT; // type is INT value type is INT
            var var62 = (local_11_INT + 1); // type is INT value type is INT
            var var63 = local_16_INT; // type is INT value type is INT
            if ((var62 >= var63)) {
                __label__ = 233;
                break $S_174;
            }
            __label__ = 226;
            }
        $M_226_233 : for(;;) switch (__label__) {
            case 233 :
            // NORMAL
                var66 = 0; // type is INT value type is INT
                break $M_226_233;
            case 226 :
            // NORMAL
                var66 = (local_11_INT + 1); // type is INT value type is INT
                break $M_226_233;
        }
        $S_234 : {
        // NORMAL
            local_19_INT = var66; // type is INT value type is INT
            var var69 = thisRef.v11; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@ee3b169
            var var72 = local_17_REFERENCE.data[local_18_INT]; // type is REFERENCE value type is REFERENCE
            var var73 = var69.ojcVec2setojcVec2(var69,var72); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@703bc6c4
            var var74 = thisRef.v12; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@104acd3a
            var var77 = local_17_REFERENCE.data[local_19_INT]; // type is REFERENCE value type is REFERENCE
            var var78 = var74.ojcVec2setojcVec2(var74,var77); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4acaa462
            var var79 = thisRef.localTangent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@59b12cab
            var var84 = (thisRef.v12.x - thisRef.v11.x); // type is FLOAT value type is FLOAT
            var79.x = var84;
            var var85 = thisRef.localTangent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7712dcbf
            var var90 = (thisRef.v12.y - thisRef.v11.y); // type is FLOAT value type is FLOAT
            var85.y = var90;
            var var92 = thisRef.localTangent.FLOATnormalize(thisRef.localTangent); // type is FLOAT value type is FLOAT
            var var93 = thisRef.localNormal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@31f7ec7a
            var var96 = (1.0 * thisRef.localTangent.y); // type is FLOAT value type is FLOAT
            var93.x = var96;
            var var97 = thisRef.localNormal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2e81a792
            var var100 = (-1.0 * thisRef.localTangent.x); // type is FLOAT value type is FLOAT
            var97.y = var100;
            var var101 = thisRef.planePoint; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7e05029d
            var var107 = ((thisRef.v11.x + thisRef.v12.x) * 0.5); // type is FLOAT value type is FLOAT
            var101.x = var107;
            var var108 = thisRef.planePoint; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1f13dec6
            var var114 = ((thisRef.v11.y + thisRef.v12.y) * 0.5); // type is FLOAT value type is FLOAT
            var108.y = var114;
            var var115 = thisRef.tangent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@11896562
            var var126 = ((local_15_REFERENCE.c * thisRef.localTangent.x) - (local_15_REFERENCE.s * thisRef.localTangent.y)); // type is FLOAT value type is FLOAT
            var115.x = var126;
            var var127 = thisRef.tangent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3217fdf6
            var var138 = ((local_15_REFERENCE.s * thisRef.localTangent.x) + (local_15_REFERENCE.c * thisRef.localTangent.y)); // type is FLOAT value type is FLOAT
            var127.y = var138;
            local_20_FLOAT = (1.0 * thisRef.tangent.y); // type is FLOAT value type is FLOAT
            local_21_FLOAT = (-1.0 * thisRef.tangent.x); // type is FLOAT value type is FLOAT
            ojcTransform.VOIDmulToOutojcTransformojcVec2ojcVec2(local_9_REFERENCE,thisRef.v11,thisRef.v11);
            ojcTransform.VOIDmulToOutojcTransformojcVec2ojcVec2(local_9_REFERENCE,thisRef.v12,thisRef.v12);
            local_22_FLOAT = ((local_20_FLOAT * thisRef.v11.x) + (local_21_FLOAT * thisRef.v11.y)); // type is FLOAT value type is FLOAT
            var local_23_FLOAT = ((-((thisRef.tangent.x * thisRef.v11.x) + (thisRef.tangent.y * thisRef.v11.y))) + local_6_FLOAT); // type is FLOAT value type is FLOAT
            local_24_FLOAT = (((thisRef.tangent.x * thisRef.v12.x) + (thisRef.tangent.y * thisRef.v12.y)) + local_6_FLOAT); // type is FLOAT value type is FLOAT
            var var198 = thisRef.tangent.ojcVec2negateLocal(thisRef.tangent); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@645010c3
            var var204 = ojcCollision.INTclipSegmentToLineA1ojcCollision$ClipVertexA1ojcCollision$ClipVertexojcVec2FLOATINT(thisRef.clipPoints1,thisRef.incidentEdge,thisRef.tangent,local_23_FLOAT,local_18_INT); // type is INT value type is INT
            var local_25_INT = var204; // type is INT value type is INT
            var var208 = thisRef.tangent.ojcVec2negateLocal(thisRef.tangent); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@65b40761
            var var209 = local_25_INT; // type is INT value type is INT
            if ((var209 >= 2)) {
                break $S_234;
            }
            return;
            }
        $S_654 : {
        // NORMAL
            var var215 = ojcCollision.INTclipSegmentToLineA1ojcCollision$ClipVertexA1ojcCollision$ClipVertexojcVec2FLOATINT(thisRef.clipPoints2,thisRef.clipPoints1,thisRef.tangent,local_24_FLOAT,local_19_INT); // type is INT value type is INT
            var local_25_INT = var215; // type is INT value type is INT
            var var217 = local_25_INT; // type is INT value type is INT
            if ((var217 >= 2)) {
                break $S_654;
            }
            return;
            }
        $S_682 : {
        // NORMAL
            var var220 = manifold.localNormal.ojcVec2setojcVec2(manifold.localNormal,thisRef.localNormal); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3fccccc0
            var var223 = manifold.localPoint.ojcVec2setojcVec2(manifold.localPoint,thisRef.planePoint); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@32397e82
            local_26_INT = 0; // type is INT value type is INT
            local_27_INT = 0; // type is INT value type is INT
            __label__ = 712;
            }
        $L_712 : for (;;) {
            $S_712 : {
            // NORMAL
                var var228 = local_27_INT; // type is INT value type is INT
                if ((var228 >= 2)) {
                    __label__ = 925;
                    break $S_712;
                }
                __label__ = 718;
                }
            for(;;) switch (__label__) {
                case 925 :
                // NORMAL
                    var var229 = local_26_INT; // type is INT value type is INT
                    manifold.pointCount = var229;
                    return;
                case 718 :
                // NORMAL
                    $S_718 : {
                    // NORMAL
                        var var230 = local_20_FLOAT; // type is FLOAT value type is FLOAT
                        var var233 = thisRef.clipPoints2.data[local_27_INT]; // type is REFERENCE value type is REFERENCE
                        var var236 = (var230 * var233.v.x); // type is FLOAT value type is FLOAT
                        var var237 = local_21_FLOAT; // type is FLOAT value type is FLOAT
                        var var240 = thisRef.clipPoints2.data[local_27_INT]; // type is REFERENCE value type is REFERENCE
                        var local_28_FLOAT = ((var236 + (var237 * var240.v.y)) - local_22_FLOAT); // type is FLOAT value type is FLOAT
                        var var249 = local_28_FLOAT; // type is FLOAT value type is FLOAT
                        var var250 = local_6_FLOAT; // type is FLOAT value type is FLOAT
                        if ((var249 > var250)) {
                            __label__ = 919;
                            break $S_718;
                        }
                        __label__ = 764;
                        }
                    $M_764_919 : for(;;) switch (__label__) {
                        case 919 :
                        // NORMAL
                            local_27_INT = (local_27_INT + 1); // type is INT value type is INT
                            __label__ = 712;
                            continue $L_712;
                        case 764 :
                        // NORMAL
                            $S_764 : {
                            // NORMAL
                                var var254 = manifold.points.data[local_26_INT]; // type is REFERENCE value type is REFERENCE
                                local_29_REFERENCE = var254; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1264be6b
                                var local_30_REFERENCE = local_29_REFERENCE.localPoint; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@568ba60e
                                var var261 = thisRef.clipPoints2.data[local_27_INT]; // type is REFERENCE value type is REFERENCE
                                var local_31_FLOAT = (var261.v.x - local_10_REFERENCE.p.x); // type is FLOAT value type is FLOAT
                                var var272 = thisRef.clipPoints2.data[local_27_INT]; // type is REFERENCE value type is REFERENCE
                                var local_32_FLOAT = (var272.v.y - local_10_REFERENCE.p.y); // type is FLOAT value type is FLOAT
                                var var281 = local_30_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@13412cb1
                                var var292 = ((local_10_REFERENCE.q.c * local_31_FLOAT) + (local_10_REFERENCE.q.s * local_32_FLOAT)); // type is FLOAT value type is FLOAT
                                var281.x = var292;
                                var var293 = local_30_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@13412cb1
                                var var305 = (((-local_10_REFERENCE.q.s) * local_31_FLOAT) + (local_10_REFERENCE.q.c * local_32_FLOAT)); // type is FLOAT value type is FLOAT
                                var293.y = var305;
                                var var307 = local_29_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4ab248d5
                                var var310 = thisRef.clipPoints2.data[local_27_INT]; // type is REFERENCE value type is REFERENCE
                                var307.VOIDsetojcContactID(var307,var310.id);
                                var var312 = local_12_INT; // type is INT value type is INT
                                if ((var312 == 0)) {
                                    __label__ = 916;
                                    break $S_764;
                                }
                                __label__ = 908;
                                }
                            $M_916_908 : for(;;) switch (__label__) {
                                case 908 :
                                // NORMAL
                                    local_29_REFERENCE.id.VOIDflip(local_29_REFERENCE.id);
                                    __label__ = 916;
                                    continue $M_916_908;
                                case 916 :
                                // NORMAL
                                    local_26_INT = (local_26_INT + 1); // type is INT value type is INT
                                    __label__ = 919;
                                    continue $M_764_919;
                            }
                    }
            }
        }
    },

    VOIDfindMaxSeparationojcCollision$EdgeResultsojcsPolygonShapeojcTransformojcsPolygonShapeojcTransform : function(thisRef,results,poly1,xf1,poly2,xf2) {
        var local_22_INT = null; // type is INT # of inits = 1
        var var167 = null; // type is INT # of inits = 2
        var local_24_INT = null; // type is INT # of inits = 4
        var local_18_FLOAT = null; // type is FLOAT # of inits = 3
        var local_14_FLOAT = null; // type is FLOAT # of inits = 2
        var local_15_FLOAT = null; // type is FLOAT # of inits = 2
        var local_19_INT = null; // type is INT # of inits = 3
        var local_26_INT = null; // type is INT # of inits = 3
        var local_17_FLOAT = null; // type is FLOAT # of inits = 1
        var local_21_FLOAT = null; // type is FLOAT # of inits = 1
        var local_20_INT = null; // type is INT # of inits = 1
        var local_6_INT = null; // type is INT # of inits = 3
        var local_23_FLOAT = null; // type is FLOAT # of inits = 1
        var local_25_FLOAT = null; // type is FLOAT # of inits = 4
        var var175 = null; // type is INT # of inits = 2
        var local_7_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_16_INT = null; // type is INT # of inits = 5
        var var132 = null; // type is INT # of inits = 2
        var local_19_FLOAT = null; // type is FLOAT # of inits = 2
        var var120 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_6_INT = poly1.m_count; // type is INT value type is INT
            local_7_REFERENCE = poly1.m_normals; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@2cf1c74a
            var local_8_REFERENCE = poly1.m_centroid; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6ae17733
            var local_9_REFERENCE = poly2.m_centroid; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@17a5693c
            var local_10_REFERENCE = xf2.q; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@56d828f6
            var local_11_REFERENCE = xf1.q; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@74b16ef0
            var local_12_FLOAT = (((local_10_REFERENCE.c * local_9_REFERENCE.x) - (local_10_REFERENCE.s * local_9_REFERENCE.y)) + xf2.p.x); // type is FLOAT value type is FLOAT
            var local_13_FLOAT = (((local_10_REFERENCE.s * local_9_REFERENCE.x) + (local_10_REFERENCE.c * local_9_REFERENCE.y)) + xf2.p.y); // type is FLOAT value type is FLOAT
            var local_12_FLOAT = (local_12_FLOAT - (((local_11_REFERENCE.c * local_8_REFERENCE.x) - (local_11_REFERENCE.s * local_8_REFERENCE.y)) + xf1.p.x)); // type is FLOAT value type is FLOAT
            var local_13_FLOAT = (local_13_FLOAT - (((local_11_REFERENCE.s * local_8_REFERENCE.x) + (local_11_REFERENCE.c * local_8_REFERENCE.y)) + xf1.p.y)); // type is FLOAT value type is FLOAT
            local_14_FLOAT = ((local_11_REFERENCE.c * local_12_FLOAT) + (local_11_REFERENCE.s * local_13_FLOAT)); // type is FLOAT value type is FLOAT
            local_15_FLOAT = (((-local_11_REFERENCE.s) * local_12_FLOAT) + (local_11_REFERENCE.c * local_13_FLOAT)); // type is FLOAT value type is FLOAT
            local_16_INT = 0; // type is INT value type is INT
            local_18_FLOAT = -3.4028235E38; // type is FLOAT value type is FLOAT
            local_19_INT = 0; // type is INT value type is INT
            __label__ = 227;
            }
        $L_227 : for (;;) {
            $S_227 : {
            // NORMAL
                var var108 = local_19_INT; // type is INT value type is INT
                var var109 = local_6_INT; // type is INT value type is INT
                if ((var108 >= var109)) {
                    __label__ = 282;
                    break $S_227;
                }
                __label__ = 234;
                }
            for(;;) switch (__label__) {
                case 234 :
                // NORMAL
                    $S_234 : {
                    // NORMAL
                        var var193 = local_7_REFERENCE.data[local_19_INT]; // type is REFERENCE value type is REFERENCE
                        var local_20_REFERENCE = var193; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1508d7ba
                        local_17_FLOAT = ((local_20_REFERENCE.x * local_14_FLOAT) + (local_20_REFERENCE.y * local_15_FLOAT)); // type is FLOAT value type is FLOAT
                        var var206 = local_17_FLOAT; // type is FLOAT value type is FLOAT
                        var var207 = local_18_FLOAT; // type is FLOAT value type is FLOAT
                        if ((var206 <= var207)) {
                            __label__ = 276;
                            break $S_234;
                        }
                        __label__ = 268;
                        }
                    $M_268_276 : for(;;) switch (__label__) {
                        case 276 :
                        // NORMAL
                            local_19_INT = (local_19_INT + 1); // type is INT value type is INT
                            __label__ = 227;
                            continue $L_227;
                        case 268 :
                        // NORMAL
                            local_18_FLOAT = local_17_FLOAT; // type is FLOAT value type is FLOAT
                            local_16_INT = local_19_INT; // type is INT value type is INT
                            __label__ = 276;
                            continue $M_268_276;
                    }
                case 282 :
                // NORMAL
                    $S_282 : {
                    // NORMAL
                        var var111 = thisRef.FLOATedgeSeparationojcsPolygonShapeojcTransformINTojcsPolygonShapeojcTransform(thisRef,poly1,xf1,local_16_INT,poly2,xf2); // type is FLOAT value type is FLOAT
                        local_19_FLOAT = var111; // type is FLOAT value type is FLOAT
                        var var115 = (local_16_INT - 1); // type is INT value type is INT
                        if ((var115 < 0)) {
                            __label__ = 310;
                            break $S_282;
                        }
                        __label__ = 303;
                        }
                    $M_310_303 : for(;;) switch (__label__) {
                        case 303 :
                        // NORMAL
                            var120 = (local_16_INT - 1); // type is INT value type is INT
                            break $M_310_303;
                        case 310 :
                        // NORMAL
                            var120 = (local_6_INT - 1); // type is INT value type is INT
                            break $M_310_303;
                    }
                    $S_314 : {
                    // NORMAL
                        local_20_INT = var120; // type is INT value type is INT
                        var var124 = thisRef.FLOATedgeSeparationojcsPolygonShapeojcTransformINTojcsPolygonShapeojcTransform(thisRef,poly1,xf1,local_20_INT,poly2,xf2); // type is FLOAT value type is FLOAT
                        local_21_FLOAT = var124; // type is FLOAT value type is FLOAT
                        var var128 = (local_16_INT + 1); // type is INT value type is INT
                        var var129 = local_6_INT; // type is INT value type is INT
                        if ((var128 >= var129)) {
                            __label__ = 346;
                            break $S_314;
                        }
                        __label__ = 339;
                        }
                    $M_339_346 : for(;;) switch (__label__) {
                        case 346 :
                        // NORMAL
                            var132 = 0; // type is INT value type is INT
                            break $M_339_346;
                        case 339 :
                        // NORMAL
                            var132 = (local_16_INT + 1); // type is INT value type is INT
                            break $M_339_346;
                    }
                    $S_347 : {
                    // NORMAL
                        local_22_INT = var132; // type is INT value type is INT
                        var var136 = thisRef.FLOATedgeSeparationojcsPolygonShapeojcTransformINTojcsPolygonShapeojcTransform(thisRef,poly1,xf1,local_22_INT,poly2,xf2); // type is FLOAT value type is FLOAT
                        local_23_FLOAT = var136; // type is FLOAT value type is FLOAT
                        var var139 = local_21_FLOAT; // type is FLOAT value type is FLOAT
                        var var140 = local_19_FLOAT; // type is FLOAT value type is FLOAT
                        if ((var139 <= var140)) {
                            __label__ = 393;
                            break $S_347;
                        }
                        __label__ = 371;
                        }
                    $M_393_371 : for(;;) switch (__label__) {
                        case 393 :
                        // NORMAL
                            $S_393 : {
                            // NORMAL
                                var var153 = local_23_FLOAT; // type is FLOAT value type is FLOAT
                                var var154 = local_19_FLOAT; // type is FLOAT value type is FLOAT
                                if ((var153 <= var154)) {
                                    __label__ = 415;
                                    break $S_393;
                                }
                                __label__ = 401;
                                }
                            for(;;) switch (__label__) {
                                case 401 :
                                // NORMAL
                                    local_26_INT = 1; // type is INT value type is INT
                                    local_24_INT = local_22_INT; // type is INT value type is INT
                                    local_25_FLOAT = local_23_FLOAT; // type is FLOAT value type is FLOAT
                                    __label__ = 428;
                                    break $M_393_371;
                                case 415 :
                                // NORMAL
                                    var var189 = local_16_INT; // type is INT value type is INT
                                    results.edgeIndex = var189;
                                    var var190 = local_19_FLOAT; // type is FLOAT value type is FLOAT
                                    results.separation = var190;
                                    return;
                            }
                        case 371 :
                        // NORMAL
                            $S_371 : {
                            // NORMAL
                                var var142 = local_21_FLOAT; // type is FLOAT value type is FLOAT
                                var var143 = local_23_FLOAT; // type is FLOAT value type is FLOAT
                                if ((var142 <= var143)) {
                                    __label__ = 393;
                                    continue $M_393_371;
                                }
                                }
                            local_26_INT = -1; // type is INT value type is INT
                            local_24_INT = local_20_INT; // type is INT value type is INT
                            local_25_FLOAT = local_21_FLOAT; // type is FLOAT value type is FLOAT
                            __label__ = 428;
                            break $M_393_371;
                    }
                    $L_428 : for (;;) {
                        $S_428 : {
                        // NORMAL
                            var var161 = local_26_INT; // type is INT value type is INT
                            if ((var161 != -1)) {
                                __label__ = 457;
                                break $S_428;
                            }
                            __label__ = 434;
                            }
                        $M_434_457 : for(;;) switch (__label__) {
                            case 434 :
                            // NORMAL
                                $S_434 : {
                                // NORMAL
                                    var var170 = (local_24_INT - 1); // type is INT value type is INT
                                    if ((var170 < 0)) {
                                        __label__ = 448;
                                        break $S_434;
                                    }
                                    __label__ = 441;
                                    }
                                $M_448_441 : for(;;) switch (__label__) {
                                    case 448 :
                                    // NORMAL
                                        var175 = (local_6_INT - 1); // type is INT value type is INT
                                        break $M_448_441;
                                    case 441 :
                                    // NORMAL
                                        var175 = (local_24_INT - 1); // type is INT value type is INT
                                        break $M_448_441;
                                }
                                local_16_INT = var175; // type is INT value type is INT
                                break $M_434_457;
                            case 457 :
                            // NORMAL
                                $S_457 : {
                                // NORMAL
                                    var var163 = (local_24_INT + 1); // type is INT value type is INT
                                    var var164 = local_6_INT; // type is INT value type is INT
                                    if ((var163 >= var164)) {
                                        __label__ = 473;
                                        break $S_457;
                                    }
                                    __label__ = 466;
                                    }
                                $M_466_473 : for(;;) switch (__label__) {
                                    case 466 :
                                    // NORMAL
                                        var167 = (local_24_INT + 1); // type is INT value type is INT
                                        break $M_466_473;
                                    case 473 :
                                    // NORMAL
                                        var167 = 0; // type is INT value type is INT
                                        break $M_466_473;
                                }
                                local_16_INT = var167; // type is INT value type is INT
                                break $M_434_457;
                        }
                        $S_476 : {
                        // NORMAL
                            var var178 = thisRef.FLOATedgeSeparationojcsPolygonShapeojcTransformINTojcsPolygonShapeojcTransform(thisRef,poly1,xf1,local_16_INT,poly2,xf2); // type is FLOAT value type is FLOAT
                            local_19_FLOAT = var178; // type is FLOAT value type is FLOAT
                            var var180 = local_19_FLOAT; // type is FLOAT value type is FLOAT
                            var var181 = local_25_FLOAT; // type is FLOAT value type is FLOAT
                            if ((var180 <= var181)) {
                                __label__ = 509;
                                break $S_476;
                            }
                            __label__ = 498;
                            }
                        for(;;) switch (__label__) {
                            case 498 :
                            // NORMAL
                                local_24_INT = local_16_INT; // type is INT value type is INT
                                local_25_FLOAT = local_19_FLOAT; // type is FLOAT value type is FLOAT
                                __label__ = 428;
                                continue $L_428;
                            case 509 :
                            // NORMAL
                                var var183 = local_24_INT; // type is INT value type is INT
                                results.edgeIndex = var183;
                                var var184 = local_25_FLOAT; // type is FLOAT value type is FLOAT
                                results.separation = var184;
                                return;
                        }
                    }
            }
        }
    },

    FLOATedgeSeparationojcsPolygonShapeojcTransformINTojcsPolygonShapeojcTransform : function(thisRef,poly1,xf1,edge1,poly2,xf2) {
        var local_12_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_9_INT = null; // type is INT # of inits = 2
        var local_22_INT = null; // type is INT # of inits = 3
        var local_15_FLOAT = null; // type is FLOAT # of inits = 2
        var local_20_INT = null; // type is INT # of inits = 3
        var local_11_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_6_INT = null; // type is INT # of inits = 1
        var local_7_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_8_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_16_FLOAT = null; // type is FLOAT # of inits = 2
        var local_18_FLOAT = null; // type is FLOAT # of inits = 2
        var local_19_FLOAT = null; // type is FLOAT # of inits = 2
        var local_10_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_21_FLOAT = null; // type is FLOAT # of inits = 3
        var local_24_FLOAT = null; // type is FLOAT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_6_INT = poly1.m_count; // type is INT value type is INT
            local_7_REFERENCE = poly1.m_vertices; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@7e1f04e3
            local_8_REFERENCE = poly1.m_normals; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1bf8932b
            local_9_INT = poly2.m_count; // type is INT value type is INT
            local_10_REFERENCE = poly2.m_vertices; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@59217edd
            var var12 = ojcCollision.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var12 != 0)) {
                __label__ = 57;
                break $S_0;
            }
            __label__ = 38;
            }
        $M_57_38 : for(;;) switch (__label__) {
            case 38 :
            // NORMAL
                $S_38 : {
                // NORMAL
                    if ((0 > edge1)) {
                        __label__ = 49;
                        break $S_38;
                    }
                    __label__ = 43;
                    }
                $M_49_43 : for(;;) switch (__label__) {
                    case 49 :
                    // NORMAL
                        var var14 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                        jlAssertionError.VOIDinit(var14);
                        throw var14;
                    case 43 :
                    // NORMAL
                        var var13 = local_6_INT; // type is INT value type is INT
                        if ((edge1 < var13)) {
                            __label__ = 57;
                            continue $M_57_38;
                        }
                        __label__ = 49;
                        continue $M_49_43;
                }
            case 57 :
            // NORMAL
                $S_57 : {
                // NORMAL
                    local_11_REFERENCE = xf1.q; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5e5a9255
                    local_12_REFERENCE = xf2.q; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@58e4ad61
                    var local_13_REFERENCE = local_11_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@604ff2b6
                    var var22 = local_8_REFERENCE.data[edge1]; // type is REFERENCE value type is REFERENCE
                    var local_14_REFERENCE = var22; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@7da0c9d
                    local_15_FLOAT = ((local_13_REFERENCE.c * local_14_REFERENCE.x) - (local_13_REFERENCE.s * local_14_REFERENCE.y)); // type is FLOAT value type is FLOAT
                    local_16_FLOAT = ((local_13_REFERENCE.s * local_14_REFERENCE.x) + (local_13_REFERENCE.c * local_14_REFERENCE.y)); // type is FLOAT value type is FLOAT
                    var local_17_REFERENCE = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@498b9d8
                    local_18_FLOAT = ((local_17_REFERENCE.c * local_15_FLOAT) + (local_17_REFERENCE.s * local_16_FLOAT)); // type is FLOAT value type is FLOAT
                    local_19_FLOAT = (((-local_17_REFERENCE.s) * local_15_FLOAT) + (local_17_REFERENCE.c * local_16_FLOAT)); // type is FLOAT value type is FLOAT
                    local_20_INT = 0; // type is INT value type is INT
                    local_21_FLOAT = 3.4028235E38; // type is FLOAT value type is FLOAT
                    local_22_INT = 0; // type is INT value type is INT
                    __label__ = 183;
                    }
                $L_183 : for (;;) {
                    $S_183 : {
                    // NORMAL
                        var var81 = local_22_INT; // type is INT value type is INT
                        var var82 = local_9_INT; // type is INT value type is INT
                        if ((var81 >= var82)) {
                            __label__ = 238;
                            break $S_183;
                        }
                        __label__ = 190;
                        }
                    for(;;) switch (__label__) {
                        case 190 :
                        // NORMAL
                            $S_190 : {
                            // NORMAL
                                var var85 = local_10_REFERENCE.data[local_22_INT]; // type is REFERENCE value type is REFERENCE
                                var local_23_REFERENCE = var85; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@555f4d2d
                                local_24_FLOAT = ((local_23_REFERENCE.x * local_18_FLOAT) + (local_23_REFERENCE.y * local_19_FLOAT)); // type is FLOAT value type is FLOAT
                                var var98 = local_24_FLOAT; // type is FLOAT value type is FLOAT
                                var var99 = local_21_FLOAT; // type is FLOAT value type is FLOAT
                                if ((var98 >= var99)) {
                                    __label__ = 232;
                                    break $S_190;
                                }
                                __label__ = 224;
                                }
                            $M_224_232 : for(;;) switch (__label__) {
                                case 224 :
                                // NORMAL
                                    local_21_FLOAT = local_24_FLOAT; // type is FLOAT value type is FLOAT
                                    local_20_INT = local_22_INT; // type is INT value type is INT
                                    __label__ = 232;
                                    continue $M_224_232;
                                case 232 :
                                // NORMAL
                                    local_22_INT = (local_22_INT + 1); // type is INT value type is INT
                                    __label__ = 183;
                                    continue $L_183;
                            }
                        case 238 :
                        // NORMAL
                            var var106 = local_7_REFERENCE.data[edge1]; // type is REFERENCE value type is REFERENCE
                            var local_22_REFERENCE = var106; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@5f9db5e9
                            var local_23_FLOAT = (((local_11_REFERENCE.c * local_22_REFERENCE.x) - (local_11_REFERENCE.s * local_22_REFERENCE.y)) + xf1.p.x); // type is FLOAT value type is FLOAT
                            local_24_FLOAT = (((local_11_REFERENCE.s * local_22_REFERENCE.x) + (local_11_REFERENCE.c * local_22_REFERENCE.y)) + xf1.p.y); // type is FLOAT value type is FLOAT
                            var var141 = local_10_REFERENCE.data[local_20_INT]; // type is REFERENCE value type is REFERENCE
                            var local_25_REFERENCE = var141; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@226f94de
                            var local_26_FLOAT = ((((local_12_REFERENCE.c * local_25_REFERENCE.x) - (local_12_REFERENCE.s * local_25_REFERENCE.y)) + xf2.p.x) - local_23_FLOAT); // type is FLOAT value type is FLOAT
                            var local_27_FLOAT = ((((local_12_REFERENCE.s * local_25_REFERENCE.x) + (local_12_REFERENCE.c * local_25_REFERENCE.y)) + xf2.p.y) - local_24_FLOAT); // type is FLOAT value type is FLOAT
                            var local_28_FLOAT = ((local_26_FLOAT * local_15_FLOAT) + (local_27_FLOAT * local_16_FLOAT)); // type is FLOAT value type is FLOAT
                            return local_28_FLOAT;
                    }
                }
        }
    },

    VOIDfindIncidentEdgeA1ojcCollision$ClipVertexojcsPolygonShapeojcTransformINTojcsPolygonShapeojcTransform : function(thisRef,c,poly1,xf1,edge1,poly2,xf2) {
        var local_7_INT = null; // type is INT # of inits = 1
        var local_22_FLOAT = null; // type is FLOAT # of inits = 3
        var local_10_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_21_INT = null; // type is INT # of inits = 3
        var var90 = null; // type is INT # of inits = 2
        var local_8_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_13_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_19_FLOAT = null; // type is FLOAT # of inits = 2
        var local_25_FLOAT = null; // type is FLOAT # of inits = 1
        var local_15_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_20_FLOAT = null; // type is FLOAT # of inits = 2
        var local_23_INT = null; // type is INT # of inits = 4
        var local_12_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_9_INT = null; // type is INT # of inits = 2
        var local_11_REFERENCE = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_7_INT = poly1.m_count; // type is INT value type is INT
            local_8_REFERENCE = poly1.m_normals; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@14a98763
            local_9_INT = poly2.m_count; // type is INT value type is INT
            local_10_REFERENCE = poly2.m_vertices; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@6dc6222f
            local_11_REFERENCE = poly2.m_normals; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@211ed4a3
            var var12 = ojcCollision.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var12 != 0)) {
                __label__ = 60;
                break $S_0;
            }
            __label__ = 39;
            }
        $M_60_39 : for(;;) switch (__label__) {
            case 39 :
            // NORMAL
                $S_39 : {
                // NORMAL
                    if ((0 > edge1)) {
                        __label__ = 52;
                        break $S_39;
                    }
                    __label__ = 45;
                    }
                $M_52_45 : for(;;) switch (__label__) {
                    case 52 :
                    // NORMAL
                        var var14 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                        jlAssertionError.VOIDinit(var14);
                        throw var14;
                    case 45 :
                    // NORMAL
                        var var13 = local_7_INT; // type is INT value type is INT
                        if ((edge1 < var13)) {
                            __label__ = 60;
                            continue $M_60_39;
                        }
                        __label__ = 52;
                        continue $M_52_45;
                }
            case 60 :
            // NORMAL
                $S_60 : {
                // NORMAL
                    var var15 = c.data[0]; // type is REFERENCE value type is REFERENCE
                    local_12_REFERENCE = var15; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@5f45a369
                    var var17 = c.data[1]; // type is REFERENCE value type is REFERENCE
                    local_13_REFERENCE = var17; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@9269e17
                    var local_14_REFERENCE = xf1.q; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7c95f1df
                    local_15_REFERENCE = xf2.q; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@245ff3b1
                    var var24 = local_8_REFERENCE.data[edge1]; // type is REFERENCE value type is REFERENCE
                    var local_16_REFERENCE = var24; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@78d47a4f
                    var local_17_FLOAT = ((local_14_REFERENCE.c * local_16_REFERENCE.x) - (local_14_REFERENCE.s * local_16_REFERENCE.y)); // type is FLOAT value type is FLOAT
                    var local_18_FLOAT = ((local_14_REFERENCE.s * local_16_REFERENCE.x) + (local_14_REFERENCE.c * local_16_REFERENCE.y)); // type is FLOAT value type is FLOAT
                    local_19_FLOAT = ((local_15_REFERENCE.c * local_17_FLOAT) + (local_15_REFERENCE.s * local_18_FLOAT)); // type is FLOAT value type is FLOAT
                    local_20_FLOAT = (((-local_15_REFERENCE.s) * local_17_FLOAT) + (local_15_REFERENCE.c * local_18_FLOAT)); // type is FLOAT value type is FLOAT
                    local_21_INT = 0; // type is INT value type is INT
                    local_22_FLOAT = 3.4028235E38; // type is FLOAT value type is FLOAT
                    local_23_INT = 0; // type is INT value type is INT
                    __label__ = 189;
                    }
                $L_189 : for (;;) {
                    $S_189 : {
                    // NORMAL
                        var var81 = local_23_INT; // type is INT value type is INT
                        var var82 = local_9_INT; // type is INT value type is INT
                        if ((var81 >= var82)) {
                            __label__ = 244;
                            break $S_189;
                        }
                        __label__ = 196;
                        }
                    for(;;) switch (__label__) {
                        case 244 :
                        // NORMAL
                            $S_244 : {
                            // NORMAL
                                local_23_INT = local_21_INT; // type is INT value type is INT
                                var var86 = (local_23_INT + 1); // type is INT value type is INT
                                var var87 = local_9_INT; // type is INT value type is INT
                                if ((var86 >= var87)) {
                                    __label__ = 264;
                                    break $S_244;
                                }
                                __label__ = 257;
                                }
                            $M_257_264 : for(;;) switch (__label__) {
                                case 264 :
                                // NORMAL
                                    var90 = 0; // type is INT value type is INT
                                    break $M_257_264;
                                case 257 :
                                // NORMAL
                                    var90 = (local_23_INT + 1); // type is INT value type is INT
                                    break $M_257_264;
                            }
                            var local_24_INT = var90; // type is INT value type is INT
                            var var95 = local_10_REFERENCE.data[local_23_INT]; // type is REFERENCE value type is REFERENCE
                            var local_25_REFERENCE = var95; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@2fb8023a
                            var local_26_REFERENCE = local_12_REFERENCE.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7c70051b
                            var var100 = local_26_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2769b35f
                            var var114 = (((local_15_REFERENCE.c * local_25_REFERENCE.x) - (local_15_REFERENCE.s * local_25_REFERENCE.y)) + xf2.p.x); // type is FLOAT value type is FLOAT
                            var100.x = var114;
                            var var115 = local_26_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2769b35f
                            var var129 = (((local_15_REFERENCE.s * local_25_REFERENCE.x) + (local_15_REFERENCE.c * local_25_REFERENCE.y)) + xf2.p.y); // type is FLOAT value type is FLOAT
                            var115.y = var129;
                            var var131 = local_12_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7cb4a3ff
                            var var132 = Math.floor(edge1); // type is BYTE value type is BYTE
                            var131.indexA = var132;
                            var var134 = local_12_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1372d781
                            var var136 = Math.floor(local_23_INT); // type is BYTE value type is BYTE
                            var134.indexB = var136;
                            var var138 = local_12_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6fd65029
                            var var140 = ojcContactID$Type.FACE.INTordinal(ojcContactID$Type.FACE); // type is INT value type is INT
                            var var141 = Math.floor(var140); // type is BYTE value type is BYTE
                            var138.typeA = var141;
                            var var143 = local_12_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5cff5c7
                            var var145 = ojcContactID$Type.VERTEX.INTordinal(ojcContactID$Type.VERTEX); // type is INT value type is INT
                            var var146 = Math.floor(var145); // type is BYTE value type is BYTE
                            var143.typeB = var146;
                            var var149 = local_10_REFERENCE.data[local_24_INT]; // type is REFERENCE value type is REFERENCE
                            var local_27_REFERENCE = var149; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@5cbd05da
                            var local_28_REFERENCE = local_13_REFERENCE.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@59f60f13
                            var var154 = local_28_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4fc4b1c
                            var var168 = (((local_15_REFERENCE.c * local_27_REFERENCE.x) - (local_15_REFERENCE.s * local_27_REFERENCE.y)) + xf2.p.x); // type is FLOAT value type is FLOAT
                            var154.x = var168;
                            var var169 = local_28_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4fc4b1c
                            var var183 = (((local_15_REFERENCE.s * local_27_REFERENCE.x) + (local_15_REFERENCE.c * local_27_REFERENCE.y)) + xf2.p.y); // type is FLOAT value type is FLOAT
                            var169.y = var183;
                            var var185 = local_13_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7ee7e789
                            var var186 = Math.floor(edge1); // type is BYTE value type is BYTE
                            var185.indexA = var186;
                            var var188 = local_13_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4a40ae5a
                            var var190 = Math.floor(local_24_INT); // type is BYTE value type is BYTE
                            var188.indexB = var190;
                            var var192 = local_13_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2327be96
                            var var194 = ojcContactID$Type.FACE.INTordinal(ojcContactID$Type.FACE); // type is INT value type is INT
                            var var195 = Math.floor(var194); // type is BYTE value type is BYTE
                            var192.typeA = var195;
                            var var197 = local_13_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4565a545
                            var var199 = ojcContactID$Type.VERTEX.INTordinal(ojcContactID$Type.VERTEX); // type is INT value type is INT
                            var var200 = Math.floor(var199); // type is BYTE value type is BYTE
                            var197.typeB = var200;
                            return;
                        case 196 :
                        // NORMAL
                            $S_196 : {
                            // NORMAL
                                var var203 = local_11_REFERENCE.data[local_23_INT]; // type is REFERENCE value type is REFERENCE
                                var local_24_REFERENCE = var203; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@4ffd9cf
                                local_25_FLOAT = ((local_19_FLOAT * local_24_REFERENCE.x) + (local_20_FLOAT * local_24_REFERENCE.y)); // type is FLOAT value type is FLOAT
                                var var216 = local_25_FLOAT; // type is FLOAT value type is FLOAT
                                var var217 = local_22_FLOAT; // type is FLOAT value type is FLOAT
                                if ((var216 >= var217)) {
                                    __label__ = 238;
                                    break $S_196;
                                }
                                __label__ = 230;
                                }
                            $M_230_238 : for(;;) switch (__label__) {
                                case 238 :
                                // NORMAL
                                    local_23_INT = (local_23_INT + 1); // type is INT value type is INT
                                    __label__ = 189;
                                    continue $L_189;
                                case 230 :
                                // NORMAL
                                    local_22_FLOAT = local_25_FLOAT; // type is FLOAT value type is FLOAT
                                    local_21_INT = local_23_INT; // type is INT value type is INT
                                    __label__ = 238;
                                    continue $M_230_238;
                            }
                    }
                }
        }
    },

    INTclipSegmentToLineA1ojcCollision$ClipVertexA1ojcCollision$ClipVertexojcVec2FLOATINT : function(vOut,vIn,normal,offset,vertexIndexA) {
        var local_9_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_7_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_10_FLOAT = null; // type is FLOAT # of inits = 1
        var local_11_FLOAT = null; // type is FLOAT # of inits = 1
        var local_8_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_5_INT = null; // type is INT # of inits = 4
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_5_INT = 0; // type is INT value type is INT
            var var2 = vIn.data[0]; // type is REFERENCE value type is REFERENCE
            local_6_REFERENCE = var2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@20b8999a
            var var4 = vIn.data[1]; // type is REFERENCE value type is REFERENCE
            local_7_REFERENCE = var4; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3fd60e2
            local_8_REFERENCE = local_6_REFERENCE.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4c7d43d5
            local_9_REFERENCE = local_7_REFERENCE.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@24d2d0dd
            var var13 = ojcVec2.FLOATdotojcVec2ojcVec2(normal,local_8_REFERENCE); // type is FLOAT value type is FLOAT
            local_10_FLOAT = (var13 - offset); // type is FLOAT value type is FLOAT
            var var18 = ojcVec2.FLOATdotojcVec2ojcVec2(normal,local_9_REFERENCE); // type is FLOAT value type is FLOAT
            local_11_FLOAT = (var18 - offset); // type is FLOAT value type is FLOAT
            var var22 = local_10_FLOAT; // type is FLOAT value type is FLOAT
            if ((var22 > 0.0)) {
                __label__ = 66;
                break $S_0;
            }
            __label__ = 54;
            }
        $M_66_54 : for(;;) switch (__label__) {
            case 66 :
            // NORMAL
                $S_66 : {
                // NORMAL
                    var var27 = local_11_FLOAT; // type is FLOAT value type is FLOAT
                    if ((var27 > 0.0)) {
                        __label__ = 85;
                        break $S_66;
                    }
                    __label__ = 73;
                    }
                $M_85_73 : for(;;) switch (__label__) {
                    case 85 :
                    // NORMAL
                        $S_85 : {
                        // NORMAL
                            var var34 = (local_10_FLOAT * local_11_FLOAT); // type is FLOAT value type is FLOAT
                            if ((var34 >= 0.0)) {
                                return local_5_INT;
                            }
                            }
                        var local_12_FLOAT = (local_10_FLOAT / (local_10_FLOAT - local_11_FLOAT)); // type is FLOAT value type is FLOAT
                        var var44 = vOut.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                        var local_13_REFERENCE = var44; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@2a296830
                        var var47 = local_13_REFERENCE.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1891e4e0
                        var var57 = (local_8_REFERENCE.x + (local_12_FLOAT * (local_9_REFERENCE.x - local_8_REFERENCE.x))); // type is FLOAT value type is FLOAT
                        var47.x = var57;
                        var var59 = local_13_REFERENCE.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3e546fcc
                        var var69 = (local_8_REFERENCE.y + (local_12_FLOAT * (local_9_REFERENCE.y - local_8_REFERENCE.y))); // type is FLOAT value type is FLOAT
                        var59.y = var69;
                        var var71 = local_13_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@c3214e3
                        var var72 = Math.floor(vertexIndexA); // type is BYTE value type is BYTE
                        var71.indexA = var72;
                        var var74 = local_13_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6dbb85bd
                        var var77 = local_6_REFERENCE.id.indexB; // type is BYTE value type is BYTE
                        var74.indexB = var77;
                        var var79 = local_13_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7a9ada0e
                        var var81 = ojcContactID$Type.VERTEX.INTordinal(ojcContactID$Type.VERTEX); // type is INT value type is INT
                        var var82 = Math.floor(var81); // type is BYTE value type is BYTE
                        var79.typeA = var82;
                        var var84 = local_13_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@67ade09e
                        var var86 = ojcContactID$Type.FACE.INTordinal(ojcContactID$Type.FACE); // type is INT value type is INT
                        var var87 = Math.floor(var86); // type is BYTE value type is BYTE
                        var84.typeB = var87;
                        local_5_INT = (local_5_INT + 1); // type is INT value type is INT
                        return local_5_INT;
                    case 73 :
                    // NORMAL
                        var var29 = local_5_INT; // type is INT value type is INT
                        local_5_INT = (local_5_INT + 1); // type is INT value type is INT
                        var var30 = vOut.data[var29]; // type is REFERENCE value type is REFERENCE
                        var30.VOIDsetojcCollision$ClipVertex(var30,local_7_REFERENCE);
                        __label__ = 85;
                        continue $M_85_73;
                }
            case 54 :
            // NORMAL
                var var24 = local_5_INT; // type is INT value type is INT
                local_5_INT = (local_5_INT + 1); // type is INT value type is INT
                var var25 = vOut.data[var24]; // type is REFERENCE value type is REFERENCE
                var25.VOIDsetojcCollision$ClipVertex(var25,local_6_REFERENCE);
                __label__ = 66;
                continue $M_66_54;
        }
    },

    VOIDcollideCirclesojcManifoldojcsCircleShapeojcTransformojcsCircleShapeojcTransform : function(thisRef,manifold,circle1,xfA,circle2,xfB) {
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_7_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            manifold.pointCount = 0;
            local_6_REFERENCE = circle1.m_p; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1968e20d
            local_7_REFERENCE = circle2.m_p; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7c503578
            var local_8_FLOAT = (((xfA.q.c * local_6_REFERENCE.x) - (xfA.q.s * local_6_REFERENCE.y)) + xfA.p.x); // type is FLOAT value type is FLOAT
            var local_9_FLOAT = (((xfA.q.s * local_6_REFERENCE.x) + (xfA.q.c * local_6_REFERENCE.y)) + xfA.p.y); // type is FLOAT value type is FLOAT
            var local_10_FLOAT = (((xfB.q.c * local_7_REFERENCE.x) - (xfB.q.s * local_7_REFERENCE.y)) + xfB.p.x); // type is FLOAT value type is FLOAT
            var local_11_FLOAT = (((xfB.q.s * local_7_REFERENCE.x) + (xfB.q.c * local_7_REFERENCE.y)) + xfB.p.y); // type is FLOAT value type is FLOAT
            var local_12_FLOAT = (local_10_FLOAT - local_8_FLOAT); // type is FLOAT value type is FLOAT
            var local_13_FLOAT = (local_11_FLOAT - local_9_FLOAT); // type is FLOAT value type is FLOAT
            var local_14_FLOAT = ((local_12_FLOAT * local_12_FLOAT) + (local_13_FLOAT * local_13_FLOAT)); // type is FLOAT value type is FLOAT
            var local_15_FLOAT = (circle1.m_radius + circle2.m_radius); // type is FLOAT value type is FLOAT
            var var92 = local_14_FLOAT; // type is FLOAT value type is FLOAT
            var var95 = (local_15_FLOAT * local_15_FLOAT); // type is FLOAT value type is FLOAT
            if ((var92 <= var95)) {
                break $S_0;
            }
            return;
            }
        var var97 = ojcManifold$ManifoldType.CIRCLES; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@73dc5330
        manifold.type = var97;
        var var100 = manifold.localPoint.ojcVec2setojcVec2(manifold.localPoint,local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7fcac94c
        manifold.localNormal.VOIDsetZero(manifold.localNormal);
        manifold.pointCount = 1;
        var var103 = manifold.points.data[0]; // type is REFERENCE value type is REFERENCE
        var var106 = var103.localPoint.ojcVec2setojcVec2(var103.localPoint,local_7_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@21ec2432
        var var108 = manifold.points.data[0]; // type is REFERENCE value type is REFERENCE
        var108.id.VOIDzero(var108.id);
        return;
    },

    VOIDcollidePolygonAndCircleojcManifoldojcsPolygonShapeojcTransformojcsCircleShapeojcTransform : function(thisRef,manifold,polygon,xfA,circle,xfB) {
        var local_25_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_19_FLOAT = null; // type is FLOAT # of inits = 1
        var var100 = null; // type is INT # of inits = 2
        var local_36_FLOAT = null; // type is FLOAT # of inits = 3
        var local_21_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_17_FLOAT = null; // type is FLOAT # of inits = 2
        var local_22_INT = null; // type is INT # of inits = 4
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_37_FLOAT = null; // type is FLOAT # of inits = 3
        var local_16_FLOAT = null; // type is FLOAT # of inits = 4
        var local_15_INT = null; // type is INT # of inits = 3
        var local_24_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_35_FLOAT = null; // type is FLOAT # of inits = 1
        var local_13_FLOAT = null; // type is FLOAT # of inits = 2
        var local_18_INT = null; // type is INT # of inits = 2
        var local_20_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_14_FLOAT = null; // type is FLOAT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            manifold.pointCount = 0;
            local_6_REFERENCE = circle.m_p; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@dd33436
            var local_7_REFERENCE = xfB.q; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@79623029
            var local_8_REFERENCE = xfA.q; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1c00be7b
            var local_9_FLOAT = (((local_7_REFERENCE.c * local_6_REFERENCE.x) - (local_7_REFERENCE.s * local_6_REFERENCE.y)) + xfB.p.x); // type is FLOAT value type is FLOAT
            var local_10_FLOAT = (((local_7_REFERENCE.s * local_6_REFERENCE.x) + (local_7_REFERENCE.c * local_6_REFERENCE.y)) + xfB.p.y); // type is FLOAT value type is FLOAT
            var local_11_FLOAT = (local_9_FLOAT - xfA.p.x); // type is FLOAT value type is FLOAT
            var local_12_FLOAT = (local_10_FLOAT - xfA.p.y); // type is FLOAT value type is FLOAT
            local_13_FLOAT = ((local_8_REFERENCE.c * local_11_FLOAT) + (local_8_REFERENCE.s * local_12_FLOAT)); // type is FLOAT value type is FLOAT
            local_14_FLOAT = (((-local_8_REFERENCE.s) * local_11_FLOAT) + (local_8_REFERENCE.c * local_12_FLOAT)); // type is FLOAT value type is FLOAT
            local_15_INT = 0; // type is INT value type is INT
            local_16_FLOAT = -3.4028235E38; // type is FLOAT value type is FLOAT
            local_17_FLOAT = (polygon.m_radius + circle.m_radius); // type is FLOAT value type is FLOAT
            local_18_INT = polygon.m_count; // type is INT value type is INT
            local_20_REFERENCE = polygon.m_vertices; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@607edc53
            local_21_REFERENCE = polygon.m_normals; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@749826ee
            local_22_INT = 0; // type is INT value type is INT
            __label__ = 196;
            }
        $L_196 : for (;;) {
            $S_196 : {
            // NORMAL
                var var91 = local_22_INT; // type is INT value type is INT
                var var92 = local_18_INT; // type is INT value type is INT
                if ((var91 >= var92)) {
                    __label__ = 286;
                    break $S_196;
                }
                __label__ = 203;
                }
            for(;;) switch (__label__) {
                case 286 :
                // NORMAL
                    $S_286 : {
                    // NORMAL
                        local_22_INT = local_15_INT; // type is INT value type is INT
                        var var96 = (local_22_INT + 1); // type is INT value type is INT
                        var var97 = local_18_INT; // type is INT value type is INT
                        if ((var96 >= var97)) {
                            __label__ = 306;
                            break $S_286;
                        }
                        __label__ = 299;
                        }
                    $M_306_299 : for(;;) switch (__label__) {
                        case 299 :
                        // NORMAL
                            var100 = (local_22_INT + 1); // type is INT value type is INT
                            break $M_306_299;
                        case 306 :
                        // NORMAL
                            var100 = 0; // type is INT value type is INT
                            break $M_306_299;
                    }
                    $S_307 : {
                    // NORMAL
                        var local_23_INT = var100; // type is INT value type is INT
                        var var105 = local_20_REFERENCE.data[local_22_INT]; // type is REFERENCE value type is REFERENCE
                        local_24_REFERENCE = var105; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@79042ac6
                        var var109 = local_20_REFERENCE.data[local_23_INT]; // type is REFERENCE value type is REFERENCE
                        local_25_REFERENCE = var109; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@7dbec049
                        var var111 = local_16_FLOAT; // type is FLOAT value type is FLOAT
                        if ((var111 >= 1.1920929E-7)) {
                            __label__ = 459;
                            break $S_307;
                        }
                        __label__ = 331;
                        }
                    for(;;) switch (__label__) {
                        case 331 :
                        // NORMAL
                            manifold.pointCount = 1;
                            var var379 = ojcManifold$ManifoldType.FACE_A; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1c93a32c
                            manifold.type = var379;
                            var var382 = local_21_REFERENCE.data[local_15_INT]; // type is REFERENCE value type is REFERENCE
                            var local_26_REFERENCE = var382; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@57935a3
                            var var384 = manifold.localNormal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1373ed1b
                            var var386 = local_26_REFERENCE.x; // type is FLOAT value type is FLOAT
                            var384.x = var386;
                            var var387 = manifold.localNormal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@26e906cd
                            var var389 = local_26_REFERENCE.y; // type is FLOAT value type is FLOAT
                            var387.y = var389;
                            var var390 = manifold.localPoint; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@27e25bff
                            var var396 = ((local_24_REFERENCE.x + local_25_REFERENCE.x) * 0.5); // type is FLOAT value type is FLOAT
                            var390.x = var396;
                            var var397 = manifold.localPoint; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6bfaa68d
                            var var403 = ((local_24_REFERENCE.y + local_25_REFERENCE.y) * 0.5); // type is FLOAT value type is FLOAT
                            var397.y = var403;
                            var var405 = manifold.points.data[0]; // type is REFERENCE value type is REFERENCE
                            var local_27_REFERENCE = var405; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@67ed95dc
                            var var408 = local_27_REFERENCE.localPoint; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@9dc3882
                            var var410 = local_6_REFERENCE.x; // type is FLOAT value type is FLOAT
                            var408.x = var410;
                            var var412 = local_27_REFERENCE.localPoint; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3cd4a7e5
                            var var414 = local_6_REFERENCE.y; // type is FLOAT value type is FLOAT
                            var412.y = var414;
                            local_27_REFERENCE.id.VOIDzero(local_27_REFERENCE.id);
                            return;
                        case 459 :
                        // NORMAL
                            $S_459 : {
                            // NORMAL
                                var local_26_FLOAT = (local_13_FLOAT - local_24_REFERENCE.x); // type is FLOAT value type is FLOAT
                                var local_27_FLOAT = (local_14_FLOAT - local_24_REFERENCE.y); // type is FLOAT value type is FLOAT
                                var local_28_FLOAT = (local_25_REFERENCE.x - local_24_REFERENCE.x); // type is FLOAT value type is FLOAT
                                var local_29_FLOAT = (local_25_REFERENCE.y - local_24_REFERENCE.y); // type is FLOAT value type is FLOAT
                                var local_30_FLOAT = ((local_26_FLOAT * local_28_FLOAT) + (local_27_FLOAT * local_29_FLOAT)); // type is FLOAT value type is FLOAT
                                var local_31_FLOAT = (local_13_FLOAT - local_25_REFERENCE.x); // type is FLOAT value type is FLOAT
                                var local_32_FLOAT = (local_14_FLOAT - local_25_REFERENCE.y); // type is FLOAT value type is FLOAT
                                var local_33_FLOAT = (local_24_REFERENCE.x - local_25_REFERENCE.x); // type is FLOAT value type is FLOAT
                                var local_34_FLOAT = (local_24_REFERENCE.y - local_25_REFERENCE.y); // type is FLOAT value type is FLOAT
                                local_35_FLOAT = ((local_31_FLOAT * local_33_FLOAT) + (local_32_FLOAT * local_34_FLOAT)); // type is FLOAT value type is FLOAT
                                var var183 = local_30_FLOAT; // type is FLOAT value type is FLOAT
                                if ((var183 > 0.0)) {
                                    __label__ = 715;
                                    break $S_459;
                                }
                                __label__ = 584;
                                }
                            for(;;) switch (__label__) {
                                case 715 :
                                // NORMAL
                                    $S_715 : {
                                    // NORMAL
                                        var var185 = local_35_FLOAT; // type is FLOAT value type is FLOAT
                                        if ((var185 > 0.0)) {
                                            __label__ = 853;
                                            break $S_715;
                                        }
                                        __label__ = 722;
                                        }
                                    for(;;) switch (__label__) {
                                        case 853 :
                                        // NORMAL
                                            $S_853 : {
                                            // NORMAL
                                                local_36_FLOAT = ((local_24_REFERENCE.x + local_25_REFERENCE.x) * 0.5); // type is FLOAT value type is FLOAT
                                                local_37_FLOAT = ((local_24_REFERENCE.y + local_25_REFERENCE.y) * 0.5); // type is FLOAT value type is FLOAT
                                                var local_38_FLOAT = (local_13_FLOAT - local_36_FLOAT); // type is FLOAT value type is FLOAT
                                                var local_39_FLOAT = (local_14_FLOAT - local_37_FLOAT); // type is FLOAT value type is FLOAT
                                                var var305 = local_21_REFERENCE.data[local_22_INT]; // type is REFERENCE value type is REFERENCE
                                                var local_40_REFERENCE = var305; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@224a03c
                                                local_16_FLOAT = ((local_38_FLOAT * local_40_REFERENCE.x) + (local_39_FLOAT * local_40_REFERENCE.y)); // type is FLOAT value type is FLOAT
                                                var var317 = local_16_FLOAT; // type is FLOAT value type is FLOAT
                                                var var318 = local_17_FLOAT; // type is FLOAT value type is FLOAT
                                                if ((var317 <= var318)) {
                                                    break $S_853;
                                                }
                                                return;
                                                }
                                            manifold.pointCount = 1;
                                            var var320 = ojcManifold$ManifoldType.FACE_A; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@9ec96d1
                                            manifold.type = var320;
                                            var var321 = manifold.localNormal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@611cb746
                                            var var324 = local_21_REFERENCE.data[local_22_INT]; // type is REFERENCE value type is REFERENCE
                                            var var325 = var321.ojcVec2setojcVec2(var321,var324); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@786edf0f
                                            var var326 = manifold.localPoint; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5f6ca57e
                                            var var327 = local_36_FLOAT; // type is FLOAT value type is FLOAT
                                            var326.x = var327;
                                            var var328 = manifold.localPoint; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@32dbfa5c
                                            var var329 = local_37_FLOAT; // type is FLOAT value type is FLOAT
                                            var328.y = var329;
                                            var var331 = manifold.points.data[0]; // type is REFERENCE value type is REFERENCE
                                            var var334 = var331.localPoint.ojcVec2setojcVec2(var331.localPoint,local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@36f9ddc6
                                            var var336 = manifold.points.data[0]; // type is REFERENCE value type is REFERENCE
                                            var336.id.VOIDzero(var336.id);
                                            return;
                                        case 722 :
                                        // NORMAL
                                            $S_722 : {
                                            // NORMAL
                                                local_36_FLOAT = (local_13_FLOAT - local_25_REFERENCE.x); // type is FLOAT value type is FLOAT
                                                local_37_FLOAT = (local_14_FLOAT - local_25_REFERENCE.y); // type is FLOAT value type is FLOAT
                                                var var205 = ((local_36_FLOAT * local_36_FLOAT) + (local_37_FLOAT * local_37_FLOAT)); // type is FLOAT value type is FLOAT
                                                var var208 = (local_17_FLOAT * local_17_FLOAT); // type is FLOAT value type is FLOAT
                                                if ((var205 <= var208)) {
                                                    break $S_722;
                                                }
                                                return;
                                                }
                                            manifold.pointCount = 1;
                                            var var210 = ojcManifold$ManifoldType.FACE_A; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@38e1fab1
                                            manifold.type = var210;
                                            var var211 = manifold.localNormal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@21cef86
                                            var var215 = (local_13_FLOAT - local_25_REFERENCE.x); // type is FLOAT value type is FLOAT
                                            var211.x = var215;
                                            var var216 = manifold.localNormal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6ff8ec83
                                            var var220 = (local_14_FLOAT - local_25_REFERENCE.y); // type is FLOAT value type is FLOAT
                                            var216.y = var220;
                                            var var222 = manifold.localNormal.FLOATnormalize(manifold.localNormal); // type is FLOAT value type is FLOAT
                                            var var225 = manifold.localPoint.ojcVec2setojcVec2(manifold.localPoint,local_25_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@17971b57
                                            var var227 = manifold.points.data[0]; // type is REFERENCE value type is REFERENCE
                                            var var230 = var227.localPoint.ojcVec2setojcVec2(var227.localPoint,local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@20945f66
                                            var var232 = manifold.points.data[0]; // type is REFERENCE value type is REFERENCE
                                            var232.id.VOIDzero(var232.id);
                                            return;
                                    }
                                case 584 :
                                // NORMAL
                                    $S_584 : {
                                    // NORMAL
                                        local_36_FLOAT = (local_13_FLOAT - local_24_REFERENCE.x); // type is FLOAT value type is FLOAT
                                        local_37_FLOAT = (local_14_FLOAT - local_24_REFERENCE.y); // type is FLOAT value type is FLOAT
                                        var var250 = ((local_36_FLOAT * local_36_FLOAT) + (local_37_FLOAT * local_37_FLOAT)); // type is FLOAT value type is FLOAT
                                        var var253 = (local_17_FLOAT * local_17_FLOAT); // type is FLOAT value type is FLOAT
                                        if ((var250 <= var253)) {
                                            break $S_584;
                                        }
                                        return;
                                        }
                                    manifold.pointCount = 1;
                                    var var255 = ojcManifold$ManifoldType.FACE_A; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4591e42d
                                    manifold.type = var255;
                                    var var256 = manifold.localNormal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6da584e8
                                    var var260 = (local_13_FLOAT - local_24_REFERENCE.x); // type is FLOAT value type is FLOAT
                                    var256.x = var260;
                                    var var261 = manifold.localNormal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@424777a8
                                    var var265 = (local_14_FLOAT - local_24_REFERENCE.y); // type is FLOAT value type is FLOAT
                                    var261.y = var265;
                                    var var267 = manifold.localNormal.FLOATnormalize(manifold.localNormal); // type is FLOAT value type is FLOAT
                                    var var270 = manifold.localPoint.ojcVec2setojcVec2(manifold.localPoint,local_24_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@40aa7fe9
                                    var var272 = manifold.points.data[0]; // type is REFERENCE value type is REFERENCE
                                    var var275 = var272.localPoint.ojcVec2setojcVec2(var272.localPoint,local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@ad05b5d
                                    var var277 = manifold.points.data[0]; // type is REFERENCE value type is REFERENCE
                                    var277.id.VOIDzero(var277.id);
                                    return;
                            }
                    }
                case 203 :
                // NORMAL
                    $S_203 : {
                    // NORMAL
                        var var340 = local_20_REFERENCE.data[local_22_INT]; // type is REFERENCE value type is REFERENCE
                        var local_23_REFERENCE = var340; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@4b931c2b
                        var local_24_FLOAT = (local_13_FLOAT - local_23_REFERENCE.x); // type is FLOAT value type is FLOAT
                        var local_25_FLOAT = (local_14_FLOAT - local_23_REFERENCE.y); // type is FLOAT value type is FLOAT
                        var var356 = local_21_REFERENCE.data[local_22_INT]; // type is REFERENCE value type is REFERENCE
                        var var359 = (var356.x * local_24_FLOAT); // type is FLOAT value type is FLOAT
                        var var362 = local_21_REFERENCE.data[local_22_INT]; // type is REFERENCE value type is REFERENCE
                        local_19_FLOAT = (var359 + (var362.y * local_25_FLOAT)); // type is FLOAT value type is FLOAT
                        var var369 = local_19_FLOAT; // type is FLOAT value type is FLOAT
                        var var370 = local_17_FLOAT; // type is FLOAT value type is FLOAT
                        if ((var369 <= var370)) {
                            break $S_203;
                        }
                        return;
                        }
                    $S_264 : {
                    // NORMAL
                        var var372 = local_19_FLOAT; // type is FLOAT value type is FLOAT
                        var var373 = local_16_FLOAT; // type is FLOAT value type is FLOAT
                        if ((var372 <= var373)) {
                            __label__ = 280;
                            break $S_264;
                        }
                        __label__ = 272;
                        }
                    $M_280_272 : for(;;) switch (__label__) {
                        case 272 :
                        // NORMAL
                            local_16_FLOAT = local_19_FLOAT; // type is FLOAT value type is FLOAT
                            local_15_INT = local_22_INT; // type is INT value type is INT
                            __label__ = 280;
                            continue $M_280_272;
                        case 280 :
                        // NORMAL
                            local_22_INT = (local_22_INT + 1); // type is INT value type is INT
                            __label__ = 196;
                            continue $L_196;
                    }
            }
        }
    },

    VOIDcollideEdgeAndCircleojcManifoldojcsEdgeShapeojcTransformojcsCircleShapeojcTransform : function(thisRef,manifold,edgeA,xfA,circleB,xfB) {
        var local_11_FLOAT = null; // type is FLOAT # of inits = 1
        var local_7_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_9_FLOAT = null; // type is FLOAT # of inits = 1
        var local_10_FLOAT = null; // type is FLOAT # of inits = 1
        var local_11_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_8_FLOAT = null; // type is FLOAT # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            manifold.pointCount = 0;
            ojcTransform.VOIDmulToOutUnsafeojcTransformojcVec2ojcVec2(xfB,circleB.m_p,thisRef.temp);
            ojcTransform.VOIDmulTransToOutUnsafeojcTransformojcVec2ojcVec2(xfA,thisRef.temp,thisRef.Q);
            local_6_REFERENCE = edgeA.m_vertex1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@360018fd
            local_7_REFERENCE = edgeA.m_vertex2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@29eb1416
            var var10 = thisRef.e.ojcVec2setojcVec2(thisRef.e,local_7_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4ec134c5
            var var12 = var10.ojcVec2subLocalojcVec2(var10,local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5e02057
            var var13 = thisRef.e; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@339107e6
            var var16 = thisRef.temp.ojcVec2setojcVec2(thisRef.temp,local_7_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@422bee26
            var var18 = var16.ojcVec2subLocalojcVec2(var16,thisRef.Q); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@58b8dba
            var var19 = ojcVec2.FLOATdotojcVec2ojcVec2(var13,var18); // type is FLOAT value type is FLOAT
            local_8_FLOAT = var19; // type is FLOAT value type is FLOAT
            var var22 = thisRef.e; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1edf7c4
            var var25 = thisRef.temp.ojcVec2setojcVec2(thisRef.temp,thisRef.Q); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3af87e28
            var var27 = var25.ojcVec2subLocalojcVec2(var25,local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@273ffd8f
            var var28 = ojcVec2.FLOATdotojcVec2ojcVec2(var22,var27); // type is FLOAT value type is FLOAT
            local_9_FLOAT = var28; // type is FLOAT value type is FLOAT
            local_10_FLOAT = (edgeA.m_radius + circleB.m_radius); // type is FLOAT value type is FLOAT
            var var36 = thisRef.cf; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7e80528f
            var36.indexB = 0;
            var var37 = thisRef.cf; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@103dc94c
            var var39 = ojcContactID$Type.VERTEX.INTordinal(ojcContactID$Type.VERTEX); // type is INT value type is INT
            var var40 = Math.floor(var39); // type is BYTE value type is BYTE
            var37.typeB = var40;
            var var41 = local_9_FLOAT; // type is FLOAT value type is FLOAT
            if ((var41 > 0.0)) {
                __label__ = 343;
                break $S_0;
            }
            __label__ = 149;
            }
        for(;;) switch (__label__) {
            case 343 :
            // NORMAL
                $S_343 : {
                // NORMAL
                    var var60 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                    if ((var60 > 0.0)) {
                        __label__ = 546;
                        break $S_343;
                    }
                    __label__ = 350;
                    }
                for(;;) switch (__label__) {
                    case 546 :
                    // NORMAL
                        $S_546 : {
                        // NORMAL
                            var var64 = ojcVec2.FLOATdotojcVec2ojcVec2(thisRef.e,thisRef.e); // type is FLOAT value type is FLOAT
                            local_11_FLOAT = var64; // type is FLOAT value type is FLOAT
                            var var67 = ojcCollision.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                            if ((var67 != 0)) {
                                __label__ = 580;
                                break $S_546;
                            }
                            __label__ = 565;
                            }
                        $M_565_580 : for(;;) switch (__label__) {
                            case 580 :
                            // NORMAL
                                $S_580 : {
                                // NORMAL
                                    var var168 = thisRef.P.ojcVec2setojcVec2(thisRef.P,local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@69cdfc5d
                                    var var170 = var168.ojcVec2mulLocalFLOAT(var168,local_8_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3146b76e
                                    var var173 = thisRef.temp.ojcVec2setojcVec2(thisRef.temp,local_7_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4dae9fe3
                                    var var175 = var173.ojcVec2mulLocalFLOAT(var173,local_9_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@332748b3
                                    var var176 = var170.ojcVec2addLocalojcVec2(var170,var175); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@358e659e
                                    var var180 = thisRef.P.ojcVec2mulLocalFLOAT(thisRef.P,(1.0 / local_11_FLOAT)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@31f75986
                                    var var183 = ojcCollision.d.ojcVec2setojcVec2(ojcCollision.d,thisRef.Q); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@89f99dc
                                    var var185 = var183.ojcVec2subLocalojcVec2(var183,thisRef.P); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1743aac
                                    var var188 = ojcVec2.FLOATdotojcVec2ojcVec2(ojcCollision.d,ojcCollision.d); // type is FLOAT value type is FLOAT
                                    var local_12_FLOAT = var188; // type is FLOAT value type is FLOAT
                                    var var190 = local_12_FLOAT; // type is FLOAT value type is FLOAT
                                    var var193 = (local_10_FLOAT * local_10_FLOAT); // type is FLOAT value type is FLOAT
                                    if ((var190 <= var193)) {
                                        break $S_580;
                                    }
                                    return;
                                    }
                                $S_665 : {
                                // NORMAL
                                    var var195 = thisRef.n; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@47900d89
                                    var var198 = (-thisRef.e.y); // type is FLOAT value type is FLOAT
                                    var195.x = var198;
                                    var var199 = thisRef.n; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4ca05794
                                    var var201 = thisRef.e.x; // type is FLOAT value type is FLOAT
                                    var199.y = var201;
                                    var var202 = thisRef.n; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@388576a5
                                    var var205 = thisRef.temp.ojcVec2setojcVec2(thisRef.temp,thisRef.Q); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@18848a43
                                    var var207 = var205.ojcVec2subLocalojcVec2(var205,local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5fbf209f
                                    var var208 = ojcVec2.FLOATdotojcVec2ojcVec2(var202,var207); // type is FLOAT value type is FLOAT
                                    if ((var208 >= 0.0)) {
                                        __label__ = 746;
                                        break $S_665;
                                    }
                                    __label__ = 722;
                                    }
                                $M_722_746 : for(;;) switch (__label__) {
                                    case 746 :
                                    // NORMAL
                                        var var219 = thisRef.n.FLOATnormalize(thisRef.n); // type is FLOAT value type is FLOAT
                                        var var220 = thisRef.cf; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@11edc00b
                                        var220.indexA = 0;
                                        var var221 = thisRef.cf; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2ceaccd
                                        var var223 = ojcContactID$Type.FACE.INTordinal(ojcContactID$Type.FACE); // type is INT value type is INT
                                        var var224 = Math.floor(var223); // type is BYTE value type is BYTE
                                        var221.typeA = var224;
                                        manifold.pointCount = 1;
                                        var var225 = ojcManifold$ManifoldType.FACE_A; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3ea4e845
                                        manifold.type = var225;
                                        var var228 = manifold.localNormal.ojcVec2setojcVec2(manifold.localNormal,thisRef.n); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@18b99cd6
                                        var var231 = manifold.localPoint.ojcVec2setojcVec2(manifold.localPoint,local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@672bea52
                                        var var233 = manifold.points.data[0]; // type is REFERENCE value type is REFERENCE
                                        var233.id.VOIDsetojcContactID(var233.id,thisRef.cf);
                                        var var237 = manifold.points.data[0]; // type is REFERENCE value type is REFERENCE
                                        var var240 = var237.localPoint.ojcVec2setojcVec2(var237.localPoint,circleB.m_p); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@10f48abe
                                        return;
                                    case 722 :
                                    // NORMAL
                                        var var217 = thisRef.n.ojcVec2setFLOATFLOAT(thisRef.n,(-thisRef.n.x),(-thisRef.n.y)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@98bae25
                                        __label__ = 746;
                                        continue $M_722_746;
                                }
                            case 565 :
                            // NORMAL
                                $S_565 : {
                                // NORMAL
                                    var var68 = local_11_FLOAT; // type is FLOAT value type is FLOAT
                                    if ((var68 > 0.0)) {
                                        __label__ = 580;
                                        continue $M_565_580;
                                    }
                                    }
                                var var70 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                jlAssertionError.VOIDinit(var70);
                                throw var70;
                        }
                    case 350 :
                    // NORMAL
                        $S_350 : {
                        // NORMAL
                            local_11_REFERENCE = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@72e2cf04
                            var var114 = ojcCollision.d.ojcVec2setojcVec2(ojcCollision.d,thisRef.Q); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5d00ccee
                            var var116 = var114.ojcVec2subLocalojcVec2(var114,local_11_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6541c466
                            var var119 = ojcVec2.FLOATdotojcVec2ojcVec2(ojcCollision.d,ojcCollision.d); // type is FLOAT value type is FLOAT
                            var local_12_FLOAT = var119; // type is FLOAT value type is FLOAT
                            var var121 = local_12_FLOAT; // type is FLOAT value type is FLOAT
                            var var124 = (local_10_FLOAT * local_10_FLOAT); // type is FLOAT value type is FLOAT
                            if ((var121 <= var124)) {
                                break $S_350;
                            }
                            return;
                            }
                        $S_393 : {
                        // NORMAL
                            var var126 = edgeA.m_hasVertex3; // type is BOOLEAN value type is BOOLEAN
                            if ((var126 == 0)) {
                                __label__ = 460;
                                break $S_393;
                            }
                            __label__ = 400;
                            }
                        $M_460_400 : for(;;) switch (__label__) {
                            case 460 :
                            // NORMAL
                                var var147 = thisRef.cf; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5154130a
                                var147.indexA = 1;
                                var var148 = thisRef.cf; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@57a7583
                                var var150 = ojcContactID$Type.VERTEX.INTordinal(ojcContactID$Type.VERTEX); // type is INT value type is INT
                                var var151 = Math.floor(var150); // type is BYTE value type is BYTE
                                var148.typeA = var151;
                                manifold.pointCount = 1;
                                var var152 = ojcManifold$ManifoldType.CIRCLES; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5e46ae7e
                                manifold.type = var152;
                                manifold.localNormal.VOIDsetZero(manifold.localNormal);
                                var var156 = manifold.localPoint.ojcVec2setojcVec2(manifold.localPoint,local_11_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@354f3324
                                var var158 = manifold.points.data[0]; // type is REFERENCE value type is REFERENCE
                                var158.id.VOIDsetojcContactID(var158.id,thisRef.cf);
                                var var162 = manifold.points.data[0]; // type is REFERENCE value type is REFERENCE
                                var var165 = var162.localPoint.ojcVec2setojcVec2(var162.localPoint,circleB.m_p); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@44f2bac4
                                return;
                            case 400 :
                            // NORMAL
                                var local_13_REFERENCE = edgeA.m_vertex3; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@12f209b4
                                var local_14_REFERENCE = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@72e2cf04
                                var local_15_REFERENCE = thisRef.e1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@79ac70ca
                                var var133 = local_15_REFERENCE.ojcVec2setojcVec2(local_15_REFERENCE,local_13_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3536aac8
                                var var135 = var133.ojcVec2subLocalojcVec2(var133,local_14_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@64c30230
                                var var136 = local_15_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@667e18b5
                                var var139 = thisRef.temp.ojcVec2setojcVec2(thisRef.temp,thisRef.Q); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7cce1e90
                                var var141 = var139.ojcVec2subLocalojcVec2(var139,local_14_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7cae8b2b
                                var var142 = ojcVec2.FLOATdotojcVec2ojcVec2(var136,var141); // type is FLOAT value type is FLOAT
                                var local_16_FLOAT = var142; // type is FLOAT value type is FLOAT
                                var var145 = local_16_FLOAT; // type is FLOAT value type is FLOAT
                                if ((var145 <= 0.0)) {
                                    __label__ = 460;
                                    continue $M_460_400;
                                }
                                return;
                        }
                }
            case 149 :
            // NORMAL
                $S_149 : {
                // NORMAL
                    local_11_REFERENCE = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@60c73ebf
                    var var47 = ojcCollision.d.ojcVec2setojcVec2(ojcCollision.d,thisRef.Q); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@c40c
                    var var49 = var47.ojcVec2subLocalojcVec2(var47,local_11_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@162ddf09
                    var var52 = ojcVec2.FLOATdotojcVec2ojcVec2(ojcCollision.d,ojcCollision.d); // type is FLOAT value type is FLOAT
                    var local_12_FLOAT = var52; // type is FLOAT value type is FLOAT
                    var var55 = local_12_FLOAT; // type is FLOAT value type is FLOAT
                    var var58 = (local_10_FLOAT * local_10_FLOAT); // type is FLOAT value type is FLOAT
                    if ((var55 <= var58)) {
                        break $S_149;
                    }
                    return;
                    }
                $S_192 : {
                // NORMAL
                    var var71 = edgeA.m_hasVertex0; // type is BOOLEAN value type is BOOLEAN
                    if ((var71 == 0)) {
                        __label__ = 257;
                        break $S_192;
                    }
                    __label__ = 199;
                    }
                $M_257_199 : for(;;) switch (__label__) {
                    case 257 :
                    // NORMAL
                        var var92 = thisRef.cf; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1a9b79c2
                        var92.indexA = 0;
                        var var93 = thisRef.cf; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@12e44e69
                        var var95 = ojcContactID$Type.VERTEX.INTordinal(ojcContactID$Type.VERTEX); // type is INT value type is INT
                        var var96 = Math.floor(var95); // type is BYTE value type is BYTE
                        var93.typeA = var96;
                        manifold.pointCount = 1;
                        var var97 = ojcManifold$ManifoldType.CIRCLES; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1442c89d
                        manifold.type = var97;
                        manifold.localNormal.VOIDsetZero(manifold.localNormal);
                        var var101 = manifold.localPoint.ojcVec2setojcVec2(manifold.localPoint,local_11_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6cef988b
                        var var103 = manifold.points.data[0]; // type is REFERENCE value type is REFERENCE
                        var103.id.VOIDsetojcContactID(var103.id,thisRef.cf);
                        var var107 = manifold.points.data[0]; // type is REFERENCE value type is REFERENCE
                        var var110 = var107.localPoint.ojcVec2setojcVec2(var107.localPoint,circleB.m_p); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2dfbb9bd
                        return;
                    case 199 :
                    // NORMAL
                        var local_13_REFERENCE = edgeA.m_vertex0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1d5c3d6d
                        var local_14_REFERENCE = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@60c73ebf
                        var var78 = thisRef.e1.ojcVec2setojcVec2(thisRef.e1,local_14_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1fd8087b
                        var var80 = var78.ojcVec2subLocalojcVec2(var78,local_13_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@f63e0cb
                        var var81 = thisRef.e1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7f2596cb
                        var var84 = thisRef.temp.ojcVec2setojcVec2(thisRef.temp,local_14_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3ee6b17
                        var var86 = var84.ojcVec2subLocalojcVec2(var84,thisRef.Q); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5caa30c1
                        var var87 = ojcVec2.FLOATdotojcVec2ojcVec2(var81,var86); // type is FLOAT value type is FLOAT
                        var local_15_FLOAT = var87; // type is FLOAT value type is FLOAT
                        var var90 = local_15_FLOAT; // type is FLOAT value type is FLOAT
                        if ((var90 <= 0.0)) {
                            __label__ = 257;
                            continue $M_257_199;
                        }
                        return;
                }
        }
    },

    VOIDcollideEdgeAndPolygonojcManifoldojcsEdgeShapeojcTransformojcsPolygonShapeojcTransform : function(thisRef,manifold,edgeA,xfA,polygonB,xfB) {
        var __label__ = null;
        thisRef.collider.VOIDcollideojcManifoldojcsEdgeShapeojcTransformojcsPolygonShapeojcTransform(thisRef.collider,manifold,edgeA,xfA,polygonB,xfB);
        return;
    },

    classInitCheck : function() {
        if (!ojcCollision.__initialized) {
            ojcCollision.__initialized = true;
            var thePrototype = ojcCollision.Create.prototype;
            thePrototype.instanceOf = ojcCollision.instanceOf;
            thePrototype.ClassgetClass = ojcCollision.ClassgetClass;
            thePrototype.VOIDcollideEdgeAndPolygonojcManifoldojcsEdgeShapeojcTransformojcsPolygonShapeojcTransform = ojcCollision.VOIDcollideEdgeAndPolygonojcManifoldojcsEdgeShapeojcTransformojcsPolygonShapeojcTransform;
            thePrototype.VOIDcollideEdgeAndCircleojcManifoldojcsEdgeShapeojcTransformojcsCircleShapeojcTransform = ojcCollision.VOIDcollideEdgeAndCircleojcManifoldojcsEdgeShapeojcTransformojcsCircleShapeojcTransform;
            thePrototype.VOIDcollidePolygonAndCircleojcManifoldojcsPolygonShapeojcTransformojcsCircleShapeojcTransform = ojcCollision.VOIDcollidePolygonAndCircleojcManifoldojcsPolygonShapeojcTransformojcsCircleShapeojcTransform;
            thePrototype.VOIDcollideCirclesojcManifoldojcsCircleShapeojcTransformojcsCircleShapeojcTransform = ojcCollision.VOIDcollideCirclesojcManifoldojcsCircleShapeojcTransformojcsCircleShapeojcTransform;
            thePrototype.VOIDfindIncidentEdgeA1ojcCollision$ClipVertexojcsPolygonShapeojcTransformINTojcsPolygonShapeojcTransform = ojcCollision.VOIDfindIncidentEdgeA1ojcCollision$ClipVertexojcsPolygonShapeojcTransformINTojcsPolygonShapeojcTransform;
            thePrototype.FLOATedgeSeparationojcsPolygonShapeojcTransformINTojcsPolygonShapeojcTransform = ojcCollision.FLOATedgeSeparationojcsPolygonShapeojcTransformINTojcsPolygonShapeojcTransform;
            thePrototype.VOIDfindMaxSeparationojcCollision$EdgeResultsojcsPolygonShapeojcTransformojcsPolygonShapeojcTransform = ojcCollision.VOIDfindMaxSeparationojcCollision$EdgeResultsojcsPolygonShapeojcTransformojcsPolygonShapeojcTransform;
            thePrototype.VOIDcollidePolygonsojcManifoldojcsPolygonShapeojcTransformojcsPolygonShapeojcTransform = ojcCollision.VOIDcollidePolygonsojcManifoldojcsPolygonShapeojcTransformojcsPolygonShapeojcTransform;
            thePrototype.BOOLEANtestOverlapojcsShapeINTojcsShapeINTojcTransformojcTransform = ojcCollision.BOOLEANtestOverlapojcsShapeINTojcsShapeINTojcTransformojcTransform;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            ojcVec2.classInitCheck();
            ojcCollision.VOIDclinit();
        }
    },

};

var ojcDistanceInput = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 64,
    __implementedTypes : [1,64],

    Create : function() {
        this.proxyA = null; // declared in org.jbox2d.collision.DistanceInput
        this.proxyB = null; // declared in org.jbox2d.collision.DistanceInput
        this.transformA = null; // declared in org.jbox2d.collision.DistanceInput
        this.transformB = null; // declared in org.jbox2d.collision.DistanceInput
        this.useRadii = false; // declared in org.jbox2d.collision.DistanceInput
    },

    instanceOf : function(aType) {
        return ojcDistanceInput.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcDistanceInput;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcDistance$DistanceProxy.Create(); // type is REFERENCE value type is REFERENCE
        ojcDistance$DistanceProxy.VOIDinit(var0);
        thisRef.proxyA = var0;
        var var1 = new ojcDistance$DistanceProxy.Create(); // type is REFERENCE value type is REFERENCE
        ojcDistance$DistanceProxy.VOIDinit(var1);
        thisRef.proxyB = var1;
        var var2 = new ojcTransform.Create(); // type is REFERENCE value type is REFERENCE
        ojcTransform.VOIDinit(var2);
        thisRef.transformA = var2;
        var var3 = new ojcTransform.Create(); // type is REFERENCE value type is REFERENCE
        ojcTransform.VOIDinit(var3);
        thisRef.transformB = var3;
        return;
    },

    classInitCheck : function() {
        if (!ojcDistanceInput.__initialized) {
            ojcDistanceInput.__initialized = true;
            var thePrototype = ojcDistanceInput.Create.prototype;
            thePrototype.instanceOf = ojcDistanceInput.instanceOf;
            thePrototype.ClassgetClass = ojcDistanceInput.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojcDistance$DistanceProxy = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 65,
    __implementedTypes : [1,65],
    $assertionsDisabled : false, // declared in org.jbox2d.collision.Distance$DistanceProxy

    Create : function() {
        this.m_vertices = null; // declared in org.jbox2d.collision.Distance$DistanceProxy
        this.m_buffer = null; // declared in org.jbox2d.collision.Distance$DistanceProxy
        this.m_count = 0; // declared in org.jbox2d.collision.Distance$DistanceProxy
        this.m_radius = 0; // declared in org.jbox2d.collision.Distance$DistanceProxy
    },

    instanceOf : function(aType) {
        return ojcDistance$DistanceProxy.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcDistance$DistanceProxy;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcDistance.BOOLEANdesiredAssertionStatus(ojcDistance); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_13_9 : for(;;) switch (__label__) {
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_13_9;
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_13_9;
        }
        ojcDistance$DistanceProxy.$assertionsDisabled = var1;
        return;
    },

    VOIDinit : function(thisRef) {
        var local_1_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = bytecoder.newArray(8,null); // type is REFERENCE value type is REFERENCE
            thisRef.m_vertices = var0;
            local_1_INT = 0; // type is INT value type is INT
            __label__ = 15;
            }
        $L_15 : for (;;) {
            $S_15 : {
            // NORMAL
                var var3 = local_1_INT; // type is INT value type is INT
                var var5 = thisRef.m_vertices.data.length; // type is INT value type is INT
                if ((var3 >= var5)) {
                    __label__ = 43;
                    break $S_15;
                }
                __label__ = 24;
                }
            for(;;) switch (__label__) {
                case 24 :
                // NORMAL
                    var var6 = thisRef.m_vertices; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@60eff8a4
                    var var7 = local_1_INT; // type is INT value type is INT
                    var var8 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
                    ojcVec2.VOIDinit(var8);
                    var6.data[var7] = var8;
                    local_1_INT = (local_1_INT + 1); // type is INT value type is INT
                    __label__ = 15;
                    continue $L_15;
                case 43 :
                // NORMAL
                    var var9 = bytecoder.newArray(2,null); // type is REFERENCE value type is REFERENCE
                    thisRef.m_buffer = var9;
                    thisRef.m_count = 0;
                    thisRef.m_radius = 0.0;
                    return;
            }
        }
    },

    VOIDsetojcsShapeINT : function(thisRef,shape,index) {
        var local_5_INT = null; // type is INT # of inits = 3
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcDistance$1.$SwitchMap$org$jbox2d$collision$shapes$ShapeType; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@ef2ffaa
            var var1 = shape.ojcsShapeTypegetType(shape); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@87475dc
            var var2 = var1.INTordinal(var1); // type is INT value type is INT
            var var3 = var0.data[var2]; // type is INT value type is INT
            if (var3 < 1 || var3 > 4) {
             __label__ = 330;
            break $S_0;
            }
            switch(var3 - 1) {
             case 0:
                 __label__ = 40;
            break $S_0;
             case 1:
                 __label__ = 75;
            break $S_0;
             case 2:
                 __label__ = 139;
            break $S_0;
             case 3:
                 __label__ = 277;
            break $S_0;
            }
            throw 'Illegal jump target!';
            }
        for(;;) switch (__label__) {
            case 139 :
            // NORMAL
                $S_139 : {
                // NORMAL
                    local_5_REFERENCE = shape; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7375522d
                    var var24 = ojcDistance$DistanceProxy.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                    if ((var24 != 0)) {
                        __label__ = 173;
                        break $S_139;
                    }
                    __label__ = 151;
                    }
                $M_151_173 : for(;;) switch (__label__) {
                    case 151 :
                    // NORMAL
                        $S_151 : {
                        // NORMAL
                            if ((0 > index)) {
                                __label__ = 165;
                                break $S_151;
                            }
                            __label__ = 156;
                            }
                        $M_156_165 : for(;;) switch (__label__) {
                            case 156 :
                            // NORMAL
                                var var26 = local_5_REFERENCE.m_count; // type is INT value type is INT
                                if ((index < var26)) {
                                    __label__ = 173;
                                    continue $M_151_173;
                                }
                                __label__ = 165;
                                continue $M_156_165;
                            case 165 :
                            // NORMAL
                                var var27 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                jlAssertionError.VOIDinit(var27);
                                throw var27;
                        }
                    case 173 :
                    // NORMAL
                        $S_173 : {
                        // NORMAL
                            var var28 = thisRef.m_buffer; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@5f100197
                            var var31 = local_5_REFERENCE.m_vertices.data[index]; // type is REFERENCE value type is REFERENCE
                            var28.data[0] = var31;
                            var var32 = (index + 1); // type is INT value type is INT
                            var var34 = local_5_REFERENCE.m_count; // type is INT value type is INT
                            if ((var32 >= var34)) {
                                __label__ = 215;
                                break $S_173;
                            }
                            __label__ = 197;
                            }
                        $M_215_197 : for(;;) switch (__label__) {
                            case 197 :
                            // NORMAL
                                var var39 = thisRef.m_buffer; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@224213ca
                                var var43 = local_5_REFERENCE.m_vertices.data[(index + 1)]; // type is REFERENCE value type is REFERENCE
                                var39.data[1] = var43;
                                break $M_215_197;
                            case 215 :
                            // NORMAL
                                var var35 = thisRef.m_buffer; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3bd4a787
                                var var38 = local_5_REFERENCE.m_vertices.data[0]; // type is REFERENCE value type is REFERENCE
                                var35.data[1] = var38;
                                break $M_215_197;
                        }
                        var var45 = thisRef.m_vertices.data[0]; // type is REFERENCE value type is REFERENCE
                        var var47 = thisRef.m_buffer.data[0]; // type is REFERENCE value type is REFERENCE
                        var var48 = var45.ojcVec2setojcVec2(var45,var47); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@10a5efb4
                        var var50 = thisRef.m_vertices.data[1]; // type is REFERENCE value type is REFERENCE
                        var var52 = thisRef.m_buffer.data[1]; // type is REFERENCE value type is REFERENCE
                        var var53 = var50.ojcVec2setojcVec2(var50,var52); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4fe6588e
                        thisRef.m_count = 2;
                        var var55 = local_5_REFERENCE.m_radius; // type is FLOAT value type is FLOAT
                        thisRef.m_radius = var55;
                        return;
                }
            case 330 :
            // NORMAL
                $S_330 : {
                // NORMAL
                    var var4 = ojcDistance$DistanceProxy.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                    if ((var4 != 0)) {
                        return;
                    }
                    }
                var var5 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var5);
                throw var5;
            case 75 :
            // NORMAL
                $S_75 : {
                // NORMAL
                    local_4_REFERENCE = shape; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7375522d
                    var var8 = local_4_REFERENCE.m_count; // type is INT value type is INT
                    thisRef.m_count = var8;
                    var var10 = local_4_REFERENCE.m_radius; // type is FLOAT value type is FLOAT
                    thisRef.m_radius = var10;
                    local_5_INT = 0; // type is INT value type is INT
                    __label__ = 102;
                    }
                $L_102 : for (;;) {
                    $S_102 : {
                    // NORMAL
                        var var13 = local_5_INT; // type is INT value type is INT
                        var var14 = thisRef.m_count; // type is INT value type is INT
                        if ((var13 >= var14)) {
                            __label__ = 136;
                            break $S_102;
                        }
                        __label__ = 111;
                        }
                    for(;;) switch (__label__) {
                        case 111 :
                        // NORMAL
                            var var17 = thisRef.m_vertices.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                            var var21 = local_4_REFERENCE.m_vertices.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                            var var22 = var17.ojcVec2setojcVec2(var17,var21); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7d88defb
                            local_5_INT = (local_5_INT + 1); // type is INT value type is INT
                            __label__ = 102;
                            continue $L_102;
                        case 136 :
                        // NORMAL
                            return;
                    }
                }
            case 40 :
            // NORMAL
                var local_3_REFERENCE = shape; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7375522d
                var var58 = thisRef.m_vertices.data[0]; // type is REFERENCE value type is REFERENCE
                var var61 = var58.ojcVec2setojcVec2(var58,local_3_REFERENCE.m_p); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@63fea652
                thisRef.m_count = 1;
                var var63 = local_3_REFERENCE.m_radius; // type is FLOAT value type is FLOAT
                thisRef.m_radius = var63;
                return;
            case 277 :
            // NORMAL
                var local_6_REFERENCE = shape; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7375522d
                var var66 = thisRef.m_vertices.data[0]; // type is REFERENCE value type is REFERENCE
                var var69 = var66.ojcVec2setojcVec2(var66,local_6_REFERENCE.m_vertex1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5c992dd6
                var var71 = thisRef.m_vertices.data[1]; // type is REFERENCE value type is REFERENCE
                var var74 = var71.ojcVec2setojcVec2(var71,local_6_REFERENCE.m_vertex2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@21462ce3
                thisRef.m_count = 2;
                var var76 = local_6_REFERENCE.m_radius; // type is FLOAT value type is FLOAT
                thisRef.m_radius = var76;
                return;
        }
    },

    ojcVec2getVertexINT : function(thisRef,index) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcDistance$DistanceProxy.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 27;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_27_6 : for(;;) switch (__label__) {
            case 27 :
            // NORMAL
                var var3 = thisRef.m_vertices.data[index]; // type is REFERENCE value type is REFERENCE
                return var3;
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    if ((0 > index)) {
                        __label__ = 19;
                        break $S_6;
                    }
                    __label__ = 11;
                    }
                $M_19_11 : for(;;) switch (__label__) {
                    case 19 :
                    // NORMAL
                        var var4 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                        jlAssertionError.VOIDinit(var4);
                        throw var4;
                    case 11 :
                    // NORMAL
                        var var1 = thisRef.m_count; // type is INT value type is INT
                        if ((index < var1)) {
                            __label__ = 27;
                            continue $M_27_6;
                        }
                        __label__ = 19;
                        continue $M_19_11;
                }
        }
    },

    INTgetSupportojcVec2 : function(thisRef,d) {
        var local_2_INT = null; // type is INT # of inits = 3
        var local_4_INT = null; // type is INT # of inits = 3
        var local_3_FLOAT = null; // type is FLOAT # of inits = 3
        var local_5_FLOAT = null; // type is FLOAT # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_2_INT = 0; // type is INT value type is INT
            var var3 = thisRef.m_vertices.data[0]; // type is REFERENCE value type is REFERENCE
            var var4 = ojcVec2.FLOATdotojcVec2ojcVec2(var3,d); // type is FLOAT value type is FLOAT
            local_3_FLOAT = var4; // type is FLOAT value type is FLOAT
            local_4_INT = 1; // type is INT value type is INT
            __label__ = 16;
            }
        $L_16 : for (;;) {
            $S_16 : {
            // NORMAL
                var var9 = local_4_INT; // type is INT value type is INT
                var var10 = thisRef.m_count; // type is INT value type is INT
                if ((var9 >= var10)) {
                    return local_2_INT;
                }
                }
            $S_25 : {
            // NORMAL
                var var13 = thisRef.m_vertices.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                var var14 = ojcVec2.FLOATdotojcVec2ojcVec2(var13,d); // type is FLOAT value type is FLOAT
                local_5_FLOAT = var14; // type is FLOAT value type is FLOAT
                var var17 = local_5_FLOAT; // type is FLOAT value type is FLOAT
                var var18 = local_3_FLOAT; // type is FLOAT value type is FLOAT
                if ((var17 <= var18)) {
                    __label__ = 51;
                    break $S_25;
                }
                __label__ = 45;
                }
            $M_45_51 : for(;;) switch (__label__) {
                case 51 :
                // NORMAL
                    local_4_INT = (local_4_INT + 1); // type is INT value type is INT
                    __label__ = 16;
                    continue $L_16;
                case 45 :
                // NORMAL
                    local_2_INT = local_4_INT; // type is INT value type is INT
                    local_3_FLOAT = local_5_FLOAT; // type is FLOAT value type is FLOAT
                    __label__ = 51;
                    continue $M_45_51;
            }
        }
    },

    classInitCheck : function() {
        if (!ojcDistance$DistanceProxy.__initialized) {
            ojcDistance$DistanceProxy.__initialized = true;
            var thePrototype = ojcDistance$DistanceProxy.Create.prototype;
            thePrototype.instanceOf = ojcDistance$DistanceProxy.instanceOf;
            thePrototype.ClassgetClass = ojcDistance$DistanceProxy.ClassgetClass;
            thePrototype.INTgetSupportojcVec2 = ojcDistance$DistanceProxy.INTgetSupportojcVec2;
            thePrototype.ojcVec2getVertexINT = ojcDistance$DistanceProxy.ojcVec2getVertexINT;
            thePrototype.VOIDsetojcsShapeINT = ojcDistance$DistanceProxy.VOIDsetojcsShapeINT;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            ojcDistance$DistanceProxy.VOIDclinit();
        }
    },

};

var ojcTransform = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 66,
    __implementedTypes : [2,66,1],
    $assertionsDisabled : false, // declared in org.jbox2d.common.Transform
    pool : null, // declared in org.jbox2d.common.Transform

    Create : function() {
        this.p = null; // declared in org.jbox2d.common.Transform
        this.q = null; // declared in org.jbox2d.common.Transform
    },

    instanceOf : function(aType) {
        return ojcTransform.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcTransform;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcTransform.BOOLEANdesiredAssertionStatus(ojcTransform); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_9_13 : for(;;) switch (__label__) {
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_9_13;
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_9_13;
        }
        ojcTransform.$assertionsDisabled = var1;
        var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var2);
        ojcTransform.pool = var2;
        return;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var0);
        thisRef.p = var0;
        var var1 = new ojcRot.Create(); // type is REFERENCE value type is REFERENCE
        ojcRot.VOIDinit(var1);
        thisRef.q = var1;
        return;
    },

    VOIDmulToOutUnsafeojcTransformojcVec2ojcVec2 : function(T,v,out) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcTransform.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 19;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_6_19 : for(;;) switch (__label__) {
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    if ((v != out)) {
                        __label__ = 19;
                        continue $M_6_19;
                    }
                    }
                var var1 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var1);
                throw var1;
            case 19 :
            // NORMAL
                var var13 = (((T.q.c * v.x) - (T.q.s * v.y)) + T.p.x); // type is FLOAT value type is FLOAT
                out.x = var13;
                var var25 = (((T.q.s * v.x) + (T.q.c * v.y)) + T.p.y); // type is FLOAT value type is FLOAT
                out.y = var25;
                return;
        }
    },

    VOIDmulTransToOutUnsafeojcTransformojcVec2ojcVec2 : function(T,v,out) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcTransform.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 19;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_6_19 : for(;;) switch (__label__) {
            case 19 :
            // NORMAL
                var local_3_FLOAT = (v.x - T.p.x); // type is FLOAT value type is FLOAT
                var local_4_FLOAT = (v.y - T.p.y); // type is FLOAT value type is FLOAT
                var var22 = ((T.q.c * local_3_FLOAT) + (T.q.s * local_4_FLOAT)); // type is FLOAT value type is FLOAT
                out.x = var22;
                var var32 = (((-T.q.s) * local_3_FLOAT) + (T.q.c * local_4_FLOAT)); // type is FLOAT value type is FLOAT
                out.y = var32;
                return;
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    if ((v != out)) {
                        __label__ = 19;
                        continue $M_6_19;
                    }
                    }
                var var1 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var1);
                throw var1;
        }
    },

    VOIDmulTransToOutojcTransformojcVec2ojcVec2 : function(T,v,out) {
        var __label__ = null;
        var local_3_FLOAT = (v.x - T.p.x); // type is FLOAT value type is FLOAT
        var local_4_FLOAT = (v.y - T.p.y); // type is FLOAT value type is FLOAT
        var local_5_FLOAT = (((-T.q.s) * local_3_FLOAT) + (T.q.c * local_4_FLOAT)); // type is FLOAT value type is FLOAT
        var var32 = ((T.q.c * local_3_FLOAT) + (T.q.s * local_4_FLOAT)); // type is FLOAT value type is FLOAT
        out.x = var32;
        var var33 = local_5_FLOAT; // type is FLOAT value type is FLOAT
        out.y = var33;
        return;
    },

    ojcTransformsetojcTransform : function(thisRef,xf) {
        var __label__ = null;
        var var2 = thisRef.p.ojcVec2setojcVec2(thisRef.p,xf.p); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@11c0ea1
        var var5 = thisRef.q.ojcRotsetojcRot(thisRef.q,xf.q); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@44500f6a
        return thisRef;
    },

    VOIDmulToOutojcTransformojcVec2ojcVec2 : function(T,v,out) {
        var __label__ = null;
        var local_3_FLOAT = (((T.q.s * v.x) + (T.q.c * v.y)) + T.p.y); // type is FLOAT value type is FLOAT
        var var25 = (((T.q.c * v.x) - (T.q.s * v.y)) + T.p.x); // type is FLOAT value type is FLOAT
        out.x = var25;
        var var26 = local_3_FLOAT; // type is FLOAT value type is FLOAT
        out.y = var26;
        return;
    },

    jlStringtoString : function(thisRef) {
        var __label__ = null;
        var local_1_REFERENCE = bytecoder.stringpool[21]; // type is REFERENCE value type is REFERENCE
        var var1 = new jlStringBuilder.Create(); // type is REFERENCE value type is REFERENCE
        jlStringBuilder.VOIDinit(var1);
        var var3 = var1.jlStringBuilderappendjlString(var1,local_1_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6e88fb34
        var var4 = var3.jlStringBuilderappendjlString(var3,bytecoder.stringpool[22]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@53d7347e
        var var6 = var4.jlStringBuilderappendjlObject(var4,thisRef.p); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@61ac446b
        var var7 = var6.jlStringBuilderappendjlString(var6,bytecoder.stringpool[23]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1800ad24
        var var8 = var7.jlStringtoString(var7); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3178a44b
        var local_1_REFERENCE = var8; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5be612de
        var var9 = new jlStringBuilder.Create(); // type is REFERENCE value type is REFERENCE
        jlStringBuilder.VOIDinit(var9);
        var var11 = var9.jlStringBuilderappendjlString(var9,local_1_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@58ea9ad5
        var var12 = var11.jlStringBuilderappendjlString(var11,bytecoder.stringpool[24]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@459e7561
        var var14 = var12.jlStringBuilderappendjlObject(var12,thisRef.q); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3130db65
        var var15 = var14.jlStringBuilderappendjlString(var14,bytecoder.stringpool[23]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5aab5f7f
        var var16 = var15.jlStringtoString(var15); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@569b5acd
        var local_1_REFERENCE = var16; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@60181802
        return local_1_REFERENCE;
    },

    VOIDmulTransToOutUnsafeojcTransformojcTransformojcTransform : function(A,B,out) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcTransform.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 19;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_6_19 : for(;;) switch (__label__) {
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    if ((out != A)) {
                        __label__ = 19;
                        continue $M_6_19;
                    }
                    }
                var var1 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var1);
                throw var1;
            case 19 :
            // NORMAL
                $S_19 : {
                // NORMAL
                    var var2 = ojcTransform.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                    if ((var2 != 0)) {
                        __label__ = 38;
                        break $S_19;
                    }
                    __label__ = 25;
                    }
                $M_38_25 : for(;;) switch (__label__) {
                    case 38 :
                    // NORMAL
                        ojcRot.VOIDmulTransUnsafeojcRotojcRotojcRot(A.q,B.q,out.q);
                        var var9 = ojcTransform.pool.ojcVec2setojcVec2(ojcTransform.pool,B.p); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@43e569e8
                        var var11 = var9.ojcVec2subLocalojcVec2(var9,A.p); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3769a683
                        ojcRot.VOIDmulTransUnsafeojcRotojcVec2ojcVec2(A.q,ojcTransform.pool,out.p);
                        return;
                    case 25 :
                    // NORMAL
                        $S_25 : {
                        // NORMAL
                            if ((out != B)) {
                                __label__ = 38;
                                continue $M_38_25;
                            }
                            }
                        var var3 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                        jlAssertionError.VOIDinit(var3);
                        throw var3;
                }
        }
    },

    classInitCheck : function() {
        if (!ojcTransform.__initialized) {
            ojcTransform.__initialized = true;
            var thePrototype = ojcTransform.Create.prototype;
            thePrototype.instanceOf = ojcTransform.instanceOf;
            thePrototype.ClassgetClass = ojcTransform.ClassgetClass;
            thePrototype.jlStringtoString = ojcTransform.jlStringtoString;
            thePrototype.ojcTransformsetojcTransform = ojcTransform.ojcTransformsetojcTransform;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            jiSerializable.classInitCheck();
            ojcVec2.classInitCheck();
            ojcTransform.VOIDclinit();
        }
    },

};

var ojcRot = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 67,
    __implementedTypes : [2,1,67],
    $assertionsDisabled : false, // declared in org.jbox2d.common.Rot

    Create : function() {
        this.s = 0; // declared in org.jbox2d.common.Rot
        this.c = 0; // declared in org.jbox2d.common.Rot
    },

    instanceOf : function(aType) {
        return ojcRot.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcRot;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcRot.BOOLEANdesiredAssertionStatus(ojcRot); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_13_9 : for(;;) switch (__label__) {
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_13_9;
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_13_9;
        }
        ojcRot.$assertionsDisabled = var1;
        return;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = thisRef.ojcRotsetIdentity(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@37d88c62
        return;
    },

    ojcRotsetIdentity : function(thisRef) {
        var __label__ = null;
        thisRef.s = 0.0;
        thisRef.c = 1.0;
        return thisRef;
    },

    ojcRotsetFLOAT : function(thisRef,angle) {
        var __label__ = null;
        var var0 = ojcMathUtils.FLOATsinFLOAT(angle); // type is FLOAT value type is FLOAT
        thisRef.s = var0;
        var var1 = ojcMathUtils.FLOATcosFLOAT(angle); // type is FLOAT value type is FLOAT
        thisRef.c = var1;
        return thisRef;
    },

    VOIDmulToOutUnsafeojcRotojcVec2ojcVec2 : function(q,v,out) {
        var __label__ = null;
        var var6 = ((q.c * v.x) - (q.s * v.y)); // type is FLOAT value type is FLOAT
        out.x = var6;
        var var13 = ((q.s * v.x) + (q.c * v.y)); // type is FLOAT value type is FLOAT
        out.y = var13;
        return;
    },

    VOIDmulTransUnsafeojcRotojcVec2ojcVec2 : function(q,v,out) {
        var __label__ = null;
        var var6 = ((q.c * v.x) + (q.s * v.y)); // type is FLOAT value type is FLOAT
        out.x = var6;
        var var14 = (((-q.s) * v.x) + (q.c * v.y)); // type is FLOAT value type is FLOAT
        out.y = var14;
        return;
    },

    ojcRotsetojcRot : function(thisRef,other) {
        var __label__ = null;
        var var0 = other.s; // type is FLOAT value type is FLOAT
        thisRef.s = var0;
        var var1 = other.c; // type is FLOAT value type is FLOAT
        thisRef.c = var1;
        return thisRef;
    },

    jlStringtoString : function(thisRef) {
        var __label__ = null;
        var var0 = new jlStringBuilder.Create(); // type is REFERENCE value type is REFERENCE
        jlStringBuilder.VOIDinit(var0);
        var var1 = var0.jlStringBuilderappendjlString(var0,bytecoder.stringpool[25]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@b6db631
        var var3 = var1.jlStringBuilderappendFLOAT(var1,thisRef.s); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5272355
        var var4 = var3.jlStringBuilderappendjlString(var3,bytecoder.stringpool[26]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4e44193a
        var var6 = var4.jlStringBuilderappendFLOAT(var4,thisRef.c); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@60e489f6
        var var7 = var6.jlStringBuilderappendjlString(var6,bytecoder.stringpool[11]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6de67e5
        var var8 = var7.jlStringtoString(var7); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3a5fc1e0
        return var8;
    },

    VOIDmulToOutojcRotojcVec2ojcVec2 : function(q,v,out) {
        var __label__ = null;
        var local_3_FLOAT = ((q.s * v.x) + (q.c * v.y)); // type is FLOAT value type is FLOAT
        var var15 = ((q.c * v.x) - (q.s * v.y)); // type is FLOAT value type is FLOAT
        out.x = var15;
        var var16 = local_3_FLOAT; // type is FLOAT value type is FLOAT
        out.y = var16;
        return;
    },

    VOIDmulTransUnsafeojcRotojcRotojcRot : function(q,r,out) {
        var __label__ = null;
        var var6 = ((q.c * r.s) - (q.s * r.c)); // type is FLOAT value type is FLOAT
        out.s = var6;
        var var13 = ((q.c * r.c) + (q.s * r.s)); // type is FLOAT value type is FLOAT
        out.c = var13;
        return;
    },

    classInitCheck : function() {
        if (!ojcRot.__initialized) {
            ojcRot.__initialized = true;
            var thePrototype = ojcRot.Create.prototype;
            thePrototype.instanceOf = ojcRot.instanceOf;
            thePrototype.ClassgetClass = ojcRot.ClassgetClass;
            thePrototype.jlStringtoString = ojcRot.jlStringtoString;
            thePrototype.ojcRotsetojcRot = ojcRot.ojcRotsetojcRot;
            thePrototype.ojcRotsetFLOAT = ojcRot.ojcRotsetFLOAT;
            thePrototype.ojcRotsetIdentity = ojcRot.ojcRotsetIdentity;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            jiSerializable.classInitCheck();
            ojcRot.VOIDclinit();
        }
    },

};

var ojcDistance$SimplexCache = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 68,
    __implementedTypes : [68,1],

    Create : function() {
        this.indexA = null; // declared in org.jbox2d.collision.Distance$SimplexCache
        this.indexB = null; // declared in org.jbox2d.collision.Distance$SimplexCache
        this.metric = 0; // declared in org.jbox2d.collision.Distance$SimplexCache
        this.count = 0; // declared in org.jbox2d.collision.Distance$SimplexCache
    },

    instanceOf : function(aType) {
        return ojcDistance$SimplexCache.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcDistance$SimplexCache;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = bytecoder.newArray(3,0); // type is REFERENCE value type is REFERENCE
        thisRef.indexA = var0;
        var var1 = bytecoder.newArray(3,0); // type is REFERENCE value type is REFERENCE
        thisRef.indexB = var1;
        thisRef.metric = 0.0;
        thisRef.count = 0;
        var var2 = thisRef.indexA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@4099b8a7
        var2.data[0] = 2147483647;
        var var3 = thisRef.indexA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@4df7f7ec
        var3.data[1] = 2147483647;
        var var4 = thisRef.indexA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3d83a183
        var4.data[2] = 2147483647;
        var var5 = thisRef.indexB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1859774b
        var5.data[0] = 2147483647;
        var var6 = thisRef.indexB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1588a867
        var6.data[1] = 2147483647;
        var var7 = thisRef.indexB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@67b265ad
        var7.data[2] = 2147483647;
        return;
    },

    classInitCheck : function() {
        if (!ojcDistance$SimplexCache.__initialized) {
            ojcDistance$SimplexCache.__initialized = true;
            var thePrototype = ojcDistance$SimplexCache.Create.prototype;
            thePrototype.instanceOf = ojcDistance$SimplexCache.instanceOf;
            thePrototype.ClassgetClass = ojcDistance$SimplexCache.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojcDistanceOutput = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 69,
    __implementedTypes : [69,1],

    Create : function() {
        this.pointA = null; // declared in org.jbox2d.collision.DistanceOutput
        this.pointB = null; // declared in org.jbox2d.collision.DistanceOutput
        this.distance = 0; // declared in org.jbox2d.collision.DistanceOutput
        this.iterations = 0; // declared in org.jbox2d.collision.DistanceOutput
    },

    instanceOf : function(aType) {
        return ojcDistanceOutput.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcDistanceOutput;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var0);
        thisRef.pointA = var0;
        var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var1);
        thisRef.pointB = var1;
        return;
    },

    classInitCheck : function() {
        if (!ojcDistanceOutput.__initialized) {
            ojcDistanceOutput.__initialized = true;
            var thePrototype = ojcDistanceOutput.Create.prototype;
            thePrototype.instanceOf = ojcDistanceOutput.instanceOf;
            thePrototype.ClassgetClass = ojcDistanceOutput.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojcCollision$EdgeResults = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 70,
    __implementedTypes : [70,1],

    Create : function() {
        this.edgeIndex = 0; // declared in org.jbox2d.collision.Collision$EdgeResults
        this.separation = 0; // declared in org.jbox2d.collision.Collision$EdgeResults
    },

    instanceOf : function(aType) {
        return ojcCollision$EdgeResults.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcCollision$EdgeResults;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitojcCollision$1 : function(thisRef,x0) {
        var __label__ = null;
        ojcCollision$EdgeResults.VOIDinit(thisRef);
        return;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    classInitCheck : function() {
        if (!ojcCollision$EdgeResults.__initialized) {
            ojcCollision$EdgeResults.__initialized = true;
            var thePrototype = ojcCollision$EdgeResults.Create.prototype;
            thePrototype.instanceOf = ojcCollision$EdgeResults.instanceOf;
            thePrototype.ClassgetClass = ojcCollision$EdgeResults.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojcCollision$1 = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 71,
    __implementedTypes : [71,1],

    Create : function() {
    },

    instanceOf : function(aType) {
        return ojcCollision$1.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcCollision$1;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    classInitCheck : function() {
        if (!ojcCollision$1.__initialized) {
            ojcCollision$1.__initialized = true;
            var thePrototype = ojcCollision$1.Create.prototype;
            thePrototype.instanceOf = ojcCollision$1.instanceOf;
            thePrototype.ClassgetClass = ojcCollision$1.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojcCollision$ClipVertex = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 72,
    __implementedTypes : [72,1],

    Create : function() {
        this.v = null; // declared in org.jbox2d.collision.Collision$ClipVertex
        this.id = null; // declared in org.jbox2d.collision.Collision$ClipVertex
    },

    instanceOf : function(aType) {
        return ojcCollision$ClipVertex.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcCollision$ClipVertex;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var0);
        thisRef.v = var0;
        var var1 = new ojcContactID.Create(); // type is REFERENCE value type is REFERENCE
        ojcContactID.VOIDinit(var1);
        thisRef.id = var1;
        return;
    },

    VOIDsetojcCollision$ClipVertex : function(thisRef,cv) {
        var __label__ = null;
        var local_2_REFERENCE = cv.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@29abb16e
        var var2 = thisRef.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@519078dc
        var var4 = local_2_REFERENCE.x; // type is FLOAT value type is FLOAT
        var2.x = var4;
        var var5 = thisRef.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2e172ca3
        var var7 = local_2_REFERENCE.y; // type is FLOAT value type is FLOAT
        var5.y = var7;
        var local_3_REFERENCE = cv.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4264d696
        var var10 = thisRef.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@36b03f75
        var var12 = local_3_REFERENCE.indexA; // type is BYTE value type is BYTE
        var10.indexA = var12;
        var var13 = thisRef.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@64b4e7e7
        var var15 = local_3_REFERENCE.indexB; // type is BYTE value type is BYTE
        var13.indexB = var15;
        var var16 = thisRef.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@73d1bde6
        var var18 = local_3_REFERENCE.typeA; // type is BYTE value type is BYTE
        var16.typeA = var18;
        var var19 = thisRef.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1765156c
        var var21 = local_3_REFERENCE.typeB; // type is BYTE value type is BYTE
        var19.typeB = var21;
        return;
    },

    classInitCheck : function() {
        if (!ojcCollision$ClipVertex.__initialized) {
            ojcCollision$ClipVertex.__initialized = true;
            var thePrototype = ojcCollision$ClipVertex.Create.prototype;
            thePrototype.instanceOf = ojcCollision$ClipVertex.instanceOf;
            thePrototype.ClassgetClass = ojcCollision$ClipVertex.ClassgetClass;
            thePrototype.VOIDsetojcCollision$ClipVertex = ojcCollision$ClipVertex.VOIDsetojcCollision$ClipVertex;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojcContactID = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 73,
    __implementedTypes : [73,1,11],

    Create : function() {
        this.indexA = 0; // declared in org.jbox2d.collision.ContactID
        this.indexB = 0; // declared in org.jbox2d.collision.ContactID
        this.typeA = 0; // declared in org.jbox2d.collision.ContactID
        this.typeB = 0; // declared in org.jbox2d.collision.ContactID
    },

    instanceOf : function(aType) {
        return ojcContactID.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcContactID;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    VOIDsetojcContactID : function(thisRef,c) {
        var __label__ = null;
        var var0 = c.indexA; // type is BYTE value type is BYTE
        thisRef.indexA = var0;
        var var1 = c.indexB; // type is BYTE value type is BYTE
        thisRef.indexB = var1;
        var var2 = c.typeA; // type is BYTE value type is BYTE
        thisRef.typeA = var2;
        var var3 = c.typeB; // type is BYTE value type is BYTE
        thisRef.typeB = var3;
        return;
    },

    BOOLEANisEqualojcContactID : function(thisRef,cid) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.INTgetKey(thisRef); // type is INT value type is INT
            var var1 = cid.INTgetKey(cid); // type is INT value type is INT
            if ((var0 != var1)) {
                __label__ = 15;
                break $S_0;
            }
            __label__ = 11;
            }
        for(;;) switch (__label__) {
            case 15 :
            // NORMAL
                var var2 = 0; // type is INT value type is INT
                return var2;
            case 11 :
            // NORMAL
                var var2 = 1; // type is INT value type is INT
                return var2;
        }
    },

    INTgetKey : function(thisRef) {
        var __label__ = null;
        return ((((thisRef.indexA << 24) | (thisRef.indexB << 16)) | (thisRef.typeA << 8)) | thisRef.typeB);
    },

    INTcompareTojlObject : function(thisRef,x0) {
        var __label__ = null;
        var var0 = thisRef.INTcompareToojcContactID(thisRef,x0); // type is INT value type is INT
        return var0;
    },

    INTcompareToojcContactID : function(thisRef,o) {
        var __label__ = null;
        var var0 = thisRef.INTgetKey(thisRef); // type is INT value type is INT
        var var1 = o.INTgetKey(o); // type is INT value type is INT
        return (var0 - var1);
    },

    VOIDflip : function(thisRef) {
        var __label__ = null;
        var local_1_BYTE = thisRef.indexA; // type is BYTE value type is BYTE
        var var3 = thisRef.indexB; // type is BYTE value type is BYTE
        thisRef.indexA = var3;
        var var4 = local_1_BYTE; // type is BYTE value type is BYTE
        thisRef.indexB = var4;
        var local_1_BYTE = thisRef.typeA; // type is BYTE value type is BYTE
        var var7 = thisRef.typeB; // type is BYTE value type is BYTE
        thisRef.typeA = var7;
        var var8 = local_1_BYTE; // type is BYTE value type is BYTE
        thisRef.typeB = var8;
        return;
    },

    VOIDzero : function(thisRef) {
        var __label__ = null;
        thisRef.indexA = 0;
        thisRef.indexB = 0;
        thisRef.typeA = 0;
        thisRef.typeB = 0;
        return;
    },

    classInitCheck : function() {
        if (!ojcContactID.__initialized) {
            ojcContactID.__initialized = true;
            var thePrototype = ojcContactID.Create.prototype;
            thePrototype.instanceOf = ojcContactID.instanceOf;
            thePrototype.ClassgetClass = ojcContactID.ClassgetClass;
            thePrototype.VOIDzero = ojcContactID.VOIDzero;
            thePrototype.VOIDflip = ojcContactID.VOIDflip;
            thePrototype.INTcompareToojcContactID = ojcContactID.INTcompareToojcContactID;
            thePrototype.INTcompareTojlObject = ojcContactID.INTcompareTojlObject;
            thePrototype.INTgetKey = ojcContactID.INTgetKey;
            thePrototype.BOOLEANisEqualojcContactID = ojcContactID.BOOLEANisEqualojcContactID;
            thePrototype.VOIDsetojcContactID = ojcContactID.VOIDsetojcContactID;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            jlComparable.classInitCheck();
        }
    },

};

var ojcCollision$EPCollider = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 74,
    __implementedTypes : [74,1],

    Create : function() {
        this.m_polygonB = null; // declared in org.jbox2d.collision.Collision$EPCollider
        this.m_xf = null; // declared in org.jbox2d.collision.Collision$EPCollider
        this.m_centroidB = null; // declared in org.jbox2d.collision.Collision$EPCollider
        this.m_v0 = null; // declared in org.jbox2d.collision.Collision$EPCollider
        this.m_v1 = null; // declared in org.jbox2d.collision.Collision$EPCollider
        this.m_v2 = null; // declared in org.jbox2d.collision.Collision$EPCollider
        this.m_v3 = null; // declared in org.jbox2d.collision.Collision$EPCollider
        this.m_normal0 = null; // declared in org.jbox2d.collision.Collision$EPCollider
        this.m_normal1 = null; // declared in org.jbox2d.collision.Collision$EPCollider
        this.m_normal2 = null; // declared in org.jbox2d.collision.Collision$EPCollider
        this.m_normal = null; // declared in org.jbox2d.collision.Collision$EPCollider
        this.m_lowerLimit = null; // declared in org.jbox2d.collision.Collision$EPCollider
        this.m_upperLimit = null; // declared in org.jbox2d.collision.Collision$EPCollider
        this.edge1 = null; // declared in org.jbox2d.collision.Collision$EPCollider
        this.temp = null; // declared in org.jbox2d.collision.Collision$EPCollider
        this.edge0 = null; // declared in org.jbox2d.collision.Collision$EPCollider
        this.edge2 = null; // declared in org.jbox2d.collision.Collision$EPCollider
        this.ie = null; // declared in org.jbox2d.collision.Collision$EPCollider
        this.clipPoints1 = null; // declared in org.jbox2d.collision.Collision$EPCollider
        this.clipPoints2 = null; // declared in org.jbox2d.collision.Collision$EPCollider
        this.rf = null; // declared in org.jbox2d.collision.Collision$EPCollider
        this.edgeAxis = null; // declared in org.jbox2d.collision.Collision$EPCollider
        this.polygonAxis = null; // declared in org.jbox2d.collision.Collision$EPCollider
        this.perp = null; // declared in org.jbox2d.collision.Collision$EPCollider
        this.n = null; // declared in org.jbox2d.collision.Collision$EPCollider
        this.m_front = false; // declared in org.jbox2d.collision.Collision$EPCollider
        this.m_radius = 0; // declared in org.jbox2d.collision.Collision$EPCollider
    },

    instanceOf : function(aType) {
        return ojcCollision$EPCollider.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcCollision$EPCollider;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var local_1_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = new ojcCollision$TempPolygon.Create(); // type is REFERENCE value type is REFERENCE
            ojcCollision$TempPolygon.VOIDinit(var0);
            thisRef.m_polygonB = var0;
            var var1 = new ojcTransform.Create(); // type is REFERENCE value type is REFERENCE
            ojcTransform.VOIDinit(var1);
            thisRef.m_xf = var1;
            var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var2);
            thisRef.m_centroidB = var2;
            var var3 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var3);
            thisRef.m_v0 = var3;
            var var4 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var4);
            thisRef.m_v1 = var4;
            var var5 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var5);
            thisRef.m_v2 = var5;
            var var6 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var6);
            thisRef.m_v3 = var6;
            var var7 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var7);
            thisRef.m_normal0 = var7;
            var var8 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var8);
            thisRef.m_normal1 = var8;
            var var9 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var9);
            thisRef.m_normal2 = var9;
            var var10 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var10);
            thisRef.m_normal = var10;
            var var11 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var11);
            thisRef.m_lowerLimit = var11;
            var var12 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var12);
            thisRef.m_upperLimit = var12;
            var var13 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var13);
            thisRef.edge1 = var13;
            var var14 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var14);
            thisRef.temp = var14;
            var var15 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var15);
            thisRef.edge0 = var15;
            var var16 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var16);
            thisRef.edge2 = var16;
            var var17 = bytecoder.newArray(2,null); // type is REFERENCE value type is REFERENCE
            thisRef.ie = var17;
            var var18 = bytecoder.newArray(2,null); // type is REFERENCE value type is REFERENCE
            thisRef.clipPoints1 = var18;
            var var19 = bytecoder.newArray(2,null); // type is REFERENCE value type is REFERENCE
            thisRef.clipPoints2 = var19;
            var var20 = new ojcCollision$ReferenceFace.Create(); // type is REFERENCE value type is REFERENCE
            ojcCollision$ReferenceFace.VOIDinit(var20);
            thisRef.rf = var20;
            var var21 = new ojcCollision$EPAxis.Create(); // type is REFERENCE value type is REFERENCE
            ojcCollision$EPAxis.VOIDinit(var21);
            thisRef.edgeAxis = var21;
            var var22 = new ojcCollision$EPAxis.Create(); // type is REFERENCE value type is REFERENCE
            ojcCollision$EPAxis.VOIDinit(var22);
            thisRef.polygonAxis = var22;
            var var23 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var23);
            thisRef.perp = var23;
            var var24 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var24);
            thisRef.n = var24;
            local_1_INT = 0; // type is INT value type is INT
            __label__ = 272;
            }
        $L_272 : for (;;) {
            $S_272 : {
            // NORMAL
                var var27 = local_1_INT; // type is INT value type is INT
                if ((var27 >= 2)) {
                    return;
                }
                }
            var var28 = thisRef.ie; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@68eedda7
            var var29 = local_1_INT; // type is INT value type is INT
            var var30 = new ojcCollision$ClipVertex.Create(); // type is REFERENCE value type is REFERENCE
            ojcCollision$ClipVertex.VOIDinit(var30);
            var28.data[var29] = var30;
            var var31 = thisRef.clipPoints1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@51832007
            var var32 = local_1_INT; // type is INT value type is INT
            var var33 = new ojcCollision$ClipVertex.Create(); // type is REFERENCE value type is REFERENCE
            ojcCollision$ClipVertex.VOIDinit(var33);
            var31.data[var32] = var33;
            var var34 = thisRef.clipPoints2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@5966142
            var var35 = local_1_INT; // type is INT value type is INT
            var var36 = new ojcCollision$ClipVertex.Create(); // type is REFERENCE value type is REFERENCE
            ojcCollision$ClipVertex.VOIDinit(var36);
            var34.data[var35] = var36;
            local_1_INT = (local_1_INT + 1); // type is INT value type is INT
            __label__ = 272;
            continue $L_272;
        }
    },

    VOIDcollideojcManifoldojcsEdgeShapeojcTransformojcsPolygonShapeojcTransform : function(thisRef,manifold,edgeA,xfA,polygonB,xfB) {
        var var399 = null; // type is INT # of inits = 2
        var local_18_INT = null; // type is INT # of inits = 5
        var var222 = null; // type is INT # of inits = 2
        var local_11_INT = null; // type is INT # of inits = 2
        var var324 = null; // type is INT # of inits = 2
        var local_19_FLOAT = null; // type is FLOAT # of inits = 3
        var local_7_BOOLEAN = null; // type is BOOLEAN # of inits = 1
        var local_17_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_10_FLOAT = null; // type is FLOAT # of inits = 2
        var local_9_FLOAT = null; // type is FLOAT # of inits = 2
        var var276 = null; // type is INT # of inits = 2
        var var718 = null; // type is INT # of inits = 2
        var local_8_FLOAT = null; // type is FLOAT # of inits = 1
        var local_12_INT = null; // type is INT # of inits = 2
        var var64 = null; // type is INT # of inits = 2
        var var685 = null; // type is INT # of inits = 2
        var var188 = null; // type is INT # of inits = 2
        var local_16_REFERENCE = null; // type is REFERENCE # of inits = 2
        var var109 = null; // type is INT # of inits = 2
        var local_21_FLOAT = null; // type is FLOAT # of inits = 2
        var local_22_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_19_INT = null; // type is INT # of inits = 3
        var local_15_REFERENCE = null; // type is REFERENCE # of inits = 5
        var var351 = null; // type is INT # of inits = 2
        var var93 = null; // type is INT # of inits = 2
        var var136 = null; // type is INT # of inits = 2
        var local_13_INT = null; // type is INT # of inits = 3
        var var449 = null; // type is INT # of inits = 2
        var local_6_BOOLEAN = null; // type is BOOLEAN # of inits = 1
        var var676 = null; // type is REFERENCE # of inits = 1
        var local_20_INT = null; // type is INT # of inits = 7
        var __label__ = null;
        $S_0 : {
        // NORMAL
            ojcTransform.VOIDmulTransToOutUnsafeojcTransformojcTransformojcTransform(xfA,xfB,thisRef.m_xf);
            ojcTransform.VOIDmulToOutUnsafeojcTransformojcVec2ojcVec2(thisRef.m_xf,polygonB.m_centroid,thisRef.m_centroidB);
            var var4 = edgeA.m_vertex0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7d78caa0
            thisRef.m_v0 = var4;
            var var5 = edgeA.m_vertex1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@763a9c4e
            thisRef.m_v1 = var5;
            var var6 = edgeA.m_vertex2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2a00ec0a
            thisRef.m_v2 = var6;
            var var7 = edgeA.m_vertex3; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7eca6bce
            thisRef.m_v3 = var7;
            local_6_BOOLEAN = edgeA.m_hasVertex0; // type is BOOLEAN value type is BOOLEAN
            local_7_BOOLEAN = edgeA.m_hasVertex3; // type is BOOLEAN value type is BOOLEAN
            var var16 = thisRef.edge1.ojcVec2setojcVec2(thisRef.edge1,thisRef.m_v2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@45dc937d
            var var18 = var16.ojcVec2subLocalojcVec2(var16,thisRef.m_v1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@67a6bf64
            var var20 = thisRef.edge1.FLOATnormalize(thisRef.edge1); // type is FLOAT value type is FLOAT
            var var27 = thisRef.m_normal1.ojcVec2setFLOATFLOAT(thisRef.m_normal1,thisRef.edge1.y,(-thisRef.edge1.x)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4a6b6f26
            var var28 = thisRef.m_normal1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6752f9be
            var var31 = thisRef.temp.ojcVec2setojcVec2(thisRef.temp,thisRef.m_centroidB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4634c952
            var var33 = var31.ojcVec2subLocalojcVec2(var31,thisRef.m_v1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@143b036f
            var var34 = ojcVec2.FLOATdotojcVec2ojcVec2(var28,var33); // type is FLOAT value type is FLOAT
            local_8_FLOAT = var34; // type is FLOAT value type is FLOAT
            local_9_FLOAT = 0.0; // type is FLOAT value type is FLOAT
            local_10_FLOAT = 0.0; // type is FLOAT value type is FLOAT
            local_11_INT = 0; // type is INT value type is INT
            local_12_INT = 0; // type is INT value type is INT
            var var45 = local_6_BOOLEAN; // type is BOOLEAN value type is BOOLEAN
            if ((var45 == 0)) {
                __label__ = 264;
                break $S_0;
            }
            __label__ = 164;
            }
        $M_264_164 : for(;;) switch (__label__) {
            case 164 :
            // NORMAL
                $S_164 : {
                // NORMAL
                    var var48 = thisRef.edge0.ojcVec2setojcVec2(thisRef.edge0,thisRef.m_v1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5b84c91
                    var var50 = var48.ojcVec2subLocalojcVec2(var48,thisRef.m_v0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@75d7ca91
                    var var52 = thisRef.edge0.FLOATnormalize(thisRef.edge0); // type is FLOAT value type is FLOAT
                    var var59 = thisRef.m_normal0.ojcVec2setFLOATFLOAT(thisRef.m_normal0,thisRef.edge0.y,(-thisRef.edge0.x)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1549e320
                    var var62 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.edge0,thisRef.edge1); // type is FLOAT value type is FLOAT
                    if ((var62 < 0.0)) {
                        __label__ = 234;
                        break $S_164;
                    }
                    __label__ = 230;
                    }
                $M_234_230 : for(;;) switch (__label__) {
                    case 230 :
                    // NORMAL
                        var64 = 1; // type is INT value type is INT
                        break $M_234_230;
                    case 234 :
                    // NORMAL
                        var64 = 0; // type is INT value type is INT
                        break $M_234_230;
                }
                local_11_INT = var64; // type is INT value type is INT
                var var66 = thisRef.m_normal0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@59a5aa9d
                var var69 = thisRef.temp.ojcVec2setojcVec2(thisRef.temp,thisRef.m_centroidB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1e3eb9fc
                var var71 = var69.ojcVec2subLocalojcVec2(var69,thisRef.m_v0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@55767be8
                var var72 = ojcVec2.FLOATdotojcVec2ojcVec2(var66,var71); // type is FLOAT value type is FLOAT
                local_9_FLOAT = var72; // type is FLOAT value type is FLOAT
                __label__ = 264;
                continue $M_264_164;
            case 264 :
            // NORMAL
                $S_264 : {
                // NORMAL
                    var var74 = local_7_BOOLEAN; // type is BOOLEAN value type is BOOLEAN
                    if ((var74 == 0)) {
                        __label__ = 369;
                        break $S_264;
                    }
                    __label__ = 269;
                    }
                $M_369_269 : for(;;) switch (__label__) {
                    case 269 :
                    // NORMAL
                        $S_269 : {
                        // NORMAL
                            var var77 = thisRef.edge2.ojcVec2setojcVec2(thisRef.edge2,thisRef.m_v3); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@ffcd285
                            var var79 = var77.ojcVec2subLocalojcVec2(var77,thisRef.m_v2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7b7960a5
                            var var81 = thisRef.edge2.FLOATnormalize(thisRef.edge2); // type is FLOAT value type is FLOAT
                            var var88 = thisRef.m_normal2.ojcVec2setFLOATFLOAT(thisRef.m_normal2,thisRef.edge2.y,(-thisRef.edge2.x)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1063c76f
                            var var91 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.edge1,thisRef.edge2); // type is FLOAT value type is FLOAT
                            if ((var91 <= 0.0)) {
                                __label__ = 339;
                                break $S_269;
                            }
                            __label__ = 335;
                            }
                        $M_335_339 : for(;;) switch (__label__) {
                            case 335 :
                            // NORMAL
                                var93 = 1; // type is INT value type is INT
                                break $M_335_339;
                            case 339 :
                            // NORMAL
                                var93 = 0; // type is INT value type is INT
                                break $M_335_339;
                        }
                        local_12_INT = var93; // type is INT value type is INT
                        var var95 = thisRef.m_normal2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@76ac47b0
                        var var98 = thisRef.temp.ojcVec2setojcVec2(thisRef.temp,thisRef.m_centroidB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1f2dcb1a
                        var var100 = var98.ojcVec2subLocalojcVec2(var98,thisRef.m_v2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2fe1fc12
                        var var101 = ojcVec2.FLOATdotojcVec2ojcVec2(var95,var100); // type is FLOAT value type is FLOAT
                        local_10_FLOAT = var101; // type is FLOAT value type is FLOAT
                        __label__ = 369;
                        continue $M_369_269;
                    case 369 :
                    // NORMAL
                        $S_369 : {
                        // NORMAL
                            var var103 = local_6_BOOLEAN; // type is BOOLEAN value type is BOOLEAN
                            if ((var103 == 0)) {
                                __label__ = 1267;
                                break $S_369;
                            }
                            __label__ = 374;
                            }
                        $M_374_1267 : for(;;) switch (__label__) {
                            case 1267 :
                            // NORMAL
                                $S_1267 : {
                                // NORMAL
                                    var var105 = local_6_BOOLEAN; // type is BOOLEAN value type is BOOLEAN
                                    if ((var105 == 0)) {
                                        __label__ = 1697;
                                        break $S_1267;
                                    }
                                    __label__ = 1272;
                                    }
                                for(;;) switch (__label__) {
                                    case 1272 :
                                    // NORMAL
                                        $S_1272 : {
                                        // NORMAL
                                            var var346 = local_11_INT; // type is INT value type is INT
                                            if ((var346 == 0)) {
                                                __label__ = 1487;
                                                break $S_1272;
                                            }
                                            __label__ = 1277;
                                            }
                                        for(;;) switch (__label__) {
                                            case 1277 :
                                            // NORMAL
                                                $S_1277 : {
                                                // NORMAL
                                                    var var395 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                                                    if ((var395 >= 0.0)) {
                                                        __label__ = 1292;
                                                        break $S_1277;
                                                    }
                                                    __label__ = 1285;
                                                    }
                                                $M_1292_1285 : for(;;) switch (__label__) {
                                                    case 1285 :
                                                    // NORMAL
                                                        $S_1285 : {
                                                        // NORMAL
                                                            var var397 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                                                            if ((var397 < 0.0)) {
                                                                break $S_1285;
                                                            }
                                                            __label__ = 1292;
                                                            continue $M_1292_1285;
                                                            }
                                                        var399 = 0; // type is INT value type is INT
                                                        break $M_1292_1285;
                                                    case 1292 :
                                                    // NORMAL
                                                        var399 = 1; // type is INT value type is INT
                                                        break $M_1292_1285;
                                                }
                                                $S_1297 : {
                                                // NORMAL
                                                    thisRef.m_front = var399;
                                                    var var400 = thisRef.m_front; // type is BOOLEAN value type is BOOLEAN
                                                    if ((var400 == 0)) {
                                                        __label__ = 1396;
                                                        break $S_1297;
                                                    }
                                                    __label__ = 1307;
                                                    }
                                                for(;;) switch (__label__) {
                                                    case 1396 :
                                                    // NORMAL
                                                        var var421 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@21370e3e
                                                        var var424 = (-thisRef.m_normal1.x); // type is FLOAT value type is FLOAT
                                                        var421.x = var424;
                                                        var var425 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@35325c6f
                                                        var var428 = (-thisRef.m_normal1.y); // type is FLOAT value type is FLOAT
                                                        var425.y = var428;
                                                        var var429 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@443624c8
                                                        var var431 = thisRef.m_normal1.x; // type is FLOAT value type is FLOAT
                                                        var429.x = var431;
                                                        var var432 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@64975130
                                                        var var434 = thisRef.m_normal1.y; // type is FLOAT value type is FLOAT
                                                        var432.y = var434;
                                                        var var435 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7d48e562
                                                        var var438 = (-thisRef.m_normal1.x); // type is FLOAT value type is FLOAT
                                                        var435.x = var438;
                                                        var var439 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5abe0f80
                                                        var var442 = (-thisRef.m_normal1.y); // type is FLOAT value type is FLOAT
                                                        var439.y = var442;
                                                        break $M_374_1267;
                                                    case 1307 :
                                                    // NORMAL
                                                        var var401 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2fdb607b
                                                        var var403 = thisRef.m_normal1.x; // type is FLOAT value type is FLOAT
                                                        var401.x = var403;
                                                        var var404 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@711bba61
                                                        var var406 = thisRef.m_normal1.y; // type is FLOAT value type is FLOAT
                                                        var404.y = var406;
                                                        var var407 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4bc222d5
                                                        var var409 = thisRef.m_normal0.x; // type is FLOAT value type is FLOAT
                                                        var407.x = var409;
                                                        var var410 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@612af622
                                                        var var412 = thisRef.m_normal0.y; // type is FLOAT value type is FLOAT
                                                        var410.y = var412;
                                                        var var413 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@15868ac4
                                                        var var416 = (-thisRef.m_normal1.x); // type is FLOAT value type is FLOAT
                                                        var413.x = var416;
                                                        var var417 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@39e2e2a7
                                                        var var420 = (-thisRef.m_normal1.y); // type is FLOAT value type is FLOAT
                                                        var417.y = var420;
                                                        break $M_374_1267;
                                                }
                                            case 1487 :
                                            // NORMAL
                                                $S_1487 : {
                                                // NORMAL
                                                    var var347 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                                                    if ((var347 < 0.0)) {
                                                        __label__ = 1506;
                                                        break $S_1487;
                                                    }
                                                    __label__ = 1495;
                                                    }
                                                $M_1506_1495 : for(;;) switch (__label__) {
                                                    case 1495 :
                                                    // NORMAL
                                                        $S_1495 : {
                                                        // NORMAL
                                                            var var349 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                                                            if ((var349 < 0.0)) {
                                                                __label__ = 1506;
                                                                continue $M_1506_1495;
                                                            }
                                                            }
                                                        var351 = 1; // type is INT value type is INT
                                                        break $M_1506_1495;
                                                    case 1506 :
                                                    // NORMAL
                                                        var351 = 0; // type is INT value type is INT
                                                        break $M_1506_1495;
                                                }
                                                $S_1507 : {
                                                // NORMAL
                                                    thisRef.m_front = var351;
                                                    var var352 = thisRef.m_front; // type is BOOLEAN value type is BOOLEAN
                                                    if ((var352 == 0)) {
                                                        __label__ = 1606;
                                                        break $S_1507;
                                                    }
                                                    __label__ = 1517;
                                                    }
                                                for(;;) switch (__label__) {
                                                    case 1606 :
                                                    // NORMAL
                                                        var var475 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@63ecbbc4
                                                        var var478 = (-thisRef.m_normal1.x); // type is FLOAT value type is FLOAT
                                                        var475.x = var478;
                                                        var var479 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@55c1da7d
                                                        var var482 = (-thisRef.m_normal1.y); // type is FLOAT value type is FLOAT
                                                        var479.y = var482;
                                                        var var483 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@74b0aaab
                                                        var var485 = thisRef.m_normal1.x; // type is FLOAT value type is FLOAT
                                                        var483.x = var485;
                                                        var var486 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5a699940
                                                        var var488 = thisRef.m_normal1.y; // type is FLOAT value type is FLOAT
                                                        var486.y = var488;
                                                        var var489 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5cdd2b52
                                                        var var492 = (-thisRef.m_normal0.x); // type is FLOAT value type is FLOAT
                                                        var489.x = var492;
                                                        var var493 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7940086
                                                        var var496 = (-thisRef.m_normal0.y); // type is FLOAT value type is FLOAT
                                                        var493.y = var496;
                                                        break $M_374_1267;
                                                    case 1517 :
                                                    // NORMAL
                                                        var var353 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7600172d
                                                        var var355 = thisRef.m_normal1.x; // type is FLOAT value type is FLOAT
                                                        var353.x = var355;
                                                        var var356 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@60352334
                                                        var var358 = thisRef.m_normal1.y; // type is FLOAT value type is FLOAT
                                                        var356.y = var358;
                                                        var var359 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@550703db
                                                        var var361 = thisRef.m_normal1.x; // type is FLOAT value type is FLOAT
                                                        var359.x = var361;
                                                        var var362 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7230a9cd
                                                        var var364 = thisRef.m_normal1.y; // type is FLOAT value type is FLOAT
                                                        var362.y = var364;
                                                        var var365 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4ff71d9
                                                        var var368 = (-thisRef.m_normal1.x); // type is FLOAT value type is FLOAT
                                                        var365.x = var368;
                                                        var var369 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4d9acef1
                                                        var var372 = (-thisRef.m_normal1.y); // type is FLOAT value type is FLOAT
                                                        var369.y = var372;
                                                        break $M_374_1267;
                                                }
                                        }
                                    case 1697 :
                                    // NORMAL
                                        $S_1697 : {
                                        // NORMAL
                                            var var106 = local_7_BOOLEAN; // type is BOOLEAN value type is BOOLEAN
                                            if ((var106 == 0)) {
                                                __label__ = 2127;
                                                break $S_1697;
                                            }
                                            __label__ = 1702;
                                            }
                                        for(;;) switch (__label__) {
                                            case 1702 :
                                            // NORMAL
                                                $S_1702 : {
                                                // NORMAL
                                                    var var131 = local_12_INT; // type is INT value type is INT
                                                    if ((var131 == 0)) {
                                                        __label__ = 1917;
                                                        break $S_1702;
                                                    }
                                                    __label__ = 1707;
                                                    }
                                                for(;;) switch (__label__) {
                                                    case 1707 :
                                                    // NORMAL
                                                        $S_1707 : {
                                                        // NORMAL
                                                            var var132 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                                                            if ((var132 >= 0.0)) {
                                                                __label__ = 1722;
                                                                break $S_1707;
                                                            }
                                                            __label__ = 1715;
                                                            }
                                                        $M_1722_1715 : for(;;) switch (__label__) {
                                                            case 1715 :
                                                            // NORMAL
                                                                $S_1715 : {
                                                                // NORMAL
                                                                    var var134 = local_10_FLOAT; // type is FLOAT value type is FLOAT
                                                                    if ((var134 < 0.0)) {
                                                                        break $S_1715;
                                                                    }
                                                                    __label__ = 1722;
                                                                    continue $M_1722_1715;
                                                                    }
                                                                var136 = 0; // type is INT value type is INT
                                                                break $M_1722_1715;
                                                            case 1722 :
                                                            // NORMAL
                                                                var136 = 1; // type is INT value type is INT
                                                                break $M_1722_1715;
                                                        }
                                                        $S_1727 : {
                                                        // NORMAL
                                                            thisRef.m_front = var136;
                                                            var var137 = thisRef.m_front; // type is BOOLEAN value type is BOOLEAN
                                                            if ((var137 == 0)) {
                                                                __label__ = 1826;
                                                                break $S_1727;
                                                            }
                                                            __label__ = 1737;
                                                            }
                                                        for(;;) switch (__label__) {
                                                            case 1826 :
                                                            // NORMAL
                                                                var var158 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@20ee1542
                                                                var var161 = (-thisRef.m_normal1.x); // type is FLOAT value type is FLOAT
                                                                var158.x = var161;
                                                                var var162 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@57e7be53
                                                                var var165 = (-thisRef.m_normal1.y); // type is FLOAT value type is FLOAT
                                                                var162.y = var165;
                                                                var var166 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@28e96ccf
                                                                var var169 = (-thisRef.m_normal1.x); // type is FLOAT value type is FLOAT
                                                                var166.x = var169;
                                                                var var170 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@331fd265
                                                                var var173 = (-thisRef.m_normal1.y); // type is FLOAT value type is FLOAT
                                                                var170.y = var173;
                                                                var var174 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@638b8541
                                                                var var176 = thisRef.m_normal1.x; // type is FLOAT value type is FLOAT
                                                                var174.x = var176;
                                                                var var177 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@974ba45
                                                                var var179 = thisRef.m_normal1.y; // type is FLOAT value type is FLOAT
                                                                var177.y = var179;
                                                                break $M_374_1267;
                                                            case 1737 :
                                                            // NORMAL
                                                                var var138 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6a1830b0
                                                                var var140 = thisRef.m_normal1.x; // type is FLOAT value type is FLOAT
                                                                var138.x = var140;
                                                                var var141 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@27d94b6c
                                                                var var143 = thisRef.m_normal1.y; // type is FLOAT value type is FLOAT
                                                                var141.y = var143;
                                                                var var144 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1847635b
                                                                var var147 = (-thisRef.m_normal1.x); // type is FLOAT value type is FLOAT
                                                                var144.x = var147;
                                                                var var148 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@34cd5484
                                                                var var151 = (-thisRef.m_normal1.y); // type is FLOAT value type is FLOAT
                                                                var148.y = var151;
                                                                var var152 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1ffb7f1d
                                                                var var154 = thisRef.m_normal2.x; // type is FLOAT value type is FLOAT
                                                                var152.x = var154;
                                                                var var155 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7294c5a5
                                                                var var157 = thisRef.m_normal2.y; // type is FLOAT value type is FLOAT
                                                                var155.y = var157;
                                                                break $M_374_1267;
                                                        }
                                                    case 1917 :
                                                    // NORMAL
                                                        $S_1917 : {
                                                        // NORMAL
                                                            var var320 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                                                            if ((var320 < 0.0)) {
                                                                __label__ = 1936;
                                                                break $S_1917;
                                                            }
                                                            __label__ = 1925;
                                                            }
                                                        $M_1925_1936 : for(;;) switch (__label__) {
                                                            case 1936 :
                                                            // NORMAL
                                                                var324 = 0; // type is INT value type is INT
                                                                break $M_1925_1936;
                                                            case 1925 :
                                                            // NORMAL
                                                                $S_1925 : {
                                                                // NORMAL
                                                                    var var322 = local_10_FLOAT; // type is FLOAT value type is FLOAT
                                                                    if ((var322 < 0.0)) {
                                                                        __label__ = 1936;
                                                                        continue $M_1925_1936;
                                                                    }
                                                                    }
                                                                var324 = 1; // type is INT value type is INT
                                                                break $M_1925_1936;
                                                        }
                                                        $S_1937 : {
                                                        // NORMAL
                                                            thisRef.m_front = var324;
                                                            var var325 = thisRef.m_front; // type is BOOLEAN value type is BOOLEAN
                                                            if ((var325 == 0)) {
                                                                __label__ = 2036;
                                                                break $S_1937;
                                                            }
                                                            __label__ = 1947;
                                                            }
                                                        for(;;) switch (__label__) {
                                                            case 2036 :
                                                            // NORMAL
                                                                var var373 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@51ea2d17
                                                                var var376 = (-thisRef.m_normal1.x); // type is FLOAT value type is FLOAT
                                                                var373.x = var376;
                                                                var var377 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@fdd3ada
                                                                var var380 = (-thisRef.m_normal1.y); // type is FLOAT value type is FLOAT
                                                                var377.y = var380;
                                                                var var381 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4b9aafab
                                                                var var384 = (-thisRef.m_normal2.x); // type is FLOAT value type is FLOAT
                                                                var381.x = var384;
                                                                var var385 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1ff7f290
                                                                var var388 = (-thisRef.m_normal2.y); // type is FLOAT value type is FLOAT
                                                                var385.y = var388;
                                                                var var389 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1f75f6ec
                                                                var var391 = thisRef.m_normal1.x; // type is FLOAT value type is FLOAT
                                                                var389.x = var391;
                                                                var var392 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@79980432
                                                                var var394 = thisRef.m_normal1.y; // type is FLOAT value type is FLOAT
                                                                var392.y = var394;
                                                                break $M_374_1267;
                                                            case 1947 :
                                                            // NORMAL
                                                                var var326 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@67e11b5d
                                                                var var328 = thisRef.m_normal1.x; // type is FLOAT value type is FLOAT
                                                                var326.x = var328;
                                                                var var329 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@47a21643
                                                                var var331 = thisRef.m_normal1.y; // type is FLOAT value type is FLOAT
                                                                var329.y = var331;
                                                                var var332 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@77505acd
                                                                var var335 = (-thisRef.m_normal1.x); // type is FLOAT value type is FLOAT
                                                                var332.x = var335;
                                                                var var336 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4e506981
                                                                var var339 = (-thisRef.m_normal1.y); // type is FLOAT value type is FLOAT
                                                                var336.y = var339;
                                                                var var340 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2184a8e5
                                                                var var342 = thisRef.m_normal1.x; // type is FLOAT value type is FLOAT
                                                                var340.x = var342;
                                                                var var343 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7643a298
                                                                var var345 = thisRef.m_normal1.y; // type is FLOAT value type is FLOAT
                                                                var343.y = var345;
                                                                break $M_374_1267;
                                                        }
                                                }
                                            case 2127 :
                                            // NORMAL
                                                $S_2127 : {
                                                // NORMAL
                                                    var var107 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                                                    if ((var107 < 0.0)) {
                                                        __label__ = 2139;
                                                        break $S_2127;
                                                    }
                                                    __label__ = 2135;
                                                    }
                                                $M_2135_2139 : for(;;) switch (__label__) {
                                                    case 2139 :
                                                    // NORMAL
                                                        var109 = 0; // type is INT value type is INT
                                                        break $M_2135_2139;
                                                    case 2135 :
                                                    // NORMAL
                                                        var109 = 1; // type is INT value type is INT
                                                        break $M_2135_2139;
                                                }
                                                $S_2140 : {
                                                // NORMAL
                                                    thisRef.m_front = var109;
                                                    var var110 = thisRef.m_front; // type is BOOLEAN value type is BOOLEAN
                                                    if ((var110 == 0)) {
                                                        __label__ = 2241;
                                                        break $S_2140;
                                                    }
                                                    __label__ = 2150;
                                                    }
                                                for(;;) switch (__label__) {
                                                    case 2150 :
                                                    // NORMAL
                                                        var var248 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3b018af
                                                        var var250 = thisRef.m_normal1.x; // type is FLOAT value type is FLOAT
                                                        var248.x = var250;
                                                        var var251 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4e616539
                                                        var var253 = thisRef.m_normal1.y; // type is FLOAT value type is FLOAT
                                                        var251.y = var253;
                                                        var var254 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4a263f90
                                                        var var257 = (-thisRef.m_normal1.x); // type is FLOAT value type is FLOAT
                                                        var254.x = var257;
                                                        var var258 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@211a032e
                                                        var var261 = (-thisRef.m_normal1.y); // type is FLOAT value type is FLOAT
                                                        var258.y = var261;
                                                        var var262 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@22ec12c2
                                                        var var265 = (-thisRef.m_normal1.x); // type is FLOAT value type is FLOAT
                                                        var262.x = var265;
                                                        var var266 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6761e30b
                                                        var var269 = (-thisRef.m_normal1.y); // type is FLOAT value type is FLOAT
                                                        var266.y = var269;
                                                        break $M_374_1267;
                                                    case 2241 :
                                                    // NORMAL
                                                        var var111 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1cc08ac8
                                                        var var114 = (-thisRef.m_normal1.x); // type is FLOAT value type is FLOAT
                                                        var111.x = var114;
                                                        var var115 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6d32f90d
                                                        var var118 = (-thisRef.m_normal1.y); // type is FLOAT value type is FLOAT
                                                        var115.y = var118;
                                                        var var119 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2f8a9c6b
                                                        var var121 = thisRef.m_normal1.x; // type is FLOAT value type is FLOAT
                                                        var119.x = var121;
                                                        var var122 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@479b5b2a
                                                        var var124 = thisRef.m_normal1.y; // type is FLOAT value type is FLOAT
                                                        var122.y = var124;
                                                        var var125 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5f150fdb
                                                        var var127 = thisRef.m_normal1.x; // type is FLOAT value type is FLOAT
                                                        var125.x = var127;
                                                        var var128 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@25956fa5
                                                        var var130 = thisRef.m_normal1.y; // type is FLOAT value type is FLOAT
                                                        var128.y = var130;
                                                        break $M_374_1267;
                                                }
                                        }
                                }
                            case 374 :
                            // NORMAL
                                $S_374 : {
                                // NORMAL
                                    var var104 = local_7_BOOLEAN; // type is BOOLEAN value type is BOOLEAN
                                    if ((var104 == 0)) {
                                        __label__ = 1267;
                                        continue $M_374_1267;
                                    }
                                    }
                                $S_379 : {
                                // NORMAL
                                    var var180 = local_11_INT; // type is INT value type is INT
                                    if ((var180 == 0)) {
                                        __label__ = 606;
                                        break $S_379;
                                    }
                                    __label__ = 384;
                                    }
                                $M_606_384 : for(;;) switch (__label__) {
                                    case 384 :
                                    // NORMAL
                                        $S_384 : {
                                        // NORMAL
                                            var var181 = local_12_INT; // type is INT value type is INT
                                            if ((var181 == 0)) {
                                                __label__ = 606;
                                                continue $M_606_384;
                                            }
                                            }
                                        $S_389 : {
                                        // NORMAL
                                            var var182 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                                            if ((var182 >= 0.0)) {
                                                __label__ = 411;
                                                break $S_389;
                                            }
                                            __label__ = 397;
                                            }
                                        $M_411_397 : for(;;) switch (__label__) {
                                            case 411 :
                                            // NORMAL
                                                var188 = 1; // type is INT value type is INT
                                                break $M_411_397;
                                            case 397 :
                                            // NORMAL
                                                $S_397 : {
                                                // NORMAL
                                                    var var184 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                                                    if ((var184 >= 0.0)) {
                                                        __label__ = 411;
                                                        continue $M_411_397;
                                                    }
                                                    }
                                                $S_404 : {
                                                // NORMAL
                                                    var var186 = local_10_FLOAT; // type is FLOAT value type is FLOAT
                                                    if ((var186 < 0.0)) {
                                                        break $S_404;
                                                    }
                                                    __label__ = 411;
                                                    continue $M_411_397;
                                                    }
                                                var188 = 0; // type is INT value type is INT
                                                break $M_411_397;
                                        }
                                        $S_416 : {
                                        // NORMAL
                                            thisRef.m_front = var188;
                                            var var189 = thisRef.m_front; // type is BOOLEAN value type is BOOLEAN
                                            if ((var189 == 0)) {
                                                __label__ = 513;
                                                break $S_416;
                                            }
                                            __label__ = 426;
                                            }
                                        for(;;) switch (__label__) {
                                            case 426 :
                                            // NORMAL
                                                var var302 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5e87c6b8
                                                var var304 = thisRef.m_normal1.x; // type is FLOAT value type is FLOAT
                                                var302.x = var304;
                                                var var305 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@43588449
                                                var var307 = thisRef.m_normal1.y; // type is FLOAT value type is FLOAT
                                                var305.y = var307;
                                                var var308 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@34c4202e
                                                var var310 = thisRef.m_normal0.x; // type is FLOAT value type is FLOAT
                                                var308.x = var310;
                                                var var311 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3aa28954
                                                var var313 = thisRef.m_normal0.y; // type is FLOAT value type is FLOAT
                                                var311.y = var313;
                                                var var314 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5a702abe
                                                var var316 = thisRef.m_normal2.x; // type is FLOAT value type is FLOAT
                                                var314.x = var316;
                                                var var317 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5d0d8775
                                                var var319 = thisRef.m_normal2.y; // type is FLOAT value type is FLOAT
                                                var317.y = var319;
                                                break $M_374_1267;
                                            case 513 :
                                            // NORMAL
                                                var var190 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@48dd09aa
                                                var var193 = (-thisRef.m_normal1.x); // type is FLOAT value type is FLOAT
                                                var190.x = var193;
                                                var var194 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@669bd1cc
                                                var var197 = (-thisRef.m_normal1.y); // type is FLOAT value type is FLOAT
                                                var194.y = var197;
                                                var var198 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3de5227b
                                                var var201 = (-thisRef.m_normal1.x); // type is FLOAT value type is FLOAT
                                                var198.x = var201;
                                                var var202 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@c623c9d
                                                var var205 = (-thisRef.m_normal1.y); // type is FLOAT value type is FLOAT
                                                var202.y = var205;
                                                var var206 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2cd2e4e2
                                                var var209 = (-thisRef.m_normal1.x); // type is FLOAT value type is FLOAT
                                                var206.x = var209;
                                                var var210 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@147f5505
                                                var var213 = (-thisRef.m_normal1.y); // type is FLOAT value type is FLOAT
                                                var210.y = var213;
                                                break $M_374_1267;
                                        }
                                    case 606 :
                                    // NORMAL
                                        $S_606 : {
                                        // NORMAL
                                            var var214 = local_11_INT; // type is INT value type is INT
                                            if ((var214 == 0)) {
                                                __label__ = 828;
                                                break $S_606;
                                            }
                                            __label__ = 611;
                                            }
                                        for(;;) switch (__label__) {
                                            case 611 :
                                            // NORMAL
                                                $S_611 : {
                                                // NORMAL
                                                    var var443 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                                                    if ((var443 >= 0.0)) {
                                                        __label__ = 633;
                                                        break $S_611;
                                                    }
                                                    __label__ = 619;
                                                    }
                                                $M_619_633 : for(;;) switch (__label__) {
                                                    case 619 :
                                                    // NORMAL
                                                        $S_619 : {
                                                        // NORMAL
                                                            var var445 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                                                            if ((var445 < 0.0)) {
                                                                __label__ = 637;
                                                                break $S_619;
                                                            }
                                                            __label__ = 626;
                                                            }
                                                        $M_626_637 : for(;;) switch (__label__) {
                                                            case 637 :
                                                            // NORMAL
                                                                var449 = 0; // type is INT value type is INT
                                                                break $M_619_633;
                                                            case 626 :
                                                            // NORMAL
                                                                var var447 = local_10_FLOAT; // type is FLOAT value type is FLOAT
                                                                if ((var447 < 0.0)) {
                                                                    __label__ = 637;
                                                                    continue $M_626_637;
                                                                }
                                                                __label__ = 633;
                                                                continue $M_619_633;
                                                        }
                                                    case 633 :
                                                    // NORMAL
                                                        var449 = 1; // type is INT value type is INT
                                                        break $M_619_633;
                                                }
                                                $S_638 : {
                                                // NORMAL
                                                    thisRef.m_front = var449;
                                                    var var450 = thisRef.m_front; // type is BOOLEAN value type is BOOLEAN
                                                    if ((var450 == 0)) {
                                                        __label__ = 735;
                                                        break $S_638;
                                                    }
                                                    __label__ = 648;
                                                    }
                                                for(;;) switch (__label__) {
                                                    case 648 :
                                                    // NORMAL
                                                        var var533 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@9d5b0b
                                                        var var535 = thisRef.m_normal1.x; // type is FLOAT value type is FLOAT
                                                        var533.x = var535;
                                                        var var536 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1d860951
                                                        var var538 = thisRef.m_normal1.y; // type is FLOAT value type is FLOAT
                                                        var536.y = var538;
                                                        var var539 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@26481bf7
                                                        var var541 = thisRef.m_normal0.x; // type is FLOAT value type is FLOAT
                                                        var539.x = var541;
                                                        var var542 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4871a546
                                                        var var544 = thisRef.m_normal0.y; // type is FLOAT value type is FLOAT
                                                        var542.y = var544;
                                                        var var545 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@22deea40
                                                        var var547 = thisRef.m_normal1.x; // type is FLOAT value type is FLOAT
                                                        var545.x = var547;
                                                        var var548 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@fbfb3cb
                                                        var var550 = thisRef.m_normal1.y; // type is FLOAT value type is FLOAT
                                                        var548.y = var550;
                                                        break $M_374_1267;
                                                    case 735 :
                                                    // NORMAL
                                                        var var451 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@69ce8668
                                                        var var454 = (-thisRef.m_normal1.x); // type is FLOAT value type is FLOAT
                                                        var451.x = var454;
                                                        var var455 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2c505582
                                                        var var458 = (-thisRef.m_normal1.y); // type is FLOAT value type is FLOAT
                                                        var455.y = var458;
                                                        var var459 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@798936a2
                                                        var var462 = (-thisRef.m_normal2.x); // type is FLOAT value type is FLOAT
                                                        var459.x = var462;
                                                        var var463 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@b5af3b3
                                                        var var466 = (-thisRef.m_normal2.y); // type is FLOAT value type is FLOAT
                                                        var463.y = var466;
                                                        var var467 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@163ad976
                                                        var var470 = (-thisRef.m_normal1.x); // type is FLOAT value type is FLOAT
                                                        var467.x = var470;
                                                        var var471 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@38686276
                                                        var var474 = (-thisRef.m_normal1.y); // type is FLOAT value type is FLOAT
                                                        var471.y = var474;
                                                        break $M_374_1267;
                                                }
                                            case 828 :
                                            // NORMAL
                                                $S_828 : {
                                                // NORMAL
                                                    var var215 = local_12_INT; // type is INT value type is INT
                                                    if ((var215 == 0)) {
                                                        __label__ = 1050;
                                                        break $S_828;
                                                    }
                                                    __label__ = 833;
                                                    }
                                                for(;;) switch (__label__) {
                                                    case 1050 :
                                                    // NORMAL
                                                        $S_1050 : {
                                                        // NORMAL
                                                            var var270 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                                                            if ((var270 < 0.0)) {
                                                                __label__ = 1076;
                                                                break $S_1050;
                                                            }
                                                            __label__ = 1058;
                                                            }
                                                        $M_1076_1058 : for(;;) switch (__label__) {
                                                            case 1076 :
                                                            // NORMAL
                                                                var276 = 0; // type is INT value type is INT
                                                                break $M_1076_1058;
                                                            case 1058 :
                                                            // NORMAL
                                                                $S_1058 : {
                                                                // NORMAL
                                                                    var var272 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                                                                    if ((var272 < 0.0)) {
                                                                        __label__ = 1076;
                                                                        continue $M_1076_1058;
                                                                    }
                                                                    }
                                                                $S_1065 : {
                                                                // NORMAL
                                                                    var var274 = local_10_FLOAT; // type is FLOAT value type is FLOAT
                                                                    if ((var274 < 0.0)) {
                                                                        __label__ = 1076;
                                                                        continue $M_1076_1058;
                                                                    }
                                                                    }
                                                                var276 = 1; // type is INT value type is INT
                                                                break $M_1076_1058;
                                                        }
                                                        $S_1077 : {
                                                        // NORMAL
                                                            thisRef.m_front = var276;
                                                            var var277 = thisRef.m_front; // type is BOOLEAN value type is BOOLEAN
                                                            if ((var277 == 0)) {
                                                                __label__ = 1174;
                                                                break $S_1077;
                                                            }
                                                            __label__ = 1087;
                                                            }
                                                        for(;;) switch (__label__) {
                                                            case 1087 :
                                                            // NORMAL
                                                                var var515 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@8646fff
                                                                var var517 = thisRef.m_normal1.x; // type is FLOAT value type is FLOAT
                                                                var515.x = var517;
                                                                var var518 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@54ffd22b
                                                                var var520 = thisRef.m_normal1.y; // type is FLOAT value type is FLOAT
                                                                var518.y = var520;
                                                                var var521 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@14ce50ab
                                                                var var523 = thisRef.m_normal1.x; // type is FLOAT value type is FLOAT
                                                                var521.x = var523;
                                                                var var524 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6f4efb96
                                                                var var526 = thisRef.m_normal1.y; // type is FLOAT value type is FLOAT
                                                                var524.y = var526;
                                                                var var527 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@44fe6a17
                                                                var var529 = thisRef.m_normal1.x; // type is FLOAT value type is FLOAT
                                                                var527.x = var529;
                                                                var var530 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6eba8629
                                                                var var532 = thisRef.m_normal1.y; // type is FLOAT value type is FLOAT
                                                                var530.y = var532;
                                                                break $M_374_1267;
                                                            case 1174 :
                                                            // NORMAL
                                                                var var278 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@897c85d
                                                                var var281 = (-thisRef.m_normal1.x); // type is FLOAT value type is FLOAT
                                                                var278.x = var281;
                                                                var var282 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@109d1092
                                                                var var285 = (-thisRef.m_normal1.y); // type is FLOAT value type is FLOAT
                                                                var282.y = var285;
                                                                var var286 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@27847e44
                                                                var var289 = (-thisRef.m_normal2.x); // type is FLOAT value type is FLOAT
                                                                var286.x = var289;
                                                                var var290 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1db53f53
                                                                var var293 = (-thisRef.m_normal2.y); // type is FLOAT value type is FLOAT
                                                                var290.y = var293;
                                                                var var294 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2bd6d998
                                                                var var297 = (-thisRef.m_normal0.x); // type is FLOAT value type is FLOAT
                                                                var294.x = var297;
                                                                var var298 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@53b745f0
                                                                var var301 = (-thisRef.m_normal0.y); // type is FLOAT value type is FLOAT
                                                                var298.y = var301;
                                                                break $M_374_1267;
                                                        }
                                                    case 833 :
                                                    // NORMAL
                                                        $S_833 : {
                                                        // NORMAL
                                                            var var216 = local_10_FLOAT; // type is FLOAT value type is FLOAT
                                                            if ((var216 >= 0.0)) {
                                                                __label__ = 855;
                                                                break $S_833;
                                                            }
                                                            __label__ = 841;
                                                            }
                                                        $M_841_855 : for(;;) switch (__label__) {
                                                            case 841 :
                                                            // NORMAL
                                                                $S_841 : {
                                                                // NORMAL
                                                                    var var218 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                                                                    if ((var218 < 0.0)) {
                                                                        __label__ = 859;
                                                                        break $S_841;
                                                                    }
                                                                    __label__ = 848;
                                                                    }
                                                                $M_859_848 : for(;;) switch (__label__) {
                                                                    case 859 :
                                                                    // NORMAL
                                                                        var222 = 0; // type is INT value type is INT
                                                                        break $M_841_855;
                                                                    case 848 :
                                                                    // NORMAL
                                                                        var var220 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                                                                        if ((var220 < 0.0)) {
                                                                            __label__ = 859;
                                                                            continue $M_859_848;
                                                                        }
                                                                        __label__ = 855;
                                                                        continue $M_841_855;
                                                                }
                                                            case 855 :
                                                            // NORMAL
                                                                var222 = 1; // type is INT value type is INT
                                                                break $M_841_855;
                                                        }
                                                        $S_860 : {
                                                        // NORMAL
                                                            thisRef.m_front = var222;
                                                            var var223 = thisRef.m_front; // type is BOOLEAN value type is BOOLEAN
                                                            if ((var223 == 0)) {
                                                                __label__ = 957;
                                                                break $S_860;
                                                            }
                                                            __label__ = 870;
                                                            }
                                                        for(;;) switch (__label__) {
                                                            case 870 :
                                                            // NORMAL
                                                                var var497 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@57c5679c
                                                                var var499 = thisRef.m_normal1.x; // type is FLOAT value type is FLOAT
                                                                var497.x = var499;
                                                                var var500 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@63be8590
                                                                var var502 = thisRef.m_normal1.y; // type is FLOAT value type is FLOAT
                                                                var500.y = var502;
                                                                var var503 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7e398a66
                                                                var var505 = thisRef.m_normal1.x; // type is FLOAT value type is FLOAT
                                                                var503.x = var505;
                                                                var var506 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1748c894
                                                                var var508 = thisRef.m_normal1.y; // type is FLOAT value type is FLOAT
                                                                var506.y = var508;
                                                                var var509 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6bcdb466
                                                                var var511 = thisRef.m_normal2.x; // type is FLOAT value type is FLOAT
                                                                var509.x = var511;
                                                                var var512 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7cc82e8a
                                                                var var514 = thisRef.m_normal2.y; // type is FLOAT value type is FLOAT
                                                                var512.y = var514;
                                                                break $M_374_1267;
                                                            case 957 :
                                                            // NORMAL
                                                                var var224 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4e90e1cf
                                                                var var227 = (-thisRef.m_normal1.x); // type is FLOAT value type is FLOAT
                                                                var224.x = var227;
                                                                var var228 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1fcd9ce1
                                                                var var231 = (-thisRef.m_normal1.y); // type is FLOAT value type is FLOAT
                                                                var228.y = var231;
                                                                var var232 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@19a565fa
                                                                var var235 = (-thisRef.m_normal1.x); // type is FLOAT value type is FLOAT
                                                                var232.x = var235;
                                                                var var236 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@24a4b43a
                                                                var var239 = (-thisRef.m_normal1.y); // type is FLOAT value type is FLOAT
                                                                var236.y = var239;
                                                                var var240 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6d73b7f8
                                                                var var243 = (-thisRef.m_normal0.x); // type is FLOAT value type is FLOAT
                                                                var240.x = var243;
                                                                var var244 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1eaa0423
                                                                var var247 = (-thisRef.m_normal0.y); // type is FLOAT value type is FLOAT
                                                                var244.y = var247;
                                                                break $M_374_1267;
                                                        }
                                                }
                                        }
                                }
                        }
                        $S_2327 : {
                        // NORMAL
                            var var551 = thisRef.m_polygonB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2c9228b9
                            var var552 = polygonB.m_count; // type is INT value type is INT
                            var551.count = var552;
                            local_13_INT = 0; // type is INT value type is INT
                            __label__ = 2342;
                            }
                        $L_2342 : for (;;) {
                            $S_2342 : {
                            // NORMAL
                                var var555 = local_13_INT; // type is INT value type is INT
                                var var556 = polygonB.m_count; // type is INT value type is INT
                                if ((var555 >= var556)) {
                                    __label__ = 2411;
                                    break $S_2342;
                                }
                                __label__ = 2352;
                                }
                            for(;;) switch (__label__) {
                                case 2352 :
                                // NORMAL
                                    var var875 = thisRef.m_xf; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2d964c75
                                    var var878 = polygonB.m_vertices.data[local_13_INT]; // type is REFERENCE value type is REFERENCE
                                    var var882 = thisRef.m_polygonB.vertices.data[local_13_INT]; // type is REFERENCE value type is REFERENCE
                                    ojcTransform.VOIDmulToOutUnsafeojcTransformojcVec2ojcVec2(var875,var878,var882);
                                    var var884 = thisRef.m_xf.q; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5daaf248
                                    var var887 = polygonB.m_normals.data[local_13_INT]; // type is REFERENCE value type is REFERENCE
                                    var var891 = thisRef.m_polygonB.normals.data[local_13_INT]; // type is REFERENCE value type is REFERENCE
                                    ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var884,var887,var891);
                                    local_13_INT = (local_13_INT + 1); // type is INT value type is INT
                                    __label__ = 2342;
                                    continue $L_2342;
                                case 2411 :
                                // NORMAL
                                    $S_2411 : {
                                    // NORMAL
                                        thisRef.m_radius = 0.02;
                                        manifold.pointCount = 0;
                                        thisRef.VOIDcomputeEdgeSeparationojcCollision$EPAxis(thisRef,thisRef.edgeAxis);
                                        var var559 = thisRef.edgeAxis.type; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@13ef7ec2
                                        var var560 = ojcCollision$EPAxis$Type.UNKNOWN; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2e854be6
                                        if ((var559 != var560)) {
                                            break $S_2411;
                                        }
                                        return;
                                        }
                                    $S_2444 : {
                                    // NORMAL
                                        var var562 = thisRef.edgeAxis.separation; // type is FLOAT value type is FLOAT
                                        var var563 = thisRef.m_radius; // type is FLOAT value type is FLOAT
                                        if ((var562 <= var563)) {
                                            break $S_2444;
                                        }
                                        return;
                                        }
                                    $S_2460 : {
                                    // NORMAL
                                        thisRef.VOIDcomputePolygonSeparationojcCollision$EPAxis(thisRef,thisRef.polygonAxis);
                                        var var567 = thisRef.polygonAxis.type; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@31ef4fa7
                                        var var568 = ojcCollision$EPAxis$Type.UNKNOWN; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3b5dc360
                                        if ((var567 == var568)) {
                                            __label__ = 2497;
                                            break $S_2460;
                                        }
                                        __label__ = 2481;
                                        }
                                    $M_2481_2497 : for(;;) switch (__label__) {
                                        case 2497 :
                                        // NORMAL
                                            $S_2497 : {
                                            // NORMAL
                                                var local_13_FLOAT = 0.98; // type is FLOAT value type is FLOAT
                                                var local_14_FLOAT = 0.001; // type is FLOAT value type is FLOAT
                                                var var578 = thisRef.polygonAxis.type; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@532ca3a7
                                                var var579 = ojcCollision$EPAxis$Type.UNKNOWN; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5772185f
                                                if ((var578 != var579)) {
                                                    __label__ = 2527;
                                                    break $S_2497;
                                                }
                                                __label__ = 2518;
                                                }
                                            $M_2518_2527 : for(;;) switch (__label__) {
                                                case 2518 :
                                                // NORMAL
                                                    local_15_REFERENCE = thisRef.edgeAxis; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1cabf761
                                                    break $M_2518_2527;
                                                case 2527 :
                                                // NORMAL
                                                    $S_2527 : {
                                                    // NORMAL
                                                        var var581 = thisRef.polygonAxis.separation; // type is FLOAT value type is FLOAT
                                                        var var585 = ((0.98 * thisRef.edgeAxis.separation) + 0.001); // type is FLOAT value type is FLOAT
                                                        if ((var581 <= var585)) {
                                                            __label__ = 2560;
                                                            break $S_2527;
                                                        }
                                                        __label__ = 2551;
                                                        }
                                                    for(;;) switch (__label__) {
                                                        case 2560 :
                                                        // NORMAL
                                                            local_15_REFERENCE = thisRef.edgeAxis; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@49b87157
                                                            break $M_2518_2527;
                                                        case 2551 :
                                                        // NORMAL
                                                            local_15_REFERENCE = thisRef.polygonAxis; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7f3fd25c
                                                            break $M_2518_2527;
                                                    }
                                            }
                                            $S_2566 : {
                                            // NORMAL
                                                var var592 = thisRef.ie.data[0]; // type is REFERENCE value type is REFERENCE
                                                local_16_REFERENCE = var592; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@7d87cf2c
                                                var var595 = thisRef.ie.data[1]; // type is REFERENCE value type is REFERENCE
                                                local_17_REFERENCE = var595; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1947a514
                                                var var598 = local_15_REFERENCE.type; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@38489d04
                                                var var599 = ojcCollision$EPAxis$Type.EDGE_A; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7b1b7593
                                                if ((var598 != var599)) {
                                                    __label__ = 2981;
                                                    break $S_2566;
                                                }
                                                __label__ = 2593;
                                                }
                                            $M_2981_2593 : for(;;) switch (__label__) {
                                                case 2593 :
                                                // NORMAL
                                                    $S_2593 : {
                                                    // NORMAL
                                                        var var600 = ojcManifold$ManifoldType.FACE_A; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@71a3816e
                                                        manifold.type = var600;
                                                        local_18_INT = 0; // type is INT value type is INT
                                                        var var603 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@700f0034
                                                        var var606 = thisRef.m_polygonB.normals.data[0]; // type is REFERENCE value type is REFERENCE
                                                        var var607 = ojcVec2.FLOATdotojcVec2ojcVec2(var603,var606); // type is FLOAT value type is FLOAT
                                                        local_19_FLOAT = var607; // type is FLOAT value type is FLOAT
                                                        local_20_INT = 1; // type is INT value type is INT
                                                        __label__ = 2624;
                                                        }
                                                    $L_2624 : for (;;) {
                                                        $S_2624 : {
                                                        // NORMAL
                                                            var var612 = local_20_INT; // type is INT value type is INT
                                                            var var614 = thisRef.m_polygonB.count; // type is INT value type is INT
                                                            if ((var612 >= var614)) {
                                                                __label__ = 2677;
                                                                break $S_2624;
                                                            }
                                                            __label__ = 2636;
                                                            }
                                                        for(;;) switch (__label__) {
                                                            case 2677 :
                                                            // NORMAL
                                                                $S_2677 : {
                                                                // NORMAL
                                                                    local_20_INT = local_18_INT; // type is INT value type is INT
                                                                    var var713 = (local_20_INT + 1); // type is INT value type is INT
                                                                    var var715 = thisRef.m_polygonB.count; // type is INT value type is INT
                                                                    if ((var713 >= var715)) {
                                                                        __label__ = 2702;
                                                                        break $S_2677;
                                                                    }
                                                                    __label__ = 2695;
                                                                    }
                                                                $M_2695_2702 : for(;;) switch (__label__) {
                                                                    case 2695 :
                                                                    // NORMAL
                                                                        var718 = (local_20_INT + 1); // type is INT value type is INT
                                                                        break $M_2695_2702;
                                                                    case 2702 :
                                                                    // NORMAL
                                                                        var718 = 0; // type is INT value type is INT
                                                                        break $M_2695_2702;
                                                                }
                                                                $S_2703 : {
                                                                // NORMAL
                                                                    var local_21_INT = var718; // type is INT value type is INT
                                                                    var var722 = local_16_REFERENCE.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@cd3038c
                                                                    var var726 = thisRef.m_polygonB.vertices.data[local_20_INT]; // type is REFERENCE value type is REFERENCE
                                                                    var var727 = var722.ojcVec2setojcVec2(var722,var726); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2cc44868
                                                                    var var729 = local_16_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4181146f
                                                                    var729.indexA = 0;
                                                                    var var731 = local_16_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4907a2cb
                                                                    var var733 = Math.floor(local_20_INT); // type is BYTE value type is BYTE
                                                                    var731.indexB = var733;
                                                                    var var735 = local_16_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5ddc0704
                                                                    var var737 = ojcContactID$Type.FACE.INTordinal(ojcContactID$Type.FACE); // type is INT value type is INT
                                                                    var var738 = Math.floor(var737); // type is BYTE value type is BYTE
                                                                    var735.typeA = var738;
                                                                    var var740 = local_16_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@535583df
                                                                    var var742 = ojcContactID$Type.VERTEX.INTordinal(ojcContactID$Type.VERTEX); // type is INT value type is INT
                                                                    var var743 = Math.floor(var742); // type is BYTE value type is BYTE
                                                                    var740.typeB = var743;
                                                                    var var745 = local_17_REFERENCE.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1abec7b6
                                                                    var var749 = thisRef.m_polygonB.vertices.data[local_21_INT]; // type is REFERENCE value type is REFERENCE
                                                                    var var750 = var745.ojcVec2setojcVec2(var745,var749); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6edb3fd0
                                                                    var var752 = local_17_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5382e128
                                                                    var752.indexA = 0;
                                                                    var var754 = local_17_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2c36dbfc
                                                                    var var756 = Math.floor(local_21_INT); // type is BYTE value type is BYTE
                                                                    var754.indexB = var756;
                                                                    var var758 = local_17_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@40d93abb
                                                                    var var760 = ojcContactID$Type.FACE.INTordinal(ojcContactID$Type.FACE); // type is INT value type is INT
                                                                    var var761 = Math.floor(var760); // type is BYTE value type is BYTE
                                                                    var758.typeA = var761;
                                                                    var var763 = local_17_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@77cbb8cf
                                                                    var var765 = ojcContactID$Type.VERTEX.INTordinal(ojcContactID$Type.VERTEX); // type is INT value type is INT
                                                                    var var766 = Math.floor(var765); // type is BYTE value type is BYTE
                                                                    var763.typeB = var766;
                                                                    var var767 = thisRef.m_front; // type is BOOLEAN value type is BOOLEAN
                                                                    if ((var767 == 0)) {
                                                                        __label__ = 2914;
                                                                        break $S_2703;
                                                                    }
                                                                    __label__ = 2850;
                                                                    }
                                                                $M_2850_2914 : for(;;) switch (__label__) {
                                                                    case 2914 :
                                                                    // NORMAL
                                                                        var var782 = thisRef.rf; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@33048cbf
                                                                        var782.i1 = 1;
                                                                        var var783 = thisRef.rf; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@29f74818
                                                                        var783.i2 = 0;
                                                                        var var787 = thisRef.rf.v1.ojcVec2setojcVec2(thisRef.rf.v1,thisRef.m_v2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@20f2b37f
                                                                        var var791 = thisRef.rf.v2.ojcVec2setojcVec2(thisRef.rf.v2,thisRef.m_v1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@a556a6e
                                                                        var var795 = thisRef.rf.normal.ojcVec2setojcVec2(thisRef.rf.normal,thisRef.m_normal1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1da37eef
                                                                        var var796 = var795.ojcVec2negateLocal(var795); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@e0752cb
                                                                        break $M_2850_2914;
                                                                    case 2850 :
                                                                    // NORMAL
                                                                        var var768 = thisRef.rf; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3b5b613f
                                                                        var768.i1 = 0;
                                                                        var var769 = thisRef.rf; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1afc6a20
                                                                        var769.i2 = 1;
                                                                        var var773 = thisRef.rf.v1.ojcVec2setojcVec2(thisRef.rf.v1,thisRef.m_v1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1c2e3b96
                                                                        var var777 = thisRef.rf.v2.ojcVec2setojcVec2(thisRef.rf.v2,thisRef.m_v2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@280bb3d2
                                                                        var var781 = thisRef.rf.normal.ojcVec2setojcVec2(thisRef.rf.normal,thisRef.m_normal1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@48397d75
                                                                        break $M_2850_2914;
                                                                }
                                                                break $M_2981_2593;
                                                            case 2636 :
                                                            // NORMAL
                                                                $S_2636 : {
                                                                // NORMAL
                                                                    var var615 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@316db338
                                                                    var var619 = thisRef.m_polygonB.normals.data[local_20_INT]; // type is REFERENCE value type is REFERENCE
                                                                    var var620 = ojcVec2.FLOATdotojcVec2ojcVec2(var615,var619); // type is FLOAT value type is FLOAT
                                                                    local_21_FLOAT = var620; // type is FLOAT value type is FLOAT
                                                                    var var623 = local_21_FLOAT; // type is FLOAT value type is FLOAT
                                                                    var var624 = local_19_FLOAT; // type is FLOAT value type is FLOAT
                                                                    if ((var623 >= var624)) {
                                                                        __label__ = 2671;
                                                                        break $S_2636;
                                                                    }
                                                                    __label__ = 2663;
                                                                    }
                                                                $M_2663_2671 : for(;;) switch (__label__) {
                                                                    case 2671 :
                                                                    // NORMAL
                                                                        local_20_INT = (local_20_INT + 1); // type is INT value type is INT
                                                                        __label__ = 2624;
                                                                        continue $L_2624;
                                                                    case 2663 :
                                                                    // NORMAL
                                                                        local_19_FLOAT = local_21_FLOAT; // type is FLOAT value type is FLOAT
                                                                        local_18_INT = local_20_INT; // type is INT value type is INT
                                                                        __label__ = 2671;
                                                                        continue $M_2663_2671;
                                                                }
                                                        }
                                                    }
                                                case 2981 :
                                                // NORMAL
                                                    $S_2981 : {
                                                    // NORMAL
                                                        var var630 = ojcManifold$ManifoldType.FACE_B; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5c72dc08
                                                        manifold.type = var630;
                                                        var var634 = local_16_REFERENCE.v.ojcVec2setojcVec2(local_16_REFERENCE.v,thisRef.m_v1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@29926177
                                                        var var636 = local_16_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2ac363e5
                                                        var636.indexA = 0;
                                                        var var638 = local_16_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@76ebf1f6
                                                        var var641 = Math.floor(local_15_REFERENCE.index); // type is BYTE value type is BYTE
                                                        var638.indexB = var641;
                                                        var var643 = local_16_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3cb3f1bf
                                                        var var645 = ojcContactID$Type.VERTEX.INTordinal(ojcContactID$Type.VERTEX); // type is INT value type is INT
                                                        var var646 = Math.floor(var645); // type is BYTE value type is BYTE
                                                        var643.typeA = var646;
                                                        var var648 = local_16_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@690a687
                                                        var var650 = ojcContactID$Type.FACE.INTordinal(ojcContactID$Type.FACE); // type is INT value type is INT
                                                        var var651 = Math.floor(var650); // type is BYTE value type is BYTE
                                                        var648.typeB = var651;
                                                        var var655 = local_17_REFERENCE.v.ojcVec2setojcVec2(local_17_REFERENCE.v,thisRef.m_v2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@37fd31fb
                                                        var var657 = local_17_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1eb002b3
                                                        var657.indexA = 0;
                                                        var var659 = local_17_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3dad26d3
                                                        var var662 = Math.floor(local_15_REFERENCE.index); // type is BYTE value type is BYTE
                                                        var659.indexB = var662;
                                                        var var664 = local_17_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3e8a0b7f
                                                        var var666 = ojcContactID$Type.VERTEX.INTordinal(ojcContactID$Type.VERTEX); // type is INT value type is INT
                                                        var var667 = Math.floor(var666); // type is BYTE value type is BYTE
                                                        var664.typeA = var667;
                                                        var var669 = local_17_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@60a697bc
                                                        var var671 = ojcContactID$Type.FACE.INTordinal(ojcContactID$Type.FACE); // type is INT value type is INT
                                                        var var672 = Math.floor(var671); // type is BYTE value type is BYTE
                                                        var669.typeB = var672;
                                                        var var673 = thisRef.rf; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7e1da481
                                                        var var675 = local_15_REFERENCE.index; // type is INT value type is INT
                                                        var673.i1 = var675;
                                                        var676 = thisRef.rf; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2a528e2f
                                                        var var679 = (thisRef.rf.i1 + 1); // type is INT value type is INT
                                                        var var681 = thisRef.m_polygonB.count; // type is INT value type is INT
                                                        if ((var679 >= var681)) {
                                                            __label__ = 3167;
                                                            break $S_2981;
                                                        }
                                                        __label__ = 3155;
                                                        }
                                                    $M_3167_3155 : for(;;) switch (__label__) {
                                                        case 3167 :
                                                        // NORMAL
                                                            var685 = 0; // type is INT value type is INT
                                                            break $M_3167_3155;
                                                        case 3155 :
                                                        // NORMAL
                                                            var685 = (thisRef.rf.i1 + 1); // type is INT value type is INT
                                                            break $M_3167_3155;
                                                    }
                                                    var676.i2 = var685;
                                                    var var687 = thisRef.rf.v1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@44edb9e9
                                                    var var692 = thisRef.m_polygonB.vertices.data[thisRef.rf.i1]; // type is REFERENCE value type is REFERENCE
                                                    var var693 = var687.ojcVec2setojcVec2(var687,var692); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@10a2cdbf
                                                    var var695 = thisRef.rf.v2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3084a86
                                                    var var700 = thisRef.m_polygonB.vertices.data[thisRef.rf.i2]; // type is REFERENCE value type is REFERENCE
                                                    var var701 = var695.ojcVec2setojcVec2(var695,var700); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3d159f3e
                                                    var var703 = thisRef.rf.normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@149e4b84
                                                    var var708 = thisRef.m_polygonB.normals.data[thisRef.rf.i1]; // type is REFERENCE value type is REFERENCE
                                                    var var709 = var703.ojcVec2setojcVec2(var703,var708); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@12d7a39d
                                                    break $M_2981_2593;
                                            }
                                            $S_3249 : {
                                            // NORMAL
                                                var var806 = thisRef.rf.sideNormal1.ojcVec2setFLOATFLOAT(thisRef.rf.sideNormal1,thisRef.rf.normal.y,(-thisRef.rf.normal.x)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@53ca873b
                                                var var811 = thisRef.rf.sideNormal2.ojcVec2setojcVec2(thisRef.rf.sideNormal2,thisRef.rf.sideNormal1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@42b70e13
                                                var var812 = var811.ojcVec2negateLocal(var811); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2413bfaa
                                                var var813 = thisRef.rf; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@b772bfe
                                                var var818 = ojcVec2.FLOATdotojcVec2ojcVec2(thisRef.rf.sideNormal1,thisRef.rf.v1); // type is FLOAT value type is FLOAT
                                                var813.sideOffset1 = var818;
                                                var var819 = thisRef.rf; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@c8386f4
                                                var var824 = ojcVec2.FLOATdotojcVec2ojcVec2(thisRef.rf.sideNormal2,thisRef.rf.v2); // type is FLOAT value type is FLOAT
                                                var819.sideOffset2 = var824;
                                                var var833 = ojcCollision.INTclipSegmentToLineA1ojcCollision$ClipVertexA1ojcCollision$ClipVertexojcVec2FLOATINT(thisRef.clipPoints1,thisRef.ie,thisRef.rf.sideNormal1,thisRef.rf.sideOffset1,thisRef.rf.i1); // type is INT value type is INT
                                                local_18_INT = var833; // type is INT value type is INT
                                                var var835 = local_18_INT; // type is INT value type is INT
                                                if ((var835 >= 2)) {
                                                    break $S_3249;
                                                }
                                                return;
                                                }
                                            $S_3391 : {
                                            // NORMAL
                                                var var844 = ojcCollision.INTclipSegmentToLineA1ojcCollision$ClipVertexA1ojcCollision$ClipVertexojcVec2FLOATINT(thisRef.clipPoints2,thisRef.clipPoints1,thisRef.rf.sideNormal2,thisRef.rf.sideOffset2,thisRef.rf.i2); // type is INT value type is INT
                                                local_18_INT = var844; // type is INT value type is INT
                                                var var846 = local_18_INT; // type is INT value type is INT
                                                if ((var846 >= 2)) {
                                                    break $S_3391;
                                                }
                                                return;
                                                }
                                            $S_3432 : {
                                            // NORMAL
                                                var var848 = local_15_REFERENCE.type; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@763ed6e1
                                                var var849 = ojcCollision$EPAxis$Type.EDGE_A; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4fe9d963
                                                if ((var848 != var849)) {
                                                    __label__ = 3476;
                                                    break $S_3432;
                                                }
                                                __label__ = 3443;
                                                }
                                            $M_3443_3476 : for(;;) switch (__label__) {
                                                case 3476 :
                                                // NORMAL
                                                    var var858 = manifold.localNormal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7d7323bb
                                                    var var862 = polygonB.m_normals.data[thisRef.rf.i1]; // type is REFERENCE value type is REFERENCE
                                                    var var863 = var858.ojcVec2setojcVec2(var858,var862); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6dd7aec7
                                                    var var864 = manifold.localPoint; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6ddee442
                                                    var var868 = polygonB.m_vertices.data[thisRef.rf.i1]; // type is REFERENCE value type is REFERENCE
                                                    var var869 = var864.ojcVec2setojcVec2(var864,var868); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6cfd0a5b
                                                    break $M_3443_3476;
                                                case 3443 :
                                                // NORMAL
                                                    var var853 = manifold.localNormal.ojcVec2setojcVec2(manifold.localNormal,thisRef.rf.normal); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@8f79284
                                                    var var857 = manifold.localPoint.ojcVec2setojcVec2(manifold.localPoint,thisRef.rf.v1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5806a4cb
                                                    break $M_3443_3476;
                                            }
                                            $S_3518 : {
                                            // NORMAL
                                                local_19_INT = 0; // type is INT value type is INT
                                                local_20_INT = 0; // type is INT value type is INT
                                                __label__ = 3524;
                                                }
                                            $L_3524 : for (;;) {
                                                $S_3524 : {
                                                // NORMAL
                                                    var var873 = local_20_INT; // type is INT value type is INT
                                                    if ((var873 >= 2)) {
                                                        __label__ = 3754;
                                                        break $S_3524;
                                                    }
                                                    __label__ = 3530;
                                                    }
                                                for(;;) switch (__label__) {
                                                    case 3754 :
                                                    // NORMAL
                                                        var var874 = local_19_INT; // type is INT value type is INT
                                                        manifold.pointCount = var874;
                                                        return;
                                                    case 3530 :
                                                    // NORMAL
                                                        $S_3530 : {
                                                        // NORMAL
                                                            var var893 = thisRef.rf.normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4260a77d
                                                            var var894 = thisRef.temp; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@464bc2b8
                                                            var var897 = thisRef.clipPoints2.data[local_20_INT]; // type is REFERENCE value type is REFERENCE
                                                            var var899 = var894.ojcVec2setojcVec2(var894,var897.v); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@729c1b47
                                                            var var902 = var899.ojcVec2subLocalojcVec2(var899,thisRef.rf.v1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1fd1d923
                                                            var var903 = ojcVec2.FLOATdotojcVec2ojcVec2(var893,var902); // type is FLOAT value type is FLOAT
                                                            local_21_FLOAT = var903; // type is FLOAT value type is FLOAT
                                                            var var905 = local_21_FLOAT; // type is FLOAT value type is FLOAT
                                                            var var906 = thisRef.m_radius; // type is FLOAT value type is FLOAT
                                                            if ((var905 > var906)) {
                                                                __label__ = 3748;
                                                                break $S_3530;
                                                            }
                                                            __label__ = 3579;
                                                            }
                                                        $M_3579_3748 : for(;;) switch (__label__) {
                                                            case 3748 :
                                                            // NORMAL
                                                                local_20_INT = (local_20_INT + 1); // type is INT value type is INT
                                                                __label__ = 3524;
                                                                continue $L_3524;
                                                            case 3579 :
                                                            // NORMAL
                                                                $S_3579 : {
                                                                // NORMAL
                                                                    var var910 = manifold.points.data[local_19_INT]; // type is REFERENCE value type is REFERENCE
                                                                    local_22_REFERENCE = var910; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@4b983fd
                                                                    var var913 = local_15_REFERENCE.type; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@584ddeeb
                                                                    var var914 = ojcCollision$EPAxis$Type.EDGE_A; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@400b8958
                                                                    if ((var913 != var914)) {
                                                                        __label__ = 3642;
                                                                        break $S_3579;
                                                                    }
                                                                    __label__ = 3599;
                                                                    }
                                                                $M_3642_3599 : for(;;) switch (__label__) {
                                                                    case 3642 :
                                                                    // NORMAL
                                                                        var var916 = local_22_REFERENCE.localPoint; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@525fe43d
                                                                        var var919 = thisRef.clipPoints2.data[local_20_INT]; // type is REFERENCE value type is REFERENCE
                                                                        var var921 = var916.ojcVec2setojcVec2(var916,var919.v); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@43563794
                                                                        var var923 = local_22_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@75da0393
                                                                        var var926 = thisRef.clipPoints2.data[local_20_INT]; // type is REFERENCE value type is REFERENCE
                                                                        var var928 = var926.id.typeB; // type is BYTE value type is BYTE
                                                                        var923.typeA = var928;
                                                                        var var930 = local_22_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@69870539
                                                                        var var933 = thisRef.clipPoints2.data[local_20_INT]; // type is REFERENCE value type is REFERENCE
                                                                        var var935 = var933.id.typeA; // type is BYTE value type is BYTE
                                                                        var930.typeB = var935;
                                                                        var var937 = local_22_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@44547a38
                                                                        var var940 = thisRef.clipPoints2.data[local_20_INT]; // type is REFERENCE value type is REFERENCE
                                                                        var var942 = var940.id.indexB; // type is BYTE value type is BYTE
                                                                        var937.indexA = var942;
                                                                        var var944 = local_22_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@364c1fb1
                                                                        var var947 = thisRef.clipPoints2.data[local_20_INT]; // type is REFERENCE value type is REFERENCE
                                                                        var var949 = var947.id.indexA; // type is BYTE value type is BYTE
                                                                        var944.indexB = var949;
                                                                        break $M_3642_3599;
                                                                    case 3599 :
                                                                    // NORMAL
                                                                        var var950 = thisRef.m_xf; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@132f4470
                                                                        var var953 = thisRef.clipPoints2.data[local_20_INT]; // type is REFERENCE value type is REFERENCE
                                                                        ojcTransform.VOIDmulTransToOutUnsafeojcTransformojcVec2ojcVec2(var950,var953.v,local_22_REFERENCE.localPoint);
                                                                        var var958 = local_22_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@42d035e1
                                                                        var var961 = thisRef.clipPoints2.data[local_20_INT]; // type is REFERENCE value type is REFERENCE
                                                                        var958.VOIDsetojcContactID(var958,var961.id);
                                                                        break $M_3642_3599;
                                                                }
                                                                local_19_INT = (local_19_INT + 1); // type is INT value type is INT
                                                                __label__ = 3748;
                                                                continue $M_3579_3748;
                                                        }
                                                }
                                            }
                                        case 2481 :
                                        // NORMAL
                                            var var570 = thisRef.polygonAxis.separation; // type is FLOAT value type is FLOAT
                                            var var571 = thisRef.m_radius; // type is FLOAT value type is FLOAT
                                            if ((var570 <= var571)) {
                                                __label__ = 2497;
                                                continue $M_2481_2497;
                                            }
                                            return;
                                    }
                            }
                        }
                }
        }
    },

    VOIDcomputeEdgeSeparationojcCollision$EPAxis : function(thisRef,axis) {
        var local_8_FLOAT = null; // type is FLOAT # of inits = 1
        var var2 = null; // type is INT # of inits = 2
        var local_4_INT = null; // type is INT # of inits = 3
        var local_2_FLOAT = null; // type is FLOAT # of inits = 2
        var local_3_FLOAT = null; // type is FLOAT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcCollision$EPAxis$Type.EDGE_A; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@67c72d83
            axis.type = var0;
            var var1 = thisRef.m_front; // type is BOOLEAN value type is BOOLEAN
            if ((var1 == 0)) {
                __label__ = 19;
                break $S_0;
            }
            __label__ = 15;
            }
        $M_15_19 : for(;;) switch (__label__) {
            case 15 :
            // NORMAL
                var2 = 0; // type is INT value type is INT
                break $M_15_19;
            case 19 :
            // NORMAL
                var2 = 1; // type is INT value type is INT
                break $M_15_19;
        }
        $S_20 : {
        // NORMAL
            axis.index = var2;
            axis.separation = 3.4028235E38;
            local_2_FLOAT = thisRef.m_normal.x; // type is FLOAT value type is FLOAT
            local_3_FLOAT = thisRef.m_normal.y; // type is FLOAT value type is FLOAT
            local_4_INT = 0; // type is INT value type is INT
            __label__ = 48;
            }
        $L_48 : for (;;) {
            $S_48 : {
            // NORMAL
                var var13 = local_4_INT; // type is INT value type is INT
                var var15 = thisRef.m_polygonB.count; // type is INT value type is INT
                if ((var13 >= var15)) {
                    return;
                }
                }
            $S_60 : {
            // NORMAL
                var var19 = thisRef.m_polygonB.vertices.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                var local_5_REFERENCE = var19; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@66caa12
                var local_6_FLOAT = (local_5_REFERENCE.x - thisRef.m_v1.x); // type is FLOAT value type is FLOAT
                var local_7_FLOAT = (local_5_REFERENCE.y - thisRef.m_v1.y); // type is FLOAT value type is FLOAT
                local_8_FLOAT = ((local_2_FLOAT * local_6_FLOAT) + (local_3_FLOAT * local_7_FLOAT)); // type is FLOAT value type is FLOAT
                var var44 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                var var45 = axis.separation; // type is FLOAT value type is FLOAT
                if ((var44 >= var45)) {
                    __label__ = 129;
                    break $S_60;
                }
                __label__ = 123;
                }
            $M_129_123 : for(;;) switch (__label__) {
                case 129 :
                // NORMAL
                    local_4_INT = (local_4_INT + 1); // type is INT value type is INT
                    __label__ = 48;
                    continue $L_48;
                case 123 :
                // NORMAL
                    var var47 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                    axis.separation = var47;
                    __label__ = 129;
                    continue $M_129_123;
            }
        }
    },

    VOIDcomputePolygonSeparationojcCollision$EPAxis : function(thisRef,axis) {
        var local_2_INT = null; // type is INT # of inits = 3
        var local_9_FLOAT = null; // type is FLOAT # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcCollision$EPAxis$Type.UNKNOWN; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@615b27e6
            axis.type = var0;
            axis.index = -1;
            axis.separation = -3.4028235E38;
            var var1 = thisRef.perp; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7563605e
            var var4 = (-thisRef.m_normal.y); // type is FLOAT value type is FLOAT
            var1.x = var4;
            var var5 = thisRef.perp; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@719a0459
            var var7 = thisRef.m_normal.x; // type is FLOAT value type is FLOAT
            var5.y = var7;
            local_2_INT = 0; // type is INT value type is INT
            __label__ = 49;
            }
        $L_49 : for (;;) {
            $S_49 : {
            // NORMAL
                var var10 = local_2_INT; // type is INT value type is INT
                var var12 = thisRef.m_polygonB.count; // type is INT value type is INT
                if ((var10 >= var12)) {
                    return;
                }
                }
            $S_60 : {
            // NORMAL
                var var16 = thisRef.m_polygonB.normals.data[local_2_INT]; // type is REFERENCE value type is REFERENCE
                var local_3_REFERENCE = var16; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@bcf02a5
                var var21 = thisRef.m_polygonB.vertices.data[local_2_INT]; // type is REFERENCE value type is REFERENCE
                var local_4_REFERENCE = var21; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3393602d
                var var23 = thisRef.n; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5d9c8791
                var var26 = (-local_3_REFERENCE.x); // type is FLOAT value type is FLOAT
                var23.x = var26;
                var var27 = thisRef.n; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7c05e8b7
                var var30 = (-local_3_REFERENCE.y); // type is FLOAT value type is FLOAT
                var27.y = var30;
                var local_5_FLOAT = (local_4_REFERENCE.x - thisRef.m_v1.x); // type is FLOAT value type is FLOAT
                var local_6_FLOAT = (local_4_REFERENCE.y - thisRef.m_v1.y); // type is FLOAT value type is FLOAT
                var local_7_FLOAT = ((thisRef.n.x * local_5_FLOAT) + (thisRef.n.y * local_6_FLOAT)); // type is FLOAT value type is FLOAT
                var local_5_FLOAT = (local_4_REFERENCE.x - thisRef.m_v2.x); // type is FLOAT value type is FLOAT
                var local_6_FLOAT = (local_4_REFERENCE.y - thisRef.m_v2.y); // type is FLOAT value type is FLOAT
                var local_8_FLOAT = ((thisRef.n.x * local_5_FLOAT) + (thisRef.n.y * local_6_FLOAT)); // type is FLOAT value type is FLOAT
                var var81 = ojcMathUtils.FLOATminFLOATFLOAT(local_7_FLOAT,local_8_FLOAT); // type is FLOAT value type is FLOAT
                local_9_FLOAT = var81; // type is FLOAT value type is FLOAT
                var var84 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                var var85 = thisRef.m_radius; // type is FLOAT value type is FLOAT
                if ((var84 <= var85)) {
                    __label__ = 249;
                    break $S_60;
                }
                __label__ = 230;
                }
            for(;;) switch (__label__) {
                case 230 :
                // NORMAL
                    var var87 = ojcCollision$EPAxis$Type.EDGE_B; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@f2c07b8
                    axis.type = var87;
                    var var88 = local_2_INT; // type is INT value type is INT
                    axis.index = var88;
                    var var89 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                    axis.separation = var89;
                    return;
                case 249 :
                // NORMAL
                    $S_249 : {
                    // NORMAL
                        var var100 = ((thisRef.n.x * thisRef.perp.x) + (thisRef.n.y * thisRef.perp.y)); // type is FLOAT value type is FLOAT
                        if ((var100 < 0.0)) {
                            __label__ = 319;
                            break $S_249;
                        }
                        __label__ = 285;
                        }
                    $M_285_319 : for(;;) switch (__label__) {
                        case 285 :
                        // NORMAL
                            $S_285 : {
                            // NORMAL
                                var var104 = thisRef.temp.ojcVec2setojcVec2(thisRef.temp,thisRef.n); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@27969c78
                                var var106 = var104.ojcVec2subLocalojcVec2(var104,thisRef.m_upperLimit); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1e0f3714
                                var var108 = ojcVec2.FLOATdotojcVec2ojcVec2(var106,thisRef.m_normal); // type is FLOAT value type is FLOAT
                                if ((var108 >= -0.03490659)) {
                                    __label__ = 353;
                                    break $M_285_319;
                                }
                                }
                            __label__ = 381;
                            break $M_285_319;
                        case 319 :
                        // NORMAL
                            $S_319 : {
                            // NORMAL
                                var var112 = thisRef.temp.ojcVec2setojcVec2(thisRef.temp,thisRef.n); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4d9c2432
                                var var114 = var112.ojcVec2subLocalojcVec2(var112,thisRef.m_lowerLimit); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@22e2ebfe
                                var var116 = ojcVec2.FLOATdotojcVec2ojcVec2(var114,thisRef.m_normal); // type is FLOAT value type is FLOAT
                                if ((var116 >= -0.03490659)) {
                                    __label__ = 353;
                                    break $M_285_319;
                                }
                                }
                            __label__ = 381;
                            break $M_285_319;
                    }
                    $M_353_381 : for(;;) switch (__label__) {
                        case 381 :
                        // NORMAL
                            local_2_INT = (local_2_INT + 1); // type is INT value type is INT
                            __label__ = 49;
                            continue $L_49;
                        case 353 :
                        // NORMAL
                            $S_353 : {
                            // NORMAL
                                var var118 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                                var var119 = axis.separation; // type is FLOAT value type is FLOAT
                                if ((var118 <= var119)) {
                                    __label__ = 381;
                                    continue $M_353_381;
                                }
                                }
                            var var121 = ojcCollision$EPAxis$Type.EDGE_B; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3104d686
                            axis.type = var121;
                            var var122 = local_2_INT; // type is INT value type is INT
                            axis.index = var122;
                            var var123 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                            axis.separation = var123;
                            __label__ = 381;
                            continue $M_353_381;
                    }
            }
        }
    },

    classInitCheck : function() {
        if (!ojcCollision$EPCollider.__initialized) {
            ojcCollision$EPCollider.__initialized = true;
            var thePrototype = ojcCollision$EPCollider.Create.prototype;
            thePrototype.instanceOf = ojcCollision$EPCollider.instanceOf;
            thePrototype.ClassgetClass = ojcCollision$EPCollider.ClassgetClass;
            thePrototype.VOIDcomputePolygonSeparationojcCollision$EPAxis = ojcCollision$EPCollider.VOIDcomputePolygonSeparationojcCollision$EPAxis;
            thePrototype.VOIDcomputeEdgeSeparationojcCollision$EPAxis = ojcCollision$EPCollider.VOIDcomputeEdgeSeparationojcCollision$EPAxis;
            thePrototype.VOIDcollideojcManifoldojcsEdgeShapeojcTransformojcsPolygonShapeojcTransform = ojcCollision$EPCollider.VOIDcollideojcManifoldojcsEdgeShapeojcTransformojcsPolygonShapeojcTransform;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojcCollision$TempPolygon = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 75,
    __implementedTypes : [75,1],

    Create : function() {
        this.vertices = null; // declared in org.jbox2d.collision.Collision$TempPolygon
        this.normals = null; // declared in org.jbox2d.collision.Collision$TempPolygon
        this.count = 0; // declared in org.jbox2d.collision.Collision$TempPolygon
    },

    instanceOf : function(aType) {
        return ojcCollision$TempPolygon.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcCollision$TempPolygon;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var local_1_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = bytecoder.newArray(8,null); // type is REFERENCE value type is REFERENCE
            thisRef.vertices = var0;
            var var1 = bytecoder.newArray(8,null); // type is REFERENCE value type is REFERENCE
            thisRef.normals = var1;
            local_1_INT = 0; // type is INT value type is INT
            __label__ = 24;
            }
        $L_24 : for (;;) {
            $S_24 : {
            // NORMAL
                var var4 = local_1_INT; // type is INT value type is INT
                var var6 = thisRef.vertices.data.length; // type is INT value type is INT
                if ((var4 >= var6)) {
                    return;
                }
                }
            var var7 = thisRef.vertices; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@32322cd5
            var var8 = local_1_INT; // type is INT value type is INT
            var var9 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var9);
            var7.data[var8] = var9;
            var var10 = thisRef.normals; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@bd9caf2
            var var11 = local_1_INT; // type is INT value type is INT
            var var12 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var12);
            var10.data[var11] = var12;
            local_1_INT = (local_1_INT + 1); // type is INT value type is INT
            __label__ = 24;
            continue $L_24;
        }
    },

    classInitCheck : function() {
        if (!ojcCollision$TempPolygon.__initialized) {
            ojcCollision$TempPolygon.__initialized = true;
            var thePrototype = ojcCollision$TempPolygon.Create.prototype;
            thePrototype.instanceOf = ojcCollision$TempPolygon.instanceOf;
            thePrototype.ClassgetClass = ojcCollision$TempPolygon.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojcCollision$ReferenceFace = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 76,
    __implementedTypes : [76,1],

    Create : function() {
        this.v1 = null; // declared in org.jbox2d.collision.Collision$ReferenceFace
        this.v2 = null; // declared in org.jbox2d.collision.Collision$ReferenceFace
        this.normal = null; // declared in org.jbox2d.collision.Collision$ReferenceFace
        this.sideNormal1 = null; // declared in org.jbox2d.collision.Collision$ReferenceFace
        this.sideNormal2 = null; // declared in org.jbox2d.collision.Collision$ReferenceFace
        this.i1 = 0; // declared in org.jbox2d.collision.Collision$ReferenceFace
        this.i2 = 0; // declared in org.jbox2d.collision.Collision$ReferenceFace
        this.sideOffset1 = 0; // declared in org.jbox2d.collision.Collision$ReferenceFace
        this.sideOffset2 = 0; // declared in org.jbox2d.collision.Collision$ReferenceFace
    },

    instanceOf : function(aType) {
        return ojcCollision$ReferenceFace.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcCollision$ReferenceFace;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var0);
        thisRef.v1 = var0;
        var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var1);
        thisRef.v2 = var1;
        var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var2);
        thisRef.normal = var2;
        var var3 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var3);
        thisRef.sideNormal1 = var3;
        var var4 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var4);
        thisRef.sideNormal2 = var4;
        return;
    },

    classInitCheck : function() {
        if (!ojcCollision$ReferenceFace.__initialized) {
            ojcCollision$ReferenceFace.__initialized = true;
            var thePrototype = ojcCollision$ReferenceFace.Create.prototype;
            thePrototype.instanceOf = ojcCollision$ReferenceFace.instanceOf;
            thePrototype.ClassgetClass = ojcCollision$ReferenceFace.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojcCollision$EPAxis = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 77,
    __implementedTypes : [77,1],

    Create : function() {
        this.type = null; // declared in org.jbox2d.collision.Collision$EPAxis
        this.index = 0; // declared in org.jbox2d.collision.Collision$EPAxis
        this.separation = 0; // declared in org.jbox2d.collision.Collision$EPAxis
    },

    instanceOf : function(aType) {
        return ojcCollision$EPAxis.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcCollision$EPAxis;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    classInitCheck : function() {
        if (!ojcCollision$EPAxis.__initialized) {
            ojcCollision$EPAxis.__initialized = true;
            var thePrototype = ojcCollision$EPAxis.Create.prototype;
            thePrototype.instanceOf = ojcCollision$EPAxis.instanceOf;
            thePrototype.ClassgetClass = ojcCollision$EPAxis.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojcTimeOfImpact = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 78,
    __implementedTypes : [78,1],
    $assertionsDisabled : false, // declared in org.jbox2d.collision.TimeOfImpact
    toiCalls : 0, // declared in org.jbox2d.collision.TimeOfImpact
    toiIters : 0, // declared in org.jbox2d.collision.TimeOfImpact
    toiMaxIters : 0, // declared in org.jbox2d.collision.TimeOfImpact
    toiRootIters : 0, // declared in org.jbox2d.collision.TimeOfImpact
    toiMaxRootIters : 0, // declared in org.jbox2d.collision.TimeOfImpact

    Create : function() {
        this.cache = null; // declared in org.jbox2d.collision.TimeOfImpact
        this.distanceInput = null; // declared in org.jbox2d.collision.TimeOfImpact
        this.xfA = null; // declared in org.jbox2d.collision.TimeOfImpact
        this.xfB = null; // declared in org.jbox2d.collision.TimeOfImpact
        this.distanceOutput = null; // declared in org.jbox2d.collision.TimeOfImpact
        this.fcn = null; // declared in org.jbox2d.collision.TimeOfImpact
        this.indexes = null; // declared in org.jbox2d.collision.TimeOfImpact
        this.sweepA = null; // declared in org.jbox2d.collision.TimeOfImpact
        this.sweepB = null; // declared in org.jbox2d.collision.TimeOfImpact
        this.pool = null; // declared in org.jbox2d.collision.TimeOfImpact
    },

    instanceOf : function(aType) {
        return ojcTimeOfImpact.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcTimeOfImpact;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcTimeOfImpact.BOOLEANdesiredAssertionStatus(ojcTimeOfImpact); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_9_13 : for(;;) switch (__label__) {
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_9_13;
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_9_13;
        }
        ojcTimeOfImpact.$assertionsDisabled = var1;
        ojcTimeOfImpact.toiCalls = 0;
        ojcTimeOfImpact.toiIters = 0;
        ojcTimeOfImpact.toiMaxIters = 0;
        ojcTimeOfImpact.toiRootIters = 0;
        ojcTimeOfImpact.toiMaxRootIters = 0;
        return;
    },

    VOIDinitojpIWorldPool : function(thisRef,argPool) {
        var __label__ = null;
        var var0 = new ojcDistance$SimplexCache.Create(); // type is REFERENCE value type is REFERENCE
        ojcDistance$SimplexCache.VOIDinit(var0);
        thisRef.cache = var0;
        var var1 = new ojcDistanceInput.Create(); // type is REFERENCE value type is REFERENCE
        ojcDistanceInput.VOIDinit(var1);
        thisRef.distanceInput = var1;
        var var2 = new ojcTransform.Create(); // type is REFERENCE value type is REFERENCE
        ojcTransform.VOIDinit(var2);
        thisRef.xfA = var2;
        var var3 = new ojcTransform.Create(); // type is REFERENCE value type is REFERENCE
        ojcTransform.VOIDinit(var3);
        thisRef.xfB = var3;
        var var4 = new ojcDistanceOutput.Create(); // type is REFERENCE value type is REFERENCE
        ojcDistanceOutput.VOIDinit(var4);
        thisRef.distanceOutput = var4;
        var var5 = new ojcSeparationFunction.Create(); // type is REFERENCE value type is REFERENCE
        ojcSeparationFunction.VOIDinit(var5);
        thisRef.fcn = var5;
        var var6 = bytecoder.newArray(2,0); // type is REFERENCE value type is REFERENCE
        thisRef.indexes = var6;
        var var7 = new ojcSweep.Create(); // type is REFERENCE value type is REFERENCE
        ojcSweep.VOIDinit(var7);
        thisRef.sweepA = var7;
        var var8 = new ojcSweep.Create(); // type is REFERENCE value type is REFERENCE
        ojcSweep.VOIDinit(var8);
        thisRef.sweepB = var8;
        thisRef.pool = argPool;
        return;
    },

    VOIDtimeOfImpactojcTimeOfImpact$TOIOutputojcTimeOfImpact$TOIInput : function(thisRef,output,input) {
        var local_8_FLOAT = null; // type is FLOAT # of inits = 4
        var local_5_FLOAT = null; // type is FLOAT # of inits = 3
        var local_13_INT = null; // type is INT # of inits = 4
        var local_14_FLOAT = null; // type is FLOAT # of inits = 3
        var local_20_FLOAT = null; // type is FLOAT # of inits = 1
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_9_FLOAT = null; // type is FLOAT # of inits = 5
        var local_19_FLOAT = null; // type is FLOAT # of inits = 2
        var local_16_INT = null; // type is INT # of inits = 3
        var local_7_FLOAT = null; // type is FLOAT # of inits = 4
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_18_FLOAT = null; // type is FLOAT # of inits = 3
        var local_15_FLOAT = null; // type is FLOAT # of inits = 3
        var local_10_INT = null; // type is INT # of inits = 5
        var local_11_INT = null; // type is INT # of inits = 6
        var local_17_FLOAT = null; // type is FLOAT # of inits = 3
        var local_12_FLOAT = null; // type is FLOAT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var1 = (ojcTimeOfImpact.toiCalls + 1); // type is INT value type is INT
            ojcTimeOfImpact.toiCalls = var1;
            var var2 = ojcTimeOfImpact$TOIOutputState.UNKNOWN; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@787fcf5
            output.state = var2;
            var var3 = input.tMax; // type is FLOAT value type is FLOAT
            output.t = var3;
            local_3_REFERENCE = input.proxyA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@32165a7f
            local_4_REFERENCE = input.proxyB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@18e4778c
            var var10 = thisRef.sweepA.ojcSweepsetojcSweep(thisRef.sweepA,input.sweepA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@570328f
            var var13 = thisRef.sweepB.ojcSweepsetojcSweep(thisRef.sweepB,input.sweepB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3d280680
            thisRef.sweepA.VOIDnormalize(thisRef.sweepA);
            thisRef.sweepB.VOIDnormalize(thisRef.sweepB);
            local_5_FLOAT = input.tMax; // type is FLOAT value type is FLOAT
            var local_6_FLOAT = (local_3_REFERENCE.m_radius + local_4_REFERENCE.m_radius); // type is FLOAT value type is FLOAT
            var var28 = ojcMathUtils.FLOATmaxFLOATFLOAT(0.005,(local_6_FLOAT - 0.015)); // type is FLOAT value type is FLOAT
            local_7_FLOAT = var28; // type is FLOAT value type is FLOAT
            local_8_FLOAT = 0.00125; // type is FLOAT value type is FLOAT
            var var33 = ojcTimeOfImpact.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var33 != 0)) {
                __label__ = 128;
                break $S_0;
            }
            __label__ = 112;
            }
        $M_112_128 : for(;;) switch (__label__) {
            case 128 :
            // NORMAL
                $S_128 : {
                // NORMAL
                    local_9_FLOAT = 0.0; // type is FLOAT value type is FLOAT
                    local_10_INT = 0; // type is INT value type is INT
                    var var41 = thisRef.cache; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3d6d66f8
                    var41.count = 0;
                    var var42 = thisRef.distanceInput; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@60e3ece
                    var var43 = input.proxyA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@26e80ca
                    var42.proxyA = var43;
                    var var44 = thisRef.distanceInput; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7f0f9a01
                    var var45 = input.proxyB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@298369be
                    var44.proxyB = var45;
                    var var46 = thisRef.distanceInput; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5e8cca0e
                    var46.useRadii = 0;
                    __label__ = 172;
                    }
                $L_172 : for (;;) {
                    $S_172 : {
                    // NORMAL
                        thisRef.sweepA.VOIDgetTransformojcTransformFLOAT(thisRef.sweepA,thisRef.xfA,local_9_FLOAT);
                        thisRef.sweepB.VOIDgetTransformojcTransformFLOAT(thisRef.sweepB,thisRef.xfB,local_9_FLOAT);
                        var var53 = thisRef.distanceInput; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@289279c5
                        var var54 = thisRef.xfA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2b4e3144
                        var53.transformA = var54;
                        var var55 = thisRef.distanceInput; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1932630a
                        var var56 = thisRef.xfB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@21d61698
                        var55.transformB = var56;
                        var var58 = thisRef.pool.ojcDistancegetDistance(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1a310f36
                        var58.VOIDdistanceojcDistanceOutputojcDistance$SimplexCacheojcDistanceInput(var58,thisRef.distanceOutput,thisRef.cache,thisRef.distanceInput);
                        var var63 = thisRef.distanceOutput.distance; // type is FLOAT value type is FLOAT
                        if ((var63 > 0.0)) {
                            __label__ = 271;
                            break $S_172;
                        }
                        __label__ = 256;
                        }
                    $M_256_271 : for(;;) switch (__label__) {
                        case 271 :
                        // NORMAL
                            $S_271 : {
                            // NORMAL
                                var var66 = thisRef.distanceOutput.distance; // type is FLOAT value type is FLOAT
                                var var69 = (local_7_FLOAT + local_8_FLOAT); // type is FLOAT value type is FLOAT
                                if ((var66 >= var69)) {
                                    __label__ = 303;
                                    break $S_271;
                                }
                                __label__ = 287;
                                }
                            for(;;) switch (__label__) {
                                case 303 :
                                // NORMAL
                                    $S_303 : {
                                    // NORMAL
                                        var var78 = thisRef.fcn.FLOATinitializeojcDistance$SimplexCacheojcDistance$DistanceProxyojcSweepojcDistance$DistanceProxyojcSweepFLOAT(thisRef.fcn,thisRef.cache,local_3_REFERENCE,thisRef.sweepA,local_4_REFERENCE,thisRef.sweepB,local_9_FLOAT); // type is FLOAT value type is FLOAT
                                        local_11_INT = 0; // type is INT value type is INT
                                        local_12_FLOAT = local_5_FLOAT; // type is FLOAT value type is FLOAT
                                        local_13_INT = 0; // type is INT value type is INT
                                        __label__ = 338;
                                        }
                                    $L_338 : for (;;) {
                                        $S_338 : {
                                        // NORMAL
                                            var var89 = thisRef.fcn.FLOATfindMinSeparationA1INTFLOAT(thisRef.fcn,thisRef.indexes,local_12_FLOAT); // type is FLOAT value type is FLOAT
                                            local_14_FLOAT = var89; // type is FLOAT value type is FLOAT
                                            var var92 = local_14_FLOAT; // type is FLOAT value type is FLOAT
                                            var var95 = (local_7_FLOAT + local_8_FLOAT); // type is FLOAT value type is FLOAT
                                            if ((var92 <= var95)) {
                                                __label__ = 383;
                                                break $S_338;
                                            }
                                            __label__ = 364;
                                            }
                                        $M_364_383 : for(;;) switch (__label__) {
                                            case 383 :
                                            // NORMAL
                                                $S_383 : {
                                                // NORMAL
                                                    var var97 = local_14_FLOAT; // type is FLOAT value type is FLOAT
                                                    var var100 = (local_7_FLOAT - local_8_FLOAT); // type is FLOAT value type is FLOAT
                                                    if ((var97 <= var100)) {
                                                        __label__ = 401;
                                                        break $S_383;
                                                    }
                                                    __label__ = 394;
                                                    }
                                                for(;;) switch (__label__) {
                                                    case 401 :
                                                    // NORMAL
                                                        $S_401 : {
                                                        // NORMAL
                                                            var var102 = thisRef.fcn; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@40afd925
                                                            var var104 = thisRef.indexes.data[0]; // type is INT value type is INT
                                                            var var106 = thisRef.indexes.data[1]; // type is INT value type is INT
                                                            var var108 = var102.FLOATevaluateINTINTFLOAT(var102,var104,var106,local_9_FLOAT); // type is FLOAT value type is FLOAT
                                                            local_15_FLOAT = var108; // type is FLOAT value type is FLOAT
                                                            var var111 = local_15_FLOAT; // type is FLOAT value type is FLOAT
                                                            var var114 = (local_7_FLOAT - local_8_FLOAT); // type is FLOAT value type is FLOAT
                                                            if ((var111 >= var114)) {
                                                                __label__ = 454;
                                                                break $S_401;
                                                            }
                                                            __label__ = 435;
                                                            }
                                                        for(;;) switch (__label__) {
                                                            case 435 :
                                                            // NORMAL
                                                                var var191 = ojcTimeOfImpact$TOIOutputState.FAILED; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4a8fc809
                                                                output.state = var191;
                                                                var var192 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                                                                output.t = var192;
                                                                local_11_INT = 1; // type is INT value type is INT
                                                                break $M_364_383;
                                                            case 454 :
                                                            // NORMAL
                                                                $S_454 : {
                                                                // NORMAL
                                                                    var var116 = local_15_FLOAT; // type is FLOAT value type is FLOAT
                                                                    var var119 = (local_7_FLOAT + local_8_FLOAT); // type is FLOAT value type is FLOAT
                                                                    if ((var116 > var119)) {
                                                                        __label__ = 484;
                                                                        break $S_454;
                                                                    }
                                                                    __label__ = 465;
                                                                    }
                                                                for(;;) switch (__label__) {
                                                                    case 465 :
                                                                    // NORMAL
                                                                        var var194 = ojcTimeOfImpact$TOIOutputState.TOUCHING; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5bfc7516
                                                                        output.state = var194;
                                                                        var var195 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                                                                        output.t = var195;
                                                                        local_11_INT = 1; // type is INT value type is INT
                                                                        break $M_364_383;
                                                                    case 484 :
                                                                    // NORMAL
                                                                        $S_484 : {
                                                                        // NORMAL
                                                                            local_16_INT = 0; // type is INT value type is INT
                                                                            local_17_FLOAT = local_9_FLOAT; // type is FLOAT value type is FLOAT
                                                                            local_18_FLOAT = local_12_FLOAT; // type is FLOAT value type is FLOAT
                                                                            __label__ = 495;
                                                                            }
                                                                        $L_495 : for (;;) {
                                                                            $S_495 : {
                                                                            // NORMAL
                                                                                var var130 = (local_16_INT & 1); // type is INT value type is INT
                                                                                if ((var130 != 1)) {
                                                                                    __label__ = 528;
                                                                                    break $S_495;
                                                                                }
                                                                                __label__ = 503;
                                                                                }
                                                                            $M_503_528 : for(;;) switch (__label__) {
                                                                                case 528 :
                                                                                // NORMAL
                                                                                    local_19_FLOAT = (0.5 * (local_17_FLOAT + local_18_FLOAT)); // type is FLOAT value type is FLOAT
                                                                                    break $M_503_528;
                                                                                case 503 :
                                                                                // NORMAL
                                                                                    local_19_FLOAT = (local_17_FLOAT + (((local_7_FLOAT - local_15_FLOAT) * (local_18_FLOAT - local_17_FLOAT)) / (local_14_FLOAT - local_15_FLOAT))); // type is FLOAT value type is FLOAT
                                                                                    break $M_503_528;
                                                                            }
                                                                            $S_538 : {
                                                                            // NORMAL
                                                                                var var151 = thisRef.fcn; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@492689e0
                                                                                var var153 = thisRef.indexes.data[0]; // type is INT value type is INT
                                                                                var var155 = thisRef.indexes.data[1]; // type is INT value type is INT
                                                                                var var157 = var151.FLOATevaluateINTINTFLOAT(var151,var153,var155,local_19_FLOAT); // type is FLOAT value type is FLOAT
                                                                                local_20_FLOAT = var157; // type is FLOAT value type is FLOAT
                                                                                var var163 = ojcMathUtils.FLOATabsFLOAT((local_20_FLOAT - local_7_FLOAT)); // type is FLOAT value type is FLOAT
                                                                                var var164 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                                                                                if ((var163 >= var164)) {
                                                                                    __label__ = 582;
                                                                                    break $S_538;
                                                                                }
                                                                                __label__ = 575;
                                                                                }
                                                                            $M_582_575 : for(;;) switch (__label__) {
                                                                                case 582 :
                                                                                // NORMAL
                                                                                    $S_582 : {
                                                                                    // NORMAL
                                                                                        var var166 = local_20_FLOAT; // type is FLOAT value type is FLOAT
                                                                                        var var167 = local_7_FLOAT; // type is FLOAT value type is FLOAT
                                                                                        if ((var166 <= var167)) {
                                                                                            __label__ = 601;
                                                                                            break $S_582;
                                                                                        }
                                                                                        __label__ = 590;
                                                                                        }
                                                                                    $M_590_601 : for(;;) switch (__label__) {
                                                                                        case 590 :
                                                                                        // NORMAL
                                                                                            local_17_FLOAT = local_19_FLOAT; // type is FLOAT value type is FLOAT
                                                                                            local_15_FLOAT = local_20_FLOAT; // type is FLOAT value type is FLOAT
                                                                                            break $M_590_601;
                                                                                        case 601 :
                                                                                        // NORMAL
                                                                                            local_18_FLOAT = local_19_FLOAT; // type is FLOAT value type is FLOAT
                                                                                            local_14_FLOAT = local_20_FLOAT; // type is FLOAT value type is FLOAT
                                                                                            break $M_590_601;
                                                                                    }
                                                                                    $S_609 : {
                                                                                    // NORMAL
                                                                                        local_16_INT = (local_16_INT + 1); // type is INT value type is INT
                                                                                        var var178 = (ojcTimeOfImpact.toiRootIters + 1); // type is INT value type is INT
                                                                                        ojcTimeOfImpact.toiRootIters = var178;
                                                                                        var var179 = local_16_INT; // type is INT value type is INT
                                                                                        if ((var179 != 50)) {
                                                                                            __label__ = 630;
                                                                                            break $S_609;
                                                                                        }
                                                                                        __label__ = 627;
                                                                                        }
                                                                                    for(;;) switch (__label__) {
                                                                                        case 630 :
                                                                                        // NORMAL
                                                                                            __label__ = 495;
                                                                                            continue $L_495;
                                                                                        case 627 :
                                                                                        // NORMAL
                                                                                            break $M_582_575;
                                                                                    }
                                                                                case 575 :
                                                                                // NORMAL
                                                                                    local_12_FLOAT = local_19_FLOAT; // type is FLOAT value type is FLOAT
                                                                                    break $M_582_575;
                                                                            }
                                                                            $S_633 : {
                                                                            // NORMAL
                                                                                var var184 = ojcMathUtils.INTmaxINTINT(ojcTimeOfImpact.toiMaxRootIters,local_16_INT); // type is INT value type is INT
                                                                                ojcTimeOfImpact.toiMaxRootIters = var184;
                                                                                local_13_INT = (local_13_INT + 1); // type is INT value type is INT
                                                                                var var185 = local_13_INT; // type is INT value type is INT
                                                                                if ((var185 != 8)) {
                                                                                    __label__ = 657;
                                                                                    break $S_633;
                                                                                }
                                                                                __label__ = 654;
                                                                                }
                                                                            for(;;) switch (__label__) {
                                                                                case 654 :
                                                                                // NORMAL
                                                                                    break $M_364_383;
                                                                                case 657 :
                                                                                // NORMAL
                                                                                    __label__ = 338;
                                                                                    continue $L_338;
                                                                            }
                                                                        }
                                                                }
                                                        }
                                                    case 394 :
                                                    // NORMAL
                                                        local_9_FLOAT = local_12_FLOAT; // type is FLOAT value type is FLOAT
                                                        break $M_364_383;
                                                }
                                            case 364 :
                                            // NORMAL
                                                var var186 = ojcTimeOfImpact$TOIOutputState.SEPARATED; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@777e0710
                                                output.state = var186;
                                                var var187 = local_5_FLOAT; // type is FLOAT value type is FLOAT
                                                output.t = var187;
                                                local_11_INT = 1; // type is INT value type is INT
                                                break $M_364_383;
                                        }
                                        $S_660 : {
                                        // NORMAL
                                            local_10_INT = (local_10_INT + 1); // type is INT value type is INT
                                            var var198 = (ojcTimeOfImpact.toiIters + 1); // type is INT value type is INT
                                            ojcTimeOfImpact.toiIters = var198;
                                            var var199 = local_11_INT; // type is INT value type is INT
                                            if ((var199 == 0)) {
                                                __label__ = 679;
                                                break $S_660;
                                            }
                                            __label__ = 676;
                                            }
                                        for(;;) switch (__label__) {
                                            case 676 :
                                            // NORMAL
                                                break $M_256_271;
                                            case 679 :
                                            // NORMAL
                                                $S_679 : {
                                                // NORMAL
                                                    var var200 = local_10_INT; // type is INT value type is INT
                                                    if ((var200 != 1000)) {
                                                        __label__ = 703;
                                                        break $S_679;
                                                    }
                                                    __label__ = 687;
                                                    }
                                                for(;;) switch (__label__) {
                                                    case 703 :
                                                    // NORMAL
                                                        __label__ = 172;
                                                        continue $L_172;
                                                    case 687 :
                                                    // NORMAL
                                                        var var204 = ojcTimeOfImpact$TOIOutputState.FAILED; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@43855676
                                                        output.state = var204;
                                                        var var205 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                                                        output.t = var205;
                                                        break $M_256_271;
                                                }
                                        }
                                    }
                                case 287 :
                                // NORMAL
                                    var var202 = ojcTimeOfImpact$TOIOutputState.TOUCHING; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7b69dfd5
                                    output.state = var202;
                                    var var203 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                                    output.t = var203;
                                    break $M_256_271;
                            }
                        case 256 :
                        // NORMAL
                            var var201 = ojcTimeOfImpact$TOIOutputState.OVERLAPPED; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6fd30d1
                            output.state = var201;
                            output.t = 0.0;
                            break $M_256_271;
                    }
                    var var208 = ojcMathUtils.INTmaxINTINT(ojcTimeOfImpact.toiMaxIters,local_10_INT); // type is INT value type is INT
                    ojcTimeOfImpact.toiMaxIters = var208;
                    return;
                }
            case 112 :
            // NORMAL
                $S_112 : {
                // NORMAL
                    var var34 = local_7_FLOAT; // type is FLOAT value type is FLOAT
                    var var35 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                    if ((var34 > var35)) {
                        __label__ = 128;
                        continue $M_112_128;
                    }
                    }
                var var209 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var209);
                throw var209;
        }
    },

    classInitCheck : function() {
        if (!ojcTimeOfImpact.__initialized) {
            ojcTimeOfImpact.__initialized = true;
            var thePrototype = ojcTimeOfImpact.Create.prototype;
            thePrototype.instanceOf = ojcTimeOfImpact.instanceOf;
            thePrototype.ClassgetClass = ojcTimeOfImpact.ClassgetClass;
            thePrototype.VOIDtimeOfImpactojcTimeOfImpact$TOIOutputojcTimeOfImpact$TOIInput = ojcTimeOfImpact.VOIDtimeOfImpactojcTimeOfImpact$TOIOutputojcTimeOfImpact$TOIInput;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            ojcTimeOfImpact.VOIDclinit();
        }
    },

};

var ojcSeparationFunction = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 79,
    __implementedTypes : [79,1],
    $assertionsDisabled : false, // declared in org.jbox2d.collision.SeparationFunction

    Create : function() {
        this.m_localPoint = null; // declared in org.jbox2d.collision.SeparationFunction
        this.m_axis = null; // declared in org.jbox2d.collision.SeparationFunction
        this.localPointA = null; // declared in org.jbox2d.collision.SeparationFunction
        this.localPointB = null; // declared in org.jbox2d.collision.SeparationFunction
        this.pointA = null; // declared in org.jbox2d.collision.SeparationFunction
        this.pointB = null; // declared in org.jbox2d.collision.SeparationFunction
        this.localPointA1 = null; // declared in org.jbox2d.collision.SeparationFunction
        this.localPointA2 = null; // declared in org.jbox2d.collision.SeparationFunction
        this.normal = null; // declared in org.jbox2d.collision.SeparationFunction
        this.localPointB1 = null; // declared in org.jbox2d.collision.SeparationFunction
        this.localPointB2 = null; // declared in org.jbox2d.collision.SeparationFunction
        this.temp = null; // declared in org.jbox2d.collision.SeparationFunction
        this.xfa = null; // declared in org.jbox2d.collision.SeparationFunction
        this.xfb = null; // declared in org.jbox2d.collision.SeparationFunction
        this.axisA = null; // declared in org.jbox2d.collision.SeparationFunction
        this.axisB = null; // declared in org.jbox2d.collision.SeparationFunction
        this.m_proxyA = null; // declared in org.jbox2d.collision.SeparationFunction
        this.m_proxyB = null; // declared in org.jbox2d.collision.SeparationFunction
        this.m_sweepA = null; // declared in org.jbox2d.collision.SeparationFunction
        this.m_sweepB = null; // declared in org.jbox2d.collision.SeparationFunction
        this.m_type = null; // declared in org.jbox2d.collision.SeparationFunction
    },

    instanceOf : function(aType) {
        return ojcSeparationFunction.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcSeparationFunction;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcSeparationFunction.BOOLEANdesiredAssertionStatus(ojcSeparationFunction); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_13_9 : for(;;) switch (__label__) {
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_13_9;
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_13_9;
        }
        ojcSeparationFunction.$assertionsDisabled = var1;
        return;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var0);
        thisRef.m_localPoint = var0;
        var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var1);
        thisRef.m_axis = var1;
        var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var2);
        thisRef.localPointA = var2;
        var var3 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var3);
        thisRef.localPointB = var3;
        var var4 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var4);
        thisRef.pointA = var4;
        var var5 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var5);
        thisRef.pointB = var5;
        var var6 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var6);
        thisRef.localPointA1 = var6;
        var var7 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var7);
        thisRef.localPointA2 = var7;
        var var8 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var8);
        thisRef.normal = var8;
        var var9 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var9);
        thisRef.localPointB1 = var9;
        var var10 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var10);
        thisRef.localPointB2 = var10;
        var var11 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var11);
        thisRef.temp = var11;
        var var12 = new ojcTransform.Create(); // type is REFERENCE value type is REFERENCE
        ojcTransform.VOIDinit(var12);
        thisRef.xfa = var12;
        var var13 = new ojcTransform.Create(); // type is REFERENCE value type is REFERENCE
        ojcTransform.VOIDinit(var13);
        thisRef.xfb = var13;
        var var14 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var14);
        thisRef.axisA = var14;
        var var15 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var15);
        thisRef.axisB = var15;
        return;
    },

    FLOATinitializeojcDistance$SimplexCacheojcDistance$DistanceProxyojcSweepojcDistance$DistanceProxyojcSweepFLOAT : function(thisRef,cache,proxyA,sweepA,proxyB,sweepB,t1) {
        var local_7_INT = null; // type is INT # of inits = 1
        var local_8_FLOAT = null; // type is FLOAT # of inits = 5
        var __label__ = null;
        $S_0 : {
        // NORMAL
            thisRef.m_proxyA = proxyA;
            thisRef.m_proxyB = proxyB;
            local_7_INT = cache.count; // type is INT value type is INT
            var var3 = ojcSeparationFunction.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var3 != 0)) {
                __label__ = 43;
                break $S_0;
            }
            __label__ = 23;
            }
        $M_23_43 : for(;;) switch (__label__) {
            case 23 :
            // NORMAL
                $S_23 : {
                // NORMAL
                    var var4 = local_7_INT; // type is INT value type is INT
                    if ((0 >= var4)) {
                        __label__ = 35;
                        break $S_23;
                    }
                    __label__ = 29;
                    }
                $M_35_29 : for(;;) switch (__label__) {
                    case 35 :
                    // NORMAL
                        var var76 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                        jlAssertionError.VOIDinit(var76);
                        throw var76;
                    case 29 :
                    // NORMAL
                        var var5 = local_7_INT; // type is INT value type is INT
                        if ((var5 < 3)) {
                            __label__ = 43;
                            continue $M_23_43;
                        }
                        __label__ = 35;
                        continue $M_35_29;
                }
            case 43 :
            // NORMAL
                $S_43 : {
                // NORMAL
                    thisRef.m_sweepA = sweepA;
                    thisRef.m_sweepB = sweepB;
                    thisRef.m_sweepA.VOIDgetTransformojcTransformFLOAT(thisRef.m_sweepA,thisRef.xfa,t1);
                    thisRef.m_sweepB.VOIDgetTransformojcTransformFLOAT(thisRef.m_sweepB,thisRef.xfb,t1);
                    var var10 = local_7_INT; // type is INT value type is INT
                    if ((var10 != 1)) {
                        __label__ = 196;
                        break $S_43;
                    }
                    __label__ = 86;
                    }
                for(;;) switch (__label__) {
                    case 86 :
                    // NORMAL
                        var var77 = ojcType.POINTS; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4da06690
                        thisRef.m_type = var77;
                        var var78 = thisRef.localPointA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1197a0c8
                        var var79 = thisRef.m_proxyA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@39a67075
                        var var81 = cache.indexA.data[0]; // type is INT value type is INT
                        var var82 = var79.ojcVec2getVertexINT(var79,var81); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3d866be
                        var var83 = var78.ojcVec2setojcVec2(var78,var82); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4d0204b3
                        var var84 = thisRef.localPointB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@613f6c3b
                        var var85 = thisRef.m_proxyB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6b109db1
                        var var87 = cache.indexB.data[0]; // type is INT value type is INT
                        var var88 = var85.ojcVec2getVertexINT(var85,var87); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2bbdebfb
                        var var89 = var84.ojcVec2setojcVec2(var84,var88); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@764755a3
                        ojcTransform.VOIDmulToOutUnsafeojcTransformojcVec2ojcVec2(thisRef.xfa,thisRef.localPointA,thisRef.pointA);
                        ojcTransform.VOIDmulToOutUnsafeojcTransformojcVec2ojcVec2(thisRef.xfb,thisRef.localPointB,thisRef.pointB);
                        var var98 = thisRef.m_axis.ojcVec2setojcVec2(thisRef.m_axis,thisRef.pointB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6c83a1e4
                        var var100 = var98.ojcVec2subLocalojcVec2(var98,thisRef.pointA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@39144d0
                        var var102 = thisRef.m_axis.FLOATnormalize(thisRef.m_axis); // type is FLOAT value type is FLOAT
                        local_8_FLOAT = var102; // type is FLOAT value type is FLOAT
                        return local_8_FLOAT;
                    case 196 :
                    // NORMAL
                        $S_196 : {
                        // NORMAL
                            var var12 = cache.indexA.data[0]; // type is INT value type is INT
                            var var14 = cache.indexA.data[1]; // type is INT value type is INT
                            if ((var12 != var14)) {
                                __label__ = 444;
                                break $S_196;
                            }
                            __label__ = 211;
                            }
                        for(;;) switch (__label__) {
                            case 444 :
                            // NORMAL
                                $S_444 : {
                                // NORMAL
                                    var var105 = ojcType.FACE_A; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@47b7856a
                                    thisRef.m_type = var105;
                                    var var106 = thisRef.localPointA1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@b912a72
                                    var var107 = thisRef.m_proxyA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7a6c3665
                                    var var109 = cache.indexA.data[0]; // type is INT value type is INT
                                    var var110 = var107.ojcVec2getVertexINT(var107,var109); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@73d25a3c
                                    var var111 = var106.ojcVec2setojcVec2(var106,var110); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@8b50df9
                                    var var112 = thisRef.localPointA2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@a757427
                                    var var113 = thisRef.m_proxyA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1131b412
                                    var var115 = cache.indexA.data[1]; // type is INT value type is INT
                                    var var116 = var113.ojcVec2getVertexINT(var113,var115); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@70531fb2
                                    var var117 = var112.ojcVec2setojcVec2(var112,var116); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@50291e84
                                    var var120 = thisRef.temp.ojcVec2setojcVec2(thisRef.temp,thisRef.localPointA2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@715c8cea
                                    var var122 = var120.ojcVec2subLocalojcVec2(var120,thisRef.localPointA1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6dd127f7
                                    ojcVec2.VOIDcrossToOutUnsafeojcVec2FLOATojcVec2(thisRef.temp,1.0,thisRef.m_axis);
                                    var var126 = thisRef.m_axis.FLOATnormalize(thisRef.m_axis); // type is FLOAT value type is FLOAT
                                    ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(thisRef.xfa.q,thisRef.m_axis,thisRef.normal);
                                    var var133 = thisRef.m_localPoint.ojcVec2setojcVec2(thisRef.m_localPoint,thisRef.localPointA1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5171b70
                                    var var135 = var133.ojcVec2addLocalojcVec2(var133,thisRef.localPointA2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1dd2e868
                                    var var136 = var135.ojcVec2mulLocalFLOAT(var135,0.5); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@8fc1ce4
                                    ojcTransform.VOIDmulToOutUnsafeojcTransformojcVec2ojcVec2(thisRef.xfa,thisRef.m_localPoint,thisRef.pointA);
                                    var var140 = thisRef.localPointB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6c767c93
                                    var var141 = thisRef.m_proxyB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@518736f6
                                    var var143 = cache.indexB.data[0]; // type is INT value type is INT
                                    var var144 = var141.ojcVec2getVertexINT(var141,var143); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5b1c1506
                                    var var145 = var140.ojcVec2setojcVec2(var140,var144); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@336f29bd
                                    ojcTransform.VOIDmulToOutUnsafeojcTransformojcVec2ojcVec2(thisRef.xfb,thisRef.localPointB,thisRef.pointB);
                                    var var151 = thisRef.temp.ojcVec2setojcVec2(thisRef.temp,thisRef.pointB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6ca249a7
                                    var var153 = var151.ojcVec2subLocalojcVec2(var151,thisRef.pointA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@47ae243
                                    var var156 = ojcVec2.FLOATdotojcVec2ojcVec2(thisRef.temp,thisRef.normal); // type is FLOAT value type is FLOAT
                                    local_8_FLOAT = var156; // type is FLOAT value type is FLOAT
                                    var var158 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                                    if ((var158 >= 0.0)) {
                                        return local_8_FLOAT;
                                    }
                                    }
                                var var161 = thisRef.m_axis.ojcVec2negateLocal(thisRef.m_axis); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3ff573ef
                                local_8_FLOAT = (-local_8_FLOAT); // type is FLOAT value type is FLOAT
                                return local_8_FLOAT;
                            case 211 :
                            // NORMAL
                                $S_211 : {
                                // NORMAL
                                    var var15 = ojcType.FACE_B; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@751d976d
                                    thisRef.m_type = var15;
                                    var var16 = thisRef.localPointB1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@b0c1718
                                    var var17 = thisRef.m_proxyB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@58b784c0
                                    var var19 = cache.indexB.data[0]; // type is INT value type is INT
                                    var var20 = var17.ojcVec2getVertexINT(var17,var19); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4c49fe32
                                    var var21 = var16.ojcVec2setojcVec2(var16,var20); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@55f6ae29
                                    var var22 = thisRef.localPointB2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3e29c758
                                    var var23 = thisRef.m_proxyB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5adcd5d9
                                    var var25 = cache.indexB.data[1]; // type is INT value type is INT
                                    var var26 = var23.ojcVec2getVertexINT(var23,var25); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@596708de
                                    var var27 = var22.ojcVec2setojcVec2(var22,var26); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3900623d
                                    var var30 = thisRef.temp.ojcVec2setojcVec2(thisRef.temp,thisRef.localPointB2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@49636142
                                    var var32 = var30.ojcVec2subLocalojcVec2(var30,thisRef.localPointB1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@75ad17aa
                                    ojcVec2.VOIDcrossToOutUnsafeojcVec2FLOATojcVec2(thisRef.temp,1.0,thisRef.m_axis);
                                    var var36 = thisRef.m_axis.FLOATnormalize(thisRef.m_axis); // type is FLOAT value type is FLOAT
                                    ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(thisRef.xfb.q,thisRef.m_axis,thisRef.normal);
                                    var var43 = thisRef.m_localPoint.ojcVec2setojcVec2(thisRef.m_localPoint,thisRef.localPointB1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@14edc039
                                    var var45 = var43.ojcVec2addLocalojcVec2(var43,thisRef.localPointB2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2e465913
                                    var var46 = var45.ojcVec2mulLocalFLOAT(var45,0.5); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7cfd54e8
                                    ojcTransform.VOIDmulToOutUnsafeojcTransformojcVec2ojcVec2(thisRef.xfb,thisRef.m_localPoint,thisRef.pointB);
                                    var var50 = thisRef.localPointA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@61f00c9a
                                    var var52 = cache.indexA.data[0]; // type is INT value type is INT
                                    var var53 = proxyA.ojcVec2getVertexINT(proxyA,var52); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1b66e495
                                    var var54 = var50.ojcVec2setojcVec2(var50,var53); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@774a82b
                                    ojcTransform.VOIDmulToOutUnsafeojcTransformojcVec2ojcVec2(thisRef.xfa,thisRef.localPointA,thisRef.pointA);
                                    var var60 = thisRef.temp.ojcVec2setojcVec2(thisRef.temp,thisRef.pointA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@11b8f639
                                    var var62 = var60.ojcVec2subLocalojcVec2(var60,thisRef.pointB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@70cdbc48
                                    var var65 = ojcVec2.FLOATdotojcVec2ojcVec2(thisRef.temp,thisRef.normal); // type is FLOAT value type is FLOAT
                                    local_8_FLOAT = var65; // type is FLOAT value type is FLOAT
                                    var var68 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                                    if ((var68 >= 0.0)) {
                                        return local_8_FLOAT;
                                    }
                                    }
                                var var71 = thisRef.m_axis.ojcVec2negateLocal(thisRef.m_axis); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5ca3ac88
                                local_8_FLOAT = (-local_8_FLOAT); // type is FLOAT value type is FLOAT
                                return local_8_FLOAT;
                        }
                }
        }
    },

    FLOATfindMinSeparationA1INTFLOAT : function(thisRef,indexes,t) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            thisRef.m_sweepA.VOIDgetTransformojcTransformFLOAT(thisRef.m_sweepA,thisRef.xfa,t);
            thisRef.m_sweepB.VOIDgetTransformojcTransformFLOAT(thisRef.m_sweepB,thisRef.xfb,t);
            var var4 = ojcSeparationFunction$1.$SwitchMap$org$jbox2d$collision$Type; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@6ab93476
            var var6 = thisRef.m_type.INTordinal(thisRef.m_type); // type is INT value type is INT
            var var7 = var4.data[var6]; // type is INT value type is INT
            if (var7 < 1 || var7 > 3) {
             __label__ = 490;
            break $S_0;
            }
            switch(var7 - 1) {
             case 0:
                 __label__ = 60;
            break $S_0;
             case 1:
                 __label__ = 222;
            break $S_0;
             case 2:
                 __label__ = 356;
            break $S_0;
            }
            throw 'Illegal jump target!';
            }
        for(;;) switch (__label__) {
            case 490 :
            // NORMAL
                $S_490 : {
                // NORMAL
                    var var73 = ojcSeparationFunction.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                    if ((var73 != 0)) {
                        __label__ = 504;
                        break $S_490;
                    }
                    __label__ = 496;
                    }
                for(;;) switch (__label__) {
                    case 504 :
                    // NORMAL
                        indexes.data[0] = -1;
                        indexes.data[1] = -1;
                        return 0.0;
                    case 496 :
                    // NORMAL
                        var var114 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                        jlAssertionError.VOIDinit(var114);
                        throw var114;
                }
            case 356 :
            // NORMAL
                ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(thisRef.xfb.q,thisRef.m_axis,thisRef.normal);
                ojcTransform.VOIDmulToOutUnsafeojcTransformojcVec2ojcVec2(thisRef.xfb,thisRef.m_localPoint,thisRef.pointB);
                var var49 = thisRef.xfa.q; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1cf12547
                var var51 = thisRef.normal.ojcVec2negateLocal(thisRef.normal); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7756d565
                ojcRot.VOIDmulTransUnsafeojcRotojcVec2ojcVec2(var49,var51,thisRef.axisA);
                var var54 = thisRef.normal.ojcVec2negateLocal(thisRef.normal); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@65a02d02
                indexes.data[1] = -1;
                var var57 = thisRef.m_proxyA.INTgetSupportojcVec2(thisRef.m_proxyA,thisRef.axisA); // type is INT value type is INT
                indexes.data[0] = var57;
                var var58 = thisRef.localPointA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4619bf44
                var var59 = thisRef.m_proxyA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@53d761dd
                var var60 = indexes.data[0]; // type is INT value type is INT
                var var61 = var59.ojcVec2getVertexINT(var59,var60); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@126b7b3f
                var var62 = var58.ojcVec2setojcVec2(var58,var61); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@76c79c4d
                ojcTransform.VOIDmulToOutUnsafeojcTransformojcVec2ojcVec2(thisRef.xfa,thisRef.localPointA,thisRef.pointA);
                var var68 = thisRef.pointA.ojcVec2subLocalojcVec2(thisRef.pointA,thisRef.pointB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7d2ffe4e
                var var70 = ojcVec2.FLOATdotojcVec2ojcVec2(var68,thisRef.normal); // type is FLOAT value type is FLOAT
                var local_3_FLOAT = var70; // type is FLOAT value type is FLOAT
                return local_3_FLOAT;
            case 60 :
            // NORMAL
                ojcRot.VOIDmulTransUnsafeojcRotojcVec2ojcVec2(thisRef.xfa.q,thisRef.m_axis,thisRef.axisA);
                var var79 = thisRef.xfb.q; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@159eb1bf
                var var81 = thisRef.m_axis.ojcVec2negateLocal(thisRef.m_axis); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5ce592b0
                ojcRot.VOIDmulTransUnsafeojcRotojcVec2ojcVec2(var79,var81,thisRef.axisB);
                var var84 = thisRef.m_axis.ojcVec2negateLocal(thisRef.m_axis); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@160a4895
                var var87 = thisRef.m_proxyA.INTgetSupportojcVec2(thisRef.m_proxyA,thisRef.axisA); // type is INT value type is INT
                indexes.data[0] = var87;
                var var90 = thisRef.m_proxyB.INTgetSupportojcVec2(thisRef.m_proxyB,thisRef.axisB); // type is INT value type is INT
                indexes.data[1] = var90;
                var var91 = thisRef.localPointA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@14550994
                var var92 = thisRef.m_proxyA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@742651e8
                var var93 = indexes.data[0]; // type is INT value type is INT
                var var94 = var92.ojcVec2getVertexINT(var92,var93); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4263dce
                var var95 = var91.ojcVec2setojcVec2(var91,var94); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@40ac933f
                var var96 = thisRef.localPointB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7c093b17
                var var97 = thisRef.m_proxyB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3ae68c6f
                var var98 = indexes.data[1]; // type is INT value type is INT
                var var99 = var97.ojcVec2getVertexINT(var97,var98); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@f1b0eb0
                var var100 = var96.ojcVec2setojcVec2(var96,var99); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2b8a5107
                ojcTransform.VOIDmulToOutUnsafeojcTransformojcVec2ojcVec2(thisRef.xfa,thisRef.localPointA,thisRef.pointA);
                ojcTransform.VOIDmulToOutUnsafeojcTransformojcVec2ojcVec2(thisRef.xfb,thisRef.localPointB,thisRef.pointB);
                var var109 = thisRef.pointB.ojcVec2subLocalojcVec2(thisRef.pointB,thisRef.pointA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1e6e16e2
                var var111 = ojcVec2.FLOATdotojcVec2ojcVec2(var109,thisRef.m_axis); // type is FLOAT value type is FLOAT
                var local_3_FLOAT = var111; // type is FLOAT value type is FLOAT
                return local_3_FLOAT;
            case 222 :
            // NORMAL
                ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(thisRef.xfa.q,thisRef.m_axis,thisRef.normal);
                ojcTransform.VOIDmulToOutUnsafeojcTransformojcVec2ojcVec2(thisRef.xfa,thisRef.m_localPoint,thisRef.pointA);
                var var16 = thisRef.xfb.q; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@10e574b4
                var var18 = thisRef.normal.ojcVec2negateLocal(thisRef.normal); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@475c8696
                ojcRot.VOIDmulTransUnsafeojcRotojcVec2ojcVec2(var16,var18,thisRef.axisB);
                var var21 = thisRef.normal.ojcVec2negateLocal(thisRef.normal); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3ea7e513
                indexes.data[0] = -1;
                var var24 = thisRef.m_proxyB.INTgetSupportojcVec2(thisRef.m_proxyB,thisRef.axisB); // type is INT value type is INT
                indexes.data[1] = var24;
                var var25 = thisRef.localPointB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@50902d23
                var var26 = thisRef.m_proxyB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6b6bb351
                var var27 = indexes.data[1]; // type is INT value type is INT
                var var28 = var26.ojcVec2getVertexINT(var26,var27); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@48a0f09c
                var var29 = var25.ojcVec2setojcVec2(var25,var28); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@49ae0be6
                ojcTransform.VOIDmulToOutUnsafeojcTransformojcVec2ojcVec2(thisRef.xfb,thisRef.localPointB,thisRef.pointB);
                var var35 = thisRef.pointB.ojcVec2subLocalojcVec2(thisRef.pointB,thisRef.pointA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1886dec5
                var var37 = ojcVec2.FLOATdotojcVec2ojcVec2(var35,thisRef.normal); // type is FLOAT value type is FLOAT
                var local_3_FLOAT = var37; // type is FLOAT value type is FLOAT
                return local_3_FLOAT;
        }
    },

    FLOATevaluateINTINTFLOAT : function(thisRef,indexA,indexB,t) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            thisRef.m_sweepA.VOIDgetTransformojcTransformFLOAT(thisRef.m_sweepA,thisRef.xfa,t);
            thisRef.m_sweepB.VOIDgetTransformojcTransformFLOAT(thisRef.m_sweepB,thisRef.xfb,t);
            var var4 = ojcSeparationFunction$1.$SwitchMap$org$jbox2d$collision$Type; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@2239749f
            var var6 = thisRef.m_type.INTordinal(thisRef.m_type); // type is INT value type is INT
            var var7 = var4.data[var6]; // type is INT value type is INT
            if (var7 < 1 || var7 > 3) {
             __label__ = 424;
            break $S_0;
            }
            switch(var7 - 1) {
             case 0:
                 __label__ = 60;
            break $S_0;
             case 1:
                 __label__ = 192;
            break $S_0;
             case 2:
                 __label__ = 308;
            break $S_0;
            }
            throw 'Illegal jump target!';
            }
        for(;;) switch (__label__) {
            case 60 :
            // NORMAL
                ojcRot.VOIDmulTransUnsafeojcRotojcVec2ojcVec2(thisRef.xfa.q,thisRef.m_axis,thisRef.axisA);
                var var72 = thisRef.xfb.q; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1372b825
                var var74 = thisRef.m_axis.ojcVec2negateLocal(thisRef.m_axis); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5a4814b
                ojcRot.VOIDmulTransUnsafeojcRotojcVec2ojcVec2(var72,var74,thisRef.axisB);
                var var77 = thisRef.m_axis.ojcVec2negateLocal(thisRef.m_axis); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@15be982e
                var var78 = thisRef.localPointA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7cca8b8a
                var var80 = thisRef.m_proxyA.ojcVec2getVertexINT(thisRef.m_proxyA,indexA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7a7fb7a6
                var var81 = var78.ojcVec2setojcVec2(var78,var80); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5b70df7b
                var var82 = thisRef.localPointB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3aee43d3
                var var84 = thisRef.m_proxyB.ojcVec2getVertexINT(thisRef.m_proxyB,indexB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@12d019df
                var var85 = var82.ojcVec2setojcVec2(var82,var84); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@15155ea4
                ojcTransform.VOIDmulToOutUnsafeojcTransformojcVec2ojcVec2(thisRef.xfa,thisRef.localPointA,thisRef.pointA);
                ojcTransform.VOIDmulToOutUnsafeojcTransformojcVec2ojcVec2(thisRef.xfb,thisRef.localPointB,thisRef.pointB);
                var var94 = thisRef.pointB.ojcVec2subLocalojcVec2(thisRef.pointB,thisRef.pointA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4843d07a
                var var96 = ojcVec2.FLOATdotojcVec2ojcVec2(var94,thisRef.m_axis); // type is FLOAT value type is FLOAT
                var local_4_FLOAT = var96; // type is FLOAT value type is FLOAT
                return local_4_FLOAT;
            case 308 :
            // NORMAL
                ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(thisRef.xfb.q,thisRef.m_axis,thisRef.normal);
                ojcTransform.VOIDmulToOutUnsafeojcTransformojcVec2ojcVec2(thisRef.xfb,thisRef.m_localPoint,thisRef.pointB);
                var var45 = thisRef.xfa.q; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7be27a
                var var47 = thisRef.normal.ojcVec2negateLocal(thisRef.normal); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@12f71d4b
                ojcRot.VOIDmulTransUnsafeojcRotojcVec2ojcVec2(var45,var47,thisRef.axisA);
                var var50 = thisRef.normal.ojcVec2negateLocal(thisRef.normal); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2da891cf
                var var51 = thisRef.localPointA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7bbe5400
                var var53 = thisRef.m_proxyA.ojcVec2getVertexINT(thisRef.m_proxyA,indexA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2409113f
                var var54 = var51.ojcVec2setojcVec2(var51,var53); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@e3e4db0
                ojcTransform.VOIDmulToOutUnsafeojcTransformojcVec2ojcVec2(thisRef.xfa,thisRef.localPointA,thisRef.pointA);
                var var60 = thisRef.pointA.ojcVec2subLocalojcVec2(thisRef.pointA,thisRef.pointB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@67718351
                var var62 = ojcVec2.FLOATdotojcVec2ojcVec2(var60,thisRef.normal); // type is FLOAT value type is FLOAT
                var local_4_FLOAT = var62; // type is FLOAT value type is FLOAT
                return local_4_FLOAT;
            case 424 :
            // NORMAL
                $S_424 : {
                // NORMAL
                    var var65 = ojcSeparationFunction.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                    if ((var65 != 0)) {
                        return 0.0;
                    }
                    }
                var var66 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var66);
                throw var66;
            case 192 :
            // NORMAL
                ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(thisRef.xfa.q,thisRef.m_axis,thisRef.normal);
                ojcTransform.VOIDmulToOutUnsafeojcTransformojcVec2ojcVec2(thisRef.xfa,thisRef.m_localPoint,thisRef.pointA);
                var var16 = thisRef.xfb.q; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6e66c5eb
                var var18 = thisRef.normal.ojcVec2negateLocal(thisRef.normal); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@28aa1f1
                ojcRot.VOIDmulTransUnsafeojcRotojcVec2ojcVec2(var16,var18,thisRef.axisB);
                var var21 = thisRef.normal.ojcVec2negateLocal(thisRef.normal); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7e253fdd
                var var22 = thisRef.localPointB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@15a54043
                var var24 = thisRef.m_proxyB.ojcVec2getVertexINT(thisRef.m_proxyB,indexB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4db49681
                var var25 = var22.ojcVec2setojcVec2(var22,var24); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1a6633ef
                ojcTransform.VOIDmulToOutUnsafeojcTransformojcVec2ojcVec2(thisRef.xfb,thisRef.localPointB,thisRef.pointB);
                var var31 = thisRef.pointB.ojcVec2subLocalojcVec2(thisRef.pointB,thisRef.pointA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4d6a3ca9
                var var33 = ojcVec2.FLOATdotojcVec2ojcVec2(var31,thisRef.normal); // type is FLOAT value type is FLOAT
                var local_4_FLOAT = var33; // type is FLOAT value type is FLOAT
                return local_4_FLOAT;
        }
    },

    classInitCheck : function() {
        if (!ojcSeparationFunction.__initialized) {
            ojcSeparationFunction.__initialized = true;
            var thePrototype = ojcSeparationFunction.Create.prototype;
            thePrototype.instanceOf = ojcSeparationFunction.instanceOf;
            thePrototype.ClassgetClass = ojcSeparationFunction.ClassgetClass;
            thePrototype.FLOATevaluateINTINTFLOAT = ojcSeparationFunction.FLOATevaluateINTINTFLOAT;
            thePrototype.FLOATfindMinSeparationA1INTFLOAT = ojcSeparationFunction.FLOATfindMinSeparationA1INTFLOAT;
            thePrototype.FLOATinitializeojcDistance$SimplexCacheojcDistance$DistanceProxyojcSweepojcDistance$DistanceProxyojcSweepFLOAT = ojcSeparationFunction.FLOATinitializeojcDistance$SimplexCacheojcDistance$DistanceProxyojcSweepojcDistance$DistanceProxyojcSweepFLOAT;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            ojcSeparationFunction.VOIDclinit();
        }
    },

};

var ojcSweep = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 80,
    __implementedTypes : [80,2,1],
    $assertionsDisabled : false, // declared in org.jbox2d.common.Sweep

    Create : function() {
        this.localCenter = null; // declared in org.jbox2d.common.Sweep
        this.c0 = null; // declared in org.jbox2d.common.Sweep
        this.c = null; // declared in org.jbox2d.common.Sweep
        this.a0 = 0; // declared in org.jbox2d.common.Sweep
        this.a = 0; // declared in org.jbox2d.common.Sweep
        this.alpha0 = 0; // declared in org.jbox2d.common.Sweep
    },

    instanceOf : function(aType) {
        return ojcSweep.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcSweep;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcSweep.BOOLEANdesiredAssertionStatus(ojcSweep); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_9_13 : for(;;) switch (__label__) {
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_9_13;
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_9_13;
        }
        ojcSweep.$assertionsDisabled = var1;
        return;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var0);
        thisRef.localCenter = var0;
        var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var1);
        thisRef.c0 = var1;
        var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var2);
        thisRef.c = var2;
        return;
    },

    VOIDadvanceFLOAT : function(thisRef,alpha) {
        var __label__ = null;
        var var0 = thisRef.c0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@47c12efe
        var var8 = (((1.0 - alpha) * thisRef.c0.x) + (alpha * thisRef.c.x)); // type is FLOAT value type is FLOAT
        var0.x = var8;
        var var9 = thisRef.c0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6e55dcf3
        var var17 = (((1.0 - alpha) * thisRef.c0.y) + (alpha * thisRef.c.y)); // type is FLOAT value type is FLOAT
        var9.y = var17;
        var var23 = (((1.0 - alpha) * thisRef.a0) + (alpha * thisRef.a)); // type is FLOAT value type is FLOAT
        thisRef.a0 = var23;
        return;
    },

    ojcSweepsetojcSweep : function(thisRef,argCloneFrom) {
        var __label__ = null;
        var var2 = thisRef.localCenter.ojcVec2setojcVec2(thisRef.localCenter,argCloneFrom.localCenter); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2bf67883
        var var5 = thisRef.c0.ojcVec2setojcVec2(thisRef.c0,argCloneFrom.c0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6e44be64
        var var8 = thisRef.c.ojcVec2setojcVec2(thisRef.c,argCloneFrom.c); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@c142cb4
        var var9 = argCloneFrom.a0; // type is FLOAT value type is FLOAT
        thisRef.a0 = var9;
        var var10 = argCloneFrom.a; // type is FLOAT value type is FLOAT
        thisRef.a = var10;
        return thisRef;
    },

    VOIDnormalize : function(thisRef) {
        var __label__ = null;
        var var2 = ojcMathUtils.INTfloorFLOAT((thisRef.a0 / 6.2831855)); // type is INT value type is INT
        var local_1_FLOAT = (6.2831855 * var2); // type is FLOAT value type is FLOAT
        var var9 = (thisRef.a0 - local_1_FLOAT); // type is FLOAT value type is FLOAT
        thisRef.a0 = var9;
        var var12 = (thisRef.a - local_1_FLOAT); // type is FLOAT value type is FLOAT
        thisRef.a = var12;
        return;
    },

    VOIDgetTransformojcTransformFLOAT : function(thisRef,xf,beta) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcSweep.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 18;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_6_18 : for(;;) switch (__label__) {
            case 18 :
            // NORMAL
                var var2 = xf.p; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6be7ebd6
                var var10 = (((1.0 - beta) * thisRef.c0.x) + (beta * thisRef.c.x)); // type is FLOAT value type is FLOAT
                var2.x = var10;
                var var11 = xf.p; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@354c9c21
                var var19 = (((1.0 - beta) * thisRef.c0.y) + (beta * thisRef.c.y)); // type is FLOAT value type is FLOAT
                var11.y = var19;
                var var27 = xf.q.ojcRotsetFLOAT(xf.q,(((1.0 - beta) * thisRef.a0) + (beta * thisRef.a))); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4772def8
                var local_3_REFERENCE = xf.q; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5f31da81
                var var30 = xf.p; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@bdc33ea
                var var43 = (var30.x - ((local_3_REFERENCE.c * thisRef.localCenter.x) - (local_3_REFERENCE.s * thisRef.localCenter.y))); // type is FLOAT value type is FLOAT
                var30.x = var43;
                var var44 = xf.p; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5a200b24
                var var57 = (var44.y - ((local_3_REFERENCE.s * thisRef.localCenter.x) + (local_3_REFERENCE.c * thisRef.localCenter.y))); // type is FLOAT value type is FLOAT
                var44.y = var57;
                return;
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    if (xf != null ) {
                        __label__ = 18;
                        continue $M_6_18;
                    }
                    }
                var var1 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var1);
                throw var1;
        }
    },

    jlStringtoString : function(thisRef) {
        var __label__ = null;
        var var0 = new jlStringBuilder.Create(); // type is REFERENCE value type is REFERENCE
        jlStringBuilder.VOIDinit(var0);
        var var1 = var0.jlStringBuilderappendjlString(var0,bytecoder.stringpool[27]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@447a8d34
        var var3 = var1.jlStringBuilderappendjlObject(var1,thisRef.localCenter); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@14828b7a
        var var4 = var3.jlStringBuilderappendjlString(var3,bytecoder.stringpool[23]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@ab956cf
        var var5 = var4.jlStringtoString(var4); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@78e9a91c
        var local_1_REFERENCE = var5; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@68ea9818
        var var7 = new jlStringBuilder.Create(); // type is REFERENCE value type is REFERENCE
        jlStringBuilder.VOIDinit(var7);
        var var9 = var7.jlStringBuilderappendjlString(var7,local_1_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@68b31724
        var var10 = var9.jlStringBuilderappendjlString(var9,bytecoder.stringpool[28]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@287c2bd3
        var var12 = var10.jlStringBuilderappendjlObject(var10,thisRef.c0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1de8c689
        var var13 = var12.jlStringBuilderappendjlString(var12,bytecoder.stringpool[29]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@21feb774
        var var15 = var13.jlStringBuilderappendjlObject(var13,thisRef.c); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@51848e58
        var var16 = var15.jlStringBuilderappendjlString(var15,bytecoder.stringpool[23]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@186f1508
        var var17 = var16.jlStringtoString(var16); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@43e85402
        var local_1_REFERENCE = var17; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@17791e1c
        var var18 = new jlStringBuilder.Create(); // type is REFERENCE value type is REFERENCE
        jlStringBuilder.VOIDinit(var18);
        var var20 = var18.jlStringBuilderappendjlString(var18,local_1_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@62faa4e5
        var var21 = var20.jlStringBuilderappendjlString(var20,bytecoder.stringpool[30]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2dd3ae7
        var var23 = var21.jlStringBuilderappendFLOAT(var21,thisRef.a0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@31426fa
        var var24 = var23.jlStringBuilderappendjlString(var23,bytecoder.stringpool[31]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5c42517a
        var var26 = var24.jlStringBuilderappendFLOAT(var24,thisRef.a); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6b281b9b
        var var27 = var26.jlStringBuilderappendjlString(var26,bytecoder.stringpool[23]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@491e1b
        var var28 = var27.jlStringtoString(var27); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@22c8cb1e
        var local_1_REFERENCE = var28; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6ccf97bc
        return local_1_REFERENCE;
    },

    classInitCheck : function() {
        if (!ojcSweep.__initialized) {
            ojcSweep.__initialized = true;
            var thePrototype = ojcSweep.Create.prototype;
            thePrototype.instanceOf = ojcSweep.instanceOf;
            thePrototype.ClassgetClass = ojcSweep.ClassgetClass;
            thePrototype.jlStringtoString = ojcSweep.jlStringtoString;
            thePrototype.VOIDgetTransformojcTransformFLOAT = ojcSweep.VOIDgetTransformojcTransformFLOAT;
            thePrototype.VOIDnormalize = ojcSweep.VOIDnormalize;
            thePrototype.ojcSweepsetojcSweep = ojcSweep.ojcSweepsetojcSweep;
            thePrototype.VOIDadvanceFLOAT = ojcSweep.VOIDadvanceFLOAT;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            jiSerializable.classInitCheck();
            ojcSweep.VOIDclinit();
        }
    },

};

var ojcbDynamicTree = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 81,
    __implementedTypes : [82,81,1],
    $assertionsDisabled : false, // declared in org.jbox2d.collision.broadphase.DynamicTree

    Create : function() {
        this.drawVecs = null; // declared in org.jbox2d.collision.broadphase.DynamicTree
        this.nodeStack = null; // declared in org.jbox2d.collision.broadphase.DynamicTree
        this.r = null; // declared in org.jbox2d.collision.broadphase.DynamicTree
        this.aabb = null; // declared in org.jbox2d.collision.broadphase.DynamicTree
        this.subInput = null; // declared in org.jbox2d.collision.broadphase.DynamicTree
        this.combinedAABB = null; // declared in org.jbox2d.collision.broadphase.DynamicTree
        this.color = null; // declared in org.jbox2d.collision.broadphase.DynamicTree
        this.textVec = null; // declared in org.jbox2d.collision.broadphase.DynamicTree
        this.m_root = null; // declared in org.jbox2d.collision.broadphase.DynamicTree
        this.m_nodeCount = 0; // declared in org.jbox2d.collision.broadphase.DynamicTree
        this.m_nodeCapacity = 0; // declared in org.jbox2d.collision.broadphase.DynamicTree
        this.m_nodes = null; // declared in org.jbox2d.collision.broadphase.DynamicTree
        this.m_freeList = 0; // declared in org.jbox2d.collision.broadphase.DynamicTree
        this.m_insertionCount = 0; // declared in org.jbox2d.collision.broadphase.DynamicTree
    },

    instanceOf : function(aType) {
        return ojcbDynamicTree.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcbDynamicTree;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcbDynamicTree.BOOLEANdesiredAssertionStatus(ojcbDynamicTree); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_13_9 : for(;;) switch (__label__) {
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_13_9;
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_13_9;
        }
        ojcbDynamicTree.$assertionsDisabled = var1;
        return;
    },

    VOIDinit : function(thisRef) {
        var var27 = null; // type is REFERENCE # of inits = 1
        var local_1_INT = null; // type is INT # of inits = 6
        var var35 = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = bytecoder.newArray(4,null); // type is REFERENCE value type is REFERENCE
            thisRef.drawVecs = var0;
            var var1 = new ojcbDynamicTree$TreeNodeStack.Create(); // type is REFERENCE value type is REFERENCE
            ojcbDynamicTree$TreeNodeStack.VOIDinitojcbDynamicTreeINT(var1,thisRef,10);
            thisRef.nodeStack = var1;
            var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var2);
            thisRef.r = var2;
            var var3 = new ojcAABB.Create(); // type is REFERENCE value type is REFERENCE
            ojcAABB.VOIDinit(var3);
            thisRef.aabb = var3;
            var var4 = new ojcRayCastInput.Create(); // type is REFERENCE value type is REFERENCE
            ojcRayCastInput.VOIDinit(var4);
            thisRef.subInput = var4;
            var var5 = new ojcAABB.Create(); // type is REFERENCE value type is REFERENCE
            ojcAABB.VOIDinit(var5);
            thisRef.combinedAABB = var5;
            var var6 = new ojcColor3f.Create(); // type is REFERENCE value type is REFERENCE
            ojcColor3f.VOIDinit(var6);
            thisRef.color = var6;
            var var7 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var7);
            thisRef.textVec = var7;
            thisRef.m_root = null;
            thisRef.m_nodeCount = 0;
            thisRef.m_nodeCapacity = 16;
            var var8 = bytecoder.newArray(16,null); // type is REFERENCE value type is REFERENCE
            thisRef.m_nodes = var8;
            local_1_INT = (thisRef.m_nodeCapacity - 1); // type is INT value type is INT
            __label__ = 124;
            }
        $L_124 : for (;;) {
            $S_124 : {
            // NORMAL
                var var13 = local_1_INT; // type is INT value type is INT
                if ((var13 < 0)) {
                    __label__ = 189;
                    break $S_124;
                }
                __label__ = 128;
                }
            for(;;) switch (__label__) {
                case 189 :
                // NORMAL
                    $S_189 : {
                    // NORMAL
                        thisRef.m_freeList = 0;
                        thisRef.m_insertionCount = 0;
                        local_1_INT = 0; // type is INT value type is INT
                        __label__ = 201;
                        }
                    $L_201 : for (;;) {
                        $S_201 : {
                        // NORMAL
                            var var15 = local_1_INT; // type is INT value type is INT
                            var var17 = thisRef.drawVecs.data.length; // type is INT value type is INT
                            if ((var15 >= var17)) {
                                return;
                            }
                            }
                        var var18 = thisRef.drawVecs; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@2c9512d8
                        var var19 = local_1_INT; // type is INT value type is INT
                        var var20 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
                        ojcVec2.VOIDinit(var20);
                        var18.data[var19] = var20;
                        local_1_INT = (local_1_INT + 1); // type is INT value type is INT
                        __label__ = 201;
                        continue $L_201;
                    }
                case 128 :
                // NORMAL
                    $S_128 : {
                    // NORMAL
                        var var21 = thisRef.m_nodes; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3abe650d
                        var var22 = local_1_INT; // type is INT value type is INT
                        var var23 = new ojcbDynamicTreeNode.Create(); // type is REFERENCE value type is REFERENCE
                        ojcbDynamicTreeNode.VOIDinitINT(var23,local_1_INT);
                        var21.data[var22] = var23;
                        var27 = thisRef.m_nodes.data[local_1_INT]; // type is REFERENCE value type is REFERENCE
                        var var28 = local_1_INT; // type is INT value type is INT
                        var var30 = (thisRef.m_nodeCapacity - 1); // type is INT value type is INT
                        if ((var28 != var30)) {
                            __label__ = 162;
                            break $S_128;
                        }
                        __label__ = 158;
                        }
                    $M_162_158 : for(;;) switch (__label__) {
                        case 162 :
                        // NORMAL
                            var var34 = thisRef.m_nodes.data[(local_1_INT + 1)]; // type is REFERENCE value type is REFERENCE
                            var35 = var34; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3dfbb918
                            break $M_162_158;
                        case 158 :
                        // NORMAL
                            var35 = null; // type is REFERENCE value type is REFERENCE
                            break $M_162_158;
                    }
                    var27.parent = var35;
                    var var38 = thisRef.m_nodes.data[local_1_INT]; // type is REFERENCE value type is REFERENCE
                    var38.height = -1;
                    local_1_INT = (local_1_INT + -1); // type is INT value type is INT
                    __label__ = 124;
                    continue $L_124;
            }
        }
    },

    INTcreateProxyojcAABBjlObject : function(thisRef,aabb,userData) {
        var __label__ = null;
        var var0 = thisRef.ojcbDynamicTreeNodeallocateNode(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@75911e05
        var local_3_REFERENCE = var0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4919437d
        var local_4_INT = local_3_REFERENCE.id; // type is INT value type is INT
        var local_5_REFERENCE = local_3_REFERENCE.aabb; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@379fd510
        var var10 = local_5_REFERENCE.lowerBound; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1714fe90
        var var13 = (aabb.lowerBound.x - 0.1); // type is FLOAT value type is FLOAT
        var10.x = var13;
        var var15 = local_5_REFERENCE.lowerBound; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6a88ab41
        var var18 = (aabb.lowerBound.y - 0.1); // type is FLOAT value type is FLOAT
        var15.y = var18;
        var var20 = local_5_REFERENCE.upperBound; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@69091fc6
        var var23 = (aabb.upperBound.x + 0.1); // type is FLOAT value type is FLOAT
        var20.x = var23;
        var var25 = local_5_REFERENCE.upperBound; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@20f770a2
        var var28 = (aabb.upperBound.y + 0.1); // type is FLOAT value type is FLOAT
        var25.y = var28;
        var var29 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4919437d
        var29.userData = userData;
        thisRef.VOIDinsertLeafINT(thisRef,local_4_INT);
        return local_4_INT;
    },

    ojcbDynamicTreeNodeallocateNode : function(thisRef) {
        var var27 = null; // type is REFERENCE # of inits = 1
        var local_2_INT = null; // type is INT # of inits = 3
        var var35 = null; // type is REFERENCE # of inits = 2
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var var52 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.m_freeList; // type is INT value type is INT
            if ((var0 != -1)) {
                __label__ = 155;
                break $S_0;
            }
            __label__ = 8;
            }
        $M_8_155 : for(;;) switch (__label__) {
            case 155 :
            // NORMAL
                $S_155 : {
                // NORMAL
                    var local_1_INT = thisRef.m_freeList; // type is INT value type is INT
                    var var45 = thisRef.m_nodes.data[local_1_INT]; // type is REFERENCE value type is REFERENCE
                    local_2_REFERENCE = var45; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@5981c4a9
                    var var48 = local_2_REFERENCE.parent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@324fe382
                    if (var48 == null ) {
                        __label__ = 185;
                        break $S_155;
                    }
                    __label__ = 175;
                    }
                $M_185_175 : for(;;) switch (__label__) {
                    case 185 :
                    // NORMAL
                        var52 = -1; // type is INT value type is INT
                        break $M_185_175;
                    case 175 :
                    // NORMAL
                        var52 = local_2_REFERENCE.parent.id; // type is INT value type is INT
                        break $M_185_175;
                }
                thisRef.m_freeList = var52;
                var var53 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@5981c4a9
                var53.parent = null;
                var var54 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@5981c4a9
                var54.child1 = null;
                var var55 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@5981c4a9
                var55.child2 = null;
                var var56 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@5981c4a9
                var56.height = 0;
                var var57 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@5981c4a9
                var57.userData = null;
                var var59 = (thisRef.m_nodeCount + 1); // type is INT value type is INT
                thisRef.m_nodeCount = var59;
                return local_2_REFERENCE;
            case 8 :
            // NORMAL
                $S_8 : {
                // NORMAL
                    var var1 = ojcbDynamicTree.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                    if ((var1 != 0)) {
                        __label__ = 33;
                        break $S_8;
                    }
                    __label__ = 14;
                    }
                $M_33_14 : for(;;) switch (__label__) {
                    case 33 :
                    // NORMAL
                        $S_33 : {
                        // NORMAL
                            var local_1_REFERENCE = thisRef.m_nodes; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@15244790
                            var var8 = (thisRef.m_nodeCapacity * 2); // type is INT value type is INT
                            thisRef.m_nodeCapacity = var8;
                            var var10 = bytecoder.newArray(thisRef.m_nodeCapacity,null); // type is REFERENCE value type is REFERENCE
                            thisRef.m_nodes = var10;
                            jlSystem.VOIDarraycopyjlObjectINTjlObjectINTINT(local_1_REFERENCE,0,thisRef.m_nodes,0,local_1_REFERENCE.data.length);
                            local_2_INT = (thisRef.m_nodeCapacity - 1); // type is INT value type is INT
                            __label__ = 78;
                            }
                        $L_78 : for (;;) {
                            $S_78 : {
                            // NORMAL
                                var var19 = local_2_INT; // type is INT value type is INT
                                var var20 = thisRef.m_nodeCount; // type is INT value type is INT
                                if ((var19 < var20)) {
                                    __label__ = 147;
                                    break $S_78;
                                }
                                __label__ = 86;
                                }
                            for(;;) switch (__label__) {
                                case 147 :
                                // NORMAL
                                    var var39 = thisRef.m_nodeCount; // type is INT value type is INT
                                    thisRef.m_freeList = var39;
                                    __label__ = 155;
                                    continue $M_8_155;
                                case 86 :
                                // NORMAL
                                    $S_86 : {
                                    // NORMAL
                                        var var21 = thisRef.m_nodes; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1ad911f8
                                        var var22 = local_2_INT; // type is INT value type is INT
                                        var var23 = new ojcbDynamicTreeNode.Create(); // type is REFERENCE value type is REFERENCE
                                        ojcbDynamicTreeNode.VOIDinitINT(var23,local_2_INT);
                                        var21.data[var22] = var23;
                                        var27 = thisRef.m_nodes.data[local_2_INT]; // type is REFERENCE value type is REFERENCE
                                        var var28 = local_2_INT; // type is INT value type is INT
                                        var var30 = (thisRef.m_nodeCapacity - 1); // type is INT value type is INT
                                        if ((var28 != var30)) {
                                            __label__ = 120;
                                            break $S_86;
                                        }
                                        __label__ = 116;
                                        }
                                    $M_120_116 : for(;;) switch (__label__) {
                                        case 116 :
                                        // NORMAL
                                            var35 = null; // type is REFERENCE value type is REFERENCE
                                            break $M_120_116;
                                        case 120 :
                                        // NORMAL
                                            var var34 = thisRef.m_nodes.data[(local_2_INT + 1)]; // type is REFERENCE value type is REFERENCE
                                            var35 = var34; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@8c3f3c
                                            break $M_120_116;
                                    }
                                    var27.parent = var35;
                                    var var38 = thisRef.m_nodes.data[local_2_INT]; // type is REFERENCE value type is REFERENCE
                                    var38.height = -1;
                                    local_2_INT = (local_2_INT + -1); // type is INT value type is INT
                                    __label__ = 78;
                                    continue $L_78;
                            }
                        }
                    case 14 :
                    // NORMAL
                        $S_14 : {
                        // NORMAL
                            var var2 = thisRef.m_nodeCount; // type is INT value type is INT
                            var var3 = thisRef.m_nodeCapacity; // type is INT value type is INT
                            if ((var2 == var3)) {
                                __label__ = 33;
                                continue $M_33_14;
                            }
                            }
                        var var4 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                        jlAssertionError.VOIDinit(var4);
                        throw var4;
                }
        }
    },

    VOIDinsertLeafINT : function(thisRef,leaf_index) {
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 8
        var local_12_FLOAT = null; // type is FLOAT # of inits = 2
        var local_11_FLOAT = null; // type is FLOAT # of inits = 1
        var local_8_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_13_FLOAT = null; // type is FLOAT # of inits = 3
        var local_10_FLOAT = null; // type is FLOAT # of inits = 1
        var local_9_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_7_REFERENCE = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var1 = (thisRef.m_insertionCount + 1); // type is INT value type is INT
            thisRef.m_insertionCount = var1;
            var var3 = thisRef.m_nodes.data[leaf_index]; // type is REFERENCE value type is REFERENCE
            local_2_REFERENCE = var3; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@43ff34ce
            var var5 = thisRef.m_root; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@10af83ad
            if (var5 != null ) {
                __label__ = 38;
                break $S_0;
            }
            __label__ = 24;
            }
        for(;;) switch (__label__) {
            case 38 :
            // NORMAL
                $S_38 : {
                // NORMAL
                    local_3_REFERENCE = local_2_REFERENCE.aabb; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@13493ba0
                    local_4_REFERENCE = thisRef.m_root; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@714258d8
                    __label__ = 49;
                    }
                $L_49 : for (;;) {
                    $S_49 : {
                    // NORMAL
                        var var12 = local_4_REFERENCE.child1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@21037923
                        if (var12 == null ) {
                            __label__ = 319;
                            break $S_49;
                        }
                        __label__ = 57;
                        }
                    $M_57_319 : for(;;) switch (__label__) {
                        case 57 :
                        // NORMAL
                            $S_57 : {
                            // NORMAL
                                local_5_REFERENCE = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@250cd754
                                local_6_REFERENCE = local_5_REFERENCE.child1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4ddd2445
                                local_7_REFERENCE = local_5_REFERENCE.child2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@17938265
                                var var23 = local_5_REFERENCE.aabb.FLOATgetPerimeter(local_5_REFERENCE.aabb); // type is FLOAT value type is FLOAT
                                var local_8_FLOAT = var23; // type is FLOAT value type is FLOAT
                                thisRef.combinedAABB.VOIDcombineojcAABBojcAABB(thisRef.combinedAABB,local_5_REFERENCE.aabb,local_3_REFERENCE);
                                var var31 = thisRef.combinedAABB.FLOATgetPerimeter(thisRef.combinedAABB); // type is FLOAT value type is FLOAT
                                var local_9_FLOAT = var31; // type is FLOAT value type is FLOAT
                                local_10_FLOAT = (2.0 * local_9_FLOAT); // type is FLOAT value type is FLOAT
                                local_11_FLOAT = (2.0 * (local_9_FLOAT - local_8_FLOAT)); // type is FLOAT value type is FLOAT
                                var var45 = local_6_REFERENCE.BOOLEANisLeaf(local_6_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                if ((var45 == 0)) {
                                    __label__ = 158;
                                    break $S_57;
                                }
                                __label__ = 130;
                                }
                            $M_158_130 : for(;;) switch (__label__) {
                                case 158 :
                                // NORMAL
                                    thisRef.combinedAABB.VOIDcombineojcAABBojcAABB(thisRef.combinedAABB,local_3_REFERENCE,local_6_REFERENCE.aabb);
                                    var var52 = local_6_REFERENCE.aabb.FLOATgetPerimeter(local_6_REFERENCE.aabb); // type is FLOAT value type is FLOAT
                                    local_13_FLOAT = var52; // type is FLOAT value type is FLOAT
                                    var var56 = thisRef.combinedAABB.FLOATgetPerimeter(thisRef.combinedAABB); // type is FLOAT value type is FLOAT
                                    var local_14_FLOAT = var56; // type is FLOAT value type is FLOAT
                                    local_12_FLOAT = ((local_14_FLOAT - local_13_FLOAT) + local_11_FLOAT); // type is FLOAT value type is FLOAT
                                    break $M_158_130;
                                case 130 :
                                // NORMAL
                                    thisRef.combinedAABB.VOIDcombineojcAABBojcAABB(thisRef.combinedAABB,local_3_REFERENCE,local_6_REFERENCE.aabb);
                                    var var71 = thisRef.combinedAABB.FLOATgetPerimeter(thisRef.combinedAABB); // type is FLOAT value type is FLOAT
                                    local_12_FLOAT = (var71 + local_11_FLOAT); // type is FLOAT value type is FLOAT
                                    break $M_158_130;
                            }
                            $S_200 : {
                            // NORMAL
                                var var76 = local_7_REFERENCE.BOOLEANisLeaf(local_7_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                if ((var76 == 0)) {
                                    __label__ = 236;
                                    break $S_200;
                                }
                                __label__ = 208;
                                }
                            $M_236_208 : for(;;) switch (__label__) {
                                case 236 :
                                // NORMAL
                                    thisRef.combinedAABB.VOIDcombineojcAABBojcAABB(thisRef.combinedAABB,local_3_REFERENCE,local_7_REFERENCE.aabb);
                                    var var83 = local_7_REFERENCE.aabb.FLOATgetPerimeter(local_7_REFERENCE.aabb); // type is FLOAT value type is FLOAT
                                    var local_14_FLOAT = var83; // type is FLOAT value type is FLOAT
                                    var var86 = thisRef.combinedAABB.FLOATgetPerimeter(thisRef.combinedAABB); // type is FLOAT value type is FLOAT
                                    var local_15_FLOAT = var86; // type is FLOAT value type is FLOAT
                                    local_13_FLOAT = ((local_15_FLOAT - local_14_FLOAT) + local_11_FLOAT); // type is FLOAT value type is FLOAT
                                    break $M_236_208;
                                case 208 :
                                // NORMAL
                                    thisRef.combinedAABB.VOIDcombineojcAABBojcAABB(thisRef.combinedAABB,local_3_REFERENCE,local_7_REFERENCE.aabb);
                                    var var100 = thisRef.combinedAABB.FLOATgetPerimeter(thisRef.combinedAABB); // type is FLOAT value type is FLOAT
                                    local_13_FLOAT = (var100 + local_11_FLOAT); // type is FLOAT value type is FLOAT
                                    break $M_236_208;
                            }
                            $S_278 : {
                            // NORMAL
                                var var104 = local_10_FLOAT; // type is FLOAT value type is FLOAT
                                var var105 = local_12_FLOAT; // type is FLOAT value type is FLOAT
                                if ((var104 >= var105)) {
                                    __label__ = 297;
                                    break $S_278;
                                }
                                __label__ = 286;
                                }
                            $M_297_286 : for(;;) switch (__label__) {
                                case 297 :
                                // NORMAL
                                    $S_297 : {
                                    // NORMAL
                                        var var184 = local_12_FLOAT; // type is FLOAT value type is FLOAT
                                        var var185 = local_13_FLOAT; // type is FLOAT value type is FLOAT
                                        if ((var184 >= var185)) {
                                            __label__ = 312;
                                            break $S_297;
                                        }
                                        __label__ = 305;
                                        }
                                    $M_305_312 : for(;;) switch (__label__) {
                                        case 305 :
                                        // NORMAL
                                            local_4_REFERENCE = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@70d10401
                                            break $M_305_312;
                                        case 312 :
                                        // NORMAL
                                            local_4_REFERENCE = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6f880e81
                                            break $M_305_312;
                                    }
                                    __label__ = 49;
                                    continue $L_49;
                                case 286 :
                                // NORMAL
                                    $S_286 : {
                                    // NORMAL
                                        var var107 = local_10_FLOAT; // type is FLOAT value type is FLOAT
                                        var var108 = local_13_FLOAT; // type is FLOAT value type is FLOAT
                                        if ((var107 >= var108)) {
                                            __label__ = 297;
                                            continue $M_297_286;
                                        }
                                        }
                                    __label__ = 319;
                                    continue $M_57_319;
                            }
                        case 319 :
                        // NORMAL
                            $S_319 : {
                            // NORMAL
                                local_5_REFERENCE = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@250cd754
                                var var114 = thisRef.m_nodes.data[local_5_REFERENCE.id]; // type is REFERENCE value type is REFERENCE
                                local_6_REFERENCE = var114.parent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@74748cd7
                                var var116 = thisRef.ojcbDynamicTreeNodeallocateNode(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4e84391b
                                local_7_REFERENCE = var116; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@47484e6d
                                var var117 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6f880e81
                                var var118 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@70d10401
                                var117.parent = var118;
                                var var119 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6f880e81
                                var119.userData = null;
                                local_7_REFERENCE.aabb.VOIDcombineojcAABBojcAABB(local_7_REFERENCE.aabb,local_3_REFERENCE,local_5_REFERENCE.aabb);
                                var var125 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6f880e81
                                var var128 = (local_5_REFERENCE.height + 1); // type is INT value type is INT
                                var125.height = var128;
                                var var129 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@70d10401
                                if (var129 == null ) {
                                    __label__ = 444;
                                    break $S_319;
                                }
                                __label__ = 388;
                                }
                            $M_444_388 : for(;;) switch (__label__) {
                                case 444 :
                                // NORMAL
                                    var var130 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6f880e81
                                    var var131 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@250cd754
                                    var130.child1 = var131;
                                    var var132 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6f880e81
                                    var var133 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@43ff34ce
                                    var132.child2 = var133;
                                    var var134 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@250cd754
                                    var var135 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6f880e81
                                    var134.parent = var135;
                                    var var136 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@43ff34ce
                                    var var137 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6f880e81
                                    var136.parent = var137;
                                    var var138 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6f880e81
                                    thisRef.m_root = var138;
                                    break $M_444_388;
                                case 388 :
                                // NORMAL
                                    $S_388 : {
                                    // NORMAL
                                        var var140 = local_6_REFERENCE.child1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6adfd382
                                        var var141 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@250cd754
                                        if ((var140 != var141)) {
                                            __label__ = 408;
                                            break $S_388;
                                        }
                                        __label__ = 398;
                                        }
                                    $M_398_408 : for(;;) switch (__label__) {
                                        case 398 :
                                        // NORMAL
                                            var var142 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@70d10401
                                            var var143 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6f880e81
                                            var142.child1 = var143;
                                            break $M_398_408;
                                        case 408 :
                                        // NORMAL
                                            var var144 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@70d10401
                                            var var145 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6f880e81
                                            var144.child2 = var145;
                                            break $M_398_408;
                                    }
                                    var var146 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6f880e81
                                    var var147 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@250cd754
                                    var146.child1 = var147;
                                    var var148 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6f880e81
                                    var var149 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@43ff34ce
                                    var148.child2 = var149;
                                    var var150 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@250cd754
                                    var var151 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6f880e81
                                    var150.parent = var151;
                                    var var152 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@43ff34ce
                                    var var153 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6f880e81
                                    var152.parent = var153;
                                    break $M_444_388;
                            }
                            $S_476 : {
                            // NORMAL
                                local_4_REFERENCE = local_2_REFERENCE.parent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6154f416
                                __label__ = 482;
                                }
                            $L_482 : for (;;) {
                                $S_482 : {
                                // NORMAL
                                    var var156 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@250cd754
                                    if (var156 == null ) {
                                        return;
                                    }
                                    }
                                $S_487 : {
                                // NORMAL
                                    var var158 = thisRef.ojcbDynamicTreeNodebalanceojcbDynamicTreeNode(thisRef,local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3116dedf
                                    local_4_REFERENCE = var158; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@25b31cb8
                                    local_8_REFERENCE = local_4_REFERENCE.child1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5eb57507
                                    local_9_REFERENCE = local_4_REFERENCE.child2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4a62ee90
                                    var var165 = ojcbDynamicTree.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                                    if ((var165 != 0)) {
                                        __label__ = 528;
                                        break $S_487;
                                    }
                                    __label__ = 515;
                                    }
                                $M_515_528 : for(;;) switch (__label__) {
                                    case 515 :
                                    // NORMAL
                                        $S_515 : {
                                        // NORMAL
                                            var var166 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3fc1ab89
                                            if (var166 != null ) {
                                                __label__ = 528;
                                                continue $M_515_528;
                                            }
                                            }
                                        var var192 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                        jlAssertionError.VOIDinit(var192);
                                        throw var192;
                                    case 528 :
                                    // NORMAL
                                        $S_528 : {
                                        // NORMAL
                                            var var167 = ojcbDynamicTree.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                                            if ((var167 != 0)) {
                                                __label__ = 547;
                                                break $S_528;
                                            }
                                            __label__ = 534;
                                            }
                                        $M_534_547 : for(;;) switch (__label__) {
                                            case 534 :
                                            // NORMAL
                                                $S_534 : {
                                                // NORMAL
                                                    var var168 = local_9_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@109246f6
                                                    if (var168 != null ) {
                                                        __label__ = 547;
                                                        continue $M_534_547;
                                                    }
                                                    }
                                                var var191 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                                jlAssertionError.VOIDinit(var191);
                                                throw var191;
                                            case 547 :
                                            // NORMAL
                                                var var169 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@250cd754
                                                var var174 = ojcMathUtils.INTmaxINTINT(local_8_REFERENCE.height,local_9_REFERENCE.height); // type is INT value type is INT
                                                var var175 = (1 + var174); // type is INT value type is INT
                                                var169.height = var175;
                                                local_4_REFERENCE.aabb.VOIDcombineojcAABBojcAABB(local_4_REFERENCE.aabb,local_8_REFERENCE.aabb,local_9_REFERENCE.aabb);
                                                local_4_REFERENCE = local_4_REFERENCE.parent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@c50578e
                                                __label__ = 482;
                                                continue $L_482;
                                        }
                                }
                            }
                    }
                }
            case 24 :
            // NORMAL
                var var189 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@43ff34ce
                thisRef.m_root = var189;
                var var190 = thisRef.m_root; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@b3780fd
                var190.parent = null;
                return;
        }
    },

    ojcbDynamicTreeNodebalanceojcbDynamicTreeNode : function(thisRef,iA) {
        var local_7_INT = null; // type is INT # of inits = 1
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_8_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_11_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_9_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_10_REFERENCE = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcbDynamicTree.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 18;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_18_6 : for(;;) switch (__label__) {
            case 18 :
            // NORMAL
                $S_18 : {
                // NORMAL
                    local_2_REFERENCE = iA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6d27b688
                    var var3 = local_2_REFERENCE.BOOLEANisLeaf(local_2_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                    if ((var3 != 0)) {
                        return iA;
                    }
                    }
                $S_27 : {
                // NORMAL
                    var var5 = local_2_REFERENCE.height; // type is INT value type is INT
                    if ((var5 >= 2)) {
                        break $S_27;
                    }
                    return iA;
                    }
                $S_37 : {
                // NORMAL
                    local_3_REFERENCE = local_2_REFERENCE.child1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@104daa25
                    local_4_REFERENCE = local_2_REFERENCE.child2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@29e76b20
                    var var12 = ojcbDynamicTree.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                    if ((var12 != 0)) {
                        __label__ = 81;
                        break $S_37;
                    }
                    __label__ = 54;
                    }
                $M_54_81 : for(;;) switch (__label__) {
                    case 54 :
                    // NORMAL
                        $S_54 : {
                        // NORMAL
                            var var14 = local_3_REFERENCE.id; // type is INT value type is INT
                            if ((0 > var14)) {
                                __label__ = 73;
                                break $S_54;
                            }
                            __label__ = 62;
                            }
                        $M_62_73 : for(;;) switch (__label__) {
                            case 62 :
                            // NORMAL
                                var var16 = local_3_REFERENCE.id; // type is INT value type is INT
                                var var17 = thisRef.m_nodeCapacity; // type is INT value type is INT
                                if ((var16 < var17)) {
                                    __label__ = 81;
                                    continue $M_54_81;
                                }
                                __label__ = 73;
                                continue $M_62_73;
                            case 73 :
                            // NORMAL
                                var var188 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                jlAssertionError.VOIDinit(var188);
                                throw var188;
                        }
                    case 81 :
                    // NORMAL
                        $S_81 : {
                        // NORMAL
                            var var18 = ojcbDynamicTree.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                            if ((var18 != 0)) {
                                __label__ = 116;
                                break $S_81;
                            }
                            __label__ = 87;
                            }
                        $M_116_87 : for(;;) switch (__label__) {
                            case 87 :
                            // NORMAL
                                $S_87 : {
                                // NORMAL
                                    var var20 = local_4_REFERENCE.id; // type is INT value type is INT
                                    if ((0 > var20)) {
                                        __label__ = 108;
                                        break $S_87;
                                    }
                                    __label__ = 96;
                                    }
                                $M_96_108 : for(;;) switch (__label__) {
                                    case 108 :
                                    // NORMAL
                                        var var191 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                        jlAssertionError.VOIDinit(var191);
                                        throw var191;
                                    case 96 :
                                    // NORMAL
                                        var var22 = local_4_REFERENCE.id; // type is INT value type is INT
                                        var var23 = thisRef.m_nodeCapacity; // type is INT value type is INT
                                        if ((var22 < var23)) {
                                            __label__ = 116;
                                            continue $M_116_87;
                                        }
                                        __label__ = 108;
                                        continue $M_96_108;
                                }
                            case 116 :
                            // NORMAL
                                $S_116 : {
                                // NORMAL
                                    local_5_REFERENCE = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@49dfd250
                                    local_6_REFERENCE = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@14da2b38
                                    local_7_INT = (local_6_REFERENCE.height - local_5_REFERENCE.height); // type is INT value type is INT
                                    var var35 = local_7_INT; // type is INT value type is INT
                                    if ((var35 <= 1)) {
                                        __label__ = 572;
                                        break $S_116;
                                    }
                                    __label__ = 142;
                                    }
                                for(;;) switch (__label__) {
                                    case 142 :
                                    // NORMAL
                                        $S_142 : {
                                        // NORMAL
                                            local_8_REFERENCE = local_6_REFERENCE.child1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5961ee7f
                                            local_9_REFERENCE = local_6_REFERENCE.child2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@25bcc3a0
                                            local_10_REFERENCE = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2797f35f
                                            local_11_REFERENCE = local_9_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@402e833b
                                            var var81 = ojcbDynamicTree.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                                            if ((var81 != 0)) {
                                                __label__ = 183;
                                                break $S_142;
                                            }
                                            __label__ = 170;
                                            }
                                        $M_170_183 : for(;;) switch (__label__) {
                                            case 170 :
                                            // NORMAL
                                                $S_170 : {
                                                // NORMAL
                                                    var var82 = local_10_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2797f35f
                                                    if (var82 != null ) {
                                                        __label__ = 183;
                                                        continue $M_170_183;
                                                    }
                                                    }
                                                var var83 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                                jlAssertionError.VOIDinit(var83);
                                                throw var83;
                                            case 183 :
                                            // NORMAL
                                                $S_183 : {
                                                // NORMAL
                                                    var var84 = ojcbDynamicTree.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                                                    if ((var84 != 0)) {
                                                        __label__ = 202;
                                                        break $S_183;
                                                    }
                                                    __label__ = 189;
                                                    }
                                                $M_202_189 : for(;;) switch (__label__) {
                                                    case 202 :
                                                    // NORMAL
                                                        $S_202 : {
                                                        // NORMAL
                                                            var var87 = ojcbDynamicTree.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                                                            if ((var87 != 0)) {
                                                                __label__ = 237;
                                                                break $S_202;
                                                            }
                                                            __label__ = 208;
                                                            }
                                                        $M_208_237 : for(;;) switch (__label__) {
                                                            case 208 :
                                                            // NORMAL
                                                                $S_208 : {
                                                                // NORMAL
                                                                    var var89 = local_8_REFERENCE.id; // type is INT value type is INT
                                                                    if ((0 > var89)) {
                                                                        __label__ = 229;
                                                                        break $S_208;
                                                                    }
                                                                    __label__ = 217;
                                                                    }
                                                                $M_229_217 : for(;;) switch (__label__) {
                                                                    case 217 :
                                                                    // NORMAL
                                                                        var var91 = local_8_REFERENCE.id; // type is INT value type is INT
                                                                        var var92 = thisRef.m_nodeCapacity; // type is INT value type is INT
                                                                        if ((var91 < var92)) {
                                                                            __label__ = 237;
                                                                            continue $M_208_237;
                                                                        }
                                                                        __label__ = 229;
                                                                        continue $M_229_217;
                                                                    case 229 :
                                                                    // NORMAL
                                                                        var var192 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                                                        jlAssertionError.VOIDinit(var192);
                                                                        throw var192;
                                                                }
                                                            case 237 :
                                                            // NORMAL
                                                                $S_237 : {
                                                                // NORMAL
                                                                    var var93 = ojcbDynamicTree.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                                                                    if ((var93 != 0)) {
                                                                        __label__ = 272;
                                                                        break $S_237;
                                                                    }
                                                                    __label__ = 243;
                                                                    }
                                                                $M_243_272 : for(;;) switch (__label__) {
                                                                    case 243 :
                                                                    // NORMAL
                                                                        $S_243 : {
                                                                        // NORMAL
                                                                            var var95 = local_9_REFERENCE.id; // type is INT value type is INT
                                                                            if ((0 > var95)) {
                                                                                __label__ = 264;
                                                                                break $S_243;
                                                                            }
                                                                            __label__ = 252;
                                                                            }
                                                                        $M_252_264 : for(;;) switch (__label__) {
                                                                            case 264 :
                                                                            // NORMAL
                                                                                var var269 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                                                                jlAssertionError.VOIDinit(var269);
                                                                                throw var269;
                                                                            case 252 :
                                                                            // NORMAL
                                                                                var var97 = local_9_REFERENCE.id; // type is INT value type is INT
                                                                                var var98 = thisRef.m_nodeCapacity; // type is INT value type is INT
                                                                                if ((var97 < var98)) {
                                                                                    __label__ = 272;
                                                                                    continue $M_243_272;
                                                                                }
                                                                                __label__ = 264;
                                                                                continue $M_252_264;
                                                                        }
                                                                    case 272 :
                                                                    // NORMAL
                                                                        $S_272 : {
                                                                        // NORMAL
                                                                            var var99 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@14da2b38
                                                                            var99.child1 = iA;
                                                                            var var100 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@14da2b38
                                                                            var var102 = local_2_REFERENCE.parent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@58dd49b0
                                                                            var100.parent = var102;
                                                                            var var103 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6d27b688
                                                                            var var104 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@14da2b38
                                                                            var103.parent = var104;
                                                                            var var106 = local_6_REFERENCE.parent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4a7187e0
                                                                            if (var106 == null ) {
                                                                                __label__ = 365;
                                                                                break $S_272;
                                                                            }
                                                                            __label__ = 301;
                                                                            }
                                                                        $M_365_301 : for(;;) switch (__label__) {
                                                                            case 301 :
                                                                            // NORMAL
                                                                                $S_301 : {
                                                                                // NORMAL
                                                                                    var var110 = local_6_REFERENCE.parent.child1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1c359ac7
                                                                                    if ((var110 != iA)) {
                                                                                        __label__ = 326;
                                                                                        break $S_301;
                                                                                    }
                                                                                    __label__ = 313;
                                                                                    }
                                                                                for(;;) switch (__label__) {
                                                                                    case 326 :
                                                                                    // NORMAL
                                                                                        $S_326 : {
                                                                                        // NORMAL
                                                                                            var var114 = ojcbDynamicTree.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                                                                                            if ((var114 != 0)) {
                                                                                                __label__ = 352;
                                                                                                break $S_326;
                                                                                            }
                                                                                            __label__ = 332;
                                                                                            }
                                                                                        $M_332_352 : for(;;) switch (__label__) {
                                                                                            case 352 :
                                                                                            // NORMAL
                                                                                                var var119 = local_6_REFERENCE.parent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5fd7eb22
                                                                                                var var120 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@14da2b38
                                                                                                var119.child2 = var120;
                                                                                                break $M_365_301;
                                                                                            case 332 :
                                                                                            // NORMAL
                                                                                                $S_332 : {
                                                                                                // NORMAL
                                                                                                    var var117 = local_6_REFERENCE.parent.child2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6d75a9a1
                                                                                                    if ((var117 == iA)) {
                                                                                                        __label__ = 352;
                                                                                                        continue $M_332_352;
                                                                                                    }
                                                                                                    }
                                                                                                var var189 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                                                                                jlAssertionError.VOIDinit(var189);
                                                                                                throw var189;
                                                                                        }
                                                                                    case 313 :
                                                                                    // NORMAL
                                                                                        var var112 = local_6_REFERENCE.parent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2b7d7d68
                                                                                        var var113 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@14da2b38
                                                                                        var112.child1 = var113;
                                                                                        break $M_365_301;
                                                                                }
                                                                            case 365 :
                                                                            // NORMAL
                                                                                var var107 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@14da2b38
                                                                                thisRef.m_root = var107;
                                                                                break $M_365_301;
                                                                        }
                                                                        $S_371 : {
                                                                        // NORMAL
                                                                            var var122 = local_10_REFERENCE.height; // type is INT value type is INT
                                                                            var var124 = local_11_REFERENCE.height; // type is INT value type is INT
                                                                            if ((var122 <= var124)) {
                                                                                __label__ = 478;
                                                                                break $S_371;
                                                                            }
                                                                            __label__ = 384;
                                                                            }
                                                                        for(;;) switch (__label__) {
                                                                            case 384 :
                                                                            // NORMAL
                                                                                var var156 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@14da2b38
                                                                                var var157 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2797f35f
                                                                                var156.child2 = var157;
                                                                                var var158 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6d27b688
                                                                                var var159 = local_9_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@402e833b
                                                                                var158.child2 = var159;
                                                                                var var160 = local_11_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@402e833b
                                                                                var160.parent = iA;
                                                                                local_2_REFERENCE.aabb.VOIDcombineojcAABBojcAABB(local_2_REFERENCE.aabb,local_5_REFERENCE.aabb,local_11_REFERENCE.aabb);
                                                                                local_6_REFERENCE.aabb.VOIDcombineojcAABBojcAABB(local_6_REFERENCE.aabb,local_2_REFERENCE.aabb,local_10_REFERENCE.aabb);
                                                                                var var173 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6d27b688
                                                                                var var178 = ojcMathUtils.INTmaxINTINT(local_5_REFERENCE.height,local_11_REFERENCE.height); // type is INT value type is INT
                                                                                var var179 = (1 + var178); // type is INT value type is INT
                                                                                var173.height = var179;
                                                                                var var180 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@14da2b38
                                                                                var var185 = ojcMathUtils.INTmaxINTINT(local_2_REFERENCE.height,local_10_REFERENCE.height); // type is INT value type is INT
                                                                                var var186 = (1 + var185); // type is INT value type is INT
                                                                                var180.height = var186;
                                                                                return local_4_REFERENCE;
                                                                            case 478 :
                                                                            // NORMAL
                                                                                var var125 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@14da2b38
                                                                                var var126 = local_9_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@402e833b
                                                                                var125.child2 = var126;
                                                                                var var127 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6d27b688
                                                                                var var128 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2797f35f
                                                                                var127.child2 = var128;
                                                                                var var129 = local_10_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2797f35f
                                                                                var129.parent = iA;
                                                                                local_2_REFERENCE.aabb.VOIDcombineojcAABBojcAABB(local_2_REFERENCE.aabb,local_5_REFERENCE.aabb,local_10_REFERENCE.aabb);
                                                                                local_6_REFERENCE.aabb.VOIDcombineojcAABBojcAABB(local_6_REFERENCE.aabb,local_2_REFERENCE.aabb,local_11_REFERENCE.aabb);
                                                                                var var142 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6d27b688
                                                                                var var147 = ojcMathUtils.INTmaxINTINT(local_5_REFERENCE.height,local_10_REFERENCE.height); // type is INT value type is INT
                                                                                var var148 = (1 + var147); // type is INT value type is INT
                                                                                var142.height = var148;
                                                                                var var149 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@14da2b38
                                                                                var var154 = ojcMathUtils.INTmaxINTINT(local_2_REFERENCE.height,local_11_REFERENCE.height); // type is INT value type is INT
                                                                                var var155 = (1 + var154); // type is INT value type is INT
                                                                                var149.height = var155;
                                                                                return local_4_REFERENCE;
                                                                        }
                                                                }
                                                        }
                                                    case 189 :
                                                    // NORMAL
                                                        $S_189 : {
                                                        // NORMAL
                                                            var var85 = local_11_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@402e833b
                                                            if (var85 != null ) {
                                                                __label__ = 202;
                                                                continue $M_202_189;
                                                            }
                                                            }
                                                        var var86 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                                        jlAssertionError.VOIDinit(var86);
                                                        throw var86;
                                                }
                                        }
                                    case 572 :
                                    // NORMAL
                                        $S_572 : {
                                        // NORMAL
                                            var var36 = local_7_INT; // type is INT value type is INT
                                            if ((var36 >= -1)) {
                                                return iA;
                                            }
                                            }
                                        $S_578 : {
                                        // NORMAL
                                            local_8_REFERENCE = local_5_REFERENCE.child1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1bae2962
                                            local_9_REFERENCE = local_5_REFERENCE.child2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7b404fce
                                            local_10_REFERENCE = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2797f35f
                                            local_11_REFERENCE = local_9_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@402e833b
                                            var var47 = ojcbDynamicTree.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                                            if ((var47 != 0)) {
                                                __label__ = 635;
                                                break $S_578;
                                            }
                                            __label__ = 606;
                                            }
                                        $M_635_606 : for(;;) switch (__label__) {
                                            case 635 :
                                            // NORMAL
                                                $S_635 : {
                                                // NORMAL
                                                    var var53 = ojcbDynamicTree.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                                                    if ((var53 != 0)) {
                                                        __label__ = 670;
                                                        break $S_635;
                                                    }
                                                    __label__ = 641;
                                                    }
                                                $M_670_641 : for(;;) switch (__label__) {
                                                    case 670 :
                                                    // NORMAL
                                                        $S_670 : {
                                                        // NORMAL
                                                            var var59 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@49dfd250
                                                            var59.child1 = iA;
                                                            var var60 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@49dfd250
                                                            var var62 = local_2_REFERENCE.parent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3b38c9a6
                                                            var60.parent = var62;
                                                            var var63 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6d27b688
                                                            var var64 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@49dfd250
                                                            var63.parent = var64;
                                                            var var66 = local_5_REFERENCE.parent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7bee7594
                                                            if (var66 == null ) {
                                                                __label__ = 760;
                                                                break $S_670;
                                                            }
                                                            __label__ = 698;
                                                            }
                                                        $M_760_698 : for(;;) switch (__label__) {
                                                            case 698 :
                                                            // NORMAL
                                                                $S_698 : {
                                                                // NORMAL
                                                                    var var69 = local_5_REFERENCE.parent.child1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@11e1b6b2
                                                                    if ((var69 != iA)) {
                                                                        __label__ = 722;
                                                                        break $S_698;
                                                                    }
                                                                    __label__ = 710;
                                                                    }
                                                                for(;;) switch (__label__) {
                                                                    case 710 :
                                                                    // NORMAL
                                                                        var var194 = local_5_REFERENCE.parent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6826b57f
                                                                        var var195 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@49dfd250
                                                                        var194.child1 = var195;
                                                                        break $M_760_698;
                                                                    case 722 :
                                                                    // NORMAL
                                                                        $S_722 : {
                                                                        // NORMAL
                                                                            var var70 = ojcbDynamicTree.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                                                                            if ((var70 != 0)) {
                                                                                __label__ = 748;
                                                                                break $S_722;
                                                                            }
                                                                            __label__ = 728;
                                                                            }
                                                                        $M_748_728 : for(;;) switch (__label__) {
                                                                            case 748 :
                                                                            // NORMAL
                                                                                var var197 = local_5_REFERENCE.parent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@152e2424
                                                                                var var198 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@49dfd250
                                                                                var197.child2 = var198;
                                                                                break $M_760_698;
                                                                            case 728 :
                                                                            // NORMAL
                                                                                $S_728 : {
                                                                                // NORMAL
                                                                                    var var73 = local_5_REFERENCE.parent.child2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1de4a1c0
                                                                                    if ((var73 == iA)) {
                                                                                        __label__ = 748;
                                                                                        continue $M_748_728;
                                                                                    }
                                                                                    }
                                                                                var var74 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                                                                jlAssertionError.VOIDinit(var74);
                                                                                throw var74;
                                                                        }
                                                                }
                                                            case 760 :
                                                            // NORMAL
                                                                var var199 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@49dfd250
                                                                thisRef.m_root = var199;
                                                                break $M_760_698;
                                                        }
                                                        $S_765 : {
                                                        // NORMAL
                                                            var var201 = local_10_REFERENCE.height; // type is INT value type is INT
                                                            var var203 = local_11_REFERENCE.height; // type is INT value type is INT
                                                            if ((var201 <= var203)) {
                                                                __label__ = 872;
                                                                break $S_765;
                                                            }
                                                            __label__ = 778;
                                                            }
                                                        for(;;) switch (__label__) {
                                                            case 872 :
                                                            // NORMAL
                                                                var var204 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@49dfd250
                                                                var var205 = local_9_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@402e833b
                                                                var204.child2 = var205;
                                                                var var206 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6d27b688
                                                                var var207 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2797f35f
                                                                var206.child1 = var207;
                                                                var var208 = local_10_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2797f35f
                                                                var208.parent = iA;
                                                                local_2_REFERENCE.aabb.VOIDcombineojcAABBojcAABB(local_2_REFERENCE.aabb,local_6_REFERENCE.aabb,local_10_REFERENCE.aabb);
                                                                local_5_REFERENCE.aabb.VOIDcombineojcAABBojcAABB(local_5_REFERENCE.aabb,local_2_REFERENCE.aabb,local_11_REFERENCE.aabb);
                                                                var var221 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6d27b688
                                                                var var226 = ojcMathUtils.INTmaxINTINT(local_6_REFERENCE.height,local_10_REFERENCE.height); // type is INT value type is INT
                                                                var var227 = (1 + var226); // type is INT value type is INT
                                                                var221.height = var227;
                                                                var var228 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@49dfd250
                                                                var var233 = ojcMathUtils.INTmaxINTINT(local_2_REFERENCE.height,local_11_REFERENCE.height); // type is INT value type is INT
                                                                var var234 = (1 + var233); // type is INT value type is INT
                                                                var228.height = var234;
                                                                return local_3_REFERENCE;
                                                            case 778 :
                                                            // NORMAL
                                                                var var235 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@49dfd250
                                                                var var236 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2797f35f
                                                                var235.child2 = var236;
                                                                var var237 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6d27b688
                                                                var var238 = local_9_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@402e833b
                                                                var237.child1 = var238;
                                                                var var239 = local_11_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@402e833b
                                                                var239.parent = iA;
                                                                local_2_REFERENCE.aabb.VOIDcombineojcAABBojcAABB(local_2_REFERENCE.aabb,local_6_REFERENCE.aabb,local_11_REFERENCE.aabb);
                                                                local_5_REFERENCE.aabb.VOIDcombineojcAABBojcAABB(local_5_REFERENCE.aabb,local_2_REFERENCE.aabb,local_10_REFERENCE.aabb);
                                                                var var252 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6d27b688
                                                                var var257 = ojcMathUtils.INTmaxINTINT(local_6_REFERENCE.height,local_11_REFERENCE.height); // type is INT value type is INT
                                                                var var258 = (1 + var257); // type is INT value type is INT
                                                                var252.height = var258;
                                                                var var259 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@49dfd250
                                                                var var264 = ojcMathUtils.INTmaxINTINT(local_2_REFERENCE.height,local_10_REFERENCE.height); // type is INT value type is INT
                                                                var var265 = (1 + var264); // type is INT value type is INT
                                                                var259.height = var265;
                                                                return local_3_REFERENCE;
                                                        }
                                                    case 641 :
                                                    // NORMAL
                                                        $S_641 : {
                                                        // NORMAL
                                                            var var55 = local_9_REFERENCE.id; // type is INT value type is INT
                                                            if ((0 > var55)) {
                                                                __label__ = 662;
                                                                break $S_641;
                                                            }
                                                            __label__ = 650;
                                                            }
                                                        $M_650_662 : for(;;) switch (__label__) {
                                                            case 650 :
                                                            // NORMAL
                                                                var var57 = local_9_REFERENCE.id; // type is INT value type is INT
                                                                var var58 = thisRef.m_nodeCapacity; // type is INT value type is INT
                                                                if ((var57 < var58)) {
                                                                    __label__ = 670;
                                                                    continue $M_670_641;
                                                                }
                                                                __label__ = 662;
                                                                continue $M_650_662;
                                                            case 662 :
                                                            // NORMAL
                                                                var var190 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                                                jlAssertionError.VOIDinit(var190);
                                                                throw var190;
                                                        }
                                                }
                                            case 606 :
                                            // NORMAL
                                                $S_606 : {
                                                // NORMAL
                                                    var var49 = local_8_REFERENCE.id; // type is INT value type is INT
                                                    if ((0 > var49)) {
                                                        __label__ = 627;
                                                        break $S_606;
                                                    }
                                                    __label__ = 615;
                                                    }
                                                $M_615_627 : for(;;) switch (__label__) {
                                                    case 615 :
                                                    // NORMAL
                                                        var var51 = local_8_REFERENCE.id; // type is INT value type is INT
                                                        var var52 = thisRef.m_nodeCapacity; // type is INT value type is INT
                                                        if ((var51 < var52)) {
                                                            __label__ = 635;
                                                            continue $M_635_606;
                                                        }
                                                        __label__ = 627;
                                                        continue $M_615_627;
                                                    case 627 :
                                                    // NORMAL
                                                        var var268 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                                        jlAssertionError.VOIDinit(var268);
                                                        throw var268;
                                                }
                                        }
                                }
                        }
                }
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    if (iA != null ) {
                        __label__ = 18;
                        continue $M_18_6;
                    }
                    }
                var var267 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var267);
                throw var267;
        }
    },

    ojcAABBgetFatAABBINT : function(thisRef,proxyId) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcbDynamicTree.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 27;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_6_27 : for(;;) switch (__label__) {
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    if ((0 > proxyId)) {
                        __label__ = 19;
                        break $S_6;
                    }
                    __label__ = 11;
                    }
                $M_19_11 : for(;;) switch (__label__) {
                    case 19 :
                    // NORMAL
                        var var2 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                        jlAssertionError.VOIDinit(var2);
                        throw var2;
                    case 11 :
                    // NORMAL
                        var var1 = thisRef.m_nodeCapacity; // type is INT value type is INT
                        if ((proxyId < var1)) {
                            __label__ = 27;
                            continue $M_6_27;
                        }
                        __label__ = 19;
                        continue $M_19_11;
                }
            case 27 :
            // NORMAL
                var var4 = thisRef.m_nodes.data[proxyId]; // type is REFERENCE value type is REFERENCE
                return var4.aabb;
        }
    },

    VOIDqueryojcTreeCallbackojcAABB : function(thisRef,callback,aabb) {
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            thisRef.nodeStack.VOIDreset(thisRef.nodeStack);
            thisRef.nodeStack.VOIDpushojcbDynamicTreeNode(thisRef.nodeStack,thisRef.m_root);
            __label__ = 18;
            }
        $L_18 : for (;;) {
            $S_18 : {
            // NORMAL
                var var4 = thisRef.nodeStack.INTgetCount(thisRef.nodeStack); // type is INT value type is INT
                if ((var4 <= 0)) {
                    return;
                }
                }
            $S_28 : {
            // NORMAL
                var var6 = thisRef.nodeStack.ojcbDynamicTreeNodepop(thisRef.nodeStack); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3957bec8
                local_3_REFERENCE = var6; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@283e4047
                var var8 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@283e4047
                if (var8 != null ) {
                    __label__ = 43;
                    break $S_28;
                }
                __label__ = 40;
                }
            for(;;) switch (__label__) {
                case 43 :
                // NORMAL
                    $S_43 : {
                    // NORMAL
                        var var11 = ojcAABB.BOOLEANtestOverlapojcAABBojcAABB(local_3_REFERENCE.aabb,aabb); // type is BOOLEAN value type is BOOLEAN
                        if ((var11 == 0)) {
                            __label__ = 104;
                            break $S_43;
                        }
                        __label__ = 54;
                        }
                    $M_104_54 : for(;;) switch (__label__) {
                        case 54 :
                        // NORMAL
                            $S_54 : {
                            // NORMAL
                                var var13 = local_3_REFERENCE.child1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3694619f
                                if (var13 != null ) {
                                    __label__ = 82;
                                    break $S_54;
                                }
                                __label__ = 61;
                                }
                            for(;;) switch (__label__) {
                                case 61 :
                                // NORMAL
                                    $S_61 : {
                                    // NORMAL
                                        var var16 = callback.BOOLEANtreeCallbackINT(callback,local_3_REFERENCE.id); // type is BOOLEAN value type is BOOLEAN
                                        var local_4_BOOLEAN = var16; // type is BOOLEAN value type is BOOLEAN
                                        var var19 = local_4_BOOLEAN; // type is BOOLEAN value type is BOOLEAN
                                        if ((var19 != 0)) {
                                            break $S_61;
                                        }
                                        return;
                                        }
                                    __label__ = 104;
                                    continue $M_104_54;
                                case 82 :
                                // NORMAL
                                    thisRef.nodeStack.VOIDpushojcbDynamicTreeNode(thisRef.nodeStack,local_3_REFERENCE.child1);
                                    thisRef.nodeStack.VOIDpushojcbDynamicTreeNode(thisRef.nodeStack,local_3_REFERENCE.child2);
                                    __label__ = 104;
                                    continue $M_104_54;
                            }
                        case 104 :
                        // NORMAL
                            __label__ = 18;
                            continue $L_18;
                    }
                case 40 :
                // NORMAL
                    __label__ = 18;
                    continue $L_18;
            }
        }
    },

    jlObjectgetUserDataINT : function(thisRef,proxyId) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcbDynamicTree.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 27;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_27_6 : for(;;) switch (__label__) {
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    if ((0 > proxyId)) {
                        __label__ = 19;
                        break $S_6;
                    }
                    __label__ = 11;
                    }
                $M_19_11 : for(;;) switch (__label__) {
                    case 19 :
                    // NORMAL
                        var var2 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                        jlAssertionError.VOIDinit(var2);
                        throw var2;
                    case 11 :
                    // NORMAL
                        var var1 = thisRef.m_nodeCapacity; // type is INT value type is INT
                        if ((proxyId < var1)) {
                            __label__ = 27;
                            continue $M_27_6;
                        }
                        __label__ = 19;
                        continue $M_19_11;
                }
            case 27 :
            // NORMAL
                var var4 = thisRef.m_nodes.data[proxyId]; // type is REFERENCE value type is REFERENCE
                return var4.userData;
        }
    },

    BOOLEANmoveProxyINTojcAABBojcVec2 : function(thisRef,proxyId,aabb,displacement) {
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_9_FLOAT = null; // type is FLOAT # of inits = 1
        var local_7_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_8_FLOAT = null; // type is FLOAT # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcbDynamicTree.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 27;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_27_6 : for(;;) switch (__label__) {
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    if ((0 > proxyId)) {
                        __label__ = 19;
                        break $S_6;
                    }
                    __label__ = 11;
                    }
                $M_19_11 : for(;;) switch (__label__) {
                    case 19 :
                    // NORMAL
                        var var2 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                        jlAssertionError.VOIDinit(var2);
                        throw var2;
                    case 11 :
                    // NORMAL
                        var var1 = thisRef.m_nodeCapacity; // type is INT value type is INT
                        if ((proxyId < var1)) {
                            __label__ = 27;
                            continue $M_27_6;
                        }
                        __label__ = 19;
                        continue $M_19_11;
                }
            case 27 :
            // NORMAL
                $S_27 : {
                // NORMAL
                    var var4 = thisRef.m_nodes.data[proxyId]; // type is REFERENCE value type is REFERENCE
                    local_4_REFERENCE = var4; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@585a2ade
                    var var6 = ojcbDynamicTree.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                    if ((var6 != 0)) {
                        __label__ = 57;
                        break $S_27;
                    }
                    __label__ = 41;
                    }
                $M_57_41 : for(;;) switch (__label__) {
                    case 57 :
                    // NORMAL
                        $S_57 : {
                        // NORMAL
                            local_5_REFERENCE = local_4_REFERENCE.aabb; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@57076901
                            var var14 = local_5_REFERENCE.lowerBound.x; // type is FLOAT value type is FLOAT
                            var var16 = aabb.lowerBound.x; // type is FLOAT value type is FLOAT
                            if ((var14 <= var16)) {
                                __label__ = 142;
                                break $S_57;
                            }
                            __label__ = 83;
                            }
                        $M_142_83 : for(;;) switch (__label__) {
                            case 83 :
                            // NORMAL
                                $S_83 : {
                                // NORMAL
                                    var var20 = local_5_REFERENCE.lowerBound.y; // type is FLOAT value type is FLOAT
                                    var var22 = aabb.lowerBound.y; // type is FLOAT value type is FLOAT
                                    if ((var20 <= var22)) {
                                        __label__ = 142;
                                        continue $M_142_83;
                                    }
                                    }
                                $S_102 : {
                                // NORMAL
                                    var var25 = aabb.upperBound.x; // type is FLOAT value type is FLOAT
                                    var var28 = local_5_REFERENCE.upperBound.x; // type is FLOAT value type is FLOAT
                                    if ((var25 <= var28)) {
                                        __label__ = 142;
                                        continue $M_142_83;
                                    }
                                    }
                                var var31 = aabb.upperBound.y; // type is FLOAT value type is FLOAT
                                var var34 = local_5_REFERENCE.upperBound.y; // type is FLOAT value type is FLOAT
                                if ((var31 <= var34)) {
                                    __label__ = 142;
                                    continue $M_142_83;
                                }
                                return 0;
                            case 142 :
                            // NORMAL
                                $S_142 : {
                                // NORMAL
                                    thisRef.VOIDremoveLeafojcbDynamicTreeNode(thisRef,local_4_REFERENCE);
                                    local_6_REFERENCE = local_5_REFERENCE.lowerBound; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4e0dc36e
                                    local_7_REFERENCE = local_5_REFERENCE.upperBound; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@752e5124
                                    var var43 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2db9399b
                                    var var46 = (aabb.lowerBound.x - 0.1); // type is FLOAT value type is FLOAT
                                    var43.x = var46;
                                    var var47 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2db9399b
                                    var var50 = (aabb.lowerBound.y - 0.1); // type is FLOAT value type is FLOAT
                                    var47.y = var50;
                                    var var51 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1955fcb3
                                    var var54 = (aabb.upperBound.x + 0.1); // type is FLOAT value type is FLOAT
                                    var51.x = var54;
                                    var var55 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1955fcb3
                                    var var58 = (aabb.upperBound.y + 0.1); // type is FLOAT value type is FLOAT
                                    var55.y = var58;
                                    local_8_FLOAT = (displacement.x * 2.0); // type is FLOAT value type is FLOAT
                                    local_9_FLOAT = (displacement.y * 2.0); // type is FLOAT value type is FLOAT
                                    var var67 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                                    if ((var67 >= 0.0)) {
                                        __label__ = 260;
                                        break $S_142;
                                    }
                                    __label__ = 245;
                                    }
                                $M_260_245 : for(;;) switch (__label__) {
                                    case 260 :
                                    // NORMAL
                                        var var69 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1955fcb3
                                        var var72 = (var69.x + local_8_FLOAT); // type is FLOAT value type is FLOAT
                                        var69.x = var72;
                                        break $M_260_245;
                                    case 245 :
                                    // NORMAL
                                        var var73 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2db9399b
                                        var var76 = (var73.x + local_8_FLOAT); // type is FLOAT value type is FLOAT
                                        var73.x = var76;
                                        break $M_260_245;
                                }
                                $S_272 : {
                                // NORMAL
                                    var var77 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                                    if ((var77 >= 0.0)) {
                                        __label__ = 294;
                                        break $S_272;
                                    }
                                    __label__ = 279;
                                    }
                                $M_294_279 : for(;;) switch (__label__) {
                                    case 279 :
                                    // NORMAL
                                        var var83 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2db9399b
                                        var var86 = (var83.y + local_9_FLOAT); // type is FLOAT value type is FLOAT
                                        var83.y = var86;
                                        break $M_294_279;
                                    case 294 :
                                    // NORMAL
                                        var var79 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1955fcb3
                                        var var82 = (var79.y + local_9_FLOAT); // type is FLOAT value type is FLOAT
                                        var79.y = var82;
                                        break $M_294_279;
                                }
                                thisRef.VOIDinsertLeafINT(thisRef,proxyId);
                                return 1;
                        }
                    case 41 :
                    // NORMAL
                        $S_41 : {
                        // NORMAL
                            var var8 = local_4_REFERENCE.BOOLEANisLeaf(local_4_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                            if ((var8 != 0)) {
                                __label__ = 57;
                                continue $M_57_41;
                            }
                            }
                        var var87 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                        jlAssertionError.VOIDinit(var87);
                        throw var87;
                }
        }
    },

    VOIDremoveLeafojcbDynamicTreeNode : function(thisRef,leaf) {
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 4
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.m_root; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@26d360d2
            if ((leaf != var0)) {
                __label__ = 14;
                break $S_0;
            }
            __label__ = 8;
            }
        for(;;) switch (__label__) {
            case 14 :
            // NORMAL
                $S_14 : {
                // NORMAL
                    local_2_REFERENCE = leaf.parent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@62aa1181
                    local_3_REFERENCE = local_2_REFERENCE.parent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@593c1f05
                    var var7 = local_2_REFERENCE.child1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@62eb5ffd
                    if ((var7 != leaf)) {
                        __label__ = 41;
                        break $S_14;
                    }
                    __label__ = 32;
                    }
                $M_32_41 : for(;;) switch (__label__) {
                    case 32 :
                    // NORMAL
                        local_4_REFERENCE = local_2_REFERENCE.child2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5f837682
                        break $M_32_41;
                    case 41 :
                    // NORMAL
                        local_4_REFERENCE = local_2_REFERENCE.child1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6d1752ea
                        break $M_32_41;
                }
                $S_47 : {
                // NORMAL
                    var var13 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4fc2261d
                    if (var13 == null ) {
                        __label__ = 166;
                        break $S_47;
                    }
                    __label__ = 51;
                    }
                for(;;) switch (__label__) {
                    case 166 :
                    // NORMAL
                        var var14 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@62bd9062
                        thisRef.m_root = var14;
                        var var15 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@62bd9062
                        var15.parent = null;
                        thisRef.VOIDfreeNodeojcbDynamicTreeNode(thisRef,local_2_REFERENCE);
                        return;
                    case 51 :
                    // NORMAL
                        $S_51 : {
                        // NORMAL
                            var var18 = local_3_REFERENCE.child1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@54eaac7a
                            var var19 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3e22836
                            if ((var18 != var19)) {
                                __label__ = 68;
                                break $S_51;
                            }
                            __label__ = 59;
                            }
                        $M_59_68 : for(;;) switch (__label__) {
                            case 59 :
                            // NORMAL
                                var var20 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4fc2261d
                                var var21 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@62bd9062
                                var20.child1 = var21;
                                break $M_59_68;
                            case 68 :
                            // NORMAL
                                var var22 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4fc2261d
                                var var23 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@62bd9062
                                var22.child2 = var23;
                                break $M_59_68;
                        }
                        $S_74 : {
                        // NORMAL
                            var var24 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@62bd9062
                            var var25 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4fc2261d
                            var24.parent = var25;
                            thisRef.VOIDfreeNodeojcbDynamicTreeNode(thisRef,local_2_REFERENCE);
                            local_5_REFERENCE = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4fc2261d
                            __label__ = 88;
                            }
                        $L_88 : for (;;) {
                            $S_88 : {
                            // NORMAL
                                var var29 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4fc2261d
                                if (var29 == null ) {
                                    __label__ = 163;
                                    break $S_88;
                                }
                                __label__ = 93;
                                }
                            for(;;) switch (__label__) {
                                case 163 :
                                // NORMAL
                                    return;
                                case 93 :
                                // NORMAL
                                    var var31 = thisRef.ojcbDynamicTreeNodebalanceojcbDynamicTreeNode(thisRef,local_5_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6cc605ad
                                    local_5_REFERENCE = var31; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3ca4f29f
                                    var local_6_REFERENCE = local_5_REFERENCE.child1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@283559d1
                                    var local_7_REFERENCE = local_5_REFERENCE.child2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7f62ce3f
                                    local_5_REFERENCE.aabb.VOIDcombineojcAABBojcAABB(local_5_REFERENCE.aabb,local_6_REFERENCE.aabb,local_7_REFERENCE.aabb);
                                    var var44 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4fc2261d
                                    var var49 = ojcMathUtils.INTmaxINTINT(local_6_REFERENCE.height,local_7_REFERENCE.height); // type is INT value type is INT
                                    var var50 = (1 + var49); // type is INT value type is INT
                                    var44.height = var50;
                                    local_5_REFERENCE = local_5_REFERENCE.parent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7eea34d5
                                    __label__ = 88;
                                    continue $L_88;
                            }
                        }
                }
            case 8 :
            // NORMAL
                thisRef.m_root = null;
                return;
        }
    },

    VOIDfreeNodeojcbDynamicTreeNode : function(thisRef,node) {
        var var9 = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcbDynamicTree.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 18;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_18_6 : for(;;) switch (__label__) {
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    if (node != null ) {
                        __label__ = 18;
                        continue $M_18_6;
                    }
                    }
                var var4 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var4);
                throw var4;
            case 18 :
            // NORMAL
                $S_18 : {
                // NORMAL
                    var var1 = ojcbDynamicTree.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                    if ((var1 != 0)) {
                        __label__ = 40;
                        break $S_18;
                    }
                    __label__ = 24;
                    }
                $M_24_40 : for(;;) switch (__label__) {
                    case 24 :
                    // NORMAL
                        $S_24 : {
                        // NORMAL
                            var var2 = thisRef.m_nodeCount; // type is INT value type is INT
                            if ((0 < var2)) {
                                __label__ = 40;
                                continue $M_24_40;
                            }
                            }
                        var var3 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                        jlAssertionError.VOIDinit(var3);
                        throw var3;
                    case 40 :
                    // NORMAL
                        $S_40 : {
                        // NORMAL
                            var var5 = thisRef.m_freeList; // type is INT value type is INT
                            if ((var5 == -1)) {
                                __label__ = 61;
                                break $S_40;
                            }
                            __label__ = 49;
                            }
                        $M_61_49 : for(;;) switch (__label__) {
                            case 61 :
                            // NORMAL
                                var9 = null; // type is REFERENCE value type is REFERENCE
                                break $M_61_49;
                            case 49 :
                            // NORMAL
                                var var8 = thisRef.m_nodes.data[thisRef.m_freeList]; // type is REFERENCE value type is REFERENCE
                                var9 = var8; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@550e3b0b
                                break $M_61_49;
                        }
                        node.parent = var9;
                        node.height = -1;
                        var var10 = node.id; // type is INT value type is INT
                        thisRef.m_freeList = var10;
                        var var12 = (thisRef.m_nodeCount - 1); // type is INT value type is INT
                        thisRef.m_nodeCount = var12;
                        return;
                }
        }
    },

    classInitCheck : function() {
        if (!ojcbDynamicTree.__initialized) {
            ojcbDynamicTree.__initialized = true;
            var thePrototype = ojcbDynamicTree.Create.prototype;
            thePrototype.instanceOf = ojcbDynamicTree.instanceOf;
            thePrototype.ClassgetClass = ojcbDynamicTree.ClassgetClass;
            thePrototype.VOIDfreeNodeojcbDynamicTreeNode = ojcbDynamicTree.VOIDfreeNodeojcbDynamicTreeNode;
            thePrototype.VOIDremoveLeafojcbDynamicTreeNode = ojcbDynamicTree.VOIDremoveLeafojcbDynamicTreeNode;
            thePrototype.BOOLEANmoveProxyINTojcAABBojcVec2 = ojcbDynamicTree.BOOLEANmoveProxyINTojcAABBojcVec2;
            thePrototype.jlObjectgetUserDataINT = ojcbDynamicTree.jlObjectgetUserDataINT;
            thePrototype.VOIDqueryojcTreeCallbackojcAABB = ojcbDynamicTree.VOIDqueryojcTreeCallbackojcAABB;
            thePrototype.ojcAABBgetFatAABBINT = ojcbDynamicTree.ojcAABBgetFatAABBINT;
            thePrototype.ojcbDynamicTreeNodebalanceojcbDynamicTreeNode = ojcbDynamicTree.ojcbDynamicTreeNodebalanceojcbDynamicTreeNode;
            thePrototype.VOIDinsertLeafINT = ojcbDynamicTree.VOIDinsertLeafINT;
            thePrototype.ojcbDynamicTreeNodeallocateNode = ojcbDynamicTree.ojcbDynamicTreeNodeallocateNode;
            thePrototype.INTcreateProxyojcAABBjlObject = ojcbDynamicTree.INTcreateProxyojcAABBjlObject;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            ojcbBroadPhaseStrategy.classInitCheck();
            ojcbDynamicTree.VOIDclinit();
        }
    },

};

var ojcbBroadPhaseStrategy = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 82,
    __implementedTypes : [82,1],


    classInitCheck : function() {
        if (!ojcbBroadPhaseStrategy.__initialized) {
            ojcbBroadPhaseStrategy.__initialized = true;
            jlObject.classInitCheck();
        }
    },

};

var ojcbDynamicTree$TreeNodeStack = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 83,
    __implementedTypes : [83,1],
    $assertionsDisabled : false, // declared in org.jbox2d.collision.broadphase.DynamicTree$TreeNodeStack

    Create : function() {
        this.this$0 = null; // declared in org.jbox2d.collision.broadphase.DynamicTree$TreeNodeStack
        this.stack = null; // declared in org.jbox2d.collision.broadphase.DynamicTree$TreeNodeStack
        this.position = 0; // declared in org.jbox2d.collision.broadphase.DynamicTree$TreeNodeStack
        this.size = 0; // declared in org.jbox2d.collision.broadphase.DynamicTree$TreeNodeStack
    },

    instanceOf : function(aType) {
        return ojcbDynamicTree$TreeNodeStack.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcbDynamicTree$TreeNodeStack;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcbDynamicTree.BOOLEANdesiredAssertionStatus(ojcbDynamicTree); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_9_13 : for(;;) switch (__label__) {
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_9_13;
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_9_13;
        }
        ojcbDynamicTree$TreeNodeStack.$assertionsDisabled = var1;
        return;
    },

    VOIDinitojcbDynamicTreeINT : function(thisRef,p1,initialSize) {
        var __label__ = null;
        thisRef.this$0 = p1;
        var var0 = bytecoder.newArray(initialSize,null); // type is REFERENCE value type is REFERENCE
        thisRef.stack = var0;
        thisRef.position = 0;
        thisRef.size = initialSize;
        return;
    },

    VOIDreset : function(thisRef) {
        var __label__ = null;
        thisRef.position = 0;
        return;
    },

    VOIDpushojcbDynamicTreeNode : function(thisRef,i) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.position; // type is INT value type is INT
            var var1 = thisRef.size; // type is INT value type is INT
            if ((var0 != var1)) {
                __label__ = 50;
                break $S_0;
            }
            __label__ = 11;
            }
        $M_50_11 : for(;;) switch (__label__) {
            case 11 :
            // NORMAL
                var local_2_REFERENCE = thisRef.stack; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@6a3ee42a
                var var6 = bytecoder.newArray((thisRef.size * 2),null); // type is REFERENCE value type is REFERENCE
                thisRef.stack = var6;
                var var8 = thisRef.stack.data.length; // type is INT value type is INT
                thisRef.size = var8;
                jlSystem.VOIDarraycopyjlObjectINTjlObjectINTINT(local_2_REFERENCE,0,thisRef.stack,0,local_2_REFERENCE.data.length);
                __label__ = 50;
                continue $M_50_11;
            case 50 :
            // NORMAL
                var var13 = thisRef.stack; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@53cc953a
                var var14 = thisRef.position; // type is INT value type is INT
                var var15 = (var14 + 1); // type is INT value type is INT
                thisRef.position = var15;
                var13.data[var14] = i;
                return;
        }
    },

    INTgetCount : function(thisRef) {
        var __label__ = null;
        return thisRef.position;
    },

    ojcbDynamicTreeNodepop : function(thisRef) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcbDynamicTree$TreeNodeStack.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 21;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_21_6 : for(;;) switch (__label__) {
            case 21 :
            // NORMAL
                var var2 = thisRef.stack; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@2bd69b1e
                var var4 = (thisRef.position - 1); // type is INT value type is INT
                thisRef.position = var4;
                var var5 = var2.data[var4]; // type is REFERENCE value type is REFERENCE
                return var5;
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    var var1 = thisRef.position; // type is INT value type is INT
                    if ((var1 > 0)) {
                        __label__ = 21;
                        continue $M_21_6;
                    }
                    }
                var var6 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var6);
                throw var6;
        }
    },

    classInitCheck : function() {
        if (!ojcbDynamicTree$TreeNodeStack.__initialized) {
            ojcbDynamicTree$TreeNodeStack.__initialized = true;
            var thePrototype = ojcbDynamicTree$TreeNodeStack.Create.prototype;
            thePrototype.instanceOf = ojcbDynamicTree$TreeNodeStack.instanceOf;
            thePrototype.ClassgetClass = ojcbDynamicTree$TreeNodeStack.ClassgetClass;
            thePrototype.ojcbDynamicTreeNodepop = ojcbDynamicTree$TreeNodeStack.ojcbDynamicTreeNodepop;
            thePrototype.INTgetCount = ojcbDynamicTree$TreeNodeStack.INTgetCount;
            thePrototype.VOIDpushojcbDynamicTreeNode = ojcbDynamicTree$TreeNodeStack.VOIDpushojcbDynamicTreeNode;
            thePrototype.VOIDreset = ojcbDynamicTree$TreeNodeStack.VOIDreset;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            ojcbDynamicTree$TreeNodeStack.VOIDclinit();
        }
    },

};

var ojcbDynamicTreeNode = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 84,
    __implementedTypes : [1,84],

    Create : function() {
        this.aabb = null; // declared in org.jbox2d.collision.broadphase.DynamicTreeNode
        this.id = 0; // declared in org.jbox2d.collision.broadphase.DynamicTreeNode
        this.parent = null; // declared in org.jbox2d.collision.broadphase.DynamicTreeNode
        this.height = 0; // declared in org.jbox2d.collision.broadphase.DynamicTreeNode
        this.child1 = null; // declared in org.jbox2d.collision.broadphase.DynamicTreeNode
        this.child2 = null; // declared in org.jbox2d.collision.broadphase.DynamicTreeNode
        this.userData = null; // declared in org.jbox2d.collision.broadphase.DynamicTreeNode
    },

    instanceOf : function(aType) {
        return ojcbDynamicTreeNode.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcbDynamicTreeNode;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitINT : function(thisRef,id) {
        var __label__ = null;
        var var0 = new ojcAABB.Create(); // type is REFERENCE value type is REFERENCE
        ojcAABB.VOIDinit(var0);
        thisRef.aabb = var0;
        thisRef.id = id;
        return;
    },

    BOOLEANisLeaf : function(thisRef) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.child1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@32019e35
            if (var0 != null ) {
                __label__ = 11;
                break $S_0;
            }
            __label__ = 7;
            }
        for(;;) switch (__label__) {
            case 7 :
            // NORMAL
                var var1 = 1; // type is INT value type is INT
                return var1;
            case 11 :
            // NORMAL
                var var1 = 0; // type is INT value type is INT
                return var1;
        }
    },

    classInitCheck : function() {
        if (!ojcbDynamicTreeNode.__initialized) {
            ojcbDynamicTreeNode.__initialized = true;
            var thePrototype = ojcbDynamicTreeNode.Create.prototype;
            thePrototype.instanceOf = ojcbDynamicTreeNode.instanceOf;
            thePrototype.ClassgetClass = ojcbDynamicTreeNode.ClassgetClass;
            thePrototype.BOOLEANisLeaf = ojcbDynamicTreeNode.BOOLEANisLeaf;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojcAABB = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 85,
    __implementedTypes : [85,1],

    Create : function() {
        this.lowerBound = null; // declared in org.jbox2d.collision.AABB
        this.upperBound = null; // declared in org.jbox2d.collision.AABB
    },

    instanceOf : function(aType) {
        return ojcAABB.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcAABB;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var0);
        thisRef.lowerBound = var0;
        var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var1);
        thisRef.upperBound = var1;
        return;
    },

    FLOATgetPerimeter : function(thisRef) {
        var __label__ = null;
        return (2.0 * (((thisRef.upperBound.x - thisRef.lowerBound.x) + thisRef.upperBound.y) - thisRef.lowerBound.y));
    },

    VOIDcombineojcAABBojcAABB : function(thisRef,aabb1,aab) {
        var var33 = null; // type is REFERENCE # of inits = 1
        var var0 = null; // type is REFERENCE # of inits = 1
        var var21 = null; // type is FLOAT # of inits = 2
        var var43 = null; // type is FLOAT # of inits = 2
        var var11 = null; // type is REFERENCE # of inits = 1
        var var22 = null; // type is REFERENCE # of inits = 1
        var var10 = null; // type is FLOAT # of inits = 2
        var var32 = null; // type is FLOAT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var0 = thisRef.lowerBound; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@649a537f
            var var2 = aabb1.lowerBound.x; // type is FLOAT value type is FLOAT
            var var4 = aab.lowerBound.x; // type is FLOAT value type is FLOAT
            if ((var2 >= var4)) {
                __label__ = 32;
                break $S_0;
            }
            __label__ = 22;
            }
        $M_22_32 : for(;;) switch (__label__) {
            case 22 :
            // NORMAL
                var10 = aabb1.lowerBound.x; // type is FLOAT value type is FLOAT
                break $M_22_32;
            case 32 :
            // NORMAL
                var10 = aab.lowerBound.x; // type is FLOAT value type is FLOAT
                break $M_22_32;
        }
        $S_39 : {
        // NORMAL
            var0.x = var10;
            var11 = thisRef.lowerBound; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@77636961
            var var13 = aabb1.lowerBound.y; // type is FLOAT value type is FLOAT
            var var15 = aab.lowerBound.y; // type is FLOAT value type is FLOAT
            if ((var13 >= var15)) {
                __label__ = 74;
                break $S_39;
            }
            __label__ = 64;
            }
        $M_74_64 : for(;;) switch (__label__) {
            case 74 :
            // NORMAL
                var21 = aab.lowerBound.y; // type is FLOAT value type is FLOAT
                break $M_74_64;
            case 64 :
            // NORMAL
                var21 = aabb1.lowerBound.y; // type is FLOAT value type is FLOAT
                break $M_74_64;
        }
        $S_81 : {
        // NORMAL
            var11.y = var21;
            var22 = thisRef.upperBound; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@48fbb01
            var var24 = aabb1.upperBound.x; // type is FLOAT value type is FLOAT
            var var26 = aab.upperBound.x; // type is FLOAT value type is FLOAT
            if ((var24 <= var26)) {
                __label__ = 116;
                break $S_81;
            }
            __label__ = 106;
            }
        $M_106_116 : for(;;) switch (__label__) {
            case 106 :
            // NORMAL
                var32 = aabb1.upperBound.x; // type is FLOAT value type is FLOAT
                break $M_106_116;
            case 116 :
            // NORMAL
                var32 = aab.upperBound.x; // type is FLOAT value type is FLOAT
                break $M_106_116;
        }
        $S_123 : {
        // NORMAL
            var22.x = var32;
            var33 = thisRef.upperBound; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@40e1e209
            var var35 = aabb1.upperBound.y; // type is FLOAT value type is FLOAT
            var var37 = aab.upperBound.y; // type is FLOAT value type is FLOAT
            if ((var35 <= var37)) {
                __label__ = 158;
                break $S_123;
            }
            __label__ = 148;
            }
        $M_148_158 : for(;;) switch (__label__) {
            case 148 :
            // NORMAL
                var43 = aabb1.upperBound.y; // type is FLOAT value type is FLOAT
                break $M_148_158;
            case 158 :
            // NORMAL
                var43 = aab.upperBound.y; // type is FLOAT value type is FLOAT
                break $M_148_158;
        }
        var33.y = var43;
        return;
    },

    BOOLEANtestOverlapojcAABBojcAABB : function(a,b) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var4 = (b.lowerBound.x - a.upperBound.x); // type is FLOAT value type is FLOAT
            if ((var4 > 0.0)) {
                return 0;
            }
            }
        $S_20 : {
        // NORMAL
            var var10 = (b.lowerBound.y - a.upperBound.y); // type is FLOAT value type is FLOAT
            if ((var10 <= 0.0)) {
                break $S_20;
            }
            return 0;
            }
        $S_42 : {
        // NORMAL
            var var16 = (a.lowerBound.x - b.upperBound.x); // type is FLOAT value type is FLOAT
            if ((var16 > 0.0)) {
                return 0;
            }
            }
        var var22 = (a.lowerBound.y - b.upperBound.y); // type is FLOAT value type is FLOAT
        if ((var22 <= 0.0)) {
            return 1;
        }
        return 0;
    },

    jlStringtoString : function(thisRef) {
        var __label__ = null;
        var var0 = new jlStringBuilder.Create(); // type is REFERENCE value type is REFERENCE
        jlStringBuilder.VOIDinit(var0);
        var var1 = var0.jlStringBuilderappendjlString(var0,bytecoder.stringpool[32]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@793b3ecb
        var var3 = var1.jlStringBuilderappendjlObject(var1,thisRef.lowerBound); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7773433e
        var var4 = var3.jlStringBuilderappendjlString(var3,bytecoder.stringpool[33]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@64ea793e
        var var6 = var4.jlStringBuilderappendjlObject(var4,thisRef.upperBound); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@342e7991
        var var7 = var6.jlStringBuilderappendjlString(var6,bytecoder.stringpool[34]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@14c3c4b9
        var var8 = var7.jlStringtoString(var7); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@79440fac
        var local_1_REFERENCE = var8; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4ed0aa33
        return local_1_REFERENCE;
    },

    classInitCheck : function() {
        if (!ojcAABB.__initialized) {
            ojcAABB.__initialized = true;
            var thePrototype = ojcAABB.Create.prototype;
            thePrototype.instanceOf = ojcAABB.instanceOf;
            thePrototype.ClassgetClass = ojcAABB.ClassgetClass;
            thePrototype.jlStringtoString = ojcAABB.jlStringtoString;
            thePrototype.VOIDcombineojcAABBojcAABB = ojcAABB.VOIDcombineojcAABBojcAABB;
            thePrototype.FLOATgetPerimeter = ojcAABB.FLOATgetPerimeter;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojcRayCastInput = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 86,
    __implementedTypes : [86,1],

    Create : function() {
        this.p1 = null; // declared in org.jbox2d.collision.RayCastInput
        this.p2 = null; // declared in org.jbox2d.collision.RayCastInput
        this.maxFraction = 0; // declared in org.jbox2d.collision.RayCastInput
    },

    instanceOf : function(aType) {
        return ojcRayCastInput.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcRayCastInput;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var0);
        thisRef.p1 = var0;
        var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var1);
        thisRef.p2 = var1;
        thisRef.maxFraction = 0.0;
        return;
    },

    classInitCheck : function() {
        if (!ojcRayCastInput.__initialized) {
            ojcRayCastInput.__initialized = true;
            var thePrototype = ojcRayCastInput.Create.prototype;
            thePrototype.instanceOf = ojcRayCastInput.instanceOf;
            thePrototype.ClassgetClass = ojcRayCastInput.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojcColor3f = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 87,
    __implementedTypes : [87,1],
    WHITE : null, // declared in org.jbox2d.common.Color3f
    BLACK : null, // declared in org.jbox2d.common.Color3f
    BLUE : null, // declared in org.jbox2d.common.Color3f
    GREEN : null, // declared in org.jbox2d.common.Color3f
    RED : null, // declared in org.jbox2d.common.Color3f

    Create : function() {
        this.x = 0; // declared in org.jbox2d.common.Color3f
        this.y = 0; // declared in org.jbox2d.common.Color3f
        this.z = 0; // declared in org.jbox2d.common.Color3f
    },

    instanceOf : function(aType) {
        return ojcColor3f.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcColor3f;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var __label__ = null;
        var var0 = new ojcColor3f.Create(); // type is REFERENCE value type is REFERENCE
        ojcColor3f.VOIDinitFLOATFLOATFLOAT(var0,1.0,1.0,1.0);
        ojcColor3f.WHITE = var0;
        var var1 = new ojcColor3f.Create(); // type is REFERENCE value type is REFERENCE
        ojcColor3f.VOIDinitFLOATFLOATFLOAT(var1,0.0,0.0,0.0);
        ojcColor3f.BLACK = var1;
        var var2 = new ojcColor3f.Create(); // type is REFERENCE value type is REFERENCE
        ojcColor3f.VOIDinitFLOATFLOATFLOAT(var2,0.0,0.0,1.0);
        ojcColor3f.BLUE = var2;
        var var3 = new ojcColor3f.Create(); // type is REFERENCE value type is REFERENCE
        ojcColor3f.VOIDinitFLOATFLOATFLOAT(var3,0.0,1.0,0.0);
        ojcColor3f.GREEN = var3;
        var var4 = new ojcColor3f.Create(); // type is REFERENCE value type is REFERENCE
        ojcColor3f.VOIDinitFLOATFLOATFLOAT(var4,1.0,0.0,0.0);
        ojcColor3f.RED = var4;
        return;
    },

    VOIDinitFLOATFLOATFLOAT : function(thisRef,r,g,b) {
        var __label__ = null;
        thisRef.x = r;
        thisRef.y = g;
        thisRef.z = b;
        return;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        thisRef.z = 0.0;
        thisRef.y = 0.0;
        thisRef.x = 0.0;
        return;
    },

    classInitCheck : function() {
        if (!ojcColor3f.__initialized) {
            ojcColor3f.__initialized = true;
            var thePrototype = ojcColor3f.Create.prototype;
            thePrototype.instanceOf = ojcColor3f.instanceOf;
            thePrototype.ClassgetClass = ojcColor3f.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            ojcColor3f.VOIDclinit();
        }
    },

};

var ojdcContactRegister = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 88,
    __implementedTypes : [88,1],

    Create : function() {
        this.creator = null; // declared in org.jbox2d.dynamics.contacts.ContactRegister
        this.primary = false; // declared in org.jbox2d.dynamics.contacts.ContactRegister
    },

    instanceOf : function(aType) {
        return ojdcContactRegister.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdcContactRegister;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    classInitCheck : function() {
        if (!ojdcContactRegister.__initialized) {
            ojdcContactRegister.__initialized = true;
            var thePrototype = ojdcContactRegister.Create.prototype;
            thePrototype.instanceOf = ojdcContactRegister.instanceOf;
            thePrototype.ClassgetClass = ojdcContactRegister.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojdTimeStep = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 89,
    __implementedTypes : [1,89],

    Create : function() {
        this.dt = 0; // declared in org.jbox2d.dynamics.TimeStep
        this.velocityIterations = 0; // declared in org.jbox2d.dynamics.TimeStep
        this.positionIterations = 0; // declared in org.jbox2d.dynamics.TimeStep
        this.inv_dt = 0; // declared in org.jbox2d.dynamics.TimeStep
        this.dtRatio = 0; // declared in org.jbox2d.dynamics.TimeStep
        this.warmStarting = false; // declared in org.jbox2d.dynamics.TimeStep
    },

    instanceOf : function(aType) {
        return ojdTimeStep.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdTimeStep;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    classInitCheck : function() {
        if (!ojdTimeStep.__initialized) {
            ojdTimeStep.__initialized = true;
            var thePrototype = ojdTimeStep.Create.prototype;
            thePrototype.instanceOf = ojdTimeStep.instanceOf;
            thePrototype.ClassgetClass = ojdTimeStep.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojcTimer = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 90,
    __implementedTypes : [90,1],

    Create : function() {
        this.resetNanos = 0; // declared in org.jbox2d.common.Timer
    },

    instanceOf : function(aType) {
        return ojcTimer.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcTimer;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        thisRef.VOIDreset(thisRef);
        return;
    },

    VOIDreset : function(thisRef) {
        var __label__ = null;
        var var0 = jlSystem.LONGnanoTime(); // type is LONG value type is LONG
        thisRef.resetNanos = var0;
        return;
    },

    FLOATgetMilliseconds : function(thisRef) {
        var __label__ = null;
        var var0 = jlSystem.LONGnanoTime(); // type is LONG value type is LONG
        return ((Math.floor(((var0 - thisRef.resetNanos) / 1000)) * 1.0) / 1000.0);
    },

    classInitCheck : function() {
        if (!ojcTimer.__initialized) {
            ojcTimer.__initialized = true;
            var thePrototype = ojcTimer.Create.prototype;
            thePrototype.instanceOf = ojcTimer.instanceOf;
            thePrototype.ClassgetClass = ojcTimer.ClassgetClass;
            thePrototype.FLOATgetMilliseconds = ojcTimer.FLOATgetMilliseconds;
            thePrototype.VOIDreset = ojcTimer.VOIDreset;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojpaVec2Array = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 91,
    __implementedTypes : [91,1],
    $assertionsDisabled : false, // declared in org.jbox2d.pooling.arrays.Vec2Array

    Create : function() {
        this.map = null; // declared in org.jbox2d.pooling.arrays.Vec2Array
    },

    instanceOf : function(aType) {
        return ojpaVec2Array.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojpaVec2Array;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojpaVec2Array.BOOLEANdesiredAssertionStatus(ojpaVec2Array); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_9_13 : for(;;) switch (__label__) {
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_9_13;
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_9_13;
        }
        ojpaVec2Array.$assertionsDisabled = var1;
        return;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = new juHashMap.Create(); // type is REFERENCE value type is REFERENCE
        juHashMap.VOIDinit(var0);
        thisRef.map = var0;
        return;
    },

    A1ojcVec2getINT : function(thisRef,argLength) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojpaVec2Array.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 18;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_6_18 : for(;;) switch (__label__) {
            case 18 :
            // NORMAL
                $S_18 : {
                // NORMAL
                    var var2 = thisRef.map; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7cc32ab4
                    var var3 = jlInteger.jlIntegervalueOfINT(argLength); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@59c5d4bc
                    var var4 = var2.BOOLEANcontainsKeyjlObject(var2,var3); // type is BOOLEAN value type is BOOLEAN
                    if ((var4 != 0)) {
                        __label__ = 49;
                        break $S_18;
                    }
                    __label__ = 32;
                    }
                $M_49_32 : for(;;) switch (__label__) {
                    case 32 :
                    // NORMAL
                        var var5 = thisRef.map; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@a1952c8
                        var var6 = jlInteger.jlIntegervalueOfINT(argLength); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7881fa57
                        var var7 = thisRef.A1ojcVec2getInitializedArrayINT(thisRef,argLength); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1df2e979
                        var var8 = var5.jlObjectputjlObjectjlObject(var5,var6,var7); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6ae5ae4f
                        __label__ = 49;
                        continue $M_49_32;
                    case 49 :
                    // NORMAL
                        $S_49 : {
                        // NORMAL
                            var var9 = ojpaVec2Array.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                            if ((var9 != 0)) {
                                __label__ = 84;
                                break $S_49;
                            }
                            __label__ = 55;
                            }
                        $M_55_84 : for(;;) switch (__label__) {
                            case 84 :
                            // NORMAL
                                var var15 = thisRef.map; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2aaa2ec9
                                var var16 = jlInteger.jlIntegervalueOfINT(argLength); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5d8e3a89
                                var var17 = var15.jlObjectgetjlObject(var15,var16); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@573da960
                                return var17;
                            case 55 :
                            // NORMAL
                                $S_55 : {
                                // NORMAL
                                    var var10 = thisRef.map; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@106de21e
                                    var var11 = jlInteger.jlIntegervalueOfINT(argLength); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6bca4abc
                                    var var12 = var10.jlObjectgetjlObject(var10,var11); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@47bc7f3e
                                    var var13 = var12.data.length; // type is INT value type is INT
                                    if ((var13 == argLength)) {
                                        __label__ = 84;
                                        continue $M_55_84;
                                    }
                                    }
                                var var14 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                jlAssertionError.VOIDinitjlObject(var14,bytecoder.stringpool[35]);
                                throw var14;
                        }
                }
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    if ((argLength > 0)) {
                        __label__ = 18;
                        continue $M_6_18;
                    }
                    }
                var var1 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var1);
                throw var1;
        }
    },

    A1ojcVec2getInitializedArrayINT : function(thisRef,argLength) {
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_3_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_2_REFERENCE = bytecoder.newArray(argLength,null); // type is REFERENCE value type is REFERENCE
            local_3_INT = 0; // type is INT value type is INT
            __label__ = 7;
            }
        $L_7 : for (;;) {
            $S_7 : {
            // NORMAL
                var var4 = local_3_INT; // type is INT value type is INT
                var var6 = local_2_REFERENCE.data.length; // type is INT value type is INT
                if ((var4 >= var6)) {
                    return local_2_REFERENCE;
                }
                }
            var var7 = local_2_REFERENCE; // type is REFERENCE value type is REFERENCE
            var var8 = local_3_INT; // type is INT value type is INT
            var var9 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var9);
            var7.data[var8] = var9;
            local_3_INT = (local_3_INT + 1); // type is INT value type is INT
            __label__ = 7;
            continue $L_7;
        }
    },

    classInitCheck : function() {
        if (!ojpaVec2Array.__initialized) {
            ojpaVec2Array.__initialized = true;
            var thePrototype = ojpaVec2Array.Create.prototype;
            thePrototype.instanceOf = ojpaVec2Array.instanceOf;
            thePrototype.ClassgetClass = ojpaVec2Array.ClassgetClass;
            thePrototype.A1ojcVec2getInitializedArrayINT = ojpaVec2Array.A1ojcVec2getInitializedArrayINT;
            thePrototype.A1ojcVec2getINT = ojpaVec2Array.A1ojcVec2getINT;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            ojpaVec2Array.VOIDclinit();
        }
    },

};

var ojdWorldQueryWrapper = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 92,
    __implementedTypes : [92,93,1],

    Create : function() {
        this.broadPhase = null; // declared in org.jbox2d.dynamics.WorldQueryWrapper
        this.callback = null; // declared in org.jbox2d.dynamics.WorldQueryWrapper
    },

    instanceOf : function(aType) {
        return ojdWorldQueryWrapper.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdWorldQueryWrapper;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    BOOLEANtreeCallbackINT : function(thisRef,nodeId) {
        var __label__ = null;
        var var1 = thisRef.broadPhase.jlObjectgetUserDataINT(thisRef.broadPhase,nodeId); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@64f28e49
        var local_2_REFERENCE = var1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7d0d5f90
        var var6 = thisRef.callback.BOOLEANreportFixtureojdFixture(thisRef.callback,local_2_REFERENCE.fixture); // type is BOOLEAN value type is BOOLEAN
        return var6;
    },

    classInitCheck : function() {
        if (!ojdWorldQueryWrapper.__initialized) {
            ojdWorldQueryWrapper.__initialized = true;
            var thePrototype = ojdWorldQueryWrapper.Create.prototype;
            thePrototype.instanceOf = ojdWorldQueryWrapper.instanceOf;
            thePrototype.ClassgetClass = ojdWorldQueryWrapper.ClassgetClass;
            thePrototype.BOOLEANtreeCallbackINT = ojdWorldQueryWrapper.BOOLEANtreeCallbackINT;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            ojcTreeCallback.classInitCheck();
        }
    },

};

var ojcTreeCallback = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 93,
    __implementedTypes : [93,1],


    classInitCheck : function() {
        if (!ojcTreeCallback.__initialized) {
            ojcTreeCallback.__initialized = true;
            jlObject.classInitCheck();
        }
    },

};

var ojdWorldRayCastWrapper = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 94,
    __implementedTypes : [95,94,1],

    Create : function() {
        this.output = null; // declared in org.jbox2d.dynamics.WorldRayCastWrapper
        this.temp = null; // declared in org.jbox2d.dynamics.WorldRayCastWrapper
        this.point = null; // declared in org.jbox2d.dynamics.WorldRayCastWrapper
    },

    instanceOf : function(aType) {
        return ojdWorldRayCastWrapper.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdWorldRayCastWrapper;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcRayCastOutput.Create(); // type is REFERENCE value type is REFERENCE
        ojcRayCastOutput.VOIDinit(var0);
        thisRef.output = var0;
        var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var1);
        thisRef.temp = var1;
        var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var2);
        thisRef.point = var2;
        return;
    },

    classInitCheck : function() {
        if (!ojdWorldRayCastWrapper.__initialized) {
            ojdWorldRayCastWrapper.__initialized = true;
            var thePrototype = ojdWorldRayCastWrapper.Create.prototype;
            thePrototype.instanceOf = ojdWorldRayCastWrapper.instanceOf;
            thePrototype.ClassgetClass = ojdWorldRayCastWrapper.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            ojcTreeRayCastCallback.classInitCheck();
        }
    },

};

var ojcTreeRayCastCallback = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 95,
    __implementedTypes : [95,1],


    classInitCheck : function() {
        if (!ojcTreeRayCastCallback.__initialized) {
            ojcTreeRayCastCallback.__initialized = true;
            jlObject.classInitCheck();
        }
    },

};

var ojcRayCastOutput = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 96,
    __implementedTypes : [96,1],

    Create : function() {
        this.normal = null; // declared in org.jbox2d.collision.RayCastOutput
        this.fraction = 0; // declared in org.jbox2d.collision.RayCastOutput
    },

    instanceOf : function(aType) {
        return ojcRayCastOutput.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcRayCastOutput;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var0);
        thisRef.normal = var0;
        thisRef.fraction = 0.0;
        return;
    },

    classInitCheck : function() {
        if (!ojcRayCastOutput.__initialized) {
            ojcRayCastOutput.__initialized = true;
            var thePrototype = ojcRayCastOutput.Create.prototype;
            thePrototype.instanceOf = ojcRayCastOutput.instanceOf;
            thePrototype.ClassgetClass = ojcRayCastOutput.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojdIsland = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 97,
    __implementedTypes : [97,1],
    $assertionsDisabled : false, // declared in org.jbox2d.dynamics.Island

    Create : function() {
        this.contactSolver = null; // declared in org.jbox2d.dynamics.Island
        this.timer = null; // declared in org.jbox2d.dynamics.Island
        this.solverData = null; // declared in org.jbox2d.dynamics.Island
        this.solverDef = null; // declared in org.jbox2d.dynamics.Island
        this.toiContactSolver = null; // declared in org.jbox2d.dynamics.Island
        this.toiSolverDef = null; // declared in org.jbox2d.dynamics.Island
        this.impulse = null; // declared in org.jbox2d.dynamics.Island
        this.m_bodyCapacity = 0; // declared in org.jbox2d.dynamics.Island
        this.m_contactCapacity = 0; // declared in org.jbox2d.dynamics.Island
        this.m_jointCapacity = 0; // declared in org.jbox2d.dynamics.Island
        this.m_bodyCount = 0; // declared in org.jbox2d.dynamics.Island
        this.m_contactCount = 0; // declared in org.jbox2d.dynamics.Island
        this.m_jointCount = 0; // declared in org.jbox2d.dynamics.Island
        this.m_listener = null; // declared in org.jbox2d.dynamics.Island
        this.m_bodies = null; // declared in org.jbox2d.dynamics.Island
        this.m_joints = null; // declared in org.jbox2d.dynamics.Island
        this.m_contacts = null; // declared in org.jbox2d.dynamics.Island
        this.m_velocities = null; // declared in org.jbox2d.dynamics.Island
        this.m_positions = null; // declared in org.jbox2d.dynamics.Island
    },

    instanceOf : function(aType) {
        return ojdIsland.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdIsland;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdIsland.BOOLEANdesiredAssertionStatus(ojdIsland); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_13_9 : for(;;) switch (__label__) {
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_13_9;
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_13_9;
        }
        ojdIsland.$assertionsDisabled = var1;
        return;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = new ojdcContactSolver.Create(); // type is REFERENCE value type is REFERENCE
        ojdcContactSolver.VOIDinit(var0);
        thisRef.contactSolver = var0;
        var var1 = new ojcTimer.Create(); // type is REFERENCE value type is REFERENCE
        ojcTimer.VOIDinit(var1);
        thisRef.timer = var1;
        var var2 = new ojdSolverData.Create(); // type is REFERENCE value type is REFERENCE
        ojdSolverData.VOIDinit(var2);
        thisRef.solverData = var2;
        var var3 = new ojdcContactSolver$ContactSolverDef.Create(); // type is REFERENCE value type is REFERENCE
        ojdcContactSolver$ContactSolverDef.VOIDinit(var3);
        thisRef.solverDef = var3;
        var var4 = new ojdcContactSolver.Create(); // type is REFERENCE value type is REFERENCE
        ojdcContactSolver.VOIDinit(var4);
        thisRef.toiContactSolver = var4;
        var var5 = new ojdcContactSolver$ContactSolverDef.Create(); // type is REFERENCE value type is REFERENCE
        ojdcContactSolver$ContactSolverDef.VOIDinit(var5);
        thisRef.toiSolverDef = var5;
        var var6 = new ojcContactImpulse.Create(); // type is REFERENCE value type is REFERENCE
        ojcContactImpulse.VOIDinit(var6);
        thisRef.impulse = var6;
        return;
    },

    VOIDinitINTINTINTojcContactListener : function(thisRef,bodyCapacity,contactCapacity,jointCapacity,listener) {
        var var47 = null; // type is REFERENCE # of inits = 2
        var local_6_INT = null; // type is INT # of inits = 6
        var var25 = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            thisRef.m_bodyCapacity = bodyCapacity;
            thisRef.m_contactCapacity = contactCapacity;
            thisRef.m_jointCapacity = jointCapacity;
            thisRef.m_bodyCount = 0;
            thisRef.m_contactCount = 0;
            thisRef.m_jointCount = 0;
            thisRef.m_listener = listener;
            var var0 = thisRef.m_bodies; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@f95dab4
            if (var0 == null ) {
                __label__ = 55;
                break $S_0;
            }
            __label__ = 43;
            }
        $M_55_43 : for(;;) switch (__label__) {
            case 43 :
            // NORMAL
                var var1 = thisRef.m_bodyCapacity; // type is INT value type is INT
                var var3 = thisRef.m_bodies.data.length; // type is INT value type is INT
                if ((var1 <= var3)) {
                    break $M_55_43;
                }
                __label__ = 55;
                continue $M_55_43;
            case 55 :
            // NORMAL
                var var5 = bytecoder.newArray(thisRef.m_bodyCapacity,null); // type is REFERENCE value type is REFERENCE
                thisRef.m_bodies = var5;
                break $M_55_43;
        }
        $S_66 : {
        // NORMAL
            var var6 = thisRef.m_joints; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@13510c5c
            if (var6 == null ) {
                __label__ = 85;
                break $S_66;
            }
            __label__ = 73;
            }
        $M_73_85 : for(;;) switch (__label__) {
            case 73 :
            // NORMAL
                var var7 = thisRef.m_jointCapacity; // type is INT value type is INT
                var var9 = thisRef.m_joints.data.length; // type is INT value type is INT
                if ((var7 <= var9)) {
                    break $M_73_85;
                }
                __label__ = 85;
                continue $M_73_85;
            case 85 :
            // NORMAL
                var var11 = bytecoder.newArray(thisRef.m_jointCapacity,null); // type is REFERENCE value type is REFERENCE
                thisRef.m_joints = var11;
                break $M_73_85;
        }
        $S_96 : {
        // NORMAL
            var var12 = thisRef.m_contacts; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@b623d82
            if (var12 == null ) {
                __label__ = 115;
                break $S_96;
            }
            __label__ = 103;
            }
        $M_103_115 : for(;;) switch (__label__) {
            case 115 :
            // NORMAL
                var var17 = bytecoder.newArray(thisRef.m_contactCapacity,null); // type is REFERENCE value type is REFERENCE
                thisRef.m_contacts = var17;
                break $M_103_115;
            case 103 :
            // NORMAL
                var var13 = thisRef.m_contactCapacity; // type is INT value type is INT
                var var15 = thisRef.m_contacts.data.length; // type is INT value type is INT
                if ((var13 <= var15)) {
                    break $M_103_115;
                }
                __label__ = 115;
                continue $M_103_115;
        }
        $S_126 : {
        // NORMAL
            var var18 = thisRef.m_velocities; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3e5bd295
            if (var18 == null ) {
                __label__ = 145;
                break $S_126;
            }
            __label__ = 133;
            }
        $M_133_145 : for(;;) switch (__label__) {
            case 145 :
            // NORMAL
                $S_145 : {
                // NORMAL
                    var var22 = thisRef.m_velocities; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1fbaef90
                    if (var22 != null ) {
                        __label__ = 159;
                        break $S_145;
                    }
                    __label__ = 152;
                    }
                $M_159_152 : for(;;) switch (__label__) {
                    case 152 :
                    // NORMAL
                        var25 = bytecoder.newArray(0,null); // type is REFERENCE value type is REFERENCE
                        break $M_159_152;
                    case 159 :
                    // NORMAL
                        var25 = thisRef.m_velocities; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@41223d7
                        break $M_159_152;
                }
                $S_163 : {
                // NORMAL
                    var local_5_REFERENCE = var25; // type is REFERENCE value type is REFERENCE
                    var var28 = bytecoder.newArray(thisRef.m_bodyCapacity,null); // type is REFERENCE value type is REFERENCE
                    thisRef.m_velocities = var28;
                    jlSystem.VOIDarraycopyjlObjectINTjlObjectINTINT(local_5_REFERENCE,0,thisRef.m_velocities,0,local_5_REFERENCE.data.length);
                    local_6_INT = local_5_REFERENCE.data.length; // type is INT value type is INT
                    __label__ = 195;
                    }
                $L_195 : for (;;) {
                    $S_195 : {
                    // NORMAL
                        var var37 = local_6_INT; // type is INT value type is INT
                        var var39 = thisRef.m_velocities.data.length; // type is INT value type is INT
                        if ((var37 >= var39)) {
                            break $M_133_145;
                        }
                        }
                    var var63 = thisRef.m_velocities; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1e8680fa
                    var var64 = local_6_INT; // type is INT value type is INT
                    var var65 = new ojdcVelocity.Create(); // type is REFERENCE value type is REFERENCE
                    ojdcVelocity.VOIDinit(var65);
                    var63.data[var64] = var65;
                    local_6_INT = (local_6_INT + 1); // type is INT value type is INT
                    __label__ = 195;
                    continue $L_195;
                }
            case 133 :
            // NORMAL
                var var19 = thisRef.m_bodyCapacity; // type is INT value type is INT
                var var21 = thisRef.m_velocities.data.length; // type is INT value type is INT
                if ((var19 <= var21)) {
                    break $M_133_145;
                }
                __label__ = 145;
                continue $M_133_145;
        }
        $S_225 : {
        // NORMAL
            var var40 = thisRef.m_positions; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@362780ef
            if (var40 == null ) {
                __label__ = 244;
                break $S_225;
            }
            __label__ = 232;
            }
        $M_232_244 : for(;;) switch (__label__) {
            case 244 :
            // NORMAL
                $S_244 : {
                // NORMAL
                    var var44 = thisRef.m_positions; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@23be0167
                    if (var44 != null ) {
                        __label__ = 258;
                        break $S_244;
                    }
                    __label__ = 251;
                    }
                $M_258_251 : for(;;) switch (__label__) {
                    case 251 :
                    // NORMAL
                        var47 = bytecoder.newArray(0,null); // type is REFERENCE value type is REFERENCE
                        break $M_258_251;
                    case 258 :
                    // NORMAL
                        var47 = thisRef.m_positions; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@915d4ba
                        break $M_258_251;
                }
                $S_262 : {
                // NORMAL
                    var local_5_REFERENCE = var47; // type is REFERENCE value type is REFERENCE
                    var var49 = bytecoder.newArray(thisRef.m_bodyCapacity,null); // type is REFERENCE value type is REFERENCE
                    thisRef.m_positions = var49;
                    jlSystem.VOIDarraycopyjlObjectINTjlObjectINTINT(local_5_REFERENCE,0,thisRef.m_positions,0,local_5_REFERENCE.data.length);
                    local_6_INT = local_5_REFERENCE.data.length; // type is INT value type is INT
                    __label__ = 294;
                    }
                $L_294 : for (;;) {
                    $S_294 : {
                    // NORMAL
                        var var57 = local_6_INT; // type is INT value type is INT
                        var var59 = thisRef.m_positions.data.length; // type is INT value type is INT
                        if ((var57 >= var59)) {
                            return;
                        }
                        }
                    var var60 = thisRef.m_positions; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3ebdd443
                    var var61 = local_6_INT; // type is INT value type is INT
                    var var62 = new ojdcPosition.Create(); // type is REFERENCE value type is REFERENCE
                    ojdcPosition.VOIDinit(var62);
                    var60.data[var61] = var62;
                    local_6_INT = (local_6_INT + 1); // type is INT value type is INT
                    __label__ = 294;
                    continue $L_294;
                }
            case 232 :
            // NORMAL
                var var41 = thisRef.m_bodyCapacity; // type is INT value type is INT
                var var43 = thisRef.m_positions.data.length; // type is INT value type is INT
                if ((var41 <= var43)) {
                    return;
                }
                __label__ = 244;
                continue $M_232_244;
        }
    },

    VOIDclear : function(thisRef) {
        var __label__ = null;
        thisRef.m_bodyCount = 0;
        thisRef.m_contactCount = 0;
        thisRef.m_jointCount = 0;
        return;
    },

    VOIDaddojdBody : function(thisRef,body) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdIsland.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 25;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_25_6 : for(;;) switch (__label__) {
            case 25 :
            // NORMAL
                var var3 = thisRef.m_bodyCount; // type is INT value type is INT
                body.m_islandIndex = var3;
                var var4 = thisRef.m_bodies; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@4392956d
                var var5 = thisRef.m_bodyCount; // type is INT value type is INT
                var4.data[var5] = body;
                var var7 = (thisRef.m_bodyCount + 1); // type is INT value type is INT
                thisRef.m_bodyCount = var7;
                return;
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    var var1 = thisRef.m_bodyCount; // type is INT value type is INT
                    var var2 = thisRef.m_bodyCapacity; // type is INT value type is INT
                    if ((var1 < var2)) {
                        __label__ = 25;
                        continue $M_25_6;
                    }
                    }
                var var8 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var8);
                throw var8;
        }
    },

    VOIDaddojdcContact : function(thisRef,contact) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdIsland.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 25;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_25_6 : for(;;) switch (__label__) {
            case 25 :
            // NORMAL
                var var3 = thisRef.m_contacts; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@16b2c249
                var var4 = thisRef.m_contactCount; // type is INT value type is INT
                var var5 = (var4 + 1); // type is INT value type is INT
                thisRef.m_contactCount = var5;
                var3.data[var4] = contact;
                return;
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    var var1 = thisRef.m_contactCount; // type is INT value type is INT
                    var var2 = thisRef.m_contactCapacity; // type is INT value type is INT
                    if ((var1 < var2)) {
                        __label__ = 25;
                        continue $M_25_6;
                    }
                    }
                var var6 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var6);
                throw var6;
        }
    },

    VOIDaddojdjJoint : function(thisRef,joint) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdIsland.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 25;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_6_25 : for(;;) switch (__label__) {
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    var var1 = thisRef.m_jointCount; // type is INT value type is INT
                    var var2 = thisRef.m_jointCapacity; // type is INT value type is INT
                    if ((var1 < var2)) {
                        __label__ = 25;
                        continue $M_6_25;
                    }
                    }
                var var3 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var3);
                throw var3;
            case 25 :
            // NORMAL
                var var4 = thisRef.m_joints; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3ad14d90
                var var5 = thisRef.m_jointCount; // type is INT value type is INT
                var var6 = (var5 + 1); // type is INT value type is INT
                thisRef.m_jointCount = var6;
                var4.data[var5] = joint;
                return;
        }
    },

    VOIDsolveojdProfileojdTimeStepojcVec2BOOLEAN : function(thisRef,profile,step,gravity,allowSleep) {
        var local_10_INT = null; // type is INT # of inits = 9
        var local_13_FLOAT = null; // type is FLOAT # of inits = 2
        var local_10_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_11_BOOLEAN = null; // type is BOOLEAN # of inits = 1
        var local_9_INT = null; // type is INT # of inits = 3
        var local_9_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_11_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_8_BOOLEAN = null; // type is BOOLEAN # of inits = 2
        var local_8_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_5_FLOAT = null; // type is FLOAT # of inits = 9
        var local_9_FLOAT = null; // type is FLOAT # of inits = 2
        var local_6_INT = null; // type is INT # of inits = 18
        var local_12_FLOAT = null; // type is FLOAT # of inits = 2
        var local_7_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_7_INT = null; // type is INT # of inits = 10
        var local_10_FLOAT = null; // type is FLOAT # of inits = 2
        var local_7_FLOAT = null; // type is FLOAT # of inits = 4
        var local_8_FLOAT = null; // type is FLOAT # of inits = 3
        var var67 = null; // type is INT # of inits = 2
        var local_11_FLOAT = null; // type is FLOAT # of inits = 4
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_5_FLOAT = step.dt; // type is FLOAT value type is FLOAT
            local_6_INT = 0; // type is INT value type is INT
            __label__ = 9;
            }
        $L_9 : for (;;) {
            $S_9 : {
            // NORMAL
                var var5 = local_6_INT; // type is INT value type is INT
                var var6 = thisRef.m_bodyCount; // type is INT value type is INT
                if ((var5 >= var6)) {
                    __label__ = 366;
                    break $S_9;
                }
                __label__ = 18;
                }
            for(;;) switch (__label__) {
                case 366 :
                // NORMAL
                    $S_366 : {
                    // NORMAL
                        thisRef.timer.VOIDreset(thisRef.timer);
                        var var8 = thisRef.solverData; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@353e68cd
                        var8.step = step;
                        var var9 = thisRef.solverData; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7a087d44
                        var var10 = thisRef.m_positions; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1ae497a0
                        var9.positions = var10;
                        var var11 = thisRef.solverData; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@413c8d5a
                        var var12 = thisRef.m_velocities; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@782fdb0
                        var11.velocities = var12;
                        var var13 = thisRef.solverDef; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3e595259
                        var13.step = step;
                        var var14 = thisRef.solverDef; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3e8ba5
                        var var15 = thisRef.m_contacts; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@25cd90a5
                        var14.contacts = var15;
                        var var16 = thisRef.solverDef; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@353286d1
                        var var17 = thisRef.m_contactCount; // type is INT value type is INT
                        var16.count = var17;
                        var var18 = thisRef.solverDef; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@418dc1b4
                        var var19 = thisRef.m_positions; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@359a1983
                        var18.positions = var19;
                        var var20 = thisRef.solverDef; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7c9bff2d
                        var var21 = thisRef.m_velocities; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@5dbeea61
                        var20.velocities = var21;
                        thisRef.contactSolver.VOIDinitojdcContactSolver$ContactSolverDef(thisRef.contactSolver,thisRef.solverDef);
                        thisRef.contactSolver.VOIDinitializeVelocityConstraints(thisRef.contactSolver);
                        var var25 = step.warmStarting; // type is BOOLEAN value type is BOOLEAN
                        if ((var25 == 0)) {
                            __label__ = 487;
                            break $S_366;
                        }
                        __label__ = 480;
                        }
                    $M_480_487 : for(;;) switch (__label__) {
                        case 480 :
                        // NORMAL
                            thisRef.contactSolver.VOIDwarmStart(thisRef.contactSolver);
                            __label__ = 487;
                            continue $M_480_487;
                        case 487 :
                        // NORMAL
                            $S_487 : {
                            // NORMAL
                                local_6_INT = 0; // type is INT value type is INT
                                __label__ = 490;
                                }
                            $L_490 : for (;;) {
                                $S_490 : {
                                // NORMAL
                                    var var28 = local_6_INT; // type is INT value type is INT
                                    var var29 = thisRef.m_jointCount; // type is INT value type is INT
                                    if ((var28 >= var29)) {
                                        __label__ = 519;
                                        break $S_490;
                                    }
                                    __label__ = 499;
                                    }
                                for(;;) switch (__label__) {
                                    case 519 :
                                    // NORMAL
                                        $S_519 : {
                                        // NORMAL
                                            var var31 = thisRef.timer.FLOATgetMilliseconds(thisRef.timer); // type is FLOAT value type is FLOAT
                                            profile.solveInit = var31;
                                            thisRef.timer.VOIDreset(thisRef.timer);
                                            local_6_INT = 0; // type is INT value type is INT
                                            __label__ = 540;
                                            }
                                        $L_540 : for (;;) {
                                            $S_540 : {
                                            // NORMAL
                                                var var34 = local_6_INT; // type is INT value type is INT
                                                var var35 = step.velocityIterations; // type is INT value type is INT
                                                if ((var34 >= var35)) {
                                                    __label__ = 594;
                                                    break $S_540;
                                                }
                                                __label__ = 549;
                                                }
                                            for(;;) switch (__label__) {
                                                case 594 :
                                                // NORMAL
                                                    $S_594 : {
                                                    // NORMAL
                                                        thisRef.contactSolver.VOIDstoreImpulses(thisRef.contactSolver);
                                                        var var38 = thisRef.timer.FLOATgetMilliseconds(thisRef.timer); // type is FLOAT value type is FLOAT
                                                        profile.solveVelocity = var38;
                                                        local_6_INT = 0; // type is INT value type is INT
                                                        __label__ = 615;
                                                        }
                                                    $L_615 : for (;;) {
                                                        $S_615 : {
                                                        // NORMAL
                                                            var var40 = local_6_INT; // type is INT value type is INT
                                                            var var41 = thisRef.m_bodyCount; // type is INT value type is INT
                                                            if ((var40 >= var41)) {
                                                                __label__ = 863;
                                                                break $S_615;
                                                            }
                                                            __label__ = 624;
                                                            }
                                                        for(;;) switch (__label__) {
                                                            case 624 :
                                                            // NORMAL
                                                                $S_624 : {
                                                                // NORMAL
                                                                    var var315 = thisRef.m_positions.data[local_6_INT]; // type is REFERENCE value type is REFERENCE
                                                                    local_7_REFERENCE = var315.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@72911003
                                                                    var var319 = thisRef.m_positions.data[local_6_INT]; // type is REFERENCE value type is REFERENCE
                                                                    local_8_FLOAT = var319.a; // type is FLOAT value type is FLOAT
                                                                    var var324 = thisRef.m_velocities.data[local_6_INT]; // type is REFERENCE value type is REFERENCE
                                                                    local_9_REFERENCE = var324.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@17a249d3
                                                                    var var329 = thisRef.m_velocities.data[local_6_INT]; // type is REFERENCE value type is REFERENCE
                                                                    local_10_FLOAT = var329.w; // type is FLOAT value type is FLOAT
                                                                    local_11_FLOAT = (local_9_REFERENCE.x * local_5_FLOAT); // type is FLOAT value type is FLOAT
                                                                    local_12_FLOAT = (local_9_REFERENCE.y * local_5_FLOAT); // type is FLOAT value type is FLOAT
                                                                    var var349 = ((local_11_FLOAT * local_11_FLOAT) + (local_12_FLOAT * local_12_FLOAT)); // type is FLOAT value type is FLOAT
                                                                    if ((var349 <= 4.0)) {
                                                                        __label__ = 751;
                                                                        break $S_624;
                                                                    }
                                                                    __label__ = 709;
                                                                    }
                                                                $M_751_709 : for(;;) switch (__label__) {
                                                                    case 709 :
                                                                    // NORMAL
                                                                        var var358 = ojcMathUtils.FLOATsqrtFLOAT(((local_11_FLOAT * local_11_FLOAT) + (local_12_FLOAT * local_12_FLOAT))); // type is FLOAT value type is FLOAT
                                                                        local_13_FLOAT = (2.0 / var358); // type is FLOAT value type is FLOAT
                                                                        var var362 = local_9_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@624cdde1
                                                                        var var365 = (var362.x * local_13_FLOAT); // type is FLOAT value type is FLOAT
                                                                        var362.x = var365;
                                                                        var var366 = local_9_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@624cdde1
                                                                        var var369 = (var366.y * local_13_FLOAT); // type is FLOAT value type is FLOAT
                                                                        var366.y = var369;
                                                                        __label__ = 751;
                                                                        continue $M_751_709;
                                                                    case 751 :
                                                                    // NORMAL
                                                                        $S_751 : {
                                                                        // NORMAL
                                                                            local_13_FLOAT = (local_5_FLOAT * local_10_FLOAT); // type is FLOAT value type is FLOAT
                                                                            var var376 = (local_13_FLOAT * local_13_FLOAT); // type is FLOAT value type is FLOAT
                                                                            var var377 = ojcSettings.maxRotationSquared; // type is FLOAT value type is FLOAT
                                                                            if ((var376 <= var377)) {
                                                                                __label__ = 787;
                                                                                break $S_751;
                                                                            }
                                                                            __label__ = 770;
                                                                            }
                                                                        $M_787_770 : for(;;) switch (__label__) {
                                                                            case 787 :
                                                                            // NORMAL
                                                                                var var388 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@315c63d1
                                                                                var var394 = (var388.x + (local_5_FLOAT * local_9_REFERENCE.x)); // type is FLOAT value type is FLOAT
                                                                                var388.x = var394;
                                                                                var var395 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@315c63d1
                                                                                var var401 = (var395.y + (local_5_FLOAT * local_9_REFERENCE.y)); // type is FLOAT value type is FLOAT
                                                                                var395.y = var401;
                                                                                local_8_FLOAT = (local_8_FLOAT + (local_5_FLOAT * local_10_FLOAT)); // type is FLOAT value type is FLOAT
                                                                                var var410 = thisRef.m_positions.data[local_6_INT]; // type is REFERENCE value type is REFERENCE
                                                                                var var411 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                                                                                var410.a = var411;
                                                                                var var414 = thisRef.m_velocities.data[local_6_INT]; // type is REFERENCE value type is REFERENCE
                                                                                var var415 = local_10_FLOAT; // type is FLOAT value type is FLOAT
                                                                                var414.w = var415;
                                                                                local_6_INT = (local_6_INT + 1); // type is INT value type is INT
                                                                                __label__ = 615;
                                                                                continue $L_615;
                                                                            case 770 :
                                                                            // NORMAL
                                                                                var var380 = ojcMathUtils.FLOATabsFLOAT(local_13_FLOAT); // type is FLOAT value type is FLOAT
                                                                                var local_14_FLOAT = (1.5707964 / var380); // type is FLOAT value type is FLOAT
                                                                                local_10_FLOAT = (local_10_FLOAT * local_14_FLOAT); // type is FLOAT value type is FLOAT
                                                                                __label__ = 787;
                                                                                continue $M_787_770;
                                                                        }
                                                                }
                                                            case 863 :
                                                            // NORMAL
                                                                $S_863 : {
                                                                // NORMAL
                                                                    thisRef.timer.VOIDreset(thisRef.timer);
                                                                    local_6_INT = 0; // type is INT value type is INT
                                                                    local_7_INT = 0; // type is INT value type is INT
                                                                    __label__ = 876;
                                                                    }
                                                                $L_876 : for (;;) {
                                                                    $S_876 : {
                                                                    // NORMAL
                                                                        var var46 = local_7_INT; // type is INT value type is INT
                                                                        var var47 = step.positionIterations; // type is INT value type is INT
                                                                        if ((var46 >= var47)) {
                                                                            __label__ = 970;
                                                                            break $S_876;
                                                                        }
                                                                        __label__ = 885;
                                                                        }
                                                                    $M_885_970 : for(;;) switch (__label__) {
                                                                        case 885 :
                                                                        // NORMAL
                                                                            $S_885 : {
                                                                            // NORMAL
                                                                                var var49 = thisRef.contactSolver.BOOLEANsolvePositionConstraints(thisRef.contactSolver); // type is BOOLEAN value type is BOOLEAN
                                                                                local_8_BOOLEAN = var49; // type is BOOLEAN value type is BOOLEAN
                                                                                local_9_INT = 1; // type is INT value type is INT
                                                                                local_10_INT = 0; // type is INT value type is INT
                                                                                __label__ = 900;
                                                                                }
                                                                            $L_900 : for (;;) {
                                                                                $S_900 : {
                                                                                // NORMAL
                                                                                    var var56 = local_10_INT; // type is INT value type is INT
                                                                                    var var57 = thisRef.m_jointCount; // type is INT value type is INT
                                                                                    if ((var56 >= var57)) {
                                                                                        __label__ = 948;
                                                                                        break $S_900;
                                                                                    }
                                                                                    __label__ = 909;
                                                                                    }
                                                                                for(;;) switch (__label__) {
                                                                                    case 909 :
                                                                                    // NORMAL
                                                                                        $S_909 : {
                                                                                        // NORMAL
                                                                                            var var60 = thisRef.m_joints.data[local_10_INT]; // type is REFERENCE value type is REFERENCE
                                                                                            var var62 = var60.BOOLEANsolvePositionConstraintsojdSolverData(var60,thisRef.solverData); // type is BOOLEAN value type is BOOLEAN
                                                                                            local_11_BOOLEAN = var62; // type is BOOLEAN value type is BOOLEAN
                                                                                            var var65 = local_9_INT; // type is INT value type is INT
                                                                                            if ((var65 == 0)) {
                                                                                                __label__ = 939;
                                                                                                break $S_909;
                                                                                            }
                                                                                            __label__ = 930;
                                                                                            }
                                                                                        $M_939_930 : for(;;) switch (__label__) {
                                                                                            case 930 :
                                                                                            // NORMAL
                                                                                                $S_930 : {
                                                                                                // NORMAL
                                                                                                    var var66 = local_11_BOOLEAN; // type is BOOLEAN value type is BOOLEAN
                                                                                                    if ((var66 == 0)) {
                                                                                                        __label__ = 939;
                                                                                                        continue $M_939_930;
                                                                                                    }
                                                                                                    }
                                                                                                var67 = 1; // type is INT value type is INT
                                                                                                break $M_939_930;
                                                                                            case 939 :
                                                                                            // NORMAL
                                                                                                var67 = 0; // type is INT value type is INT
                                                                                                break $M_939_930;
                                                                                        }
                                                                                        local_9_INT = var67; // type is INT value type is INT
                                                                                        local_10_INT = (local_10_INT + 1); // type is INT value type is INT
                                                                                        __label__ = 900;
                                                                                        continue $L_900;
                                                                                    case 948 :
                                                                                    // NORMAL
                                                                                        $S_948 : {
                                                                                        // NORMAL
                                                                                            var var211 = local_8_BOOLEAN; // type is BOOLEAN value type is BOOLEAN
                                                                                            if ((var211 == 0)) {
                                                                                                __label__ = 964;
                                                                                                break $S_948;
                                                                                            }
                                                                                            __label__ = 953;
                                                                                            }
                                                                                        $M_953_964 : for(;;) switch (__label__) {
                                                                                            case 953 :
                                                                                            // NORMAL
                                                                                                $S_953 : {
                                                                                                // NORMAL
                                                                                                    var var212 = local_9_INT; // type is INT value type is INT
                                                                                                    if ((var212 == 0)) {
                                                                                                        __label__ = 964;
                                                                                                        continue $M_953_964;
                                                                                                    }
                                                                                                    }
                                                                                                local_6_INT = 1; // type is INT value type is INT
                                                                                                __label__ = 970;
                                                                                                continue $M_885_970;
                                                                                            case 964 :
                                                                                            // NORMAL
                                                                                                local_7_INT = (local_7_INT + 1); // type is INT value type is INT
                                                                                                __label__ = 876;
                                                                                                continue $L_876;
                                                                                        }
                                                                                }
                                                                            }
                                                                        case 970 :
                                                                        // NORMAL
                                                                            $S_970 : {
                                                                            // NORMAL
                                                                                local_7_INT = 0; // type is INT value type is INT
                                                                                __label__ = 973;
                                                                                }
                                                                            $L_973 : for (;;) {
                                                                                $S_973 : {
                                                                                // NORMAL
                                                                                    var var215 = local_7_INT; // type is INT value type is INT
                                                                                    var var216 = thisRef.m_bodyCount; // type is INT value type is INT
                                                                                    if ((var215 >= var216)) {
                                                                                        __label__ = 1125;
                                                                                        break $S_973;
                                                                                    }
                                                                                    __label__ = 982;
                                                                                    }
                                                                                for(;;) switch (__label__) {
                                                                                    case 982 :
                                                                                    // NORMAL
                                                                                        var var219 = thisRef.m_bodies.data[local_7_INT]; // type is REFERENCE value type is REFERENCE
                                                                                        local_8_REFERENCE = var219; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@4b2e5eeb
                                                                                        var var222 = local_8_REFERENCE.m_sweep.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@34e3be9d
                                                                                        var var225 = thisRef.m_positions.data[local_7_INT]; // type is REFERENCE value type is REFERENCE
                                                                                        var var227 = var225.c.x; // type is FLOAT value type is FLOAT
                                                                                        var222.x = var227;
                                                                                        var var230 = local_8_REFERENCE.m_sweep.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1e24b782
                                                                                        var var233 = thisRef.m_positions.data[local_7_INT]; // type is REFERENCE value type is REFERENCE
                                                                                        var var235 = var233.c.y; // type is FLOAT value type is FLOAT
                                                                                        var230.y = var235;
                                                                                        var var237 = local_8_REFERENCE.m_sweep; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@64cfad4d
                                                                                        var var240 = thisRef.m_positions.data[local_7_INT]; // type is REFERENCE value type is REFERENCE
                                                                                        var var241 = var240.a; // type is FLOAT value type is FLOAT
                                                                                        var237.a = var241;
                                                                                        var var243 = local_8_REFERENCE.m_linearVelocity; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@61268cd6
                                                                                        var var246 = thisRef.m_velocities.data[local_7_INT]; // type is REFERENCE value type is REFERENCE
                                                                                        var var248 = var246.v.x; // type is FLOAT value type is FLOAT
                                                                                        var243.x = var248;
                                                                                        var var250 = local_8_REFERENCE.m_linearVelocity; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4818d139
                                                                                        var var253 = thisRef.m_velocities.data[local_7_INT]; // type is REFERENCE value type is REFERENCE
                                                                                        var var255 = var253.v.y; // type is FLOAT value type is FLOAT
                                                                                        var250.y = var255;
                                                                                        var var256 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@515db833
                                                                                        var var259 = thisRef.m_velocities.data[local_7_INT]; // type is REFERENCE value type is REFERENCE
                                                                                        var var260 = var259.w; // type is FLOAT value type is FLOAT
                                                                                        var256.m_angularVelocity = var260;
                                                                                        local_8_REFERENCE.VOIDsynchronizeTransform(local_8_REFERENCE);
                                                                                        local_7_INT = (local_7_INT + 1); // type is INT value type is INT
                                                                                        __label__ = 973;
                                                                                        continue $L_973;
                                                                                    case 1125 :
                                                                                    // NORMAL
                                                                                        $S_1125 : {
                                                                                        // NORMAL
                                                                                            var var263 = thisRef.timer.FLOATgetMilliseconds(thisRef.timer); // type is FLOAT value type is FLOAT
                                                                                            profile.solvePosition = var263;
                                                                                            thisRef.VOIDreportA1ojdcContactVelocityConstraint(thisRef,thisRef.contactSolver.m_velocityConstraints);
                                                                                            if ((allowSleep == 0)) {
                                                                                                return;
                                                                                            }
                                                                                            }
                                                                                        $S_1152 : {
                                                                                        // NORMAL
                                                                                            local_7_FLOAT = 3.4028235E38; // type is FLOAT value type is FLOAT
                                                                                            local_8_FLOAT = 1.0E-4; // type is FLOAT value type is FLOAT
                                                                                            local_9_FLOAT = 0.0012184699; // type is FLOAT value type is FLOAT
                                                                                            local_10_INT = 0; // type is INT value type is INT
                                                                                            __label__ = 1167;
                                                                                            }
                                                                                        $L_1167 : for (;;) {
                                                                                            $S_1167 : {
                                                                                            // NORMAL
                                                                                                var var272 = local_10_INT; // type is INT value type is INT
                                                                                                var var273 = thisRef.m_bodyCount; // type is INT value type is INT
                                                                                                if ((var272 >= var273)) {
                                                                                                    __label__ = 1287;
                                                                                                    break $S_1167;
                                                                                                }
                                                                                                __label__ = 1176;
                                                                                                }
                                                                                            for(;;) switch (__label__) {
                                                                                                case 1176 :
                                                                                                // NORMAL
                                                                                                    $S_1176 : {
                                                                                                    // NORMAL
                                                                                                        var var282 = thisRef.m_bodies.data[local_10_INT]; // type is REFERENCE value type is REFERENCE
                                                                                                        local_11_REFERENCE = var282; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@654bba4e
                                                                                                        var var285 = local_11_REFERENCE.ojdBodyTypegetType(local_11_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@73bbf71f
                                                                                                        var var286 = ojdBodyType.STATIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6a8789e0
                                                                                                        if ((var285 != var286)) {
                                                                                                            __label__ = 1199;
                                                                                                            break $S_1176;
                                                                                                        }
                                                                                                        __label__ = 1196;
                                                                                                        }
                                                                                                    $M_1199_1196 : for(;;) switch (__label__) {
                                                                                                        case 1196 :
                                                                                                        // NORMAL
                                                                                                            break $M_1199_1196;
                                                                                                        case 1199 :
                                                                                                        // NORMAL
                                                                                                            $S_1199 : {
                                                                                                            // NORMAL
                                                                                                                var var289 = (local_11_REFERENCE.m_flags & 4); // type is INT value type is INT
                                                                                                                if ((var289 == 0)) {
                                                                                                                    __label__ = 1245;
                                                                                                                    break $S_1199;
                                                                                                                }
                                                                                                                __label__ = 1209;
                                                                                                                }
                                                                                                            $M_1245_1209 : for(;;) switch (__label__) {
                                                                                                                case 1209 :
                                                                                                                // NORMAL
                                                                                                                    $S_1209 : {
                                                                                                                    // NORMAL
                                                                                                                        var var294 = (local_11_REFERENCE.m_angularVelocity * local_11_REFERENCE.m_angularVelocity); // type is FLOAT value type is FLOAT
                                                                                                                        if ((var294 > 0.0012184699)) {
                                                                                                                            __label__ = 1245;
                                                                                                                            continue $M_1245_1209;
                                                                                                                        }
                                                                                                                        }
                                                                                                                    $S_1226 : {
                                                                                                                    // NORMAL
                                                                                                                        var var300 = ojcVec2.FLOATdotojcVec2ojcVec2(local_11_REFERENCE.m_linearVelocity,local_11_REFERENCE.m_linearVelocity); // type is FLOAT value type is FLOAT
                                                                                                                        if ((var300 <= 1.0E-4)) {
                                                                                                                            break $S_1226;
                                                                                                                        }
                                                                                                                        __label__ = 1245;
                                                                                                                        continue $M_1245_1209;
                                                                                                                        }
                                                                                                                    var var302 = local_11_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@654bba4e
                                                                                                                    var var305 = (var302.m_sleepTime + local_5_FLOAT); // type is FLOAT value type is FLOAT
                                                                                                                    var302.m_sleepTime = var305;
                                                                                                                    var var309 = ojcMathUtils.FLOATminFLOATFLOAT(local_7_FLOAT,local_11_REFERENCE.m_sleepTime); // type is FLOAT value type is FLOAT
                                                                                                                    local_7_FLOAT = var309; // type is FLOAT value type is FLOAT
                                                                                                                    break $M_1199_1196;
                                                                                                                case 1245 :
                                                                                                                // NORMAL
                                                                                                                    var var311 = local_11_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@654bba4e
                                                                                                                    var311.m_sleepTime = 0.0;
                                                                                                                    local_7_FLOAT = 0.0; // type is FLOAT value type is FLOAT
                                                                                                                    break $M_1199_1196;
                                                                                                            }
                                                                                                    }
                                                                                                    local_10_INT = (local_10_INT + 1); // type is INT value type is INT
                                                                                                    __label__ = 1167;
                                                                                                    continue $L_1167;
                                                                                                case 1287 :
                                                                                                // NORMAL
                                                                                                    $S_1287 : {
                                                                                                    // NORMAL
                                                                                                        var var274 = local_7_FLOAT; // type is FLOAT value type is FLOAT
                                                                                                        if ((var274 < 0.5)) {
                                                                                                            return;
                                                                                                        }
                                                                                                        }
                                                                                                    $S_1295 : {
                                                                                                    // NORMAL
                                                                                                        var var276 = local_6_INT; // type is INT value type is INT
                                                                                                        if ((var276 == 0)) {
                                                                                                            return;
                                                                                                        }
                                                                                                        }
                                                                                                    $S_1300 : {
                                                                                                    // NORMAL
                                                                                                        local_10_INT = 0; // type is INT value type is INT
                                                                                                        __label__ = 1303;
                                                                                                        }
                                                                                                    $L_1303 : for (;;) {
                                                                                                        $S_1303 : {
                                                                                                        // NORMAL
                                                                                                            var var278 = local_10_INT; // type is INT value type is INT
                                                                                                            var var279 = thisRef.m_bodyCount; // type is INT value type is INT
                                                                                                            if ((var278 >= var279)) {
                                                                                                                return;
                                                                                                            }
                                                                                                            }
                                                                                                        var var422 = thisRef.m_bodies.data[local_10_INT]; // type is REFERENCE value type is REFERENCE
                                                                                                        local_11_REFERENCE = var422; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1e732a74
                                                                                                        local_11_REFERENCE.VOIDsetAwakeBOOLEAN(local_11_REFERENCE,0);
                                                                                                        local_10_INT = (local_10_INT + 1); // type is INT value type is INT
                                                                                                        __label__ = 1303;
                                                                                                        continue $L_1303;
                                                                                                    }
                                                                                            }
                                                                                        }
                                                                                }
                                                                            }
                                                                    }
                                                                }
                                                        }
                                                    }
                                                case 549 :
                                                // NORMAL
                                                    $S_549 : {
                                                    // NORMAL
                                                        local_7_INT = 0; // type is INT value type is INT
                                                        __label__ = 552;
                                                        }
                                                    $L_552 : for (;;) {
                                                        $S_552 : {
                                                        // NORMAL
                                                            var var70 = local_7_INT; // type is INT value type is INT
                                                            var var71 = thisRef.m_jointCount; // type is INT value type is INT
                                                            if ((var70 >= var71)) {
                                                                __label__ = 581;
                                                                break $S_552;
                                                            }
                                                            __label__ = 561;
                                                            }
                                                        for(;;) switch (__label__) {
                                                            case 561 :
                                                            // NORMAL
                                                                var var209 = thisRef.m_joints.data[local_7_INT]; // type is REFERENCE value type is REFERENCE
                                                                var209.VOIDsolveVelocityConstraintsojdSolverData(var209,thisRef.solverData);
                                                                local_7_INT = (local_7_INT + 1); // type is INT value type is INT
                                                                __label__ = 552;
                                                                continue $L_552;
                                                            case 581 :
                                                            // NORMAL
                                                                thisRef.contactSolver.VOIDsolveVelocityConstraints(thisRef.contactSolver);
                                                                local_6_INT = (local_6_INT + 1); // type is INT value type is INT
                                                                __label__ = 540;
                                                                continue $L_540;
                                                        }
                                                    }
                                            }
                                        }
                                    case 499 :
                                    // NORMAL
                                        var var418 = thisRef.m_joints.data[local_6_INT]; // type is REFERENCE value type is REFERENCE
                                        var418.VOIDinitVelocityConstraintsojdSolverData(var418,thisRef.solverData);
                                        local_6_INT = (local_6_INT + 1); // type is INT value type is INT
                                        __label__ = 490;
                                        continue $L_490;
                                }
                            }
                    }
                case 18 :
                // NORMAL
                    $S_18 : {
                    // NORMAL
                        var var75 = thisRef.m_bodies.data[local_6_INT]; // type is REFERENCE value type is REFERENCE
                        local_7_REFERENCE = var75; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@315c63d1
                        local_8_REFERENCE = local_7_REFERENCE.m_sweep.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3f12f85a
                        local_9_FLOAT = local_7_REFERENCE.m_sweep.a; // type is FLOAT value type is FLOAT
                        local_10_REFERENCE = local_7_REFERENCE.m_linearVelocity; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@318d6798
                        local_11_FLOAT = local_7_REFERENCE.m_angularVelocity; // type is FLOAT value type is FLOAT
                        var var99 = local_7_REFERENCE.m_sweep.c0.ojcVec2setojcVec2(local_7_REFERENCE.m_sweep.c0,local_7_REFERENCE.m_sweep.c); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1da27db9
                        var var101 = local_7_REFERENCE.m_sweep; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4b3c2f64
                        var var104 = local_7_REFERENCE.m_sweep.a; // type is FLOAT value type is FLOAT
                        var101.a0 = var104;
                        var var106 = local_7_REFERENCE.m_type; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@63c4ce71
                        var var107 = ojdBodyType.DYNAMIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@39afc436
                        if ((var106 != var107)) {
                            __label__ = 264;
                            break $S_18;
                        }
                        __label__ = 108;
                        }
                    $M_264_108 : for(;;) switch (__label__) {
                        case 108 :
                        // NORMAL
                            var var108 = local_10_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6e6032e3
                            var var123 = (var108.x + (local_5_FLOAT * ((local_7_REFERENCE.m_gravityScale * gravity.x) + (local_7_REFERENCE.m_invMass * local_7_REFERENCE.m_force.x)))); // type is FLOAT value type is FLOAT
                            var108.x = var123;
                            var var124 = local_10_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6e6032e3
                            var var139 = (var124.y + (local_5_FLOAT * ((local_7_REFERENCE.m_gravityScale * gravity.y) + (local_7_REFERENCE.m_invMass * local_7_REFERENCE.m_force.y)))); // type is FLOAT value type is FLOAT
                            var124.y = var139;
                            local_11_FLOAT = (local_11_FLOAT + ((local_5_FLOAT * local_7_REFERENCE.m_invI) * local_7_REFERENCE.m_torque)); // type is FLOAT value type is FLOAT
                            var var155 = ojcMathUtils.FLOATclampFLOATFLOATFLOAT((1.0 - (local_5_FLOAT * local_7_REFERENCE.m_linearDamping)),0.0,1.0); // type is FLOAT value type is FLOAT
                            local_12_FLOAT = var155; // type is FLOAT value type is FLOAT
                            var var158 = local_10_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6e6032e3
                            var var161 = (var158.x * local_12_FLOAT); // type is FLOAT value type is FLOAT
                            var158.x = var161;
                            var var162 = local_10_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6e6032e3
                            var var165 = (var162.y * local_12_FLOAT); // type is FLOAT value type is FLOAT
                            var162.y = var165;
                            var var166 = local_11_FLOAT; // type is FLOAT value type is FLOAT
                            var var172 = ojcMathUtils.FLOATclampFLOATFLOATFLOAT((1.0 - (local_5_FLOAT * local_7_REFERENCE.m_angularDamping)),0.0,1.0); // type is FLOAT value type is FLOAT
                            local_11_FLOAT = (var166 * var172); // type is FLOAT value type is FLOAT
                            __label__ = 264;
                            continue $M_264_108;
                        case 264 :
                        // NORMAL
                            var var177 = thisRef.m_positions.data[local_6_INT]; // type is REFERENCE value type is REFERENCE
                            var var178 = var177.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@376e390f
                            var var180 = local_8_REFERENCE.x; // type is FLOAT value type is FLOAT
                            var178.x = var180;
                            var var183 = thisRef.m_positions.data[local_6_INT]; // type is REFERENCE value type is REFERENCE
                            var var184 = var183.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1d036789
                            var var186 = local_8_REFERENCE.y; // type is FLOAT value type is FLOAT
                            var184.y = var186;
                            var var189 = thisRef.m_positions.data[local_6_INT]; // type is REFERENCE value type is REFERENCE
                            var var190 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                            var189.a = var190;
                            var var193 = thisRef.m_velocities.data[local_6_INT]; // type is REFERENCE value type is REFERENCE
                            var var194 = var193.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5871851e
                            var var196 = local_10_REFERENCE.x; // type is FLOAT value type is FLOAT
                            var194.x = var196;
                            var var199 = thisRef.m_velocities.data[local_6_INT]; // type is REFERENCE value type is REFERENCE
                            var var200 = var199.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1fb87452
                            var var202 = local_10_REFERENCE.y; // type is FLOAT value type is FLOAT
                            var200.y = var202;
                            var var205 = thisRef.m_velocities.data[local_6_INT]; // type is REFERENCE value type is REFERENCE
                            var var206 = local_11_FLOAT; // type is FLOAT value type is FLOAT
                            var205.w = var206;
                            local_6_INT = (local_6_INT + 1); // type is INT value type is INT
                            __label__ = 9;
                            continue $L_9;
                    }
            }
        }
    },

    VOIDreportA1ojdcContactVelocityConstraint : function(thisRef,constraints) {
        var local_5_INT = null; // type is INT # of inits = 3
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_2_INT = null; // type is INT # of inits = 4
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.m_listener; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@723705da
            if (var0 != null ) {
                break $S_0;
            }
            return;
            }
        $S_8 : {
        // NORMAL
            local_2_INT = 0; // type is INT value type is INT
            __label__ = 10;
            }
        $L_10 : for (;;) {
            $S_10 : {
            // NORMAL
                var var3 = local_2_INT; // type is INT value type is INT
                var var4 = thisRef.m_contactCount; // type is INT value type is INT
                if ((var3 >= var4)) {
                    return;
                }
                }
            $S_18 : {
            // NORMAL
                var var7 = thisRef.m_contacts.data[local_2_INT]; // type is REFERENCE value type is REFERENCE
                local_3_REFERENCE = var7; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@c038ba9
                var var10 = constraints.data[local_2_INT]; // type is REFERENCE value type is REFERENCE
                local_4_REFERENCE = var10; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3d2ba18c
                var var12 = thisRef.impulse; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@b424a91
                var var14 = local_4_REFERENCE.pointCount; // type is INT value type is INT
                var12.count = var14;
                local_5_INT = 0; // type is INT value type is INT
                __label__ = 45;
                }
            $L_45 : for (;;) {
                $S_45 : {
                // NORMAL
                    var var17 = local_5_INT; // type is INT value type is INT
                    var var19 = local_4_REFERENCE.pointCount; // type is INT value type is INT
                    if ((var17 >= var19)) {
                        __label__ = 103;
                        break $S_45;
                    }
                    __label__ = 55;
                    }
                for(;;) switch (__label__) {
                    case 55 :
                    // NORMAL
                        var var21 = thisRef.impulse.normalImpulses; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@4541afe1
                        var var22 = local_5_INT; // type is INT value type is INT
                        var var26 = local_4_REFERENCE.points.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                        var var27 = var26.normalImpulse; // type is FLOAT value type is FLOAT
                        var21.data[var22] = var27;
                        var var29 = thisRef.impulse.tangentImpulses; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@2a1f766c
                        var var30 = local_5_INT; // type is INT value type is INT
                        var var34 = local_4_REFERENCE.points.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                        var var35 = var34.tangentImpulse; // type is FLOAT value type is FLOAT
                        var29.data[var30] = var35;
                        local_5_INT = (local_5_INT + 1); // type is INT value type is INT
                        __label__ = 45;
                        continue $L_45;
                    case 103 :
                    // NORMAL
                        thisRef.m_listener.VOIDpostSolveojdcContactojcContactImpulse(thisRef.m_listener,local_3_REFERENCE,thisRef.impulse);
                        local_2_INT = (local_2_INT + 1); // type is INT value type is INT
                        __label__ = 10;
                        continue $L_10;
                }
            }
        }
    },

    VOIDsolveTOIojdTimeStepINTINT : function(thisRef,subStep,toiIndexA,toiIndexB) {
        var local_5_INT = null; // type is INT # of inits = 3
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_10_FLOAT = null; // type is FLOAT # of inits = 1
        var local_11_FLOAT = null; // type is FLOAT # of inits = 1
        var local_9_FLOAT = null; // type is FLOAT # of inits = 2
        var local_4_INT = null; // type is INT # of inits = 9
        var local_8_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_7_FLOAT = null; // type is FLOAT # of inits = 2
        var local_12_FLOAT = null; // type is FLOAT # of inits = 2
        var local_4_FLOAT = null; // type is FLOAT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdIsland.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 22;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_6_22 : for(;;) switch (__label__) {
            case 22 :
            // NORMAL
                $S_22 : {
                // NORMAL
                    var var2 = ojdIsland.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                    if ((var2 != 0)) {
                        __label__ = 44;
                        break $S_22;
                    }
                    __label__ = 28;
                    }
                $M_44_28 : for(;;) switch (__label__) {
                    case 28 :
                    // NORMAL
                        $S_28 : {
                        // NORMAL
                            var var3 = thisRef.m_bodyCount; // type is INT value type is INT
                            if ((toiIndexB < var3)) {
                                __label__ = 44;
                                continue $M_44_28;
                            }
                            }
                        var var130 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                        jlAssertionError.VOIDinit(var130);
                        throw var130;
                    case 44 :
                    // NORMAL
                        $S_44 : {
                        // NORMAL
                            local_4_INT = 0; // type is INT value type is INT
                            __label__ = 47;
                            }
                        $L_47 : for (;;) {
                            $S_47 : {
                            // NORMAL
                                var var6 = local_4_INT; // type is INT value type is INT
                                var var7 = thisRef.m_bodyCount; // type is INT value type is INT
                                if ((var6 >= var7)) {
                                    __label__ = 215;
                                    break $S_47;
                                }
                                __label__ = 56;
                                }
                            for(;;) switch (__label__) {
                                case 215 :
                                // NORMAL
                                    $S_215 : {
                                    // NORMAL
                                        var var8 = thisRef.toiSolverDef; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@75c3fc4
                                        var var9 = thisRef.m_contacts; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@71ea568d
                                        var8.contacts = var9;
                                        var var10 = thisRef.toiSolverDef; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@264e6abc
                                        var var11 = thisRef.m_contactCount; // type is INT value type is INT
                                        var10.count = var11;
                                        var var12 = thisRef.toiSolverDef; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7ead418d
                                        var12.step = subStep;
                                        var var13 = thisRef.toiSolverDef; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1869f383
                                        var var14 = thisRef.m_positions; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3b94903d
                                        var13.positions = var14;
                                        var var15 = thisRef.toiSolverDef; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6e5a1679
                                        var var16 = thisRef.m_velocities; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@7aef9316
                                        var15.velocities = var16;
                                        thisRef.toiContactSolver.VOIDinitojdcContactSolver$ContactSolverDef(thisRef.toiContactSolver,thisRef.toiSolverDef);
                                        local_4_INT = 0; // type is INT value type is INT
                                        __label__ = 281;
                                        }
                                    $L_281 : for (;;) {
                                        $S_281 : {
                                        // NORMAL
                                            var var20 = local_4_INT; // type is INT value type is INT
                                            var var21 = subStep.positionIterations; // type is INT value type is INT
                                            if ((var20 >= var21)) {
                                                __label__ = 315;
                                                break $S_281;
                                            }
                                            __label__ = 290;
                                            }
                                        $M_290_315 : for(;;) switch (__label__) {
                                            case 315 :
                                            // NORMAL
                                                $S_315 : {
                                                // NORMAL
                                                    var var28 = thisRef.m_bodies.data[toiIndexA]; // type is REFERENCE value type is REFERENCE
                                                    var var30 = var28.m_sweep.c0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2d4d8223
                                                    var var32 = thisRef.m_positions.data[toiIndexA]; // type is REFERENCE value type is REFERENCE
                                                    var var34 = var32.c.x; // type is FLOAT value type is FLOAT
                                                    var30.x = var34;
                                                    var var36 = thisRef.m_bodies.data[toiIndexA]; // type is REFERENCE value type is REFERENCE
                                                    var var38 = var36.m_sweep.c0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3247eacf
                                                    var var40 = thisRef.m_positions.data[toiIndexA]; // type is REFERENCE value type is REFERENCE
                                                    var var42 = var40.c.y; // type is FLOAT value type is FLOAT
                                                    var38.y = var42;
                                                    var var44 = thisRef.m_bodies.data[toiIndexA]; // type is REFERENCE value type is REFERENCE
                                                    var var45 = var44.m_sweep; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@c10db20
                                                    var var47 = thisRef.m_positions.data[toiIndexA]; // type is REFERENCE value type is REFERENCE
                                                    var var48 = var47.a; // type is FLOAT value type is FLOAT
                                                    var45.a0 = var48;
                                                    var var50 = thisRef.m_bodies.data[toiIndexB]; // type is REFERENCE value type is REFERENCE
                                                    var var52 = var50.m_sweep.c0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@a619e97
                                                    var var54 = thisRef.m_positions.data[toiIndexB]; // type is REFERENCE value type is REFERENCE
                                                    var var56 = var52.ojcVec2setojcVec2(var52,var54.c); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4b7c4962
                                                    var var58 = thisRef.m_bodies.data[toiIndexB]; // type is REFERENCE value type is REFERENCE
                                                    var var59 = var58.m_sweep; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4660d350
                                                    var var61 = thisRef.m_positions.data[toiIndexB]; // type is REFERENCE value type is REFERENCE
                                                    var var62 = var61.a; // type is FLOAT value type is FLOAT
                                                    var59.a0 = var62;
                                                    thisRef.toiContactSolver.VOIDinitializeVelocityConstraints(thisRef.toiContactSolver);
                                                    local_4_INT = 0; // type is INT value type is INT
                                                    __label__ = 446;
                                                    }
                                                $L_446 : for (;;) {
                                                    $S_446 : {
                                                    // NORMAL
                                                        var var65 = local_4_INT; // type is INT value type is INT
                                                        var var66 = subStep.velocityIterations; // type is INT value type is INT
                                                        if ((var65 >= var66)) {
                                                            __label__ = 468;
                                                            break $S_446;
                                                        }
                                                        __label__ = 455;
                                                        }
                                                    for(;;) switch (__label__) {
                                                        case 455 :
                                                        // NORMAL
                                                            thisRef.toiContactSolver.VOIDsolveVelocityConstraints(thisRef.toiContactSolver);
                                                            local_4_INT = (local_4_INT + 1); // type is INT value type is INT
                                                            __label__ = 446;
                                                            continue $L_446;
                                                        case 468 :
                                                        // NORMAL
                                                            $S_468 : {
                                                            // NORMAL
                                                                local_4_FLOAT = subStep.dt; // type is FLOAT value type is FLOAT
                                                                local_5_INT = 0; // type is INT value type is INT
                                                                __label__ = 477;
                                                                }
                                                            $L_477 : for (;;) {
                                                                $S_477 : {
                                                                // NORMAL
                                                                    var var72 = local_5_INT; // type is INT value type is INT
                                                                    var var73 = thisRef.m_bodyCount; // type is INT value type is INT
                                                                    if ((var72 >= var73)) {
                                                                        __label__ = 870;
                                                                        break $S_477;
                                                                    }
                                                                    __label__ = 486;
                                                                    }
                                                                for(;;) switch (__label__) {
                                                                    case 870 :
                                                                    // NORMAL
                                                                        thisRef.VOIDreportA1ojdcContactVelocityConstraint(thisRef,thisRef.toiContactSolver.m_velocityConstraints);
                                                                        return;
                                                                    case 486 :
                                                                    // NORMAL
                                                                        $S_486 : {
                                                                        // NORMAL
                                                                            var var133 = thisRef.m_positions.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                                                                            local_6_REFERENCE = var133.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4ca3d967
                                                                            var var138 = thisRef.m_positions.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                                                                            local_7_FLOAT = var138.a; // type is FLOAT value type is FLOAT
                                                                            var var144 = thisRef.m_velocities.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                                                                            local_8_REFERENCE = var144.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4ab07342
                                                                            var var149 = thisRef.m_velocities.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                                                                            local_9_FLOAT = var149.w; // type is FLOAT value type is FLOAT
                                                                            local_10_FLOAT = (local_8_REFERENCE.x * local_4_FLOAT); // type is FLOAT value type is FLOAT
                                                                            local_11_FLOAT = (local_8_REFERENCE.y * local_4_FLOAT); // type is FLOAT value type is FLOAT
                                                                            var var171 = ((local_10_FLOAT * local_10_FLOAT) + (local_11_FLOAT * local_11_FLOAT)); // type is FLOAT value type is FLOAT
                                                                            if ((var171 <= 4.0)) {
                                                                                __label__ = 597;
                                                                                break $S_486;
                                                                            }
                                                                            __label__ = 571;
                                                                            }
                                                                        $M_597_571 : for(;;) switch (__label__) {
                                                                            case 597 :
                                                                            // NORMAL
                                                                                $S_597 : {
                                                                                // NORMAL
                                                                                    local_12_FLOAT = (local_4_FLOAT * local_9_FLOAT); // type is FLOAT value type is FLOAT
                                                                                    var var193 = (local_12_FLOAT * local_12_FLOAT); // type is FLOAT value type is FLOAT
                                                                                    var var194 = ojcSettings.maxRotationSquared; // type is FLOAT value type is FLOAT
                                                                                    if ((var193 <= var194)) {
                                                                                        __label__ = 633;
                                                                                        break $S_597;
                                                                                    }
                                                                                    __label__ = 616;
                                                                                    }
                                                                                $M_633_616 : for(;;) switch (__label__) {
                                                                                    case 633 :
                                                                                    // NORMAL
                                                                                        var var205 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@56f351d8
                                                                                        var var211 = (var205.x + (local_8_REFERENCE.x * local_4_FLOAT)); // type is FLOAT value type is FLOAT
                                                                                        var205.x = var211;
                                                                                        var var212 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@56f351d8
                                                                                        var var218 = (var212.y + (local_8_REFERENCE.y * local_4_FLOAT)); // type is FLOAT value type is FLOAT
                                                                                        var212.y = var218;
                                                                                        local_7_FLOAT = (local_7_FLOAT + (local_4_FLOAT * local_9_FLOAT)); // type is FLOAT value type is FLOAT
                                                                                        var var227 = thisRef.m_positions.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                                                                                        var var228 = var227.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@63ae142f
                                                                                        var var230 = local_6_REFERENCE.x; // type is FLOAT value type is FLOAT
                                                                                        var228.x = var230;
                                                                                        var var233 = thisRef.m_positions.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                                                                                        var var234 = var233.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2394b159
                                                                                        var var236 = local_6_REFERENCE.y; // type is FLOAT value type is FLOAT
                                                                                        var234.y = var236;
                                                                                        var var239 = thisRef.m_positions.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                                                                                        var var240 = local_7_FLOAT; // type is FLOAT value type is FLOAT
                                                                                        var239.a = var240;
                                                                                        var var243 = thisRef.m_velocities.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                                                                                        var var244 = var243.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@712e2cad
                                                                                        var var246 = local_8_REFERENCE.x; // type is FLOAT value type is FLOAT
                                                                                        var244.x = var246;
                                                                                        var var249 = thisRef.m_velocities.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                                                                                        var var250 = var249.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@38cd6ba9
                                                                                        var var252 = local_8_REFERENCE.y; // type is FLOAT value type is FLOAT
                                                                                        var250.y = var252;
                                                                                        var var255 = thisRef.m_velocities.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                                                                                        var var256 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                                                                                        var255.w = var256;
                                                                                        var var259 = thisRef.m_bodies.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                                                                                        var local_13_REFERENCE = var259; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@2bd11ff3
                                                                                        var var263 = local_13_REFERENCE.m_sweep.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2dc96da9
                                                                                        var var265 = local_6_REFERENCE.x; // type is FLOAT value type is FLOAT
                                                                                        var263.x = var265;
                                                                                        var var268 = local_13_REFERENCE.m_sweep.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2d8277f9
                                                                                        var var270 = local_6_REFERENCE.y; // type is FLOAT value type is FLOAT
                                                                                        var268.y = var270;
                                                                                        var var272 = local_13_REFERENCE.m_sweep; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7ec1d1c3
                                                                                        var var273 = local_7_FLOAT; // type is FLOAT value type is FLOAT
                                                                                        var272.a = var273;
                                                                                        var var275 = local_13_REFERENCE.m_linearVelocity; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5dcc776f
                                                                                        var var277 = local_8_REFERENCE.x; // type is FLOAT value type is FLOAT
                                                                                        var275.x = var277;
                                                                                        var var279 = local_13_REFERENCE.m_linearVelocity; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3b8efd5a
                                                                                        var var281 = local_8_REFERENCE.y; // type is FLOAT value type is FLOAT
                                                                                        var279.y = var281;
                                                                                        var var282 = local_13_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@2bd11ff3
                                                                                        var var283 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                                                                                        var282.m_angularVelocity = var283;
                                                                                        local_13_REFERENCE.VOIDsynchronizeTransform(local_13_REFERENCE);
                                                                                        local_5_INT = (local_5_INT + 1); // type is INT value type is INT
                                                                                        __label__ = 477;
                                                                                        continue $L_477;
                                                                                    case 616 :
                                                                                    // NORMAL
                                                                                        var var197 = ojcMathUtils.FLOATabsFLOAT(local_12_FLOAT); // type is FLOAT value type is FLOAT
                                                                                        var local_13_FLOAT = (1.5707964 / var197); // type is FLOAT value type is FLOAT
                                                                                        local_9_FLOAT = (local_9_FLOAT * local_13_FLOAT); // type is FLOAT value type is FLOAT
                                                                                        __label__ = 633;
                                                                                        continue $M_633_616;
                                                                                }
                                                                            case 571 :
                                                                            // NORMAL
                                                                                var var180 = ojcMathUtils.FLOATsqrtFLOAT(((local_10_FLOAT * local_10_FLOAT) + (local_11_FLOAT * local_11_FLOAT))); // type is FLOAT value type is FLOAT
                                                                                local_12_FLOAT = (2.0 / var180); // type is FLOAT value type is FLOAT
                                                                                var var186 = local_8_REFERENCE.ojcVec2mulLocalFLOAT(local_8_REFERENCE,local_12_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@50d686d
                                                                                __label__ = 597;
                                                                                continue $M_597_571;
                                                                        }
                                                                }
                                                            }
                                                    }
                                                }
                                            case 290 :
                                            // NORMAL
                                                $S_290 : {
                                                // NORMAL
                                                    var var23 = thisRef.toiContactSolver.BOOLEANsolveTOIPositionConstraintsINTINT(thisRef.toiContactSolver,toiIndexA,toiIndexB); // type is BOOLEAN value type is BOOLEAN
                                                    var local_5_BOOLEAN = var23; // type is BOOLEAN value type is BOOLEAN
                                                    var var26 = local_5_BOOLEAN; // type is BOOLEAN value type is BOOLEAN
                                                    if ((var26 == 0)) {
                                                        __label__ = 309;
                                                        break $S_290;
                                                    }
                                                    __label__ = 306;
                                                    }
                                                for(;;) switch (__label__) {
                                                    case 306 :
                                                    // NORMAL
                                                        __label__ = 315;
                                                        continue $M_290_315;
                                                    case 309 :
                                                    // NORMAL
                                                        local_4_INT = (local_4_INT + 1); // type is INT value type is INT
                                                        __label__ = 281;
                                                        continue $L_281;
                                                }
                                        }
                                    }
                                case 56 :
                                // NORMAL
                                    var var78 = thisRef.m_positions.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                                    var var79 = var78.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7532eec6
                                    var var82 = thisRef.m_bodies.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                                    var var85 = var82.m_sweep.c.x; // type is FLOAT value type is FLOAT
                                    var79.x = var85;
                                    var var88 = thisRef.m_positions.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                                    var var89 = var88.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4b7b9800
                                    var var92 = thisRef.m_bodies.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                                    var var95 = var92.m_sweep.c.y; // type is FLOAT value type is FLOAT
                                    var89.y = var95;
                                    var var98 = thisRef.m_positions.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                                    var var101 = thisRef.m_bodies.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                                    var var103 = var101.m_sweep.a; // type is FLOAT value type is FLOAT
                                    var98.a = var103;
                                    var var106 = thisRef.m_velocities.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                                    var var107 = var106.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7d3d818
                                    var var110 = thisRef.m_bodies.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                                    var var112 = var110.m_linearVelocity.x; // type is FLOAT value type is FLOAT
                                    var107.x = var112;
                                    var var115 = thisRef.m_velocities.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                                    var var116 = var115.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@69f3868f
                                    var var119 = thisRef.m_bodies.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                                    var var121 = var119.m_linearVelocity.y; // type is FLOAT value type is FLOAT
                                    var116.y = var121;
                                    var var124 = thisRef.m_velocities.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                                    var var127 = thisRef.m_bodies.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                                    var var128 = var127.m_angularVelocity; // type is FLOAT value type is FLOAT
                                    var124.w = var128;
                                    local_4_INT = (local_4_INT + 1); // type is INT value type is INT
                                    __label__ = 47;
                                    continue $L_47;
                            }
                        }
                }
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    var var1 = thisRef.m_bodyCount; // type is INT value type is INT
                    if ((toiIndexA < var1)) {
                        __label__ = 22;
                        continue $M_6_22;
                    }
                    }
                var var129 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var129);
                throw var129;
        }
    },

    classInitCheck : function() {
        if (!ojdIsland.__initialized) {
            ojdIsland.__initialized = true;
            var thePrototype = ojdIsland.Create.prototype;
            thePrototype.instanceOf = ojdIsland.instanceOf;
            thePrototype.ClassgetClass = ojdIsland.ClassgetClass;
            thePrototype.VOIDsolveTOIojdTimeStepINTINT = ojdIsland.VOIDsolveTOIojdTimeStepINTINT;
            thePrototype.VOIDreportA1ojdcContactVelocityConstraint = ojdIsland.VOIDreportA1ojdcContactVelocityConstraint;
            thePrototype.VOIDsolveojdProfileojdTimeStepojcVec2BOOLEAN = ojdIsland.VOIDsolveojdProfileojdTimeStepojcVec2BOOLEAN;
            thePrototype.VOIDaddojdjJoint = ojdIsland.VOIDaddojdjJoint;
            thePrototype.VOIDaddojdcContact = ojdIsland.VOIDaddojdcContact;
            thePrototype.VOIDaddojdBody = ojdIsland.VOIDaddojdBody;
            thePrototype.VOIDclear = ojdIsland.VOIDclear;
            thePrototype.VOIDinitINTINTINTojcContactListener = ojdIsland.VOIDinitINTINTINTojcContactListener;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            ojdIsland.VOIDclinit();
        }
    },

};

var ojdcContactSolver = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 98,
    __implementedTypes : [98,1],
    $assertionsDisabled : false, // declared in org.jbox2d.dynamics.contacts.ContactSolver

    Create : function() {
        this.tangent = null; // declared in org.jbox2d.dynamics.contacts.ContactSolver
        this.temp1 = null; // declared in org.jbox2d.dynamics.contacts.ContactSolver
        this.temp2 = null; // declared in org.jbox2d.dynamics.contacts.ContactSolver
        this.P = null; // declared in org.jbox2d.dynamics.contacts.ContactSolver
        this.temp = null; // declared in org.jbox2d.dynamics.contacts.ContactSolver
        this.xfA = null; // declared in org.jbox2d.dynamics.contacts.ContactSolver
        this.xfB = null; // declared in org.jbox2d.dynamics.contacts.ContactSolver
        this.worldManifold = null; // declared in org.jbox2d.dynamics.contacts.ContactSolver
        this.a = null; // declared in org.jbox2d.dynamics.contacts.ContactSolver
        this.b = null; // declared in org.jbox2d.dynamics.contacts.ContactSolver
        this.dv1 = null; // declared in org.jbox2d.dynamics.contacts.ContactSolver
        this.dv2 = null; // declared in org.jbox2d.dynamics.contacts.ContactSolver
        this.x = null; // declared in org.jbox2d.dynamics.contacts.ContactSolver
        this.d = null; // declared in org.jbox2d.dynamics.contacts.ContactSolver
        this.P1 = null; // declared in org.jbox2d.dynamics.contacts.ContactSolver
        this.P2 = null; // declared in org.jbox2d.dynamics.contacts.ContactSolver
        this.psolver = null; // declared in org.jbox2d.dynamics.contacts.ContactSolver
        this.rA = null; // declared in org.jbox2d.dynamics.contacts.ContactSolver
        this.rB = null; // declared in org.jbox2d.dynamics.contacts.ContactSolver
        this.m_positionConstraints = null; // declared in org.jbox2d.dynamics.contacts.ContactSolver
        this.m_velocityConstraints = null; // declared in org.jbox2d.dynamics.contacts.ContactSolver
        this.m_step = null; // declared in org.jbox2d.dynamics.contacts.ContactSolver
        this.m_count = 0; // declared in org.jbox2d.dynamics.contacts.ContactSolver
        this.m_positions = null; // declared in org.jbox2d.dynamics.contacts.ContactSolver
        this.m_velocities = null; // declared in org.jbox2d.dynamics.contacts.ContactSolver
        this.m_contacts = null; // declared in org.jbox2d.dynamics.contacts.ContactSolver
    },

    instanceOf : function(aType) {
        return ojdcContactSolver.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdcContactSolver;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdcContactSolver.BOOLEANdesiredAssertionStatus(ojdcContactSolver); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_13_9 : for(;;) switch (__label__) {
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_13_9;
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_13_9;
        }
        ojdcContactSolver.$assertionsDisabled = var1;
        return;
    },

    VOIDinit : function(thisRef) {
        var local_1_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var0);
            thisRef.tangent = var0;
            var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var1);
            thisRef.temp1 = var1;
            var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var2);
            thisRef.temp2 = var2;
            var var3 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var3);
            thisRef.P = var3;
            var var4 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var4);
            thisRef.temp = var4;
            var var5 = new ojcTransform.Create(); // type is REFERENCE value type is REFERENCE
            ojcTransform.VOIDinit(var5);
            thisRef.xfA = var5;
            var var6 = new ojcTransform.Create(); // type is REFERENCE value type is REFERENCE
            ojcTransform.VOIDinit(var6);
            thisRef.xfB = var6;
            var var7 = new ojcWorldManifold.Create(); // type is REFERENCE value type is REFERENCE
            ojcWorldManifold.VOIDinit(var7);
            thisRef.worldManifold = var7;
            var var8 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var8);
            thisRef.a = var8;
            var var9 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var9);
            thisRef.b = var9;
            var var10 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var10);
            thisRef.dv1 = var10;
            var var11 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var11);
            thisRef.dv2 = var11;
            var var12 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var12);
            thisRef.x = var12;
            var var13 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var13);
            thisRef.d = var13;
            var var14 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var14);
            thisRef.P1 = var14;
            var var15 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var15);
            thisRef.P2 = var15;
            var var16 = new ojdcPositionSolverManifold.Create(); // type is REFERENCE value type is REFERENCE
            ojdcPositionSolverManifold.VOIDinit(var16);
            thisRef.psolver = var16;
            var var17 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var17);
            thisRef.rA = var17;
            var var18 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var18);
            thisRef.rB = var18;
            var var19 = bytecoder.newArray(256,null); // type is REFERENCE value type is REFERENCE
            thisRef.m_positionConstraints = var19;
            var var20 = bytecoder.newArray(256,null); // type is REFERENCE value type is REFERENCE
            thisRef.m_velocityConstraints = var20;
            local_1_INT = 0; // type is INT value type is INT
            __label__ = 235;
            }
        $L_235 : for (;;) {
            $S_235 : {
            // NORMAL
                var var23 = local_1_INT; // type is INT value type is INT
                if ((var23 >= 256)) {
                    return;
                }
                }
            var var24 = thisRef.m_positionConstraints; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@2fb04bb9
            var var25 = local_1_INT; // type is INT value type is INT
            var var26 = new ojdcContactPositionConstraint.Create(); // type is REFERENCE value type is REFERENCE
            ojdcContactPositionConstraint.VOIDinit(var26);
            var24.data[var25] = var26;
            var var27 = thisRef.m_velocityConstraints; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@6b703416
            var var28 = local_1_INT; // type is INT value type is INT
            var var29 = new ojdcContactVelocityConstraint.Create(); // type is REFERENCE value type is REFERENCE
            ojdcContactVelocityConstraint.VOIDinit(var29);
            var27.data[var28] = var29;
            local_1_INT = (local_1_INT + 1); // type is INT value type is INT
            __label__ = 235;
            continue $L_235;
        }
    },

    VOIDinitojdcContactSolver$ContactSolverDef : function(thisRef,def) {
        var local_15_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_17_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_12_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_10_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_3_INT = null; // type is INT # of inits = 6
        var local_9_FLOAT = null; // type is FLOAT # of inits = 1
        var local_14_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_8_FLOAT = null; // type is FLOAT # of inits = 1
        var local_11_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_16_INT = null; // type is INT # of inits = 3
        var local_2_INT = null; // type is INT # of inits = 4
        var local_13_INT = null; // type is INT # of inits = 2
        var local_18_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = def.step; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@567c9b2
            thisRef.m_step = var0;
            var var1 = def.count; // type is INT value type is INT
            thisRef.m_count = var1;
            var var3 = thisRef.m_positionConstraints.data.length; // type is INT value type is INT
            var var4 = thisRef.m_count; // type is INT value type is INT
            if ((var3 >= var4)) {
                __label__ = 94;
                break $S_0;
            }
            __label__ = 28;
            }
        $M_94_28 : for(;;) switch (__label__) {
            case 94 :
            // NORMAL
                $S_94 : {
                // NORMAL
                    var var28 = thisRef.m_velocityConstraints.data.length; // type is INT value type is INT
                    var var29 = thisRef.m_count; // type is INT value type is INT
                    if ((var28 >= var29)) {
                        __label__ = 172;
                        break $S_94;
                    }
                    __label__ = 106;
                    }
                $M_172_106 : for(;;) switch (__label__) {
                    case 172 :
                    // NORMAL
                        $S_172 : {
                        // NORMAL
                            var var47 = def.positions; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1d4c6b0c
                            thisRef.m_positions = var47;
                            var var48 = def.velocities; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1dc50cce
                            thisRef.m_velocities = var48;
                            var var49 = def.contacts; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@5bc6e10a
                            thisRef.m_contacts = var49;
                            local_2_INT = 0; // type is INT value type is INT
                            __label__ = 198;
                            }
                        $L_198 : for (;;) {
                            $S_198 : {
                            // NORMAL
                                var var52 = local_2_INT; // type is INT value type is INT
                                var var53 = thisRef.m_count; // type is INT value type is INT
                                if ((var52 >= var53)) {
                                    return;
                                }
                                }
                            $S_206 : {
                            // NORMAL
                                var var56 = thisRef.m_contacts.data[local_2_INT]; // type is REFERENCE value type is REFERENCE
                                local_3_REFERENCE = var56; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@54b8
                                var local_4_REFERENCE = local_3_REFERENCE.m_fixtureA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@60579999
                                var local_5_REFERENCE = local_3_REFERENCE.m_fixtureB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1e3d9a94
                                var var65 = local_4_REFERENCE.ojcsShapegetShape(local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2b2b56e1
                                var local_6_REFERENCE = var65; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@47892c3f
                                var var68 = local_5_REFERENCE.ojcsShapegetShape(local_5_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1b4eee06
                                var local_7_REFERENCE = var68; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@69d53ec1
                                local_8_FLOAT = local_6_REFERENCE.m_radius; // type is FLOAT value type is FLOAT
                                local_9_FLOAT = local_7_REFERENCE.m_radius; // type is FLOAT value type is FLOAT
                                var var79 = local_4_REFERENCE.ojdBodygetBody(local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1838f144
                                local_10_REFERENCE = var79; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4e0f12fa
                                var var82 = local_5_REFERENCE.ojdBodygetBody(local_5_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@16decea8
                                local_11_REFERENCE = var82; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@329dff6f
                                var var85 = local_3_REFERENCE.ojcManifoldgetManifold(local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7a8c2cab
                                local_12_REFERENCE = var85; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4640318e
                                local_13_INT = local_12_REFERENCE.pointCount; // type is INT value type is INT
                                var var91 = ojdcContactSolver.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                                if ((var91 != 0)) {
                                    __label__ = 299;
                                    break $S_206;
                                }
                                __label__ = 286;
                                }
                            $M_286_299 : for(;;) switch (__label__) {
                                case 286 :
                                // NORMAL
                                    $S_286 : {
                                    // NORMAL
                                        var var92 = local_13_INT; // type is INT value type is INT
                                        if ((var92 > 0)) {
                                            __label__ = 299;
                                            continue $M_286_299;
                                        }
                                        }
                                    var var239 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                    jlAssertionError.VOIDinit(var239);
                                    throw var239;
                                case 299 :
                                // NORMAL
                                    $S_299 : {
                                    // NORMAL
                                        var var95 = thisRef.m_velocityConstraints.data[local_2_INT]; // type is REFERENCE value type is REFERENCE
                                        local_14_REFERENCE = var95; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@72494ade
                                        var var97 = local_14_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@72494ade
                                        var var99 = local_3_REFERENCE.m_friction; // type is FLOAT value type is FLOAT
                                        var97.friction = var99;
                                        var var100 = local_14_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@72494ade
                                        var var102 = local_3_REFERENCE.m_restitution; // type is FLOAT value type is FLOAT
                                        var100.restitution = var102;
                                        var var103 = local_14_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@72494ade
                                        var var105 = local_3_REFERENCE.m_tangentSpeed; // type is FLOAT value type is FLOAT
                                        var103.tangentSpeed = var105;
                                        var var106 = local_14_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@72494ade
                                        var var108 = local_10_REFERENCE.m_islandIndex; // type is INT value type is INT
                                        var106.indexA = var108;
                                        var var109 = local_14_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@72494ade
                                        var var111 = local_11_REFERENCE.m_islandIndex; // type is INT value type is INT
                                        var109.indexB = var111;
                                        var var112 = local_14_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@72494ade
                                        var var114 = local_10_REFERENCE.m_invMass; // type is FLOAT value type is FLOAT
                                        var112.invMassA = var114;
                                        var var115 = local_14_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@72494ade
                                        var var117 = local_11_REFERENCE.m_invMass; // type is FLOAT value type is FLOAT
                                        var115.invMassB = var117;
                                        var var118 = local_14_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@72494ade
                                        var var120 = local_10_REFERENCE.m_invI; // type is FLOAT value type is FLOAT
                                        var118.invIA = var120;
                                        var var121 = local_14_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@72494ade
                                        var var123 = local_11_REFERENCE.m_invI; // type is FLOAT value type is FLOAT
                                        var121.invIB = var123;
                                        var var124 = local_14_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@72494ade
                                        var var125 = local_2_INT; // type is INT value type is INT
                                        var124.contactIndex = var125;
                                        var var126 = local_14_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@72494ade
                                        var var127 = local_13_INT; // type is INT value type is INT
                                        var126.pointCount = var127;
                                        local_14_REFERENCE.K.VOIDsetZero(local_14_REFERENCE.K);
                                        local_14_REFERENCE.normalMass.VOIDsetZero(local_14_REFERENCE.normalMass);
                                        var var134 = thisRef.m_positionConstraints.data[local_2_INT]; // type is REFERENCE value type is REFERENCE
                                        local_15_REFERENCE = var134; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@2ff2b57f
                                        var var136 = local_15_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@2ff2b57f
                                        var var138 = local_10_REFERENCE.m_islandIndex; // type is INT value type is INT
                                        var136.indexA = var138;
                                        var var139 = local_15_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@2ff2b57f
                                        var var141 = local_11_REFERENCE.m_islandIndex; // type is INT value type is INT
                                        var139.indexB = var141;
                                        var var142 = local_15_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@2ff2b57f
                                        var var144 = local_10_REFERENCE.m_invMass; // type is FLOAT value type is FLOAT
                                        var142.invMassA = var144;
                                        var var145 = local_15_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@2ff2b57f
                                        var var147 = local_11_REFERENCE.m_invMass; // type is FLOAT value type is FLOAT
                                        var145.invMassB = var147;
                                        var var153 = local_15_REFERENCE.localCenterA.ojcVec2setojcVec2(local_15_REFERENCE.localCenterA,local_10_REFERENCE.m_sweep.localCenter); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3a6f360d
                                        var var159 = local_15_REFERENCE.localCenterB.ojcVec2setojcVec2(local_15_REFERENCE.localCenterB,local_11_REFERENCE.m_sweep.localCenter); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@650242d5
                                        var var160 = local_15_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@2ff2b57f
                                        var var162 = local_10_REFERENCE.m_invI; // type is FLOAT value type is FLOAT
                                        var160.invIA = var162;
                                        var var163 = local_15_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@2ff2b57f
                                        var var165 = local_11_REFERENCE.m_invI; // type is FLOAT value type is FLOAT
                                        var163.invIB = var165;
                                        var var170 = local_15_REFERENCE.localNormal.ojcVec2setojcVec2(local_15_REFERENCE.localNormal,local_12_REFERENCE.localNormal); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5496b53
                                        var var175 = local_15_REFERENCE.localPoint.ojcVec2setojcVec2(local_15_REFERENCE.localPoint,local_12_REFERENCE.localPoint); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1ebbe625
                                        var var176 = local_15_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@2ff2b57f
                                        var var177 = local_13_INT; // type is INT value type is INT
                                        var176.pointCount = var177;
                                        var var178 = local_15_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@2ff2b57f
                                        var var179 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                                        var178.radiusA = var179;
                                        var var180 = local_15_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@2ff2b57f
                                        var var181 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                                        var180.radiusB = var181;
                                        var var182 = local_15_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@2ff2b57f
                                        var var184 = local_12_REFERENCE.type; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5da774a1
                                        var182.type = var184;
                                        local_16_INT = 0; // type is INT value type is INT
                                        __label__ = 587;
                                        }
                                    $L_587 : for (;;) {
                                        $S_587 : {
                                        // NORMAL
                                            var var187 = local_16_INT; // type is INT value type is INT
                                            var var188 = local_13_INT; // type is INT value type is INT
                                            if ((var187 >= var188)) {
                                                __label__ = 753;
                                                break $S_587;
                                            }
                                            __label__ = 594;
                                            }
                                        for(;;) switch (__label__) {
                                            case 753 :
                                            // NORMAL
                                                local_2_INT = (local_2_INT + 1); // type is INT value type is INT
                                                __label__ = 198;
                                                continue $L_198;
                                            case 594 :
                                            // NORMAL
                                                $S_594 : {
                                                // NORMAL
                                                    var var192 = local_12_REFERENCE.points.data[local_16_INT]; // type is REFERENCE value type is REFERENCE
                                                    local_17_REFERENCE = var192; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@68f93d4e
                                                    var var197 = local_14_REFERENCE.points.data[local_16_INT]; // type is REFERENCE value type is REFERENCE
                                                    local_18_REFERENCE = var197; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1421cc73
                                                    var var200 = thisRef.m_step.warmStarting; // type is BOOLEAN value type is BOOLEAN
                                                    if ((var200 == 0)) {
                                                        __label__ = 663;
                                                        break $S_594;
                                                    }
                                                    __label__ = 624;
                                                    }
                                                $M_663_624 : for(;;) switch (__label__) {
                                                    case 624 :
                                                    // NORMAL
                                                        var var203 = local_18_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1421cc73
                                                        var var208 = (thisRef.m_step.dtRatio * local_17_REFERENCE.normalImpulse); // type is FLOAT value type is FLOAT
                                                        var203.normalImpulse = var208;
                                                        var var209 = local_18_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1421cc73
                                                        var var214 = (thisRef.m_step.dtRatio * local_17_REFERENCE.tangentImpulse); // type is FLOAT value type is FLOAT
                                                        var209.tangentImpulse = var214;
                                                        break $M_663_624;
                                                    case 663 :
                                                    // NORMAL
                                                        var var201 = local_18_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1421cc73
                                                        var201.normalImpulse = 0.0;
                                                        var var202 = local_18_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1421cc73
                                                        var202.tangentImpulse = 0.0;
                                                        break $M_663_624;
                                                }
                                                local_18_REFERENCE.rA.VOIDsetZero(local_18_REFERENCE.rA);
                                                local_18_REFERENCE.rB.VOIDsetZero(local_18_REFERENCE.rB);
                                                var var219 = local_18_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1421cc73
                                                var219.normalMass = 0.0;
                                                var var220 = local_18_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1421cc73
                                                var220.tangentMass = 0.0;
                                                var var221 = local_18_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1421cc73
                                                var221.velocityBias = 0.0;
                                                var var225 = local_15_REFERENCE.localPoints.data[local_16_INT]; // type is REFERENCE value type is REFERENCE
                                                var var228 = local_17_REFERENCE.localPoint.x; // type is FLOAT value type is FLOAT
                                                var225.x = var228;
                                                var var232 = local_15_REFERENCE.localPoints.data[local_16_INT]; // type is REFERENCE value type is REFERENCE
                                                var var235 = local_17_REFERENCE.localPoint.y; // type is FLOAT value type is FLOAT
                                                var232.y = var235;
                                                local_16_INT = (local_16_INT + 1); // type is INT value type is INT
                                                __label__ = 587;
                                                continue $L_587;
                                        }
                                    }
                            }
                        }
                    case 106 :
                    // NORMAL
                        $S_106 : {
                        // NORMAL
                            var local_2_REFERENCE = thisRef.m_velocityConstraints; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@2ac4812a
                            var var35 = ojcMathUtils.INTmaxINTINT((local_2_REFERENCE.data.length * 2),thisRef.m_count); // type is INT value type is INT
                            var var36 = bytecoder.newArray(var35,null); // type is REFERENCE value type is REFERENCE
                            thisRef.m_velocityConstraints = var36;
                            jlSystem.VOIDarraycopyjlObjectINTjlObjectINTINT(local_2_REFERENCE,0,thisRef.m_velocityConstraints,0,local_2_REFERENCE.data.length);
                            local_3_INT = local_2_REFERENCE.data.length; // type is INT value type is INT
                            __label__ = 144;
                            }
                        $L_144 : for (;;) {
                            $S_144 : {
                            // NORMAL
                                var var44 = local_3_INT; // type is INT value type is INT
                                var var46 = thisRef.m_velocityConstraints.data.length; // type is INT value type is INT
                                if ((var44 >= var46)) {
                                    __label__ = 172;
                                    continue $M_172_106;
                                }
                                }
                            var var236 = thisRef.m_velocityConstraints; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@641964d2
                            var var237 = local_3_INT; // type is INT value type is INT
                            var var238 = new ojdcContactVelocityConstraint.Create(); // type is REFERENCE value type is REFERENCE
                            ojdcContactVelocityConstraint.VOIDinit(var238);
                            var236.data[var237] = var238;
                            local_3_INT = (local_3_INT + 1); // type is INT value type is INT
                            __label__ = 144;
                            continue $L_144;
                        }
                }
            case 28 :
            // NORMAL
                $S_28 : {
                // NORMAL
                    var local_2_REFERENCE = thisRef.m_positionConstraints; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@25d23cba
                    var var11 = ojcMathUtils.INTmaxINTINT((local_2_REFERENCE.data.length * 2),thisRef.m_count); // type is INT value type is INT
                    var var12 = bytecoder.newArray(var11,null); // type is REFERENCE value type is REFERENCE
                    thisRef.m_positionConstraints = var12;
                    jlSystem.VOIDarraycopyjlObjectINTjlObjectINTINT(local_2_REFERENCE,0,thisRef.m_positionConstraints,0,local_2_REFERENCE.data.length);
                    local_3_INT = local_2_REFERENCE.data.length; // type is INT value type is INT
                    __label__ = 66;
                    }
                $L_66 : for (;;) {
                    $S_66 : {
                    // NORMAL
                        var var21 = local_3_INT; // type is INT value type is INT
                        var var23 = thisRef.m_positionConstraints.data.length; // type is INT value type is INT
                        if ((var21 >= var23)) {
                            __label__ = 94;
                            continue $M_94_28;
                        }
                        }
                    var var24 = thisRef.m_positionConstraints; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@43b656dd
                    var var25 = local_3_INT; // type is INT value type is INT
                    var var26 = new ojdcContactPositionConstraint.Create(); // type is REFERENCE value type is REFERENCE
                    ojdcContactPositionConstraint.VOIDinit(var26);
                    var24.data[var25] = var26;
                    local_3_INT = (local_3_INT + 1); // type is INT value type is INT
                    __label__ = 66;
                    continue $L_66;
                }
        }
    },

    VOIDinitializeVelocityConstraints : function(thisRef) {
        var local_33_FLOAT = null; // type is FLOAT # of inits = 1
        var local_9_FLOAT = null; // type is FLOAT # of inits = 2
        var local_12_FLOAT = null; // type is FLOAT # of inits = 2
        var local_19_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_15_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_14_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_17_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_1_INT = null; // type is INT # of inits = 4
        var local_28_FLOAT = null; // type is FLOAT # of inits = 2
        var local_21_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_11_FLOAT = null; // type is FLOAT # of inits = 2
        var var396 = null; // type is FLOAT # of inits = 2
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_36_FLOAT = null; // type is FLOAT # of inits = 1
        var local_24_INT = null; // type is INT # of inits = 3
        var local_4_FLOAT = null; // type is FLOAT # of inits = 1
        var local_23_INT = null; // type is INT # of inits = 2
        var local_30_FLOAT = null; // type is FLOAT # of inits = 2
        var local_10_FLOAT = null; // type is FLOAT # of inits = 2
        var local_16_FLOAT = null; // type is FLOAT # of inits = 1
        var local_25_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_5_FLOAT = null; // type is FLOAT # of inits = 1
        var var453 = null; // type is FLOAT # of inits = 2
        var local_31_FLOAT = null; // type is FLOAT # of inits = 2
        var local_13_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_20_FLOAT = null; // type is FLOAT # of inits = 1
        var local_22_FLOAT = null; // type is FLOAT # of inits = 2
        var local_18_FLOAT = null; // type is FLOAT # of inits = 2
        var var391 = null; // type is REFERENCE # of inits = 1
        var local_32_FLOAT = null; // type is FLOAT # of inits = 2
        var var448 = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_1_INT = 0; // type is INT value type is INT
            __label__ = 2;
            }
        $L_2 : for (;;) {
            $S_2 : {
            // NORMAL
                var var2 = local_1_INT; // type is INT value type is INT
                var var3 = thisRef.m_count; // type is INT value type is INT
                if ((var2 >= var3)) {
                    return;
                }
                }
            $S_10 : {
            // NORMAL
                var var6 = thisRef.m_velocityConstraints.data[local_1_INT]; // type is REFERENCE value type is REFERENCE
                local_2_REFERENCE = var6; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@57905514
                var var10 = thisRef.m_positionConstraints.data[local_1_INT]; // type is REFERENCE value type is REFERENCE
                var local_3_REFERENCE = var10; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@37604f5c
                local_4_FLOAT = local_3_REFERENCE.radiusA; // type is FLOAT value type is FLOAT
                local_5_FLOAT = local_3_REFERENCE.radiusB; // type is FLOAT value type is FLOAT
                var var23 = thisRef.m_contacts.data[local_2_REFERENCE.contactIndex]; // type is REFERENCE value type is REFERENCE
                var var24 = var23.ojcManifoldgetManifold(var23); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@55e9eda3
                local_6_REFERENCE = var24; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2854c3fb
                var local_7_INT = local_2_REFERENCE.indexA; // type is INT value type is INT
                var local_8_INT = local_2_REFERENCE.indexB; // type is INT value type is INT
                local_9_FLOAT = local_2_REFERENCE.invMassA; // type is FLOAT value type is FLOAT
                local_10_FLOAT = local_2_REFERENCE.invMassB; // type is FLOAT value type is FLOAT
                local_11_FLOAT = local_2_REFERENCE.invIA; // type is FLOAT value type is FLOAT
                local_12_FLOAT = local_2_REFERENCE.invIB; // type is FLOAT value type is FLOAT
                local_13_REFERENCE = local_3_REFERENCE.localCenterA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5af0ef2f
                local_14_REFERENCE = local_3_REFERENCE.localCenterB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@40e1ba81
                var var58 = thisRef.m_positions.data[local_7_INT]; // type is REFERENCE value type is REFERENCE
                local_15_REFERENCE = var58.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@754e076e
                var var63 = thisRef.m_positions.data[local_7_INT]; // type is REFERENCE value type is REFERENCE
                local_16_FLOAT = var63.a; // type is FLOAT value type is FLOAT
                var var69 = thisRef.m_velocities.data[local_7_INT]; // type is REFERENCE value type is REFERENCE
                local_17_REFERENCE = var69.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6f506891
                var var74 = thisRef.m_velocities.data[local_7_INT]; // type is REFERENCE value type is REFERENCE
                local_18_FLOAT = var74.w; // type is FLOAT value type is FLOAT
                var var80 = thisRef.m_positions.data[local_8_INT]; // type is REFERENCE value type is REFERENCE
                local_19_REFERENCE = var80.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@32047bc3
                var var85 = thisRef.m_positions.data[local_8_INT]; // type is REFERENCE value type is REFERENCE
                local_20_FLOAT = var85.a; // type is FLOAT value type is FLOAT
                var var91 = thisRef.m_velocities.data[local_8_INT]; // type is REFERENCE value type is REFERENCE
                local_21_REFERENCE = var91.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7f7ceab0
                var var96 = thisRef.m_velocities.data[local_8_INT]; // type is REFERENCE value type is REFERENCE
                local_22_FLOAT = var96.w; // type is FLOAT value type is FLOAT
                var var100 = ojdcContactSolver.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                if ((var100 != 0)) {
                    __label__ = 216;
                    break $S_10;
                }
                __label__ = 200;
                }
            $M_200_216 : for(;;) switch (__label__) {
                case 200 :
                // NORMAL
                    $S_200 : {
                    // NORMAL
                        var var102 = local_6_REFERENCE.pointCount; // type is INT value type is INT
                        if ((var102 > 0)) {
                            __label__ = 216;
                            continue $M_200_216;
                        }
                        }
                    var var103 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                    jlAssertionError.VOIDinit(var103);
                    throw var103;
                case 216 :
                // NORMAL
                    $S_216 : {
                    // NORMAL
                        var var107 = thisRef.xfA.q.ojcRotsetFLOAT(thisRef.xfA.q,local_16_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7a8cf746
                        var var111 = thisRef.xfB.q.ojcRotsetFLOAT(thisRef.xfB.q,local_20_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@16740c66
                        var var113 = thisRef.xfA.p; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@73fa708
                        var var129 = (local_15_REFERENCE.x - ((thisRef.xfA.q.c * local_13_REFERENCE.x) - (thisRef.xfA.q.s * local_13_REFERENCE.y))); // type is FLOAT value type is FLOAT
                        var113.x = var129;
                        var var131 = thisRef.xfA.p; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1f0ee435
                        var var147 = (local_15_REFERENCE.y - ((thisRef.xfA.q.s * local_13_REFERENCE.x) + (thisRef.xfA.q.c * local_13_REFERENCE.y))); // type is FLOAT value type is FLOAT
                        var131.y = var147;
                        var var149 = thisRef.xfB.p; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2251655
                        var var165 = (local_19_REFERENCE.x - ((thisRef.xfB.q.c * local_14_REFERENCE.x) - (thisRef.xfB.q.s * local_14_REFERENCE.y))); // type is FLOAT value type is FLOAT
                        var149.x = var165;
                        var var167 = thisRef.xfB.p; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@34043d4b
                        var var183 = (local_19_REFERENCE.y - ((thisRef.xfB.q.s * local_14_REFERENCE.x) + (thisRef.xfB.q.c * local_14_REFERENCE.y))); // type is FLOAT value type is FLOAT
                        var167.y = var183;
                        thisRef.worldManifold.VOIDinitializeojcManifoldojcTransformFLOATojcTransformFLOAT(thisRef.worldManifold,local_6_REFERENCE,thisRef.xfA,local_4_FLOAT,thisRef.xfB,local_5_FLOAT);
                        var var194 = local_2_REFERENCE.normal.ojcVec2setojcVec2(local_2_REFERENCE.normal,thisRef.worldManifold.normal); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4ef9db24
                        local_23_INT = local_2_REFERENCE.pointCount; // type is INT value type is INT
                        local_24_INT = 0; // type is INT value type is INT
                        __label__ = 483;
                        }
                    $L_483 : for (;;) {
                        $S_483 : {
                        // NORMAL
                            var var201 = local_24_INT; // type is INT value type is INT
                            var var202 = local_23_INT; // type is INT value type is INT
                            if ((var201 >= var202)) {
                                __label__ = 912;
                                break $S_483;
                            }
                            __label__ = 490;
                            }
                        for(;;) switch (__label__) {
                            case 490 :
                            // NORMAL
                                $S_490 : {
                                // NORMAL
                                    var var324 = local_2_REFERENCE.points.data[local_24_INT]; // type is REFERENCE value type is REFERENCE
                                    local_25_REFERENCE = var324; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@632e8021
                                    var var326 = local_25_REFERENCE.rA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@26bea182
                                    var var330 = thisRef.worldManifold.points.data[local_24_INT]; // type is REFERENCE value type is REFERENCE
                                    var var331 = var326.ojcVec2setojcVec2(var326,var330); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@c039cbe
                                    var var333 = var331.ojcVec2subLocalojcVec2(var331,local_15_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@19f80610
                                    var var335 = local_25_REFERENCE.rB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@19d8cef0
                                    var var339 = thisRef.worldManifold.points.data[local_24_INT]; // type is REFERENCE value type is REFERENCE
                                    var var340 = var335.ojcVec2setojcVec2(var335,var339); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4a39def8
                                    var var342 = var340.ojcVec2subLocalojcVec2(var340,local_19_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5a4f4d6d
                                    var local_26_FLOAT = ((local_25_REFERENCE.rA.x * local_2_REFERENCE.normal.y) - (local_25_REFERENCE.rA.y * local_2_REFERENCE.normal.x)); // type is FLOAT value type is FLOAT
                                    var local_27_FLOAT = ((local_25_REFERENCE.rB.x * local_2_REFERENCE.normal.y) - (local_25_REFERENCE.rB.y * local_2_REFERENCE.normal.x)); // type is FLOAT value type is FLOAT
                                    local_28_FLOAT = (((local_9_FLOAT + local_10_FLOAT) + ((local_11_FLOAT * local_26_FLOAT) * local_26_FLOAT)) + ((local_12_FLOAT * local_27_FLOAT) * local_27_FLOAT)); // type is FLOAT value type is FLOAT
                                    var391 = local_25_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@2f9b6d78
                                    var var392 = local_28_FLOAT; // type is FLOAT value type is FLOAT
                                    if ((var392 <= 0.0)) {
                                        __label__ = 658;
                                        break $S_490;
                                    }
                                    __label__ = 651;
                                    }
                                $M_658_651 : for(;;) switch (__label__) {
                                    case 658 :
                                    // NORMAL
                                        var396 = 0.0; // type is FLOAT value type is FLOAT
                                        break $M_658_651;
                                    case 651 :
                                    // NORMAL
                                        var396 = (1.0 / local_28_FLOAT); // type is FLOAT value type is FLOAT
                                        break $M_658_651;
                                }
                                $S_659 : {
                                // NORMAL
                                    var391.normalMass = var396;
                                    var local_29_FLOAT = (1.0 * local_2_REFERENCE.normal.y); // type is FLOAT value type is FLOAT
                                    local_30_FLOAT = (-1.0 * local_2_REFERENCE.normal.x); // type is FLOAT value type is FLOAT
                                    local_31_FLOAT = ((local_25_REFERENCE.rA.x * local_30_FLOAT) - (local_25_REFERENCE.rA.y * local_29_FLOAT)); // type is FLOAT value type is FLOAT
                                    local_32_FLOAT = ((local_25_REFERENCE.rB.x * local_30_FLOAT) - (local_25_REFERENCE.rB.y * local_29_FLOAT)); // type is FLOAT value type is FLOAT
                                    local_33_FLOAT = (((local_9_FLOAT + local_10_FLOAT) + ((local_11_FLOAT * local_31_FLOAT) * local_31_FLOAT)) + ((local_12_FLOAT * local_32_FLOAT) * local_32_FLOAT)); // type is FLOAT value type is FLOAT
                                    var448 = local_25_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@2f9b6d78
                                    var var449 = local_33_FLOAT; // type is FLOAT value type is FLOAT
                                    if ((var449 <= 0.0)) {
                                        __label__ = 776;
                                        break $S_659;
                                    }
                                    __label__ = 769;
                                    }
                                $M_769_776 : for(;;) switch (__label__) {
                                    case 776 :
                                    // NORMAL
                                        var453 = 0.0; // type is FLOAT value type is FLOAT
                                        break $M_769_776;
                                    case 769 :
                                    // NORMAL
                                        var453 = (1.0 / local_33_FLOAT); // type is FLOAT value type is FLOAT
                                        break $M_769_776;
                                }
                                $S_777 : {
                                // NORMAL
                                    var448.tangentMass = var453;
                                    var var454 = local_25_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@2f9b6d78
                                    var454.velocityBias = 0.0;
                                    var local_34_FLOAT = (((local_21_REFERENCE.x + ((-local_22_FLOAT) * local_25_REFERENCE.rB.y)) - local_17_REFERENCE.x) - ((-local_18_FLOAT) * local_25_REFERENCE.rA.y)); // type is FLOAT value type is FLOAT
                                    var local_35_FLOAT = (((local_21_REFERENCE.y + (local_22_FLOAT * local_25_REFERENCE.rB.x)) - local_17_REFERENCE.y) - (local_18_FLOAT * local_25_REFERENCE.rA.x)); // type is FLOAT value type is FLOAT
                                    local_36_FLOAT = ((local_2_REFERENCE.normal.x * local_34_FLOAT) + (local_2_REFERENCE.normal.y * local_35_FLOAT)); // type is FLOAT value type is FLOAT
                                    var var508 = local_36_FLOAT; // type is FLOAT value type is FLOAT
                                    if ((var508 >= -1.0)) {
                                        __label__ = 906;
                                        break $S_777;
                                    }
                                    __label__ = 893;
                                    }
                                $M_893_906 : for(;;) switch (__label__) {
                                    case 906 :
                                    // NORMAL
                                        local_24_INT = (local_24_INT + 1); // type is INT value type is INT
                                        __label__ = 483;
                                        continue $L_483;
                                    case 893 :
                                    // NORMAL
                                        var var510 = local_25_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@2f9b6d78
                                        var var515 = ((-local_2_REFERENCE.restitution) * local_36_FLOAT); // type is FLOAT value type is FLOAT
                                        var510.velocityBias = var515;
                                        __label__ = 906;
                                        continue $M_893_906;
                                }
                            case 912 :
                            // NORMAL
                                $S_912 : {
                                // NORMAL
                                    var var204 = local_2_REFERENCE.pointCount; // type is INT value type is INT
                                    if ((var204 != 2)) {
                                        __label__ = 1139;
                                        break $S_912;
                                    }
                                    __label__ = 920;
                                    }
                                $M_920_1139 : for(;;) switch (__label__) {
                                    case 920 :
                                    // NORMAL
                                        $S_920 : {
                                        // NORMAL
                                            var var207 = local_2_REFERENCE.points.data[0]; // type is REFERENCE value type is REFERENCE
                                            var local_24_REFERENCE = var207; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3de08b2
                                            var var211 = local_2_REFERENCE.points.data[1]; // type is REFERENCE value type is REFERENCE
                                            local_25_REFERENCE = var211; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@2f9b6d78
                                            var var217 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_24_REFERENCE.rA,local_2_REFERENCE.normal); // type is FLOAT value type is FLOAT
                                            var local_26_FLOAT = var217; // type is FLOAT value type is FLOAT
                                            var var224 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_24_REFERENCE.rB,local_2_REFERENCE.normal); // type is FLOAT value type is FLOAT
                                            var local_27_FLOAT = var224; // type is FLOAT value type is FLOAT
                                            var var231 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_25_REFERENCE.rA,local_2_REFERENCE.normal); // type is FLOAT value type is FLOAT
                                            local_28_FLOAT = var231; // type is FLOAT value type is FLOAT
                                            var var238 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_25_REFERENCE.rB,local_2_REFERENCE.normal); // type is FLOAT value type is FLOAT
                                            var local_29_FLOAT = var238; // type is FLOAT value type is FLOAT
                                            local_30_FLOAT = (((local_9_FLOAT + local_10_FLOAT) + ((local_11_FLOAT * local_26_FLOAT) * local_26_FLOAT)) + ((local_12_FLOAT * local_27_FLOAT) * local_27_FLOAT)); // type is FLOAT value type is FLOAT
                                            local_31_FLOAT = (((local_9_FLOAT + local_10_FLOAT) + ((local_11_FLOAT * local_28_FLOAT) * local_28_FLOAT)) + ((local_12_FLOAT * local_29_FLOAT) * local_29_FLOAT)); // type is FLOAT value type is FLOAT
                                            local_32_FLOAT = (((local_9_FLOAT + local_10_FLOAT) + ((local_11_FLOAT * local_26_FLOAT) * local_28_FLOAT)) + ((local_12_FLOAT * local_27_FLOAT) * local_29_FLOAT)); // type is FLOAT value type is FLOAT
                                            var var294 = (local_30_FLOAT * local_30_FLOAT); // type is FLOAT value type is FLOAT
                                            var var302 = (100.0 * ((local_30_FLOAT * local_31_FLOAT) - (local_32_FLOAT * local_32_FLOAT))); // type is FLOAT value type is FLOAT
                                            if ((var294 >= var302)) {
                                                __label__ = 1134;
                                                break $S_920;
                                            }
                                            __label__ = 1090;
                                            }
                                        for(;;) switch (__label__) {
                                            case 1134 :
                                            // NORMAL
                                                var var320 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@57905514
                                                var320.pointCount = 1;
                                                __label__ = 1139;
                                                continue $M_920_1139;
                                            case 1090 :
                                            // NORMAL
                                                var var309 = local_2_REFERENCE.K.ex.ojcVec2setFLOATFLOAT(local_2_REFERENCE.K.ex,local_30_FLOAT,local_32_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5c2ee977
                                                var var315 = local_2_REFERENCE.K.ey.ojcVec2setFLOATFLOAT(local_2_REFERENCE.K.ey,local_32_FLOAT,local_31_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@58e43214
                                                local_2_REFERENCE.K.VOIDinvertToOutojcMat22(local_2_REFERENCE.K,local_2_REFERENCE.normalMass);
                                                __label__ = 1139;
                                                continue $M_920_1139;
                                        }
                                    case 1139 :
                                    // NORMAL
                                        local_1_INT = (local_1_INT + 1); // type is INT value type is INT
                                        __label__ = 2;
                                        continue $L_2;
                                }
                        }
                    }
            }
        }
    },

    VOIDwarmStart : function(thisRef) {
        var local_10_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_5_FLOAT = null; // type is FLOAT # of inits = 2
        var local_11_FLOAT = null; // type is FLOAT # of inits = 3
        var local_4_INT = null; // type is INT # of inits = 2
        var local_7_FLOAT = null; // type is FLOAT # of inits = 2
        var local_8_FLOAT = null; // type is FLOAT # of inits = 2
        var local_1_INT = null; // type is INT # of inits = 4
        var local_14_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_17_INT = null; // type is INT # of inits = 3
        var local_9_INT = null; // type is INT # of inits = 2
        var local_15_FLOAT = null; // type is FLOAT # of inits = 2
        var local_12_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_6_FLOAT = null; // type is FLOAT # of inits = 2
        var local_16_FLOAT = null; // type is FLOAT # of inits = 2
        var local_13_FLOAT = null; // type is FLOAT # of inits = 3
        var local_3_INT = null; // type is INT # of inits = 2
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_1_INT = 0; // type is INT value type is INT
            __label__ = 2;
            }
        $L_2 : for (;;) {
            $S_2 : {
            // NORMAL
                var var2 = local_1_INT; // type is INT value type is INT
                var var3 = thisRef.m_count; // type is INT value type is INT
                if ((var2 >= var3)) {
                    return;
                }
                }
            $S_10 : {
            // NORMAL
                var var6 = thisRef.m_velocityConstraints.data[local_1_INT]; // type is REFERENCE value type is REFERENCE
                local_2_REFERENCE = var6; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@360b4938
                local_3_INT = local_2_REFERENCE.indexA; // type is INT value type is INT
                local_4_INT = local_2_REFERENCE.indexB; // type is INT value type is INT
                local_5_FLOAT = local_2_REFERENCE.invMassA; // type is FLOAT value type is FLOAT
                local_6_FLOAT = local_2_REFERENCE.invIA; // type is FLOAT value type is FLOAT
                local_7_FLOAT = local_2_REFERENCE.invMassB; // type is FLOAT value type is FLOAT
                local_8_FLOAT = local_2_REFERENCE.invIB; // type is FLOAT value type is FLOAT
                local_9_INT = local_2_REFERENCE.pointCount; // type is INT value type is INT
                var var38 = thisRef.m_velocities.data[local_3_INT]; // type is REFERENCE value type is REFERENCE
                local_10_REFERENCE = var38.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@8f33505
                var var43 = thisRef.m_velocities.data[local_3_INT]; // type is REFERENCE value type is REFERENCE
                local_11_FLOAT = var43.w; // type is FLOAT value type is FLOAT
                var var49 = thisRef.m_velocities.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                local_12_REFERENCE = var49.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@206f227b
                var var54 = thisRef.m_velocities.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                local_13_FLOAT = var54.w; // type is FLOAT value type is FLOAT
                local_14_REFERENCE = local_2_REFERENCE.normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@308d8666
                local_15_FLOAT = (1.0 * local_14_REFERENCE.y); // type is FLOAT value type is FLOAT
                local_16_FLOAT = (-1.0 * local_14_REFERENCE.x); // type is FLOAT value type is FLOAT
                local_17_INT = 0; // type is INT value type is INT
                __label__ = 132;
                }
            $L_132 : for (;;) {
                $S_132 : {
                // NORMAL
                    var var73 = local_17_INT; // type is INT value type is INT
                    var var74 = local_9_INT; // type is INT value type is INT
                    if ((var73 >= var74)) {
                        __label__ = 320;
                        break $S_132;
                    }
                    __label__ = 139;
                    }
                for(;;) switch (__label__) {
                    case 139 :
                    // NORMAL
                        var var78 = local_2_REFERENCE.points.data[local_17_INT]; // type is REFERENCE value type is REFERENCE
                        var local_18_REFERENCE = var78; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@5c46b38a
                        var local_19_FLOAT = ((local_15_FLOAT * local_18_REFERENCE.tangentImpulse) + (local_14_REFERENCE.x * local_18_REFERENCE.normalImpulse)); // type is FLOAT value type is FLOAT
                        var local_20_FLOAT = ((local_16_FLOAT * local_18_REFERENCE.tangentImpulse) + (local_14_REFERENCE.y * local_18_REFERENCE.normalImpulse)); // type is FLOAT value type is FLOAT
                        local_11_FLOAT = (local_11_FLOAT - (local_6_FLOAT * ((local_18_REFERENCE.rA.x * local_20_FLOAT) - (local_18_REFERENCE.rA.y * local_19_FLOAT)))); // type is FLOAT value type is FLOAT
                        var var120 = local_10_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@406267da
                        var var125 = (var120.x - (local_19_FLOAT * local_5_FLOAT)); // type is FLOAT value type is FLOAT
                        var120.x = var125;
                        var var126 = local_10_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@406267da
                        var var131 = (var126.y - (local_20_FLOAT * local_5_FLOAT)); // type is FLOAT value type is FLOAT
                        var126.y = var131;
                        local_13_FLOAT = (local_13_FLOAT + (local_8_FLOAT * ((local_18_REFERENCE.rB.x * local_20_FLOAT) - (local_18_REFERENCE.rB.y * local_19_FLOAT)))); // type is FLOAT value type is FLOAT
                        var var148 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6690e482
                        var var153 = (var148.x + (local_19_FLOAT * local_7_FLOAT)); // type is FLOAT value type is FLOAT
                        var148.x = var153;
                        var var154 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6690e482
                        var var159 = (var154.y + (local_20_FLOAT * local_7_FLOAT)); // type is FLOAT value type is FLOAT
                        var154.y = var159;
                        local_17_INT = (local_17_INT + 1); // type is INT value type is INT
                        __label__ = 132;
                        continue $L_132;
                    case 320 :
                    // NORMAL
                        var var162 = thisRef.m_velocities.data[local_3_INT]; // type is REFERENCE value type is REFERENCE
                        var var163 = local_11_FLOAT; // type is FLOAT value type is FLOAT
                        var162.w = var163;
                        var var166 = thisRef.m_velocities.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                        var var167 = local_13_FLOAT; // type is FLOAT value type is FLOAT
                        var166.w = var167;
                        local_1_INT = (local_1_INT + 1); // type is INT value type is INT
                        __label__ = 2;
                        continue $L_2;
                }
            }
        }
    },

    VOIDsolveVelocityConstraints : function(thisRef) {
        var local_6_FLOAT = null; // type is FLOAT # of inits = 2
        var local_14_REFERENCE = null; // type is REFERENCE # of inits = 2
        var var543 = null; // type is FLOAT # of inits = 2
        var local_17_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_16_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_19_FLOAT = null; // type is FLOAT # of inits = 6
        var local_9_INT = null; // type is INT # of inits = 2
        var local_12_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_16_INT = null; // type is INT # of inits = 3
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_18_FLOAT = null; // type is FLOAT # of inits = 5
        var local_7_FLOAT = null; // type is FLOAT # of inits = 2
        var local_5_FLOAT = null; // type is FLOAT # of inits = 2
        var local_15_FLOAT = null; // type is FLOAT # of inits = 2
        var local_4_INT = null; // type is INT # of inits = 2
        var local_8_FLOAT = null; // type is FLOAT # of inits = 2
        var local_10_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_11_FLOAT = null; // type is FLOAT # of inits = 8
        var local_13_FLOAT = null; // type is FLOAT # of inits = 8
        var local_1_INT = null; // type is INT # of inits = 4
        var local_3_INT = null; // type is INT # of inits = 2
        var local_21_FLOAT = null; // type is FLOAT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_1_INT = 0; // type is INT value type is INT
            __label__ = 2;
            }
        $L_2 : for (;;) {
            $S_2 : {
            // NORMAL
                var var2 = local_1_INT; // type is INT value type is INT
                var var3 = thisRef.m_count; // type is INT value type is INT
                if ((var2 >= var3)) {
                    return;
                }
                }
            $S_10 : {
            // NORMAL
                var var6 = thisRef.m_velocityConstraints.data[local_1_INT]; // type is REFERENCE value type is REFERENCE
                local_2_REFERENCE = var6; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@32f9fe2c
                local_3_INT = local_2_REFERENCE.indexA; // type is INT value type is INT
                local_4_INT = local_2_REFERENCE.indexB; // type is INT value type is INT
                local_5_FLOAT = local_2_REFERENCE.invMassA; // type is FLOAT value type is FLOAT
                local_6_FLOAT = local_2_REFERENCE.invMassB; // type is FLOAT value type is FLOAT
                local_7_FLOAT = local_2_REFERENCE.invIA; // type is FLOAT value type is FLOAT
                local_8_FLOAT = local_2_REFERENCE.invIB; // type is FLOAT value type is FLOAT
                local_9_INT = local_2_REFERENCE.pointCount; // type is INT value type is INT
                var var38 = thisRef.m_velocities.data[local_3_INT]; // type is REFERENCE value type is REFERENCE
                local_10_REFERENCE = var38.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@c50df65
                var var43 = thisRef.m_velocities.data[local_3_INT]; // type is REFERENCE value type is REFERENCE
                local_11_FLOAT = var43.w; // type is FLOAT value type is FLOAT
                var var49 = thisRef.m_velocities.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                local_12_REFERENCE = var49.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3ad37f61
                var var54 = thisRef.m_velocities.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                local_13_FLOAT = var54.w; // type is FLOAT value type is FLOAT
                local_14_REFERENCE = local_2_REFERENCE.normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6dc795c4
                var var61 = thisRef.tangent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@350e9243
                var var65 = (1.0 * local_2_REFERENCE.normal.y); // type is FLOAT value type is FLOAT
                var61.x = var65;
                var var66 = thisRef.tangent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3fafd870
                var var70 = (-1.0 * local_2_REFERENCE.normal.x); // type is FLOAT value type is FLOAT
                var66.y = var70;
                local_15_FLOAT = local_2_REFERENCE.friction; // type is FLOAT value type is FLOAT
                var var75 = ojdcContactSolver.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                if ((var75 != 0)) {
                    __label__ = 175;
                    break $S_10;
                }
                __label__ = 155;
                }
            $M_175_155 : for(;;) switch (__label__) {
                case 175 :
                // NORMAL
                    $S_175 : {
                    // NORMAL
                        local_16_INT = 0; // type is INT value type is INT
                        __label__ = 178;
                        }
                    $L_178 : for (;;) {
                        $S_178 : {
                        // NORMAL
                            var var81 = local_16_INT; // type is INT value type is INT
                            var var82 = local_9_INT; // type is INT value type is INT
                            if ((var81 >= var82)) {
                                __label__ = 506;
                                break $S_178;
                            }
                            __label__ = 185;
                            }
                        for(;;) switch (__label__) {
                            case 185 :
                            // NORMAL
                                var var776 = local_2_REFERENCE.points.data[local_16_INT]; // type is REFERENCE value type is REFERENCE
                                local_17_REFERENCE = var776; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1a97ba99
                                var local_18_REFERENCE = local_17_REFERENCE.rA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1e269093
                                local_19_FLOAT = (((((-local_13_FLOAT) * local_17_REFERENCE.rB.y) + local_12_REFERENCE.x) - local_10_REFERENCE.x) + (local_11_FLOAT * local_18_REFERENCE.y)); // type is FLOAT value type is FLOAT
                                var local_20_FLOAT = ((((local_13_FLOAT * local_17_REFERENCE.rB.x) + local_12_REFERENCE.y) - local_10_REFERENCE.y) - (local_11_FLOAT * local_18_REFERENCE.x)); // type is FLOAT value type is FLOAT
                                local_21_FLOAT = (((local_19_FLOAT * thisRef.tangent.x) + (local_20_FLOAT * thisRef.tangent.y)) - local_2_REFERENCE.tangentSpeed); // type is FLOAT value type is FLOAT
                                var local_22_FLOAT = (local_17_REFERENCE.tangentMass * (-local_21_FLOAT)); // type is FLOAT value type is FLOAT
                                var local_23_FLOAT = (local_15_FLOAT * local_17_REFERENCE.normalImpulse); // type is FLOAT value type is FLOAT
                                var var846 = ojcMathUtils.FLOATclampFLOATFLOATFLOAT((local_17_REFERENCE.tangentImpulse + local_22_FLOAT),(-local_23_FLOAT),local_23_FLOAT); // type is FLOAT value type is FLOAT
                                var local_24_FLOAT = var846; // type is FLOAT value type is FLOAT
                                var local_22_FLOAT = (local_24_FLOAT - local_17_REFERENCE.tangentImpulse); // type is FLOAT value type is FLOAT
                                var var853 = local_17_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@4871287c
                                var var854 = local_24_FLOAT; // type is FLOAT value type is FLOAT
                                var853.tangentImpulse = var854;
                                var local_25_FLOAT = (thisRef.tangent.x * local_22_FLOAT); // type is FLOAT value type is FLOAT
                                var local_26_FLOAT = (thisRef.tangent.y * local_22_FLOAT); // type is FLOAT value type is FLOAT
                                var var867 = local_10_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@52e8c0d6
                                var var872 = (var867.x - (local_25_FLOAT * local_5_FLOAT)); // type is FLOAT value type is FLOAT
                                var867.x = var872;
                                var var873 = local_10_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@52e8c0d6
                                var var878 = (var873.y - (local_26_FLOAT * local_5_FLOAT)); // type is FLOAT value type is FLOAT
                                var873.y = var878;
                                local_11_FLOAT = (local_11_FLOAT - (local_7_FLOAT * ((local_17_REFERENCE.rA.x * local_26_FLOAT) - (local_17_REFERENCE.rA.y * local_25_FLOAT)))); // type is FLOAT value type is FLOAT
                                var var895 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@18f93e2
                                var var900 = (var895.x + (local_25_FLOAT * local_6_FLOAT)); // type is FLOAT value type is FLOAT
                                var895.x = var900;
                                var var901 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@18f93e2
                                var var906 = (var901.y + (local_26_FLOAT * local_6_FLOAT)); // type is FLOAT value type is FLOAT
                                var901.y = var906;
                                local_13_FLOAT = (local_13_FLOAT + (local_8_FLOAT * ((local_17_REFERENCE.rB.x * local_26_FLOAT) - (local_17_REFERENCE.rB.y * local_25_FLOAT)))); // type is FLOAT value type is FLOAT
                                local_16_INT = (local_16_INT + 1); // type is INT value type is INT
                                __label__ = 178;
                                continue $L_178;
                            case 506 :
                            // NORMAL
                                $S_506 : {
                                // NORMAL
                                    var var84 = local_2_REFERENCE.pointCount; // type is INT value type is INT
                                    if ((var84 != 1)) {
                                        __label__ = 820;
                                        break $S_506;
                                    }
                                    __label__ = 514;
                                    }
                                $M_514_820 : for(;;) switch (__label__) {
                                    case 514 :
                                    // NORMAL
                                        $S_514 : {
                                        // NORMAL
                                            var var475 = local_2_REFERENCE.points.data[0]; // type is REFERENCE value type is REFERENCE
                                            local_16_REFERENCE = var475; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@4b59001c
                                            var local_17_FLOAT = (((((-local_13_FLOAT) * local_16_REFERENCE.rB.y) + local_12_REFERENCE.x) - local_10_REFERENCE.x) + (local_11_FLOAT * local_16_REFERENCE.rA.y)); // type is FLOAT value type is FLOAT
                                            local_18_FLOAT = ((((local_13_FLOAT * local_16_REFERENCE.rB.x) + local_12_REFERENCE.y) - local_10_REFERENCE.y) - (local_11_FLOAT * local_16_REFERENCE.rA.x)); // type is FLOAT value type is FLOAT
                                            local_19_FLOAT = ((local_17_FLOAT * local_14_REFERENCE.x) + (local_18_FLOAT * local_14_REFERENCE.y)); // type is FLOAT value type is FLOAT
                                            var local_20_FLOAT = ((-local_16_REFERENCE.normalMass) * (local_19_FLOAT - local_16_REFERENCE.velocityBias)); // type is FLOAT value type is FLOAT
                                            local_21_FLOAT = (local_16_REFERENCE.normalImpulse + local_20_FLOAT); // type is FLOAT value type is FLOAT
                                            var var540 = local_21_FLOAT; // type is FLOAT value type is FLOAT
                                            if ((var540 <= 0.0)) {
                                                __label__ = 655;
                                                break $S_514;
                                            }
                                            __label__ = 650;
                                            }
                                        $M_655_650 : for(;;) switch (__label__) {
                                            case 650 :
                                            // NORMAL
                                                var543 = local_21_FLOAT; // type is FLOAT value type is FLOAT
                                                break $M_655_650;
                                            case 655 :
                                            // NORMAL
                                                var543 = 0.0; // type is FLOAT value type is FLOAT
                                                break $M_655_650;
                                        }
                                        var local_22_FLOAT = var543; // type is FLOAT value type is FLOAT
                                        var local_20_FLOAT = (local_22_FLOAT - local_16_REFERENCE.normalImpulse); // type is FLOAT value type is FLOAT
                                        var var551 = local_16_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@36b495ab
                                        var var552 = local_22_FLOAT; // type is FLOAT value type is FLOAT
                                        var551.normalImpulse = var552;
                                        var local_23_FLOAT = (local_14_REFERENCE.x * local_20_FLOAT); // type is FLOAT value type is FLOAT
                                        var local_24_FLOAT = (local_14_REFERENCE.y * local_20_FLOAT); // type is FLOAT value type is FLOAT
                                        var var565 = local_10_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@52e8c0d6
                                        var var570 = (var565.x - (local_23_FLOAT * local_5_FLOAT)); // type is FLOAT value type is FLOAT
                                        var565.x = var570;
                                        var var571 = local_10_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@52e8c0d6
                                        var var576 = (var571.y - (local_24_FLOAT * local_5_FLOAT)); // type is FLOAT value type is FLOAT
                                        var571.y = var576;
                                        local_11_FLOAT = (local_11_FLOAT - (local_7_FLOAT * ((local_16_REFERENCE.rA.x * local_24_FLOAT) - (local_16_REFERENCE.rA.y * local_23_FLOAT)))); // type is FLOAT value type is FLOAT
                                        var var593 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@18f93e2
                                        var var598 = (var593.x + (local_23_FLOAT * local_6_FLOAT)); // type is FLOAT value type is FLOAT
                                        var593.x = var598;
                                        var var599 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@18f93e2
                                        var var604 = (var599.y + (local_24_FLOAT * local_6_FLOAT)); // type is FLOAT value type is FLOAT
                                        var599.y = var604;
                                        local_13_FLOAT = (local_13_FLOAT + (local_8_FLOAT * ((local_16_REFERENCE.rB.x * local_24_FLOAT) - (local_16_REFERENCE.rB.y * local_23_FLOAT)))); // type is FLOAT value type is FLOAT
                                        break $M_514_820;
                                    case 820 :
                                    // NORMAL
                                        $S_820 : {
                                        // NORMAL
                                            var var87 = local_2_REFERENCE.points.data[0]; // type is REFERENCE value type is REFERENCE
                                            local_16_REFERENCE = var87; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@36b495ab
                                            var var91 = local_2_REFERENCE.points.data[1]; // type is REFERENCE value type is REFERENCE
                                            local_17_REFERENCE = var91; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@4871287c
                                            var var93 = thisRef.a; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4f9e4f26
                                            var var95 = local_16_REFERENCE.normalImpulse; // type is FLOAT value type is FLOAT
                                            var93.x = var95;
                                            var var96 = thisRef.a; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@ec3401c
                                            var var98 = local_17_REFERENCE.normalImpulse; // type is FLOAT value type is FLOAT
                                            var96.y = var98;
                                            var var99 = ojdcContactSolver.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                                            if ((var99 != 0)) {
                                                __label__ = 898;
                                                break $S_820;
                                            }
                                            __label__ = 866;
                                            }
                                        $M_898_866 : for(;;) switch (__label__) {
                                            case 898 :
                                            // NORMAL
                                                $S_898 : {
                                                // NORMAL
                                                    var var106 = thisRef.dv1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4f6e75ec
                                                    var var124 = (((((-local_13_FLOAT) * local_16_REFERENCE.rB.y) + local_12_REFERENCE.x) - local_10_REFERENCE.x) + (local_11_FLOAT * local_16_REFERENCE.rA.y)); // type is FLOAT value type is FLOAT
                                                    var106.x = var124;
                                                    var var125 = thisRef.dv1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@65e6c69a
                                                    var var142 = ((((local_13_FLOAT * local_16_REFERENCE.rB.x) + local_12_REFERENCE.y) - local_10_REFERENCE.y) - (local_11_FLOAT * local_16_REFERENCE.rA.x)); // type is FLOAT value type is FLOAT
                                                    var125.y = var142;
                                                    var var143 = thisRef.dv2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@583c427f
                                                    var var161 = (((((-local_13_FLOAT) * local_17_REFERENCE.rB.y) + local_12_REFERENCE.x) - local_10_REFERENCE.x) + (local_11_FLOAT * local_17_REFERENCE.rA.y)); // type is FLOAT value type is FLOAT
                                                    var143.x = var161;
                                                    var var162 = thisRef.dv2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4ceb3ac4
                                                    var var179 = ((((local_13_FLOAT * local_17_REFERENCE.rB.x) + local_12_REFERENCE.y) - local_10_REFERENCE.y) - (local_11_FLOAT * local_17_REFERENCE.rA.x)); // type is FLOAT value type is FLOAT
                                                    var162.y = var179;
                                                    local_18_FLOAT = ((thisRef.dv1.x * local_14_REFERENCE.x) + (thisRef.dv1.y * local_14_REFERENCE.y)); // type is FLOAT value type is FLOAT
                                                    local_19_FLOAT = ((thisRef.dv2.x * local_14_REFERENCE.x) + (thisRef.dv2.y * local_14_REFERENCE.y)); // type is FLOAT value type is FLOAT
                                                    var var206 = thisRef.b; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7096f7a0
                                                    var var210 = (local_18_FLOAT - local_16_REFERENCE.velocityBias); // type is FLOAT value type is FLOAT
                                                    var206.x = var210;
                                                    var var211 = thisRef.b; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@23973d3e
                                                    var var215 = (local_19_FLOAT - local_17_REFERENCE.velocityBias); // type is FLOAT value type is FLOAT
                                                    var211.y = var215;
                                                    var local_20_REFERENCE = local_2_REFERENCE.K; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1982bc89
                                                    var var219 = thisRef.b; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@c2a8867
                                                    var var234 = (var219.x - ((local_20_REFERENCE.ex.x * thisRef.a.x) + (local_20_REFERENCE.ey.x * thisRef.a.y))); // type is FLOAT value type is FLOAT
                                                    var219.x = var234;
                                                    var var235 = thisRef.b; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4bc655b5
                                                    var var250 = (var235.y - ((local_20_REFERENCE.ex.y * thisRef.a.x) + (local_20_REFERENCE.ey.y * thisRef.a.y))); // type is FLOAT value type is FLOAT
                                                    var235.y = var250;
                                                    ojcMat22.VOIDmulToOutUnsafeojcMat22ojcVec2ojcVec2(local_2_REFERENCE.normalMass,thisRef.b,thisRef.x);
                                                    var var255 = thisRef.x; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@51a2ff3e
                                                    var var257 = (var255.x * -1.0); // type is FLOAT value type is FLOAT
                                                    var255.x = var257;
                                                    var var258 = thisRef.x; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5d487777
                                                    var var260 = (var258.y * -1.0); // type is FLOAT value type is FLOAT
                                                    var258.y = var260;
                                                    var var262 = thisRef.x.x; // type is FLOAT value type is FLOAT
                                                    if ((var262 < 0.0)) {
                                                        __label__ = 1544;
                                                        break $S_898;
                                                    }
                                                    __label__ = 1307;
                                                    }
                                                $M_1307_1544 : for(;;) switch (__label__) {
                                                    case 1307 :
                                                    // NORMAL
                                                        $S_1307 : {
                                                        // NORMAL
                                                            var var265 = thisRef.x.y; // type is FLOAT value type is FLOAT
                                                            if ((var265 < 0.0)) {
                                                                __label__ = 1544;
                                                                continue $M_1307_1544;
                                                            }
                                                            }
                                                        var var403 = thisRef.d.ojcVec2setojcVec2(thisRef.d,thisRef.x); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@579a509
                                                        var var405 = var403.ojcVec2subLocalojcVec2(var403,thisRef.a); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7ceb33ee
                                                        var var408 = thisRef.P1.ojcVec2setojcVec2(thisRef.P1,local_14_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3a767842
                                                        var var411 = var408.ojcVec2mulLocalFLOAT(var408,thisRef.d.x); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@249b43b4
                                                        var var414 = thisRef.P2.ojcVec2setojcVec2(thisRef.P2,local_14_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6c02fbc3
                                                        var var417 = var414.ojcVec2mulLocalFLOAT(var414,thisRef.d.y); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@49d3d1ee
                                                        var var420 = thisRef.temp1.ojcVec2setojcVec2(thisRef.temp1,thisRef.P1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@40ee04fe
                                                        var var422 = var420.ojcVec2addLocalojcVec2(var420,thisRef.P2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3e9679b4
                                                        var var425 = thisRef.temp2.ojcVec2setojcVec2(thisRef.temp2,thisRef.temp1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@45b14146
                                                        var var427 = var425.ojcVec2mulLocalFLOAT(var425,local_5_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@123aa4bf
                                                        var var430 = local_10_REFERENCE.ojcVec2subLocalojcVec2(local_10_REFERENCE,thisRef.temp2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@22439bf2
                                                        var var433 = thisRef.temp2.ojcVec2setojcVec2(thisRef.temp2,thisRef.temp1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2f950dd7
                                                        var var435 = var433.ojcVec2mulLocalFLOAT(var433,local_6_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6061c212
                                                        var var438 = local_12_REFERENCE.ojcVec2addLocalojcVec2(local_12_REFERENCE,thisRef.temp2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@27b98dfd
                                                        var var439 = local_11_FLOAT; // type is FLOAT value type is FLOAT
                                                        var var440 = local_7_FLOAT; // type is FLOAT value type is FLOAT
                                                        var var444 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_16_REFERENCE.rA,thisRef.P1); // type is FLOAT value type is FLOAT
                                                        var var448 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_17_REFERENCE.rA,thisRef.P2); // type is FLOAT value type is FLOAT
                                                        local_11_FLOAT = (var439 - (var440 * (var444 + var448))); // type is FLOAT value type is FLOAT
                                                        var var453 = local_13_FLOAT; // type is FLOAT value type is FLOAT
                                                        var var454 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                                                        var var458 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_16_REFERENCE.rB,thisRef.P1); // type is FLOAT value type is FLOAT
                                                        var var462 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_17_REFERENCE.rB,thisRef.P2); // type is FLOAT value type is FLOAT
                                                        local_13_FLOAT = (var453 + (var454 * (var458 + var462))); // type is FLOAT value type is FLOAT
                                                        var var467 = local_16_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@36b495ab
                                                        var var469 = thisRef.x.x; // type is FLOAT value type is FLOAT
                                                        var467.normalImpulse = var469;
                                                        var var470 = local_17_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@4871287c
                                                        var var472 = thisRef.x.y; // type is FLOAT value type is FLOAT
                                                        var470.normalImpulse = var472;
                                                        break $M_514_820;
                                                    case 1544 :
                                                    // NORMAL
                                                        $S_1544 : {
                                                        // NORMAL
                                                            var var267 = thisRef.x; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@199b0ef3
                                                            var var273 = ((-local_16_REFERENCE.normalMass) * thisRef.b.x); // type is FLOAT value type is FLOAT
                                                            var267.x = var273;
                                                            var var274 = thisRef.x; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1ee743a2
                                                            var274.y = 0.0;
                                                            local_18_FLOAT = 0.0; // type is FLOAT value type is FLOAT
                                                            local_19_FLOAT = ((local_2_REFERENCE.K.ex.y * thisRef.x.x) + thisRef.b.y); // type is FLOAT value type is FLOAT
                                                            var var288 = thisRef.x.x; // type is FLOAT value type is FLOAT
                                                            if ((var288 < 0.0)) {
                                                                __label__ = 1848;
                                                                break $S_1544;
                                                            }
                                                            __label__ = 1616;
                                                            }
                                                        $M_1616_1848 : for(;;) switch (__label__) {
                                                            case 1848 :
                                                            // NORMAL
                                                                $S_1848 : {
                                                                // NORMAL
                                                                    var var292 = thisRef.x; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@70f8733e
                                                                    var292.x = 0.0;
                                                                    var var293 = thisRef.x; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1b45deb9
                                                                    var var299 = ((-local_17_REFERENCE.normalMass) * thisRef.b.y); // type is FLOAT value type is FLOAT
                                                                    var293.y = var299;
                                                                    local_18_FLOAT = ((local_2_REFERENCE.K.ey.x * thisRef.x.y) + thisRef.b.x); // type is FLOAT value type is FLOAT
                                                                    local_19_FLOAT = 0.0; // type is FLOAT value type is FLOAT
                                                                    var var313 = thisRef.x.y; // type is FLOAT value type is FLOAT
                                                                    if ((var313 < 0.0)) {
                                                                        __label__ = 2152;
                                                                        break $S_1848;
                                                                    }
                                                                    __label__ = 1920;
                                                                    }
                                                                $M_2152_1920 : for(;;) switch (__label__) {
                                                                    case 1920 :
                                                                    // NORMAL
                                                                        $S_1920 : {
                                                                        // NORMAL
                                                                            var var315 = local_18_FLOAT; // type is FLOAT value type is FLOAT
                                                                            if ((var315 < 0.0)) {
                                                                                __label__ = 2152;
                                                                                continue $M_2152_1920;
                                                                            }
                                                                            }
                                                                        var var623 = thisRef.d.ojcVec2setojcVec2(thisRef.d,thisRef.x); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5a68b7b4
                                                                        var var625 = var623.ojcVec2subLocalojcVec2(var623,thisRef.a); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7e361508
                                                                        var var628 = thisRef.P1.ojcVec2setojcVec2(thisRef.P1,local_14_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4d64e873
                                                                        var var631 = var628.ojcVec2mulLocalFLOAT(var628,thisRef.d.x); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@78615770
                                                                        var var634 = thisRef.P2.ojcVec2setojcVec2(thisRef.P2,local_14_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@67ab9adf
                                                                        var var637 = var634.ojcVec2mulLocalFLOAT(var634,thisRef.d.y); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@297b5d77
                                                                        var var640 = thisRef.temp1.ojcVec2setojcVec2(thisRef.temp1,thisRef.P1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@43b60f5b
                                                                        var var642 = var640.ojcVec2addLocalojcVec2(var640,thisRef.P2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@311e1a8a
                                                                        var var645 = thisRef.temp2.ojcVec2setojcVec2(thisRef.temp2,thisRef.temp1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@a581314
                                                                        var var647 = var645.ojcVec2mulLocalFLOAT(var645,local_5_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@793b77cd
                                                                        var var650 = local_10_REFERENCE.ojcVec2subLocalojcVec2(local_10_REFERENCE,thisRef.temp2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@a846366
                                                                        var var653 = thisRef.temp2.ojcVec2setojcVec2(thisRef.temp2,thisRef.temp1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4b0fe2f6
                                                                        var var655 = var653.ojcVec2mulLocalFLOAT(var653,local_6_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1859830
                                                                        var var658 = local_12_REFERENCE.ojcVec2addLocalojcVec2(local_12_REFERENCE,thisRef.temp2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@23a202d2
                                                                        var var659 = local_11_FLOAT; // type is FLOAT value type is FLOAT
                                                                        var var660 = local_7_FLOAT; // type is FLOAT value type is FLOAT
                                                                        var var664 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_16_REFERENCE.rA,thisRef.P1); // type is FLOAT value type is FLOAT
                                                                        var var668 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_17_REFERENCE.rA,thisRef.P2); // type is FLOAT value type is FLOAT
                                                                        local_11_FLOAT = (var659 - (var660 * (var664 + var668))); // type is FLOAT value type is FLOAT
                                                                        var var673 = local_13_FLOAT; // type is FLOAT value type is FLOAT
                                                                        var var674 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                                                                        var var678 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_16_REFERENCE.rB,thisRef.P1); // type is FLOAT value type is FLOAT
                                                                        var var682 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_17_REFERENCE.rB,thisRef.P2); // type is FLOAT value type is FLOAT
                                                                        local_13_FLOAT = (var673 + (var674 * (var678 + var682))); // type is FLOAT value type is FLOAT
                                                                        var var687 = local_16_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@36b495ab
                                                                        var var689 = thisRef.x.x; // type is FLOAT value type is FLOAT
                                                                        var687.normalImpulse = var689;
                                                                        var var690 = local_17_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@4871287c
                                                                        var var692 = thisRef.x.y; // type is FLOAT value type is FLOAT
                                                                        var690.normalImpulse = var692;
                                                                        break $M_514_820;
                                                                    case 2152 :
                                                                    // NORMAL
                                                                        $S_2152 : {
                                                                        // NORMAL
                                                                            var var317 = thisRef.x; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@a14da93
                                                                            var317.x = 0.0;
                                                                            var var318 = thisRef.x; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3e388175
                                                                            var318.y = 0.0;
                                                                            local_18_FLOAT = thisRef.b.x; // type is FLOAT value type is FLOAT
                                                                            local_19_FLOAT = thisRef.b.y; // type is FLOAT value type is FLOAT
                                                                            var var325 = local_18_FLOAT; // type is FLOAT value type is FLOAT
                                                                            if ((var325 < 0.0)) {
                                                                                break $M_514_820;
                                                                            }
                                                                            }
                                                                        $S_2193 : {
                                                                        // NORMAL
                                                                            var var327 = local_19_FLOAT; // type is FLOAT value type is FLOAT
                                                                            if ((var327 < 0.0)) {
                                                                                break $M_514_820;
                                                                            }
                                                                            }
                                                                        var var331 = thisRef.d.ojcVec2setojcVec2(thisRef.d,thisRef.x); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1351ca9a
                                                                        var var333 = var331.ojcVec2subLocalojcVec2(var331,thisRef.a); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2056feb0
                                                                        var var336 = thisRef.P1.ojcVec2setojcVec2(thisRef.P1,local_14_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@cba786b
                                                                        var var339 = var336.ojcVec2mulLocalFLOAT(var336,thisRef.d.x); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@76f363a0
                                                                        var var342 = thisRef.P2.ojcVec2setojcVec2(thisRef.P2,local_14_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6beb72fe
                                                                        var var345 = var342.ojcVec2mulLocalFLOAT(var342,thisRef.d.y); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7cdfa24d
                                                                        var var348 = thisRef.temp1.ojcVec2setojcVec2(thisRef.temp1,thisRef.P1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2379e49d
                                                                        var var350 = var348.ojcVec2addLocalojcVec2(var348,thisRef.P2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4e7a6d31
                                                                        var var353 = thisRef.temp2.ojcVec2setojcVec2(thisRef.temp2,thisRef.temp1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7e368a82
                                                                        var var355 = var353.ojcVec2mulLocalFLOAT(var353,local_5_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7ffa92c3
                                                                        var var358 = local_10_REFERENCE.ojcVec2subLocalojcVec2(local_10_REFERENCE,thisRef.temp2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@134bdcad
                                                                        var var361 = thisRef.temp2.ojcVec2setojcVec2(thisRef.temp2,thisRef.temp1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@e452810
                                                                        var var363 = var361.ojcVec2mulLocalFLOAT(var361,local_6_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@446dd1c0
                                                                        var var366 = local_12_REFERENCE.ojcVec2addLocalojcVec2(local_12_REFERENCE,thisRef.temp2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6f2a3f04
                                                                        var var367 = local_11_FLOAT; // type is FLOAT value type is FLOAT
                                                                        var var368 = local_7_FLOAT; // type is FLOAT value type is FLOAT
                                                                        var var372 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_16_REFERENCE.rA,thisRef.P1); // type is FLOAT value type is FLOAT
                                                                        var var376 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_17_REFERENCE.rA,thisRef.P2); // type is FLOAT value type is FLOAT
                                                                        local_11_FLOAT = (var367 - (var368 * (var372 + var376))); // type is FLOAT value type is FLOAT
                                                                        var var381 = local_13_FLOAT; // type is FLOAT value type is FLOAT
                                                                        var var382 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                                                                        var var386 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_16_REFERENCE.rB,thisRef.P1); // type is FLOAT value type is FLOAT
                                                                        var var390 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_17_REFERENCE.rB,thisRef.P2); // type is FLOAT value type is FLOAT
                                                                        local_13_FLOAT = (var381 + (var382 * (var386 + var390))); // type is FLOAT value type is FLOAT
                                                                        var var395 = local_16_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@36b495ab
                                                                        var var397 = thisRef.x.x; // type is FLOAT value type is FLOAT
                                                                        var395.normalImpulse = var397;
                                                                        var var398 = local_17_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@4871287c
                                                                        var var400 = thisRef.x.y; // type is FLOAT value type is FLOAT
                                                                        var398.normalImpulse = var400;
                                                                        break $M_514_820;
                                                                }
                                                            case 1616 :
                                                            // NORMAL
                                                                $S_1616 : {
                                                                // NORMAL
                                                                    var var290 = local_19_FLOAT; // type is FLOAT value type is FLOAT
                                                                    if ((var290 < 0.0)) {
                                                                        __label__ = 1848;
                                                                        continue $M_1616_1848;
                                                                    }
                                                                    }
                                                                var var695 = thisRef.d.ojcVec2setojcVec2(thisRef.d,thisRef.x); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@22c928f8
                                                                var var697 = var695.ojcVec2subLocalojcVec2(var695,thisRef.a); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5eb8119
                                                                var var700 = thisRef.P1.ojcVec2setojcVec2(thisRef.P1,local_14_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2f22b3b5
                                                                var var703 = var700.ojcVec2mulLocalFLOAT(var700,thisRef.d.x); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@11ce7b4a
                                                                var var706 = thisRef.P2.ojcVec2setojcVec2(thisRef.P2,local_14_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7a2b1f63
                                                                var var709 = var706.ojcVec2mulLocalFLOAT(var706,thisRef.d.y); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2391ba76
                                                                var var712 = thisRef.temp1.ojcVec2setojcVec2(thisRef.temp1,thisRef.P1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@19141aaa
                                                                var var714 = var712.ojcVec2addLocalojcVec2(var712,thisRef.P2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7b6226e9
                                                                var var717 = thisRef.temp2.ojcVec2setojcVec2(thisRef.temp2,thisRef.temp1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5990fee1
                                                                var var719 = var717.ojcVec2mulLocalFLOAT(var717,local_5_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@777cbdaf
                                                                var var722 = local_10_REFERENCE.ojcVec2subLocalojcVec2(local_10_REFERENCE,thisRef.temp2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4e0428a0
                                                                var var725 = thisRef.temp2.ojcVec2setojcVec2(thisRef.temp2,thisRef.temp1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@243b1ae7
                                                                var var727 = var725.ojcVec2mulLocalFLOAT(var725,local_6_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7a828f77
                                                                var var730 = local_12_REFERENCE.ojcVec2addLocalojcVec2(local_12_REFERENCE,thisRef.temp2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6801c44d
                                                                var var731 = local_11_FLOAT; // type is FLOAT value type is FLOAT
                                                                var var732 = local_7_FLOAT; // type is FLOAT value type is FLOAT
                                                                var var736 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_16_REFERENCE.rA,thisRef.P1); // type is FLOAT value type is FLOAT
                                                                var var740 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_17_REFERENCE.rA,thisRef.P2); // type is FLOAT value type is FLOAT
                                                                local_11_FLOAT = (var731 - (var732 * (var736 + var740))); // type is FLOAT value type is FLOAT
                                                                var var745 = local_13_FLOAT; // type is FLOAT value type is FLOAT
                                                                var var746 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                                                                var var750 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_16_REFERENCE.rB,thisRef.P1); // type is FLOAT value type is FLOAT
                                                                var var754 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_17_REFERENCE.rB,thisRef.P2); // type is FLOAT value type is FLOAT
                                                                local_13_FLOAT = (var745 + (var746 * (var750 + var754))); // type is FLOAT value type is FLOAT
                                                                var var759 = local_16_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@36b495ab
                                                                var var761 = thisRef.x.x; // type is FLOAT value type is FLOAT
                                                                var759.normalImpulse = var761;
                                                                var var762 = local_17_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@4871287c
                                                                var var764 = thisRef.x.y; // type is FLOAT value type is FLOAT
                                                                var762.normalImpulse = var764;
                                                                break $M_514_820;
                                                        }
                                                }
                                            case 866 :
                                            // NORMAL
                                                $S_866 : {
                                                // NORMAL
                                                    var var101 = thisRef.a.x; // type is FLOAT value type is FLOAT
                                                    if ((var101 < 0.0)) {
                                                        __label__ = 890;
                                                        break $S_866;
                                                    }
                                                    __label__ = 878;
                                                    }
                                                $M_878_890 : for(;;) switch (__label__) {
                                                    case 878 :
                                                    // NORMAL
                                                        var var104 = thisRef.a.y; // type is FLOAT value type is FLOAT
                                                        if ((var104 >= 0.0)) {
                                                            __label__ = 898;
                                                            continue $M_898_866;
                                                        }
                                                        __label__ = 890;
                                                        continue $M_878_890;
                                                    case 890 :
                                                    // NORMAL
                                                        var var923 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                                        jlAssertionError.VOIDinit(var923);
                                                        throw var923;
                                                }
                                        }
                                }
                                var var767 = thisRef.m_velocities.data[local_3_INT]; // type is REFERENCE value type is REFERENCE
                                var var768 = local_11_FLOAT; // type is FLOAT value type is FLOAT
                                var767.w = var768;
                                var var771 = thisRef.m_velocities.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                                var var772 = local_13_FLOAT; // type is FLOAT value type is FLOAT
                                var771.w = var772;
                                local_1_INT = (local_1_INT + 1); // type is INT value type is INT
                                __label__ = 2;
                                continue $L_2;
                        }
                    }
                case 155 :
                // NORMAL
                    $S_155 : {
                    // NORMAL
                        var var76 = local_9_INT; // type is INT value type is INT
                        if ((var76 == 1)) {
                            __label__ = 175;
                            continue $M_175_155;
                        }
                        }
                    $S_161 : {
                    // NORMAL
                        var var77 = local_9_INT; // type is INT value type is INT
                        if ((var77 == 2)) {
                            __label__ = 175;
                            continue $M_175_155;
                        }
                        }
                    var var78 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                    jlAssertionError.VOIDinit(var78);
                    throw var78;
            }
        }
    },

    VOIDstoreImpulses : function(thisRef) {
        var local_1_INT = null; // type is INT # of inits = 4
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_4_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_1_INT = 0; // type is INT value type is INT
            __label__ = 2;
            }
        $L_2 : for (;;) {
            $S_2 : {
            // NORMAL
                var var2 = local_1_INT; // type is INT value type is INT
                var var3 = thisRef.m_count; // type is INT value type is INT
                if ((var2 >= var3)) {
                    return;
                }
                }
            $S_10 : {
            // NORMAL
                var var6 = thisRef.m_velocityConstraints.data[local_1_INT]; // type is REFERENCE value type is REFERENCE
                local_2_REFERENCE = var6; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@5b535ad3
                var var11 = thisRef.m_contacts.data[local_2_REFERENCE.contactIndex]; // type is REFERENCE value type is REFERENCE
                var var12 = var11.ojcManifoldgetManifold(var11); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@69e9cdd8
                local_3_REFERENCE = var12; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@28c4862a
                local_4_INT = 0; // type is INT value type is INT
                __label__ = 33;
                }
            $L_33 : for (;;) {
                $S_33 : {
                // NORMAL
                    var var16 = local_4_INT; // type is INT value type is INT
                    var var18 = local_2_REFERENCE.pointCount; // type is INT value type is INT
                    if ((var16 >= var18)) {
                        __label__ = 88;
                        break $S_33;
                    }
                    __label__ = 42;
                    }
                for(;;) switch (__label__) {
                    case 88 :
                    // NORMAL
                        local_1_INT = (local_1_INT + 1); // type is INT value type is INT
                        __label__ = 2;
                        continue $L_2;
                    case 42 :
                    // NORMAL
                        var var22 = local_3_REFERENCE.points.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                        var var26 = local_2_REFERENCE.points.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                        var var27 = var26.normalImpulse; // type is FLOAT value type is FLOAT
                        var22.normalImpulse = var27;
                        var var31 = local_3_REFERENCE.points.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                        var var35 = local_2_REFERENCE.points.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                        var var36 = var35.tangentImpulse; // type is FLOAT value type is FLOAT
                        var31.tangentImpulse = var36;
                        local_4_INT = (local_4_INT + 1); // type is INT value type is INT
                        __label__ = 33;
                        continue $L_33;
                }
            }
        }
    },

    BOOLEANsolvePositionConstraints : function(thisRef) {
        var local_4_INT = null; // type is INT # of inits = 2
        var local_11_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_9_FLOAT = null; // type is FLOAT # of inits = 2
        var local_15_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_16_FLOAT = null; // type is FLOAT # of inits = 3
        var local_8_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_19_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_17_INT = null; // type is INT # of inits = 3
        var local_13_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_10_FLOAT = null; // type is FLOAT # of inits = 2
        var local_22_FLOAT = null; // type is FLOAT # of inits = 1
        var local_1_FLOAT = null; // type is FLOAT # of inits = 4
        var local_7_FLOAT = null; // type is FLOAT # of inits = 2
        var local_25_FLOAT = null; // type is FLOAT # of inits = 1
        var local_6_FLOAT = null; // type is FLOAT # of inits = 2
        var local_2_INT = null; // type is INT # of inits = 4
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_14_FLOAT = null; // type is FLOAT # of inits = 3
        var local_12_INT = null; // type is INT # of inits = 2
        var var168 = null; // type is FLOAT # of inits = 2
        var local_5_INT = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_1_FLOAT = 0.0; // type is FLOAT value type is FLOAT
            local_2_INT = 0; // type is INT value type is INT
            __label__ = 4;
            }
        $L_4 : for (;;) {
            $S_4 : {
            // NORMAL
                var var4 = local_2_INT; // type is INT value type is INT
                var var5 = thisRef.m_count; // type is INT value type is INT
                if ((var4 >= var5)) {
                    __label__ = 522;
                    break $S_4;
                }
                __label__ = 12;
                }
            for(;;) switch (__label__) {
                case 12 :
                // NORMAL
                    $S_12 : {
                    // NORMAL
                        var var8 = thisRef.m_positionConstraints.data[local_2_INT]; // type is REFERENCE value type is REFERENCE
                        local_3_REFERENCE = var8; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@332015dc
                        local_4_INT = local_3_REFERENCE.indexA; // type is INT value type is INT
                        local_5_INT = local_3_REFERENCE.indexB; // type is INT value type is INT
                        local_6_FLOAT = local_3_REFERENCE.invMassA; // type is FLOAT value type is FLOAT
                        local_7_FLOAT = local_3_REFERENCE.invIA; // type is FLOAT value type is FLOAT
                        local_8_REFERENCE = local_3_REFERENCE.localCenterA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2fc33900
                        local_9_FLOAT = local_3_REFERENCE.invMassB; // type is FLOAT value type is FLOAT
                        local_10_FLOAT = local_3_REFERENCE.invIB; // type is FLOAT value type is FLOAT
                        local_11_REFERENCE = local_3_REFERENCE.localCenterB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4ae903
                        local_12_INT = local_3_REFERENCE.pointCount; // type is INT value type is INT
                        var var46 = thisRef.m_positions.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                        local_13_REFERENCE = var46.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4b0cc719
                        var var51 = thisRef.m_positions.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                        local_14_FLOAT = var51.a; // type is FLOAT value type is FLOAT
                        var var57 = thisRef.m_positions.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                        local_15_REFERENCE = var57.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@286bcaf7
                        var var62 = thisRef.m_positions.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                        local_16_FLOAT = var62.a; // type is FLOAT value type is FLOAT
                        local_17_INT = 0; // type is INT value type is INT
                        __label__ = 124;
                        }
                    $L_124 : for (;;) {
                        $S_124 : {
                        // NORMAL
                            var var68 = local_17_INT; // type is INT value type is INT
                            var var69 = local_12_INT; // type is INT value type is INT
                            if ((var68 >= var69)) {
                                __label__ = 492;
                                break $S_124;
                            }
                            __label__ = 131;
                            }
                        for(;;) switch (__label__) {
                            case 492 :
                            // NORMAL
                                var var208 = thisRef.m_positions.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                                var var209 = local_14_FLOAT; // type is FLOAT value type is FLOAT
                                var208.a = var209;
                                var var212 = thisRef.m_positions.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                                var var213 = local_16_FLOAT; // type is FLOAT value type is FLOAT
                                var212.a = var213;
                                local_2_INT = (local_2_INT + 1); // type is INT value type is INT
                                __label__ = 4;
                                continue $L_4;
                            case 131 :
                            // NORMAL
                                $S_131 : {
                                // NORMAL
                                    var var73 = thisRef.xfA.q.ojcRotsetFLOAT(thisRef.xfA.q,local_14_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1e56edc3
                                    var var77 = thisRef.xfB.q.ojcRotsetFLOAT(thisRef.xfB.q,local_16_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@49830dfb
                                    ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(thisRef.xfA.q,local_8_REFERENCE,thisRef.xfA.p);
                                    var var85 = thisRef.xfA.p.ojcVec2negateLocal(thisRef.xfA.p); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@641a3fdd
                                    var var87 = var85.ojcVec2addLocalojcVec2(var85,local_13_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@12d06ddb
                                    ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(thisRef.xfB.q,local_11_REFERENCE,thisRef.xfB.p);
                                    var var95 = thisRef.xfB.p.ojcVec2negateLocal(thisRef.xfB.p); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3bc1a2b7
                                    var var97 = var95.ojcVec2addLocalojcVec2(var95,local_15_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6a7c9ce1
                                    var local_18_REFERENCE = thisRef.psolver; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5fada2a4
                                    local_18_REFERENCE.VOIDinitializeojdcContactPositionConstraintojcTransformojcTransformINT(local_18_REFERENCE,local_3_REFERENCE,thisRef.xfA,thisRef.xfB,local_17_INT);
                                    local_19_REFERENCE = local_18_REFERENCE.normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4e82a23f
                                    var local_20_REFERENCE = local_18_REFERENCE.point; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@78607542
                                    var local_21_FLOAT = local_18_REFERENCE.separation; // type is FLOAT value type is FLOAT
                                    var var117 = thisRef.rA.ojcVec2setojcVec2(thisRef.rA,local_20_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7675653b
                                    var var119 = var117.ojcVec2subLocalojcVec2(var117,local_13_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@44ff51d3
                                    var var122 = thisRef.rB.ojcVec2setojcVec2(thisRef.rB,local_20_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1fb79029
                                    var var124 = var122.ojcVec2subLocalojcVec2(var122,local_15_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@64862cf8
                                    var var127 = ojcMathUtils.FLOATminFLOATFLOAT(local_1_FLOAT,local_21_FLOAT); // type is FLOAT value type is FLOAT
                                    local_1_FLOAT = var127; // type is FLOAT value type is FLOAT
                                    var var132 = ojcMathUtils.FLOATclampFLOATFLOATFLOAT((0.2 * (local_21_FLOAT + 0.005)),-0.2,0.0); // type is FLOAT value type is FLOAT
                                    local_22_FLOAT = var132; // type is FLOAT value type is FLOAT
                                    var var137 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.rA,local_19_REFERENCE); // type is FLOAT value type is FLOAT
                                    var local_23_FLOAT = var137; // type is FLOAT value type is FLOAT
                                    var var142 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.rB,local_19_REFERENCE); // type is FLOAT value type is FLOAT
                                    var local_24_FLOAT = var142; // type is FLOAT value type is FLOAT
                                    local_25_FLOAT = (((local_6_FLOAT + local_9_FLOAT) + ((local_7_FLOAT * local_23_FLOAT) * local_23_FLOAT)) + ((local_10_FLOAT * local_24_FLOAT) * local_24_FLOAT)); // type is FLOAT value type is FLOAT
                                    var var162 = local_25_FLOAT; // type is FLOAT value type is FLOAT
                                    if ((var162 <= 0.0)) {
                                        __label__ = 386;
                                        break $S_131;
                                    }
                                    __label__ = 377;
                                    }
                                $M_377_386 : for(;;) switch (__label__) {
                                    case 377 :
                                    // NORMAL
                                        var168 = ((-local_22_FLOAT) / local_25_FLOAT); // type is FLOAT value type is FLOAT
                                        break $M_377_386;
                                    case 386 :
                                    // NORMAL
                                        var168 = 0.0; // type is FLOAT value type is FLOAT
                                        break $M_377_386;
                                }
                                var local_26_FLOAT = var168; // type is FLOAT value type is FLOAT
                                var var173 = thisRef.P.ojcVec2setojcVec2(thisRef.P,local_19_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3907c1ee
                                var var175 = var173.ojcVec2mulLocalFLOAT(var173,local_26_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7c86ed4
                                var var176 = local_13_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2cdac415
                                var var179 = thisRef.temp.ojcVec2setojcVec2(thisRef.temp,thisRef.P); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@24dd80dc
                                var var181 = var179.ojcVec2mulLocalFLOAT(var179,local_6_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@71698953
                                var var182 = var176.ojcVec2subLocalojcVec2(var176,var181); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@76e63e21
                                var var183 = local_14_FLOAT; // type is FLOAT value type is FLOAT
                                var var184 = local_7_FLOAT; // type is FLOAT value type is FLOAT
                                var var187 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.rA,thisRef.P); // type is FLOAT value type is FLOAT
                                local_14_FLOAT = (var183 - (var184 * var187)); // type is FLOAT value type is FLOAT
                                var var191 = local_15_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1fe7baa7
                                var var194 = thisRef.temp.ojcVec2setojcVec2(thisRef.temp,thisRef.P); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@321c50e7
                                var var196 = var194.ojcVec2mulLocalFLOAT(var194,local_9_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7a0ffd18
                                var var197 = var191.ojcVec2addLocalojcVec2(var191,var196); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4711c01b
                                var var198 = local_16_FLOAT; // type is FLOAT value type is FLOAT
                                var var199 = local_10_FLOAT; // type is FLOAT value type is FLOAT
                                var var202 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.rB,thisRef.P); // type is FLOAT value type is FLOAT
                                local_16_FLOAT = (var198 + (var199 * var202)); // type is FLOAT value type is FLOAT
                                local_17_INT = (local_17_INT + 1); // type is INT value type is INT
                                __label__ = 124;
                                continue $L_124;
                        }
                    }
                case 522 :
                // NORMAL
                    $S_522 : {
                    // NORMAL
                        var var214 = local_1_FLOAT; // type is FLOAT value type is FLOAT
                        if ((var214 < -0.015)) {
                            __label__ = 533;
                            break $S_522;
                        }
                        __label__ = 529;
                        }
                    for(;;) switch (__label__) {
                        case 529 :
                        // NORMAL
                            var var216 = 1; // type is INT value type is INT
                            return var216;
                        case 533 :
                        // NORMAL
                            var var216 = 0; // type is INT value type is INT
                            return var216;
                    }
            }
        }
    },

    BOOLEANsolveTOIPositionConstraintsINTINT : function(thisRef,toiIndexA,toiIndexB) {
        var local_8_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_17_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_6_INT = null; // type is INT # of inits = 2
        var local_13_FLOAT = null; // type is FLOAT # of inits = 3
        var local_18_FLOAT = null; // type is FLOAT # of inits = 3
        var local_9_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_7_INT = null; // type is INT # of inits = 2
        var local_27_FLOAT = null; // type is FLOAT # of inits = 1
        var local_19_INT = null; // type is INT # of inits = 3
        var local_16_FLOAT = null; // type is FLOAT # of inits = 3
        var local_24_FLOAT = null; // type is FLOAT # of inits = 1
        var local_3_FLOAT = null; // type is FLOAT # of inits = 4
        var local_4_INT = null; // type is INT # of inits = 4
        var local_21_REFERENCE = null; // type is REFERENCE # of inits = 1
        var var176 = null; // type is FLOAT # of inits = 2
        var local_11_FLOAT = null; // type is FLOAT # of inits = 3
        var local_12_FLOAT = null; // type is FLOAT # of inits = 3
        var local_15_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_10_INT = null; // type is INT # of inits = 2
        var local_14_FLOAT = null; // type is FLOAT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_3_FLOAT = 0.0; // type is FLOAT value type is FLOAT
            local_4_INT = 0; // type is INT value type is INT
            __label__ = 5;
            }
        $L_5 : for (;;) {
            $S_5 : {
            // NORMAL
                var var4 = local_4_INT; // type is INT value type is INT
                var var5 = thisRef.m_count; // type is INT value type is INT
                if ((var4 >= var5)) {
                    __label__ = 572;
                    break $S_5;
                }
                __label__ = 14;
                }
            for(;;) switch (__label__) {
                case 572 :
                // NORMAL
                    $S_572 : {
                    // NORMAL
                        var var222 = local_3_FLOAT; // type is FLOAT value type is FLOAT
                        if ((var222 < -0.0075)) {
                            __label__ = 583;
                            break $S_572;
                        }
                        __label__ = 579;
                        }
                    for(;;) switch (__label__) {
                        case 583 :
                        // NORMAL
                            var var224 = 0; // type is INT value type is INT
                            return var224;
                        case 579 :
                        // NORMAL
                            var var224 = 1; // type is INT value type is INT
                            return var224;
                    }
                case 14 :
                // NORMAL
                    $S_14 : {
                    // NORMAL
                        var var8 = thisRef.m_positionConstraints.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                        local_5_REFERENCE = var8; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@4836c26
                        local_6_INT = local_5_REFERENCE.indexA; // type is INT value type is INT
                        local_7_INT = local_5_REFERENCE.indexB; // type is INT value type is INT
                        local_8_REFERENCE = local_5_REFERENCE.localCenterA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6db8ac01
                        local_9_REFERENCE = local_5_REFERENCE.localCenterB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@77946859
                        local_10_INT = local_5_REFERENCE.pointCount; // type is INT value type is INT
                        local_11_FLOAT = 0.0; // type is FLOAT value type is FLOAT
                        local_12_FLOAT = 0.0; // type is FLOAT value type is FLOAT
                        var var32 = local_6_INT; // type is INT value type is INT
                        if ((var32 == toiIndexA)) {
                            __label__ = 76;
                            break $S_14;
                        }
                        __label__ = 70;
                        }
                    $M_76_70 : for(;;) switch (__label__) {
                        case 70 :
                        // NORMAL
                            var var33 = local_6_INT; // type is INT value type is INT
                            if ((var33 != toiIndexB)) {
                                break $M_76_70;
                            }
                            __label__ = 76;
                            continue $M_76_70;
                        case 76 :
                        // NORMAL
                            local_11_FLOAT = local_5_REFERENCE.invMassA; // type is FLOAT value type is FLOAT
                            local_12_FLOAT = local_5_REFERENCE.invIA; // type is FLOAT value type is FLOAT
                            break $M_76_70;
                    }
                    $S_90 : {
                    // NORMAL
                        local_13_FLOAT = 0.0; // type is FLOAT value type is FLOAT
                        local_14_FLOAT = 0.0; // type is FLOAT value type is FLOAT
                        var var44 = local_7_INT; // type is INT value type is INT
                        if ((var44 == toiIndexA)) {
                            __label__ = 108;
                            break $S_90;
                        }
                        __label__ = 102;
                        }
                    $M_108_102 : for(;;) switch (__label__) {
                        case 102 :
                        // NORMAL
                            var var45 = local_7_INT; // type is INT value type is INT
                            if ((var45 != toiIndexB)) {
                                break $M_108_102;
                            }
                            __label__ = 108;
                            continue $M_108_102;
                        case 108 :
                        // NORMAL
                            local_13_FLOAT = local_5_REFERENCE.invMassB; // type is FLOAT value type is FLOAT
                            local_14_FLOAT = local_5_REFERENCE.invIB; // type is FLOAT value type is FLOAT
                            break $M_108_102;
                    }
                    $S_122 : {
                    // NORMAL
                        var var54 = thisRef.m_positions.data[local_6_INT]; // type is REFERENCE value type is REFERENCE
                        local_15_REFERENCE = var54.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@55154a7e
                        var var59 = thisRef.m_positions.data[local_6_INT]; // type is REFERENCE value type is REFERENCE
                        local_16_FLOAT = var59.a; // type is FLOAT value type is FLOAT
                        var var65 = thisRef.m_positions.data[local_7_INT]; // type is REFERENCE value type is REFERENCE
                        local_17_REFERENCE = var65.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@46c7d9f8
                        var var70 = thisRef.m_positions.data[local_7_INT]; // type is REFERENCE value type is REFERENCE
                        local_18_FLOAT = var70.a; // type is FLOAT value type is FLOAT
                        local_19_INT = 0; // type is INT value type is INT
                        __label__ = 173;
                        }
                    $L_173 : for (;;) {
                        $S_173 : {
                        // NORMAL
                            var var76 = local_19_INT; // type is INT value type is INT
                            var var77 = local_10_INT; // type is INT value type is INT
                            if ((var76 >= var77)) {
                                __label__ = 542;
                                break $S_173;
                            }
                            __label__ = 180;
                            }
                        for(;;) switch (__label__) {
                            case 542 :
                            // NORMAL
                                var var216 = thisRef.m_positions.data[local_6_INT]; // type is REFERENCE value type is REFERENCE
                                var var217 = local_16_FLOAT; // type is FLOAT value type is FLOAT
                                var216.a = var217;
                                var var220 = thisRef.m_positions.data[local_7_INT]; // type is REFERENCE value type is REFERENCE
                                var var221 = local_18_FLOAT; // type is FLOAT value type is FLOAT
                                var220.a = var221;
                                local_4_INT = (local_4_INT + 1); // type is INT value type is INT
                                __label__ = 5;
                                continue $L_5;
                            case 180 :
                            // NORMAL
                                $S_180 : {
                                // NORMAL
                                    var var81 = thisRef.xfA.q.ojcRotsetFLOAT(thisRef.xfA.q,local_16_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6e37ad85
                                    var var85 = thisRef.xfB.q.ojcRotsetFLOAT(thisRef.xfB.q,local_18_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3ab5d6ba
                                    ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(thisRef.xfA.q,local_8_REFERENCE,thisRef.xfA.p);
                                    var var93 = thisRef.xfA.p.ojcVec2negateLocal(thisRef.xfA.p); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@458c2d28
                                    var var95 = var93.ojcVec2addLocalojcVec2(var93,local_15_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3dfc3478
                                    ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(thisRef.xfB.q,local_9_REFERENCE,thisRef.xfB.p);
                                    var var103 = thisRef.xfB.p.ojcVec2negateLocal(thisRef.xfB.p); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6e74edc7
                                    var var105 = var103.ojcVec2addLocalojcVec2(var103,local_17_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7ae0f6b5
                                    var local_20_REFERENCE = thisRef.psolver; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5e2171ac
                                    local_20_REFERENCE.VOIDinitializeojdcContactPositionConstraintojcTransformojcTransformINT(local_20_REFERENCE,local_5_REFERENCE,thisRef.xfA,thisRef.xfB,local_19_INT);
                                    local_21_REFERENCE = local_20_REFERENCE.normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2a2d1e4
                                    var local_22_REFERENCE = local_20_REFERENCE.point; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4bf10ea2
                                    var local_23_FLOAT = local_20_REFERENCE.separation; // type is FLOAT value type is FLOAT
                                    var var125 = thisRef.rA.ojcVec2setojcVec2(thisRef.rA,local_22_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@36d91c37
                                    var var127 = var125.ojcVec2subLocalojcVec2(var125,local_15_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6320b751
                                    var var130 = thisRef.rB.ojcVec2setojcVec2(thisRef.rB,local_22_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@77997720
                                    var var132 = var130.ojcVec2subLocalojcVec2(var130,local_17_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@345ee36f
                                    var var135 = ojcMathUtils.FLOATminFLOATFLOAT(local_3_FLOAT,local_23_FLOAT); // type is FLOAT value type is FLOAT
                                    local_3_FLOAT = var135; // type is FLOAT value type is FLOAT
                                    var var140 = ojcMathUtils.FLOATclampFLOATFLOATFLOAT((0.75 * (local_23_FLOAT + 0.005)),-0.2,0.0); // type is FLOAT value type is FLOAT
                                    local_24_FLOAT = var140; // type is FLOAT value type is FLOAT
                                    var var145 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.rA,local_21_REFERENCE); // type is FLOAT value type is FLOAT
                                    var local_25_FLOAT = var145; // type is FLOAT value type is FLOAT
                                    var var150 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.rB,local_21_REFERENCE); // type is FLOAT value type is FLOAT
                                    var local_26_FLOAT = var150; // type is FLOAT value type is FLOAT
                                    local_27_FLOAT = (((local_11_FLOAT + local_13_FLOAT) + ((local_12_FLOAT * local_25_FLOAT) * local_25_FLOAT)) + ((local_14_FLOAT * local_26_FLOAT) * local_26_FLOAT)); // type is FLOAT value type is FLOAT
                                    var var170 = local_27_FLOAT; // type is FLOAT value type is FLOAT
                                    if ((var170 <= 0.0)) {
                                        __label__ = 436;
                                        break $S_180;
                                    }
                                    __label__ = 427;
                                    }
                                $M_427_436 : for(;;) switch (__label__) {
                                    case 436 :
                                    // NORMAL
                                        var176 = 0.0; // type is FLOAT value type is FLOAT
                                        break $M_427_436;
                                    case 427 :
                                    // NORMAL
                                        var176 = ((-local_24_FLOAT) / local_27_FLOAT); // type is FLOAT value type is FLOAT
                                        break $M_427_436;
                                }
                                var local_28_FLOAT = var176; // type is FLOAT value type is FLOAT
                                var var181 = thisRef.P.ojcVec2setojcVec2(thisRef.P,local_21_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4a187977
                                var var183 = var181.ojcVec2mulLocalFLOAT(var181,local_28_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2c64d55a
                                var var184 = local_15_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@770d5818
                                var var187 = thisRef.temp.ojcVec2setojcVec2(thisRef.temp,thisRef.P); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@10f89781
                                var var189 = var187.ojcVec2mulLocalFLOAT(var187,local_11_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@537e4b6a
                                var var190 = var184.ojcVec2subLocalojcVec2(var184,var189); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5a2443b3
                                var var191 = local_16_FLOAT; // type is FLOAT value type is FLOAT
                                var var192 = local_12_FLOAT; // type is FLOAT value type is FLOAT
                                var var195 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.rA,thisRef.P); // type is FLOAT value type is FLOAT
                                local_16_FLOAT = (var191 - (var192 * var195)); // type is FLOAT value type is FLOAT
                                var var199 = local_17_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@68f0f883
                                var var202 = thisRef.temp.ojcVec2setojcVec2(thisRef.temp,thisRef.P); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@506083a8
                                var var204 = var202.ojcVec2mulLocalFLOAT(var202,local_13_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4f042ba
                                var var205 = var199.ojcVec2addLocalojcVec2(var199,var204); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@25f47c55
                                var var206 = local_18_FLOAT; // type is FLOAT value type is FLOAT
                                var var207 = local_14_FLOAT; // type is FLOAT value type is FLOAT
                                var var210 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.rB,thisRef.P); // type is FLOAT value type is FLOAT
                                local_18_FLOAT = (var206 + (var207 * var210)); // type is FLOAT value type is FLOAT
                                local_19_INT = (local_19_INT + 1); // type is INT value type is INT
                                __label__ = 173;
                                continue $L_173;
                        }
                    }
            }
        }
    },

    classInitCheck : function() {
        if (!ojdcContactSolver.__initialized) {
            ojdcContactSolver.__initialized = true;
            var thePrototype = ojdcContactSolver.Create.prototype;
            thePrototype.instanceOf = ojdcContactSolver.instanceOf;
            thePrototype.ClassgetClass = ojdcContactSolver.ClassgetClass;
            thePrototype.BOOLEANsolveTOIPositionConstraintsINTINT = ojdcContactSolver.BOOLEANsolveTOIPositionConstraintsINTINT;
            thePrototype.BOOLEANsolvePositionConstraints = ojdcContactSolver.BOOLEANsolvePositionConstraints;
            thePrototype.VOIDstoreImpulses = ojdcContactSolver.VOIDstoreImpulses;
            thePrototype.VOIDsolveVelocityConstraints = ojdcContactSolver.VOIDsolveVelocityConstraints;
            thePrototype.VOIDwarmStart = ojdcContactSolver.VOIDwarmStart;
            thePrototype.VOIDinitializeVelocityConstraints = ojdcContactSolver.VOIDinitializeVelocityConstraints;
            thePrototype.VOIDinitojdcContactSolver$ContactSolverDef = ojdcContactSolver.VOIDinitojdcContactSolver$ContactSolverDef;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            ojdcContactSolver.VOIDclinit();
        }
    },

};

var ojcWorldManifold = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 99,
    __implementedTypes : [99,1],

    Create : function() {
        this.pool3 = null; // declared in org.jbox2d.collision.WorldManifold
        this.pool4 = null; // declared in org.jbox2d.collision.WorldManifold
        this.normal = null; // declared in org.jbox2d.collision.WorldManifold
        this.points = null; // declared in org.jbox2d.collision.WorldManifold
    },

    instanceOf : function(aType) {
        return ojcWorldManifold.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcWorldManifold;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var local_1_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var0);
            thisRef.pool3 = var0;
            var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var1);
            thisRef.pool4 = var1;
            var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var2);
            thisRef.normal = var2;
            var var3 = bytecoder.newArray(2,null); // type is REFERENCE value type is REFERENCE
            thisRef.points = var3;
            local_1_INT = 0; // type is INT value type is INT
            __label__ = 47;
            }
        $L_47 : for (;;) {
            $S_47 : {
            // NORMAL
                var var6 = local_1_INT; // type is INT value type is INT
                if ((var6 >= 2)) {
                    return;
                }
                }
            var var7 = thisRef.points; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@658b7cdb
            var var8 = local_1_INT; // type is INT value type is INT
            var var9 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var9);
            var7.data[var8] = var9;
            local_1_INT = (local_1_INT + 1); // type is INT value type is INT
            __label__ = 47;
            continue $L_47;
        }
    },

    VOIDinitializeojcManifoldojcTransformFLOATojcTransformFLOAT : function(thisRef,manifold,xfA,radiusA,xfB,radiusB) {
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 5
        var local_8_INT = null; // type is INT # of inits = 6
        var local_7_REFERENCE = null; // type is REFERENCE # of inits = 5
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = manifold.pointCount; // type is INT value type is INT
            if ((var0 != 0)) {
                break $S_0;
            }
            return;
            }
        $S_8 : {
        // NORMAL
            var var1 = ojcWorldManifold$1.$SwitchMap$org$jbox2d$collision$Manifold$ManifoldType; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@8eff835
            var var3 = manifold.type.INTordinal(manifold.type); // type is INT value type is INT
            var var4 = var1.data[var3]; // type is INT value type is INT
            if (var4 < 1 || var4 > 3) {
             return;
            }
            switch(var4 - 1) {
             case 0:
                 __label__ = 44;
            break $S_8;
             case 1:
                 __label__ = 264;
            break $S_8;
             case 2:
                 __label__ = 492;
            break $S_8;
            }
            throw 'Illegal jump target!';
            }
        for(;;) switch (__label__) {
            case 264 :
            // NORMAL
                $S_264 : {
                // NORMAL
                    local_6_REFERENCE = thisRef.pool3; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5f9f607b
                    ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(xfA.q,manifold.localNormal,thisRef.normal);
                    ojcTransform.VOIDmulToOutojcTransformojcVec2ojcVec2(xfA,manifold.localPoint,local_6_REFERENCE);
                    local_7_REFERENCE = thisRef.pool4; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@b4cf5b7
                    local_8_INT = 0; // type is INT value type is INT
                    __label__ = 304;
                    }
                $L_304 : for (;;) {
                    $S_304 : {
                    // NORMAL
                        var var180 = local_8_INT; // type is INT value type is INT
                        var var181 = manifold.pointCount; // type is INT value type is INT
                        if ((var180 >= var181)) {
                            __label__ = 489;
                            break $S_304;
                        }
                        __label__ = 313;
                        }
                    for(;;) switch (__label__) {
                        case 489 :
                        // NORMAL
                            return;
                        case 313 :
                        // NORMAL
                            var var184 = manifold.points.data[local_8_INT]; // type is REFERENCE value type is REFERENCE
                            ojcTransform.VOIDmulToOutojcTransformojcVec2ojcVec2(xfB,var184.localPoint,local_7_REFERENCE);
                            var local_9_FLOAT = (radiusA - (((local_7_REFERENCE.x - local_6_REFERENCE.x) * thisRef.normal.x) + ((local_7_REFERENCE.y - local_6_REFERENCE.y) * thisRef.normal.y))); // type is FLOAT value type is FLOAT
                            var local_10_FLOAT = ((thisRef.normal.x * local_9_FLOAT) + local_7_REFERENCE.x); // type is FLOAT value type is FLOAT
                            var local_11_FLOAT = ((thisRef.normal.y * local_9_FLOAT) + local_7_REFERENCE.y); // type is FLOAT value type is FLOAT
                            var local_12_FLOAT = (((-thisRef.normal.x) * radiusB) + local_7_REFERENCE.x); // type is FLOAT value type is FLOAT
                            var local_13_FLOAT = (((-thisRef.normal.y) * radiusB) + local_7_REFERENCE.y); // type is FLOAT value type is FLOAT
                            var var240 = thisRef.points.data[local_8_INT]; // type is REFERENCE value type is REFERENCE
                            var var244 = ((local_10_FLOAT + local_12_FLOAT) * 0.5); // type is FLOAT value type is FLOAT
                            var240.x = var244;
                            var var247 = thisRef.points.data[local_8_INT]; // type is REFERENCE value type is REFERENCE
                            var var251 = ((local_11_FLOAT + local_13_FLOAT) * 0.5); // type is FLOAT value type is FLOAT
                            var247.y = var251;
                            local_8_INT = (local_8_INT + 1); // type is INT value type is INT
                            __label__ = 304;
                            continue $L_304;
                    }
                }
            case 44 :
            // NORMAL
                $S_44 : {
                // NORMAL
                    local_6_REFERENCE = thisRef.pool3; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@63626510
                    local_7_REFERENCE = thisRef.pool4; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@143b0719
                    var var95 = thisRef.normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3083315d
                    var95.x = 1.0;
                    var var96 = thisRef.normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5c0e8bb7
                    var96.y = 0.0;
                    ojcTransform.VOIDmulToOutojcTransformojcVec2ojcVec2(xfA,manifold.localPoint,local_6_REFERENCE);
                    var var100 = manifold.points.data[0]; // type is REFERENCE value type is REFERENCE
                    ojcTransform.VOIDmulToOutojcTransformojcVec2ojcVec2(xfB,var100.localPoint,local_7_REFERENCE);
                    var var105 = ojcMathUtils.FLOATdistanceSquaredojcVec2ojcVec2(local_6_REFERENCE,local_7_REFERENCE); // type is FLOAT value type is FLOAT
                    if ((var105 <= 1.4210855E-14)) {
                        __label__ = 155;
                        break $S_44;
                    }
                    __label__ = 111;
                    }
                $M_155_111 : for(;;) switch (__label__) {
                    case 111 :
                    // NORMAL
                        var var107 = thisRef.normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2cb43fc3
                        var var112 = (local_7_REFERENCE.x - local_6_REFERENCE.x); // type is FLOAT value type is FLOAT
                        var107.x = var112;
                        var var113 = thisRef.normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@60fbf683
                        var var118 = (local_7_REFERENCE.y - local_6_REFERENCE.y); // type is FLOAT value type is FLOAT
                        var113.y = var118;
                        var var120 = thisRef.normal.FLOATnormalize(thisRef.normal); // type is FLOAT value type is FLOAT
                        __label__ = 155;
                        continue $M_155_111;
                    case 155 :
                    // NORMAL
                        var local_8_FLOAT = ((thisRef.normal.x * radiusA) + local_6_REFERENCE.x); // type is FLOAT value type is FLOAT
                        var local_9_FLOAT = ((thisRef.normal.y * radiusA) + local_6_REFERENCE.y); // type is FLOAT value type is FLOAT
                        var local_10_FLOAT = (((-thisRef.normal.x) * radiusB) + local_7_REFERENCE.x); // type is FLOAT value type is FLOAT
                        var local_11_FLOAT = (((-thisRef.normal.y) * radiusB) + local_7_REFERENCE.y); // type is FLOAT value type is FLOAT
                        var var153 = thisRef.points.data[0]; // type is REFERENCE value type is REFERENCE
                        var var157 = ((local_8_FLOAT + local_10_FLOAT) * 0.5); // type is FLOAT value type is FLOAT
                        var153.x = var157;
                        var var159 = thisRef.points.data[0]; // type is REFERENCE value type is REFERENCE
                        var var163 = ((local_9_FLOAT + local_11_FLOAT) * 0.5); // type is FLOAT value type is FLOAT
                        var159.y = var163;
                        return;
                }
            case 492 :
            // NORMAL
                $S_492 : {
                // NORMAL
                    local_6_REFERENCE = thisRef.pool3; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@495b2a18
                    ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(xfB.q,manifold.localNormal,thisRef.normal);
                    ojcTransform.VOIDmulToOutojcTransformojcVec2ojcVec2(xfB,manifold.localPoint,local_6_REFERENCE);
                    local_7_REFERENCE = thisRef.pool4; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@61a053b7
                    local_8_INT = 0; // type is INT value type is INT
                    __label__ = 534;
                    }
                $L_534 : for (;;) {
                    $S_534 : {
                    // NORMAL
                        var var16 = local_8_INT; // type is INT value type is INT
                        var var17 = manifold.pointCount; // type is INT value type is INT
                        if ((var16 >= var17)) {
                            __label__ = 717;
                            break $S_534;
                        }
                        __label__ = 543;
                        }
                    for(;;) switch (__label__) {
                        case 543 :
                        // NORMAL
                            var var20 = manifold.points.data[local_8_INT]; // type is REFERENCE value type is REFERENCE
                            ojcTransform.VOIDmulToOutojcTransformojcVec2ojcVec2(xfA,var20.localPoint,local_7_REFERENCE);
                            var local_9_FLOAT = (radiusB - (((local_7_REFERENCE.x - local_6_REFERENCE.x) * thisRef.normal.x) + ((local_7_REFERENCE.y - local_6_REFERENCE.y) * thisRef.normal.y))); // type is FLOAT value type is FLOAT
                            var local_10_FLOAT = ((thisRef.normal.x * local_9_FLOAT) + local_7_REFERENCE.x); // type is FLOAT value type is FLOAT
                            var local_11_FLOAT = ((thisRef.normal.y * local_9_FLOAT) + local_7_REFERENCE.y); // type is FLOAT value type is FLOAT
                            var local_12_FLOAT = (((-thisRef.normal.x) * radiusA) + local_7_REFERENCE.x); // type is FLOAT value type is FLOAT
                            var local_13_FLOAT = (((-thisRef.normal.y) * radiusA) + local_7_REFERENCE.y); // type is FLOAT value type is FLOAT
                            var var81 = thisRef.points.data[local_8_INT]; // type is REFERENCE value type is REFERENCE
                            var var85 = ((local_12_FLOAT + local_10_FLOAT) * 0.5); // type is FLOAT value type is FLOAT
                            var81.x = var85;
                            var var88 = thisRef.points.data[local_8_INT]; // type is REFERENCE value type is REFERENCE
                            var var92 = ((local_13_FLOAT + local_11_FLOAT) * 0.5); // type is FLOAT value type is FLOAT
                            var88.y = var92;
                            local_8_INT = (local_8_INT + 1); // type is INT value type is INT
                            __label__ = 534;
                            continue $L_534;
                        case 717 :
                        // NORMAL
                            var var164 = thisRef.normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6c673267
                            var var167 = (-thisRef.normal.x); // type is FLOAT value type is FLOAT
                            var164.x = var167;
                            var var168 = thisRef.normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@53978e86
                            var var171 = (-thisRef.normal.y); // type is FLOAT value type is FLOAT
                            var168.y = var171;
                            return;
                    }
                }
        }
    },

    classInitCheck : function() {
        if (!ojcWorldManifold.__initialized) {
            ojcWorldManifold.__initialized = true;
            var thePrototype = ojcWorldManifold.Create.prototype;
            thePrototype.instanceOf = ojcWorldManifold.instanceOf;
            thePrototype.ClassgetClass = ojcWorldManifold.ClassgetClass;
            thePrototype.VOIDinitializeojcManifoldojcTransformFLOATojcTransformFLOAT = ojcWorldManifold.VOIDinitializeojcManifoldojcTransformFLOATojcTransformFLOAT;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojdcPositionSolverManifold = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 100,
    __implementedTypes : [100,1],
    $assertionsDisabled : false, // declared in org.jbox2d.dynamics.contacts.PositionSolverManifold

    Create : function() {
        this.normal = null; // declared in org.jbox2d.dynamics.contacts.PositionSolverManifold
        this.point = null; // declared in org.jbox2d.dynamics.contacts.PositionSolverManifold
        this.separation = 0; // declared in org.jbox2d.dynamics.contacts.PositionSolverManifold
    },

    instanceOf : function(aType) {
        return ojdcPositionSolverManifold.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdcPositionSolverManifold;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdcPositionSolverManifold.BOOLEANdesiredAssertionStatus(ojdcPositionSolverManifold); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_13_9 : for(;;) switch (__label__) {
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_13_9;
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_13_9;
        }
        ojdcPositionSolverManifold.$assertionsDisabled = var1;
        return;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var0);
        thisRef.normal = var0;
        var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var1);
        thisRef.point = var1;
        return;
    },

    VOIDinitializeojdcContactPositionConstraintojcTransformojcTransformINT : function(thisRef,pc,xfA,xfB,index) {
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_7_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdcPositionSolverManifold.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 21;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_6_21 : for(;;) switch (__label__) {
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    var var1 = pc.pointCount; // type is INT value type is INT
                    if ((var1 > 0)) {
                        __label__ = 21;
                        continue $M_6_21;
                    }
                    }
                var var353 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var353);
                throw var353;
            case 21 :
            // NORMAL
                $S_21 : {
                // NORMAL
                    local_5_REFERENCE = xfA.q; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5c273e88
                    local_6_REFERENCE = xfB.q; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2e85d6f1
                    var var7 = pc.localPoints.data[index]; // type is REFERENCE value type is REFERENCE
                    local_7_REFERENCE = var7; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@63776758
                    var var9 = ojdcPositionSolverManifold$1.$SwitchMap$org$jbox2d$collision$Manifold$ManifoldType; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1474f7c8
                    var var11 = pc.type.INTordinal(pc.type); // type is INT value type is INT
                    var var12 = var9.data[var11]; // type is INT value type is INT
                    if (var12 < 1 || var12 > 3) {
                     return;
                    }
                    switch(var12 - 1) {
                     case 0:
                         __label__ = 80;
                    break $S_21;
                     case 1:
                         __label__ = 340;
                    break $S_21;
                     case 2:
                         __label__ = 614;
                    break $S_21;
                    }
                    throw 'Illegal jump target!';
                    }
                for(;;) switch (__label__) {
                    case 340 :
                    // NORMAL
                        var local_8_REFERENCE = pc.localNormal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7d3aff72
                        var local_9_REFERENCE = pc.localPoint; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@188c5d23
                        var var244 = thisRef.normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@183e329d
                        var var255 = ((local_5_REFERENCE.c * local_8_REFERENCE.x) - (local_5_REFERENCE.s * local_8_REFERENCE.y)); // type is FLOAT value type is FLOAT
                        var244.x = var255;
                        var var256 = thisRef.normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2b475ce5
                        var var267 = ((local_5_REFERENCE.s * local_8_REFERENCE.x) + (local_5_REFERENCE.c * local_8_REFERENCE.y)); // type is FLOAT value type is FLOAT
                        var256.y = var267;
                        var local_10_FLOAT = (((local_5_REFERENCE.c * local_9_REFERENCE.x) - (local_5_REFERENCE.s * local_9_REFERENCE.y)) + xfA.p.x); // type is FLOAT value type is FLOAT
                        var local_11_FLOAT = (((local_5_REFERENCE.s * local_9_REFERENCE.x) + (local_5_REFERENCE.c * local_9_REFERENCE.y)) + xfA.p.y); // type is FLOAT value type is FLOAT
                        var local_12_FLOAT = (((local_6_REFERENCE.c * local_7_REFERENCE.x) - (local_6_REFERENCE.s * local_7_REFERENCE.y)) + xfB.p.x); // type is FLOAT value type is FLOAT
                        var local_13_FLOAT = (((local_6_REFERENCE.s * local_7_REFERENCE.x) + (local_6_REFERENCE.c * local_7_REFERENCE.y)) + xfB.p.y); // type is FLOAT value type is FLOAT
                        var local_14_FLOAT = (local_12_FLOAT - local_10_FLOAT); // type is FLOAT value type is FLOAT
                        var local_15_FLOAT = (local_13_FLOAT - local_11_FLOAT); // type is FLOAT value type is FLOAT
                        var var348 = ((((local_14_FLOAT * thisRef.normal.x) + (local_15_FLOAT * thisRef.normal.y)) - pc.radiusA) - pc.radiusB); // type is FLOAT value type is FLOAT
                        thisRef.separation = var348;
                        var var349 = thisRef.point; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@12cf790
                        var var350 = local_12_FLOAT; // type is FLOAT value type is FLOAT
                        var349.x = var350;
                        var var351 = thisRef.point; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7b33c7d3
                        var var352 = local_13_FLOAT; // type is FLOAT value type is FLOAT
                        var351.y = var352;
                        return;
                    case 80 :
                    // NORMAL
                        var local_8_REFERENCE = pc.localPoint; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@12f0a8f2
                        var var140 = pc.localPoints.data[0]; // type is REFERENCE value type is REFERENCE
                        var local_9_REFERENCE = var140; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3416e3d
                        var local_10_FLOAT = (((local_5_REFERENCE.c * local_8_REFERENCE.x) - (local_5_REFERENCE.s * local_8_REFERENCE.y)) + xfA.p.x); // type is FLOAT value type is FLOAT
                        var local_11_FLOAT = (((local_5_REFERENCE.s * local_8_REFERENCE.x) + (local_5_REFERENCE.c * local_8_REFERENCE.y)) + xfA.p.y); // type is FLOAT value type is FLOAT
                        var local_12_FLOAT = (((local_6_REFERENCE.c * local_9_REFERENCE.x) - (local_6_REFERENCE.s * local_9_REFERENCE.y)) + xfB.p.x); // type is FLOAT value type is FLOAT
                        var local_13_FLOAT = (((local_6_REFERENCE.s * local_9_REFERENCE.x) + (local_6_REFERENCE.c * local_9_REFERENCE.y)) + xfB.p.y); // type is FLOAT value type is FLOAT
                        var var201 = thisRef.normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@653799b2
                        var var204 = (local_12_FLOAT - local_10_FLOAT); // type is FLOAT value type is FLOAT
                        var201.x = var204;
                        var var205 = thisRef.normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5fc798
                        var var208 = (local_13_FLOAT - local_11_FLOAT); // type is FLOAT value type is FLOAT
                        var205.y = var208;
                        var var210 = thisRef.normal.FLOATnormalize(thisRef.normal); // type is FLOAT value type is FLOAT
                        var var211 = thisRef.point; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@17ff4859
                        var var215 = ((local_10_FLOAT + local_12_FLOAT) * 0.5); // type is FLOAT value type is FLOAT
                        var211.x = var215;
                        var var216 = thisRef.point; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1f47fc1d
                        var var220 = ((local_11_FLOAT + local_13_FLOAT) * 0.5); // type is FLOAT value type is FLOAT
                        var216.y = var220;
                        var local_14_FLOAT = (local_12_FLOAT - local_10_FLOAT); // type is FLOAT value type is FLOAT
                        var local_15_FLOAT = (local_13_FLOAT - local_11_FLOAT); // type is FLOAT value type is FLOAT
                        var var241 = ((((local_14_FLOAT * thisRef.normal.x) + (local_15_FLOAT * thisRef.normal.y)) - pc.radiusA) - pc.radiusB); // type is FLOAT value type is FLOAT
                        thisRef.separation = var241;
                        return;
                    case 614 :
                    // NORMAL
                        var local_8_REFERENCE = pc.localNormal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@46641c4e
                        var local_9_REFERENCE = pc.localPoint; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@38f9701d
                        var var17 = thisRef.normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@55a95adb
                        var var28 = ((local_6_REFERENCE.c * local_8_REFERENCE.x) - (local_6_REFERENCE.s * local_8_REFERENCE.y)); // type is FLOAT value type is FLOAT
                        var17.x = var28;
                        var var29 = thisRef.normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@75aee367
                        var var40 = ((local_6_REFERENCE.s * local_8_REFERENCE.x) + (local_6_REFERENCE.c * local_8_REFERENCE.y)); // type is FLOAT value type is FLOAT
                        var29.y = var40;
                        var local_10_FLOAT = (((local_6_REFERENCE.c * local_9_REFERENCE.x) - (local_6_REFERENCE.s * local_9_REFERENCE.y)) + xfB.p.x); // type is FLOAT value type is FLOAT
                        var local_11_FLOAT = (((local_6_REFERENCE.s * local_9_REFERENCE.x) + (local_6_REFERENCE.c * local_9_REFERENCE.y)) + xfB.p.y); // type is FLOAT value type is FLOAT
                        var local_12_FLOAT = (((local_5_REFERENCE.c * local_7_REFERENCE.x) - (local_5_REFERENCE.s * local_7_REFERENCE.y)) + xfA.p.x); // type is FLOAT value type is FLOAT
                        var local_13_FLOAT = (((local_5_REFERENCE.s * local_7_REFERENCE.x) + (local_5_REFERENCE.c * local_7_REFERENCE.y)) + xfA.p.y); // type is FLOAT value type is FLOAT
                        var local_14_FLOAT = (local_12_FLOAT - local_10_FLOAT); // type is FLOAT value type is FLOAT
                        var local_15_FLOAT = (local_13_FLOAT - local_11_FLOAT); // type is FLOAT value type is FLOAT
                        var var127 = ((((local_14_FLOAT * thisRef.normal.x) + (local_15_FLOAT * thisRef.normal.y)) - pc.radiusA) - pc.radiusB); // type is FLOAT value type is FLOAT
                        thisRef.separation = var127;
                        var var128 = thisRef.point; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@134e17f0
                        var var129 = local_12_FLOAT; // type is FLOAT value type is FLOAT
                        var128.x = var129;
                        var var130 = thisRef.point; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6044e41c
                        var var131 = local_13_FLOAT; // type is FLOAT value type is FLOAT
                        var130.y = var131;
                        var var132 = thisRef.normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7f24054d
                        var var134 = (var132.x * -1.0); // type is FLOAT value type is FLOAT
                        var132.x = var134;
                        var var135 = thisRef.normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7d137415
                        var var137 = (var135.y * -1.0); // type is FLOAT value type is FLOAT
                        var135.y = var137;
                        return;
                }
        }
    },

    classInitCheck : function() {
        if (!ojdcPositionSolverManifold.__initialized) {
            ojdcPositionSolverManifold.__initialized = true;
            var thePrototype = ojdcPositionSolverManifold.Create.prototype;
            thePrototype.instanceOf = ojdcPositionSolverManifold.instanceOf;
            thePrototype.ClassgetClass = ojdcPositionSolverManifold.ClassgetClass;
            thePrototype.VOIDinitializeojdcContactPositionConstraintojcTransformojcTransformINT = ojdcPositionSolverManifold.VOIDinitializeojdcContactPositionConstraintojcTransformojcTransformINT;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            ojdcPositionSolverManifold.VOIDclinit();
        }
    },

};

var ojdcContactPositionConstraint = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 101,
    __implementedTypes : [101,1],

    Create : function() {
        this.localPoints = null; // declared in org.jbox2d.dynamics.contacts.ContactPositionConstraint
        this.localNormal = null; // declared in org.jbox2d.dynamics.contacts.ContactPositionConstraint
        this.localPoint = null; // declared in org.jbox2d.dynamics.contacts.ContactPositionConstraint
        this.localCenterA = null; // declared in org.jbox2d.dynamics.contacts.ContactPositionConstraint
        this.localCenterB = null; // declared in org.jbox2d.dynamics.contacts.ContactPositionConstraint
        this.indexA = 0; // declared in org.jbox2d.dynamics.contacts.ContactPositionConstraint
        this.indexB = 0; // declared in org.jbox2d.dynamics.contacts.ContactPositionConstraint
        this.invMassA = 0; // declared in org.jbox2d.dynamics.contacts.ContactPositionConstraint
        this.invMassB = 0; // declared in org.jbox2d.dynamics.contacts.ContactPositionConstraint
        this.invIA = 0; // declared in org.jbox2d.dynamics.contacts.ContactPositionConstraint
        this.invIB = 0; // declared in org.jbox2d.dynamics.contacts.ContactPositionConstraint
        this.pointCount = 0; // declared in org.jbox2d.dynamics.contacts.ContactPositionConstraint
        this.radiusA = 0; // declared in org.jbox2d.dynamics.contacts.ContactPositionConstraint
        this.radiusB = 0; // declared in org.jbox2d.dynamics.contacts.ContactPositionConstraint
        this.type = null; // declared in org.jbox2d.dynamics.contacts.ContactPositionConstraint
    },

    instanceOf : function(aType) {
        return ojdcContactPositionConstraint.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdcContactPositionConstraint;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var local_1_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = bytecoder.newArray(2,null); // type is REFERENCE value type is REFERENCE
            thisRef.localPoints = var0;
            var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var1);
            thisRef.localNormal = var1;
            var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var2);
            thisRef.localPoint = var2;
            var var3 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var3);
            thisRef.localCenterA = var3;
            var var4 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var4);
            thisRef.localCenterB = var4;
            local_1_INT = 0; // type is INT value type is INT
            __label__ = 58;
            }
        $L_58 : for (;;) {
            $S_58 : {
            // NORMAL
                var var7 = local_1_INT; // type is INT value type is INT
                var var9 = thisRef.localPoints.data.length; // type is INT value type is INT
                if ((var7 >= var9)) {
                    return;
                }
                }
            var var10 = thisRef.localPoints; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@36093d03
            var var11 = local_1_INT; // type is INT value type is INT
            var var12 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var12);
            var10.data[var11] = var12;
            local_1_INT = (local_1_INT + 1); // type is INT value type is INT
            __label__ = 58;
            continue $L_58;
        }
    },

    classInitCheck : function() {
        if (!ojdcContactPositionConstraint.__initialized) {
            ojdcContactPositionConstraint.__initialized = true;
            var thePrototype = ojdcContactPositionConstraint.Create.prototype;
            thePrototype.instanceOf = ojdcContactPositionConstraint.instanceOf;
            thePrototype.ClassgetClass = ojdcContactPositionConstraint.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojdcContactVelocityConstraint = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 102,
    __implementedTypes : [102,1],

    Create : function() {
        this.points = null; // declared in org.jbox2d.dynamics.contacts.ContactVelocityConstraint
        this.normal = null; // declared in org.jbox2d.dynamics.contacts.ContactVelocityConstraint
        this.normalMass = null; // declared in org.jbox2d.dynamics.contacts.ContactVelocityConstraint
        this.K = null; // declared in org.jbox2d.dynamics.contacts.ContactVelocityConstraint
        this.friction = 0; // declared in org.jbox2d.dynamics.contacts.ContactVelocityConstraint
        this.restitution = 0; // declared in org.jbox2d.dynamics.contacts.ContactVelocityConstraint
        this.tangentSpeed = 0; // declared in org.jbox2d.dynamics.contacts.ContactVelocityConstraint
        this.indexA = 0; // declared in org.jbox2d.dynamics.contacts.ContactVelocityConstraint
        this.indexB = 0; // declared in org.jbox2d.dynamics.contacts.ContactVelocityConstraint
        this.invMassA = 0; // declared in org.jbox2d.dynamics.contacts.ContactVelocityConstraint
        this.invMassB = 0; // declared in org.jbox2d.dynamics.contacts.ContactVelocityConstraint
        this.invIA = 0; // declared in org.jbox2d.dynamics.contacts.ContactVelocityConstraint
        this.invIB = 0; // declared in org.jbox2d.dynamics.contacts.ContactVelocityConstraint
        this.contactIndex = 0; // declared in org.jbox2d.dynamics.contacts.ContactVelocityConstraint
        this.pointCount = 0; // declared in org.jbox2d.dynamics.contacts.ContactVelocityConstraint
    },

    instanceOf : function(aType) {
        return ojdcContactVelocityConstraint.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdcContactVelocityConstraint;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var local_1_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = bytecoder.newArray(2,null); // type is REFERENCE value type is REFERENCE
            thisRef.points = var0;
            var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var1);
            thisRef.normal = var1;
            var var2 = new ojcMat22.Create(); // type is REFERENCE value type is REFERENCE
            ojcMat22.VOIDinit(var2);
            thisRef.normalMass = var2;
            var var3 = new ojcMat22.Create(); // type is REFERENCE value type is REFERENCE
            ojcMat22.VOIDinit(var3);
            thisRef.K = var3;
            local_1_INT = 0; // type is INT value type is INT
            __label__ = 47;
            }
        $L_47 : for (;;) {
            $S_47 : {
            // NORMAL
                var var6 = local_1_INT; // type is INT value type is INT
                var var8 = thisRef.points.data.length; // type is INT value type is INT
                if ((var6 >= var8)) {
                    return;
                }
                }
            var var9 = thisRef.points; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@299296fa
            var var10 = local_1_INT; // type is INT value type is INT
            var var11 = new ojdcContactVelocityConstraint$VelocityConstraintPoint.Create(); // type is REFERENCE value type is REFERENCE
            ojdcContactVelocityConstraint$VelocityConstraintPoint.VOIDinit(var11);
            var9.data[var10] = var11;
            local_1_INT = (local_1_INT + 1); // type is INT value type is INT
            __label__ = 47;
            continue $L_47;
        }
    },

    classInitCheck : function() {
        if (!ojdcContactVelocityConstraint.__initialized) {
            ojdcContactVelocityConstraint.__initialized = true;
            var thePrototype = ojdcContactVelocityConstraint.Create.prototype;
            thePrototype.instanceOf = ojdcContactVelocityConstraint.instanceOf;
            thePrototype.ClassgetClass = ojdcContactVelocityConstraint.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojdcContactVelocityConstraint$VelocityConstraintPoint = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 103,
    __implementedTypes : [103,1],

    Create : function() {
        this.rA = null; // declared in org.jbox2d.dynamics.contacts.ContactVelocityConstraint$VelocityConstraintPoint
        this.rB = null; // declared in org.jbox2d.dynamics.contacts.ContactVelocityConstraint$VelocityConstraintPoint
        this.normalImpulse = 0; // declared in org.jbox2d.dynamics.contacts.ContactVelocityConstraint$VelocityConstraintPoint
        this.tangentImpulse = 0; // declared in org.jbox2d.dynamics.contacts.ContactVelocityConstraint$VelocityConstraintPoint
        this.normalMass = 0; // declared in org.jbox2d.dynamics.contacts.ContactVelocityConstraint$VelocityConstraintPoint
        this.tangentMass = 0; // declared in org.jbox2d.dynamics.contacts.ContactVelocityConstraint$VelocityConstraintPoint
        this.velocityBias = 0; // declared in org.jbox2d.dynamics.contacts.ContactVelocityConstraint$VelocityConstraintPoint
    },

    instanceOf : function(aType) {
        return ojdcContactVelocityConstraint$VelocityConstraintPoint.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdcContactVelocityConstraint$VelocityConstraintPoint;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var0);
        thisRef.rA = var0;
        var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var1);
        thisRef.rB = var1;
        return;
    },

    classInitCheck : function() {
        if (!ojdcContactVelocityConstraint$VelocityConstraintPoint.__initialized) {
            ojdcContactVelocityConstraint$VelocityConstraintPoint.__initialized = true;
            var thePrototype = ojdcContactVelocityConstraint$VelocityConstraintPoint.Create.prototype;
            thePrototype.instanceOf = ojdcContactVelocityConstraint$VelocityConstraintPoint.instanceOf;
            thePrototype.ClassgetClass = ojdcContactVelocityConstraint$VelocityConstraintPoint.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojcMat22 = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 104,
    __implementedTypes : [2,104,1],
    $assertionsDisabled : false, // declared in org.jbox2d.common.Mat22

    Create : function() {
        this.ex = null; // declared in org.jbox2d.common.Mat22
        this.ey = null; // declared in org.jbox2d.common.Mat22
    },

    instanceOf : function(aType) {
        return ojcMat22.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcMat22;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcMat22.BOOLEANdesiredAssertionStatus(ojcMat22); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_13_9 : for(;;) switch (__label__) {
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_13_9;
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_13_9;
        }
        ojcMat22.$assertionsDisabled = var1;
        return;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var0);
        thisRef.ex = var0;
        var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var1);
        thisRef.ey = var1;
        return;
    },

    VOIDsetZero : function(thisRef) {
        var __label__ = null;
        var var0 = thisRef.ex; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@693125b
        var0.x = 0.0;
        var var1 = thisRef.ey; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@e96376c
        var1.x = 0.0;
        var var2 = thisRef.ex; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7ad4a826
        var2.y = 0.0;
        var var3 = thisRef.ey; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@14e1c249
        var3.y = 0.0;
        return;
    },

    VOIDinvertToOutojcMat22 : function(thisRef,out) {
        var __label__ = null;
        var local_2_FLOAT = thisRef.ex.x; // type is FLOAT value type is FLOAT
        var local_3_FLOAT = thisRef.ey.x; // type is FLOAT value type is FLOAT
        var local_4_FLOAT = thisRef.ex.y; // type is FLOAT value type is FLOAT
        var local_5_FLOAT = thisRef.ey.y; // type is FLOAT value type is FLOAT
        var local_6_FLOAT = ((local_2_FLOAT * local_5_FLOAT) - (local_3_FLOAT * local_4_FLOAT)); // type is FLOAT value type is FLOAT
        var local_6_FLOAT = (1.0 / local_6_FLOAT); // type is FLOAT value type is FLOAT
        var var28 = out.ex; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2cad92ab
        var var31 = (local_6_FLOAT * local_5_FLOAT); // type is FLOAT value type is FLOAT
        var28.x = var31;
        var var32 = out.ey; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7e7a67f9
        var var36 = ((-local_6_FLOAT) * local_3_FLOAT); // type is FLOAT value type is FLOAT
        var32.x = var36;
        var var37 = out.ex; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@29614b9c
        var var41 = ((-local_6_FLOAT) * local_4_FLOAT); // type is FLOAT value type is FLOAT
        var37.y = var41;
        var var42 = out.ey; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4b99a811
        var var45 = (local_6_FLOAT * local_2_FLOAT); // type is FLOAT value type is FLOAT
        var42.y = var45;
        return;
    },

    VOIDmulToOutUnsafeojcMat22ojcVec2ojcVec2 : function(R,v,out) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcMat22.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 19;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_19_6 : for(;;) switch (__label__) {
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    if ((v != out)) {
                        __label__ = 19;
                        continue $M_19_6;
                    }
                    }
                var var19 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var19);
                throw var19;
            case 19 :
            // NORMAL
                var var9 = ((R.ex.x * v.x) + (R.ey.x * v.y)); // type is FLOAT value type is FLOAT
                out.x = var9;
                var var18 = ((R.ex.y * v.x) + (R.ey.y * v.y)); // type is FLOAT value type is FLOAT
                out.y = var18;
                return;
        }
    },

    INThashCode : function(thisRef) {
        var var13 = null; // type is INT # of inits = 1
        var var9 = null; // type is INT # of inits = 2
        var var5 = null; // type is INT # of inits = 1
        var var17 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var local_1_INT = 31; // type is INT value type is INT
            var local_2_INT = 1; // type is INT value type is INT
            var5 = (31 * local_2_INT); // type is INT value type is INT
            var var6 = thisRef.ex; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@69cdd3bc
            if (var6 != null ) {
                __label__ = 20;
                break $S_0;
            }
            __label__ = 16;
            }
        $M_16_20 : for(;;) switch (__label__) {
            case 20 :
            // NORMAL
                var var8 = thisRef.ex.INThashCode(thisRef.ex); // type is INT value type is INT
                var9 = var8; // type is INT value type is INT
                break $M_16_20;
            case 16 :
            // NORMAL
                var9 = 0; // type is INT value type is INT
                break $M_16_20;
        }
        $S_27 : {
        // NORMAL
            var local_2_INT = (var5 + var9); // type is INT value type is INT
            var13 = (31 * local_2_INT); // type is INT value type is INT
            var var14 = thisRef.ey; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6e845727
            if (var14 != null ) {
                __label__ = 44;
                break $S_27;
            }
            __label__ = 40;
            }
        $M_40_44 : for(;;) switch (__label__) {
            case 40 :
            // NORMAL
                var17 = 0; // type is INT value type is INT
                break $M_40_44;
            case 44 :
            // NORMAL
                var var16 = thisRef.ey.INThashCode(thisRef.ey); // type is INT value type is INT
                var17 = var16; // type is INT value type is INT
                break $M_40_44;
        }
        var local_2_INT = (var13 + var17); // type is INT value type is INT
        return local_2_INT;
    },

    BOOLEANequalsjlObject : function(thisRef,obj) {
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((thisRef != obj)) {
                break $S_0;
            }
            return 1;
            }
        $S_7 : {
        // NORMAL
            if (obj != null ) {
                break $S_7;
            }
            return 0;
            }
        $S_13 : {
        // NORMAL
            var var0 = thisRef.ClassgetClass(); // type is REFERENCE value type is REFERENCE
            var var1 = obj.ClassgetClass(); // type is REFERENCE value type is REFERENCE
            if ((var0 == var1)) {
                break $S_13;
            }
            return 0;
            }
        $S_26 : {
        // NORMAL
            local_2_REFERENCE = obj; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@47c64e43
            var var3 = thisRef.ex; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@41f63f81
            if (var3 != null ) {
                __label__ = 47;
                break $S_26;
            }
            __label__ = 38;
            }
        $M_47_38 : for(;;) switch (__label__) {
            case 38 :
            // NORMAL
                var var9 = local_2_REFERENCE.ex; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@77b51367
                if (var9 == null ) {
                    break $M_47_38;
                }
                return 0;
            case 47 :
            // NORMAL
                var var7 = thisRef.ex.BOOLEANequalsjlObject(thisRef.ex,local_2_REFERENCE.ex); // type is BOOLEAN value type is BOOLEAN
                if ((var7 != 0)) {
                    break $M_47_38;
                }
                return 0;
        }
        $S_63 : {
        // NORMAL
            var var10 = thisRef.ey; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@12b81ef7
            if (var10 != null ) {
                __label__ = 79;
                break $S_63;
            }
            __label__ = 70;
            }
        for(;;) switch (__label__) {
            case 70 :
            // NORMAL
                var var16 = local_2_REFERENCE.ey; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@698bed48
                if (var16 == null ) {
                    return 1;
                }
                return 0;
            case 79 :
            // NORMAL
                var var14 = thisRef.ey.BOOLEANequalsjlObject(thisRef.ey,local_2_REFERENCE.ey); // type is BOOLEAN value type is BOOLEAN
                if ((var14 != 0)) {
                    return 1;
                }
                return 0;
        }
    },

    jlStringtoString : function(thisRef) {
        var __label__ = null;
        var local_1_REFERENCE = bytecoder.stringpool[0]; // type is REFERENCE value type is REFERENCE
        var var1 = new jlStringBuilder.Create(); // type is REFERENCE value type is REFERENCE
        jlStringBuilder.VOIDinit(var1);
        var var3 = var1.jlStringBuilderappendjlString(var1,local_1_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4a06bbe8
        var var4 = var3.jlStringBuilderappendjlString(var3,bytecoder.stringpool[36]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@181343d8
        var var7 = var4.jlStringBuilderappendFLOAT(var4,thisRef.ex.x); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1f8dd66f
        var var8 = var7.jlStringBuilderappendjlString(var7,bytecoder.stringpool[10]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4e18d9dc
        var var11 = var8.jlStringBuilderappendFLOAT(var8,thisRef.ey.x); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@313ef20c
        var var12 = var11.jlStringBuilderappendjlString(var11,bytecoder.stringpool[37]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@33316a70
        var var13 = var12.jlStringtoString(var12); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@42feecd7
        var local_1_REFERENCE = var13; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4aa00b6d
        var var14 = new jlStringBuilder.Create(); // type is REFERENCE value type is REFERENCE
        jlStringBuilder.VOIDinit(var14);
        var var16 = var14.jlStringBuilderappendjlString(var14,local_1_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@c482ea7
        var var17 = var16.jlStringBuilderappendjlString(var16,bytecoder.stringpool[36]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3412b7b4
        var var20 = var17.jlStringBuilderappendFLOAT(var17,thisRef.ex.y); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@13f6db5
        var var21 = var20.jlStringBuilderappendjlString(var20,bytecoder.stringpool[10]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4b0ef59c
        var var24 = var21.jlStringBuilderappendFLOAT(var21,thisRef.ey.y); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6fec74c
        var var25 = var24.jlStringBuilderappendjlString(var24,bytecoder.stringpool[34]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@27707f30
        var var26 = var25.jlStringtoString(var25); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5dd8ecae
        var local_1_REFERENCE = var26; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@61c6409c
        return local_1_REFERENCE;
    },

    VOIDsolveToOutojcVec2ojcVec2 : function(thisRef,b,out) {
        var local_6_FLOAT = null; // type is FLOAT # of inits = 1
        var local_7_FLOAT = null; // type is FLOAT # of inits = 2
        var local_4_FLOAT = null; // type is FLOAT # of inits = 1
        var local_3_FLOAT = null; // type is FLOAT # of inits = 1
        var local_5_FLOAT = null; // type is FLOAT # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_3_FLOAT = thisRef.ex.x; // type is FLOAT value type is FLOAT
            local_4_FLOAT = thisRef.ey.x; // type is FLOAT value type is FLOAT
            local_5_FLOAT = thisRef.ex.y; // type is FLOAT value type is FLOAT
            local_6_FLOAT = thisRef.ey.y; // type is FLOAT value type is FLOAT
            local_7_FLOAT = ((local_3_FLOAT * local_6_FLOAT) - (local_4_FLOAT * local_5_FLOAT)); // type is FLOAT value type is FLOAT
            var var25 = local_7_FLOAT; // type is FLOAT value type is FLOAT
            if ((var25 == 0.0)) {
                __label__ = 60;
                break $S_0;
            }
            __label__ = 54;
            }
        $M_54_60 : for(;;) switch (__label__) {
            case 54 :
            // NORMAL
                local_7_FLOAT = (1.0 / local_7_FLOAT); // type is FLOAT value type is FLOAT
                __label__ = 60;
                continue $M_54_60;
            case 60 :
            // NORMAL
                var local_8_FLOAT = (local_7_FLOAT * ((local_3_FLOAT * b.y) - (local_5_FLOAT * b.x))); // type is FLOAT value type is FLOAT
                var var49 = (local_7_FLOAT * ((local_6_FLOAT * b.x) - (local_4_FLOAT * b.y))); // type is FLOAT value type is FLOAT
                out.x = var49;
                var var50 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                out.y = var50;
                return;
        }
    },

    classInitCheck : function() {
        if (!ojcMat22.__initialized) {
            ojcMat22.__initialized = true;
            var thePrototype = ojcMat22.Create.prototype;
            thePrototype.instanceOf = ojcMat22.instanceOf;
            thePrototype.ClassgetClass = ojcMat22.ClassgetClass;
            thePrototype.VOIDsolveToOutojcVec2ojcVec2 = ojcMat22.VOIDsolveToOutojcVec2ojcVec2;
            thePrototype.jlStringtoString = ojcMat22.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = ojcMat22.BOOLEANequalsjlObject;
            thePrototype.INThashCode = ojcMat22.INThashCode;
            thePrototype.VOIDinvertToOutojcMat22 = ojcMat22.VOIDinvertToOutojcMat22;
            thePrototype.VOIDsetZero = ojcMat22.VOIDsetZero;
            jlObject.classInitCheck();
            jiSerializable.classInitCheck();
            ojcMat22.VOIDclinit();
        }
    },

};

var ojdSolverData = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 105,
    __implementedTypes : [105,1],

    Create : function() {
        this.step = null; // declared in org.jbox2d.dynamics.SolverData
        this.positions = null; // declared in org.jbox2d.dynamics.SolverData
        this.velocities = null; // declared in org.jbox2d.dynamics.SolverData
    },

    instanceOf : function(aType) {
        return ojdSolverData.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdSolverData;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    classInitCheck : function() {
        if (!ojdSolverData.__initialized) {
            ojdSolverData.__initialized = true;
            var thePrototype = ojdSolverData.Create.prototype;
            thePrototype.instanceOf = ojdSolverData.instanceOf;
            thePrototype.ClassgetClass = ojdSolverData.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojdcContactSolver$ContactSolverDef = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 106,
    __implementedTypes : [106,1],

    Create : function() {
        this.step = null; // declared in org.jbox2d.dynamics.contacts.ContactSolver$ContactSolverDef
        this.contacts = null; // declared in org.jbox2d.dynamics.contacts.ContactSolver$ContactSolverDef
        this.count = 0; // declared in org.jbox2d.dynamics.contacts.ContactSolver$ContactSolverDef
        this.positions = null; // declared in org.jbox2d.dynamics.contacts.ContactSolver$ContactSolverDef
        this.velocities = null; // declared in org.jbox2d.dynamics.contacts.ContactSolver$ContactSolverDef
    },

    instanceOf : function(aType) {
        return ojdcContactSolver$ContactSolverDef.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdcContactSolver$ContactSolverDef;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    classInitCheck : function() {
        if (!ojdcContactSolver$ContactSolverDef.__initialized) {
            ojdcContactSolver$ContactSolverDef.__initialized = true;
            var thePrototype = ojdcContactSolver$ContactSolverDef.Create.prototype;
            thePrototype.instanceOf = ojdcContactSolver$ContactSolverDef.instanceOf;
            thePrototype.ClassgetClass = ojdcContactSolver$ContactSolverDef.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojcContactImpulse = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 107,
    __implementedTypes : [1,107],

    Create : function() {
        this.normalImpulses = null; // declared in org.jbox2d.callbacks.ContactImpulse
        this.tangentImpulses = null; // declared in org.jbox2d.callbacks.ContactImpulse
        this.count = 0; // declared in org.jbox2d.callbacks.ContactImpulse
    },

    instanceOf : function(aType) {
        return ojcContactImpulse.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcContactImpulse;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = bytecoder.newArray(2,0.0); // type is REFERENCE value type is REFERENCE
        thisRef.normalImpulses = var0;
        var var1 = bytecoder.newArray(2,0.0); // type is REFERENCE value type is REFERENCE
        thisRef.tangentImpulses = var1;
        return;
    },

    classInitCheck : function() {
        if (!ojcContactImpulse.__initialized) {
            ojcContactImpulse.__initialized = true;
            var thePrototype = ojcContactImpulse.Create.prototype;
            thePrototype.instanceOf = ojcContactImpulse.instanceOf;
            thePrototype.ClassgetClass = ojcContactImpulse.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojdBody = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 108,
    __implementedTypes : [108,1],
    $assertionsDisabled : false, // declared in org.jbox2d.dynamics.Body

    Create : function() {
        this.m_xf = null; // declared in org.jbox2d.dynamics.Body
        this.m_sweep = null; // declared in org.jbox2d.dynamics.Body
        this.m_linearVelocity = null; // declared in org.jbox2d.dynamics.Body
        this.m_angularVelocity = 0; // declared in org.jbox2d.dynamics.Body
        this.m_force = null; // declared in org.jbox2d.dynamics.Body
        this.m_torque = 0; // declared in org.jbox2d.dynamics.Body
        this.fixDef = null; // declared in org.jbox2d.dynamics.Body
        this.pmd = null; // declared in org.jbox2d.dynamics.Body
        this.pxf = null; // declared in org.jbox2d.dynamics.Body
        this.m_flags = 0; // declared in org.jbox2d.dynamics.Body
        this.m_world = null; // declared in org.jbox2d.dynamics.Body
        this.m_jointList = null; // declared in org.jbox2d.dynamics.Body
        this.m_contactList = null; // declared in org.jbox2d.dynamics.Body
        this.m_prev = null; // declared in org.jbox2d.dynamics.Body
        this.m_next = null; // declared in org.jbox2d.dynamics.Body
        this.m_linearDamping = 0; // declared in org.jbox2d.dynamics.Body
        this.m_angularDamping = 0; // declared in org.jbox2d.dynamics.Body
        this.m_gravityScale = 0; // declared in org.jbox2d.dynamics.Body
        this.m_sleepTime = 0; // declared in org.jbox2d.dynamics.Body
        this.m_type = null; // declared in org.jbox2d.dynamics.Body
        this.m_mass = 0; // declared in org.jbox2d.dynamics.Body
        this.m_invMass = 0; // declared in org.jbox2d.dynamics.Body
        this.m_I = 0; // declared in org.jbox2d.dynamics.Body
        this.m_invI = 0; // declared in org.jbox2d.dynamics.Body
        this.m_userData = null; // declared in org.jbox2d.dynamics.Body
        this.m_fixtureList = null; // declared in org.jbox2d.dynamics.Body
        this.m_fixtureCount = 0; // declared in org.jbox2d.dynamics.Body
        this.m_islandIndex = 0; // declared in org.jbox2d.dynamics.Body
    },

    instanceOf : function(aType) {
        return ojdBody.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdBody;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdBody.BOOLEANdesiredAssertionStatus(ojdBody); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_13_9 : for(;;) switch (__label__) {
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_13_9;
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_13_9;
        }
        ojdBody.$assertionsDisabled = var1;
        return;
    },

    VOIDinitojdBodyDefojdWorld : function(thisRef,bd,world) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = new ojcTransform.Create(); // type is REFERENCE value type is REFERENCE
            ojcTransform.VOIDinit(var0);
            thisRef.m_xf = var0;
            var var1 = new ojcSweep.Create(); // type is REFERENCE value type is REFERENCE
            ojcSweep.VOIDinit(var1);
            thisRef.m_sweep = var1;
            var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var2);
            thisRef.m_linearVelocity = var2;
            thisRef.m_angularVelocity = 0.0;
            var var3 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var3);
            thisRef.m_force = var3;
            thisRef.m_torque = 0.0;
            var var4 = new ojdFixtureDef.Create(); // type is REFERENCE value type is REFERENCE
            ojdFixtureDef.VOIDinit(var4);
            thisRef.fixDef = var4;
            var var5 = new ojcsMassData.Create(); // type is REFERENCE value type is REFERENCE
            ojcsMassData.VOIDinit(var5);
            thisRef.pmd = var5;
            var var6 = new ojcTransform.Create(); // type is REFERENCE value type is REFERENCE
            ojcTransform.VOIDinit(var6);
            thisRef.pxf = var6;
            var var7 = ojdBody.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var7 != 0)) {
                __label__ = 115;
                break $S_0;
            }
            __label__ = 97;
            }
        $M_115_97 : for(;;) switch (__label__) {
            case 115 :
            // NORMAL
                $S_115 : {
                // NORMAL
                    var var11 = ojdBody.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                    if ((var11 != 0)) {
                        __label__ = 139;
                        break $S_115;
                    }
                    __label__ = 121;
                    }
                $M_139_121 : for(;;) switch (__label__) {
                    case 121 :
                    // NORMAL
                        $S_121 : {
                        // NORMAL
                            var var13 = bd.linearVelocity.BOOLEANisValid(bd.linearVelocity); // type is BOOLEAN value type is BOOLEAN
                            if ((var13 != 0)) {
                                __label__ = 139;
                                continue $M_139_121;
                            }
                            }
                        var var78 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                        jlAssertionError.VOIDinit(var78);
                        throw var78;
                    case 139 :
                    // NORMAL
                        $S_139 : {
                        // NORMAL
                            var var14 = ojdBody.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                            if ((var14 != 0)) {
                                __label__ = 162;
                                break $S_139;
                            }
                            __label__ = 145;
                            }
                        $M_145_162 : for(;;) switch (__label__) {
                            case 162 :
                            // NORMAL
                                $S_162 : {
                                // NORMAL
                                    var var18 = ojdBody.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                                    if ((var18 != 0)) {
                                        __label__ = 185;
                                        break $S_162;
                                    }
                                    __label__ = 168;
                                    }
                                $M_185_168 : for(;;) switch (__label__) {
                                    case 185 :
                                    // NORMAL
                                        $S_185 : {
                                        // NORMAL
                                            var var21 = ojdBody.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                                            if ((var21 != 0)) {
                                                __label__ = 208;
                                                break $S_185;
                                            }
                                            __label__ = 191;
                                            }
                                        $M_191_208 : for(;;) switch (__label__) {
                                            case 208 :
                                            // NORMAL
                                                $S_208 : {
                                                // NORMAL
                                                    thisRef.m_flags = 0;
                                                    var var24 = bd.bullet; // type is BOOLEAN value type is BOOLEAN
                                                    if ((var24 == 0)) {
                                                        __label__ = 231;
                                                        break $S_208;
                                                    }
                                                    __label__ = 220;
                                                    }
                                                $M_231_220 : for(;;) switch (__label__) {
                                                    case 231 :
                                                    // NORMAL
                                                        $S_231 : {
                                                        // NORMAL
                                                            var var27 = bd.fixedRotation; // type is BOOLEAN value type is BOOLEAN
                                                            if ((var27 == 0)) {
                                                                __label__ = 249;
                                                                break $S_231;
                                                            }
                                                            __label__ = 238;
                                                            }
                                                        $M_238_249 : for(;;) switch (__label__) {
                                                            case 249 :
                                                            // NORMAL
                                                                $S_249 : {
                                                                // NORMAL
                                                                    var var30 = bd.allowSleep; // type is BOOLEAN value type is BOOLEAN
                                                                    if ((var30 == 0)) {
                                                                        __label__ = 266;
                                                                        break $S_249;
                                                                    }
                                                                    __label__ = 256;
                                                                    }
                                                                $M_266_256 : for(;;) switch (__label__) {
                                                                    case 266 :
                                                                    // NORMAL
                                                                        $S_266 : {
                                                                        // NORMAL
                                                                            var var33 = bd.awake; // type is BOOLEAN value type is BOOLEAN
                                                                            if ((var33 == 0)) {
                                                                                __label__ = 283;
                                                                                break $S_266;
                                                                            }
                                                                            __label__ = 273;
                                                                            }
                                                                        $M_273_283 : for(;;) switch (__label__) {
                                                                            case 283 :
                                                                            // NORMAL
                                                                                $S_283 : {
                                                                                // NORMAL
                                                                                    var var36 = bd.active; // type is BOOLEAN value type is BOOLEAN
                                                                                    if ((var36 == 0)) {
                                                                                        __label__ = 301;
                                                                                        break $S_283;
                                                                                    }
                                                                                    __label__ = 290;
                                                                                    }
                                                                                $M_290_301 : for(;;) switch (__label__) {
                                                                                    case 301 :
                                                                                    // NORMAL
                                                                                        $S_301 : {
                                                                                        // NORMAL
                                                                                            thisRef.m_world = world;
                                                                                            var var42 = thisRef.m_xf.p.ojcVec2setojcVec2(thisRef.m_xf.p,bd.position); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2a1ad676
                                                                                            var var46 = thisRef.m_xf.q.ojcRotsetFLOAT(thisRef.m_xf.q,bd.angle); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@55890d3b
                                                                                            thisRef.m_sweep.localCenter.VOIDsetZero(thisRef.m_sweep.localCenter);
                                                                                            var var53 = thisRef.m_sweep.c0.ojcVec2setojcVec2(thisRef.m_sweep.c0,thisRef.m_xf.p); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@593cfb54
                                                                                            var var58 = thisRef.m_sweep.c.ojcVec2setojcVec2(thisRef.m_sweep.c,thisRef.m_xf.p); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@30b2a881
                                                                                            var var59 = thisRef.m_sweep; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4ce77187
                                                                                            var var60 = bd.angle; // type is FLOAT value type is FLOAT
                                                                                            var59.a0 = var60;
                                                                                            var var61 = thisRef.m_sweep; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@519a4df5
                                                                                            var var62 = bd.angle; // type is FLOAT value type is FLOAT
                                                                                            var61.a = var62;
                                                                                            var var63 = thisRef.m_sweep; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6fc2eac9
                                                                                            var63.alpha0 = 0.0;
                                                                                            thisRef.m_jointList = null;
                                                                                            thisRef.m_contactList = null;
                                                                                            thisRef.m_prev = null;
                                                                                            thisRef.m_next = null;
                                                                                            var var66 = thisRef.m_linearVelocity.ojcVec2setojcVec2(thisRef.m_linearVelocity,bd.linearVelocity); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4a11b110
                                                                                            var var67 = bd.angularVelocity; // type is FLOAT value type is FLOAT
                                                                                            thisRef.m_angularVelocity = var67;
                                                                                            var var68 = bd.linearDamping; // type is FLOAT value type is FLOAT
                                                                                            thisRef.m_linearDamping = var68;
                                                                                            var var69 = bd.angularDamping; // type is FLOAT value type is FLOAT
                                                                                            thisRef.m_angularDamping = var69;
                                                                                            var var70 = bd.gravityScale; // type is FLOAT value type is FLOAT
                                                                                            thisRef.m_gravityScale = var70;
                                                                                            thisRef.m_force.VOIDsetZero(thisRef.m_force);
                                                                                            thisRef.m_torque = 0.0;
                                                                                            thisRef.m_sleepTime = 0.0;
                                                                                            var var72 = bd.type; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3d0d9a9c
                                                                                            thisRef.m_type = var72;
                                                                                            var var73 = thisRef.m_type; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3efb8d2d
                                                                                            var var74 = ojdBodyType.DYNAMIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4617bc99
                                                                                            if ((var73 != var74)) {
                                                                                                __label__ = 524;
                                                                                                break $S_301;
                                                                                            }
                                                                                            __label__ = 511;
                                                                                            }
                                                                                        $M_524_511 : for(;;) switch (__label__) {
                                                                                            case 524 :
                                                                                            // NORMAL
                                                                                                thisRef.m_mass = 0.0;
                                                                                                thisRef.m_invMass = 0.0;
                                                                                                break $M_524_511;
                                                                                            case 511 :
                                                                                            // NORMAL
                                                                                                thisRef.m_mass = 1.0;
                                                                                                thisRef.m_invMass = 1.0;
                                                                                                break $M_524_511;
                                                                                        }
                                                                                        thisRef.m_I = 0.0;
                                                                                        thisRef.m_invI = 0.0;
                                                                                        var var75 = bd.userData; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1491c7a
                                                                                        thisRef.m_userData = var75;
                                                                                        thisRef.m_fixtureList = null;
                                                                                        thisRef.m_fixtureCount = 0;
                                                                                        return;
                                                                                    case 290 :
                                                                                    // NORMAL
                                                                                        var var38 = (thisRef.m_flags | 32); // type is INT value type is INT
                                                                                        thisRef.m_flags = var38;
                                                                                        __label__ = 301;
                                                                                        continue $M_290_301;
                                                                                }
                                                                            case 273 :
                                                                            // NORMAL
                                                                                var var35 = (thisRef.m_flags | 2); // type is INT value type is INT
                                                                                thisRef.m_flags = var35;
                                                                                __label__ = 283;
                                                                                continue $M_273_283;
                                                                        }
                                                                    case 256 :
                                                                    // NORMAL
                                                                        var var32 = (thisRef.m_flags | 4); // type is INT value type is INT
                                                                        thisRef.m_flags = var32;
                                                                        __label__ = 266;
                                                                        continue $M_266_256;
                                                                }
                                                            case 238 :
                                                            // NORMAL
                                                                var var29 = (thisRef.m_flags | 16); // type is INT value type is INT
                                                                thisRef.m_flags = var29;
                                                                __label__ = 249;
                                                                continue $M_238_249;
                                                        }
                                                    case 220 :
                                                    // NORMAL
                                                        var var26 = (thisRef.m_flags | 8); // type is INT value type is INT
                                                        thisRef.m_flags = var26;
                                                        __label__ = 231;
                                                        continue $M_231_220;
                                                }
                                            case 191 :
                                            // NORMAL
                                                $S_191 : {
                                                // NORMAL
                                                    var var22 = bd.linearDamping; // type is FLOAT value type is FLOAT
                                                    if ((var22 >= 0.0)) {
                                                        __label__ = 208;
                                                        continue $M_191_208;
                                                    }
                                                    }
                                                var var77 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                                jlAssertionError.VOIDinit(var77);
                                                throw var77;
                                        }
                                    case 168 :
                                    // NORMAL
                                        $S_168 : {
                                        // NORMAL
                                            var var19 = bd.angularDamping; // type is FLOAT value type is FLOAT
                                            if ((var19 >= 0.0)) {
                                                __label__ = 185;
                                                continue $M_185_168;
                                            }
                                            }
                                        var var76 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                        jlAssertionError.VOIDinit(var76);
                                        throw var76;
                                }
                            case 145 :
                            // NORMAL
                                $S_145 : {
                                // NORMAL
                                    var var15 = bd.gravityScale; // type is FLOAT value type is FLOAT
                                    if ((var15 >= 0.0)) {
                                        __label__ = 162;
                                        continue $M_145_162;
                                    }
                                    }
                                var var17 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                jlAssertionError.VOIDinit(var17);
                                throw var17;
                        }
                }
            case 97 :
            // NORMAL
                $S_97 : {
                // NORMAL
                    var var9 = bd.position.BOOLEANisValid(bd.position); // type is BOOLEAN value type is BOOLEAN
                    if ((var9 != 0)) {
                        __label__ = 115;
                        continue $M_115_97;
                    }
                    }
                var var10 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var10);
                throw var10;
        }
    },

    ojdFixturecreateFixtureojdFixtureDef : function(thisRef,def) {
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdBody.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 24;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_6_24 : for(;;) switch (__label__) {
            case 24 :
            // NORMAL
                $S_24 : {
                // NORMAL
                    var var4 = thisRef.m_world.BOOLEANisLocked(thisRef.m_world); // type is BOOLEAN value type is BOOLEAN
                    if ((var4 != 1)) {
                        break $S_24;
                    }
                    return null;
                    }
                $S_37 : {
                // NORMAL
                    var var6 = new ojdFixture.Create(); // type is REFERENCE value type is REFERENCE
                    ojdFixture.VOIDinit(var6);
                    local_2_REFERENCE = var6; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@757467d3
                    local_2_REFERENCE.VOIDcreateojdBodyojdFixtureDef(local_2_REFERENCE,thisRef,def);
                    var var10 = (thisRef.m_flags & 32); // type is INT value type is INT
                    if ((var10 != 32)) {
                        __label__ = 83;
                        break $S_37;
                    }
                    __label__ = 63;
                    }
                $M_83_63 : for(;;) switch (__label__) {
                    case 63 :
                    // NORMAL
                        var local_3_REFERENCE = thisRef.m_world.m_contactManager.m_broadPhase; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5f6fdbff
                        local_2_REFERENCE.VOIDcreateProxiesojcbBroadPhaseojcTransform(local_2_REFERENCE,local_3_REFERENCE,thisRef.m_xf);
                        __label__ = 83;
                        continue $M_83_63;
                    case 83 :
                    // NORMAL
                        $S_83 : {
                        // NORMAL
                            var var18 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@757467d3
                            var var19 = thisRef.m_fixtureList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@19a5d873
                            var18.m_next = var19;
                            var var20 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@757467d3
                            thisRef.m_fixtureList = var20;
                            var var22 = (thisRef.m_fixtureCount + 1); // type is INT value type is INT
                            thisRef.m_fixtureCount = var22;
                            var var23 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@757467d3
                            var23.m_body = thisRef;
                            var var25 = local_2_REFERENCE.m_density; // type is FLOAT value type is FLOAT
                            if ((var25 <= 0.0)) {
                                __label__ = 124;
                                break $S_83;
                            }
                            __label__ = 120;
                            }
                        $M_124_120 : for(;;) switch (__label__) {
                            case 124 :
                            // NORMAL
                                var var27 = thisRef.m_world; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2039ed9d
                                var var29 = (var27.m_flags | 1); // type is INT value type is INT
                                var27.m_flags = var29;
                                return local_2_REFERENCE;
                            case 120 :
                            // NORMAL
                                thisRef.VOIDresetMassData(thisRef);
                                __label__ = 124;
                                continue $M_124_120;
                        }
                }
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    var var2 = thisRef.m_world.BOOLEANisLocked(thisRef.m_world); // type is BOOLEAN value type is BOOLEAN
                    if ((var2 == 0)) {
                        __label__ = 24;
                        continue $M_6_24;
                    }
                    }
                var var5 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var5);
                throw var5;
        }
    },

    VOIDresetMassData : function(thisRef) {
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 4
        var local_1_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            thisRef.m_mass = 0.0;
            thisRef.m_invMass = 0.0;
            thisRef.m_I = 0.0;
            thisRef.m_invI = 0.0;
            thisRef.m_sweep.localCenter.VOIDsetZero(thisRef.m_sweep.localCenter);
            var var2 = thisRef.m_type; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1b6333ae
            var var3 = ojdBodyType.STATIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7717dde9
            if ((var2 == var3)) {
                __label__ = 50;
                break $S_0;
            }
            __label__ = 40;
            }
        $M_50_40 : for(;;) switch (__label__) {
            case 40 :
            // NORMAL
                $S_40 : {
                // NORMAL
                    var var4 = thisRef.m_type; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@137f8d8c
                    var var5 = ojdBodyType.KINEMATIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@44250fcb
                    if ((var4 != var5)) {
                        break $S_40;
                    }
                    __label__ = 50;
                    continue $M_50_40;
                    }
                $S_101 : {
                // NORMAL
                    var var6 = ojdBody.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                    if ((var6 != 0)) {
                        __label__ = 125;
                        break $S_101;
                    }
                    __label__ = 107;
                    }
                $M_125_107 : for(;;) switch (__label__) {
                    case 107 :
                    // NORMAL
                        $S_107 : {
                        // NORMAL
                            var var7 = thisRef.m_type; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@46d9baa2
                            var var8 = ojdBodyType.DYNAMIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@f68df05
                            if ((var7 == var8)) {
                                __label__ = 125;
                                continue $M_125_107;
                            }
                            }
                        var var61 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                        jlAssertionError.VOIDinit(var61);
                        throw var61;
                    case 125 :
                    // NORMAL
                        $S_125 : {
                        // NORMAL
                            var var10 = thisRef.m_world.ojpIWorldPoolgetPool(thisRef.m_world); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@60942089
                            var var11 = var10.ojcVec2popVec2(var10); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@ca33007
                            local_1_REFERENCE = var11; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@60241e56
                            local_1_REFERENCE.VOIDsetZero(local_1_REFERENCE);
                            var var15 = thisRef.m_world.ojpIWorldPoolgetPool(thisRef.m_world); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@724879b
                            var var16 = var15.ojcVec2popVec2(var15); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4efde08d
                            local_2_REFERENCE = var16; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@215a036b
                            local_3_REFERENCE = thisRef.pmd; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@f2c11b3
                            local_4_REFERENCE = thisRef.m_fixtureList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1a9a3b59
                            __label__ = 166;
                            }
                        $L_166 : for (;;) {
                            $S_166 : {
                            // NORMAL
                                var var22 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6cc76d90
                                if (var22 == null ) {
                                    __label__ = 248;
                                    break $S_166;
                                }
                                __label__ = 171;
                                }
                            for(;;) switch (__label__) {
                                case 171 :
                                // NORMAL
                                    $S_171 : {
                                    // NORMAL
                                        var var24 = local_4_REFERENCE.m_density; // type is FLOAT value type is FLOAT
                                        if ((var24 != 0.0)) {
                                            __label__ = 184;
                                            break $S_171;
                                        }
                                        __label__ = 181;
                                        }
                                    $M_184_181 : for(;;) switch (__label__) {
                                        case 181 :
                                        // NORMAL
                                            break $M_184_181;
                                        case 184 :
                                        // NORMAL
                                            local_4_REFERENCE.VOIDgetMassDataojcsMassData(local_4_REFERENCE,local_3_REFERENCE);
                                            var var31 = (thisRef.m_mass + local_3_REFERENCE.mass); // type is FLOAT value type is FLOAT
                                            thisRef.m_mass = var31;
                                            var var35 = local_2_REFERENCE.ojcVec2setojcVec2(local_2_REFERENCE,local_3_REFERENCE.center); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@39a16fce
                                            var var38 = var35.ojcVec2mulLocalFLOAT(var35,local_3_REFERENCE.mass); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@18f909ff
                                            var var41 = local_1_REFERENCE.ojcVec2addLocalojcVec2(local_1_REFERENCE,local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@773722da
                                            var var45 = (thisRef.m_I + local_3_REFERENCE.I); // type is FLOAT value type is FLOAT
                                            thisRef.m_I = var45;
                                            break $M_184_181;
                                    }
                                    local_4_REFERENCE = local_4_REFERENCE.m_next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3c3c9f96
                                    __label__ = 166;
                                    continue $L_166;
                                case 248 :
                                // NORMAL
                                    $S_248 : {
                                    // NORMAL
                                        var var62 = thisRef.m_mass; // type is FLOAT value type is FLOAT
                                        if ((var62 <= 0.0)) {
                                            __label__ = 279;
                                            break $S_248;
                                        }
                                        __label__ = 257;
                                        }
                                    $M_257_279 : for(;;) switch (__label__) {
                                        case 257 :
                                        // NORMAL
                                            var var65 = (1.0 / thisRef.m_mass); // type is FLOAT value type is FLOAT
                                            thisRef.m_invMass = var65;
                                            var var68 = local_1_REFERENCE.ojcVec2mulLocalFLOAT(local_1_REFERENCE,thisRef.m_invMass); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@e5158c0
                                            break $M_257_279;
                                        case 279 :
                                        // NORMAL
                                            thisRef.m_mass = 1.0;
                                            thisRef.m_invMass = 1.0;
                                            break $M_257_279;
                                    }
                                    $S_289 : {
                                    // NORMAL
                                        var var69 = thisRef.m_I; // type is FLOAT value type is FLOAT
                                        if ((var69 <= 0.0)) {
                                            __label__ = 363;
                                            break $S_289;
                                        }
                                        __label__ = 298;
                                        }
                                    $M_298_363 : for(;;) switch (__label__) {
                                        case 363 :
                                        // NORMAL
                                            thisRef.m_I = 0.0;
                                            thisRef.m_invI = 0.0;
                                            break $M_298_363;
                                        case 298 :
                                        // NORMAL
                                            $S_298 : {
                                            // NORMAL
                                                var var72 = (thisRef.m_flags & 16); // type is INT value type is INT
                                                if ((var72 != 0)) {
                                                    __label__ = 363;
                                                    continue $M_298_363;
                                                }
                                                }
                                            $S_308 : {
                                            // NORMAL
                                                var var73 = thisRef.m_I; // type is FLOAT value type is FLOAT
                                                var var74 = thisRef.m_mass; // type is FLOAT value type is FLOAT
                                                var var77 = ojcVec2.FLOATdotojcVec2ojcVec2(local_1_REFERENCE,local_1_REFERENCE); // type is FLOAT value type is FLOAT
                                                var var79 = (var73 - (var74 * var77)); // type is FLOAT value type is FLOAT
                                                thisRef.m_I = var79;
                                                var var80 = ojdBody.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                                                if ((var80 != 0)) {
                                                    __label__ = 350;
                                                    break $S_308;
                                                }
                                                __label__ = 333;
                                                }
                                            $M_333_350 : for(;;) switch (__label__) {
                                                case 333 :
                                                // NORMAL
                                                    $S_333 : {
                                                    // NORMAL
                                                        var var81 = thisRef.m_I; // type is FLOAT value type is FLOAT
                                                        if ((var81 > 0.0)) {
                                                            __label__ = 350;
                                                            continue $M_333_350;
                                                        }
                                                        }
                                                    var var83 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                                    jlAssertionError.VOIDinit(var83);
                                                    throw var83;
                                                case 350 :
                                                // NORMAL
                                                    var var85 = (1.0 / thisRef.m_I); // type is FLOAT value type is FLOAT
                                                    thisRef.m_invI = var85;
                                                    break $M_298_363;
                                            }
                                    }
                                    var var87 = thisRef.m_world.ojpIWorldPoolgetPool(thisRef.m_world); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5e370e04
                                    var var88 = var87.ojcVec2popVec2(var87); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@10d8d6ea
                                    local_4_REFERENCE = var88; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5d61175a
                                    var var92 = local_4_REFERENCE.ojcVec2setojcVec2(local_4_REFERENCE,thisRef.m_sweep.c); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@48c02b48
                                    var var96 = thisRef.m_sweep.localCenter.ojcVec2setojcVec2(thisRef.m_sweep.localCenter,local_1_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4c53edc8
                                    ojcTransform.VOIDmulToOutUnsafeojcTransformojcVec2ojcVec2(thisRef.m_xf,thisRef.m_sweep.localCenter,thisRef.m_sweep.c0);
                                    var var106 = thisRef.m_sweep.c.ojcVec2setojcVec2(thisRef.m_sweep.c,thisRef.m_sweep.c0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2af28d68
                                    var var110 = local_2_REFERENCE.ojcVec2setojcVec2(local_2_REFERENCE,thisRef.m_sweep.c); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7ccb715a
                                    var var112 = var110.ojcVec2subLocalojcVec2(var110,local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@35189fe0
                                    var local_5_REFERENCE = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6cc76d90
                                    ojcVec2.VOIDcrossToOutUnsafeFLOATojcVec2ojcVec2(thisRef.m_angularVelocity,local_2_REFERENCE,local_5_REFERENCE);
                                    var var120 = thisRef.m_linearVelocity.ojcVec2addLocalojcVec2(thisRef.m_linearVelocity,local_5_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@66f61926
                                    var var122 = thisRef.m_world.ojpIWorldPoolgetPool(thisRef.m_world); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5851415d
                                    var122.VOIDpushVec2INT(var122,3);
                                    return;
                            }
                        }
                }
            case 50 :
            // NORMAL
                var var52 = thisRef.m_sweep.c0.ojcVec2setojcVec2(thisRef.m_sweep.c0,thisRef.m_xf.p); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7fb7aaac
                var var57 = thisRef.m_sweep.c.ojcVec2setojcVec2(thisRef.m_sweep.c,thisRef.m_xf.p); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@e21cd25
                var var58 = thisRef.m_sweep; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@58c8caee
                var var60 = thisRef.m_sweep.a; // type is FLOAT value type is FLOAT
                var58.a0 = var60;
                return;
        }
    },

    ojcTransformgetTransform : function(thisRef) {
        var __label__ = null;
        return thisRef.m_xf;
    },

    ojcVec2getWorldCenter : function(thisRef) {
        var __label__ = null;
        return thisRef.m_sweep.c;
    },

    ojcVec2getLocalPointojcVec2 : function(thisRef,worldPoint) {
        var __label__ = null;
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var0);
        var local_2_REFERENCE = var0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@488da707
        thisRef.VOIDgetLocalPointToOutojcVec2ojcVec2(thisRef,worldPoint,local_2_REFERENCE);
        return local_2_REFERENCE;
    },

    VOIDgetLocalPointToOutojcVec2ojcVec2 : function(thisRef,worldPoint,out) {
        var __label__ = null;
        ojcTransform.VOIDmulTransToOutojcTransformojcVec2ojcVec2(thisRef.m_xf,worldPoint,out);
        return;
    },

    ojdcContactEdgegetContactList : function(thisRef) {
        var __label__ = null;
        return thisRef.m_contactList;
    },

    VOIDapplyTorqueFLOAT : function(thisRef,torque) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.m_type; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@52c8c46a
            var var1 = ojdBodyType.DYNAMIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3acaf2f7
            if ((var0 == var1)) {
                break $S_0;
            }
            return;
            }
        $S_11 : {
        // NORMAL
            var var2 = thisRef.BOOLEANisAwake(thisRef); // type is BOOLEAN value type is BOOLEAN
            if ((var2 != 0)) {
                __label__ = 23;
                break $S_11;
            }
            __label__ = 18;
            }
        $M_23_18 : for(;;) switch (__label__) {
            case 23 :
            // NORMAL
                var var4 = (thisRef.m_torque + torque); // type is FLOAT value type is FLOAT
                thisRef.m_torque = var4;
                return;
            case 18 :
            // NORMAL
                thisRef.VOIDsetAwakeBOOLEAN(thisRef,1);
                __label__ = 23;
                continue $M_23_18;
        }
    },

    BOOLEANisAwake : function(thisRef) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var1 = (thisRef.m_flags & 2); // type is INT value type is INT
            if ((var1 != 2)) {
                __label__ = 14;
                break $S_0;
            }
            __label__ = 10;
            }
        for(;;) switch (__label__) {
            case 10 :
            // NORMAL
                var var2 = 1; // type is INT value type is INT
                return var2;
            case 14 :
            // NORMAL
                var var2 = 0; // type is INT value type is INT
                return var2;
        }
    },

    VOIDsetAwakeBOOLEAN : function(thisRef,flag) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((flag == 0)) {
                __label__ = 31;
                break $S_0;
            }
            __label__ = 4;
            }
        for(;;) switch (__label__) {
            case 31 :
            // NORMAL
                var var1 = (thisRef.m_flags & -3); // type is INT value type is INT
                thisRef.m_flags = var1;
                thisRef.m_sleepTime = 0.0;
                thisRef.m_linearVelocity.VOIDsetZero(thisRef.m_linearVelocity);
                thisRef.m_angularVelocity = 0.0;
                thisRef.m_force.VOIDsetZero(thisRef.m_force);
                thisRef.m_torque = 0.0;
                return;
            case 4 :
            // NORMAL
                $S_4 : {
                // NORMAL
                    var var5 = (thisRef.m_flags & 2); // type is INT value type is INT
                    if ((var5 != 0)) {
                        return;
                    }
                    }
                var var7 = (thisRef.m_flags | 2); // type is INT value type is INT
                thisRef.m_flags = var7;
                thisRef.m_sleepTime = 0.0;
                return;
        }
    },

    BOOLEANshouldCollideojdBody : function(thisRef,other) {
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.m_type; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6ef08ba9
            var var1 = ojdBodyType.DYNAMIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@417caa50
            if ((var0 == var1)) {
                __label__ = 22;
                break $S_0;
            }
            __label__ = 10;
            }
        $M_10_22 : for(;;) switch (__label__) {
            case 22 :
            // NORMAL
                $S_22 : {
                // NORMAL
                    local_2_REFERENCE = thisRef.m_jointList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1927be0d
                    __label__ = 27;
                    }
                $L_27 : for (;;) {
                    $S_27 : {
                    // NORMAL
                        var var6 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4ddb7b86
                        if (var6 == null ) {
                            return 1;
                        }
                        }
                    $S_31 : {
                    // NORMAL
                        var var8 = local_2_REFERENCE.other; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3a939abb
                        if ((var8 != other)) {
                            __label__ = 51;
                            break $S_31;
                        }
                        __label__ = 39;
                        }
                    $M_51_39 : for(;;) switch (__label__) {
                        case 39 :
                        // NORMAL
                            var var11 = local_2_REFERENCE.joint.BOOLEANgetCollideConnected(local_2_REFERENCE.joint); // type is BOOLEAN value type is BOOLEAN
                            if ((var11 != 0)) {
                                __label__ = 51;
                                continue $M_51_39;
                            }
                            return 0;
                        case 51 :
                        // NORMAL
                            local_2_REFERENCE = local_2_REFERENCE.next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@50d4e383
                            __label__ = 27;
                            continue $L_27;
                    }
                }
            case 10 :
            // NORMAL
                var var2 = other.m_type; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@745eede3
                var var3 = ojdBodyType.DYNAMIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@502df2b3
                if ((var2 == var3)) {
                    __label__ = 22;
                    continue $M_10_22;
                }
                return 0;
        }
    },

    BOOLEANisActive : function(thisRef) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var1 = (thisRef.m_flags & 32); // type is INT value type is INT
            if ((var1 != 32)) {
                __label__ = 16;
                break $S_0;
            }
            __label__ = 12;
            }
        for(;;) switch (__label__) {
            case 16 :
            // NORMAL
                var var2 = 0; // type is INT value type is INT
                return var2;
            case 12 :
            // NORMAL
                var var2 = 1; // type is INT value type is INT
                return var2;
        }
    },

    ojdBodyTypegetType : function(thisRef) {
        var __label__ = null;
        return thisRef.m_type;
    },

    VOIDsynchronizeTransform : function(thisRef) {
        var __label__ = null;
        var var1 = thisRef.m_xf.q; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1c1c89d1
        var var4 = ojcMathUtils.FLOATsinFLOAT(thisRef.m_sweep.a); // type is FLOAT value type is FLOAT
        var1.s = var4;
        var var6 = thisRef.m_xf.q; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5cba5205
        var var9 = ojcMathUtils.FLOATcosFLOAT(thisRef.m_sweep.a); // type is FLOAT value type is FLOAT
        var6.c = var9;
        var local_1_REFERENCE = thisRef.m_xf.q; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1e9caf78
        var local_2_REFERENCE = thisRef.m_sweep.localCenter; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6898804
        var var17 = thisRef.m_xf.p; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7e23cb05
        var var32 = ((thisRef.m_sweep.c.x - (local_1_REFERENCE.c * local_2_REFERENCE.x)) + (local_1_REFERENCE.s * local_2_REFERENCE.y)); // type is FLOAT value type is FLOAT
        var17.x = var32;
        var var34 = thisRef.m_xf.p; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@708794be
        var var49 = ((thisRef.m_sweep.c.y - (local_1_REFERENCE.s * local_2_REFERENCE.x)) - (local_1_REFERENCE.c * local_2_REFERENCE.y)); // type is FLOAT value type is FLOAT
        var34.y = var49;
        return;
    },

    VOIDsynchronizeFixtures : function(thisRef) {
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_1_REFERENCE = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_1_REFERENCE = thisRef.pxf; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@53538dae
            var var3 = local_1_REFERENCE.q; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@75273323
            var var6 = ojcMathUtils.FLOATsinFLOAT(thisRef.m_sweep.a0); // type is FLOAT value type is FLOAT
            var3.s = var6;
            var var8 = local_1_REFERENCE.q; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4f7d1f4f
            var var11 = ojcMathUtils.FLOATcosFLOAT(thisRef.m_sweep.a0); // type is FLOAT value type is FLOAT
            var8.c = var11;
            var var13 = local_1_REFERENCE.p; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5d0d3d2f
            var var32 = ((thisRef.m_sweep.c0.x - (local_1_REFERENCE.q.c * thisRef.m_sweep.localCenter.x)) + (local_1_REFERENCE.q.s * thisRef.m_sweep.localCenter.y)); // type is FLOAT value type is FLOAT
            var13.x = var32;
            var var34 = local_1_REFERENCE.p; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@12fcf5dd
            var var53 = ((thisRef.m_sweep.c0.y - (local_1_REFERENCE.q.s * thisRef.m_sweep.localCenter.x)) - (local_1_REFERENCE.q.c * thisRef.m_sweep.localCenter.y)); // type is FLOAT value type is FLOAT
            var34.y = var53;
            local_2_REFERENCE = thisRef.m_fixtureList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5e8e728a
            __label__ = 154;
            }
        $L_154 : for (;;) {
            $S_154 : {
            // NORMAL
                var var56 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@163885b5
                if (var56 == null ) {
                    return;
                }
                }
            local_2_REFERENCE.VOIDsynchronizeojcbBroadPhaseojcTransformojcTransform(local_2_REFERENCE,thisRef.m_world.m_contactManager.m_broadPhase,local_1_REFERENCE,thisRef.m_xf);
            local_2_REFERENCE = local_2_REFERENCE.m_next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@792e9973
            __label__ = 154;
            continue $L_154;
        }
    },

    ojdBodygetNext : function(thisRef) {
        var __label__ = null;
        return thisRef.m_next;
    },

    BOOLEANisBullet : function(thisRef) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var1 = (thisRef.m_flags & 8); // type is INT value type is INT
            if ((var1 != 8)) {
                __label__ = 16;
                break $S_0;
            }
            __label__ = 12;
            }
        for(;;) switch (__label__) {
            case 12 :
            // NORMAL
                var var2 = 1; // type is INT value type is INT
                return var2;
            case 16 :
            // NORMAL
                var var2 = 0; // type is INT value type is INT
                return var2;
        }
    },

    VOIDadvanceFLOAT : function(thisRef,t) {
        var __label__ = null;
        thisRef.m_sweep.VOIDadvanceFLOAT(thisRef.m_sweep,t);
        var var5 = thisRef.m_sweep.c.ojcVec2setojcVec2(thisRef.m_sweep.c,thisRef.m_sweep.c0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@60b3a258
        var var6 = thisRef.m_sweep; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1a9e195
        var var8 = thisRef.m_sweep.a0; // type is FLOAT value type is FLOAT
        var6.a = var8;
        var var13 = thisRef.m_xf.q.ojcRotsetFLOAT(thisRef.m_xf.q,thisRef.m_sweep.a); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6cad7599
        ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(thisRef.m_xf.q,thisRef.m_sweep.localCenter,thisRef.m_xf.p);
        var var22 = thisRef.m_xf.p.ojcVec2mulLocalFLOAT(thisRef.m_xf.p,-1.0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6af24db
        var var25 = var22.ojcVec2addLocalojcVec2(var22,thisRef.m_sweep.c); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7b73f734
        return;
    },

    ojcVec2getPosition : function(thisRef) {
        var __label__ = null;
        return thisRef.m_xf.p;
    },

    FLOATgetAngle : function(thisRef) {
        var __label__ = null;
        return thisRef.m_sweep.a;
    },

    ojdFixturegetFixtureList : function(thisRef) {
        var __label__ = null;
        return thisRef.m_fixtureList;
    },

    FLOATgetMass : function(thisRef) {
        var __label__ = null;
        return thisRef.m_mass;
    },

    classInitCheck : function() {
        if (!ojdBody.__initialized) {
            ojdBody.__initialized = true;
            var thePrototype = ojdBody.Create.prototype;
            thePrototype.instanceOf = ojdBody.instanceOf;
            thePrototype.ClassgetClass = ojdBody.ClassgetClass;
            thePrototype.FLOATgetMass = ojdBody.FLOATgetMass;
            thePrototype.ojdFixturegetFixtureList = ojdBody.ojdFixturegetFixtureList;
            thePrototype.FLOATgetAngle = ojdBody.FLOATgetAngle;
            thePrototype.ojcVec2getPosition = ojdBody.ojcVec2getPosition;
            thePrototype.VOIDadvanceFLOAT = ojdBody.VOIDadvanceFLOAT;
            thePrototype.BOOLEANisBullet = ojdBody.BOOLEANisBullet;
            thePrototype.ojdBodygetNext = ojdBody.ojdBodygetNext;
            thePrototype.VOIDsynchronizeFixtures = ojdBody.VOIDsynchronizeFixtures;
            thePrototype.VOIDsynchronizeTransform = ojdBody.VOIDsynchronizeTransform;
            thePrototype.ojdBodyTypegetType = ojdBody.ojdBodyTypegetType;
            thePrototype.BOOLEANisActive = ojdBody.BOOLEANisActive;
            thePrototype.BOOLEANshouldCollideojdBody = ojdBody.BOOLEANshouldCollideojdBody;
            thePrototype.VOIDsetAwakeBOOLEAN = ojdBody.VOIDsetAwakeBOOLEAN;
            thePrototype.BOOLEANisAwake = ojdBody.BOOLEANisAwake;
            thePrototype.VOIDapplyTorqueFLOAT = ojdBody.VOIDapplyTorqueFLOAT;
            thePrototype.ojdcContactEdgegetContactList = ojdBody.ojdcContactEdgegetContactList;
            thePrototype.VOIDgetLocalPointToOutojcVec2ojcVec2 = ojdBody.VOIDgetLocalPointToOutojcVec2ojcVec2;
            thePrototype.ojcVec2getLocalPointojcVec2 = ojdBody.ojcVec2getLocalPointojcVec2;
            thePrototype.ojcVec2getWorldCenter = ojdBody.ojcVec2getWorldCenter;
            thePrototype.ojcTransformgetTransform = ojdBody.ojcTransformgetTransform;
            thePrototype.VOIDresetMassData = ojdBody.VOIDresetMassData;
            thePrototype.ojdFixturecreateFixtureojdFixtureDef = ojdBody.ojdFixturecreateFixtureojdFixtureDef;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            ojdBody.VOIDclinit();
        }
    },

};

var ojdProfile = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 109,
    __implementedTypes : [109,1],

    Create : function() {
        this.collide = 0; // declared in org.jbox2d.dynamics.Profile
        this.solveInit = 0; // declared in org.jbox2d.dynamics.Profile
        this.solveVelocity = 0; // declared in org.jbox2d.dynamics.Profile
        this.solvePosition = 0; // declared in org.jbox2d.dynamics.Profile
        this.broadphase = 0; // declared in org.jbox2d.dynamics.Profile
        this.solve = 0; // declared in org.jbox2d.dynamics.Profile
        this.solveTOI = 0; // declared in org.jbox2d.dynamics.Profile
        this.step = 0; // declared in org.jbox2d.dynamics.Profile
    },

    instanceOf : function(aType) {
        return ojdProfile.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdProfile;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    classInitCheck : function() {
        if (!ojdProfile.__initialized) {
            ojdProfile.__initialized = true;
            var thePrototype = ojdProfile.Create.prototype;
            thePrototype.instanceOf = ojdProfile.instanceOf;
            thePrototype.ClassgetClass = ojdProfile.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojcTimeOfImpact$TOIInput = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 110,
    __implementedTypes : [110,1],

    Create : function() {
        this.proxyA = null; // declared in org.jbox2d.collision.TimeOfImpact$TOIInput
        this.proxyB = null; // declared in org.jbox2d.collision.TimeOfImpact$TOIInput
        this.sweepA = null; // declared in org.jbox2d.collision.TimeOfImpact$TOIInput
        this.sweepB = null; // declared in org.jbox2d.collision.TimeOfImpact$TOIInput
        this.tMax = 0; // declared in org.jbox2d.collision.TimeOfImpact$TOIInput
    },

    instanceOf : function(aType) {
        return ojcTimeOfImpact$TOIInput.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcTimeOfImpact$TOIInput;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcDistance$DistanceProxy.Create(); // type is REFERENCE value type is REFERENCE
        ojcDistance$DistanceProxy.VOIDinit(var0);
        thisRef.proxyA = var0;
        var var1 = new ojcDistance$DistanceProxy.Create(); // type is REFERENCE value type is REFERENCE
        ojcDistance$DistanceProxy.VOIDinit(var1);
        thisRef.proxyB = var1;
        var var2 = new ojcSweep.Create(); // type is REFERENCE value type is REFERENCE
        ojcSweep.VOIDinit(var2);
        thisRef.sweepA = var2;
        var var3 = new ojcSweep.Create(); // type is REFERENCE value type is REFERENCE
        ojcSweep.VOIDinit(var3);
        thisRef.sweepB = var3;
        return;
    },

    classInitCheck : function() {
        if (!ojcTimeOfImpact$TOIInput.__initialized) {
            ojcTimeOfImpact$TOIInput.__initialized = true;
            var thePrototype = ojcTimeOfImpact$TOIInput.Create.prototype;
            thePrototype.instanceOf = ojcTimeOfImpact$TOIInput.instanceOf;
            thePrototype.ClassgetClass = ojcTimeOfImpact$TOIInput.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojcTimeOfImpact$TOIOutput = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 111,
    __implementedTypes : [111,1],

    Create : function() {
        this.state = null; // declared in org.jbox2d.collision.TimeOfImpact$TOIOutput
        this.t = 0; // declared in org.jbox2d.collision.TimeOfImpact$TOIOutput
    },

    instanceOf : function(aType) {
        return ojcTimeOfImpact$TOIOutput.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcTimeOfImpact$TOIOutput;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    classInitCheck : function() {
        if (!ojcTimeOfImpact$TOIOutput.__initialized) {
            ojcTimeOfImpact$TOIOutput.__initialized = true;
            var thePrototype = ojcTimeOfImpact$TOIOutput.Create.prototype;
            thePrototype.instanceOf = ojcTimeOfImpact$TOIOutput.instanceOf;
            thePrototype.ClassgetClass = ojcTimeOfImpact$TOIOutput.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojcDestructionListener = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 112,
    __implementedTypes : [1,112],


    classInitCheck : function() {
        if (!ojcDestructionListener.__initialized) {
            ojcDestructionListener.__initialized = true;
            jlObject.classInitCheck();
        }
    },

};

var ojcDebugDraw = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 113,
    __implementedTypes : [113,1],

    instanceOf : function(aType) {
        return ojcDebugDraw.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcDebugDraw;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    classInitCheck : function() {
        if (!ojcDebugDraw.__initialized) {
            ojcDebugDraw.__initialized = true;
            jlObject.classInitCheck();
        }
    },

};

var ojdjJoint = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 114,
    __implementedTypes : [114,1],
    $assertionsDisabled : false, // declared in org.jbox2d.dynamics.joints.Joint

    instanceOf : function(aType) {
        return ojdjJoint.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdjJoint;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdjJoint.BOOLEANdesiredAssertionStatus(ojdjJoint); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_9_13 : for(;;) switch (__label__) {
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_9_13;
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_9_13;
        }
        ojdjJoint.$assertionsDisabled = var1;
        return;
    },

    ojdjJointcreateojdWorldojdjJointDef : function(world,def) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdjJoint$1.$SwitchMap$org$jbox2d$dynamics$joints$JointType; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@266de26b
            var var2 = def.type.INTordinal(def.type); // type is INT value type is INT
            var var3 = var0.data[var2]; // type is INT value type is INT
            if (var3 < 1 || var3 > 12) {
             return null;
            }
            switch(var3 - 1) {
             case 0:
                 __label__ = 72;
            break $S_0;
             case 1:
                 __label__ = 88;
            break $S_0;
             case 2:
                 __label__ = 104;
            break $S_0;
             case 3:
                 __label__ = 120;
            break $S_0;
             case 4:
                 __label__ = 136;
            break $S_0;
             case 5:
                 __label__ = 152;
            break $S_0;
             case 6:
                 __label__ = 168;
            break $S_0;
             case 7:
                 __label__ = 184;
            break $S_0;
             case 8:
                 __label__ = 200;
            break $S_0;
             case 9:
                 __label__ = 216;
            break $S_0;
             case 10:
                 __label__ = 229;
            break $S_0;
             case 11:
                 return null;
            }
            throw 'Illegal jump target!';
            }
        for(;;) switch (__label__) {
            case 168 :
            // NORMAL
                var var4 = new ojdjWheelJoint.Create(); // type is REFERENCE value type is REFERENCE
                var var5 = world.ojpIWorldPoolgetPool(world); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7957f6ec
                ojdjWheelJoint.VOIDinitojpIWorldPoolojdjWheelJointDef(var4,var5,def);
                return var4;
            case 136 :
            // NORMAL
                var var23 = new ojdjWeldJoint.Create(); // type is REFERENCE value type is REFERENCE
                var var24 = world.ojpIWorldPoolgetPool(world); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@a7952fb
                ojdjWeldJoint.VOIDinitojpIWorldPoolojdjWeldJointDef(var23,var24,def);
                return var23;
            case 72 :
            // NORMAL
                var var8 = new ojdjMouseJoint.Create(); // type is REFERENCE value type is REFERENCE
                var var9 = world.ojpIWorldPoolgetPool(world); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5e8e976
                ojdjMouseJoint.VOIDinitojpIWorldPoolojdjMouseJointDef(var8,var9,def);
                return var8;
            case 200 :
            // NORMAL
                var var10 = new ojdjPulleyJoint.Create(); // type is REFERENCE value type is REFERENCE
                var var11 = world.ojpIWorldPoolgetPool(world); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@9e96b18
                ojdjPulleyJoint.VOIDinitojpIWorldPoolojdjPulleyJointDef(var10,var11,def);
                return var10;
            case 229 :
            // NORMAL
                var var6 = new ojdjRopeJoint.Create(); // type is REFERENCE value type is REFERENCE
                var var7 = world.ojpIWorldPoolgetPool(world); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7ccadd15
                ojdjRopeJoint.VOIDinitojpIWorldPoolojdjRopeJointDef(var6,var7,def);
                return var6;
            case 216 :
            // NORMAL
                var var22 = new ojdjConstantVolumeJoint.Create(); // type is REFERENCE value type is REFERENCE
                ojdjConstantVolumeJoint.VOIDinitojdWorldojdjConstantVolumeJointDef(var22,world,def);
                return var22;
            case 88 :
            // NORMAL
                var var18 = new ojdjDistanceJoint.Create(); // type is REFERENCE value type is REFERENCE
                var var19 = world.ojpIWorldPoolgetPool(world); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@28f6df89
                ojdjDistanceJoint.VOIDinitojpIWorldPoolojdjDistanceJointDef(var18,var19,def);
                return var18;
            case 152 :
            // NORMAL
                var var16 = new ojdjFrictionJoint.Create(); // type is REFERENCE value type is REFERENCE
                var var17 = world.ojpIWorldPoolgetPool(world); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7e8628ca
                ojdjFrictionJoint.VOIDinitojpIWorldPoolojdjFrictionJointDef(var16,var17,def);
                return var16;
            case 120 :
            // NORMAL
                var var14 = new ojdjRevoluteJoint.Create(); // type is REFERENCE value type is REFERENCE
                var var15 = world.ojpIWorldPoolgetPool(world); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@469b64b6
                ojdjRevoluteJoint.VOIDinitojpIWorldPoolojdjRevoluteJointDef(var14,var15,def);
                return var14;
            case 104 :
            // NORMAL
                var var12 = new ojdjPrismaticJoint.Create(); // type is REFERENCE value type is REFERENCE
                var var13 = world.ojpIWorldPoolgetPool(world); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7f73e61a
                ojdjPrismaticJoint.VOIDinitojpIWorldPoolojdjPrismaticJointDef(var12,var13,def);
                return var12;
            case 184 :
            // NORMAL
                var var20 = new ojdjGearJoint.Create(); // type is REFERENCE value type is REFERENCE
                var var21 = world.ojpIWorldPoolgetPool(world); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@456da81c
                ojdjGearJoint.VOIDinitojpIWorldPoolojdjGearJointDef(var20,var21,def);
                return var20;
        }
    },

    VOIDinitojpIWorldPoolojdjJointDef : function(thisRef,worldPool,def) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdjJoint.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 29;
                break $S_0;
            }
            __label__ = 10;
            }
        $M_29_10 : for(;;) switch (__label__) {
            case 29 :
            // NORMAL
                thisRef.pool = worldPool;
                var var4 = def.type; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@79ee5c8f
                thisRef.m_type = var4;
                thisRef.m_prev = null;
                thisRef.m_next = null;
                var var5 = def.bodyA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7dc68c1b
                thisRef.m_bodyA = var5;
                var var6 = def.bodyB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@381e9f29
                thisRef.m_bodyB = var6;
                var var7 = def.collideConnected; // type is BOOLEAN value type is BOOLEAN
                thisRef.m_collideConnected = var7;
                thisRef.m_islandFlag = 0;
                var var8 = def.userData; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@156ef5bc
                thisRef.m_userData = var8;
                var var9 = new ojdjJointEdge.Create(); // type is REFERENCE value type is REFERENCE
                ojdjJointEdge.VOIDinit(var9);
                thisRef.m_edgeA = var9;
                var var10 = thisRef.m_edgeA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@57802838
                var10.joint = null;
                var var11 = thisRef.m_edgeA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1bab1236
                var11.other = null;
                var var12 = thisRef.m_edgeA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@790ad7ea
                var12.prev = null;
                var var13 = thisRef.m_edgeA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@19c86378
                var13.next = null;
                var var14 = new ojdjJointEdge.Create(); // type is REFERENCE value type is REFERENCE
                ojdjJointEdge.VOIDinit(var14);
                thisRef.m_edgeB = var14;
                var var15 = thisRef.m_edgeB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4f5f5991
                var15.joint = null;
                var var16 = thisRef.m_edgeB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@ca6d8ee
                var16.other = null;
                var var17 = thisRef.m_edgeB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@23bceb17
                var17.prev = null;
                var var18 = thisRef.m_edgeB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@79b58fbb
                var18.next = null;
                return;
            case 10 :
            // NORMAL
                $S_10 : {
                // NORMAL
                    var var1 = def.bodyA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4c13c2cd
                    var var2 = def.bodyB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@76480209
                    if ((var1 != var2)) {
                        __label__ = 29;
                        continue $M_29_10;
                    }
                    }
                var var3 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var3);
                throw var3;
        }
    },

    ojdjJointTypegetType : function(thisRef) {
        var __label__ = null;
        return thisRef.m_type;
    },

    ojdBodygetBodyA : function(thisRef) {
        var __label__ = null;
        return thisRef.m_bodyA;
    },

    ojdBodygetBodyB : function(thisRef) {
        var __label__ = null;
        return thisRef.m_bodyB;
    },

    BOOLEANgetCollideConnected : function(thisRef) {
        var __label__ = null;
        return thisRef.m_collideConnected;
    },

    classInitCheck : function() {
        if (!ojdjJoint.__initialized) {
            ojdjJoint.__initialized = true;
            jlObject.classInitCheck();
            ojdjJoint.VOIDclinit();
        }
    },

};

var ojdContactManager = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 115,
    __implementedTypes : [116,115,1],

    Create : function() {
        this.m_contactList = null; // declared in org.jbox2d.dynamics.ContactManager
        this.m_contactCount = 0; // declared in org.jbox2d.dynamics.ContactManager
        this.m_contactFilter = null; // declared in org.jbox2d.dynamics.ContactManager
        this.m_contactListener = null; // declared in org.jbox2d.dynamics.ContactManager
        this.m_broadPhase = null; // declared in org.jbox2d.dynamics.ContactManager
        this.pool = null; // declared in org.jbox2d.dynamics.ContactManager
    },

    instanceOf : function(aType) {
        return ojdContactManager.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdContactManager;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitojdWorldojcbBroadPhaseStrategy : function(thisRef,argPool,strategy) {
        var __label__ = null;
        thisRef.m_contactList = null;
        thisRef.m_contactCount = 0;
        var var0 = new ojcContactFilter.Create(); // type is REFERENCE value type is REFERENCE
        ojcContactFilter.VOIDinit(var0);
        thisRef.m_contactFilter = var0;
        thisRef.m_contactListener = null;
        var var1 = new ojcbBroadPhase.Create(); // type is REFERENCE value type is REFERENCE
        ojcbBroadPhase.VOIDinitojcbBroadPhaseStrategy(var1,strategy);
        thisRef.m_broadPhase = var1;
        thisRef.pool = argPool;
        return;
    },

    VOIDfindNewContacts : function(thisRef) {
        var __label__ = null;
        thisRef.m_broadPhase.VOIDupdatePairsojcPairCallback(thisRef.m_broadPhase,thisRef);
        return;
    },

    VOIDcollide : function(thisRef) {
        var local_1_REFERENCE = null; // type is REFERENCE # of inits = 11
        var var42 = null; // type is INT # of inits = 2
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_8_INT = null; // type is INT # of inits = 1
        var var50 = null; // type is INT # of inits = 2
        var local_5_INT = null; // type is INT # of inits = 1
        var local_7_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_4_INT = null; // type is INT # of inits = 1
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_9_INT = null; // type is INT # of inits = 1
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_1_REFERENCE = thisRef.m_contactList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4be961ce
            __label__ = 5;
            }
        $L_5 : for (;;) {
            $S_5 : {
            // NORMAL
                var var2 = local_1_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6af0b284
                if (var2 == null ) {
                    return;
                }
                }
            $S_9 : {
            // NORMAL
                var var4 = local_1_REFERENCE.ojdFixturegetFixtureA(local_1_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7f7fba4f
                local_2_REFERENCE = var4; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@38a5d989
                var var7 = local_1_REFERENCE.ojdFixturegetFixtureB(local_1_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5960c576
                local_3_REFERENCE = var7; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@16028fde
                var var10 = local_1_REFERENCE.INTgetChildIndexA(local_1_REFERENCE); // type is INT value type is INT
                local_4_INT = var10; // type is INT value type is INT
                var var14 = local_1_REFERENCE.INTgetChildIndexB(local_1_REFERENCE); // type is INT value type is INT
                local_5_INT = var14; // type is INT value type is INT
                var var18 = local_2_REFERENCE.ojdBodygetBody(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@62a073b6
                local_6_REFERENCE = var18; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@8c8c348
                var var21 = local_3_REFERENCE.ojdBodygetBody(local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6247893d
                local_7_REFERENCE = var21; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@b1cf5d4
                var var25 = (local_1_REFERENCE.m_flags & 8); // type is INT value type is INT
                if ((var25 != 8)) {
                    __label__ = 131;
                    break $S_9;
                }
                __label__ = 55;
                }
            $M_131_55 : for(;;) switch (__label__) {
                case 55 :
                // NORMAL
                    $S_55 : {
                    // NORMAL
                        var var28 = local_7_REFERENCE.BOOLEANshouldCollideojdBody(local_7_REFERENCE,local_6_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                        if ((var28 != 0)) {
                            __label__ = 83;
                            break $S_55;
                        }
                        __label__ = 65;
                        }
                    for(;;) switch (__label__) {
                        case 83 :
                        // NORMAL
                            $S_83 : {
                            // NORMAL
                                var var29 = thisRef.m_contactFilter; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6068eaf8
                                if (var29 == null ) {
                                    __label__ = 120;
                                    break $S_83;
                                }
                                __label__ = 90;
                                }
                            $M_120_90 : for(;;) switch (__label__) {
                                case 120 :
                                // NORMAL
                                    var var34 = local_1_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6af0b284
                                    var var36 = (var34.m_flags & -9); // type is INT value type is INT
                                    var34.m_flags = var36;
                                    __label__ = 131;
                                    continue $M_131_55;
                                case 90 :
                                // NORMAL
                                    $S_90 : {
                                    // NORMAL
                                        var var33 = thisRef.m_contactFilter.BOOLEANshouldCollideojdFixtureojdFixture(thisRef.m_contactFilter,local_2_REFERENCE,local_3_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                        if ((var33 != 0)) {
                                            __label__ = 120;
                                            continue $M_120_90;
                                        }
                                        }
                                    var local_8_REFERENCE = local_1_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6af0b284
                                    var var85 = local_8_REFERENCE.ojdcContactgetNext(local_8_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3f7cc8f6
                                    local_1_REFERENCE = var85; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6689100b
                                    thisRef.VOIDdestroyojdcContact(thisRef,local_8_REFERENCE);
                                    __label__ = 5;
                                    continue $L_5;
                            }
                        case 65 :
                        // NORMAL
                            var local_8_REFERENCE = local_1_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6af0b284
                            var var94 = local_8_REFERENCE.ojdcContactgetNext(local_8_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5e20216c
                            local_1_REFERENCE = var94; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@11048e5
                            thisRef.VOIDdestroyojdcContact(thisRef,local_8_REFERENCE);
                            __label__ = 5;
                            continue $L_5;
                    }
                case 131 :
                // NORMAL
                    $S_131 : {
                    // NORMAL
                        var var38 = local_6_REFERENCE.BOOLEANisAwake(local_6_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                        if ((var38 == 0)) {
                            __label__ = 154;
                            break $S_131;
                        }
                        __label__ = 139;
                        }
                    $M_139_154 : for(;;) switch (__label__) {
                        case 139 :
                        // NORMAL
                            $S_139 : {
                            // NORMAL
                                var var40 = local_6_REFERENCE.m_type; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7055f4
                                var var41 = ojdBodyType.STATIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@27e85028
                                if ((var40 == var41)) {
                                    __label__ = 154;
                                    continue $M_139_154;
                                }
                                }
                            var42 = 1; // type is INT value type is INT
                            break $M_139_154;
                        case 154 :
                        // NORMAL
                            var42 = 0; // type is INT value type is INT
                            break $M_139_154;
                    }
                    $S_155 : {
                    // NORMAL
                        local_8_INT = var42; // type is INT value type is INT
                        var var46 = local_7_REFERENCE.BOOLEANisAwake(local_7_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                        if ((var46 == 0)) {
                            __label__ = 180;
                            break $S_155;
                        }
                        __label__ = 165;
                        }
                    $M_180_165 : for(;;) switch (__label__) {
                        case 180 :
                        // NORMAL
                            var50 = 0; // type is INT value type is INT
                            break $M_180_165;
                        case 165 :
                        // NORMAL
                            $S_165 : {
                            // NORMAL
                                var var48 = local_7_REFERENCE.m_type; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7e8a175b
                                var var49 = ojdBodyType.STATIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@217e72a7
                                if ((var48 == var49)) {
                                    __label__ = 180;
                                    continue $M_180_165;
                                }
                                }
                            var50 = 1; // type is INT value type is INT
                            break $M_180_165;
                    }
                    $S_181 : {
                    // NORMAL
                        local_9_INT = var50; // type is INT value type is INT
                        var var53 = local_8_INT; // type is INT value type is INT
                        if ((var53 != 0)) {
                            __label__ = 201;
                            break $S_181;
                        }
                        __label__ = 188;
                        }
                    $M_201_188 : for(;;) switch (__label__) {
                        case 201 :
                        // NORMAL
                            $S_201 : {
                            // NORMAL
                                var var58 = local_2_REFERENCE.m_proxies.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                                var local_10_INT = var58.proxyId; // type is INT value type is INT
                                var var65 = local_3_REFERENCE.m_proxies.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                                var local_11_INT = var65.proxyId; // type is INT value type is INT
                                var var72 = thisRef.m_broadPhase.BOOLEANtestOverlapINTINT(thisRef.m_broadPhase,local_10_INT,local_11_INT); // type is BOOLEAN value type is BOOLEAN
                                var local_12_BOOLEAN = var72; // type is BOOLEAN value type is BOOLEAN
                                var var75 = local_12_BOOLEAN; // type is BOOLEAN value type is BOOLEAN
                                if ((var75 != 0)) {
                                    __label__ = 261;
                                    break $S_201;
                                }
                                __label__ = 243;
                                }
                            for(;;) switch (__label__) {
                                case 243 :
                                // NORMAL
                                    var local_13_REFERENCE = local_1_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6af0b284
                                    var var90 = local_13_REFERENCE.ojdcContactgetNext(local_13_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@23a34c89
                                    local_1_REFERENCE = var90; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@902facc
                                    thisRef.VOIDdestroyojdcContact(thisRef,local_13_REFERENCE);
                                    __label__ = 5;
                                    continue $L_5;
                                case 261 :
                                // NORMAL
                                    local_1_REFERENCE.VOIDupdateojcContactListener(local_1_REFERENCE,thisRef.m_contactListener);
                                    var var79 = local_1_REFERENCE.ojdcContactgetNext(local_1_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@46af21c5
                                    local_1_REFERENCE = var79; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3557a9a0
                                    __label__ = 5;
                                    continue $L_5;
                            }
                        case 188 :
                        // NORMAL
                            $S_188 : {
                            // NORMAL
                                var var54 = local_9_INT; // type is INT value type is INT
                                if ((var54 != 0)) {
                                    __label__ = 201;
                                    continue $M_201_188;
                                }
                                }
                            var var81 = local_1_REFERENCE.ojdcContactgetNext(local_1_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@68b1c684
                            local_1_REFERENCE = var81; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@292205d3
                            __label__ = 5;
                            continue $L_5;
                    }
            }
        }
    },

    VOIDdestroyojdcContact : function(thisRef,c) {
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = c.ojdFixturegetFixtureA(c); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@179baea7
            var local_2_REFERENCE = var0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@797f1e2a
            var var2 = c.ojdFixturegetFixtureB(c); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@71ce0aa2
            var local_3_REFERENCE = var2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@40f9441b
            var var5 = local_2_REFERENCE.ojdBodygetBody(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@a5d3435
            local_4_REFERENCE = var5; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@a9879b3
            var var8 = local_3_REFERENCE.ojdBodygetBody(local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@bd2f51a
            local_5_REFERENCE = var8; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3d1ab5f2
            var var10 = thisRef.m_contactListener; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@a4875d8
            if (var10 == null ) {
                __label__ = 46;
                break $S_0;
            }
            __label__ = 29;
            }
        $M_46_29 : for(;;) switch (__label__) {
            case 29 :
            // NORMAL
                $S_29 : {
                // NORMAL
                    var var11 = c.BOOLEANisTouching(c); // type is BOOLEAN value type is BOOLEAN
                    if ((var11 == 0)) {
                        __label__ = 46;
                        continue $M_46_29;
                    }
                    }
                thisRef.m_contactListener.VOIDendContactojdcContact(thisRef.m_contactListener,c);
                __label__ = 46;
                continue $M_46_29;
            case 46 :
            // NORMAL
                $S_46 : {
                // NORMAL
                    var var13 = c.m_prev; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1b3116
                    if (var13 == null ) {
                        __label__ = 64;
                        break $S_46;
                    }
                    __label__ = 53;
                    }
                $M_53_64 : for(;;) switch (__label__) {
                    case 53 :
                    // NORMAL
                        var var14 = c.m_prev; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@630441bc
                        var var15 = c.m_next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7fe212e3
                        var14.m_next = var15;
                        __label__ = 64;
                        continue $M_53_64;
                    case 64 :
                    // NORMAL
                        $S_64 : {
                        // NORMAL
                            var var16 = c.m_next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@364d5e72
                            if (var16 == null ) {
                                __label__ = 82;
                                break $S_64;
                            }
                            __label__ = 71;
                            }
                        $M_82_71 : for(;;) switch (__label__) {
                            case 82 :
                            // NORMAL
                                $S_82 : {
                                // NORMAL
                                    var var19 = thisRef.m_contactList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6f875a2c
                                    if ((c != var19)) {
                                        __label__ = 98;
                                        break $S_82;
                                    }
                                    __label__ = 90;
                                    }
                                $M_98_90 : for(;;) switch (__label__) {
                                    case 98 :
                                    // NORMAL
                                        $S_98 : {
                                        // NORMAL
                                            var var22 = c.m_nodeA.prev; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2ecfefc1
                                            if (var22 == null ) {
                                                __label__ = 125;
                                                break $S_98;
                                            }
                                            __label__ = 108;
                                            }
                                        $M_125_108 : for(;;) switch (__label__) {
                                            case 108 :
                                            // NORMAL
                                                var var24 = c.m_nodeA.prev; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@415585f1
                                                var var26 = c.m_nodeA.next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1d37fd67
                                                var24.next = var26;
                                                __label__ = 125;
                                                continue $M_125_108;
                                            case 125 :
                                            // NORMAL
                                                $S_125 : {
                                                // NORMAL
                                                    var var28 = c.m_nodeA.next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@48b482d7
                                                    if (var28 == null ) {
                                                        __label__ = 152;
                                                        break $S_125;
                                                    }
                                                    __label__ = 135;
                                                    }
                                                $M_135_152 : for(;;) switch (__label__) {
                                                    case 152 :
                                                    // NORMAL
                                                        $S_152 : {
                                                        // NORMAL
                                                            var var33 = c.m_nodeA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@19d4dde7
                                                            var var35 = local_4_REFERENCE.m_contactList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7443b921
                                                            if ((var33 != var35)) {
                                                                __label__ = 176;
                                                                break $S_152;
                                                            }
                                                            __label__ = 164;
                                                            }
                                                        $M_176_164 : for(;;) switch (__label__) {
                                                            case 176 :
                                                            // NORMAL
                                                                $S_176 : {
                                                                // NORMAL
                                                                    var var40 = c.m_nodeB.prev; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@56bdae0b
                                                                    if (var40 == null ) {
                                                                        __label__ = 203;
                                                                        break $S_176;
                                                                    }
                                                                    __label__ = 186;
                                                                    }
                                                                $M_203_186 : for(;;) switch (__label__) {
                                                                    case 203 :
                                                                    // NORMAL
                                                                        $S_203 : {
                                                                        // NORMAL
                                                                            var var46 = c.m_nodeB.next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3af33c31
                                                                            if (var46 == null ) {
                                                                                __label__ = 230;
                                                                                break $S_203;
                                                                            }
                                                                            __label__ = 213;
                                                                            }
                                                                        $M_213_230 : for(;;) switch (__label__) {
                                                                            case 213 :
                                                                            // NORMAL
                                                                                var var48 = c.m_nodeB.next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5f7f56d
                                                                                var var50 = c.m_nodeB.prev; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6c14de43
                                                                                var48.prev = var50;
                                                                                __label__ = 230;
                                                                                continue $M_213_230;
                                                                            case 230 :
                                                                            // NORMAL
                                                                                $S_230 : {
                                                                                // NORMAL
                                                                                    var var51 = c.m_nodeB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5762f83c
                                                                                    var var53 = local_5_REFERENCE.m_contactList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@74535455
                                                                                    if ((var51 != var53)) {
                                                                                        __label__ = 254;
                                                                                        break $S_230;
                                                                                    }
                                                                                    __label__ = 242;
                                                                                    }
                                                                                $M_242_254 : for(;;) switch (__label__) {
                                                                                    case 242 :
                                                                                    // NORMAL
                                                                                        var var54 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3d1ab5f2
                                                                                        var var56 = c.m_nodeB.next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4e359b2f
                                                                                        var54.m_contactList = var56;
                                                                                        __label__ = 254;
                                                                                        continue $M_242_254;
                                                                                    case 254 :
                                                                                    // NORMAL
                                                                                        thisRef.pool.VOIDpushContactojdcContact(thisRef.pool,c);
                                                                                        var var59 = (thisRef.m_contactCount - 1); // type is INT value type is INT
                                                                                        thisRef.m_contactCount = var59;
                                                                                        return;
                                                                                }
                                                                        }
                                                                    case 186 :
                                                                    // NORMAL
                                                                        var var42 = c.m_nodeB.prev; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@499b26c
                                                                        var var44 = c.m_nodeB.next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@447a09db
                                                                        var42.next = var44;
                                                                        __label__ = 203;
                                                                        continue $M_203_186;
                                                                }
                                                            case 164 :
                                                            // NORMAL
                                                                var var36 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@a9879b3
                                                                var var38 = c.m_nodeA.next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2a650cfd
                                                                var36.m_contactList = var38;
                                                                __label__ = 176;
                                                                continue $M_176_164;
                                                        }
                                                    case 135 :
                                                    // NORMAL
                                                        var var30 = c.m_nodeA.next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@486b167d
                                                        var var32 = c.m_nodeA.prev; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1a8c7ce
                                                        var30.prev = var32;
                                                        __label__ = 152;
                                                        continue $M_135_152;
                                                }
                                        }
                                    case 90 :
                                    // NORMAL
                                        var var20 = c.m_next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@150832f1
                                        thisRef.m_contactList = var20;
                                        __label__ = 98;
                                        continue $M_98_90;
                                }
                            case 71 :
                            // NORMAL
                                var var17 = c.m_next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1788d649
                                var var18 = c.m_prev; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@740e23b
                                var17.m_prev = var18;
                                __label__ = 82;
                                continue $M_82_71;
                        }
                }
        }
    },

    VOIDaddPairjlObjectjlObject : function(thisRef,proxyUserDataA,proxyUserDataB) {
        var local_14_INT = null; // type is INT # of inits = 1
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_12_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_11_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_15_INT = null; // type is INT # of inits = 1
        var local_9_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_10_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_7_INT = null; // type is INT # of inits = 3
        var local_13_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_8_INT = null; // type is INT # of inits = 3
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var local_3_REFERENCE = proxyUserDataA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@10518bc7
            var local_4_REFERENCE = proxyUserDataB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@57aa2a2f
            local_5_REFERENCE = local_3_REFERENCE.fixture; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1cac87d9
            local_6_REFERENCE = local_4_REFERENCE.fixture; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@58e7e1e9
            local_7_INT = local_3_REFERENCE.childIndex; // type is INT value type is INT
            local_8_INT = local_4_REFERENCE.childIndex; // type is INT value type is INT
            var var17 = local_5_REFERENCE.ojdBodygetBody(local_5_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@44744681
            local_9_REFERENCE = var17; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4f3e3c79
            var var20 = local_6_REFERENCE.ojdBodygetBody(local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4289e772
            local_10_REFERENCE = var20; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3c033f86
            var var22 = local_9_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4f3e3c79
            var var23 = local_10_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3c033f86
            if ((var22 != var23)) {
                break $S_0;
            }
            return;
            }
        $S_59 : {
        // NORMAL
            var var25 = local_10_REFERENCE.ojdcContactEdgegetContactList(local_10_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3ae332b5
            local_11_REFERENCE = var25; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4b966eb
            __label__ = 66;
            }
        $L_66 : for (;;) {
            $S_66 : {
            // NORMAL
                var var27 = local_11_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4b966eb
                if (var27 == null ) {
                    __label__ = 189;
                    break $S_66;
                }
                __label__ = 71;
                }
            for(;;) switch (__label__) {
                case 71 :
                // NORMAL
                    $S_71 : {
                    // NORMAL
                        var var116 = local_11_REFERENCE.other; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5dec64a9
                        var var117 = local_9_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4f3e3c79
                        if ((var116 != var117)) {
                            __label__ = 179;
                            break $S_71;
                        }
                        __label__ = 81;
                        }
                    $M_81_179 : for(;;) switch (__label__) {
                        case 179 :
                        // NORMAL
                            local_11_REFERENCE = local_11_REFERENCE.next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3b4a61db
                            __label__ = 66;
                            continue $L_66;
                        case 81 :
                        // NORMAL
                            $S_81 : {
                            // NORMAL
                                var var120 = local_11_REFERENCE.contact.ojdFixturegetFixtureA(local_11_REFERENCE.contact); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@36f5b3b7
                                local_12_REFERENCE = var120; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@42cc90c5
                                var var123 = local_11_REFERENCE.contact.ojdFixturegetFixtureB(local_11_REFERENCE.contact); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@15204946
                                local_13_REFERENCE = var123; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@d0d3849
                                var var127 = local_11_REFERENCE.contact.INTgetChildIndexA(local_11_REFERENCE.contact); // type is INT value type is INT
                                local_14_INT = var127; // type is INT value type is INT
                                var var132 = local_11_REFERENCE.contact.INTgetChildIndexB(local_11_REFERENCE.contact); // type is INT value type is INT
                                local_15_INT = var132; // type is INT value type is INT
                                var var135 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2abfae0f
                                var var136 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@76ad4c5
                                if ((var135 != var136)) {
                                    __label__ = 150;
                                    break $S_81;
                                }
                                __label__ = 128;
                                }
                            $M_150_128 : for(;;) switch (__label__) {
                                case 128 :
                                // NORMAL
                                    $S_128 : {
                                    // NORMAL
                                        var var137 = local_14_INT; // type is INT value type is INT
                                        var var138 = local_7_INT; // type is INT value type is INT
                                        if ((var137 != var138)) {
                                            __label__ = 150;
                                            continue $M_150_128;
                                        }
                                        }
                                    $S_135 : {
                                    // NORMAL
                                        var var139 = local_13_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@d0d3849
                                        var var140 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@78dddd9f
                                        if ((var139 != var140)) {
                                            __label__ = 150;
                                            continue $M_150_128;
                                        }
                                        }
                                    var var141 = local_15_INT; // type is INT value type is INT
                                    var var142 = local_8_INT; // type is INT value type is INT
                                    if ((var141 != var142)) {
                                        __label__ = 150;
                                        continue $M_150_128;
                                    }
                                    return;
                                case 150 :
                                // NORMAL
                                    $S_150 : {
                                    // NORMAL
                                        var var143 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2abfae0f
                                        var var144 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@78dddd9f
                                        if ((var143 != var144)) {
                                            __label__ = 179;
                                            continue $M_81_179;
                                        }
                                        }
                                    $S_157 : {
                                    // NORMAL
                                        var var145 = local_14_INT; // type is INT value type is INT
                                        var var146 = local_8_INT; // type is INT value type is INT
                                        if ((var145 != var146)) {
                                            __label__ = 179;
                                            continue $M_81_179;
                                        }
                                        }
                                    $S_164 : {
                                    // NORMAL
                                        var var147 = local_13_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@d0d3849
                                        var var148 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@76ad4c5
                                        if ((var147 != var148)) {
                                            __label__ = 179;
                                            continue $M_81_179;
                                        }
                                        }
                                    var var149 = local_15_INT; // type is INT value type is INT
                                    var var150 = local_7_INT; // type is INT value type is INT
                                    if ((var149 != var150)) {
                                        __label__ = 179;
                                        continue $M_81_179;
                                    }
                                    return;
                            }
                    }
                case 189 :
                // NORMAL
                    $S_189 : {
                    // NORMAL
                        var var30 = local_10_REFERENCE.BOOLEANshouldCollideojdBody(local_10_REFERENCE,local_9_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                        if ((var30 != 0)) {
                            break $S_189;
                        }
                        return;
                        }
                    $S_200 : {
                    // NORMAL
                        var var31 = thisRef.m_contactFilter; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2bd7ae67
                        if (var31 == null ) {
                            __label__ = 222;
                            break $S_200;
                        }
                        __label__ = 207;
                        }
                    $M_207_222 : for(;;) switch (__label__) {
                        case 207 :
                        // NORMAL
                            var var35 = thisRef.m_contactFilter.BOOLEANshouldCollideojdFixtureojdFixture(thisRef.m_contactFilter,local_5_REFERENCE,local_6_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                            if ((var35 != 0)) {
                                __label__ = 222;
                                continue $M_207_222;
                            }
                            return;
                        case 222 :
                        // NORMAL
                            $S_222 : {
                            // NORMAL
                                var var41 = thisRef.pool.ojdcContactpopContactojdFixtureINTojdFixtureINT(thisRef.pool,local_5_REFERENCE,local_7_INT,local_6_REFERENCE,local_8_INT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@437b567f
                                local_12_REFERENCE = var41; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2abfae0f
                                var var43 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2abfae0f
                                if (var43 != null ) {
                                    break $S_222;
                                }
                                return;
                                }
                            $S_245 : {
                            // NORMAL
                                var var45 = local_12_REFERENCE.ojdFixturegetFixtureA(local_12_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@58082dac
                                local_5_REFERENCE = var45; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3e5b6482
                                var var47 = local_12_REFERENCE.ojdFixturegetFixtureB(local_12_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4f752592
                                local_6_REFERENCE = var47; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1ea30f94
                                var var49 = local_12_REFERENCE.INTgetChildIndexA(local_12_REFERENCE); // type is INT value type is INT
                                local_7_INT = var49; // type is INT value type is INT
                                var var52 = local_12_REFERENCE.INTgetChildIndexB(local_12_REFERENCE); // type is INT value type is INT
                                local_8_INT = var52; // type is INT value type is INT
                                var var55 = local_5_REFERENCE.ojdBodygetBody(local_5_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@59470e8d
                                local_9_REFERENCE = var55; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2aa43e68
                                var var57 = local_6_REFERENCE.ojdBodygetBody(local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@40966374
                                local_10_REFERENCE = var57; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3ada483d
                                var var58 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2abfae0f
                                var58.m_prev = null;
                                var var59 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2abfae0f
                                var var60 = thisRef.m_contactList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@596a4387
                                var59.m_next = var60;
                                var var61 = thisRef.m_contactList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3f55b48d
                                if (var61 == null ) {
                                    __label__ = 318;
                                    break $S_245;
                                }
                                __label__ = 309;
                                }
                            $M_318_309 : for(;;) switch (__label__) {
                                case 318 :
                                // NORMAL
                                    $S_318 : {
                                    // NORMAL
                                        var var64 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2abfae0f
                                        thisRef.m_contactList = var64;
                                        var var66 = local_12_REFERENCE.m_nodeA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5e07f68c
                                        var var67 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2abfae0f
                                        var66.contact = var67;
                                        var var69 = local_12_REFERENCE.m_nodeA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2d79a3fb
                                        var var70 = local_10_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3c033f86
                                        var69.other = var70;
                                        var var72 = local_12_REFERENCE.m_nodeA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2684aba8
                                        var72.prev = null;
                                        var var74 = local_12_REFERENCE.m_nodeA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@34679229
                                        var var76 = local_9_REFERENCE.m_contactList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5535a1bf
                                        var74.next = var76;
                                        var var78 = local_9_REFERENCE.m_contactList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@35b3b699
                                        if (var78 == null ) {
                                            __label__ = 387;
                                            break $S_318;
                                        }
                                        __label__ = 374;
                                        }
                                    $M_374_387 : for(;;) switch (__label__) {
                                        case 374 :
                                        // NORMAL
                                            var var80 = local_9_REFERENCE.m_contactList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@36e9926c
                                            var var82 = local_12_REFERENCE.m_nodeA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3e97b842
                                            var80.prev = var82;
                                            __label__ = 387;
                                            continue $M_374_387;
                                        case 387 :
                                        // NORMAL
                                            $S_387 : {
                                            // NORMAL
                                                var var83 = local_9_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4f3e3c79
                                                var var85 = local_12_REFERENCE.m_nodeA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4657ce76
                                                var83.m_contactList = var85;
                                                var var87 = local_12_REFERENCE.m_nodeB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6e78bf5b
                                                var var88 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2abfae0f
                                                var87.contact = var88;
                                                var var90 = local_12_REFERENCE.m_nodeB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@14783a0a
                                                var var91 = local_9_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4f3e3c79
                                                var90.other = var91;
                                                var var93 = local_12_REFERENCE.m_nodeB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@172ec56f
                                                var93.prev = null;
                                                var var95 = local_12_REFERENCE.m_nodeB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6ff29d82
                                                var var97 = local_10_REFERENCE.m_contactList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@44db6540
                                                var95.next = var97;
                                                var var99 = local_10_REFERENCE.m_contactList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@11a6afbb
                                                if (var99 == null ) {
                                                    __label__ = 460;
                                                    break $S_387;
                                                }
                                                __label__ = 447;
                                                }
                                            $M_460_447 : for(;;) switch (__label__) {
                                                case 447 :
                                                // NORMAL
                                                    var var101 = local_10_REFERENCE.m_contactList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@70c2055d
                                                    var var103 = local_12_REFERENCE.m_nodeB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@ba7884a
                                                    var101.prev = var103;
                                                    __label__ = 460;
                                                    continue $M_460_447;
                                                case 460 :
                                                // NORMAL
                                                    $S_460 : {
                                                    // NORMAL
                                                        var var104 = local_10_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3c033f86
                                                        var var106 = local_12_REFERENCE.m_nodeB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@14c90d1b
                                                        var104.m_contactList = var106;
                                                        var var108 = local_5_REFERENCE.BOOLEANisSensor(local_5_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                                        if ((var108 != 0)) {
                                                            __label__ = 498;
                                                            break $S_460;
                                                        }
                                                        __label__ = 478;
                                                        }
                                                    $M_498_478 : for(;;) switch (__label__) {
                                                        case 478 :
                                                        // NORMAL
                                                            $S_478 : {
                                                            // NORMAL
                                                                var var110 = local_6_REFERENCE.BOOLEANisSensor(local_6_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                                                if ((var110 != 0)) {
                                                                    __label__ = 498;
                                                                    continue $M_498_478;
                                                                }
                                                                }
                                                            local_9_REFERENCE.VOIDsetAwakeBOOLEAN(local_9_REFERENCE,1);
                                                            local_10_REFERENCE.VOIDsetAwakeBOOLEAN(local_10_REFERENCE,1);
                                                            __label__ = 498;
                                                            continue $M_498_478;
                                                        case 498 :
                                                        // NORMAL
                                                            var var114 = (thisRef.m_contactCount + 1); // type is INT value type is INT
                                                            thisRef.m_contactCount = var114;
                                                            return;
                                                    }
                                            }
                                    }
                                case 309 :
                                // NORMAL
                                    var var62 = thisRef.m_contactList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@30b6a34e
                                    var var63 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2abfae0f
                                    var62.m_prev = var63;
                                    __label__ = 318;
                                    continue $M_318_309;
                            }
                    }
            }
        }
    },

    classInitCheck : function() {
        if (!ojdContactManager.__initialized) {
            ojdContactManager.__initialized = true;
            var thePrototype = ojdContactManager.Create.prototype;
            thePrototype.instanceOf = ojdContactManager.instanceOf;
            thePrototype.ClassgetClass = ojdContactManager.ClassgetClass;
            thePrototype.VOIDaddPairjlObjectjlObject = ojdContactManager.VOIDaddPairjlObjectjlObject;
            thePrototype.VOIDdestroyojdcContact = ojdContactManager.VOIDdestroyojdcContact;
            thePrototype.VOIDcollide = ojdContactManager.VOIDcollide;
            thePrototype.VOIDfindNewContacts = ojdContactManager.VOIDfindNewContacts;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            ojcPairCallback.classInitCheck();
        }
    },

};

var ojcPairCallback = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 116,
    __implementedTypes : [116,1],


    classInitCheck : function() {
        if (!ojcPairCallback.__initialized) {
            ojcPairCallback.__initialized = true;
            jlObject.classInitCheck();
        }
    },

};

var ojdcContact = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 117,
    __implementedTypes : [117,1],

    instanceOf : function(aType) {
        return ojdcContact.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdcContact;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDflagForFiltering : function(thisRef) {
        var __label__ = null;
        var var1 = (thisRef.m_flags | 8); // type is INT value type is INT
        thisRef.m_flags = var1;
        return;
    },

    ojdFixturegetFixtureA : function(thisRef) {
        var __label__ = null;
        return thisRef.m_fixtureA;
    },

    ojdFixturegetFixtureB : function(thisRef) {
        var __label__ = null;
        return thisRef.m_fixtureB;
    },

    INTgetChildIndexA : function(thisRef) {
        var __label__ = null;
        return thisRef.m_indexA;
    },

    INTgetChildIndexB : function(thisRef) {
        var __label__ = null;
        return thisRef.m_indexB;
    },

    ojdcContactgetNext : function(thisRef) {
        var __label__ = null;
        return thisRef.m_next;
    },

    BOOLEANisTouching : function(thisRef) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var1 = (thisRef.m_flags & 2); // type is INT value type is INT
            if ((var1 != 2)) {
                __label__ = 14;
                break $S_0;
            }
            __label__ = 10;
            }
        for(;;) switch (__label__) {
            case 14 :
            // NORMAL
                var var2 = 0; // type is INT value type is INT
                return var2;
            case 10 :
            // NORMAL
                var var2 = 1; // type is INT value type is INT
                return var2;
        }
    },

    VOIDupdateojcContactListener : function(thisRef,listener) {
        var local_6_INT = null; // type is INT # of inits = 2
        var local_10_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_2_INT = null; // type is INT # of inits = 3
        var local_11_INT = null; // type is INT # of inits = 4
        var local_12_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_8_REFERENCE = null; // type is REFERENCE # of inits = 2
        var var8 = null; // type is INT # of inits = 2
        var local_9_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_7_REFERENCE = null; // type is REFERENCE # of inits = 2
        var var71 = null; // type is INT # of inits = 2
        var local_13_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_14_INT = null; // type is INT # of inits = 3
        var local_5_BOOLEAN = null; // type is BOOLEAN # of inits = 1
        var local_3_INT = null; // type is INT # of inits = 2
        var local_15_REFERENCE = null; // type is REFERENCE # of inits = 1
        var var42 = null; // type is INT # of inits = 2
        var var21 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            thisRef.oldManifold.VOIDsetojcManifold(thisRef.oldManifold,thisRef.m_manifold);
            var var3 = (thisRef.m_flags | 4); // type is INT value type is INT
            thisRef.m_flags = var3;
            local_2_INT = 0; // type is INT value type is INT
            var var7 = (thisRef.m_flags & 2); // type is INT value type is INT
            if ((var7 != 2)) {
                __label__ = 37;
                break $S_0;
            }
            __label__ = 33;
            }
        $M_37_33 : for(;;) switch (__label__) {
            case 37 :
            // NORMAL
                var8 = 0; // type is INT value type is INT
                break $M_37_33;
            case 33 :
            // NORMAL
                var8 = 1; // type is INT value type is INT
                break $M_37_33;
        }
        $S_38 : {
        // NORMAL
            local_3_INT = var8; // type is INT value type is INT
            var var12 = thisRef.m_fixtureA.BOOLEANisSensor(thisRef.m_fixtureA); // type is BOOLEAN value type is BOOLEAN
            var local_4_BOOLEAN = var12; // type is BOOLEAN value type is BOOLEAN
            var var16 = thisRef.m_fixtureB.BOOLEANisSensor(thisRef.m_fixtureB); // type is BOOLEAN value type is BOOLEAN
            local_5_BOOLEAN = var16; // type is BOOLEAN value type is BOOLEAN
            var var19 = local_4_BOOLEAN; // type is BOOLEAN value type is BOOLEAN
            if ((var19 != 0)) {
                __label__ = 67;
                break $S_38;
            }
            __label__ = 62;
            }
        $M_62_67 : for(;;) switch (__label__) {
            case 62 :
            // NORMAL
                $S_62 : {
                // NORMAL
                    var var20 = local_5_BOOLEAN; // type is BOOLEAN value type is BOOLEAN
                    if ((var20 == 0)) {
                        break $S_62;
                    }
                    __label__ = 67;
                    continue $M_62_67;
                    }
                var21 = 0; // type is INT value type is INT
                break $M_62_67;
            case 67 :
            // NORMAL
                var21 = 1; // type is INT value type is INT
                break $M_62_67;
        }
        $S_72 : {
        // NORMAL
            local_6_INT = var21; // type is INT value type is INT
            var var25 = thisRef.m_fixtureA.ojdBodygetBody(thisRef.m_fixtureA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@47af3b63
            local_7_REFERENCE = var25; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@38a85b1d
            var var28 = thisRef.m_fixtureB.ojdBodygetBody(thisRef.m_fixtureB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@27208315
            local_8_REFERENCE = var28; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@216e7e9a
            var var31 = local_7_REFERENCE.ojcTransformgetTransform(local_7_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@153007fc
            local_9_REFERENCE = var31; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4bd5e62c
            var var34 = local_8_REFERENCE.ojcTransformgetTransform(local_8_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@64973017
            local_10_REFERENCE = var34; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3e1ad327
            var var36 = local_6_INT; // type is INT value type is INT
            if ((var36 == 0)) {
                __label__ = 169;
                break $S_72;
            }
            __label__ = 111;
            }
        $M_169_111 : for(;;) switch (__label__) {
            case 111 :
            // NORMAL
                var var54 = thisRef.m_fixtureA.ojcsShapegetShape(thisRef.m_fixtureA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5add7bc5
                var local_11_REFERENCE = var54; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@794673a0
                var var57 = thisRef.m_fixtureB.ojcsShapegetShape(thisRef.m_fixtureB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6cdc9493
                local_12_REFERENCE = var57; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@16d83bec
                var var60 = thisRef.pool.ojcCollisiongetCollision(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@31961697
                var var67 = var60.BOOLEANtestOverlapojcsShapeINTojcsShapeINTojcTransformojcTransform(var60,local_11_REFERENCE,thisRef.m_indexA,local_12_REFERENCE,thisRef.m_indexB,local_9_REFERENCE,local_10_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                var local_2_BOOLEAN = var67; // type is BOOLEAN value type is BOOLEAN
                var var70 = thisRef.m_manifold; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@a45033
                var70.pointCount = 0;
                var71 = local_2_BOOLEAN; // type is INT value type is BOOLEAN
                break $M_169_111;
            case 169 :
            // NORMAL
                $S_169 : {
                // NORMAL
                    thisRef.VOIDevaluateojcManifoldojcTransformojcTransform(thisRef,thisRef.m_manifold,local_9_REFERENCE,local_10_REFERENCE);
                    var var41 = thisRef.m_manifold.pointCount; // type is INT value type is INT
                    if ((var41 <= 0)) {
                        __label__ = 195;
                        break $S_169;
                    }
                    __label__ = 191;
                    }
                $M_191_195 : for(;;) switch (__label__) {
                    case 191 :
                    // NORMAL
                        var42 = 1; // type is INT value type is INT
                        break $M_191_195;
                    case 195 :
                    // NORMAL
                        var42 = 0; // type is INT value type is INT
                        break $M_191_195;
                }
                $S_196 : {
                // NORMAL
                    local_2_INT = var42; // type is INT value type is INT
                    local_11_INT = 0; // type is INT value type is INT
                    __label__ = 200;
                    }
                $L_200 : for (;;) {
                    $S_200 : {
                    // NORMAL
                        var var46 = local_11_INT; // type is INT value type is INT
                        var var48 = thisRef.m_manifold.pointCount; // type is INT value type is INT
                        if ((var46 >= var48)) {
                            __label__ = 318;
                            break $S_200;
                        }
                        __label__ = 212;
                        }
                    for(;;) switch (__label__) {
                        case 318 :
                        // NORMAL
                            $S_318 : {
                            // NORMAL
                                var var49 = local_2_INT; // type is INT value type is INT
                                var var50 = local_3_INT; // type is INT value type is INT
                                if ((var49 == var50)) {
                                    var71 = local_2_INT; // type is INT value type is INT
                                    break $M_169_111;
                                }
                                }
                            local_7_REFERENCE.VOIDsetAwakeBOOLEAN(local_7_REFERENCE,1);
                            local_8_REFERENCE.VOIDsetAwakeBOOLEAN(local_8_REFERENCE,1);
                            var71 = local_2_INT; // type is INT value type is INT
                            break $M_169_111;
                        case 212 :
                        // NORMAL
                            $S_212 : {
                            // NORMAL
                                var var87 = thisRef.m_manifold.points.data[local_11_INT]; // type is REFERENCE value type is REFERENCE
                                local_12_REFERENCE = var87; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@72584b9d
                                var var88 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@16d83bec
                                var88.normalImpulse = 0.0;
                                var var89 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@16d83bec
                                var89.tangentImpulse = 0.0;
                                local_13_REFERENCE = local_12_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4a35e8f4
                                local_14_INT = 0; // type is INT value type is INT
                                __label__ = 246;
                                }
                            $L_246 : for (;;) {
                                $S_246 : {
                                // NORMAL
                                    var var95 = local_14_INT; // type is INT value type is INT
                                    var var97 = thisRef.oldManifold.pointCount; // type is INT value type is INT
                                    if ((var95 >= var97)) {
                                        __label__ = 312;
                                        break $S_246;
                                    }
                                    __label__ = 258;
                                    }
                                $M_258_312 : for(;;) switch (__label__) {
                                    case 258 :
                                    // NORMAL
                                        $S_258 : {
                                        // NORMAL
                                            var var101 = thisRef.oldManifold.points.data[local_14_INT]; // type is REFERENCE value type is REFERENCE
                                            local_15_REFERENCE = var101; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@98d843d
                                            var var106 = local_15_REFERENCE.id.BOOLEANisEqualojcContactID(local_15_REFERENCE.id,local_13_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                            if ((var106 == 0)) {
                                                __label__ = 306;
                                                break $S_258;
                                            }
                                            __label__ = 283;
                                            }
                                        for(;;) switch (__label__) {
                                            case 283 :
                                            // NORMAL
                                                var var107 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@16d83bec
                                                var var109 = local_15_REFERENCE.normalImpulse; // type is FLOAT value type is FLOAT
                                                var107.normalImpulse = var109;
                                                var var110 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@16d83bec
                                                var var112 = local_15_REFERENCE.tangentImpulse; // type is FLOAT value type is FLOAT
                                                var110.tangentImpulse = var112;
                                                __label__ = 312;
                                                continue $M_258_312;
                                            case 306 :
                                            // NORMAL
                                                local_14_INT = (local_14_INT + 1); // type is INT value type is INT
                                                __label__ = 246;
                                                continue $L_246;
                                        }
                                    case 312 :
                                    // NORMAL
                                        local_11_INT = (local_11_INT + 1); // type is INT value type is INT
                                        __label__ = 200;
                                        continue $L_200;
                                }
                            }
                    }
                }
        }
        $S_335 : {
        // NORMAL
            var var72 = var71; // type is INT value type is INT
            if ((var72 == 0)) {
                __label__ = 352;
                break $S_335;
            }
            __label__ = 339;
            }
        $M_352_339 : for(;;) switch (__label__) {
            case 339 :
            // NORMAL
                var var76 = (thisRef.m_flags | 2); // type is INT value type is INT
                thisRef.m_flags = var76;
                break $M_352_339;
            case 352 :
            // NORMAL
                var var74 = (thisRef.m_flags & -3); // type is INT value type is INT
                thisRef.m_flags = var74;
                break $M_352_339;
        }
        $S_363 : {
        // NORMAL
            if (listener != null ) {
                break $S_363;
            }
            return;
            }
        $S_368 : {
        // NORMAL
            var var77 = local_3_INT; // type is INT value type is INT
            if ((var77 != 0)) {
                __label__ = 384;
                break $S_368;
            }
            __label__ = 372;
            }
        $M_384_372 : for(;;) switch (__label__) {
            case 384 :
            // NORMAL
                $S_384 : {
                // NORMAL
                    var var79 = local_3_INT; // type is INT value type is INT
                    if ((var79 != 1)) {
                        __label__ = 400;
                        break $S_384;
                    }
                    __label__ = 389;
                    }
                $M_400_389 : for(;;) switch (__label__) {
                    case 389 :
                    // NORMAL
                        $S_389 : {
                        // NORMAL
                            var var80 = var71; // type is INT value type is INT
                            if ((var80 != 0)) {
                                __label__ = 400;
                                continue $M_400_389;
                            }
                            }
                        listener.VOIDendContactojdcContact(listener,thisRef);
                        __label__ = 400;
                        continue $M_400_389;
                    case 400 :
                    // NORMAL
                        $S_400 : {
                        // NORMAL
                            var var81 = local_6_INT; // type is INT value type is INT
                            if ((var81 != 0)) {
                                return;
                            }
                            }
                        $S_405 : {
                        // NORMAL
                            var var82 = var71; // type is INT value type is INT
                            if ((var82 == 0)) {
                                return;
                            }
                            }
                        listener.VOIDpreSolveojdcContactojcManifold(listener,thisRef,thisRef.oldManifold);
                        return;
                }
            case 372 :
            // NORMAL
                $S_372 : {
                // NORMAL
                    var var78 = var71; // type is INT value type is INT
                    if ((var78 != 1)) {
                        __label__ = 384;
                        continue $M_384_372;
                    }
                    }
                listener.VOIDbeginContactojdcContact(listener,thisRef);
                __label__ = 384;
                continue $M_384_372;
        }
    },

    BOOLEANisEnabled : function(thisRef) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var1 = (thisRef.m_flags & 4); // type is INT value type is INT
            if ((var1 != 4)) {
                __label__ = 14;
                break $S_0;
            }
            __label__ = 10;
            }
        for(;;) switch (__label__) {
            case 14 :
            // NORMAL
                var var2 = 0; // type is INT value type is INT
                return var2;
            case 10 :
            // NORMAL
                var var2 = 1; // type is INT value type is INT
                return var2;
        }
    },

    ojcManifoldgetManifold : function(thisRef) {
        var __label__ = null;
        return thisRef.m_manifold;
    },

    VOIDsetEnabledBOOLEAN : function(thisRef,flag) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((flag == 0)) {
                __label__ = 17;
                break $S_0;
            }
            __label__ = 4;
            }
        for(;;) switch (__label__) {
            case 17 :
            // NORMAL
                var var3 = (thisRef.m_flags & -5); // type is INT value type is INT
                thisRef.m_flags = var3;
                return;
            case 4 :
            // NORMAL
                var var1 = (thisRef.m_flags | 4); // type is INT value type is INT
                thisRef.m_flags = var1;
                return;
        }
    },

    VOIDinitojpIWorldPool : function(thisRef,argPool) {
        var __label__ = null;
        thisRef.m_nodeA = null;
        thisRef.m_nodeB = null;
        var var0 = new ojcManifold.Create(); // type is REFERENCE value type is REFERENCE
        ojcManifold.VOIDinit(var0);
        thisRef.oldManifold = var0;
        thisRef.m_fixtureA = null;
        thisRef.m_fixtureB = null;
        var var1 = new ojdcContactEdge.Create(); // type is REFERENCE value type is REFERENCE
        ojdcContactEdge.VOIDinit(var1);
        thisRef.m_nodeA = var1;
        var var2 = new ojdcContactEdge.Create(); // type is REFERENCE value type is REFERENCE
        ojdcContactEdge.VOIDinit(var2);
        thisRef.m_nodeB = var2;
        var var3 = new ojcManifold.Create(); // type is REFERENCE value type is REFERENCE
        ojcManifold.VOIDinit(var3);
        thisRef.m_manifold = var3;
        thisRef.pool = argPool;
        return;
    },

    VOIDinitojdFixtureINTojdFixtureINT : function(thisRef,fA,indexA,fB,indexB) {
        var __label__ = null;
        thisRef.m_flags = 0;
        thisRef.m_fixtureA = fA;
        thisRef.m_fixtureB = fB;
        thisRef.m_indexA = indexA;
        thisRef.m_indexB = indexB;
        var var0 = thisRef.m_manifold; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@565481e2
        var0.pointCount = 0;
        thisRef.m_prev = null;
        thisRef.m_next = null;
        var var1 = thisRef.m_nodeA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@119402b8
        var1.contact = null;
        var var2 = thisRef.m_nodeA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@507f42f0
        var2.prev = null;
        var var3 = thisRef.m_nodeA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@27478487
        var3.next = null;
        var var4 = thisRef.m_nodeA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@556e5a1c
        var4.other = null;
        var var5 = thisRef.m_nodeB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@64de03cb
        var5.contact = null;
        var var6 = thisRef.m_nodeB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4e1cb562
        var6.prev = null;
        var var7 = thisRef.m_nodeB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@55e4639a
        var7.next = null;
        var var8 = thisRef.m_nodeB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@72fd7d80
        var8.other = null;
        thisRef.m_toiCount = 0.0;
        var var11 = ojdcContact.FLOATmixFrictionFLOATFLOAT(fA.m_friction,fB.m_friction); // type is FLOAT value type is FLOAT
        thisRef.m_friction = var11;
        var var14 = ojdcContact.FLOATmixRestitutionFLOATFLOAT(fA.m_restitution,fB.m_restitution); // type is FLOAT value type is FLOAT
        thisRef.m_restitution = var14;
        thisRef.m_tangentSpeed = 0.0;
        return;
    },

    FLOATmixFrictionFLOATFLOAT : function(friction1,friction2) {
        var __label__ = null;
        var var1 = ojcMathUtils.FLOATsqrtFLOAT((friction1 * friction2)); // type is FLOAT value type is FLOAT
        return var1;
    },

    FLOATmixRestitutionFLOATFLOAT : function(restitution1,restitution2) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((restitution1 <= restitution2)) {
                __label__ = 10;
                break $S_0;
            }
            __label__ = 6;
            }
        for(;;) switch (__label__) {
            case 10 :
            // NORMAL
                var var1 = restitution2; // type is FLOAT value type is FLOAT
                return var1;
            case 6 :
            // NORMAL
                var var1 = restitution1; // type is FLOAT value type is FLOAT
                return var1;
        }
    },

    classInitCheck : function() {
        if (!ojdcContact.__initialized) {
            ojdcContact.__initialized = true;
            jlObject.classInitCheck();
        }
    },

};

var ojcContactFilter = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 118,
    __implementedTypes : [118,1],

    Create : function() {
    },

    instanceOf : function(aType) {
        return ojcContactFilter.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcContactFilter;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    BOOLEANshouldCollideojdFixtureojdFixture : function(thisRef,fixtureA,fixtureB) {
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var var20 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = fixtureA.ojdFiltergetFilterData(fixtureA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@54657c4c
            local_3_REFERENCE = var0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@11632f33
            var var2 = fixtureB.ojdFiltergetFilterData(fixtureB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@62f7b102
            local_4_REFERENCE = var2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6fdcda68
            var var5 = local_3_REFERENCE.groupIndex; // type is INT value type is INT
            var var7 = local_4_REFERENCE.groupIndex; // type is INT value type is INT
            if ((var5 != var7)) {
                __label__ = 43;
                break $S_0;
            }
            __label__ = 23;
            }
        $M_43_23 : for(;;) switch (__label__) {
            case 43 :
            // NORMAL
                $S_43 : {
                // NORMAL
                    var var14 = (local_3_REFERENCE.maskBits & local_4_REFERENCE.categoryBits); // type is INT value type is INT
                    if ((var14 == 0)) {
                        __label__ = 73;
                        break $S_43;
                    }
                    __label__ = 56;
                    }
                $M_56_73 : for(;;) switch (__label__) {
                    case 56 :
                    // NORMAL
                        $S_56 : {
                        // NORMAL
                            var var19 = (local_3_REFERENCE.categoryBits & local_4_REFERENCE.maskBits); // type is INT value type is INT
                            if ((var19 == 0)) {
                                __label__ = 73;
                                continue $M_56_73;
                            }
                            }
                        var20 = 1; // type is INT value type is INT
                        break $M_56_73;
                    case 73 :
                    // NORMAL
                        var20 = 0; // type is INT value type is INT
                        break $M_56_73;
                }
                var local_5_INT = var20; // type is INT value type is INT
                return local_5_INT;
            case 23 :
            // NORMAL
                $S_23 : {
                // NORMAL
                    var var9 = local_3_REFERENCE.groupIndex; // type is INT value type is INT
                    if ((var9 == 0)) {
                        __label__ = 43;
                        continue $M_43_23;
                    }
                    }
                $S_30 : {
                // NORMAL
                    var var25 = local_3_REFERENCE.groupIndex; // type is INT value type is INT
                    if ((var25 <= 0)) {
                        __label__ = 41;
                        break $S_30;
                    }
                    __label__ = 37;
                    }
                for(;;) switch (__label__) {
                    case 37 :
                    // NORMAL
                        var var26 = 1; // type is INT value type is INT
                        return var26;
                    case 41 :
                    // NORMAL
                        var var26 = 0; // type is INT value type is INT
                        return var26;
                }
        }
    },

    classInitCheck : function() {
        if (!ojcContactFilter.__initialized) {
            ojcContactFilter.__initialized = true;
            var thePrototype = ojcContactFilter.Create.prototype;
            thePrototype.instanceOf = ojcContactFilter.instanceOf;
            thePrototype.ClassgetClass = ojcContactFilter.ClassgetClass;
            thePrototype.BOOLEANshouldCollideojdFixtureojdFixture = ojcContactFilter.BOOLEANshouldCollideojdFixtureojdFixture;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojcContactListener = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 119,
    __implementedTypes : [119,1],


    classInitCheck : function() {
        if (!ojcContactListener.__initialized) {
            ojcContactListener.__initialized = true;
            jlObject.classInitCheck();
        }
    },

};

var ojcbBroadPhase = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 120,
    __implementedTypes : [120,93,1],

    Create : function() {
        this.m_proxyCount = 0; // declared in org.jbox2d.collision.broadphase.BroadPhase
        this.m_pairCapacity = 0; // declared in org.jbox2d.collision.broadphase.BroadPhase
        this.m_pairCount = 0; // declared in org.jbox2d.collision.broadphase.BroadPhase
        this.m_pairBuffer = null; // declared in org.jbox2d.collision.broadphase.BroadPhase
        this.m_moveCapacity = 0; // declared in org.jbox2d.collision.broadphase.BroadPhase
        this.m_moveCount = 0; // declared in org.jbox2d.collision.broadphase.BroadPhase
        this.m_moveBuffer = null; // declared in org.jbox2d.collision.broadphase.BroadPhase
        this.m_tree = null; // declared in org.jbox2d.collision.broadphase.BroadPhase
        this.m_queryProxyId = 0; // declared in org.jbox2d.collision.broadphase.BroadPhase
    },

    instanceOf : function(aType) {
        return ojcbBroadPhase.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcbBroadPhase;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitojcbBroadPhaseStrategy : function(thisRef,strategy) {
        var local_2_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            thisRef.m_proxyCount = 0;
            thisRef.m_pairCapacity = 16;
            thisRef.m_pairCount = 0;
            var var1 = bytecoder.newArray(thisRef.m_pairCapacity,null); // type is REFERENCE value type is REFERENCE
            thisRef.m_pairBuffer = var1;
            local_2_INT = 0; // type is INT value type is INT
            __label__ = 33;
            }
        $L_33 : for (;;) {
            $S_33 : {
            // NORMAL
                var var4 = local_2_INT; // type is INT value type is INT
                var var5 = thisRef.m_pairCapacity; // type is INT value type is INT
                if ((var4 >= var5)) {
                    __label__ = 60;
                    break $S_33;
                }
                __label__ = 41;
                }
            for(;;) switch (__label__) {
                case 41 :
                // NORMAL
                    var var8 = thisRef.m_pairBuffer; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3b0ebec8
                    var var9 = local_2_INT; // type is INT value type is INT
                    var var10 = new ojcbPair.Create(); // type is REFERENCE value type is REFERENCE
                    ojcbPair.VOIDinit(var10);
                    var8.data[var9] = var10;
                    local_2_INT = (local_2_INT + 1); // type is INT value type is INT
                    __label__ = 33;
                    continue $L_33;
                case 60 :
                // NORMAL
                    thisRef.m_moveCapacity = 16;
                    thisRef.m_moveCount = 0;
                    var var7 = bytecoder.newArray(thisRef.m_moveCapacity,0); // type is REFERENCE value type is REFERENCE
                    thisRef.m_moveBuffer = var7;
                    thisRef.m_tree = strategy;
                    thisRef.m_queryProxyId = -1;
                    return;
            }
        }
    },

    INTcreateProxyojcAABBjlObject : function(thisRef,aabb,userData) {
        var __label__ = null;
        var var1 = thisRef.m_tree.INTcreateProxyojcAABBjlObject(thisRef.m_tree,aabb,userData); // type is INT value type is INT
        var local_3_INT = var1; // type is INT value type is INT
        var var5 = (thisRef.m_proxyCount + 1); // type is INT value type is INT
        thisRef.m_proxyCount = var5;
        thisRef.VOIDbufferMoveINT(thisRef,local_3_INT);
        return local_3_INT;
    },

    VOIDbufferMoveINT : function(thisRef,proxyId) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.m_moveCount; // type is INT value type is INT
            var var1 = thisRef.m_moveCapacity; // type is INT value type is INT
            if ((var0 != var1)) {
                __label__ = 48;
                break $S_0;
            }
            __label__ = 11;
            }
        $M_11_48 : for(;;) switch (__label__) {
            case 48 :
            // NORMAL
                var var12 = thisRef.m_moveBuffer; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@d4b553
                var var13 = thisRef.m_moveCount; // type is INT value type is INT
                var12.data[var13] = proxyId;
                var var15 = (thisRef.m_moveCount + 1); // type is INT value type is INT
                thisRef.m_moveCount = var15;
                return;
            case 11 :
            // NORMAL
                var local_2_REFERENCE = thisRef.m_moveBuffer; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@6cb8bb8b
                var var5 = (thisRef.m_moveCapacity * 2); // type is INT value type is INT
                thisRef.m_moveCapacity = var5;
                var var7 = bytecoder.newArray(thisRef.m_moveCapacity,0); // type is REFERENCE value type is REFERENCE
                thisRef.m_moveBuffer = var7;
                jlSystem.VOIDarraycopyjlObjectINTjlObjectINTINT(local_2_REFERENCE,0,thisRef.m_moveBuffer,0,local_2_REFERENCE.data.length);
                __label__ = 48;
                continue $M_11_48;
        }
    },

    VOIDupdatePairsojcPairCallback : function(thisRef,callback) {
        var local_2_INT = null; // type is INT # of inits = 8
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            thisRef.m_pairCount = 0;
            local_2_INT = 0; // type is INT value type is INT
            __label__ = 7;
            }
        $L_7 : for (;;) {
            $S_7 : {
            // NORMAL
                var var2 = local_2_INT; // type is INT value type is INT
                var var3 = thisRef.m_moveCount; // type is INT value type is INT
                if ((var2 >= var3)) {
                    __label__ = 67;
                    break $S_7;
                }
                __label__ = 15;
                }
            for(;;) switch (__label__) {
                case 15 :
                // NORMAL
                    $S_15 : {
                    // NORMAL
                        var var41 = thisRef.m_moveBuffer.data[local_2_INT]; // type is INT value type is INT
                        thisRef.m_queryProxyId = var41;
                        var var42 = thisRef.m_queryProxyId; // type is INT value type is INT
                        if ((var42 != -1)) {
                            __label__ = 36;
                            break $S_15;
                        }
                        __label__ = 33;
                        }
                    $M_36_33 : for(;;) switch (__label__) {
                        case 33 :
                        // NORMAL
                            break $M_36_33;
                        case 36 :
                        // NORMAL
                            var var45 = thisRef.m_tree.ojcAABBgetFatAABBINT(thisRef.m_tree,thisRef.m_queryProxyId); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2193c9a6
                            local_3_REFERENCE = var45; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6e790be6
                            thisRef.m_tree.VOIDqueryojcTreeCallbackojcAABB(thisRef.m_tree,thisRef,local_3_REFERENCE);
                            break $M_36_33;
                    }
                    local_2_INT = (local_2_INT + 1); // type is INT value type is INT
                    __label__ = 7;
                    continue $L_7;
                case 67 :
                // NORMAL
                    $S_67 : {
                    // NORMAL
                        thisRef.m_moveCount = 0;
                        juArrays.VOIDsortA1jlObjectINTINT(thisRef.m_pairBuffer,0,thisRef.m_pairCount);
                        local_2_INT = 0; // type is INT value type is INT
                        __label__ = 86;
                        }
                    $L_86 : for (;;) {
                        $S_86 : {
                        // NORMAL
                            var var7 = local_2_INT; // type is INT value type is INT
                            var var8 = thisRef.m_pairCount; // type is INT value type is INT
                            if ((var7 >= var8)) {
                                return;
                            }
                            }
                        $S_94 : {
                        // NORMAL
                            var var11 = thisRef.m_pairBuffer.data[local_2_INT]; // type is REFERENCE value type is REFERENCE
                            local_3_REFERENCE = var11; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3b7dc9cc
                            var var16 = thisRef.m_tree.jlObjectgetUserDataINT(thisRef.m_tree,local_3_REFERENCE.proxyIdA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@76c3050b
                            var local_4_REFERENCE = var16; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@427dc2ce
                            var var21 = thisRef.m_tree.jlObjectgetUserDataINT(thisRef.m_tree,local_3_REFERENCE.proxyIdB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7d1cfdde
                            var local_5_REFERENCE = var21; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@bbfc0b8
                            callback.VOIDaddPairjlObjectjlObject(callback,local_4_REFERENCE,local_5_REFERENCE);
                            local_2_INT = (local_2_INT + 1); // type is INT value type is INT
                            __label__ = 144;
                            }
                        $L_144 : for (;;) {
                            $S_144 : {
                            // NORMAL
                                var var25 = local_2_INT; // type is INT value type is INT
                                var var26 = thisRef.m_pairCount; // type is INT value type is INT
                                if ((var25 >= var26)) {
                                    __label__ = 193;
                                    break $S_144;
                                }
                                __label__ = 152;
                                }
                            $M_152_193 : for(;;) switch (__label__) {
                                case 193 :
                                // NORMAL
                                    __label__ = 86;
                                    continue $L_86;
                                case 152 :
                                // NORMAL
                                    $S_152 : {
                                    // NORMAL
                                        var var29 = thisRef.m_pairBuffer.data[local_2_INT]; // type is REFERENCE value type is REFERENCE
                                        local_6_REFERENCE = var29; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1e836631
                                        var var32 = local_6_REFERENCE.proxyIdA; // type is INT value type is INT
                                        var var34 = local_3_REFERENCE.proxyIdA; // type is INT value type is INT
                                        if ((var32 != var34)) {
                                            __label__ = 193;
                                            continue $M_152_193;
                                        }
                                        }
                                    $S_172 : {
                                    // NORMAL
                                        var var36 = local_6_REFERENCE.proxyIdB; // type is INT value type is INT
                                        var var38 = local_3_REFERENCE.proxyIdB; // type is INT value type is INT
                                        if ((var36 == var38)) {
                                            __label__ = 187;
                                            break $S_172;
                                        }
                                        __label__ = 184;
                                        }
                                    for(;;) switch (__label__) {
                                        case 187 :
                                        // NORMAL
                                            local_2_INT = (local_2_INT + 1); // type is INT value type is INT
                                            __label__ = 144;
                                            continue $L_144;
                                        case 184 :
                                        // NORMAL
                                            __label__ = 193;
                                            continue $M_152_193;
                                    }
                            }
                        }
                    }
            }
        }
    },

    BOOLEANtestOverlapINTINT : function(thisRef,proxyIdA,proxyIdB) {
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var1 = thisRef.m_tree.ojcAABBgetFatAABBINT(thisRef.m_tree,proxyIdA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5a8431d9
            local_3_REFERENCE = var1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@786be7af
            var var4 = thisRef.m_tree.ojcAABBgetFatAABBINT(thisRef.m_tree,proxyIdB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@335f77e0
            local_4_REFERENCE = var4; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@357908a4
            var var12 = (local_4_REFERENCE.lowerBound.x - local_3_REFERENCE.upperBound.x); // type is FLOAT value type is FLOAT
            if ((var12 > 0.0)) {
                return 0;
            }
            }
        $S_44 : {
        // NORMAL
            var var20 = (local_4_REFERENCE.lowerBound.y - local_3_REFERENCE.upperBound.y); // type is FLOAT value type is FLOAT
            if ((var20 <= 0.0)) {
                break $S_44;
            }
            return 0;
            }
        $S_67 : {
        // NORMAL
            var var28 = (local_3_REFERENCE.lowerBound.x - local_4_REFERENCE.upperBound.x); // type is FLOAT value type is FLOAT
            if ((var28 > 0.0)) {
                return 0;
            }
            }
        var var36 = (local_3_REFERENCE.lowerBound.y - local_4_REFERENCE.upperBound.y); // type is FLOAT value type is FLOAT
        if ((var36 <= 0.0)) {
            return 1;
        }
        return 0;
    },

    VOIDmoveProxyINTojcAABBojcVec2 : function(thisRef,proxyId,aabb,displacement) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var1 = thisRef.m_tree.BOOLEANmoveProxyINTojcAABBojcVec2(thisRef.m_tree,proxyId,aabb,displacement); // type is BOOLEAN value type is BOOLEAN
            var local_4_BOOLEAN = var1; // type is BOOLEAN value type is BOOLEAN
            var var4 = local_4_BOOLEAN; // type is BOOLEAN value type is BOOLEAN
            if ((var4 == 0)) {
                return;
            }
            }
        thisRef.VOIDbufferMoveINT(thisRef,proxyId);
        return;
    },

    jlObjectgetUserDataINT : function(thisRef,proxyId) {
        var __label__ = null;
        var var1 = thisRef.m_tree.jlObjectgetUserDataINT(thisRef.m_tree,proxyId); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3312e510
        return var1;
    },

    BOOLEANtreeCallbackINT : function(thisRef,proxyId) {
        var local_3_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.m_queryProxyId; // type is INT value type is INT
            if ((proxyId != var0)) {
                break $S_0;
            }
            return 1;
            }
        $S_10 : {
        // NORMAL
            var var1 = thisRef.m_pairCount; // type is INT value type is INT
            var var2 = thisRef.m_pairCapacity; // type is INT value type is INT
            if ((var1 != var2)) {
                __label__ = 89;
                break $S_10;
            }
            __label__ = 21;
            }
        $M_89_21 : for(;;) switch (__label__) {
            case 21 :
            // NORMAL
                $S_21 : {
                // NORMAL
                    var local_2_REFERENCE = thisRef.m_pairBuffer; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@4415301a
                    var var6 = (thisRef.m_pairCapacity * 2); // type is INT value type is INT
                    thisRef.m_pairCapacity = var6;
                    var var8 = bytecoder.newArray(thisRef.m_pairCapacity,null); // type is REFERENCE value type is REFERENCE
                    thisRef.m_pairBuffer = var8;
                    jlSystem.VOIDarraycopyjlObjectINTjlObjectINTINT(local_2_REFERENCE,0,thisRef.m_pairBuffer,0,local_2_REFERENCE.data.length);
                    local_3_INT = local_2_REFERENCE.data.length; // type is INT value type is INT
                    __label__ = 62;
                    }
                $L_62 : for (;;) {
                    $S_62 : {
                    // NORMAL
                        var var17 = local_3_INT; // type is INT value type is INT
                        var var18 = thisRef.m_pairCapacity; // type is INT value type is INT
                        if ((var17 >= var18)) {
                            __label__ = 89;
                            continue $M_89_21;
                        }
                        }
                    var var19 = thisRef.m_pairBuffer; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@23f6739a
                    var var20 = local_3_INT; // type is INT value type is INT
                    var var21 = new ojcbPair.Create(); // type is REFERENCE value type is REFERENCE
                    ojcbPair.VOIDinit(var21);
                    var19.data[var20] = var21;
                    local_3_INT = (local_3_INT + 1); // type is INT value type is INT
                    __label__ = 62;
                    continue $L_62;
                }
            case 89 :
            // NORMAL
                $S_89 : {
                // NORMAL
                    var var22 = thisRef.m_queryProxyId; // type is INT value type is INT
                    if ((proxyId >= var22)) {
                        __label__ = 129;
                        break $S_89;
                    }
                    __label__ = 97;
                    }
                $M_129_97 : for(;;) switch (__label__) {
                    case 129 :
                    // NORMAL
                        var var25 = thisRef.m_pairBuffer.data[thisRef.m_pairCount]; // type is REFERENCE value type is REFERENCE
                        var var26 = thisRef.m_queryProxyId; // type is INT value type is INT
                        var25.proxyIdA = var26;
                        var var29 = thisRef.m_pairBuffer.data[thisRef.m_pairCount]; // type is REFERENCE value type is REFERENCE
                        var29.proxyIdB = proxyId;
                        break $M_129_97;
                    case 97 :
                    // NORMAL
                        var var32 = thisRef.m_pairBuffer.data[thisRef.m_pairCount]; // type is REFERENCE value type is REFERENCE
                        var32.proxyIdA = proxyId;
                        var var35 = thisRef.m_pairBuffer.data[thisRef.m_pairCount]; // type is REFERENCE value type is REFERENCE
                        var var36 = thisRef.m_queryProxyId; // type is INT value type is INT
                        var35.proxyIdB = var36;
                        break $M_129_97;
                }
                var var38 = (thisRef.m_pairCount + 1); // type is INT value type is INT
                thisRef.m_pairCount = var38;
                return 1;
        }
    },

    classInitCheck : function() {
        if (!ojcbBroadPhase.__initialized) {
            ojcbBroadPhase.__initialized = true;
            var thePrototype = ojcbBroadPhase.Create.prototype;
            thePrototype.instanceOf = ojcbBroadPhase.instanceOf;
            thePrototype.ClassgetClass = ojcbBroadPhase.ClassgetClass;
            thePrototype.BOOLEANtreeCallbackINT = ojcbBroadPhase.BOOLEANtreeCallbackINT;
            thePrototype.jlObjectgetUserDataINT = ojcbBroadPhase.jlObjectgetUserDataINT;
            thePrototype.VOIDmoveProxyINTojcAABBojcVec2 = ojcbBroadPhase.VOIDmoveProxyINTojcAABBojcVec2;
            thePrototype.BOOLEANtestOverlapINTINT = ojcbBroadPhase.BOOLEANtestOverlapINTINT;
            thePrototype.VOIDupdatePairsojcPairCallback = ojcbBroadPhase.VOIDupdatePairsojcPairCallback;
            thePrototype.VOIDbufferMoveINT = ojcbBroadPhase.VOIDbufferMoveINT;
            thePrototype.INTcreateProxyojcAABBjlObject = ojcbBroadPhase.INTcreateProxyojcAABBjlObject;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            ojcTreeCallback.classInitCheck();
        }
    },

};

var ojcbPair = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 121,
    __implementedTypes : [121,1,11],

    Create : function() {
        this.proxyIdA = 0; // declared in org.jbox2d.collision.broadphase.Pair
        this.proxyIdB = 0; // declared in org.jbox2d.collision.broadphase.Pair
    },

    instanceOf : function(aType) {
        return ojcbPair.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcbPair;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    INTcompareTojlObject : function(thisRef,x0) {
        var __label__ = null;
        var var0 = thisRef.INTcompareToojcbPair(thisRef,x0); // type is INT value type is INT
        return var0;
    },

    INTcompareToojcbPair : function(thisRef,pair2) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.proxyIdA; // type is INT value type is INT
            var var1 = pair2.proxyIdA; // type is INT value type is INT
            if ((var0 >= var1)) {
                break $S_0;
            }
            return -1;
            }
        $S_13 : {
        // NORMAL
            var var2 = thisRef.proxyIdA; // type is INT value type is INT
            var var3 = pair2.proxyIdA; // type is INT value type is INT
            if ((var2 != var3)) {
                return 1;
            }
            }
        $S_24 : {
        // NORMAL
            var var4 = thisRef.proxyIdB; // type is INT value type is INT
            var var5 = pair2.proxyIdB; // type is INT value type is INT
            if ((var4 >= var5)) {
                __label__ = 39;
                break $S_24;
            }
            __label__ = 35;
            }
        for(;;) switch (__label__) {
            case 39 :
            // NORMAL
                $S_39 : {
                // NORMAL
                    var var6 = thisRef.proxyIdB; // type is INT value type is INT
                    var var7 = pair2.proxyIdB; // type is INT value type is INT
                    if ((var6 != var7)) {
                        __label__ = 54;
                        break $S_39;
                    }
                    __label__ = 50;
                    }
                for(;;) switch (__label__) {
                    case 50 :
                    // NORMAL
                        var var8 = 0; // type is INT value type is INT
                        return var8;
                    case 54 :
                    // NORMAL
                        var var8 = 1; // type is INT value type is INT
                        return var8;
                }
            case 35 :
            // NORMAL
                var var8 = -1; // type is INT value type is INT
                return var8;
        }
    },

    classInitCheck : function() {
        if (!ojcbPair.__initialized) {
            ojcbPair.__initialized = true;
            var thePrototype = ojcbPair.Create.prototype;
            thePrototype.instanceOf = ojcbPair.instanceOf;
            thePrototype.ClassgetClass = ojcbPair.ClassgetClass;
            thePrototype.INTcompareToojcbPair = ojcbPair.INTcompareToojcbPair;
            thePrototype.INTcompareTojlObject = ojcbPair.INTcompareTojlObject;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            jlComparable.classInitCheck();
        }
    },

};

var ojdBodyDef = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 122,
    __implementedTypes : [122,1],

    Create : function() {
        this.userData = null; // declared in org.jbox2d.dynamics.BodyDef
        this.position = null; // declared in org.jbox2d.dynamics.BodyDef
        this.angle = 0; // declared in org.jbox2d.dynamics.BodyDef
        this.linearVelocity = null; // declared in org.jbox2d.dynamics.BodyDef
        this.angularVelocity = 0; // declared in org.jbox2d.dynamics.BodyDef
        this.linearDamping = 0; // declared in org.jbox2d.dynamics.BodyDef
        this.angularDamping = 0; // declared in org.jbox2d.dynamics.BodyDef
        this.allowSleep = false; // declared in org.jbox2d.dynamics.BodyDef
        this.awake = false; // declared in org.jbox2d.dynamics.BodyDef
        this.fixedRotation = false; // declared in org.jbox2d.dynamics.BodyDef
        this.bullet = false; // declared in org.jbox2d.dynamics.BodyDef
        this.type = null; // declared in org.jbox2d.dynamics.BodyDef
        this.active = false; // declared in org.jbox2d.dynamics.BodyDef
        this.gravityScale = 0; // declared in org.jbox2d.dynamics.BodyDef
    },

    instanceOf : function(aType) {
        return ojdBodyDef.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdBodyDef;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        thisRef.userData = null;
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var0);
        thisRef.position = var0;
        thisRef.angle = 0.0;
        var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var1);
        thisRef.linearVelocity = var1;
        thisRef.angularVelocity = 0.0;
        thisRef.linearDamping = 0.0;
        thisRef.angularDamping = 0.0;
        thisRef.allowSleep = 1;
        thisRef.awake = 1;
        thisRef.fixedRotation = 0;
        thisRef.bullet = 0;
        var var2 = ojdBodyType.STATIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1fb15a5c
        thisRef.type = var2;
        thisRef.active = 1;
        thisRef.gravityScale = 1.0;
        return;
    },

    classInitCheck : function() {
        if (!ojdBodyDef.__initialized) {
            ojdBodyDef.__initialized = true;
            var thePrototype = ojdBodyDef.Create.prototype;
            thePrototype.instanceOf = ojdBodyDef.instanceOf;
            thePrototype.ClassgetClass = ojdBodyDef.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojdBodyType = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 123,
    __implementedTypes : [123,56,2,1,11],
    STATIC : null, // declared in org.jbox2d.dynamics.BodyType
    KINEMATIC : null, // declared in org.jbox2d.dynamics.BodyType
    DYNAMIC : null, // declared in org.jbox2d.dynamics.BodyType
    $VALUES : null, // declared in org.jbox2d.dynamics.BodyType

    Create : function() {
        this.name = null; // declared in java.lang.Enum
        this.ordinalNumber = 0; // declared in java.lang.Enum
    },

    instanceOf : function(aType) {
        return ojdBodyType.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdBodyType;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var __label__ = null;
        var var0 = new ojdBodyType.Create(); // type is REFERENCE value type is REFERENCE
        ojdBodyType.VOIDinitjlStringINT(var0,bytecoder.stringpool[38],0);
        ojdBodyType.STATIC = var0;
        var var1 = new ojdBodyType.Create(); // type is REFERENCE value type is REFERENCE
        ojdBodyType.VOIDinitjlStringINT(var1,bytecoder.stringpool[39],1);
        ojdBodyType.KINEMATIC = var1;
        var var2 = new ojdBodyType.Create(); // type is REFERENCE value type is REFERENCE
        ojdBodyType.VOIDinitjlStringINT(var2,bytecoder.stringpool[40],2);
        ojdBodyType.DYNAMIC = var2;
        var var3 = bytecoder.newArray(3,null); // type is REFERENCE value type is REFERENCE
        var var4 = ojdBodyType.STATIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7adbe8c4
        var3.data[0] = var4;
        var var5 = ojdBodyType.KINEMATIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@78424f5a
        var3.data[1] = var5;
        var var6 = ojdBodyType.DYNAMIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7c260378
        var3.data[2] = var6;
        ojdBodyType.$VALUES = var3;
        return;
    },

    VOIDinitjlStringINT : function(thisRef,p1,p2) {
        var __label__ = null;
        jlEnum.VOIDinitjlStringINT(thisRef,p1,p2);
        return;
    },

    classInitCheck : function() {
        if (!ojdBodyType.__initialized) {
            ojdBodyType.__initialized = true;
            var thePrototype = ojdBodyType.Create.prototype;
            thePrototype.instanceOf = ojdBodyType.instanceOf;
            thePrototype.ClassgetClass = ojdBodyType.ClassgetClass;
            thePrototype.INTordinal = jlEnum.INTordinal;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlEnum.classInitCheck();
            jiSerializable.classInitCheck();
            jlObject.classInitCheck();
            jlComparable.classInitCheck();
            jlrArray.classInitCheck();
            ojdBodyType.VOIDclinit();
        }
    },

};

var jlAssertionError = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 124,
    __implementedTypes : [124,61,2,60,1],

    Create : function() {
    },

    instanceOf : function(aType) {
        return jlAssertionError.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jlAssertionError;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        jlError.VOIDinit(thisRef);
        return;
    },

    VOIDinitjlObject : function(thisRef,detailMessage) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = jlString.jlStringvalueOfjlObject(detailMessage); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1f2543db
            jlAssertionError.VOIDinitjlString(thisRef,var0);
            var var1 = (detailMessage == null ? false : detailMessage.instanceOf(jlThrowable)); // type is BOOLEAN value type is BOOLEAN
            if ((var1 == 0)) {
                return;
            }
            }
        var var2 = thisRef.jlThrowableinitCausejlThrowable(thisRef,detailMessage); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2e05f992
        return;
    },

    VOIDinitjlString : function(thisRef,detailMessage) {
        var __label__ = null;
        jlError.VOIDinitjlString(thisRef,detailMessage);
        return;
    },

    classInitCheck : function() {
        if (!jlAssertionError.__initialized) {
            jlAssertionError.__initialized = true;
            var thePrototype = jlAssertionError.Create.prototype;
            thePrototype.instanceOf = jlAssertionError.instanceOf;
            thePrototype.ClassgetClass = jlAssertionError.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlError.classInitCheck();
            jlThrowable.classInitCheck();
            jiSerializable.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var ojdFixtureDef = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 125,
    __implementedTypes : [125,1],

    Create : function() {
        this.shape = null; // declared in org.jbox2d.dynamics.FixtureDef
        this.userData = null; // declared in org.jbox2d.dynamics.FixtureDef
        this.friction = 0; // declared in org.jbox2d.dynamics.FixtureDef
        this.restitution = 0; // declared in org.jbox2d.dynamics.FixtureDef
        this.density = 0; // declared in org.jbox2d.dynamics.FixtureDef
        this.filter = null; // declared in org.jbox2d.dynamics.FixtureDef
        this.isSensor = false; // declared in org.jbox2d.dynamics.FixtureDef
    },

    instanceOf : function(aType) {
        return ojdFixtureDef.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdFixtureDef;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        thisRef.shape = null;
        thisRef.shape = null;
        thisRef.userData = null;
        thisRef.friction = 0.2;
        thisRef.restitution = 0.0;
        thisRef.density = 0.0;
        var var0 = new ojdFilter.Create(); // type is REFERENCE value type is REFERENCE
        ojdFilter.VOIDinit(var0);
        thisRef.filter = var0;
        thisRef.isSensor = 0;
        return;
    },

    classInitCheck : function() {
        if (!ojdFixtureDef.__initialized) {
            ojdFixtureDef.__initialized = true;
            var thePrototype = ojdFixtureDef.Create.prototype;
            thePrototype.instanceOf = ojdFixtureDef.instanceOf;
            thePrototype.ClassgetClass = ojdFixtureDef.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojcsShape = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 126,
    __implementedTypes : [126,1],

    instanceOf : function(aType) {
        return ojcsShape.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcsShape;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitojcsShapeType : function(thisRef,type) {
        var __label__ = null;
        thisRef.m_type = type;
        return;
    },

    VOIDsetRadiusFLOAT : function(thisRef,radius) {
        var __label__ = null;
        thisRef.m_radius = radius;
        return;
    },

    ojcsShapeTypegetType : function(thisRef) {
        var __label__ = null;
        return thisRef.m_type;
    },

    FLOATgetRadius : function(thisRef) {
        var __label__ = null;
        return thisRef.m_radius;
    },

    classInitCheck : function() {
        if (!ojcsShape.__initialized) {
            ojcsShape.__initialized = true;
            jlObject.classInitCheck();
        }
    },

};

var ojdFilter = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 127,
    __implementedTypes : [127,1],

    Create : function() {
        this.categoryBits = 0; // declared in org.jbox2d.dynamics.Filter
        this.maskBits = 0; // declared in org.jbox2d.dynamics.Filter
        this.groupIndex = 0; // declared in org.jbox2d.dynamics.Filter
    },

    instanceOf : function(aType) {
        return ojdFilter.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdFilter;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        thisRef.categoryBits = 1;
        thisRef.maskBits = 65535;
        thisRef.groupIndex = 0;
        return;
    },

    VOIDsetojdFilter : function(thisRef,argOther) {
        var __label__ = null;
        var var0 = argOther.categoryBits; // type is INT value type is INT
        thisRef.categoryBits = var0;
        var var1 = argOther.maskBits; // type is INT value type is INT
        thisRef.maskBits = var1;
        var var2 = argOther.groupIndex; // type is INT value type is INT
        thisRef.groupIndex = var2;
        return;
    },

    classInitCheck : function() {
        if (!ojdFilter.__initialized) {
            ojdFilter.__initialized = true;
            var thePrototype = ojdFilter.Create.prototype;
            thePrototype.instanceOf = ojdFilter.instanceOf;
            thePrototype.ClassgetClass = ojdFilter.ClassgetClass;
            thePrototype.VOIDsetojdFilter = ojdFilter.VOIDsetojdFilter;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojcsMassData = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 128,
    __implementedTypes : [128,1],

    Create : function() {
        this.I = 0; // declared in org.jbox2d.collision.shapes.MassData
        this.mass = 0; // declared in org.jbox2d.collision.shapes.MassData
        this.center = null; // declared in org.jbox2d.collision.shapes.MassData
    },

    instanceOf : function(aType) {
        return ojcsMassData.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcsMassData;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        thisRef.I = 0.0;
        thisRef.mass = 0.0;
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var0);
        thisRef.center = var0;
        return;
    },

    classInitCheck : function() {
        if (!ojcsMassData.__initialized) {
            ojcsMassData.__initialized = true;
            var thePrototype = ojcsMassData.Create.prototype;
            thePrototype.instanceOf = ojcsMassData.instanceOf;
            thePrototype.ClassgetClass = ojcsMassData.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var jlFloat = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 129,
    __implementedTypes : [16,2,129,1,11],

    Create : function() {
        this.floatValue = 0; // declared in java.lang.Float
    },

    instanceOf : function(aType) {
        return jlFloat.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jlFloat;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    BOOLEANisNaNFLOAT : function(aFloat) {
        var __label__ = null;
        return 0;
    },

    BOOLEANisInfiniteFLOAT : function(aFloat) {
        var __label__ = null;
        return 0;
    },

    INTfloatToIntBitsFLOAT : function(value) {
        var var42 = null; // type is INT # of inits = 1
        var local_3_INT = null; // type is INT # of inits = 2
        var local_2_INT = null; // type is INT # of inits = 2
        var local_4_FLOAT = null; // type is FLOAT # of inits = 2
        var local_1_FLOAT = null; // type is FLOAT # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((value != Infinity)) {
                break $S_0;
            }
            return 2139095040;
            }
        $S_10 : {
        // NORMAL
            if ((value != -Infinity)) {
                break $S_10;
            }
            return -8388608;
            }
        $S_20 : {
        // NORMAL
            var var2 = jlFloat.BOOLEANisNaNFLOAT(value); // type is BOOLEAN value type is BOOLEAN
            if ((var2 == 0)) {
                break $S_20;
            }
            return 2143289344;
            }
        $S_30 : {
        // NORMAL
            var var3 = jlMath.FLOATabsFLOAT(value); // type is FLOAT value type is FLOAT
            local_1_FLOAT = var3; // type is FLOAT value type is FLOAT
            var var7 = jlMath.INTgetExponentFLOAT(local_1_FLOAT); // type is INT value type is INT
            local_2_INT = var7; // type is INT value type is INT
            local_3_INT = ((-local_2_INT) + 23); // type is INT value type is INT
            var var15 = local_2_INT; // type is INT value type is INT
            if ((var15 >= -126)) {
                __label__ = 59;
                break $S_30;
            }
            __label__ = 52;
            }
        $M_59_52 : for(;;) switch (__label__) {
            case 52 :
            // NORMAL
                local_2_INT = -127; // type is INT value type is INT
                local_3_INT = 149; // type is INT value type is INT
                __label__ = 59;
                continue $M_59_52;
            case 59 :
            // NORMAL
                $S_59 : {
                // NORMAL
                    var var18 = local_3_INT; // type is INT value type is INT
                    if ((var18 > 126)) {
                        __label__ = 76;
                        break $S_59;
                    }
                    __label__ = 65;
                    }
                $M_76_65 : for(;;) switch (__label__) {
                    case 65 :
                    // NORMAL
                        var var27 = local_1_FLOAT; // type is FLOAT value type is FLOAT
                        var var29 = jlFloat.FLOATbinaryExponentINT(local_3_INT); // type is FLOAT value type is FLOAT
                        local_4_FLOAT = (var27 * var29); // type is FLOAT value type is FLOAT
                        break $M_76_65;
                    case 76 :
                    // NORMAL
                        var var20 = (local_1_FLOAT * 8.507059E37); // type is FLOAT value type is FLOAT
                        var var23 = jlFloat.FLOATbinaryExponentINT((local_3_INT - 126)); // type is FLOAT value type is FLOAT
                        local_4_FLOAT = (var20 * var23); // type is FLOAT value type is FLOAT
                        break $M_76_65;
                }
                $S_90 : {
                // NORMAL
                    var local_5_INT = (Math.floor((local_4_FLOAT + 0.5)) & 8388607); // type is INT value type is INT
                    var42 = (local_5_INT | ((local_2_INT + 127) << 23)); // type is INT value type is INT
                    if ((value < 0.0)) {
                        __label__ = 126;
                        break $S_90;
                    }
                    __label__ = 117;
                    }
                $M_117_126 : for(;;) switch (__label__) {
                    case 126 :
                    // NORMAL
                        var var46 = -2147483648; // type is INT value type is INT
                        return (var42 | var46);
                    case 117 :
                    // NORMAL
                        $S_117 : {
                        // NORMAL
                            var var44 = (1.0 / value); // type is FLOAT value type is FLOAT
                            if ((var44 != -Infinity)) {
                                break $S_117;
                            }
                            __label__ = 126;
                            continue $M_117_126;
                            }
                        var var46 = 0; // type is INT value type is INT
                        return (var42 | var46);
                }
        }
    },

    FLOATbinaryExponentINT : function(n) {
        var local_0_INT = null; // type is INT # of inits = 4
        var local_1_FLOAT = null; // type is FLOAT # of inits = 5
        var local_2_FLOAT = null; // type is FLOAT # of inits = 6
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_1_FLOAT = 1.0; // type is FLOAT value type is FLOAT
            if ((n < 0)) {
                __label__ = 36;
                break $S_0;
            }
            __label__ = 6;
            }
        for(;;) switch (__label__) {
            case 36 :
            // NORMAL
                $S_36 : {
                // NORMAL
                    local_0_INT = (-n); // type is INT value type is INT
                    local_2_FLOAT = 0.5; // type is FLOAT value type is FLOAT
                    __label__ = 42;
                    }
                $L_42 : for (;;) {
                    $S_42 : {
                    // NORMAL
                        var var7 = local_0_INT; // type is INT value type is INT
                        if ((var7 == 0)) {
                            return local_1_FLOAT;
                        }
                        }
                    $S_46 : {
                    // NORMAL
                        var var11 = (local_0_INT % 2); // type is INT value type is INT
                        if ((var11 == 0)) {
                            __label__ = 56;
                            break $S_46;
                        }
                        __label__ = 52;
                        }
                    $M_52_56 : for(;;) switch (__label__) {
                        case 56 :
                        // NORMAL
                            local_0_INT = Math.floor((local_0_INT / 2)); // type is INT value type is INT
                            local_2_FLOAT = (local_2_FLOAT * local_2_FLOAT); // type is FLOAT value type is FLOAT
                            __label__ = 42;
                            continue $L_42;
                        case 52 :
                        // NORMAL
                            local_1_FLOAT = (local_1_FLOAT * local_2_FLOAT); // type is FLOAT value type is FLOAT
                            __label__ = 56;
                            continue $M_52_56;
                    }
                }
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    local_2_FLOAT = 2.0; // type is FLOAT value type is FLOAT
                    __label__ = 8;
                    }
                $L_8 : for (;;) {
                    $S_8 : {
                    // NORMAL
                        if ((n == 0)) {
                            __label__ = 33;
                            break $S_8;
                        }
                        __label__ = 12;
                        }
                    for(;;) switch (__label__) {
                        case 33 :
                        // NORMAL
                            return local_1_FLOAT;
                        case 12 :
                        // NORMAL
                            $S_12 : {
                            // NORMAL
                                var var23 = (n % 2); // type is INT value type is INT
                                if ((var23 == 0)) {
                                    __label__ = 22;
                                    break $S_12;
                                }
                                __label__ = 18;
                                }
                            $M_22_18 : for(;;) switch (__label__) {
                                case 18 :
                                // NORMAL
                                    local_1_FLOAT = (local_1_FLOAT * local_2_FLOAT); // type is FLOAT value type is FLOAT
                                    __label__ = 22;
                                    continue $M_22_18;
                                case 22 :
                                // NORMAL
                                    local_0_INT = Math.floor((n / 2)); // type is INT value type is INT
                                    local_2_FLOAT = (local_2_FLOAT * local_2_FLOAT); // type is FLOAT value type is FLOAT
                                    n = local_0_INT; // type is INT value type is INT
                                    __label__ = 8;
                                    continue $L_8;
                            }
                    }
                }
        }
    },

    FLOATfloatValue : function(thisRef) {
        var __label__ = null;
        return thisRef.floatValue;
    },

    INThashCode : function(thisRef) {
        var __label__ = null;
        return Math.floor(thisRef.floatValue);
    },

    BOOLEANequalsjlObject : function(thisRef,o) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((thisRef != o)) {
                break $S_0;
            }
            return 1;
            }
        $S_7 : {
        // NORMAL
            if (o == null ) {
                return 0;
            }
            }
        $S_11 : {
        // NORMAL
            var var0 = thisRef.ClassgetClass(); // type is REFERENCE value type is REFERENCE
            var var1 = o.ClassgetClass(); // type is REFERENCE value type is REFERENCE
            if ((var0 == var1)) {
                break $S_11;
            }
            return 0;
            }
        var local_2_REFERENCE = o; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7d60b029
        var var6 = jlFloat.INTcompareFLOATFLOAT(local_2_REFERENCE.floatValue,thisRef.floatValue); // type is INT value type is INT
        if ((var6 == 0)) {
            return 1;
        }
        return 0;
    },

    INTcompareFLOATFLOAT : function(f1,f2) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((f1 >= f2)) {
                break $S_0;
            }
            return -1;
            }
        if ((f1 <= f2)) {
            return 0;
        }
        return 1;
    },

    jlStringtoString : function(thisRef) {
        var __label__ = null;
        var var1 = jlFloat.jlStringtoStringFLOAT(thisRef.floatValue); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@e4a1b15
        return var1;
    },

    jlStringtoStringFLOAT : function(aValue) {
        var __label__ = null;
        var var0 = new jlStringBuilder.Create(); // type is REFERENCE value type is REFERENCE
        jlStringBuilder.VOIDinit(var0);
        var local_1_REFERENCE = var0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@ce8fc9f
        var var3 = local_1_REFERENCE.jlStringBuilderappendFLOAT(local_1_REFERENCE,aValue); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@262797b1
        var var5 = local_1_REFERENCE.jlStringtoString(local_1_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@41bb6436
        return var5;
    },

    classInitCheck : function() {
        if (!jlFloat.__initialized) {
            jlFloat.__initialized = true;
            var thePrototype = jlFloat.Create.prototype;
            thePrototype.instanceOf = jlFloat.instanceOf;
            thePrototype.ClassgetClass = jlFloat.ClassgetClass;
            thePrototype.jlStringtoString = jlFloat.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlFloat.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlFloat.INThashCode;
            thePrototype.FLOATfloatValue = jlFloat.FLOATfloatValue;
            jlNumber.classInitCheck();
            jiSerializable.classInitCheck();
            jlObject.classInitCheck();
            jlComparable.classInitCheck();
        }
    },

};

var ojcMathUtils = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 130,
    __implementedTypes : [130,131,1],
    sinLUT : null, // declared in org.jbox2d.common.MathUtils

    Create : function() {
    },

    instanceOf : function(aType) {
        return ojcMathUtils.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcMathUtils;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var local_0_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var1 = bytecoder.newArray(ojcSettings.SINCOS_LUT_LENGTH,0.0); // type is REFERENCE value type is REFERENCE
            ojcMathUtils.sinLUT = var1;
            local_0_INT = 0; // type is INT value type is INT
            __label__ = 10;
            }
        $L_10 : for (;;) {
            $S_10 : {
            // NORMAL
                var var4 = local_0_INT; // type is INT value type is INT
                var var5 = ojcSettings.SINCOS_LUT_LENGTH; // type is INT value type is INT
                if ((var4 >= var5)) {
                    return;
                }
                }
            var var6 = ojcMathUtils.sinLUT; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@6b4ce4ac
            var var7 = local_0_INT; // type is INT value type is INT
            var var12 = jlMath.DOUBLEsinDOUBLE((local_0_INT * 1.1E-4)); // type is DOUBLE value type is DOUBLE
            var var13 = var12; // type is FLOAT value type is FLOAT
            var6.data[var7] = var13;
            local_0_INT = (local_0_INT + 1); // type is INT value type is INT
            __label__ = 10;
            continue $L_10;
        }
    },

    FLOATsinFLOAT : function(x) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcSettings.SINCOS_LUT_ENABLED; // type is BOOLEAN value type is BOOLEAN
            if ((var0 == 0)) {
                __label__ = 11;
                break $S_0;
            }
            __label__ = 6;
            }
        for(;;) switch (__label__) {
            case 6 :
            // NORMAL
                var var1 = ojcMathUtils.FLOATsinLUTFLOAT(x); // type is FLOAT value type is FLOAT
                return var1;
            case 11 :
            // NORMAL
                var var3 = jlStrictMath.DOUBLEsinDOUBLE(x); // type is DOUBLE value type is DOUBLE
                return var3;
        }
    },

    FLOATsinLUTFLOAT : function(x) {
        var local_1_INT = null; // type is INT # of inits = 1
        var local_0_FLOAT = null; // type is FLOAT # of inits = 4
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_0_FLOAT = (x % 6.2831855); // type is FLOAT value type is FLOAT
            var var3 = local_0_FLOAT; // type is FLOAT value type is FLOAT
            if ((var3 >= 0.0)) {
                __label__ = 16;
                break $S_0;
            }
            __label__ = 11;
            }
        $M_11_16 : for(;;) switch (__label__) {
            case 16 :
            // NORMAL
                $S_16 : {
                // NORMAL
                    var var8 = ojcSettings.SINCOS_LUT_LERP; // type is BOOLEAN value type is BOOLEAN
                    if ((var8 == 0)) {
                        __label__ = 86;
                        break $S_16;
                    }
                    __label__ = 22;
                    }
                for(;;) switch (__label__) {
                    case 86 :
                    // NORMAL
                        var var9 = ojcMathUtils.sinLUT; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@24855f10
                        var var12 = ojcMathUtils.INTroundFLOAT((local_0_FLOAT / 1.1E-4)); // type is INT value type is INT
                        var var15 = var9.data[(var12 % ojcSettings.SINCOS_LUT_LENGTH)]; // type is FLOAT value type is FLOAT
                        return var15;
                    case 22 :
                    // NORMAL
                        $S_22 : {
                        // NORMAL
                            local_0_FLOAT = (local_0_FLOAT / 1.1E-4); // type is FLOAT value type is FLOAT
                            local_1_INT = Math.floor(local_0_FLOAT); // type is INT value type is INT
                            var var23 = local_1_INT; // type is INT value type is INT
                            if ((var23 == 0)) {
                                __label__ = 39;
                                break $S_22;
                            }
                            __label__ = 34;
                            }
                        $M_34_39 : for(;;) switch (__label__) {
                            case 39 :
                            // NORMAL
                                $S_39 : {
                                // NORMAL
                                    var var29 = local_1_INT; // type is INT value type is INT
                                    var var31 = (ojcSettings.SINCOS_LUT_LENGTH - 1); // type is INT value type is INT
                                    if ((var29 != var31)) {
                                        __label__ = 66;
                                        break $S_39;
                                    }
                                    __label__ = 48;
                                    }
                                for(;;) switch (__label__) {
                                    case 66 :
                                    // NORMAL
                                        var var44 = (1.0 - local_0_FLOAT); // type is FLOAT value type is FLOAT
                                        var var47 = ojcMathUtils.sinLUT.data[local_1_INT]; // type is FLOAT value type is FLOAT
                                        var var48 = (var44 * var47); // type is FLOAT value type is FLOAT
                                        var var49 = local_0_FLOAT; // type is FLOAT value type is FLOAT
                                        var var53 = ojcMathUtils.sinLUT.data[(local_1_INT + 1)]; // type is FLOAT value type is FLOAT
                                        return (var48 + (var49 * var53));
                                    case 48 :
                                    // NORMAL
                                        var var33 = (1.0 - local_0_FLOAT); // type is FLOAT value type is FLOAT
                                        var var36 = ojcMathUtils.sinLUT.data[local_1_INT]; // type is FLOAT value type is FLOAT
                                        var var37 = (var33 * var36); // type is FLOAT value type is FLOAT
                                        var var38 = local_0_FLOAT; // type is FLOAT value type is FLOAT
                                        var var40 = ojcMathUtils.sinLUT.data[0]; // type is FLOAT value type is FLOAT
                                        return (var37 + (var38 * var40));
                                }
                            case 34 :
                            // NORMAL
                                local_0_FLOAT = (local_0_FLOAT % local_1_INT); // type is FLOAT value type is FLOAT
                                __label__ = 39;
                                continue $M_34_39;
                        }
                }
            case 11 :
            // NORMAL
                local_0_FLOAT = (local_0_FLOAT + 6.2831855); // type is FLOAT value type is FLOAT
                __label__ = 16;
                continue $M_11_16;
        }
    },

    INTroundFLOAT : function(x) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcSettings.FAST_ROUND; // type is BOOLEAN value type is BOOLEAN
            if ((var0 == 0)) {
                __label__ = 14;
                break $S_0;
            }
            __label__ = 6;
            }
        for(;;) switch (__label__) {
            case 6 :
            // NORMAL
                var var2 = ojcMathUtils.INTfloorFLOAT((x + 0.5)); // type is INT value type is INT
                return var2;
            case 14 :
            // NORMAL
                var var3 = jlStrictMath.INTroundFLOAT(x); // type is INT value type is INT
                return var3;
        }
    },

    INTfloorFLOAT : function(x) {
        var local_1_INT = null; // type is INT # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcSettings.FAST_FLOOR; // type is BOOLEAN value type is BOOLEAN
            if ((var0 == 0)) {
                return Math.floor(Math.floor(x));
            }
            }
        $S_6 : {
        // NORMAL
            local_1_INT = Math.floor(x); // type is INT value type is INT
            if ((x >= 0.0)) {
                return local_1_INT;
            }
            }
        var var6 = local_1_INT; // type is FLOAT value type is FLOAT
        if ((x == var6)) {
            return local_1_INT;
        }
        return (local_1_INT - 1);
    },

    FLOATcosFLOAT : function(x) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcSettings.SINCOS_LUT_ENABLED; // type is BOOLEAN value type is BOOLEAN
            if ((var0 == 0)) {
                __label__ = 14;
                break $S_0;
            }
            __label__ = 6;
            }
        for(;;) switch (__label__) {
            case 6 :
            // NORMAL
                var var5 = ojcMathUtils.FLOATsinLUTFLOAT((1.5707964 - x)); // type is FLOAT value type is FLOAT
                return var5;
            case 14 :
            // NORMAL
                var var2 = jlStrictMath.DOUBLEcosDOUBLE(x); // type is DOUBLE value type is DOUBLE
                return var2;
        }
    },

    INTmaxINTINT : function(a,b) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((a <= b)) {
                __label__ = 9;
                break $S_0;
            }
            __label__ = 5;
            }
        for(;;) switch (__label__) {
            case 5 :
            // NORMAL
                var var0 = a; // type is INT value type is INT
                return var0;
            case 9 :
            // NORMAL
                var var0 = b; // type is INT value type is INT
                return var0;
        }
    },

    INTminINTINT : function(a,b) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((a >= b)) {
                __label__ = 9;
                break $S_0;
            }
            __label__ = 5;
            }
        for(;;) switch (__label__) {
            case 9 :
            // NORMAL
                var var0 = b; // type is INT value type is INT
                return var0;
            case 5 :
            // NORMAL
                var var0 = a; // type is INT value type is INT
                return var0;
        }
    },

    FLOATsqrtFLOAT : function(x) {
        var __label__ = null;
        return Math.sqrt(x);
    },

    FLOATdistanceojcVec2ojcVec2 : function(v1,v2) {
        var __label__ = null;
        var var0 = ojcMathUtils.FLOATdistanceSquaredojcVec2ojcVec2(v1,v2); // type is FLOAT value type is FLOAT
        var var1 = ojcMathUtils.FLOATsqrtFLOAT(var0); // type is FLOAT value type is FLOAT
        return var1;
    },

    FLOATdistanceSquaredojcVec2ojcVec2 : function(v1,v2) {
        var __label__ = null;
        var local_2_FLOAT = (v1.x - v2.x); // type is FLOAT value type is FLOAT
        var local_3_FLOAT = (v1.y - v2.y); // type is FLOAT value type is FLOAT
        return ((local_2_FLOAT * local_2_FLOAT) + (local_3_FLOAT * local_3_FLOAT));
    },

    FLOATclampFLOATFLOATFLOAT : function(a,low,high) {
        var __label__ = null;
        var var0 = ojcMathUtils.FLOATminFLOATFLOAT(a,high); // type is FLOAT value type is FLOAT
        var var1 = ojcMathUtils.FLOATmaxFLOATFLOAT(low,var0); // type is FLOAT value type is FLOAT
        return var1;
    },

    FLOATminFLOATFLOAT : function(a,b) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((a >= b)) {
                __label__ = 10;
                break $S_0;
            }
            __label__ = 6;
            }
        for(;;) switch (__label__) {
            case 6 :
            // NORMAL
                var var1 = a; // type is FLOAT value type is FLOAT
                return var1;
            case 10 :
            // NORMAL
                var var1 = b; // type is FLOAT value type is FLOAT
                return var1;
        }
    },

    FLOATmaxFLOATFLOAT : function(a,b) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((a <= b)) {
                __label__ = 10;
                break $S_0;
            }
            __label__ = 6;
            }
        for(;;) switch (__label__) {
            case 10 :
            // NORMAL
                var var1 = b; // type is FLOAT value type is FLOAT
                return var1;
            case 6 :
            // NORMAL
                var var1 = a; // type is FLOAT value type is FLOAT
                return var1;
        }
    },

    FLOATabsFLOAT : function(x) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcSettings.FAST_ABS; // type is BOOLEAN value type is BOOLEAN
            if ((var0 == 0)) {
                __label__ = 19;
                break $S_0;
            }
            __label__ = 6;
            }
        for(;;) switch (__label__) {
            case 19 :
            // NORMAL
                var var4 = jlMath.FLOATabsFLOAT(x); // type is FLOAT value type is FLOAT
                return var4;
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    if ((x <= 0.0)) {
                        __label__ = 16;
                        break $S_6;
                    }
                    __label__ = 12;
                    }
                for(;;) switch (__label__) {
                    case 12 :
                    // NORMAL
                        var var3 = x; // type is FLOAT value type is FLOAT
                        return var3;
                    case 16 :
                    // NORMAL
                        var var3 = (-x); // type is FLOAT value type is FLOAT
                        return var3;
                }
        }
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        ojcPlatformMathUtils.VOIDinit(thisRef);
        return;
    },

    classInitCheck : function() {
        if (!ojcMathUtils.__initialized) {
            ojcMathUtils.__initialized = true;
            var thePrototype = ojcMathUtils.Create.prototype;
            thePrototype.instanceOf = ojcMathUtils.instanceOf;
            thePrototype.ClassgetClass = ojcMathUtils.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojcPlatformMathUtils.classInitCheck();
            jlObject.classInitCheck();
            ojcSettings.classInitCheck();
            jlMath.classInitCheck();
            ojcMathUtils.VOIDclinit();
        }
    },

};

var ojcPlatformMathUtils = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 131,
    __implementedTypes : [131,1],

    Create : function() {
    },

    instanceOf : function(aType) {
        return ojcPlatformMathUtils.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcPlatformMathUtils;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    classInitCheck : function() {
        if (!ojcPlatformMathUtils.__initialized) {
            ojcPlatformMathUtils.__initialized = true;
            var thePrototype = ojcPlatformMathUtils.Create.prototype;
            thePrototype.instanceOf = ojcPlatformMathUtils.instanceOf;
            thePrototype.ClassgetClass = ojcPlatformMathUtils.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var jlStrictMath = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 132,
    __implementedTypes : [132,1],

    Create : function() {
    },

    instanceOf : function(aType) {
        return jlStrictMath.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jlStrictMath;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    INTroundFLOAT : function(p1) {
         return bytecoder.imports.strictmath.round(p1);
    },

    DOUBLEsinDOUBLE : function(p1) {
         return bytecoder.imports.strictmath.sin(p1);
    },

    DOUBLEcosDOUBLE : function(p1) {
         return bytecoder.imports.strictmath.cos(p1);
    },

    DOUBLEsqrtDOUBLE : function(p1) {
         return bytecoder.imports.strictmath.sqrt(p1);
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    classInitCheck : function() {
        if (!jlStrictMath.__initialized) {
            jlStrictMath.__initialized = true;
            var thePrototype = jlStrictMath.Create.prototype;
            thePrototype.instanceOf = jlStrictMath.instanceOf;
            thePrototype.ClassgetClass = jlStrictMath.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojdjJointEdge = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 133,
    __implementedTypes : [133,1],

    Create : function() {
        this.other = null; // declared in org.jbox2d.dynamics.joints.JointEdge
        this.joint = null; // declared in org.jbox2d.dynamics.joints.JointEdge
        this.prev = null; // declared in org.jbox2d.dynamics.joints.JointEdge
        this.next = null; // declared in org.jbox2d.dynamics.joints.JointEdge
    },

    instanceOf : function(aType) {
        return ojdjJointEdge.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdjJointEdge;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        thisRef.other = null;
        thisRef.joint = null;
        thisRef.prev = null;
        thisRef.next = null;
        return;
    },

    classInitCheck : function() {
        if (!ojdjJointEdge.__initialized) {
            ojdjJointEdge.__initialized = true;
            var thePrototype = ojdjJointEdge.Create.prototype;
            thePrototype.instanceOf = ojdjJointEdge.instanceOf;
            thePrototype.ClassgetClass = ojdjJointEdge.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojdcContactEdge = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 134,
    __implementedTypes : [134,1],

    Create : function() {
        this.other = null; // declared in org.jbox2d.dynamics.contacts.ContactEdge
        this.contact = null; // declared in org.jbox2d.dynamics.contacts.ContactEdge
        this.next = null; // declared in org.jbox2d.dynamics.contacts.ContactEdge
        this.prev = null; // declared in org.jbox2d.dynamics.contacts.ContactEdge
    },

    instanceOf : function(aType) {
        return ojdcContactEdge.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdcContactEdge;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        thisRef.other = null;
        thisRef.contact = null;
        thisRef.prev = null;
        thisRef.next = null;
        return;
    },

    classInitCheck : function() {
        if (!ojdcContactEdge.__initialized) {
            ojdcContactEdge.__initialized = true;
            var thePrototype = ojdcContactEdge.Create.prototype;
            thePrototype.instanceOf = ojdcContactEdge.instanceOf;
            thePrototype.ClassgetClass = ojdcContactEdge.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojdFixture = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 135,
    __implementedTypes : [135,1],
    $assertionsDisabled : false, // declared in org.jbox2d.dynamics.Fixture

    Create : function() {
        this.pool1 = null; // declared in org.jbox2d.dynamics.Fixture
        this.pool2 = null; // declared in org.jbox2d.dynamics.Fixture
        this.displacement = null; // declared in org.jbox2d.dynamics.Fixture
        this.m_userData = null; // declared in org.jbox2d.dynamics.Fixture
        this.m_body = null; // declared in org.jbox2d.dynamics.Fixture
        this.m_next = null; // declared in org.jbox2d.dynamics.Fixture
        this.m_proxies = null; // declared in org.jbox2d.dynamics.Fixture
        this.m_proxyCount = 0; // declared in org.jbox2d.dynamics.Fixture
        this.m_shape = null; // declared in org.jbox2d.dynamics.Fixture
        this.m_filter = null; // declared in org.jbox2d.dynamics.Fixture
        this.m_friction = 0; // declared in org.jbox2d.dynamics.Fixture
        this.m_restitution = 0; // declared in org.jbox2d.dynamics.Fixture
        this.m_isSensor = false; // declared in org.jbox2d.dynamics.Fixture
        this.m_density = 0; // declared in org.jbox2d.dynamics.Fixture
    },

    instanceOf : function(aType) {
        return ojdFixture.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdFixture;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdFixture.BOOLEANdesiredAssertionStatus(ojdFixture); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_9_13 : for(;;) switch (__label__) {
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_9_13;
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_9_13;
        }
        ojdFixture.$assertionsDisabled = var1;
        return;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcAABB.Create(); // type is REFERENCE value type is REFERENCE
        ojcAABB.VOIDinit(var0);
        thisRef.pool1 = var0;
        var var1 = new ojcAABB.Create(); // type is REFERENCE value type is REFERENCE
        ojcAABB.VOIDinit(var1);
        thisRef.pool2 = var1;
        var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var2);
        thisRef.displacement = var2;
        thisRef.m_userData = null;
        thisRef.m_body = null;
        thisRef.m_next = null;
        thisRef.m_proxies = null;
        thisRef.m_proxyCount = 0;
        thisRef.m_shape = null;
        var var3 = new ojdFilter.Create(); // type is REFERENCE value type is REFERENCE
        ojdFilter.VOIDinit(var3);
        thisRef.m_filter = var3;
        return;
    },

    VOIDcreateojdBodyojdFixtureDef : function(thisRef,body,def) {
        var local_3_INT = null; // type is INT # of inits = 2
        var local_6_INT = null; // type is INT # of inits = 3
        var local_5_INT = null; // type is INT # of inits = 2
        var local_4_INT = null; // type is INT # of inits = 3
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = def.userData; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6d9fc5dd
            thisRef.m_userData = var0;
            var var1 = def.friction; // type is FLOAT value type is FLOAT
            thisRef.m_friction = var1;
            var var2 = def.restitution; // type is FLOAT value type is FLOAT
            thisRef.m_restitution = var2;
            thisRef.m_body = body;
            thisRef.m_next = null;
            thisRef.m_filter.VOIDsetojdFilter(thisRef.m_filter,def.filter);
            var var5 = def.isSensor; // type is BOOLEAN value type is BOOLEAN
            thisRef.m_isSensor = var5;
            var var7 = def.shape.ojcsShapeclone(def.shape); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@efc1267
            thisRef.m_shape = var7;
            var var9 = thisRef.m_shape.INTgetChildCount(thisRef.m_shape); // type is INT value type is INT
            local_3_INT = var9; // type is INT value type is INT
            var var12 = thisRef.m_proxies; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@472f7b74
            if (var12 != null ) {
                __label__ = 138;
                break $S_0;
            }
            __label__ = 79;
            }
        $M_138_79 : for(;;) switch (__label__) {
            case 79 :
            // NORMAL
                $S_79 : {
                // NORMAL
                    var var14 = bytecoder.newArray(local_3_INT,null); // type is REFERENCE value type is REFERENCE
                    thisRef.m_proxies = var14;
                    local_4_INT = 0; // type is INT value type is INT
                    __label__ = 90;
                    }
                $L_90 : for (;;) {
                    $S_90 : {
                    // NORMAL
                        var var17 = local_4_INT; // type is INT value type is INT
                        var var18 = local_3_INT; // type is INT value type is INT
                        if ((var17 >= var18)) {
                            __label__ = 138;
                            continue $M_138_79;
                        }
                        }
                    var var19 = thisRef.m_proxies; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1d982f77
                    var var20 = local_4_INT; // type is INT value type is INT
                    var var21 = new ojdFixtureProxy.Create(); // type is REFERENCE value type is REFERENCE
                    ojdFixtureProxy.VOIDinit(var21);
                    var19.data[var20] = var21;
                    var var24 = thisRef.m_proxies.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                    var24.fixture = null;
                    var var27 = thisRef.m_proxies.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                    var27.proxyId = -1;
                    local_4_INT = (local_4_INT + 1); // type is INT value type is INT
                    __label__ = 90;
                    continue $L_90;
                }
            case 138 :
            // NORMAL
                $S_138 : {
                // NORMAL
                    var var29 = thisRef.m_proxies.data.length; // type is INT value type is INT
                    var var30 = local_3_INT; // type is INT value type is INT
                    if ((var29 >= var30)) {
                        __label__ = 247;
                        break $S_138;
                    }
                    __label__ = 147;
                    }
                $M_247_147 : for(;;) switch (__label__) {
                    case 147 :
                    // NORMAL
                        $S_147 : {
                        // NORMAL
                            local_4_REFERENCE = thisRef.m_proxies; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@603bf4be
                            var var37 = ojcMathUtils.INTmaxINTINT((local_4_REFERENCE.data.length * 2),local_3_INT); // type is INT value type is INT
                            local_5_INT = var37; // type is INT value type is INT
                            var var41 = bytecoder.newArray(local_5_INT,null); // type is REFERENCE value type is REFERENCE
                            thisRef.m_proxies = var41;
                            jlSystem.VOIDarraycopyjlObjectINTjlObjectINTINT(local_4_REFERENCE,0,thisRef.m_proxies,0,local_4_REFERENCE.data.length);
                            local_6_INT = 0; // type is INT value type is INT
                            __label__ = 190;
                            }
                        $L_190 : for (;;) {
                            $S_190 : {
                            // NORMAL
                                var var48 = local_6_INT; // type is INT value type is INT
                                var var49 = local_5_INT; // type is INT value type is INT
                                if ((var48 >= var49)) {
                                    __label__ = 247;
                                    continue $M_247_147;
                                }
                                }
                            $S_197 : {
                            // NORMAL
                                var var50 = local_6_INT; // type is INT value type is INT
                                var var52 = local_4_REFERENCE.data.length; // type is INT value type is INT
                                if ((var50 < var52)) {
                                    __label__ = 219;
                                    break $S_197;
                                }
                                __label__ = 205;
                                }
                            $M_219_205 : for(;;) switch (__label__) {
                                case 219 :
                                // NORMAL
                                    var var58 = thisRef.m_proxies.data[local_6_INT]; // type is REFERENCE value type is REFERENCE
                                    var58.fixture = null;
                                    var var61 = thisRef.m_proxies.data[local_6_INT]; // type is REFERENCE value type is REFERENCE
                                    var61.proxyId = -1;
                                    local_6_INT = (local_6_INT + 1); // type is INT value type is INT
                                    __label__ = 190;
                                    continue $L_190;
                                case 205 :
                                // NORMAL
                                    var var53 = thisRef.m_proxies; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@5c73c716
                                    var var54 = local_6_INT; // type is INT value type is INT
                                    var var55 = new ojdFixtureProxy.Create(); // type is REFERENCE value type is REFERENCE
                                    ojdFixtureProxy.VOIDinit(var55);
                                    var53.data[var54] = var55;
                                    __label__ = 219;
                                    continue $M_219_205;
                            }
                        }
                    case 247 :
                    // NORMAL
                        thisRef.m_proxyCount = 0;
                        var var62 = def.density; // type is FLOAT value type is FLOAT
                        thisRef.m_density = var62;
                        return;
                }
        }
    },

    VOIDcreateProxiesojcbBroadPhaseojcTransform : function(thisRef,broadPhase,xf) {
        var local_3_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdFixture.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 21;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_21_6 : for(;;) switch (__label__) {
            case 21 :
            // NORMAL
                $S_21 : {
                // NORMAL
                    var var3 = thisRef.m_shape.INTgetChildCount(thisRef.m_shape); // type is INT value type is INT
                    thisRef.m_proxyCount = var3;
                    local_3_INT = 0; // type is INT value type is INT
                    __label__ = 34;
                    }
                $L_34 : for (;;) {
                    $S_34 : {
                    // NORMAL
                        var var6 = local_3_INT; // type is INT value type is INT
                        var var7 = thisRef.m_proxyCount; // type is INT value type is INT
                        if ((var6 >= var7)) {
                            return;
                        }
                        }
                    var var10 = thisRef.m_proxies.data[local_3_INT]; // type is REFERENCE value type is REFERENCE
                    var local_4_REFERENCE = var10; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@4ca3b15a
                    thisRef.m_shape.VOIDcomputeAABBojcAABBojcTransformINT(thisRef.m_shape,local_4_REFERENCE.aabb,xf,local_3_INT);
                    var var16 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@4ca3b15a
                    var var20 = broadPhase.INTcreateProxyojcAABBjlObject(broadPhase,local_4_REFERENCE.aabb,local_4_REFERENCE); // type is INT value type is INT
                    var16.proxyId = var20;
                    var var21 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@4ca3b15a
                    var21.fixture = thisRef;
                    var var22 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@4ca3b15a
                    var var23 = local_3_INT; // type is INT value type is INT
                    var22.childIndex = var23;
                    local_3_INT = (local_3_INT + 1); // type is INT value type is INT
                    __label__ = 34;
                    continue $L_34;
                }
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    var var1 = thisRef.m_proxyCount; // type is INT value type is INT
                    if ((var1 == 0)) {
                        __label__ = 21;
                        continue $M_21_6;
                    }
                    }
                var var24 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var24);
                throw var24;
        }
    },

    VOIDgetMassDataojcsMassData : function(thisRef,massData) {
        var __label__ = null;
        thisRef.m_shape.VOIDcomputeMassojcsMassDataFLOAT(thisRef.m_shape,massData,thisRef.m_density);
        return;
    },

    ojdBodygetBody : function(thisRef) {
        var __label__ = null;
        return thisRef.m_body;
    },

    BOOLEANisSensor : function(thisRef) {
        var __label__ = null;
        return thisRef.m_isSensor;
    },

    ojcsShapeTypegetType : function(thisRef) {
        var __label__ = null;
        var var1 = thisRef.m_shape.ojcsShapeTypegetType(thisRef.m_shape); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@28d5785
        return var1;
    },

    ojdFiltergetFilterData : function(thisRef) {
        var __label__ = null;
        return thisRef.m_filter;
    },

    ojcsShapegetShape : function(thisRef) {
        var __label__ = null;
        return thisRef.m_shape;
    },

    VOIDsynchronizeojcbBroadPhaseojcTransformojcTransform : function(thisRef,broadPhase,transform1,transform2) {
        var local_7_REFERENCE = null; // type is REFERENCE # of inits = 1
        var var54 = null; // type is FLOAT # of inits = 2
        var var74 = null; // type is REFERENCE # of inits = 1
        var var57 = null; // type is REFERENCE # of inits = 1
        var var40 = null; // type is REFERENCE # of inits = 1
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 1
        var var23 = null; // type is REFERENCE # of inits = 1
        var var71 = null; // type is FLOAT # of inits = 2
        var var37 = null; // type is FLOAT # of inits = 2
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 1
        var var88 = null; // type is FLOAT # of inits = 2
        var local_4_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.m_proxyCount; // type is INT value type is INT
            if ((var0 != 0)) {
                break $S_0;
            }
            return;
            }
        $S_8 : {
        // NORMAL
            local_4_INT = 0; // type is INT value type is INT
            __label__ = 11;
            }
        $L_11 : for (;;) {
            $S_11 : {
            // NORMAL
                var var3 = local_4_INT; // type is INT value type is INT
                var var4 = thisRef.m_proxyCount; // type is INT value type is INT
                if ((var3 >= var4)) {
                    return;
                }
                }
            $S_20 : {
            // NORMAL
                var var7 = thisRef.m_proxies.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                local_5_REFERENCE = var7; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@ea0e60a
                local_6_REFERENCE = thisRef.pool1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@48ae7f96
                local_7_REFERENCE = thisRef.pool2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1595eb65
                thisRef.m_shape.VOIDcomputeAABBojcAABBojcTransformINT(thisRef.m_shape,local_6_REFERENCE,transform1,local_5_REFERENCE.childIndex);
                thisRef.m_shape.VOIDcomputeAABBojcAABBojcTransformINT(thisRef.m_shape,local_7_REFERENCE,transform2,local_5_REFERENCE.childIndex);
                var23 = local_5_REFERENCE.aabb.lowerBound; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@739e284e
                var var26 = local_6_REFERENCE.lowerBound.x; // type is FLOAT value type is FLOAT
                var var29 = local_7_REFERENCE.lowerBound.x; // type is FLOAT value type is FLOAT
                if ((var26 >= var29)) {
                    __label__ = 110;
                    break $S_20;
                }
                __label__ = 99;
                }
            $M_110_99 : for(;;) switch (__label__) {
                case 99 :
                // NORMAL
                    var37 = local_6_REFERENCE.lowerBound.x; // type is FLOAT value type is FLOAT
                    break $M_110_99;
                case 110 :
                // NORMAL
                    var37 = local_7_REFERENCE.lowerBound.x; // type is FLOAT value type is FLOAT
                    break $M_110_99;
            }
            $S_118 : {
            // NORMAL
                var23.x = var37;
                var40 = local_5_REFERENCE.aabb.lowerBound; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2ab05b1e
                var var43 = local_6_REFERENCE.lowerBound.y; // type is FLOAT value type is FLOAT
                var var46 = local_7_REFERENCE.lowerBound.y; // type is FLOAT value type is FLOAT
                if ((var43 >= var46)) {
                    __label__ = 160;
                    break $S_118;
                }
                __label__ = 149;
                }
            $M_149_160 : for(;;) switch (__label__) {
                case 149 :
                // NORMAL
                    var54 = local_6_REFERENCE.lowerBound.y; // type is FLOAT value type is FLOAT
                    break $M_149_160;
                case 160 :
                // NORMAL
                    var54 = local_7_REFERENCE.lowerBound.y; // type is FLOAT value type is FLOAT
                    break $M_149_160;
            }
            $S_168 : {
            // NORMAL
                var40.y = var54;
                var57 = local_5_REFERENCE.aabb.upperBound; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1159c311
                var var60 = local_6_REFERENCE.upperBound.x; // type is FLOAT value type is FLOAT
                var var63 = local_7_REFERENCE.upperBound.x; // type is FLOAT value type is FLOAT
                if ((var60 <= var63)) {
                    __label__ = 210;
                    break $S_168;
                }
                __label__ = 199;
                }
            $M_210_199 : for(;;) switch (__label__) {
                case 199 :
                // NORMAL
                    var71 = local_6_REFERENCE.upperBound.x; // type is FLOAT value type is FLOAT
                    break $M_210_199;
                case 210 :
                // NORMAL
                    var71 = local_7_REFERENCE.upperBound.x; // type is FLOAT value type is FLOAT
                    break $M_210_199;
            }
            $S_218 : {
            // NORMAL
                var57.x = var71;
                var74 = local_5_REFERENCE.aabb.upperBound; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2b2ddc9c
                var var77 = local_6_REFERENCE.upperBound.y; // type is FLOAT value type is FLOAT
                var var80 = local_7_REFERENCE.upperBound.y; // type is FLOAT value type is FLOAT
                if ((var77 <= var80)) {
                    __label__ = 260;
                    break $S_218;
                }
                __label__ = 249;
                }
            $M_260_249 : for(;;) switch (__label__) {
                case 249 :
                // NORMAL
                    var88 = local_6_REFERENCE.upperBound.y; // type is FLOAT value type is FLOAT
                    break $M_260_249;
                case 260 :
                // NORMAL
                    var88 = local_7_REFERENCE.upperBound.y; // type is FLOAT value type is FLOAT
                    break $M_260_249;
            }
            var74.y = var88;
            var var89 = thisRef.displacement; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@29f35def
            var var94 = (transform2.p.x - transform1.p.x); // type is FLOAT value type is FLOAT
            var89.x = var94;
            var var95 = thisRef.displacement; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1339b64
            var var100 = (transform2.p.y - transform1.p.y); // type is FLOAT value type is FLOAT
            var95.y = var100;
            broadPhase.VOIDmoveProxyINTojcAABBojcVec2(broadPhase,local_5_REFERENCE.proxyId,local_5_REFERENCE.aabb,thisRef.displacement);
            local_4_INT = (local_4_INT + 1); // type is INT value type is INT
            __label__ = 11;
            continue $L_11;
        }
    },

    ojdFixturegetNext : function(thisRef) {
        var __label__ = null;
        return thisRef.m_next;
    },

    classInitCheck : function() {
        if (!ojdFixture.__initialized) {
            ojdFixture.__initialized = true;
            var thePrototype = ojdFixture.Create.prototype;
            thePrototype.instanceOf = ojdFixture.instanceOf;
            thePrototype.ClassgetClass = ojdFixture.ClassgetClass;
            thePrototype.ojdFixturegetNext = ojdFixture.ojdFixturegetNext;
            thePrototype.VOIDsynchronizeojcbBroadPhaseojcTransformojcTransform = ojdFixture.VOIDsynchronizeojcbBroadPhaseojcTransformojcTransform;
            thePrototype.ojcsShapegetShape = ojdFixture.ojcsShapegetShape;
            thePrototype.ojdFiltergetFilterData = ojdFixture.ojdFiltergetFilterData;
            thePrototype.ojcsShapeTypegetType = ojdFixture.ojcsShapeTypegetType;
            thePrototype.BOOLEANisSensor = ojdFixture.BOOLEANisSensor;
            thePrototype.ojdBodygetBody = ojdFixture.ojdBodygetBody;
            thePrototype.VOIDgetMassDataojcsMassData = ojdFixture.VOIDgetMassDataojcsMassData;
            thePrototype.VOIDcreateProxiesojcbBroadPhaseojcTransform = ojdFixture.VOIDcreateProxiesojcbBroadPhaseojcTransform;
            thePrototype.VOIDcreateojdBodyojdFixtureDef = ojdFixture.VOIDcreateojdBodyojdFixtureDef;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            ojdFixture.VOIDclinit();
        }
    },

};

var ojcsCircleShape = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 136,
    __implementedTypes : [126,136,1],
    $assertionsDisabled : false, // declared in org.jbox2d.collision.shapes.CircleShape

    Create : function() {
        this.m_type = null; // declared in org.jbox2d.collision.shapes.Shape
        this.m_radius = 0; // declared in org.jbox2d.collision.shapes.Shape
        this.m_p = null; // declared in org.jbox2d.collision.shapes.CircleShape
    },

    instanceOf : function(aType) {
        return ojcsCircleShape.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcsCircleShape;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcsCircleShape.BOOLEANdesiredAssertionStatus(ojcsCircleShape); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_13_9 : for(;;) switch (__label__) {
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_13_9;
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_13_9;
        }
        ojcsCircleShape.$assertionsDisabled = var1;
        return;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        ojcsShape.VOIDinitojcsShapeType(thisRef,ojcsShapeType.CIRCLE);
        var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var1);
        thisRef.m_p = var1;
        thisRef.m_radius = 0.0;
        return;
    },

    ojcsShapeclone : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcsCircleShape.Create(); // type is REFERENCE value type is REFERENCE
        ojcsCircleShape.VOIDinit(var0);
        var local_1_REFERENCE = var0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2903cf44
        var var3 = local_1_REFERENCE.m_p; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1bda049f
        var var5 = thisRef.m_p.x; // type is FLOAT value type is FLOAT
        var3.x = var5;
        var var7 = local_1_REFERENCE.m_p; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@29019c3b
        var var9 = thisRef.m_p.y; // type is FLOAT value type is FLOAT
        var7.y = var9;
        var var10 = local_1_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2903cf44
        var var11 = thisRef.m_radius; // type is FLOAT value type is FLOAT
        var10.m_radius = var11;
        return local_1_REFERENCE;
    },

    INTgetChildCount : function(thisRef) {
        var __label__ = null;
        return 1;
    },

    VOIDcomputeAABBojcAABBojcTransformINT : function(thisRef,aabb,transform,childIndex) {
        var __label__ = null;
        var local_4_REFERENCE = transform.q; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@56952596
        var local_5_REFERENCE = transform.p; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7927e14e
        var local_6_FLOAT = (((local_4_REFERENCE.c * thisRef.m_p.x) - (local_4_REFERENCE.s * thisRef.m_p.y)) + local_5_REFERENCE.x); // type is FLOAT value type is FLOAT
        var local_7_FLOAT = (((local_4_REFERENCE.s * thisRef.m_p.x) + (local_4_REFERENCE.c * thisRef.m_p.y)) + local_5_REFERENCE.y); // type is FLOAT value type is FLOAT
        var var36 = aabb.lowerBound; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@25c24fb3
        var var39 = (local_6_FLOAT - thisRef.m_radius); // type is FLOAT value type is FLOAT
        var36.x = var39;
        var var40 = aabb.lowerBound; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@b5c45ba
        var var43 = (local_7_FLOAT - thisRef.m_radius); // type is FLOAT value type is FLOAT
        var40.y = var43;
        var var44 = aabb.upperBound; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@749a68d2
        var var47 = (local_6_FLOAT + thisRef.m_radius); // type is FLOAT value type is FLOAT
        var44.x = var47;
        var var48 = aabb.upperBound; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3271da9e
        var var51 = (local_7_FLOAT + thisRef.m_radius); // type is FLOAT value type is FLOAT
        var48.y = var51;
        return;
    },

    VOIDcomputeMassojcsMassDataFLOAT : function(thisRef,massData,density) {
        var __label__ = null;
        var var4 = (((density * 3.1415927) * thisRef.m_radius) * thisRef.m_radius); // type is FLOAT value type is FLOAT
        massData.mass = var4;
        var var5 = massData.center; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@200a0ece
        var var7 = thisRef.m_p.x; // type is FLOAT value type is FLOAT
        var5.x = var7;
        var var8 = massData.center; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@de14eac
        var var10 = thisRef.m_p.y; // type is FLOAT value type is FLOAT
        var8.y = var10;
        var var28 = (massData.mass * (((0.5 * thisRef.m_radius) * thisRef.m_radius) + ((thisRef.m_p.x * thisRef.m_p.x) + (thisRef.m_p.y * thisRef.m_p.y)))); // type is FLOAT value type is FLOAT
        massData.I = var28;
        return;
    },

    classInitCheck : function() {
        if (!ojcsCircleShape.__initialized) {
            ojcsCircleShape.__initialized = true;
            var thePrototype = ojcsCircleShape.Create.prototype;
            thePrototype.instanceOf = ojcsCircleShape.instanceOf;
            thePrototype.ClassgetClass = ojcsCircleShape.ClassgetClass;
            thePrototype.VOIDcomputeMassojcsMassDataFLOAT = ojcsCircleShape.VOIDcomputeMassojcsMassDataFLOAT;
            thePrototype.VOIDcomputeAABBojcAABBojcTransformINT = ojcsCircleShape.VOIDcomputeAABBojcAABBojcTransformINT;
            thePrototype.INTgetChildCount = ojcsCircleShape.INTgetChildCount;
            thePrototype.ojcsShapeclone = ojcsCircleShape.ojcsShapeclone;
            thePrototype.FLOATgetRadius = ojcsShape.FLOATgetRadius;
            thePrototype.ojcsShapeTypegetType = ojcsShape.ojcsShapeTypegetType;
            thePrototype.VOIDsetRadiusFLOAT = ojcsShape.VOIDsetRadiusFLOAT;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojcsShape.classInitCheck();
            jlObject.classInitCheck();
            ojcsCircleShape.VOIDclinit();
        }
    },

};

var ojdFixtureProxy = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 137,
    __implementedTypes : [137,1],

    Create : function() {
        this.aabb = null; // declared in org.jbox2d.dynamics.FixtureProxy
        this.fixture = null; // declared in org.jbox2d.dynamics.FixtureProxy
        this.proxyId = 0; // declared in org.jbox2d.dynamics.FixtureProxy
        this.childIndex = 0; // declared in org.jbox2d.dynamics.FixtureProxy
    },

    instanceOf : function(aType) {
        return ojdFixtureProxy.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdFixtureProxy;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcAABB.Create(); // type is REFERENCE value type is REFERENCE
        ojcAABB.VOIDinit(var0);
        thisRef.aabb = var0;
        return;
    },

    classInitCheck : function() {
        if (!ojdFixtureProxy.__initialized) {
            ojdFixtureProxy.__initialized = true;
            var thePrototype = ojdFixtureProxy.Create.prototype;
            thePrototype.instanceOf = ojdFixtureProxy.instanceOf;
            thePrototype.ClassgetClass = ojdFixtureProxy.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojcsPolygonShape = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 138,
    __implementedTypes : [138,126,1],
    $assertionsDisabled : false, // declared in org.jbox2d.collision.shapes.PolygonShape

    Create : function() {
        this.m_type = null; // declared in org.jbox2d.collision.shapes.Shape
        this.m_radius = 0; // declared in org.jbox2d.collision.shapes.Shape
        this.m_centroid = null; // declared in org.jbox2d.collision.shapes.PolygonShape
        this.pool1 = null; // declared in org.jbox2d.collision.shapes.PolygonShape
        this.pool2 = null; // declared in org.jbox2d.collision.shapes.PolygonShape
        this.pool3 = null; // declared in org.jbox2d.collision.shapes.PolygonShape
        this.pool4 = null; // declared in org.jbox2d.collision.shapes.PolygonShape
        this.poolt1 = null; // declared in org.jbox2d.collision.shapes.PolygonShape
        this.m_count = 0; // declared in org.jbox2d.collision.shapes.PolygonShape
        this.m_vertices = null; // declared in org.jbox2d.collision.shapes.PolygonShape
        this.m_normals = null; // declared in org.jbox2d.collision.shapes.PolygonShape
    },

    instanceOf : function(aType) {
        return ojcsPolygonShape.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcsPolygonShape;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcsPolygonShape.BOOLEANdesiredAssertionStatus(ojcsPolygonShape); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_9_13 : for(;;) switch (__label__) {
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_9_13;
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_9_13;
        }
        ojcsPolygonShape.$assertionsDisabled = var1;
        return;
    },

    VOIDinit : function(thisRef) {
        var local_1_INT = null; // type is INT # of inits = 6
        var __label__ = null;
        $S_0 : {
        // NORMAL
            ojcsShape.VOIDinitojcsShapeType(thisRef,ojcsShapeType.POLYGON);
            var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var1);
            thisRef.m_centroid = var1;
            var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var2);
            thisRef.pool1 = var2;
            var var3 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var3);
            thisRef.pool2 = var3;
            var var4 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var4);
            thisRef.pool3 = var4;
            var var5 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var5);
            thisRef.pool4 = var5;
            var var6 = new ojcTransform.Create(); // type is REFERENCE value type is REFERENCE
            ojcTransform.VOIDinit(var6);
            thisRef.poolt1 = var6;
            thisRef.m_count = 0;
            var var7 = bytecoder.newArray(8,null); // type is REFERENCE value type is REFERENCE
            thisRef.m_vertices = var7;
            local_1_INT = 0; // type is INT value type is INT
            __label__ = 89;
            }
        $L_89 : for (;;) {
            $S_89 : {
            // NORMAL
                var var10 = local_1_INT; // type is INT value type is INT
                var var12 = thisRef.m_vertices.data.length; // type is INT value type is INT
                if ((var10 >= var12)) {
                    __label__ = 117;
                    break $S_89;
                }
                __label__ = 98;
                }
            for(;;) switch (__label__) {
                case 98 :
                // NORMAL
                    var var19 = thisRef.m_vertices; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@332a01b5
                    var var20 = local_1_INT; // type is INT value type is INT
                    var var21 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
                    ojcVec2.VOIDinit(var21);
                    var19.data[var20] = var21;
                    local_1_INT = (local_1_INT + 1); // type is INT value type is INT
                    __label__ = 89;
                    continue $L_89;
                case 117 :
                // NORMAL
                    $S_117 : {
                    // NORMAL
                        var var13 = bytecoder.newArray(8,null); // type is REFERENCE value type is REFERENCE
                        thisRef.m_normals = var13;
                        local_1_INT = 0; // type is INT value type is INT
                        __label__ = 128;
                        }
                    $L_128 : for (;;) {
                        $S_128 : {
                        // NORMAL
                            var var15 = local_1_INT; // type is INT value type is INT
                            var var17 = thisRef.m_normals.data.length; // type is INT value type is INT
                            if ((var15 >= var17)) {
                                __label__ = 156;
                                break $S_128;
                            }
                            __label__ = 137;
                            }
                        for(;;) switch (__label__) {
                            case 156 :
                            // NORMAL
                                thisRef.VOIDsetRadiusFLOAT(thisRef,0.01);
                                thisRef.m_centroid.VOIDsetZero(thisRef.m_centroid);
                                return;
                            case 137 :
                            // NORMAL
                                var var22 = thisRef.m_normals; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@568bca5e
                                var var23 = local_1_INT; // type is INT value type is INT
                                var var24 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
                                ojcVec2.VOIDinit(var24);
                                var22.data[var23] = var24;
                                local_1_INT = (local_1_INT + 1); // type is INT value type is INT
                                __label__ = 128;
                                continue $L_128;
                        }
                    }
            }
        }
    },

    VOIDsetA1ojcVec2INT : function(thisRef,vertices,count) {
        var __label__ = null;
        thisRef.VOIDsetA1ojcVec2INTojpaVec2ArrayojpaIntArray(thisRef,vertices,count,null,null);
        return;
    },

    VOIDsetA1ojcVec2INTojpaVec2ArrayojpaIntArray : function(thisRef,verts,num,vecPool,intPool) {
        var local_7_INT = null; // type is INT # of inits = 8
        var var62 = null; // type is INT # of inits = 2
        var local_11_INT = null; // type is INT # of inits = 4
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 6
        var local_9_REFERENCE = null; // type is REFERENCE # of inits = 4
        var local_12_INT = null; // type is INT # of inits = 8
        var local_12_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_8_FLOAT = null; // type is FLOAT # of inits = 3
        var local_14_INT = null; // type is INT # of inits = 1
        var local_10_INT = null; // type is INT # of inits = 4
        var var25 = null; // type is REFERENCE # of inits = 2
        var local_15_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_10_FLOAT = null; // type is FLOAT # of inits = 1
        var local_16_FLOAT = null; // type is FLOAT # of inits = 1
        var local_13_INT = null; // type is INT # of inits = 6
        var local_14_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_5_INT = null; // type is INT # of inits = 5
        var var8 = null; // type is REFERENCE # of inits = 2
        var local_9_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcsPolygonShape.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 25;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_25_6 : for(;;) switch (__label__) {
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    if ((3 > num)) {
                        __label__ = 17;
                        break $S_6;
                    }
                    __label__ = 11;
                    }
                $M_17_11 : for(;;) switch (__label__) {
                    case 17 :
                    // NORMAL
                        var var119 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                        jlAssertionError.VOIDinit(var119);
                        throw var119;
                    case 11 :
                    // NORMAL
                        if ((num <= 8)) {
                            __label__ = 25;
                            continue $M_25_6;
                        }
                        __label__ = 17;
                        continue $M_17_11;
                }
            case 25 :
            // NORMAL
                $S_25 : {
                // NORMAL
                    if ((num >= 3)) {
                        __label__ = 37;
                        break $S_25;
                    }
                    __label__ = 30;
                    }
                for(;;) switch (__label__) {
                    case 37 :
                    // NORMAL
                        $S_37 : {
                        // NORMAL
                            var var1 = ojcMathUtils.INTminINTINT(num,8); // type is INT value type is INT
                            local_5_INT = var1; // type is INT value type is INT
                            if (vecPool == null ) {
                                __label__ = 58;
                                break $S_37;
                            }
                            __label__ = 49;
                            }
                        $M_49_58 : for(;;) switch (__label__) {
                            case 58 :
                            // NORMAL
                                var8 = bytecoder.newArray(local_5_INT,null); // type is REFERENCE value type is REFERENCE
                                break $M_49_58;
                            case 49 :
                            // NORMAL
                                var var5 = vecPool.A1ojcVec2getINT(vecPool,local_5_INT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@21df00cb
                                var8 = var5; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@63ee4762
                                break $M_49_58;
                        }
                        $S_63 : {
                        // NORMAL
                            local_6_REFERENCE = var8; // type is REFERENCE value type is REFERENCE
                            local_7_INT = 0; // type is INT value type is INT
                            __label__ = 68;
                            }
                        $L_68 : for (;;) {
                            $S_68 : {
                            // NORMAL
                                var var12 = local_7_INT; // type is INT value type is INT
                                var var13 = local_5_INT; // type is INT value type is INT
                                if ((var12 >= var13)) {
                                    __label__ = 90;
                                    break $S_68;
                                }
                                __label__ = 75;
                                }
                            for(;;) switch (__label__) {
                                case 75 :
                                // NORMAL
                                    var var86 = local_6_REFERENCE; // type is REFERENCE value type is REFERENCE
                                    var var87 = local_7_INT; // type is INT value type is INT
                                    var var89 = verts.data[local_7_INT]; // type is REFERENCE value type is REFERENCE
                                    var86.data[var87] = var89;
                                    local_7_INT = (local_7_INT + 1); // type is INT value type is INT
                                    __label__ = 68;
                                    continue $L_68;
                                case 90 :
                                // NORMAL
                                    $S_90 : {
                                    // NORMAL
                                        local_7_INT = 0; // type is INT value type is INT
                                        var var16 = local_6_REFERENCE.data[0]; // type is REFERENCE value type is REFERENCE
                                        local_8_FLOAT = var16.x; // type is FLOAT value type is FLOAT
                                        local_9_INT = 1; // type is INT value type is INT
                                        __label__ = 105;
                                        }
                                    $L_105 : for (;;) {
                                        $S_105 : {
                                        // NORMAL
                                            var var22 = local_9_INT; // type is INT value type is INT
                                            if ((var22 >= num)) {
                                                __label__ = 171;
                                                break $S_105;
                                            }
                                            __label__ = 111;
                                            }
                                        for(;;) switch (__label__) {
                                            case 111 :
                                            // NORMAL
                                                $S_111 : {
                                                // NORMAL
                                                    var var92 = local_6_REFERENCE.data[local_9_INT]; // type is REFERENCE value type is REFERENCE
                                                    local_10_FLOAT = var92.x; // type is FLOAT value type is FLOAT
                                                    var var96 = local_10_FLOAT; // type is FLOAT value type is FLOAT
                                                    var var97 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                                                    if ((var96 > var97)) {
                                                        __label__ = 157;
                                                        break $S_111;
                                                    }
                                                    __label__ = 129;
                                                    }
                                                $M_129_157 : for(;;) switch (__label__) {
                                                    case 129 :
                                                    // NORMAL
                                                        $S_129 : {
                                                        // NORMAL
                                                            var var99 = local_10_FLOAT; // type is FLOAT value type is FLOAT
                                                            var var100 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                                                            if ((var99 != var100)) {
                                                                break $M_129_157;
                                                            }
                                                            }
                                                        var var104 = local_6_REFERENCE.data[local_9_INT]; // type is REFERENCE value type is REFERENCE
                                                        var var105 = var104.y; // type is FLOAT value type is FLOAT
                                                        var var108 = local_6_REFERENCE.data[local_7_INT]; // type is REFERENCE value type is REFERENCE
                                                        var var109 = var108.y; // type is FLOAT value type is FLOAT
                                                        if ((var105 >= var109)) {
                                                            break $M_129_157;
                                                        }
                                                        __label__ = 157;
                                                        continue $M_129_157;
                                                    case 157 :
                                                    // NORMAL
                                                        local_7_INT = local_9_INT; // type is INT value type is INT
                                                        local_8_FLOAT = local_10_FLOAT; // type is FLOAT value type is FLOAT
                                                        break $M_129_157;
                                                }
                                                local_9_INT = (local_9_INT + 1); // type is INT value type is INT
                                                __label__ = 105;
                                                continue $L_105;
                                            case 171 :
                                            // NORMAL
                                                $S_171 : {
                                                // NORMAL
                                                    if (intPool == null ) {
                                                        __label__ = 186;
                                                        break $S_171;
                                                    }
                                                    __label__ = 176;
                                                    }
                                                $M_186_176 : for(;;) switch (__label__) {
                                                    case 186 :
                                                    // NORMAL
                                                        var25 = bytecoder.newArray(8,0); // type is REFERENCE value type is REFERENCE
                                                        break $M_186_176;
                                                    case 176 :
                                                    // NORMAL
                                                        var var24 = intPool.A1INTgetINT(intPool,8); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1150dba8
                                                        var25 = var24; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@5b8500f7
                                                        break $M_186_176;
                                                }
                                                $S_190 : {
                                                // NORMAL
                                                    local_9_REFERENCE = var25; // type is REFERENCE value type is REFERENCE
                                                    local_10_INT = 0; // type is INT value type is INT
                                                    local_11_INT = local_7_INT; // type is INT value type is INT
                                                    __label__ = 199;
                                                    }
                                                $L_199 : for (;;) {
                                                    $S_199 : {
                                                    // NORMAL
                                                        var var32 = local_9_REFERENCE; // type is REFERENCE value type is REFERENCE
                                                        var var33 = local_10_INT; // type is INT value type is INT
                                                        var var34 = local_11_INT; // type is INT value type is INT
                                                        var32.data[var33] = var34;
                                                        local_12_INT = 0; // type is INT value type is INT
                                                        local_13_INT = 1; // type is INT value type is INT
                                                        __label__ = 212;
                                                        }
                                                    $L_212 : for (;;) {
                                                        $S_212 : {
                                                        // NORMAL
                                                            var var39 = local_13_INT; // type is INT value type is INT
                                                            var var40 = local_5_INT; // type is INT value type is INT
                                                            if ((var39 >= var40)) {
                                                                __label__ = 334;
                                                                break $S_212;
                                                            }
                                                            __label__ = 219;
                                                            }
                                                        for(;;) switch (__label__) {
                                                            case 219 :
                                                            // NORMAL
                                                                $S_219 : {
                                                                // NORMAL
                                                                    var var120 = local_12_INT; // type is INT value type is INT
                                                                    var var121 = local_11_INT; // type is INT value type is INT
                                                                    if ((var120 != var121)) {
                                                                        __label__ = 233;
                                                                        break $S_219;
                                                                    }
                                                                    __label__ = 226;
                                                                    }
                                                                $M_233_226 : for(;;) switch (__label__) {
                                                                    case 233 :
                                                                    // NORMAL
                                                                        $S_233 : {
                                                                        // NORMAL
                                                                            var var122 = thisRef.pool1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@31539c7c
                                                                            var var125 = local_6_REFERENCE.data[local_12_INT]; // type is REFERENCE value type is REFERENCE
                                                                            var var126 = var122.ojcVec2setojcVec2(var122,var125); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@68530bc5
                                                                            var var127 = local_6_REFERENCE; // type is REFERENCE value type is REFERENCE
                                                                            var var130 = local_9_REFERENCE.data[local_10_INT]; // type is INT value type is INT
                                                                            var var131 = var127.data[var130]; // type is REFERENCE value type is REFERENCE
                                                                            var var132 = var126.ojcVec2subLocalojcVec2(var126,var131); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@183b306
                                                                            local_14_REFERENCE = var132; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3dc375e0
                                                                            var var134 = thisRef.pool2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1699b505
                                                                            var var137 = local_6_REFERENCE.data[local_13_INT]; // type is REFERENCE value type is REFERENCE
                                                                            var var138 = var134.ojcVec2setojcVec2(var134,var137); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3b047bd6
                                                                            var var139 = local_6_REFERENCE; // type is REFERENCE value type is REFERENCE
                                                                            var var142 = local_9_REFERENCE.data[local_10_INT]; // type is INT value type is INT
                                                                            var var143 = var139.data[var142]; // type is REFERENCE value type is REFERENCE
                                                                            var var144 = var138.ojcVec2subLocalojcVec2(var138,var143); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4bf95250
                                                                            local_15_REFERENCE = var144; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@34c0dde7
                                                                            var var148 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_14_REFERENCE,local_15_REFERENCE); // type is FLOAT value type is FLOAT
                                                                            local_16_FLOAT = var148; // type is FLOAT value type is FLOAT
                                                                            var var151 = local_16_FLOAT; // type is FLOAT value type is FLOAT
                                                                            if ((var151 >= 0.0)) {
                                                                                __label__ = 303;
                                                                                break $S_233;
                                                                            }
                                                                            __label__ = 299;
                                                                            }
                                                                        $M_299_303 : for(;;) switch (__label__) {
                                                                            case 303 :
                                                                            // NORMAL
                                                                                $S_303 : {
                                                                                // NORMAL
                                                                                    var var155 = local_16_FLOAT; // type is FLOAT value type is FLOAT
                                                                                    if ((var155 != 0.0)) {
                                                                                        break $M_233_226;
                                                                                    }
                                                                                    }
                                                                                $S_310 : {
                                                                                // NORMAL
                                                                                    var var158 = local_15_REFERENCE.FLOATlengthSquared(local_15_REFERENCE); // type is FLOAT value type is FLOAT
                                                                                    var var160 = local_14_REFERENCE.FLOATlengthSquared(local_14_REFERENCE); // type is FLOAT value type is FLOAT
                                                                                    if ((var158 <= var160)) {
                                                                                        break $M_233_226;
                                                                                    }
                                                                                    }
                                                                                local_12_INT = local_13_INT; // type is INT value type is INT
                                                                                break $M_233_226;
                                                                            case 299 :
                                                                            // NORMAL
                                                                                local_12_INT = local_13_INT; // type is INT value type is INT
                                                                                __label__ = 303;
                                                                                continue $M_299_303;
                                                                        }
                                                                    case 226 :
                                                                    // NORMAL
                                                                        local_12_INT = local_13_INT; // type is INT value type is INT
                                                                        break $M_233_226;
                                                                }
                                                                local_13_INT = (local_13_INT + 1); // type is INT value type is INT
                                                                __label__ = 212;
                                                                continue $L_212;
                                                            case 334 :
                                                            // NORMAL
                                                                $S_334 : {
                                                                // NORMAL
                                                                    local_10_INT = (local_10_INT + 1); // type is INT value type is INT
                                                                    local_11_INT = local_12_INT; // type is INT value type is INT
                                                                    var var43 = local_12_INT; // type is INT value type is INT
                                                                    var var44 = local_7_INT; // type is INT value type is INT
                                                                    if ((var43 != var44)) {
                                                                        __label__ = 351;
                                                                        break $S_334;
                                                                    }
                                                                    __label__ = 348;
                                                                    }
                                                                for(;;) switch (__label__) {
                                                                    case 348 :
                                                                    // NORMAL
                                                                        $S_348 : {
                                                                        // NORMAL
                                                                            }
                                                                        $S_354 : {
                                                                        // NORMAL
                                                                            var var45 = local_10_INT; // type is INT value type is INT
                                                                            thisRef.m_count = var45;
                                                                            local_12_INT = 0; // type is INT value type is INT
                                                                            __label__ = 363;
                                                                            }
                                                                        $L_363 : for (;;) {
                                                                            $S_363 : {
                                                                            // NORMAL
                                                                                var var47 = local_12_INT; // type is INT value type is INT
                                                                                var var48 = thisRef.m_count; // type is INT value type is INT
                                                                                if ((var47 >= var48)) {
                                                                                    __label__ = 421;
                                                                                    break $S_363;
                                                                                }
                                                                                __label__ = 372;
                                                                                }
                                                                            for(;;) switch (__label__) {
                                                                                case 421 :
                                                                                // NORMAL
                                                                                    $S_421 : {
                                                                                    // NORMAL
                                                                                        local_12_REFERENCE = thisRef.pool1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@577ed3aa
                                                                                        local_13_INT = 0; // type is INT value type is INT
                                                                                        __label__ = 430;
                                                                                        }
                                                                                    $L_430 : for (;;) {
                                                                                        $S_430 : {
                                                                                        // NORMAL
                                                                                            var var52 = local_13_INT; // type is INT value type is INT
                                                                                            var var53 = thisRef.m_count; // type is INT value type is INT
                                                                                            if ((var52 >= var53)) {
                                                                                                __label__ = 542;
                                                                                                break $S_430;
                                                                                            }
                                                                                            __label__ = 439;
                                                                                            }
                                                                                        for(;;) switch (__label__) {
                                                                                            case 542 :
                                                                                            // NORMAL
                                                                                                thisRef.VOIDcomputeCentroidToOutA1ojcVec2INTojcVec2(thisRef,thisRef.m_vertices,thisRef.m_count,thisRef.m_centroid);
                                                                                                return;
                                                                                            case 439 :
                                                                                            // NORMAL
                                                                                                $S_439 : {
                                                                                                // NORMAL
                                                                                                    local_14_INT = local_13_INT; // type is INT value type is INT
                                                                                                    var var58 = (local_13_INT + 1); // type is INT value type is INT
                                                                                                    var var59 = thisRef.m_count; // type is INT value type is INT
                                                                                                    if ((var58 >= var59)) {
                                                                                                        __label__ = 461;
                                                                                                        break $S_439;
                                                                                                    }
                                                                                                    __label__ = 454;
                                                                                                    }
                                                                                                $M_461_454 : for(;;) switch (__label__) {
                                                                                                    case 461 :
                                                                                                    // NORMAL
                                                                                                        var62 = 0; // type is INT value type is INT
                                                                                                        break $M_461_454;
                                                                                                    case 454 :
                                                                                                    // NORMAL
                                                                                                        var62 = (local_13_INT + 1); // type is INT value type is INT
                                                                                                        break $M_461_454;
                                                                                                }
                                                                                                $S_462 : {
                                                                                                // NORMAL
                                                                                                    var local_15_INT = var62; // type is INT value type is INT
                                                                                                    var var65 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7ad51401
                                                                                                    var var68 = thisRef.m_vertices.data[local_15_INT]; // type is REFERENCE value type is REFERENCE
                                                                                                    var var69 = var65.ojcVec2setojcVec2(var65,var68); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@c9475dd
                                                                                                    var var72 = thisRef.m_vertices.data[local_14_INT]; // type is REFERENCE value type is REFERENCE
                                                                                                    var var73 = var69.ojcVec2subLocalojcVec2(var69,var72); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@14567552
                                                                                                    var var74 = ojcsPolygonShape.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                                                                                                    if ((var74 != 0)) {
                                                                                                        __label__ = 512;
                                                                                                        break $S_462;
                                                                                                    }
                                                                                                    __label__ = 493;
                                                                                                    }
                                                                                                $M_512_493 : for(;;) switch (__label__) {
                                                                                                    case 493 :
                                                                                                    // NORMAL
                                                                                                        $S_493 : {
                                                                                                        // NORMAL
                                                                                                            var var76 = local_12_REFERENCE.FLOATlengthSquared(local_12_REFERENCE); // type is FLOAT value type is FLOAT
                                                                                                            if ((var76 > 1.4210855E-14)) {
                                                                                                                __label__ = 512;
                                                                                                                continue $M_512_493;
                                                                                                            }
                                                                                                            }
                                                                                                        var var115 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                                                                                        jlAssertionError.VOIDinit(var115);
                                                                                                        throw var115;
                                                                                                    case 512 :
                                                                                                    // NORMAL
                                                                                                        var var78 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7ad51401
                                                                                                        var var81 = thisRef.m_normals.data[local_13_INT]; // type is REFERENCE value type is REFERENCE
                                                                                                        ojcVec2.VOIDcrossToOutUnsafeojcVec2FLOATojcVec2(var78,1.0,var81);
                                                                                                        var var84 = thisRef.m_normals.data[local_13_INT]; // type is REFERENCE value type is REFERENCE
                                                                                                        var var85 = var84.FLOATnormalize(var84); // type is FLOAT value type is FLOAT
                                                                                                        local_13_INT = (local_13_INT + 1); // type is INT value type is INT
                                                                                                        __label__ = 430;
                                                                                                        continue $L_430;
                                                                                                }
                                                                                        }
                                                                                    }
                                                                                case 372 :
                                                                                // NORMAL
                                                                                    $S_372 : {
                                                                                    // NORMAL
                                                                                        var var168 = thisRef.m_vertices.data[local_12_INT]; // type is REFERENCE value type is REFERENCE
                                                                                        if (var168 != null ) {
                                                                                            __label__ = 396;
                                                                                            break $S_372;
                                                                                        }
                                                                                        __label__ = 382;
                                                                                        }
                                                                                    $M_382_396 : for(;;) switch (__label__) {
                                                                                        case 396 :
                                                                                        // NORMAL
                                                                                            var var174 = thisRef.m_vertices.data[local_12_INT]; // type is REFERENCE value type is REFERENCE
                                                                                            var var175 = local_6_REFERENCE; // type is REFERENCE value type is REFERENCE
                                                                                            var var178 = local_9_REFERENCE.data[local_12_INT]; // type is INT value type is INT
                                                                                            var var179 = var175.data[var178]; // type is REFERENCE value type is REFERENCE
                                                                                            var var180 = var174.ojcVec2setojcVec2(var174,var179); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@153cde5a
                                                                                            local_12_INT = (local_12_INT + 1); // type is INT value type is INT
                                                                                            __label__ = 363;
                                                                                            continue $L_363;
                                                                                        case 382 :
                                                                                        // NORMAL
                                                                                            var var169 = thisRef.m_vertices; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@347eacd4
                                                                                            var var170 = local_12_INT; // type is INT value type is INT
                                                                                            var var171 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
                                                                                            ojcVec2.VOIDinit(var171);
                                                                                            var169.data[var170] = var171;
                                                                                            __label__ = 396;
                                                                                            continue $M_382_396;
                                                                                    }
                                                                            }
                                                                        }
                                                                    case 351 :
                                                                    // NORMAL
                                                                        __label__ = 199;
                                                                        continue $L_199;
                                                                }
                                                        }
                                                    }
                                                }
                                        }
                                    }
                            }
                        }
                    case 30 :
                    // NORMAL
                        thisRef.VOIDsetAsBoxFLOATFLOAT(thisRef,1.0,1.0);
                        return;
                }
        }
    },

    VOIDsetAsBoxFLOATFLOAT : function(thisRef,hx,hy) {
        var __label__ = null;
        thisRef.m_count = 4;
        var var1 = thisRef.m_vertices.data[0]; // type is REFERENCE value type is REFERENCE
        var var4 = var1.ojcVec2setFLOATFLOAT(var1,(-hx),(-hy)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5ea005ff
        var var6 = thisRef.m_vertices.data[1]; // type is REFERENCE value type is REFERENCE
        var var8 = var6.ojcVec2setFLOATFLOAT(var6,hx,(-hy)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7d0285dc
        var var10 = thisRef.m_vertices.data[2]; // type is REFERENCE value type is REFERENCE
        var var11 = var10.ojcVec2setFLOATFLOAT(var10,hx,hy); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7694b6e1
        var var13 = thisRef.m_vertices.data[3]; // type is REFERENCE value type is REFERENCE
        var var15 = var13.ojcVec2setFLOATFLOAT(var13,(-hx),hy); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@67ba0133
        var var17 = thisRef.m_normals.data[0]; // type is REFERENCE value type is REFERENCE
        var var18 = var17.ojcVec2setFLOATFLOAT(var17,0.0,-1.0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@39eb6fc6
        var var20 = thisRef.m_normals.data[1]; // type is REFERENCE value type is REFERENCE
        var var21 = var20.ojcVec2setFLOATFLOAT(var20,1.0,0.0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@502e2142
        var var23 = thisRef.m_normals.data[2]; // type is REFERENCE value type is REFERENCE
        var var24 = var23.ojcVec2setFLOATFLOAT(var23,0.0,1.0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3dea618
        var var26 = thisRef.m_normals.data[3]; // type is REFERENCE value type is REFERENCE
        var var27 = var26.ojcVec2setFLOATFLOAT(var26,-1.0,0.0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@345a8cc9
        thisRef.m_centroid.VOIDsetZero(thisRef.m_centroid);
        return;
    },

    VOIDcomputeCentroidToOutA1ojcVec2INTojcVec2 : function(thisRef,vs,count,out) {
        var var28 = null; // type is REFERENCE # of inits = 2
        var local_4_FLOAT = null; // type is FLOAT # of inits = 3
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_7_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_10_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_11_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_9_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcsPolygonShape.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 19;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_6_19 : for(;;) switch (__label__) {
            case 19 :
            // NORMAL
                $S_19 : {
                // NORMAL
                    var var2 = out.ojcVec2setFLOATFLOAT(out,0.0,0.0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@10c46625
                    local_4_FLOAT = 0.0; // type is FLOAT value type is FLOAT
                    local_5_REFERENCE = thisRef.pool1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6f6eae3e
                    local_5_REFERENCE.VOIDsetZero(local_5_REFERENCE);
                    local_6_REFERENCE = thisRef.pool2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5c667d17
                    local_7_REFERENCE = thisRef.pool3; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@67e3a058
                    var local_8_FLOAT = 0.33333334; // type is FLOAT value type is FLOAT
                    local_9_INT = 0; // type is INT value type is INT
                    __label__ = 59;
                    }
                $L_59 : for (;;) {
                    $S_59 : {
                    // NORMAL
                        var var16 = local_9_INT; // type is INT value type is INT
                        if ((var16 >= count)) {
                            __label__ = 185;
                            break $S_59;
                        }
                        __label__ = 65;
                        }
                    for(;;) switch (__label__) {
                        case 185 :
                        // NORMAL
                            $S_185 : {
                            // NORMAL
                                var var65 = ojcsPolygonShape.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                                if ((var65 != 0)) {
                                    __label__ = 207;
                                    break $S_185;
                                }
                                __label__ = 191;
                                }
                            $M_207_191 : for(;;) switch (__label__) {
                                case 191 :
                                // NORMAL
                                    $S_191 : {
                                    // NORMAL
                                        var var66 = local_4_FLOAT; // type is FLOAT value type is FLOAT
                                        if ((var66 > 1.1920929E-7)) {
                                            __label__ = 207;
                                            continue $M_207_191;
                                        }
                                        }
                                    var var71 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                    jlAssertionError.VOIDinit(var71);
                                    throw var71;
                                case 207 :
                                // NORMAL
                                    var var70 = out.ojcVec2mulLocalFLOAT(out,(1.0 / local_4_FLOAT)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@542507cf
                                    return;
                            }
                        case 65 :
                        // NORMAL
                            $S_65 : {
                            // NORMAL
                                local_10_REFERENCE = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2d50d13b
                                var var20 = vs.data[local_9_INT]; // type is REFERENCE value type is REFERENCE
                                local_11_REFERENCE = var20; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3e3bb450
                                var var23 = (local_9_INT + 1); // type is INT value type is INT
                                if ((var23 >= count)) {
                                    __label__ = 92;
                                    break $S_65;
                                }
                                __label__ = 83;
                                }
                            $M_92_83 : for(;;) switch (__label__) {
                                case 83 :
                                // NORMAL
                                    var var27 = vs.data[(local_9_INT + 1)]; // type is REFERENCE value type is REFERENCE
                                    var28 = var27; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@30c6ddaa
                                    break $M_92_83;
                                case 92 :
                                // NORMAL
                                    var var24 = vs.data[0]; // type is REFERENCE value type is REFERENCE
                                    var28 = var24; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1522cacd
                                    break $M_92_83;
                            }
                            var local_12_REFERENCE = var28; // type is REFERENCE value type is REFERENCE
                            var var32 = local_6_REFERENCE.ojcVec2setojcVec2(local_6_REFERENCE,local_11_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4e205c2b
                            var var34 = var32.ojcVec2subLocalojcVec2(var32,local_10_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@21410e3d
                            var var37 = local_7_REFERENCE.ojcVec2setojcVec2(local_7_REFERENCE,local_12_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5b5a8b2d
                            var var39 = var37.ojcVec2subLocalojcVec2(var37,local_10_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@27bdf4f6
                            var var42 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_6_REFERENCE,local_7_REFERENCE); // type is FLOAT value type is FLOAT
                            var local_13_FLOAT = var42; // type is FLOAT value type is FLOAT
                            var local_14_FLOAT = (0.5 * local_13_FLOAT); // type is FLOAT value type is FLOAT
                            local_4_FLOAT = (local_4_FLOAT + local_14_FLOAT); // type is FLOAT value type is FLOAT
                            var var55 = local_6_REFERENCE.ojcVec2setojcVec2(local_6_REFERENCE,local_10_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6bb0352e
                            var var57 = var55.ojcVec2addLocalojcVec2(var55,local_11_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@42a9fe83
                            var var59 = var57.ojcVec2addLocalojcVec2(var57,local_12_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4da50618
                            var var62 = var59.ojcVec2mulLocalFLOAT(var59,(local_14_FLOAT * 0.33333334)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@577411e
                            var var64 = out.ojcVec2addLocalojcVec2(out,local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6f041ddb
                            local_9_INT = (local_9_INT + 1); // type is INT value type is INT
                            __label__ = 59;
                            continue $L_59;
                    }
                }
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    if ((count >= 3)) {
                        __label__ = 19;
                        continue $M_6_19;
                    }
                    }
                var var1 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var1);
                throw var1;
        }
    },

    A1ojcVec2getVertices : function(thisRef) {
        var __label__ = null;
        return thisRef.m_vertices;
    },

    INTgetVertexCount : function(thisRef) {
        var __label__ = null;
        return thisRef.m_count;
    },

    ojcsShapeclone : function(thisRef) {
        var local_2_INT = null; // type is INT # of inits = 3
        var local_1_REFERENCE = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = new ojcsPolygonShape.Create(); // type is REFERENCE value type is REFERENCE
            ojcsPolygonShape.VOIDinit(var0);
            local_1_REFERENCE = var0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@71cba9bf
            var var5 = local_1_REFERENCE.m_centroid.ojcVec2setojcVec2(local_1_REFERENCE.m_centroid,thisRef.m_centroid); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4f06b8fe
            local_2_INT = 0; // type is INT value type is INT
            __label__ = 22;
            }
        $L_22 : for (;;) {
            $S_22 : {
            // NORMAL
                var var8 = local_2_INT; // type is INT value type is INT
                var var11 = local_1_REFERENCE.m_normals.data.length; // type is INT value type is INT
                if ((var8 >= var11)) {
                    __label__ = 69;
                    break $S_22;
                }
                __label__ = 31;
                }
            for(;;) switch (__label__) {
                case 69 :
                // NORMAL
                    var var12 = local_1_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@71cba9bf
                    var var13 = thisRef.FLOATgetRadius(thisRef); // type is FLOAT value type is FLOAT
                    var12.VOIDsetRadiusFLOAT(var12,var13);
                    var var14 = local_1_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@71cba9bf
                    var var15 = thisRef.m_count; // type is INT value type is INT
                    var14.m_count = var15;
                    return local_1_REFERENCE;
                case 31 :
                // NORMAL
                    var var20 = local_1_REFERENCE.m_normals.data[local_2_INT]; // type is REFERENCE value type is REFERENCE
                    var var23 = thisRef.m_normals.data[local_2_INT]; // type is REFERENCE value type is REFERENCE
                    var var24 = var20.ojcVec2setojcVec2(var20,var23); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3739cbf2
                    var var28 = local_1_REFERENCE.m_vertices.data[local_2_INT]; // type is REFERENCE value type is REFERENCE
                    var var31 = thisRef.m_vertices.data[local_2_INT]; // type is REFERENCE value type is REFERENCE
                    var var32 = var28.ojcVec2setojcVec2(var28,var31); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1272c7ff
                    local_2_INT = (local_2_INT + 1); // type is INT value type is INT
                    __label__ = 22;
                    continue $L_22;
            }
        }
    },

    INTgetChildCount : function(thisRef) {
        var __label__ = null;
        return 1;
    },

    VOIDcomputeAABBojcAABBojcTransformINT : function(thisRef,aabb,xf,childIndex) {
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 2
        var var111 = null; // type is FLOAT # of inits = 2
        var local_8_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_10_FLOAT = null; // type is FLOAT # of inits = 1
        var var103 = null; // type is REFERENCE # of inits = 1
        var local_9_FLOAT = null; // type is FLOAT # of inits = 1
        var var138 = null; // type is FLOAT # of inits = 2
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_11_INT = null; // type is INT # of inits = 3
        var var130 = null; // type is REFERENCE # of inits = 1
        var local_7_REFERENCE = null; // type is REFERENCE # of inits = 2
        var var129 = null; // type is FLOAT # of inits = 2
        var var120 = null; // type is FLOAT # of inits = 2
        var var121 = null; // type is REFERENCE # of inits = 1
        var var112 = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_4_REFERENCE = aabb.lowerBound; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2f4d7cbd
            local_5_REFERENCE = aabb.upperBound; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@b4c7920
            var var5 = thisRef.m_vertices.data[0]; // type is REFERENCE value type is REFERENCE
            var local_6_REFERENCE = var5; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@7c2d3b62
            local_7_REFERENCE = xf.q; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3323da71
            local_8_REFERENCE = xf.p; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@774fe03c
            var var11 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5e31d843
            var var25 = (((local_7_REFERENCE.c * local_6_REFERENCE.x) - (local_7_REFERENCE.s * local_6_REFERENCE.y)) + local_8_REFERENCE.x); // type is FLOAT value type is FLOAT
            var11.x = var25;
            var var26 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5e31d843
            var var40 = (((local_7_REFERENCE.s * local_6_REFERENCE.x) + (local_7_REFERENCE.c * local_6_REFERENCE.y)) + local_8_REFERENCE.y); // type is FLOAT value type is FLOAT
            var26.y = var40;
            var var41 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7ac26ebb
            var var43 = local_4_REFERENCE.x; // type is FLOAT value type is FLOAT
            var41.x = var43;
            var var44 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7ac26ebb
            var var46 = local_4_REFERENCE.y; // type is FLOAT value type is FLOAT
            var44.y = var46;
            local_11_INT = 1; // type is INT value type is INT
            __label__ = 123;
            }
        $L_123 : for (;;) {
            $S_123 : {
            // NORMAL
                var var49 = local_11_INT; // type is INT value type is INT
                var var50 = thisRef.m_count; // type is INT value type is INT
                if ((var49 >= var50)) {
                    __label__ = 313;
                    break $S_123;
                }
                __label__ = 132;
                }
            for(;;) switch (__label__) {
                case 132 :
                // NORMAL
                    $S_132 : {
                    // NORMAL
                        var var69 = thisRef.m_vertices.data[local_11_INT]; // type is REFERENCE value type is REFERENCE
                        var local_12_REFERENCE = var69; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1fa2028c
                        local_9_FLOAT = (((local_7_REFERENCE.c * local_12_REFERENCE.x) - (local_7_REFERENCE.s * local_12_REFERENCE.y)) + local_8_REFERENCE.x); // type is FLOAT value type is FLOAT
                        local_10_FLOAT = (((local_7_REFERENCE.s * local_12_REFERENCE.x) + (local_7_REFERENCE.c * local_12_REFERENCE.y)) + local_8_REFERENCE.y); // type is FLOAT value type is FLOAT
                        var103 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5e31d843
                        var var105 = local_4_REFERENCE.x; // type is FLOAT value type is FLOAT
                        var var106 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                        if ((var105 >= var106)) {
                            __label__ = 224;
                            break $S_132;
                        }
                        __label__ = 216;
                        }
                    $M_216_224 : for(;;) switch (__label__) {
                        case 216 :
                        // NORMAL
                            var111 = local_4_REFERENCE.x; // type is FLOAT value type is FLOAT
                            break $M_216_224;
                        case 224 :
                        // NORMAL
                            var111 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                            break $M_216_224;
                    }
                    $S_226 : {
                    // NORMAL
                        var103.x = var111;
                        var112 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5e31d843
                        var var114 = local_4_REFERENCE.y; // type is FLOAT value type is FLOAT
                        var var115 = local_10_FLOAT; // type is FLOAT value type is FLOAT
                        if ((var114 >= var115)) {
                            __label__ = 250;
                            break $S_226;
                        }
                        __label__ = 242;
                        }
                    $M_242_250 : for(;;) switch (__label__) {
                        case 242 :
                        // NORMAL
                            var120 = local_4_REFERENCE.y; // type is FLOAT value type is FLOAT
                            break $M_242_250;
                        case 250 :
                        // NORMAL
                            var120 = local_10_FLOAT; // type is FLOAT value type is FLOAT
                            break $M_242_250;
                    }
                    $S_252 : {
                    // NORMAL
                        var112.y = var120;
                        var121 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7ac26ebb
                        var var123 = local_5_REFERENCE.x; // type is FLOAT value type is FLOAT
                        var var124 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                        if ((var123 <= var124)) {
                            __label__ = 276;
                            break $S_252;
                        }
                        __label__ = 268;
                        }
                    $M_276_268 : for(;;) switch (__label__) {
                        case 268 :
                        // NORMAL
                            var129 = local_5_REFERENCE.x; // type is FLOAT value type is FLOAT
                            break $M_276_268;
                        case 276 :
                        // NORMAL
                            var129 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                            break $M_276_268;
                    }
                    $S_278 : {
                    // NORMAL
                        var121.x = var129;
                        var130 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7ac26ebb
                        var var132 = local_5_REFERENCE.y; // type is FLOAT value type is FLOAT
                        var var133 = local_10_FLOAT; // type is FLOAT value type is FLOAT
                        if ((var132 <= var133)) {
                            __label__ = 302;
                            break $S_278;
                        }
                        __label__ = 294;
                        }
                    $M_294_302 : for(;;) switch (__label__) {
                        case 302 :
                        // NORMAL
                            var138 = local_10_FLOAT; // type is FLOAT value type is FLOAT
                            break $M_294_302;
                        case 294 :
                        // NORMAL
                            var138 = local_5_REFERENCE.y; // type is FLOAT value type is FLOAT
                            break $M_294_302;
                    }
                    var130.y = var138;
                    local_11_INT = (local_11_INT + 1); // type is INT value type is INT
                    __label__ = 123;
                    continue $L_123;
                case 313 :
                // NORMAL
                    var var51 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5e31d843
                    var var54 = (var51.x - thisRef.m_radius); // type is FLOAT value type is FLOAT
                    var51.x = var54;
                    var var55 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5e31d843
                    var var58 = (var55.y - thisRef.m_radius); // type is FLOAT value type is FLOAT
                    var55.y = var58;
                    var var59 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7ac26ebb
                    var var62 = (var59.x + thisRef.m_radius); // type is FLOAT value type is FLOAT
                    var59.x = var62;
                    var var63 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7ac26ebb
                    var var66 = (var63.y + thisRef.m_radius); // type is FLOAT value type is FLOAT
                    var63.y = var66;
                    return;
            }
        }
    },

    VOIDcomputeMassojcsMassDataFLOAT : function(thisRef,massData,density) {
        var var79 = null; // type is REFERENCE # of inits = 2
        var local_10_INT = null; // type is INT # of inits = 3
        var local_4_FLOAT = null; // type is FLOAT # of inits = 4
        var local_8_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_7_INT = null; // type is INT # of inits = 3
        var local_9_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_5_FLOAT = null; // type is FLOAT # of inits = 4
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 3
        var var69 = null; // type is REFERENCE # of inits = 1
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcsPolygonShape.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 22;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_22_6 : for(;;) switch (__label__) {
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    var var1 = thisRef.m_count; // type is INT value type is INT
                    if ((var1 >= 3)) {
                        __label__ = 22;
                        continue $M_22_6;
                    }
                    }
                var var168 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var168);
                throw var168;
            case 22 :
            // NORMAL
                $S_22 : {
                // NORMAL
                    local_3_REFERENCE = thisRef.pool1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@581307a3
                    local_3_REFERENCE.VOIDsetZero(local_3_REFERENCE);
                    local_4_FLOAT = 0.0; // type is FLOAT value type is FLOAT
                    local_5_FLOAT = 0.0; // type is FLOAT value type is FLOAT
                    local_6_REFERENCE = thisRef.pool2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2333af4c
                    local_6_REFERENCE.VOIDsetZero(local_6_REFERENCE);
                    local_7_INT = 0; // type is INT value type is INT
                    __label__ = 51;
                    }
                $L_51 : for (;;) {
                    $S_51 : {
                    // NORMAL
                        var var14 = local_7_INT; // type is INT value type is INT
                        var var15 = thisRef.m_count; // type is INT value type is INT
                        if ((var14 >= var15)) {
                            __label__ = 79;
                            break $S_51;
                        }
                        __label__ = 60;
                        }
                    for(;;) switch (__label__) {
                        case 60 :
                        // NORMAL
                            var var16 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5639b90d
                            var var19 = thisRef.m_vertices.data[local_7_INT]; // type is REFERENCE value type is REFERENCE
                            var var20 = var16.ojcVec2addLocalojcVec2(var16,var19); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3354c4b
                            local_7_INT = (local_7_INT + 1); // type is INT value type is INT
                            __label__ = 51;
                            continue $L_51;
                        case 79 :
                        // NORMAL
                            $S_79 : {
                            // NORMAL
                                var var25 = local_6_REFERENCE.ojcVec2mulLocalFLOAT(local_6_REFERENCE,(1.0 / thisRef.m_count)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@22a67ff2
                                var local_7_FLOAT = 0.33333334; // type is FLOAT value type is FLOAT
                                local_8_REFERENCE = thisRef.pool3; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@62c84a1a
                                local_9_REFERENCE = thisRef.pool4; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5c3fc0c0
                                local_10_INT = 0; // type is INT value type is INT
                                __label__ = 111;
                                }
                            $L_111 : for (;;) {
                                $S_111 : {
                                // NORMAL
                                    var var34 = local_10_INT; // type is INT value type is INT
                                    var var35 = thisRef.m_count; // type is INT value type is INT
                                    if ((var34 >= var35)) {
                                        __label__ = 344;
                                        break $S_111;
                                    }
                                    __label__ = 120;
                                    }
                                for(;;) switch (__label__) {
                                    case 344 :
                                    // NORMAL
                                        $S_344 : {
                                        // NORMAL
                                            var var37 = (density * local_4_FLOAT); // type is FLOAT value type is FLOAT
                                            massData.mass = var37;
                                            var var38 = ojcsPolygonShape.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                                            if ((var38 != 0)) {
                                                __label__ = 374;
                                                break $S_344;
                                            }
                                            __label__ = 358;
                                            }
                                        $M_374_358 : for(;;) switch (__label__) {
                                            case 374 :
                                            // NORMAL
                                                var var44 = local_3_REFERENCE.ojcVec2mulLocalFLOAT(local_3_REFERENCE,(1.0 / local_4_FLOAT)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@75419818
                                                var var47 = massData.center.ojcVec2setojcVec2(massData.center,local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@640930ad
                                                var var49 = var47.ojcVec2addLocalojcVec2(var47,local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@44b12eac
                                                var var51 = (local_5_FLOAT * density); // type is FLOAT value type is FLOAT
                                                massData.I = var51;
                                                var var52 = massData.I; // type is FLOAT value type is FLOAT
                                                var var53 = massData.mass; // type is FLOAT value type is FLOAT
                                                var var56 = ojcVec2.FLOATdotojcVec2ojcVec2(massData.center,massData.center); // type is FLOAT value type is FLOAT
                                                var var58 = (var52 + (var53 * var56)); // type is FLOAT value type is FLOAT
                                                massData.I = var58;
                                                return;
                                            case 358 :
                                            // NORMAL
                                                $S_358 : {
                                                // NORMAL
                                                    var var39 = local_4_FLOAT; // type is FLOAT value type is FLOAT
                                                    if ((var39 > 1.1920929E-7)) {
                                                        __label__ = 374;
                                                        continue $M_374_358;
                                                    }
                                                    }
                                                var var167 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                                jlAssertionError.VOIDinit(var167);
                                                throw var167;
                                        }
                                    case 120 :
                                    // NORMAL
                                        $S_120 : {
                                        // NORMAL
                                            var var59 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@65e8636b
                                            var var62 = thisRef.m_vertices.data[local_10_INT]; // type is REFERENCE value type is REFERENCE
                                            var var63 = var59.ojcVec2setojcVec2(var59,var62); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@66aacf3a
                                            var var65 = var63.ojcVec2subLocalojcVec2(var63,local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1fd20aaf
                                            var var68 = local_9_REFERENCE.ojcVec2setojcVec2(local_9_REFERENCE,local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@32f3dda0
                                            var69 = var68.ojcVec2negateLocal(var68); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7f7a411c
                                            var var71 = (local_10_INT + 1); // type is INT value type is INT
                                            var var72 = thisRef.m_count; // type is INT value type is INT
                                            if ((var71 >= var72)) {
                                                __label__ = 171;
                                                break $S_120;
                                            }
                                            __label__ = 159;
                                            }
                                        $M_171_159 : for(;;) switch (__label__) {
                                            case 171 :
                                            // NORMAL
                                                var var74 = thisRef.m_vertices.data[0]; // type is REFERENCE value type is REFERENCE
                                                var79 = var74; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@63d6909a
                                                break $M_171_159;
                                            case 159 :
                                            // NORMAL
                                                var var78 = thisRef.m_vertices.data[(local_10_INT + 1)]; // type is REFERENCE value type is REFERENCE
                                                var79 = var78; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@158153e1
                                                break $M_171_159;
                                        }
                                        var var80 = var69.ojcVec2addLocalojcVec2(var69,var79); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4f1992d6
                                        var var83 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_8_REFERENCE,local_9_REFERENCE); // type is FLOAT value type is FLOAT
                                        var local_11_FLOAT = var83; // type is FLOAT value type is FLOAT
                                        var local_12_FLOAT = (0.5 * local_11_FLOAT); // type is FLOAT value type is FLOAT
                                        local_4_FLOAT = (local_4_FLOAT + local_12_FLOAT); // type is FLOAT value type is FLOAT
                                        var var94 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2152fd10
                                        var var104 = (var94.x + ((local_12_FLOAT * 0.33333334) * (local_8_REFERENCE.x + local_9_REFERENCE.x))); // type is FLOAT value type is FLOAT
                                        var94.x = var104;
                                        var var105 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2152fd10
                                        var var115 = (var105.y + ((local_12_FLOAT * 0.33333334) * (local_8_REFERENCE.y + local_9_REFERENCE.y))); // type is FLOAT value type is FLOAT
                                        var105.y = var115;
                                        var local_13_FLOAT = local_8_REFERENCE.x; // type is FLOAT value type is FLOAT
                                        var local_14_FLOAT = local_8_REFERENCE.y; // type is FLOAT value type is FLOAT
                                        var local_15_FLOAT = local_9_REFERENCE.x; // type is FLOAT value type is FLOAT
                                        var local_16_FLOAT = local_9_REFERENCE.y; // type is FLOAT value type is FLOAT
                                        var local_17_FLOAT = (((local_13_FLOAT * local_13_FLOAT) + (local_15_FLOAT * local_13_FLOAT)) + (local_15_FLOAT * local_15_FLOAT)); // type is FLOAT value type is FLOAT
                                        var local_18_FLOAT = (((local_14_FLOAT * local_14_FLOAT) + (local_16_FLOAT * local_14_FLOAT)) + (local_16_FLOAT * local_16_FLOAT)); // type is FLOAT value type is FLOAT
                                        local_5_FLOAT = (local_5_FLOAT + ((0.083333336 * local_11_FLOAT) * (local_17_FLOAT + local_18_FLOAT))); // type is FLOAT value type is FLOAT
                                        local_10_INT = (local_10_INT + 1); // type is INT value type is INT
                                        __label__ = 111;
                                        continue $L_111;
                                }
                            }
                    }
                }
        }
    },

    classInitCheck : function() {
        if (!ojcsPolygonShape.__initialized) {
            ojcsPolygonShape.__initialized = true;
            var thePrototype = ojcsPolygonShape.Create.prototype;
            thePrototype.instanceOf = ojcsPolygonShape.instanceOf;
            thePrototype.ClassgetClass = ojcsPolygonShape.ClassgetClass;
            thePrototype.VOIDcomputeMassojcsMassDataFLOAT = ojcsPolygonShape.VOIDcomputeMassojcsMassDataFLOAT;
            thePrototype.VOIDcomputeAABBojcAABBojcTransformINT = ojcsPolygonShape.VOIDcomputeAABBojcAABBojcTransformINT;
            thePrototype.INTgetChildCount = ojcsPolygonShape.INTgetChildCount;
            thePrototype.ojcsShapeclone = ojcsPolygonShape.ojcsShapeclone;
            thePrototype.INTgetVertexCount = ojcsPolygonShape.INTgetVertexCount;
            thePrototype.A1ojcVec2getVertices = ojcsPolygonShape.A1ojcVec2getVertices;
            thePrototype.VOIDcomputeCentroidToOutA1ojcVec2INTojcVec2 = ojcsPolygonShape.VOIDcomputeCentroidToOutA1ojcVec2INTojcVec2;
            thePrototype.VOIDsetAsBoxFLOATFLOAT = ojcsPolygonShape.VOIDsetAsBoxFLOATFLOAT;
            thePrototype.VOIDsetA1ojcVec2INTojpaVec2ArrayojpaIntArray = ojcsPolygonShape.VOIDsetA1ojcVec2INTojpaVec2ArrayojpaIntArray;
            thePrototype.VOIDsetA1ojcVec2INT = ojcsPolygonShape.VOIDsetA1ojcVec2INT;
            thePrototype.FLOATgetRadius = ojcsShape.FLOATgetRadius;
            thePrototype.ojcsShapeTypegetType = ojcsShape.ojcsShapeTypegetType;
            thePrototype.VOIDsetRadiusFLOAT = ojcsShape.VOIDsetRadiusFLOAT;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojcsShape.classInitCheck();
            jlObject.classInitCheck();
            ojcsPolygonShape.VOIDclinit();
        }
    },

};

var ojpaIntArray = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 139,
    __implementedTypes : [139,1],
    $assertionsDisabled : false, // declared in org.jbox2d.pooling.arrays.IntArray

    Create : function() {
        this.map = null; // declared in org.jbox2d.pooling.arrays.IntArray
    },

    instanceOf : function(aType) {
        return ojpaIntArray.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojpaIntArray;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojpaIntArray.BOOLEANdesiredAssertionStatus(ojpaIntArray); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_13_9 : for(;;) switch (__label__) {
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_13_9;
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_13_9;
        }
        ojpaIntArray.$assertionsDisabled = var1;
        return;
    },

    A1INTgetINT : function(thisRef,argLength) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojpaIntArray.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 18;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_18_6 : for(;;) switch (__label__) {
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    if ((argLength > 0)) {
                        __label__ = 18;
                        continue $M_18_6;
                    }
                    }
                var var1 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var1);
                throw var1;
            case 18 :
            // NORMAL
                $S_18 : {
                // NORMAL
                    var var2 = thisRef.map; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3eca2cfd
                    var var3 = jlInteger.jlIntegervalueOfINT(argLength); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5c3237b4
                    var var4 = var2.BOOLEANcontainsKeyjlObject(var2,var3); // type is BOOLEAN value type is BOOLEAN
                    if ((var4 != 0)) {
                        __label__ = 49;
                        break $S_18;
                    }
                    __label__ = 32;
                    }
                $M_49_32 : for(;;) switch (__label__) {
                    case 49 :
                    // NORMAL
                        $S_49 : {
                        // NORMAL
                            var var9 = ojpaIntArray.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                            if ((var9 != 0)) {
                                __label__ = 84;
                                break $S_49;
                            }
                            __label__ = 55;
                            }
                        $M_84_55 : for(;;) switch (__label__) {
                            case 55 :
                            // NORMAL
                                $S_55 : {
                                // NORMAL
                                    var var10 = thisRef.map; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2d57572b
                                    var var11 = jlInteger.jlIntegervalueOfINT(argLength); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@61328521
                                    var var12 = var10.jlObjectgetjlObject(var10,var11); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@e70e03e
                                    var var13 = var12.data.length; // type is INT value type is INT
                                    if ((var13 == argLength)) {
                                        __label__ = 84;
                                        continue $M_84_55;
                                    }
                                    }
                                var var17 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                jlAssertionError.VOIDinitjlObject(var17,bytecoder.stringpool[35]);
                                throw var17;
                            case 84 :
                            // NORMAL
                                var var14 = thisRef.map; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@43b2e9d3
                                var var15 = jlInteger.jlIntegervalueOfINT(argLength); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@544b1081
                                var var16 = var14.jlObjectgetjlObject(var14,var15); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@21a59ca4
                                return var16;
                        }
                    case 32 :
                    // NORMAL
                        var var5 = thisRef.map; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@28ddf9be
                        var var6 = jlInteger.jlIntegervalueOfINT(argLength); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7c757107
                        var var7 = thisRef.A1INTgetInitializedArrayINT(thisRef,argLength); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@7036a910
                        var var8 = var5.jlObjectputjlObjectjlObject(var5,var6,var7); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7d7b4b0e
                        __label__ = 49;
                        continue $M_49_32;
                }
        }
    },

    A1INTgetInitializedArrayINT : function(thisRef,argLength) {
        var __label__ = null;
        return bytecoder.newArray(argLength,0);
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = new juHashMap.Create(); // type is REFERENCE value type is REFERENCE
        juHashMap.VOIDinit(var0);
        thisRef.map = var0;
        return;
    },

    classInitCheck : function() {
        if (!ojpaIntArray.__initialized) {
            ojpaIntArray.__initialized = true;
            var thePrototype = ojpaIntArray.Create.prototype;
            thePrototype.instanceOf = ojpaIntArray.instanceOf;
            thePrototype.ClassgetClass = ojpaIntArray.ClassgetClass;
            thePrototype.A1INTgetInitializedArrayINT = ojpaIntArray.A1INTgetInitializedArrayINT;
            thePrototype.A1INTgetINT = ojpaIntArray.A1INTgetINT;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            ojpaIntArray.VOIDclinit();
        }
    },

};

var juHashMap$Node = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 140,
    __implementedTypes : [140,141,1],

    Create : function() {
        this.hash = 0; // declared in java.util.HashMap$Node
        this.key = null; // declared in java.util.HashMap$Node
        this.next = null; // declared in java.util.HashMap$Node
        this.value = null; // declared in java.util.HashMap$Node
    },

    instanceOf : function(aType) {
        return juHashMap$Node.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return juHashMap$Node;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitINTjlObjectjlObjectjuHashMap$Node : function(thisRef,hash,key,value,next) {
        var __label__ = null;
        thisRef.hash = hash;
        thisRef.key = key;
        thisRef.value = value;
        thisRef.next = next;
        return;
    },

    INThashCode : function(thisRef) {
        var __label__ = null;
        var var1 = juObjects.INThashCodejlObject(thisRef.key); // type is INT value type is INT
        var var3 = juObjects.INThashCodejlObject(thisRef.value); // type is INT value type is INT
        return (var1 ^ var3);
    },

    BOOLEANequalsjlObject : function(thisRef,o) {
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((o != thisRef)) {
                break $S_0;
            }
            return 1;
            }
        $S_7 : {
        // NORMAL
            var var0 = (o == null ? false : o.instanceOf(juMap$Entry)); // type is BOOLEAN value type is BOOLEAN
            if ((var0 == 0)) {
                return 0;
            }
            }
        $S_14 : {
        // NORMAL
            local_2_REFERENCE = o; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5f3f29ae
            var var2 = thisRef.key; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6afdc741
            var var4 = local_2_REFERENCE.jlObjectgetKey(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@58839b1c
            var var5 = juObjects.BOOLEANequalsjlObjectjlObject(var2,var4); // type is BOOLEAN value type is BOOLEAN
            if ((var5 == 0)) {
                return 0;
            }
            }
        var var6 = thisRef.value; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6fd57b04
        var var8 = local_2_REFERENCE.jlObjectgetValue(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6cd60bb0
        var var9 = juObjects.BOOLEANequalsjlObjectjlObject(var6,var8); // type is BOOLEAN value type is BOOLEAN
        if ((var9 == 0)) {
            return 0;
        }
        return 1;
    },

    jlStringtoString : function(thisRef) {
        var __label__ = null;
        var var0 = new jlStringBuilder.Create(); // type is REFERENCE value type is REFERENCE
        jlStringBuilder.VOIDinit(var0);
        var var2 = var0.jlStringBuilderappendjlObject(var0,thisRef.key); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@38cfa489
        var var3 = var2.jlStringBuilderappendjlString(var2,bytecoder.stringpool[41]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@59d1889c
        var var5 = var3.jlStringBuilderappendjlObject(var3,thisRef.value); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4ddff72c
        var var6 = var5.jlStringtoString(var5); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1d8000ee
        return var6;
    },

    jlObjectgetKey : function(thisRef) {
        var __label__ = null;
        return thisRef.key;
    },

    jlObjectgetValue : function(thisRef) {
        var __label__ = null;
        return thisRef.value;
    },

    classInitCheck : function() {
        if (!juHashMap$Node.__initialized) {
            juHashMap$Node.__initialized = true;
            var thePrototype = juHashMap$Node.Create.prototype;
            thePrototype.instanceOf = juHashMap$Node.instanceOf;
            thePrototype.ClassgetClass = juHashMap$Node.ClassgetClass;
            thePrototype.jlObjectgetValue = juHashMap$Node.jlObjectgetValue;
            thePrototype.jlObjectgetKey = juHashMap$Node.jlObjectgetKey;
            thePrototype.jlStringtoString = juHashMap$Node.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = juHashMap$Node.BOOLEANequalsjlObject;
            thePrototype.INThashCode = juHashMap$Node.INThashCode;
            jlObject.classInitCheck();
            juMap$Entry.classInitCheck();
        }
    },

};

var juMap$Entry = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 141,
    __implementedTypes : [141,1],


    classInitCheck : function() {
        if (!juMap$Entry.__initialized) {
            juMap$Entry.__initialized = true;
            jlObject.classInitCheck();
        }
    },

};

var juHashMap$TreeNode = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 142,
    __implementedTypes : [143,140,141,142,1],
    $assertionsDisabled : false, // declared in java.util.HashMap$TreeNode

    Create : function() {
        this.hash = 0; // declared in java.util.HashMap$Node
        this.key = null; // declared in java.util.HashMap$Node
        this.next = null; // declared in java.util.HashMap$Node
        this.value = null; // declared in java.util.HashMap$Node
        this.parent = null; // declared in java.util.HashMap$TreeNode
        this.left = null; // declared in java.util.HashMap$TreeNode
        this.right = null; // declared in java.util.HashMap$TreeNode
        this.prev = null; // declared in java.util.HashMap$TreeNode
        this.red = false; // declared in java.util.HashMap$TreeNode
    },

    instanceOf : function(aType) {
        return juHashMap$TreeNode.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return juHashMap$TreeNode;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = juHashMap.BOOLEANdesiredAssertionStatus(juHashMap); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 12;
                break $S_0;
            }
            __label__ = 8;
            }
        $M_12_8 : for(;;) switch (__label__) {
            case 8 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_12_8;
            case 12 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_12_8;
        }
        juHashMap$TreeNode.$assertionsDisabled = var1;
        return;
    },

    juHashMap$TreeNodegetTreeNodeINTjlObject : function(thisRef,h,k) {
        var var2 = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.parent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1924b9e0
            if (var0 == null ) {
                __label__ = 14;
                break $S_0;
            }
            __label__ = 7;
            }
        $M_7_14 : for(;;) switch (__label__) {
            case 7 :
            // NORMAL
                var var1 = thisRef.juHashMap$TreeNoderoot(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@438f050b
                var2 = var1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4f702a02
                break $M_7_14;
            case 14 :
            // NORMAL
                var2 = thisRef; // type is REFERENCE value type is REFERENCE
                break $M_7_14;
        }
        var var3 = var2.juHashMap$TreeNodefindINTjlObjectjlClass(var2,h,k,null); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4be784d8
        return var3;
    },

    juHashMap$TreeNoderoot : function(thisRef) {
        var local_1_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_1_REFERENCE = thisRef; // type is REFERENCE value type is REFERENCE
            __label__ = 2;
            }
        $L_2 : for (;;) {
            $S_2 : {
            // NORMAL
                var var2 = local_1_REFERENCE.parent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6e3c0bae
                local_2_REFERENCE = var2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7362ff8b
                if (var2 != null ) {
                    break $S_2;
                }
                return local_1_REFERENCE;
                }
            local_1_REFERENCE = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7362ff8b
            __label__ = 2;
            continue $L_2;
        }
    },

    juHashMap$TreeNodefindINTjlObjectjlClass : function(thisRef,h,k,kc) {
        var local_5_INT = null; // type is INT # of inits = 1
        var local_7_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_8_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_6_INT = null; // type is INT # of inits = 1
        var var35 = null; // type is REFERENCE # of inits = 2
        var var21 = null; // type is REFERENCE # of inits = 2
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 8
        var var44 = null; // type is REFERENCE # of inits = 3
        var local_9_REFERENCE = null; // type is REFERENCE # of inits = 1
        var var30 = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_4_REFERENCE = thisRef; // type is REFERENCE value type is REFERENCE
            __label__ = 3;
            }
        $L_3 : for (;;) {
            $S_3 : {
            // NORMAL
                local_8_REFERENCE = local_4_REFERENCE.left; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2c34029a
                local_9_REFERENCE = local_4_REFERENCE.right; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@20ca7ce4
                var var8 = local_4_REFERENCE.hash; // type is INT value type is INT
                local_5_INT = var8; // type is INT value type is INT
                if ((var8 <= h)) {
                    __label__ = 36;
                    break $S_3;
                }
                __label__ = 29;
                }
            $M_36_29 : for(;;) switch (__label__) {
                case 29 :
                // NORMAL
                    local_4_REFERENCE = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7a16b523
                    var44 = kc; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2ec6a8f0
                    break $M_36_29;
                case 36 :
                // NORMAL
                    $S_36 : {
                    // NORMAL
                        var var11 = local_5_INT; // type is INT value type is INT
                        if ((var11 >= h)) {
                            __label__ = 49;
                            break $S_36;
                        }
                        __label__ = 42;
                        }
                    for(;;) switch (__label__) {
                        case 49 :
                        // NORMAL
                            $S_49 : {
                            // NORMAL
                                var var13 = local_4_REFERENCE.key; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6f1ee941
                                local_7_REFERENCE = var13; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@27c26684
                                if ((var13 == k)) {
                                    return local_4_REFERENCE;
                                }
                                }
                            $S_61 : {
                            // NORMAL
                                if (k == null ) {
                                    __label__ = 77;
                                    break $S_61;
                                }
                                __label__ = 65;
                                }
                            $M_77_65 : for(;;) switch (__label__) {
                                case 65 :
                                // NORMAL
                                    var var16 = k.BOOLEANequalsjlObject(k,local_7_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                    if ((var16 == 0)) {
                                        __label__ = 77;
                                        continue $M_77_65;
                                    }
                                    return local_4_REFERENCE;
                                case 77 :
                                // NORMAL
                                    $S_77 : {
                                    // NORMAL
                                        var var17 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7a16b523
                                        if (var17 != null ) {
                                            __label__ = 89;
                                            break $S_77;
                                        }
                                        __label__ = 82;
                                        }
                                    for(;;) switch (__label__) {
                                        case 82 :
                                        // NORMAL
                                            local_4_REFERENCE = local_9_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2bbbb91d
                                            var44 = kc; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2ec6a8f0
                                            break $M_36_29;
                                        case 89 :
                                        // NORMAL
                                            $S_89 : {
                                            // NORMAL
                                                var var18 = local_9_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2bbbb91d
                                                if (var18 != null ) {
                                                    __label__ = 101;
                                                    break $S_89;
                                                }
                                                __label__ = 94;
                                                }
                                            for(;;) switch (__label__) {
                                                case 94 :
                                                // NORMAL
                                                    local_4_REFERENCE = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7a16b523
                                                    var44 = kc; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2ec6a8f0
                                                    break $M_36_29;
                                                case 101 :
                                                // NORMAL
                                                    $S_101 : {
                                                    // NORMAL
                                                        if (kc != null ) {
                                                            var21 = kc; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2ec6a8f0
                                                            __label__ = 114;
                                                            break $S_101;
                                                        }
                                                        __label__ = 105;
                                                        }
                                                    $M_114_105 : for(;;) switch (__label__) {
                                                        case 114 :
                                                        // NORMAL
                                                            $S_114 : {
                                                            // NORMAL
                                                                var var24 = juHashMap.INTcompareComparablesjlClassjlObjectjlObject(var21,k,local_7_REFERENCE); // type is INT value type is INT
                                                                local_6_INT = var24; // type is INT value type is INT
                                                                if ((var24 == 0)) {
                                                                    var35 = var21; // type is REFERENCE value type is REFERENCE
                                                                    break $M_114_105;
                                                                }
                                                                }
                                                            $S_127 : {
                                                            // NORMAL
                                                                var var27 = local_6_INT; // type is INT value type is INT
                                                                if ((var27 >= 0)) {
                                                                    __label__ = 137;
                                                                    break $S_127;
                                                                }
                                                                __label__ = 132;
                                                                }
                                                            $M_137_132 : for(;;) switch (__label__) {
                                                                case 137 :
                                                                // NORMAL
                                                                    var30 = local_9_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2bbbb91d
                                                                    break $M_137_132;
                                                                case 132 :
                                                                // NORMAL
                                                                    var30 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7a16b523
                                                                    break $M_137_132;
                                                            }
                                                            local_4_REFERENCE = var30; // type is REFERENCE value type is REFERENCE
                                                            var44 = var21; // type is REFERENCE value type is REFERENCE
                                                            break $M_36_29;
                                                        case 105 :
                                                        // NORMAL
                                                            var var19 = juHashMap.jlClasscomparableClassForjlObject(k); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@560d8138
                                                            var local_3_REFERENCE = var19; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@68b270f2
                                                            if (var19 == null ) {
                                                                var35 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@68b270f2
                                                                break $M_114_105;
                                                            }
                                                            var21 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@68b270f2
                                                            __label__ = 114;
                                                            continue $M_114_105;
                                                    }
                                                    $S_144 : {
                                                    // NORMAL
                                                        var var37 = local_9_REFERENCE.juHashMap$TreeNodefindINTjlObjectjlClass(local_9_REFERENCE,h,k,var35); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5aa169b1
                                                        var local_10_REFERENCE = var37; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1e374fa8
                                                        if (var37 == null ) {
                                                            break $S_144;
                                                        }
                                                        return local_10_REFERENCE;
                                                        }
                                                    local_4_REFERENCE = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7a16b523
                                                    var44 = var35; // type is REFERENCE value type is REFERENCE
                                                    break $M_36_29;
                                            }
                                    }
                            }
                        case 42 :
                        // NORMAL
                            local_4_REFERENCE = local_9_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2bbbb91d
                            var44 = kc; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2ec6a8f0
                            break $M_36_29;
                    }
            }
            var var41 = local_4_REFERENCE; // type is REFERENCE value type is REFERENCE
            if (var41 != null ) {
                kc = var44; // type is REFERENCE value type is REFERENCE
                __label__ = 3;
                continue $L_3;
            }
            return null;
        }
    },

    VOIDsplitjuHashMapA1juHashMap$NodeINTINT : function(thisRef,map,tab,index,bit) {
        var local_11_INT = null; // type is INT # of inits = 3
        var local_12_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_7_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_9_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_13_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_8_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_10_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var local_5_REFERENCE = thisRef; // type is REFERENCE value type is REFERENCE
            local_6_REFERENCE = null; // type is REFERENCE value type is REFERENCE
            local_7_REFERENCE = null; // type is REFERENCE value type is REFERENCE
            local_8_REFERENCE = null; // type is REFERENCE value type is REFERENCE
            local_9_REFERENCE = null; // type is REFERENCE value type is REFERENCE
            local_10_INT = 0; // type is INT value type is INT
            local_11_INT = 0; // type is INT value type is INT
            local_12_REFERENCE = local_5_REFERENCE; // type is REFERENCE value type is REFERENCE
            __label__ = 25;
            }
        $L_25 : for (;;) {
            $S_25 : {
            // NORMAL
                var var11 = local_12_REFERENCE; // type is REFERENCE value type is REFERENCE
                if (var11 == null ) {
                    __label__ = 131;
                    break $S_25;
                }
                __label__ = 30;
                }
            for(;;) switch (__label__) {
                case 131 :
                // NORMAL
                    $S_131 : {
                    // NORMAL
                        var var12 = local_6_REFERENCE; // type is REFERENCE value type is REFERENCE
                        if (var12 == null ) {
                            __label__ = 171;
                            break $S_131;
                        }
                        __label__ = 136;
                        }
                    $M_136_171 : for(;;) switch (__label__) {
                        case 171 :
                        // NORMAL
                            $S_171 : {
                            // NORMAL
                                var var19 = local_8_REFERENCE; // type is REFERENCE value type is REFERENCE
                                if (var19 == null ) {
                                    return;
                                }
                                }
                            $S_176 : {
                            // NORMAL
                                var var20 = local_11_INT; // type is INT value type is INT
                                if ((var20 > 6)) {
                                    __label__ = 198;
                                    break $S_176;
                                }
                                __label__ = 183;
                                }
                            for(;;) switch (__label__) {
                                case 183 :
                                // NORMAL
                                    var var25 = (index + bit); // type is INT value type is INT
                                    var var27 = local_8_REFERENCE.juHashMap$NodeuntreeifyjuHashMap(local_8_REFERENCE,map); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@644458d9
                                    tab.data[var25] = var27;
                                    return;
                                case 198 :
                                // NORMAL
                                    $S_198 : {
                                    // NORMAL
                                        var var21 = (index + bit); // type is INT value type is INT
                                        var var22 = local_8_REFERENCE; // type is REFERENCE value type is REFERENCE
                                        tab.data[var21] = var22;
                                        var var23 = local_6_REFERENCE; // type is REFERENCE value type is REFERENCE
                                        if (var23 == null ) {
                                            return;
                                        }
                                        }
                                    local_8_REFERENCE.VOIDtreeifyA1juHashMap$Node(local_8_REFERENCE,tab);
                                    return;
                            }
                        case 136 :
                        // NORMAL
                            $S_136 : {
                            // NORMAL
                                var var13 = local_10_INT; // type is INT value type is INT
                                if ((var13 > 6)) {
                                    __label__ = 155;
                                    break $S_136;
                                }
                                __label__ = 143;
                                }
                            for(;;) switch (__label__) {
                                case 155 :
                                // NORMAL
                                    $S_155 : {
                                    // NORMAL
                                        var var14 = local_6_REFERENCE; // type is REFERENCE value type is REFERENCE
                                        tab.data[index] = var14;
                                        var var15 = local_8_REFERENCE; // type is REFERENCE value type is REFERENCE
                                        if (var15 == null ) {
                                            __label__ = 171;
                                            continue $M_136_171;
                                        }
                                        }
                                    local_6_REFERENCE.VOIDtreeifyA1juHashMap$Node(local_6_REFERENCE,tab);
                                    __label__ = 171;
                                    continue $M_136_171;
                                case 143 :
                                // NORMAL
                                    var var18 = local_6_REFERENCE.juHashMap$NodeuntreeifyjuHashMap(local_6_REFERENCE,map); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3b52c873
                                    tab.data[index] = var18;
                                    __label__ = 171;
                                    continue $M_136_171;
                            }
                    }
                case 30 :
                // NORMAL
                    $S_30 : {
                    // NORMAL
                        var var29 = local_12_REFERENCE.next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@44f10c37
                        local_13_REFERENCE = var29; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@53134c34
                        var var31 = local_12_REFERENCE; // type is REFERENCE value type is REFERENCE
                        var31.next = null;
                        var var34 = (local_12_REFERENCE.hash & bit); // type is INT value type is INT
                        if ((var34 != 0)) {
                            __label__ = 92;
                            break $S_30;
                        }
                        __label__ = 57;
                        }
                    $M_92_57 : for(;;) switch (__label__) {
                        case 57 :
                        // NORMAL
                            $S_57 : {
                            // NORMAL
                                var var35 = local_12_REFERENCE; // type is REFERENCE value type is REFERENCE
                                var var36 = local_7_REFERENCE; // type is REFERENCE value type is REFERENCE
                                var35.prev = var36;
                                if (var36 != null ) {
                                    __label__ = 75;
                                    break $S_57;
                                }
                                __label__ = 68;
                                }
                            $M_75_68 : for(;;) switch (__label__) {
                                case 68 :
                                // NORMAL
                                    local_6_REFERENCE = local_12_REFERENCE; // type is REFERENCE value type is REFERENCE
                                    break $M_75_68;
                                case 75 :
                                // NORMAL
                                    var var37 = local_7_REFERENCE; // type is REFERENCE value type is REFERENCE
                                    var var38 = local_12_REFERENCE; // type is REFERENCE value type is REFERENCE
                                    var37.next = var38;
                                    break $M_75_68;
                            }
                            local_7_REFERENCE = local_12_REFERENCE; // type is REFERENCE value type is REFERENCE
                            local_10_INT = (local_10_INT + 1); // type is INT value type is INT
                            break $M_92_57;
                        case 92 :
                        // NORMAL
                            $S_92 : {
                            // NORMAL
                                var var41 = local_12_REFERENCE; // type is REFERENCE value type is REFERENCE
                                var var42 = local_9_REFERENCE; // type is REFERENCE value type is REFERENCE
                                var41.prev = var42;
                                if (var42 != null ) {
                                    __label__ = 110;
                                    break $S_92;
                                }
                                __label__ = 103;
                                }
                            $M_110_103 : for(;;) switch (__label__) {
                                case 110 :
                                // NORMAL
                                    var var43 = local_9_REFERENCE; // type is REFERENCE value type is REFERENCE
                                    var var44 = local_12_REFERENCE; // type is REFERENCE value type is REFERENCE
                                    var43.next = var44;
                                    break $M_110_103;
                                case 103 :
                                // NORMAL
                                    local_8_REFERENCE = local_12_REFERENCE; // type is REFERENCE value type is REFERENCE
                                    break $M_110_103;
                            }
                            local_9_REFERENCE = local_12_REFERENCE; // type is REFERENCE value type is REFERENCE
                            local_11_INT = (local_11_INT + 1); // type is INT value type is INT
                            break $M_92_57;
                    }
                    local_12_REFERENCE = local_13_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@53134c34
                    __label__ = 25;
                    continue $L_25;
            }
        }
    },

    juHashMap$NodeuntreeifyjuHashMap : function(thisRef,map) {
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_2_REFERENCE = null; // type is REFERENCE value type is REFERENCE
            local_3_REFERENCE = null; // type is REFERENCE value type is REFERENCE
            local_4_REFERENCE = thisRef; // type is REFERENCE value type is REFERENCE
            __label__ = 7;
            }
        $L_7 : for (;;) {
            $S_7 : {
            // NORMAL
                var var3 = local_4_REFERENCE; // type is REFERENCE value type is REFERENCE
                if (var3 == null ) {
                    return local_2_REFERENCE;
                }
                }
            $S_12 : {
            // NORMAL
                var var5 = map.juHashMap$NodereplacementNodejuHashMap$NodejuHashMap$Node(map,local_4_REFERENCE,null); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@741fc2e0
                local_5_REFERENCE = var5; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@20172514
                var var7 = local_3_REFERENCE; // type is REFERENCE value type is REFERENCE
                if (var7 != null ) {
                    __label__ = 31;
                    break $S_12;
                }
                __label__ = 25;
                }
            $M_31_25 : for(;;) switch (__label__) {
                case 25 :
                // NORMAL
                    local_2_REFERENCE = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@20172514
                    break $M_31_25;
                case 31 :
                // NORMAL
                    var var8 = local_3_REFERENCE; // type is REFERENCE value type is REFERENCE
                    var var9 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@20172514
                    var8.next = var9;
                    break $M_31_25;
            }
            local_3_REFERENCE = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@20172514
            local_4_REFERENCE = local_4_REFERENCE.next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5843cf01
            __label__ = 7;
            continue $L_7;
        }
    },

    VOIDtreeifyA1juHashMap$Node : function(thisRef,tab) {
        var local_9_INT = null; // type is INT # of inits = 4
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_11_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_6_INT = null; // type is INT # of inits = 2
        var local_12_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 4
        var local_10_INT = null; // type is INT # of inits = 1
        var local_7_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 5
        var var55 = null; // type is REFERENCE # of inits = 2
        var local_8_REFERENCE = null; // type is REFERENCE # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_2_REFERENCE = null; // type is REFERENCE value type is REFERENCE
            local_3_REFERENCE = thisRef; // type is REFERENCE value type is REFERENCE
            __label__ = 4;
            }
        $L_4 : for (;;) {
            $S_4 : {
            // NORMAL
                var var2 = local_3_REFERENCE; // type is REFERENCE value type is REFERENCE
                if (var2 == null ) {
                    __label__ = 215;
                    break $S_4;
                }
                __label__ = 8;
                }
            for(;;) switch (__label__) {
                case 215 :
                // NORMAL
                    juHashMap$TreeNode.VOIDmoveRootToFrontA1juHashMap$NodejuHashMap$TreeNode(tab,local_2_REFERENCE);
                    return;
                case 8 :
                // NORMAL
                    $S_8 : {
                    // NORMAL
                        var var5 = local_3_REFERENCE.next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7a255b01
                        local_4_REFERENCE = var5; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@46ee9fef
                        var var7 = local_3_REFERENCE; // type is REFERENCE value type is REFERENCE
                        var var8 = local_3_REFERENCE; // type is REFERENCE value type is REFERENCE
                        var8.right = null;
                        var7.left = null;
                        var var9 = local_2_REFERENCE; // type is REFERENCE value type is REFERENCE
                        if (var9 != null ) {
                            __label__ = 46;
                            break $S_8;
                        }
                        __label__ = 31;
                        }
                    $M_31_46 : for(;;) switch (__label__) {
                        case 46 :
                        // NORMAL
                            $S_46 : {
                            // NORMAL
                                local_5_REFERENCE = local_3_REFERENCE.key; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@26739fba
                                local_6_INT = local_3_REFERENCE.hash; // type is INT value type is INT
                                local_7_REFERENCE = null; // type is REFERENCE value type is REFERENCE
                                local_8_REFERENCE = local_2_REFERENCE; // type is REFERENCE value type is REFERENCE
                                __label__ = 64;
                                }
                            $L_64 : for (;;) {
                                $S_64 : {
                                // NORMAL
                                    local_11_REFERENCE = local_8_REFERENCE.key; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@268804f7
                                    var var27 = local_8_REFERENCE.hash; // type is INT value type is INT
                                    local_10_INT = var27; // type is INT value type is INT
                                    var var30 = local_6_INT; // type is INT value type is INT
                                    if ((var27 <= var30)) {
                                        __label__ = 90;
                                        break $S_64;
                                    }
                                    __label__ = 84;
                                    }
                                $M_90_84 : for(;;) switch (__label__) {
                                    case 84 :
                                    // NORMAL
                                        local_9_INT = -1; // type is INT value type is INT
                                        break $M_90_84;
                                    case 90 :
                                    // NORMAL
                                        $S_90 : {
                                        // NORMAL
                                            var var31 = local_10_INT; // type is INT value type is INT
                                            var var32 = local_6_INT; // type is INT value type is INT
                                            if ((var31 >= var32)) {
                                                __label__ = 103;
                                                break $S_90;
                                            }
                                            __label__ = 97;
                                            }
                                        for(;;) switch (__label__) {
                                            case 97 :
                                            // NORMAL
                                                local_9_INT = 1; // type is INT value type is INT
                                                break $M_90_84;
                                            case 103 :
                                            // NORMAL
                                                $S_103 : {
                                                // NORMAL
                                                    var var33 = local_7_REFERENCE; // type is REFERENCE value type is REFERENCE
                                                    if (var33 != null ) {
                                                        __label__ = 119;
                                                        break $S_103;
                                                    }
                                                    __label__ = 108;
                                                    }
                                                $M_119_108 : for(;;) switch (__label__) {
                                                    case 119 :
                                                    // NORMAL
                                                        var var39 = juHashMap.INTcompareComparablesjlClassjlObjectjlObject(local_7_REFERENCE,local_5_REFERENCE,local_11_REFERENCE); // type is INT value type is INT
                                                        local_9_INT = var39; // type is INT value type is INT
                                                        if ((var39 != 0)) {
                                                            break $M_90_84;
                                                        }
                                                        break $M_119_108;
                                                    case 108 :
                                                    // NORMAL
                                                        var var35 = juHashMap.jlClasscomparableClassForjlObject(local_5_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@50c6aed1
                                                        local_7_REFERENCE = var35; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@50838585
                                                        if (var35 == null ) {
                                                            break $M_119_108;
                                                        }
                                                        __label__ = 119;
                                                        continue $M_119_108;
                                                }
                                                var var45 = juHashMap$TreeNode.INTtieBreakOrderjlObjectjlObject(local_5_REFERENCE,local_11_REFERENCE); // type is INT value type is INT
                                                local_9_INT = var45; // type is INT value type is INT
                                                break $M_90_84;
                                        }
                                }
                                $S_143 : {
                                // NORMAL
                                    local_12_REFERENCE = local_8_REFERENCE; // type is REFERENCE value type is REFERENCE
                                    var var50 = local_9_INT; // type is INT value type is INT
                                    if ((var50 > 0)) {
                                        __label__ = 160;
                                        break $S_143;
                                    }
                                    __label__ = 152;
                                    }
                                $M_152_160 : for(;;) switch (__label__) {
                                    case 160 :
                                    // NORMAL
                                        var55 = local_8_REFERENCE.right; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@eb0a9b
                                        break $M_152_160;
                                    case 152 :
                                    // NORMAL
                                        var55 = local_8_REFERENCE.left; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3adfdb73
                                        break $M_152_160;
                                }
                                $S_165 : {
                                // NORMAL
                                    local_8_REFERENCE = var55; // type is REFERENCE value type is REFERENCE
                                    if (var55 != null ) {
                                        __label__ = 206;
                                        break $S_165;
                                    }
                                    __label__ = 171;
                                    }
                                for(;;) switch (__label__) {
                                    case 206 :
                                    // NORMAL
                                        __label__ = 64;
                                        continue $L_64;
                                    case 171 :
                                    // NORMAL
                                        $S_171 : {
                                        // NORMAL
                                            var var56 = local_3_REFERENCE; // type is REFERENCE value type is REFERENCE
                                            var var57 = local_12_REFERENCE; // type is REFERENCE value type is REFERENCE
                                            var56.parent = var57;
                                            var var58 = local_9_INT; // type is INT value type is INT
                                            if ((var58 > 0)) {
                                                __label__ = 191;
                                                break $S_171;
                                            }
                                            __label__ = 182;
                                            }
                                        $M_191_182 : for(;;) switch (__label__) {
                                            case 191 :
                                            // NORMAL
                                                var var59 = local_12_REFERENCE; // type is REFERENCE value type is REFERENCE
                                                var var60 = local_3_REFERENCE; // type is REFERENCE value type is REFERENCE
                                                var59.right = var60;
                                                break $M_191_182;
                                            case 182 :
                                            // NORMAL
                                                var var61 = local_12_REFERENCE; // type is REFERENCE value type is REFERENCE
                                                var var62 = local_3_REFERENCE; // type is REFERENCE value type is REFERENCE
                                                var61.left = var62;
                                                break $M_191_182;
                                        }
                                        var var65 = juHashMap$TreeNode.juHashMap$TreeNodebalanceInsertionjuHashMap$TreeNodejuHashMap$TreeNode(local_2_REFERENCE,local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5c16cf63
                                        local_2_REFERENCE = var65; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1053f341
                                        break $M_31_46;
                                }
                            }
                        case 31 :
                        // NORMAL
                            var var10 = local_3_REFERENCE; // type is REFERENCE value type is REFERENCE
                            var10.parent = null;
                            var var11 = local_3_REFERENCE; // type is REFERENCE value type is REFERENCE
                            var11.red = 0;
                            local_2_REFERENCE = local_3_REFERENCE; // type is REFERENCE value type is REFERENCE
                            break $M_31_46;
                    }
                    local_3_REFERENCE = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@46ee9fef
                    __label__ = 4;
                    continue $L_4;
            }
        }
    },

    INTtieBreakOrderjlObjectjlObject : function(a,b) {
        var var9 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if (a == null ) {
                __label__ = 30;
                break $S_0;
            }
            __label__ = 4;
            }
        $M_30_4 : for(;;) switch (__label__) {
            case 4 :
            // NORMAL
                $S_4 : {
                // NORMAL
                    if (b == null ) {
                        __label__ = 30;
                        continue $M_30_4;
                    }
                    }
                var var1 = a.ClassgetClass().jlStringgetName(a.ClassgetClass()); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1a78d81f
                var var3 = b.ClassgetClass().jlStringgetName(b.ClassgetClass()); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@af77c5b
                var var4 = var1.INTcompareTojlString(var1,var3); // type is INT value type is INT
                var local_2_INT = var4; // type is INT value type is INT
                if ((var4 != 0)) {
                    return local_2_INT;
                }
                __label__ = 30;
                continue $M_30_4;
            case 30 :
            // NORMAL
                $S_30 : {
                // NORMAL
                    var var7 = jlSystem.INTidentityHashCodejlObject(a); // type is INT value type is INT
                    var var8 = jlSystem.INTidentityHashCodejlObject(b); // type is INT value type is INT
                    if ((var7 > var8)) {
                        __label__ = 45;
                        break $S_30;
                    }
                    __label__ = 41;
                    }
                $M_41_45 : for(;;) switch (__label__) {
                    case 45 :
                    // NORMAL
                        var9 = 1; // type is INT value type is INT
                        break $M_41_45;
                    case 41 :
                    // NORMAL
                        var9 = -1; // type is INT value type is INT
                        break $M_41_45;
                }
                var local_2_INT = var9; // type is INT value type is INT
                return local_2_INT;
        }
    },

    juHashMap$TreeNodebalanceInsertionjuHashMap$TreeNodejuHashMap$TreeNode : function(root,x) {
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var var54 = null; // type is REFERENCE # of inits = 2
        var var59 = null; // type is REFERENCE # of inits = 2
        var var31 = null; // type is REFERENCE # of inits = 2
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_1_REFERENCE = null; // type is REFERENCE # of inits = 4
        var local_0_REFERENCE = null; // type is REFERENCE # of inits = 4
        var var63 = null; // type is REFERENCE # of inits = 2
        var var64 = null; // type is REFERENCE # of inits = 2
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 3
        var var26 = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            x.red = 1;
            __label__ = 5;
            }
        $L_5 : for (;;) {
            $S_5 : {
            // NORMAL
                var var0 = x.parent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7fb1db5f
                local_2_REFERENCE = var0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@57fbd4aa
                if (var0 != null ) {
                    __label__ = 21;
                    break $S_5;
                }
                __label__ = 14;
                }
            for(;;) switch (__label__) {
                case 21 :
                // NORMAL
                    $S_21 : {
                    // NORMAL
                        var var3 = local_2_REFERENCE.red; // type is BOOLEAN value type is BOOLEAN
                        if ((var3 == 0)) {
                            return root;
                        }
                        }
                    $S_28 : {
                    // NORMAL
                        var var5 = local_2_REFERENCE.parent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3eb6f074
                        local_3_REFERENCE = var5; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@779a2b80
                        if (var5 != null ) {
                            break $S_28;
                        }
                        return root;
                        }
                    $S_39 : {
                    // NORMAL
                        var var7 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@57fbd4aa
                        var var9 = local_3_REFERENCE.left; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@583ec800
                        local_4_REFERENCE = var9; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7ecdff5d
                        if ((var7 != var9)) {
                            __label__ = 150;
                            break $S_39;
                        }
                        __label__ = 50;
                        }
                    for(;;) switch (__label__) {
                        case 50 :
                        // NORMAL
                            $S_50 : {
                            // NORMAL
                                var var12 = local_3_REFERENCE.right; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@e80e62b
                                local_5_REFERENCE = var12; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@26193a2
                                if (var12 == null ) {
                                    __label__ = 89;
                                    break $S_50;
                                }
                                __label__ = 60;
                                }
                            $M_89_60 : for(;;) switch (__label__) {
                                case 60 :
                                // NORMAL
                                    $S_60 : {
                                    // NORMAL
                                        var var15 = local_5_REFERENCE.red; // type is BOOLEAN value type is BOOLEAN
                                        if ((var15 == 0)) {
                                            __label__ = 89;
                                            continue $M_89_60;
                                        }
                                        }
                                    var var42 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@26193a2
                                    var42.red = 0;
                                    var var43 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@57fbd4aa
                                    var43.red = 0;
                                    var var44 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@779a2b80
                                    var44.red = 1;
                                    local_1_REFERENCE = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@779a2b80
                                    x = local_1_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@57fbd4aa
                                    __label__ = 5;
                                    continue $L_5;
                                case 89 :
                                // NORMAL
                                    $S_89 : {
                                    // NORMAL
                                        var var17 = local_2_REFERENCE.right; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7f9aaf87
                                        if ((x != var17)) {
                                            var31 = root; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6635a129
                                            var63 = x; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@70596c4e
                                            __label__ = 123;
                                            break $S_89;
                                        }
                                        __label__ = 97;
                                        }
                                    $M_123_97 : for(;;) switch (__label__) {
                                        case 97 :
                                        // NORMAL
                                            $S_97 : {
                                            // NORMAL
                                                var var18 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@57fbd4aa
                                                local_1_REFERENCE = var18; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@57fbd4aa
                                                var var20 = juHashMap$TreeNode.juHashMap$TreeNoderotateLeftjuHashMap$TreeNodejuHashMap$TreeNode(root,var18); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7626c550
                                                local_0_REFERENCE = var20; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@245fd5f4
                                                var var23 = local_1_REFERENCE.parent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@58f66d5c
                                                local_2_REFERENCE = var23; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1c0c1b95
                                                if (var23 != null ) {
                                                    __label__ = 118;
                                                    break $S_97;
                                                }
                                                __label__ = 114;
                                                }
                                            $M_114_118 : for(;;) switch (__label__) {
                                                case 118 :
                                                // NORMAL
                                                    var26 = local_2_REFERENCE.parent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@514e69d7
                                                    break $M_114_118;
                                                case 114 :
                                                // NORMAL
                                                    var26 = null; // type is REFERENCE value type is REFERENCE
                                                    break $M_114_118;
                                            }
                                            local_3_REFERENCE = var26; // type is REFERENCE value type is REFERENCE
                                            var31 = local_0_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@245fd5f4
                                            var63 = local_1_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@57fbd4aa
                                            __label__ = 123;
                                            continue $M_123_97;
                                        case 123 :
                                        // NORMAL
                                            $S_123 : {
                                            // NORMAL
                                                var var27 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@57fbd4aa
                                                if (var27 == null ) {
                                                    root = var31; // type is REFERENCE value type is REFERENCE
                                                    x = var63; // type is REFERENCE value type is REFERENCE
                                                    __label__ = 5;
                                                    continue $L_5;
                                                }
                                                }
                                            $S_127 : {
                                            // NORMAL
                                                var var28 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@57fbd4aa
                                                var28.red = 0;
                                                var var29 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@779a2b80
                                                if (var29 == null ) {
                                                    root = var31; // type is REFERENCE value type is REFERENCE
                                                    x = var63; // type is REFERENCE value type is REFERENCE
                                                    __label__ = 5;
                                                    continue $L_5;
                                                }
                                                }
                                            var var30 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@779a2b80
                                            var30.red = 1;
                                            var var34 = juHashMap$TreeNode.juHashMap$TreeNoderotateRightjuHashMap$TreeNodejuHashMap$TreeNode(var31,local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7b0212ee
                                            local_0_REFERENCE = var34; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@56399fee
                                            root = local_0_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@245fd5f4
                                            x = var63; // type is REFERENCE value type is REFERENCE
                                            __label__ = 5;
                                            continue $L_5;
                                    }
                            }
                        case 150 :
                        // NORMAL
                            $S_150 : {
                            // NORMAL
                                var var35 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7ecdff5d
                                if (var35 == null ) {
                                    __label__ = 184;
                                    break $S_150;
                                }
                                __label__ = 155;
                                }
                            $M_155_184 : for(;;) switch (__label__) {
                                case 155 :
                                // NORMAL
                                    $S_155 : {
                                    // NORMAL
                                        var var37 = local_4_REFERENCE.red; // type is BOOLEAN value type is BOOLEAN
                                        if ((var37 == 0)) {
                                            __label__ = 184;
                                            continue $M_155_184;
                                        }
                                        }
                                    var var38 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7ecdff5d
                                    var38.red = 0;
                                    var var39 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@57fbd4aa
                                    var39.red = 0;
                                    var var40 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@779a2b80
                                    var40.red = 1;
                                    local_1_REFERENCE = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@779a2b80
                                    x = local_1_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@57fbd4aa
                                    __label__ = 5;
                                    continue $L_5;
                                case 184 :
                                // NORMAL
                                    $S_184 : {
                                    // NORMAL
                                        var var47 = local_2_REFERENCE.left; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3bce449b
                                        if ((x != var47)) {
                                            var59 = root; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6635a129
                                            var64 = x; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@70596c4e
                                            __label__ = 218;
                                            break $S_184;
                                        }
                                        __label__ = 192;
                                        }
                                    $M_192_218 : for(;;) switch (__label__) {
                                        case 192 :
                                        // NORMAL
                                            $S_192 : {
                                            // NORMAL
                                                var var48 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@57fbd4aa
                                                local_1_REFERENCE = var48; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@57fbd4aa
                                                var var49 = juHashMap$TreeNode.juHashMap$TreeNoderotateRightjuHashMap$TreeNodejuHashMap$TreeNode(root,var48); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@50b95233
                                                local_0_REFERENCE = var49; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@471fb563
                                                var var51 = local_1_REFERENCE.parent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@729b9922
                                                local_2_REFERENCE = var51; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@46269d95
                                                if (var51 != null ) {
                                                    __label__ = 213;
                                                    break $S_192;
                                                }
                                                __label__ = 209;
                                                }
                                            $M_209_213 : for(;;) switch (__label__) {
                                                case 213 :
                                                // NORMAL
                                                    var54 = local_2_REFERENCE.parent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@19e570fd
                                                    break $M_209_213;
                                                case 209 :
                                                // NORMAL
                                                    var54 = null; // type is REFERENCE value type is REFERENCE
                                                    break $M_209_213;
                                            }
                                            local_3_REFERENCE = var54; // type is REFERENCE value type is REFERENCE
                                            var59 = local_0_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@245fd5f4
                                            var64 = local_1_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@57fbd4aa
                                            __label__ = 218;
                                            continue $M_192_218;
                                        case 218 :
                                        // NORMAL
                                            $S_218 : {
                                            // NORMAL
                                                var var55 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@57fbd4aa
                                                if (var55 == null ) {
                                                    root = var59; // type is REFERENCE value type is REFERENCE
                                                    x = var64; // type is REFERENCE value type is REFERENCE
                                                    __label__ = 5;
                                                    continue $L_5;
                                                }
                                                }
                                            $S_222 : {
                                            // NORMAL
                                                var var56 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@57fbd4aa
                                                var56.red = 0;
                                                var var57 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@779a2b80
                                                if (var57 == null ) {
                                                    root = var59; // type is REFERENCE value type is REFERENCE
                                                    x = var64; // type is REFERENCE value type is REFERENCE
                                                    __label__ = 5;
                                                    continue $L_5;
                                                }
                                                }
                                            var var58 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@779a2b80
                                            var58.red = 1;
                                            var var62 = juHashMap$TreeNode.juHashMap$TreeNoderotateLeftjuHashMap$TreeNodejuHashMap$TreeNode(var59,local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@504605c6
                                            local_0_REFERENCE = var62; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@49edc2a1
                                            root = local_0_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@245fd5f4
                                            x = var64; // type is REFERENCE value type is REFERENCE
                                            __label__ = 5;
                                            continue $L_5;
                                    }
                            }
                    }
                case 14 :
                // NORMAL
                    x.red = 0;
                    return x;
            }
        }
    },

    juHashMap$TreeNoderotateLeftjuHashMap$TreeNodejuHashMap$TreeNode : function(root,p) {
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var var19 = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if (p == null ) {
                var var20 = root; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7219ed0
                return var20;
            }
            }
        $S_4 : {
        // NORMAL
            var var0 = p.right; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@460d3b0b
            local_2_REFERENCE = var0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2a5b1357
            if (var0 == null ) {
                var var20 = root; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7219ed0
                return var20;
            }
            }
        $S_13 : {
        // NORMAL
            var var3 = local_2_REFERENCE.left; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4b338995
            p.right = var3;
            local_4_REFERENCE = var3; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2107dfd2
            if (var3 == null ) {
                __label__ = 34;
                break $S_13;
            }
            __label__ = 28;
            }
        $M_34_28 : for(;;) switch (__label__) {
            case 28 :
            // NORMAL
                var var5 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2107dfd2
                var5.parent = p;
                __label__ = 34;
                continue $M_34_28;
            case 34 :
            // NORMAL
                $S_34 : {
                // NORMAL
                    var var6 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2a5b1357
                    var var7 = p.parent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@31ab426b
                    var6.parent = var7;
                    local_3_REFERENCE = var7; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6f5d57a
                    if (var7 != null ) {
                        __label__ = 58;
                        break $S_34;
                    }
                    __label__ = 48;
                    }
                $M_58_48 : for(;;) switch (__label__) {
                    case 58 :
                    // NORMAL
                        $S_58 : {
                        // NORMAL
                            var var10 = local_3_REFERENCE.left; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6646b35d
                            if ((var10 != p)) {
                                __label__ = 74;
                                break $S_58;
                            }
                            __label__ = 66;
                            }
                        for(;;) switch (__label__) {
                            case 66 :
                            // NORMAL
                                var var13 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6f5d57a
                                var var14 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2a5b1357
                                var13.left = var14;
                                var19 = root; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7219ed0
                                break $M_58_48;
                            case 74 :
                            // NORMAL
                                var var11 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6f5d57a
                                var var12 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2a5b1357
                                var11.right = var12;
                                var19 = root; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7219ed0
                                break $M_58_48;
                        }
                    case 48 :
                    // NORMAL
                        var var15 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2a5b1357
                        var local_0_REFERENCE = var15; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2a5b1357
                        var15.red = 0;
                        var19 = local_0_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2a5b1357
                        break $M_58_48;
                }
                var var17 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2a5b1357
                var17.left = p;
                var var18 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2a5b1357
                p.parent = var18;
                var var20 = var19; // type is REFERENCE value type is REFERENCE
                return var20;
        }
    },

    juHashMap$TreeNoderotateRightjuHashMap$TreeNodejuHashMap$TreeNode : function(root,p) {
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 1
        var var19 = null; // type is REFERENCE # of inits = 2
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if (p == null ) {
                var var20 = root; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4610d31c
                return var20;
            }
            }
        $S_4 : {
        // NORMAL
            var var0 = p.left; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3b484f31
            local_2_REFERENCE = var0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2a451c9e
            if (var0 == null ) {
                var var20 = root; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4610d31c
                return var20;
            }
            }
        $S_13 : {
        // NORMAL
            var var3 = local_2_REFERENCE.right; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5edc2bbc
            p.left = var3;
            local_4_REFERENCE = var3; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6a0da2f9
            if (var3 == null ) {
                __label__ = 34;
                break $S_13;
            }
            __label__ = 28;
            }
        $M_34_28 : for(;;) switch (__label__) {
            case 34 :
            // NORMAL
                $S_34 : {
                // NORMAL
                    var var6 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2a451c9e
                    var var7 = p.parent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6fd7e955
                    var6.parent = var7;
                    local_3_REFERENCE = var7; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3f13d4ab
                    if (var7 != null ) {
                        __label__ = 58;
                        break $S_34;
                    }
                    __label__ = 48;
                    }
                $M_48_58 : for(;;) switch (__label__) {
                    case 58 :
                    // NORMAL
                        $S_58 : {
                        // NORMAL
                            var var12 = local_3_REFERENCE.right; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4337bc79
                            if ((var12 != p)) {
                                __label__ = 74;
                                break $S_58;
                            }
                            __label__ = 66;
                            }
                        for(;;) switch (__label__) {
                            case 66 :
                            // NORMAL
                                var var15 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3f13d4ab
                                var var16 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2a451c9e
                                var15.right = var16;
                                var19 = root; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4610d31c
                                break $M_48_58;
                            case 74 :
                            // NORMAL
                                var var13 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3f13d4ab
                                var var14 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2a451c9e
                                var13.left = var14;
                                var19 = root; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4610d31c
                                break $M_48_58;
                        }
                    case 48 :
                    // NORMAL
                        var var9 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2a451c9e
                        var local_0_REFERENCE = var9; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2a451c9e
                        var9.red = 0;
                        var19 = local_0_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2a451c9e
                        break $M_48_58;
                }
                var var17 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2a451c9e
                var17.right = p;
                var var18 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2a451c9e
                p.parent = var18;
                var var20 = var19; // type is REFERENCE value type is REFERENCE
                return var20;
            case 28 :
            // NORMAL
                var var5 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6a0da2f9
                var5.parent = p;
                __label__ = 34;
                continue $M_34_28;
        }
    },

    VOIDmoveRootToFrontA1juHashMap$NodejuHashMap$TreeNode : function(tab,root) {
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_3_INT = null; // type is INT # of inits = 1
        var local_2_INT = null; // type is INT # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if (root == null ) {
                return;
            }
            }
        $S_4 : {
        // NORMAL
            if (tab == null ) {
                return;
            }
            }
        $S_8 : {
        // NORMAL
            var var0 = tab.data.length; // type is INT value type is INT
            local_2_INT = var0; // type is INT value type is INT
            if ((var0 <= 0)) {
                return;
            }
            }
        $S_15 : {
        // NORMAL
            local_3_INT = ((local_2_INT - 1) & root.hash); // type is INT value type is INT
            var var10 = tab.data[local_3_INT]; // type is REFERENCE value type is REFERENCE
            local_4_REFERENCE = var10; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@7d0b527f
            var var12 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@7d0b527f
            if ((root == var12)) {
                __label__ = 102;
                break $S_15;
            }
            __label__ = 38;
            }
        $M_102_38 : for(;;) switch (__label__) {
            case 38 :
            // NORMAL
                $S_38 : {
                // NORMAL
                    var var13 = local_3_INT; // type is INT value type is INT
                    tab.data[var13] = root;
                    local_6_REFERENCE = root.prev; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@10f3d91d
                    var var16 = root.next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7c5a4908
                    local_5_REFERENCE = var16; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@75a50950
                    if (var16 == null ) {
                        __label__ = 68;
                        break $S_38;
                    }
                    __label__ = 58;
                    }
                $M_68_58 : for(;;) switch (__label__) {
                    case 68 :
                    // NORMAL
                        $S_68 : {
                        // NORMAL
                            var var20 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@157bc006
                            if (var20 == null ) {
                                __label__ = 80;
                                break $S_68;
                            }
                            __label__ = 73;
                            }
                        $M_73_80 : for(;;) switch (__label__) {
                            case 80 :
                            // NORMAL
                                $S_80 : {
                                // NORMAL
                                    var var23 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@7d0b527f
                                    if (var23 == null ) {
                                        __label__ = 91;
                                        break $S_80;
                                    }
                                    __label__ = 85;
                                    }
                                $M_85_91 : for(;;) switch (__label__) {
                                    case 91 :
                                    // NORMAL
                                        var var25 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@7d0b527f
                                        root.next = var25;
                                        root.prev = null;
                                        __label__ = 102;
                                        continue $M_102_38;
                                    case 85 :
                                    // NORMAL
                                        var var24 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@7d0b527f
                                        var24.prev = root;
                                        __label__ = 91;
                                        continue $M_85_91;
                                }
                            case 73 :
                            // NORMAL
                                var var21 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@157bc006
                                var var22 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@75a50950
                                var21.next = var22;
                                __label__ = 80;
                                continue $M_73_80;
                        }
                    case 58 :
                    // NORMAL
                        var var18 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@75a50950
                        var var19 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@157bc006
                        var18.prev = var19;
                        __label__ = 68;
                        continue $M_68_58;
                }
            case 102 :
            // NORMAL
                $S_102 : {
                // NORMAL
                    var var26 = juHashMap$TreeNode.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                    if ((var26 != 0)) {
                        return;
                    }
                    }
                $S_108 : {
                // NORMAL
                    var var27 = juHashMap$TreeNode.BOOLEANcheckInvariantsjuHashMap$TreeNode(root); // type is BOOLEAN value type is BOOLEAN
                    if ((var27 != 0)) {
                        return;
                    }
                    }
                var var28 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var28);
                throw var28;
        }
    },

    BOOLEANcheckInvariantsjuHashMap$TreeNode : function(t) {
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_1_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_1_REFERENCE = t.parent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7089c521
            local_2_REFERENCE = t.left; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1ed985a3
            local_3_REFERENCE = t.right; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@169dea8f
            local_4_REFERENCE = t.prev; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@a624eab
            var var8 = t.next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@347c320b
            local_5_REFERENCE = var8; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@22a736d8
            var var10 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7e47a729
            if (var10 == null ) {
                __label__ = 46;
                break $S_0;
            }
            __label__ = 35;
            }
        $M_46_35 : for(;;) switch (__label__) {
            case 46 :
            // NORMAL
                $S_46 : {
                // NORMAL
                    var var13 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@22a736d8
                    if (var13 == null ) {
                        __label__ = 62;
                        break $S_46;
                    }
                    __label__ = 51;
                    }
                $M_62_51 : for(;;) switch (__label__) {
                    case 62 :
                    // NORMAL
                        $S_62 : {
                        // NORMAL
                            var var16 = local_1_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5ef0498c
                            if (var16 == null ) {
                                __label__ = 84;
                                break $S_62;
                            }
                            __label__ = 66;
                            }
                        $M_84_66 : for(;;) switch (__label__) {
                            case 66 :
                            // NORMAL
                                $S_66 : {
                                // NORMAL
                                    var var18 = local_1_REFERENCE.left; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@665a5dba
                                    if ((t == var18)) {
                                        __label__ = 84;
                                        continue $M_84_66;
                                    }
                                    }
                                var var20 = local_1_REFERENCE.right; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1fea1a6c
                                if ((t == var20)) {
                                    __label__ = 84;
                                    continue $M_84_66;
                                }
                                return 0;
                            case 84 :
                            // NORMAL
                                $S_84 : {
                                // NORMAL
                                    var var21 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@36354a57
                                    if (var21 == null ) {
                                        __label__ = 109;
                                        break $S_84;
                                    }
                                    __label__ = 88;
                                    }
                                $M_88_109 : for(;;) switch (__label__) {
                                    case 88 :
                                    // NORMAL
                                        $S_88 : {
                                        // NORMAL
                                            var var23 = local_2_REFERENCE.parent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@765082c
                                            if ((var23 != t)) {
                                                return 0;
                                            }
                                            }
                                        var var25 = local_2_REFERENCE.hash; // type is INT value type is INT
                                        var var26 = t.hash; // type is INT value type is INT
                                        if ((var25 <= var26)) {
                                            __label__ = 109;
                                            continue $M_88_109;
                                        }
                                        return 0;
                                    case 109 :
                                    // NORMAL
                                        $S_109 : {
                                        // NORMAL
                                            var var27 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7d079980
                                            if (var27 == null ) {
                                                __label__ = 134;
                                                break $S_109;
                                            }
                                            __label__ = 113;
                                            }
                                        $M_134_113 : for(;;) switch (__label__) {
                                            case 113 :
                                            // NORMAL
                                                $S_113 : {
                                                // NORMAL
                                                    var var29 = local_3_REFERENCE.parent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@525c8ea1
                                                    if ((var29 != t)) {
                                                        return 0;
                                                    }
                                                    }
                                                var var31 = local_3_REFERENCE.hash; // type is INT value type is INT
                                                var var32 = t.hash; // type is INT value type is INT
                                                if ((var31 >= var32)) {
                                                    __label__ = 134;
                                                    continue $M_134_113;
                                                }
                                                return 0;
                                            case 134 :
                                            // NORMAL
                                                $S_134 : {
                                                // NORMAL
                                                    var var33 = t.red; // type is BOOLEAN value type is BOOLEAN
                                                    if ((var33 == 0)) {
                                                        __label__ = 165;
                                                        break $S_134;
                                                    }
                                                    __label__ = 141;
                                                    }
                                                $M_165_141 : for(;;) switch (__label__) {
                                                    case 141 :
                                                    // NORMAL
                                                        $S_141 : {
                                                        // NORMAL
                                                            var var34 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@36354a57
                                                            if (var34 == null ) {
                                                                __label__ = 165;
                                                                continue $M_165_141;
                                                            }
                                                            }
                                                        $S_145 : {
                                                        // NORMAL
                                                            var var36 = local_2_REFERENCE.red; // type is BOOLEAN value type is BOOLEAN
                                                            if ((var36 == 0)) {
                                                                __label__ = 165;
                                                                continue $M_165_141;
                                                            }
                                                            }
                                                        $S_152 : {
                                                        // NORMAL
                                                            var var37 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7d079980
                                                            if (var37 == null ) {
                                                                __label__ = 165;
                                                                continue $M_165_141;
                                                            }
                                                            }
                                                        var var39 = local_3_REFERENCE.red; // type is BOOLEAN value type is BOOLEAN
                                                        if ((var39 == 0)) {
                                                            __label__ = 165;
                                                            continue $M_165_141;
                                                        }
                                                        return 0;
                                                    case 165 :
                                                    // NORMAL
                                                        $S_165 : {
                                                        // NORMAL
                                                            var var40 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@36354a57
                                                            if (var40 == null ) {
                                                                __label__ = 178;
                                                                break $S_165;
                                                            }
                                                            __label__ = 169;
                                                            }
                                                        $M_169_178 : for(;;) switch (__label__) {
                                                            case 178 :
                                                            // NORMAL
                                                                $S_178 : {
                                                                // NORMAL
                                                                    var var43 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7d079980
                                                                    if (var43 == null ) {
                                                                        return 1;
                                                                    }
                                                                    }
                                                                var var45 = juHashMap$TreeNode.BOOLEANcheckInvariantsjuHashMap$TreeNode(local_3_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                                                if ((var45 != 0)) {
                                                                    return 1;
                                                                }
                                                                return 0;
                                                            case 169 :
                                                            // NORMAL
                                                                var var42 = juHashMap$TreeNode.BOOLEANcheckInvariantsjuHashMap$TreeNode(local_2_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                                                if ((var42 != 0)) {
                                                                    __label__ = 178;
                                                                    continue $M_169_178;
                                                                }
                                                                return 0;
                                                        }
                                                }
                                        }
                                }
                        }
                    case 51 :
                    // NORMAL
                        var var15 = local_5_REFERENCE.prev; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@66dfaedd
                        if ((var15 == t)) {
                            __label__ = 62;
                            continue $M_62_51;
                        }
                        return 0;
                }
            case 35 :
            // NORMAL
                var var12 = local_4_REFERENCE.next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2929f110
                if ((var12 == t)) {
                    __label__ = 46;
                    continue $M_46_35;
                }
                return 0;
        }
    },

    juHashMap$TreeNodeputTreeValjuHashMapA1juHashMap$NodeINTjlObjectjlObject : function(thisRef,map,tab,h,k,v) {
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_13_REFERENCE = null; // type is REFERENCE # of inits = 3
        var var5 = null; // type is REFERENCE # of inits = 2
        var local_8_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_15_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_7_INT = null; // type is INT # of inits = 3
        var local_14_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_12_REFERENCE = null; // type is REFERENCE # of inits = 1
        var var52 = null; // type is REFERENCE # of inits = 2
        var local_10_INT = null; // type is INT # of inits = 4
        var local_9_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_11_INT = null; // type is INT # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_6_REFERENCE = null; // type is REFERENCE value type is REFERENCE
            local_7_INT = 0; // type is INT value type is INT
            var var3 = thisRef.parent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5880c1d6
            if (var3 == null ) {
                __label__ = 20;
                break $S_0;
            }
            __label__ = 13;
            }
        $M_20_13 : for(;;) switch (__label__) {
            case 20 :
            // NORMAL
                var5 = thisRef; // type is REFERENCE value type is REFERENCE
                break $M_20_13;
            case 13 :
            // NORMAL
                var var4 = thisRef.juHashMap$TreeNoderoot(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@19f13eaf
                var5 = var4; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2bbe69f9
                break $M_20_13;
        }
        $S_21 : {
        // NORMAL
            local_8_REFERENCE = var5; // type is REFERENCE value type is REFERENCE
            local_9_REFERENCE = local_8_REFERENCE; // type is REFERENCE value type is REFERENCE
            __label__ = 27;
            }
        $L_27 : for (;;) {
            $S_27 : {
            // NORMAL
                var var10 = local_9_REFERENCE.hash; // type is INT value type is INT
                local_11_INT = var10; // type is INT value type is INT
                if ((var10 <= h)) {
                    __label__ = 45;
                    break $S_27;
                }
                __label__ = 39;
                }
            $M_45_39 : for(;;) switch (__label__) {
                case 45 :
                // NORMAL
                    $S_45 : {
                    // NORMAL
                        var var13 = local_11_INT; // type is INT value type is INT
                        if ((var13 >= h)) {
                            __label__ = 57;
                            break $S_45;
                        }
                        __label__ = 51;
                        }
                    for(;;) switch (__label__) {
                        case 57 :
                        // NORMAL
                            $S_57 : {
                            // NORMAL
                                var var15 = local_9_REFERENCE.key; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6a60af20
                                local_12_REFERENCE = var15; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7637f936
                                if ((var15 == k)) {
                                    return local_9_REFERENCE;
                                }
                                }
                            $S_70 : {
                            // NORMAL
                                if (k == null ) {
                                    __label__ = 88;
                                    break $S_70;
                                }
                                __label__ = 75;
                                }
                            $M_75_88 : for(;;) switch (__label__) {
                                case 75 :
                                // NORMAL
                                    var var18 = k.BOOLEANequalsjlObject(k,local_12_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                    if ((var18 == 0)) {
                                        __label__ = 88;
                                        continue $M_75_88;
                                    }
                                    return local_9_REFERENCE;
                                case 88 :
                                // NORMAL
                                    $S_88 : {
                                    // NORMAL
                                        var var19 = local_6_REFERENCE; // type is REFERENCE value type is REFERENCE
                                        if (var19 != null ) {
                                            __label__ = 104;
                                            break $S_88;
                                        }
                                        __label__ = 93;
                                        }
                                    $M_104_93 : for(;;) switch (__label__) {
                                        case 104 :
                                        // NORMAL
                                            var var23 = juHashMap.INTcompareComparablesjlClassjlObjectjlObject(local_6_REFERENCE,k,local_12_REFERENCE); // type is INT value type is INT
                                            local_10_INT = var23; // type is INT value type is INT
                                            if ((var23 != 0)) {
                                                break $M_45_39;
                                            }
                                            break $M_104_93;
                                        case 93 :
                                        // NORMAL
                                            var var20 = juHashMap.jlClasscomparableClassForjlObject(k); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@621d41b8
                                            local_6_REFERENCE = var20; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@588ee4a6
                                            if (var20 == null ) {
                                                break $M_104_93;
                                            }
                                            __label__ = 104;
                                            continue $M_104_93;
                                    }
                                    $S_119 : {
                                    // NORMAL
                                        var var26 = local_7_INT; // type is INT value type is INT
                                        if ((var26 != 0)) {
                                            __label__ = 184;
                                            break $S_119;
                                        }
                                        __label__ = 124;
                                        }
                                    $M_184_124 : for(;;) switch (__label__) {
                                        case 184 :
                                        // NORMAL
                                            var var43 = juHashMap$TreeNode.INTtieBreakOrderjlObjectjlObject(k,local_12_REFERENCE); // type is INT value type is INT
                                            local_10_INT = var43; // type is INT value type is INT
                                            break $M_45_39;
                                        case 124 :
                                        // NORMAL
                                            $S_124 : {
                                            // NORMAL
                                                local_7_INT = 1; // type is INT value type is INT
                                                var var29 = local_9_REFERENCE.left; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3c4db25c
                                                local_14_REFERENCE = var29; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@184d1753
                                                if (var29 == null ) {
                                                    __label__ = 154;
                                                    break $S_124;
                                                }
                                                __label__ = 138;
                                                }
                                            $M_154_138 : for(;;) switch (__label__) {
                                                case 154 :
                                                // NORMAL
                                                    $S_154 : {
                                                    // NORMAL
                                                        var var36 = local_9_REFERENCE.right; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2c59e73c
                                                        local_14_REFERENCE = var36; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@37c97b28
                                                        if (var36 == null ) {
                                                            __label__ = 184;
                                                            continue $M_184_124;
                                                        }
                                                        }
                                                    var var39 = local_14_REFERENCE.juHashMap$TreeNodefindINTjlObjectjlClass(local_14_REFERENCE,h,k,local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@43af4438
                                                    local_13_REFERENCE = var39; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5650fb1c
                                                    if (var39 == null ) {
                                                        __label__ = 184;
                                                        continue $M_184_124;
                                                    }
                                                    return local_13_REFERENCE;
                                                case 138 :
                                                // NORMAL
                                                    var var33 = local_14_REFERENCE.juHashMap$TreeNodefindINTjlObjectjlClass(local_14_REFERENCE,h,k,local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4b37dd74
                                                    local_13_REFERENCE = var33; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2657870a
                                                    if (var33 != null ) {
                                                        return local_13_REFERENCE;
                                                    }
                                                    __label__ = 154;
                                                    continue $M_154_138;
                                            }
                                    }
                            }
                        case 51 :
                        // NORMAL
                            local_10_INT = 1; // type is INT value type is INT
                            break $M_45_39;
                    }
                case 39 :
                // NORMAL
                    local_10_INT = -1; // type is INT value type is INT
                    break $M_45_39;
            }
            $S_193 : {
            // NORMAL
                local_13_REFERENCE = local_9_REFERENCE; // type is REFERENCE value type is REFERENCE
                var var47 = local_10_INT; // type is INT value type is INT
                if ((var47 > 0)) {
                    __label__ = 210;
                    break $S_193;
                }
                __label__ = 202;
                }
            $M_210_202 : for(;;) switch (__label__) {
                case 210 :
                // NORMAL
                    var52 = local_9_REFERENCE.right; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1a39491c
                    break $M_210_202;
                case 202 :
                // NORMAL
                    var52 = local_9_REFERENCE.left; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@793a2d60
                    break $M_210_202;
            }
            $S_215 : {
            // NORMAL
                local_9_REFERENCE = var52; // type is REFERENCE value type is REFERENCE
                if (var52 != null ) {
                    __label__ = 311;
                    break $S_215;
                }
                __label__ = 221;
                }
            for(;;) switch (__label__) {
                case 311 :
                // NORMAL
                    __label__ = 27;
                    continue $L_27;
                case 221 :
                // NORMAL
                    $S_221 : {
                    // NORMAL
                        local_14_REFERENCE = local_13_REFERENCE.next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@408d28fb
                        var var56 = map.juHashMap$TreeNodenewTreeNodeINTjlObjectjlObjectjuHashMap$Node(map,h,k,v,local_14_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@352481e3
                        local_15_REFERENCE = var56; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5e2b0628
                        var var58 = local_10_INT; // type is INT value type is INT
                        if ((var58 > 0)) {
                            __label__ = 256;
                            break $S_221;
                        }
                        __label__ = 246;
                        }
                    $M_246_256 : for(;;) switch (__label__) {
                        case 246 :
                        // NORMAL
                            var var59 = local_13_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2657870a
                            var var60 = local_15_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5e2b0628
                            var59.left = var60;
                            break $M_246_256;
                        case 256 :
                        // NORMAL
                            var var61 = local_13_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2657870a
                            var var62 = local_15_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5e2b0628
                            var61.right = var62;
                            break $M_246_256;
                    }
                    $S_263 : {
                    // NORMAL
                        var var63 = local_13_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2657870a
                        var var64 = local_15_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5e2b0628
                        var63.next = var64;
                        var var65 = local_15_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5e2b0628
                        var var66 = local_15_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5e2b0628
                        var var67 = local_13_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2657870a
                        var66.prev = var67;
                        var65.parent = var67;
                        var var68 = local_14_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@184d1753
                        if (var68 == null ) {
                            __label__ = 298;
                            break $S_263;
                        }
                        __label__ = 288;
                        }
                    $M_298_288 : for(;;) switch (__label__) {
                        case 288 :
                        // NORMAL
                            var var69 = local_14_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@184d1753
                            var var70 = local_15_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5e2b0628
                            var69.prev = var70;
                            __label__ = 298;
                            continue $M_298_288;
                        case 298 :
                        // NORMAL
                            var var73 = juHashMap$TreeNode.juHashMap$TreeNodebalanceInsertionjuHashMap$TreeNodejuHashMap$TreeNode(local_8_REFERENCE,local_15_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@65855ff2
                            juHashMap$TreeNode.VOIDmoveRootToFrontA1juHashMap$NodejuHashMap$TreeNode(tab,var73);
                            return null;
                    }
            }
        }
    },

    VOIDinitINTjlObjectjlObjectjuHashMap$Node : function(thisRef,hash,key,val,next) {
        var __label__ = null;
        juLinkedHashMap$Entry.VOIDinitINTjlObjectjlObjectjuHashMap$Node(thisRef,hash,key,val,next);
        return;
    },

    classInitCheck : function() {
        if (!juHashMap$TreeNode.__initialized) {
            juHashMap$TreeNode.__initialized = true;
            var thePrototype = juHashMap$TreeNode.Create.prototype;
            thePrototype.instanceOf = juHashMap$TreeNode.instanceOf;
            thePrototype.ClassgetClass = juHashMap$TreeNode.ClassgetClass;
            thePrototype.juHashMap$TreeNodeputTreeValjuHashMapA1juHashMap$NodeINTjlObjectjlObject = juHashMap$TreeNode.juHashMap$TreeNodeputTreeValjuHashMapA1juHashMap$NodeINTjlObjectjlObject;
            thePrototype.VOIDtreeifyA1juHashMap$Node = juHashMap$TreeNode.VOIDtreeifyA1juHashMap$Node;
            thePrototype.juHashMap$NodeuntreeifyjuHashMap = juHashMap$TreeNode.juHashMap$NodeuntreeifyjuHashMap;
            thePrototype.VOIDsplitjuHashMapA1juHashMap$NodeINTINT = juHashMap$TreeNode.VOIDsplitjuHashMapA1juHashMap$NodeINTINT;
            thePrototype.juHashMap$TreeNodefindINTjlObjectjlClass = juHashMap$TreeNode.juHashMap$TreeNodefindINTjlObjectjlClass;
            thePrototype.juHashMap$TreeNoderoot = juHashMap$TreeNode.juHashMap$TreeNoderoot;
            thePrototype.juHashMap$TreeNodegetTreeNodeINTjlObject = juHashMap$TreeNode.juHashMap$TreeNodegetTreeNodeINTjlObject;
            thePrototype.jlObjectgetValue = juHashMap$Node.jlObjectgetValue;
            thePrototype.jlObjectgetKey = juHashMap$Node.jlObjectgetKey;
            thePrototype.jlStringtoString = juHashMap$Node.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = juHashMap$Node.BOOLEANequalsjlObject;
            thePrototype.INThashCode = juHashMap$Node.INThashCode;
            juLinkedHashMap$Entry.classInitCheck();
            juHashMap$Node.classInitCheck();
            juMap$Entry.classInitCheck();
            jlObject.classInitCheck();
            juHashMap$TreeNode.VOIDclinit();
        }
    },

};

var juLinkedHashMap$Entry = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 143,
    __implementedTypes : [143,140,141,1],

    Create : function() {
        this.hash = 0; // declared in java.util.HashMap$Node
        this.key = null; // declared in java.util.HashMap$Node
        this.next = null; // declared in java.util.HashMap$Node
        this.value = null; // declared in java.util.HashMap$Node
    },

    instanceOf : function(aType) {
        return juLinkedHashMap$Entry.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return juLinkedHashMap$Entry;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitINTjlObjectjlObjectjuHashMap$Node : function(thisRef,hash,key,value,next) {
        var __label__ = null;
        juHashMap$Node.VOIDinitINTjlObjectjlObjectjuHashMap$Node(thisRef,hash,key,value,next);
        return;
    },

    classInitCheck : function() {
        if (!juLinkedHashMap$Entry.__initialized) {
            juLinkedHashMap$Entry.__initialized = true;
            var thePrototype = juLinkedHashMap$Entry.Create.prototype;
            thePrototype.instanceOf = juLinkedHashMap$Entry.instanceOf;
            thePrototype.ClassgetClass = juLinkedHashMap$Entry.ClassgetClass;
            thePrototype.jlObjectgetValue = juHashMap$Node.jlObjectgetValue;
            thePrototype.jlObjectgetKey = juHashMap$Node.jlObjectgetKey;
            thePrototype.jlStringtoString = juHashMap$Node.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = juHashMap$Node.BOOLEANequalsjlObject;
            thePrototype.INThashCode = juHashMap$Node.INThashCode;
            juHashMap$Node.classInitCheck();
            juMap$Entry.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var jlrParameterizedType = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 144,
    __implementedTypes : [5,144,1],


    classInitCheck : function() {
        if (!jlrParameterizedType.__initialized) {
            jlrParameterizedType.__initialized = true;
            jlObject.classInitCheck();
            jlrType.classInitCheck();
        }
    },

};

var ojdjRevoluteJointDef = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 145,
    __implementedTypes : [146,145,1],

    Create : function() {
        this.type = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.userData = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.bodyA = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.bodyB = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.collideConnected = false; // declared in org.jbox2d.dynamics.joints.JointDef
        this.localAnchorA = null; // declared in org.jbox2d.dynamics.joints.RevoluteJointDef
        this.localAnchorB = null; // declared in org.jbox2d.dynamics.joints.RevoluteJointDef
        this.referenceAngle = 0; // declared in org.jbox2d.dynamics.joints.RevoluteJointDef
        this.lowerAngle = 0; // declared in org.jbox2d.dynamics.joints.RevoluteJointDef
        this.upperAngle = 0; // declared in org.jbox2d.dynamics.joints.RevoluteJointDef
        this.maxMotorTorque = 0; // declared in org.jbox2d.dynamics.joints.RevoluteJointDef
        this.motorSpeed = 0; // declared in org.jbox2d.dynamics.joints.RevoluteJointDef
        this.enableLimit = false; // declared in org.jbox2d.dynamics.joints.RevoluteJointDef
        this.enableMotor = false; // declared in org.jbox2d.dynamics.joints.RevoluteJointDef
    },

    instanceOf : function(aType) {
        return ojdjRevoluteJointDef.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdjRevoluteJointDef;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        ojdjJointDef.VOIDinit(thisRef);
        var var0 = ojdjJointType.REVOLUTE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4c5c3590
        thisRef.type = var0;
        var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinitFLOATFLOAT(var1,0.0,0.0);
        thisRef.localAnchorA = var1;
        var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinitFLOATFLOAT(var2,0.0,0.0);
        thisRef.localAnchorB = var2;
        thisRef.referenceAngle = 0.0;
        thisRef.lowerAngle = 0.0;
        thisRef.upperAngle = 0.0;
        thisRef.maxMotorTorque = 0.0;
        thisRef.motorSpeed = 0.0;
        thisRef.enableLimit = 0;
        thisRef.enableMotor = 0;
        return;
    },

    classInitCheck : function() {
        if (!ojdjRevoluteJointDef.__initialized) {
            ojdjRevoluteJointDef.__initialized = true;
            var thePrototype = ojdjRevoluteJointDef.Create.prototype;
            thePrototype.instanceOf = ojdjRevoluteJointDef.instanceOf;
            thePrototype.ClassgetClass = ojdjRevoluteJointDef.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojdjJointDef.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var ojdjJointDef = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 146,
    __implementedTypes : [146,1],

    Create : function() {
        this.type = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.userData = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.bodyA = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.bodyB = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.collideConnected = false; // declared in org.jbox2d.dynamics.joints.JointDef
    },

    instanceOf : function(aType) {
        return ojdjJointDef.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdjJointDef;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = ojdjJointType.UNKNOWN; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7abc133a
        thisRef.type = var0;
        thisRef.userData = null;
        thisRef.bodyA = null;
        thisRef.bodyB = null;
        thisRef.collideConnected = 0;
        return;
    },

    classInitCheck : function() {
        if (!ojdjJointDef.__initialized) {
            ojdjJointDef.__initialized = true;
            var thePrototype = ojdjJointDef.Create.prototype;
            thePrototype.instanceOf = ojdjJointDef.instanceOf;
            thePrototype.ClassgetClass = ojdjJointDef.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojdjJointType = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 147,
    __implementedTypes : [56,2,147,1,11],
    UNKNOWN : null, // declared in org.jbox2d.dynamics.joints.JointType
    REVOLUTE : null, // declared in org.jbox2d.dynamics.joints.JointType
    PRISMATIC : null, // declared in org.jbox2d.dynamics.joints.JointType
    DISTANCE : null, // declared in org.jbox2d.dynamics.joints.JointType
    PULLEY : null, // declared in org.jbox2d.dynamics.joints.JointType
    MOUSE : null, // declared in org.jbox2d.dynamics.joints.JointType
    GEAR : null, // declared in org.jbox2d.dynamics.joints.JointType
    WHEEL : null, // declared in org.jbox2d.dynamics.joints.JointType
    WELD : null, // declared in org.jbox2d.dynamics.joints.JointType
    FRICTION : null, // declared in org.jbox2d.dynamics.joints.JointType
    ROPE : null, // declared in org.jbox2d.dynamics.joints.JointType
    CONSTANT_VOLUME : null, // declared in org.jbox2d.dynamics.joints.JointType
    $VALUES : null, // declared in org.jbox2d.dynamics.joints.JointType

    Create : function() {
        this.name = null; // declared in java.lang.Enum
        this.ordinalNumber = 0; // declared in java.lang.Enum
    },

    instanceOf : function(aType) {
        return ojdjJointType.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdjJointType;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var __label__ = null;
        var var0 = new ojdjJointType.Create(); // type is REFERENCE value type is REFERENCE
        ojdjJointType.VOIDinitjlStringINT(var0,bytecoder.stringpool[42],0);
        ojdjJointType.UNKNOWN = var0;
        var var1 = new ojdjJointType.Create(); // type is REFERENCE value type is REFERENCE
        ojdjJointType.VOIDinitjlStringINT(var1,bytecoder.stringpool[43],1);
        ojdjJointType.REVOLUTE = var1;
        var var2 = new ojdjJointType.Create(); // type is REFERENCE value type is REFERENCE
        ojdjJointType.VOIDinitjlStringINT(var2,bytecoder.stringpool[44],2);
        ojdjJointType.PRISMATIC = var2;
        var var3 = new ojdjJointType.Create(); // type is REFERENCE value type is REFERENCE
        ojdjJointType.VOIDinitjlStringINT(var3,bytecoder.stringpool[45],3);
        ojdjJointType.DISTANCE = var3;
        var var4 = new ojdjJointType.Create(); // type is REFERENCE value type is REFERENCE
        ojdjJointType.VOIDinitjlStringINT(var4,bytecoder.stringpool[46],4);
        ojdjJointType.PULLEY = var4;
        var var5 = new ojdjJointType.Create(); // type is REFERENCE value type is REFERENCE
        ojdjJointType.VOIDinitjlStringINT(var5,bytecoder.stringpool[47],5);
        ojdjJointType.MOUSE = var5;
        var var6 = new ojdjJointType.Create(); // type is REFERENCE value type is REFERENCE
        ojdjJointType.VOIDinitjlStringINT(var6,bytecoder.stringpool[48],6);
        ojdjJointType.GEAR = var6;
        var var7 = new ojdjJointType.Create(); // type is REFERENCE value type is REFERENCE
        ojdjJointType.VOIDinitjlStringINT(var7,bytecoder.stringpool[49],7);
        ojdjJointType.WHEEL = var7;
        var var8 = new ojdjJointType.Create(); // type is REFERENCE value type is REFERENCE
        ojdjJointType.VOIDinitjlStringINT(var8,bytecoder.stringpool[50],8);
        ojdjJointType.WELD = var8;
        var var9 = new ojdjJointType.Create(); // type is REFERENCE value type is REFERENCE
        ojdjJointType.VOIDinitjlStringINT(var9,bytecoder.stringpool[51],9);
        ojdjJointType.FRICTION = var9;
        var var10 = new ojdjJointType.Create(); // type is REFERENCE value type is REFERENCE
        ojdjJointType.VOIDinitjlStringINT(var10,bytecoder.stringpool[52],10);
        ojdjJointType.ROPE = var10;
        var var11 = new ojdjJointType.Create(); // type is REFERENCE value type is REFERENCE
        ojdjJointType.VOIDinitjlStringINT(var11,bytecoder.stringpool[53],11);
        ojdjJointType.CONSTANT_VOLUME = var11;
        var var12 = bytecoder.newArray(12,null); // type is REFERENCE value type is REFERENCE
        var var13 = ojdjJointType.UNKNOWN; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@12dccee6
        var12.data[0] = var13;
        var var14 = ojdjJointType.REVOLUTE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@29e0db95
        var12.data[1] = var14;
        var var15 = ojdjJointType.PRISMATIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3fc68743
        var12.data[2] = var15;
        var var16 = ojdjJointType.DISTANCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2e7c1a89
        var12.data[3] = var16;
        var var17 = ojdjJointType.PULLEY; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5a234a5e
        var12.data[4] = var17;
        var var18 = ojdjJointType.MOUSE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@75b01efc
        var12.data[5] = var18;
        var var19 = ojdjJointType.GEAR; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7e477396
        var12.data[6] = var19;
        var var20 = ojdjJointType.WHEEL; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@30218685
        var12.data[7] = var20;
        var var21 = ojdjJointType.WELD; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@70905b65
        var12.data[8] = var21;
        var var22 = ojdjJointType.FRICTION; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@522ec75
        var12.data[9] = var22;
        var var23 = ojdjJointType.ROPE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@40bce484
        var12.data[10] = var23;
        var var24 = ojdjJointType.CONSTANT_VOLUME; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7c1547b8
        var12.data[11] = var24;
        ojdjJointType.$VALUES = var12;
        return;
    },

    VOIDinitjlStringINT : function(thisRef,p1,p2) {
        var __label__ = null;
        jlEnum.VOIDinitjlStringINT(thisRef,p1,p2);
        return;
    },

    A1ojdjJointTypevalues : function() {
        var __label__ = null;
        var var1 = ojdjJointType.$VALUES.jlObjectclone(ojdjJointType.$VALUES); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@509a4f1f
        return var1;
    },

    classInitCheck : function() {
        if (!ojdjJointType.__initialized) {
            ojdjJointType.__initialized = true;
            var thePrototype = ojdjJointType.Create.prototype;
            thePrototype.instanceOf = ojdjJointType.instanceOf;
            thePrototype.ClassgetClass = ojdjJointType.ClassgetClass;
            thePrototype.INTordinal = jlEnum.INTordinal;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlEnum.classInitCheck();
            jiSerializable.classInitCheck();
            jlObject.classInitCheck();
            jlComparable.classInitCheck();
            jlrArray.classInitCheck();
            ojdjJointType.VOIDclinit();
        }
    },

};

var ojdjJoint$1 = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 148,
    __implementedTypes : [148,1],
    $SwitchMap$org$jbox2d$dynamics$joints$JointType : null, // declared in org.jbox2d.dynamics.joints.Joint$1

    Create : function() {
    },

    instanceOf : function(aType) {
        return ojdjJoint$1.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdjJoint$1;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdjJointType.A1ojdjJointTypevalues(); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@39d66916
            var var2 = bytecoder.newArray(var0.data.length,0); // type is REFERENCE value type is REFERENCE
            ojdjJoint$1.$SwitchMap$org$jbox2d$dynamics$joints$JointType = var2;
            }
        try {
            $S_9 : {
            // NORMAL
                var var3 = ojdjJoint$1.$SwitchMap$org$jbox2d$dynamics$joints$JointType; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@34d7dad8
                var var5 = ojdjJointType.MOUSE.INTordinal(ojdjJointType.MOUSE); // type is INT value type is INT
                var3.data[var5] = 1;
                __label__ = 24;
                }
        } catch (e) {
            dmbcExceptionManager.VOIDpushjlThrowable(e);
            if (e.instanceOf(jlNoSuchFieldError)) {
                __label__ = 23;
            } else {
                throw dmbcExceptionManager.jlThrowablepop();
            }
        }
        $M_23_24 : for(;;) switch (__label__) {
            case 23 :
            // EXCEPTION_HANDLER
                var var6 = dmbcExceptionManager.jlThrowablepop(); // type is REFERENCE value type is REFERENCE
                var local_0_REFERENCE = var6; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4ada1af9
                __label__ = 24;
                continue $M_23_24;
            case 24 :
            // NORMAL
                try {
                    $S_24 : {
                    // NORMAL
                        var var8 = ojdjJoint$1.$SwitchMap$org$jbox2d$dynamics$joints$JointType; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3a52e068
                        var var10 = ojdjJointType.DISTANCE.INTordinal(ojdjJointType.DISTANCE); // type is INT value type is INT
                        var8.data[var10] = 2;
                        __label__ = 39;
                        }
                } catch (e) {
                    dmbcExceptionManager.VOIDpushjlThrowable(e);
                    if (e.instanceOf(jlNoSuchFieldError)) {
                        __label__ = 38;
                    } else {
                        throw dmbcExceptionManager.jlThrowablepop();
                    }
                }
                $M_39_38 : for(;;) switch (__label__) {
                    case 38 :
                    // EXCEPTION_HANDLER
                        var var11 = dmbcExceptionManager.jlThrowablepop(); // type is REFERENCE value type is REFERENCE
                        var local_0_REFERENCE = var11; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@30c6b0ed
                        __label__ = 39;
                        continue $M_39_38;
                    case 39 :
                    // NORMAL
                        try {
                            $S_39 : {
                            // NORMAL
                                var var12 = ojdjJoint$1.$SwitchMap$org$jbox2d$dynamics$joints$JointType; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3a4dbd37
                                var var14 = ojdjJointType.PRISMATIC.INTordinal(ojdjJointType.PRISMATIC); // type is INT value type is INT
                                var12.data[var14] = 3;
                                __label__ = 54;
                                }
                        } catch (e) {
                            dmbcExceptionManager.VOIDpushjlThrowable(e);
                            if (e.instanceOf(jlNoSuchFieldError)) {
                                __label__ = 53;
                            } else {
                                throw dmbcExceptionManager.jlThrowablepop();
                            }
                        }
                        $M_54_53 : for(;;) switch (__label__) {
                            case 53 :
                            // EXCEPTION_HANDLER
                                var var15 = dmbcExceptionManager.jlThrowablepop(); // type is REFERENCE value type is REFERENCE
                                var local_0_REFERENCE = var15; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@20da6555
                                __label__ = 54;
                                continue $M_54_53;
                            case 54 :
                            // NORMAL
                                try {
                                    $S_54 : {
                                    // NORMAL
                                        var var16 = ojdjJoint$1.$SwitchMap$org$jbox2d$dynamics$joints$JointType; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@da68086
                                        var var18 = ojdjJointType.REVOLUTE.INTordinal(ojdjJointType.REVOLUTE); // type is INT value type is INT
                                        var16.data[var18] = 4;
                                        __label__ = 69;
                                        }
                                } catch (e) {
                                    dmbcExceptionManager.VOIDpushjlThrowable(e);
                                    if (e.instanceOf(jlNoSuchFieldError)) {
                                        __label__ = 68;
                                    } else {
                                        throw dmbcExceptionManager.jlThrowablepop();
                                    }
                                }
                                $M_69_68 : for(;;) switch (__label__) {
                                    case 69 :
                                    // NORMAL
                                        try {
                                            $S_69 : {
                                            // NORMAL
                                                var var20 = ojdjJoint$1.$SwitchMap$org$jbox2d$dynamics$joints$JointType; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@8620807
                                                var var22 = ojdjJointType.WELD.INTordinal(ojdjJointType.WELD); // type is INT value type is INT
                                                var20.data[var22] = 5;
                                                __label__ = 84;
                                                }
                                        } catch (e) {
                                            dmbcExceptionManager.VOIDpushjlThrowable(e);
                                            if (e.instanceOf(jlNoSuchFieldError)) {
                                                __label__ = 83;
                                            } else {
                                                throw dmbcExceptionManager.jlThrowablepop();
                                            }
                                        }
                                        $M_83_84 : for(;;) switch (__label__) {
                                            case 83 :
                                            // EXCEPTION_HANDLER
                                                var var23 = dmbcExceptionManager.jlThrowablepop(); // type is REFERENCE value type is REFERENCE
                                                var local_0_REFERENCE = var23; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5f91a839
                                                __label__ = 84;
                                                continue $M_83_84;
                                            case 84 :
                                            // NORMAL
                                                try {
                                                    $S_84 : {
                                                    // NORMAL
                                                        var var24 = ojdjJoint$1.$SwitchMap$org$jbox2d$dynamics$joints$JointType; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@2c129e53
                                                        var var26 = ojdjJointType.FRICTION.INTordinal(ojdjJointType.FRICTION); // type is INT value type is INT
                                                        var24.data[var26] = 6;
                                                        __label__ = 100;
                                                        }
                                                } catch (e) {
                                                    dmbcExceptionManager.VOIDpushjlThrowable(e);
                                                    if (e.instanceOf(jlNoSuchFieldError)) {
                                                        __label__ = 99;
                                                    } else {
                                                        throw dmbcExceptionManager.jlThrowablepop();
                                                    }
                                                }
                                                $M_99_100 : for(;;) switch (__label__) {
                                                    case 100 :
                                                    // NORMAL
                                                        try {
                                                            $S_100 : {
                                                            // NORMAL
                                                                var var28 = ojdjJoint$1.$SwitchMap$org$jbox2d$dynamics$joints$JointType; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@150989e7
                                                                var var30 = ojdjJointType.WHEEL.INTordinal(ojdjJointType.WHEEL); // type is INT value type is INT
                                                                var28.data[var30] = 7;
                                                                __label__ = 116;
                                                                }
                                                        } catch (e) {
                                                            dmbcExceptionManager.VOIDpushjlThrowable(e);
                                                            if (e.instanceOf(jlNoSuchFieldError)) {
                                                                __label__ = 115;
                                                            } else {
                                                                throw dmbcExceptionManager.jlThrowablepop();
                                                            }
                                                        }
                                                        $M_115_116 : for(;;) switch (__label__) {
                                                            case 116 :
                                                            // NORMAL
                                                                try {
                                                                    $S_116 : {
                                                                    // NORMAL
                                                                        var var32 = ojdjJoint$1.$SwitchMap$org$jbox2d$dynamics$joints$JointType; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@d338971
                                                                        var var34 = ojdjJointType.GEAR.INTordinal(ojdjJointType.GEAR); // type is INT value type is INT
                                                                        var32.data[var34] = 8;
                                                                        __label__ = 132;
                                                                        }
                                                                } catch (e) {
                                                                    dmbcExceptionManager.VOIDpushjlThrowable(e);
                                                                    if (e.instanceOf(jlNoSuchFieldError)) {
                                                                        __label__ = 131;
                                                                    } else {
                                                                        throw dmbcExceptionManager.jlThrowablepop();
                                                                    }
                                                                }
                                                                $M_131_132 : for(;;) switch (__label__) {
                                                                    case 131 :
                                                                    // EXCEPTION_HANDLER
                                                                        var var35 = dmbcExceptionManager.jlThrowablepop(); // type is REFERENCE value type is REFERENCE
                                                                        var local_0_REFERENCE = var35; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5f31288e
                                                                        __label__ = 132;
                                                                        continue $M_131_132;
                                                                    case 132 :
                                                                    // NORMAL
                                                                        try {
                                                                            $S_132 : {
                                                                            // NORMAL
                                                                                var var36 = ojdjJoint$1.$SwitchMap$org$jbox2d$dynamics$joints$JointType; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@6769c53d
                                                                                var var38 = ojdjJointType.PULLEY.INTordinal(ojdjJointType.PULLEY); // type is INT value type is INT
                                                                                var36.data[var38] = 9;
                                                                                __label__ = 148;
                                                                                }
                                                                        } catch (e) {
                                                                            dmbcExceptionManager.VOIDpushjlThrowable(e);
                                                                            if (e.instanceOf(jlNoSuchFieldError)) {
                                                                                __label__ = 147;
                                                                            } else {
                                                                                throw dmbcExceptionManager.jlThrowablepop();
                                                                            }
                                                                        }
                                                                        $M_147_148 : for(;;) switch (__label__) {
                                                                            case 148 :
                                                                            // NORMAL
                                                                                try {
                                                                                    $S_148 : {
                                                                                    // NORMAL
                                                                                        var var40 = ojdjJoint$1.$SwitchMap$org$jbox2d$dynamics$joints$JointType; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3ef62e86
                                                                                        var var42 = ojdjJointType.CONSTANT_VOLUME.INTordinal(ojdjJointType.CONSTANT_VOLUME); // type is INT value type is INT
                                                                                        var40.data[var42] = 10;
                                                                                        __label__ = 164;
                                                                                        }
                                                                                } catch (e) {
                                                                                    dmbcExceptionManager.VOIDpushjlThrowable(e);
                                                                                    if (e.instanceOf(jlNoSuchFieldError)) {
                                                                                        __label__ = 163;
                                                                                    } else {
                                                                                        throw dmbcExceptionManager.jlThrowablepop();
                                                                                    }
                                                                                }
                                                                                $M_163_164 : for(;;) switch (__label__) {
                                                                                    case 163 :
                                                                                    // EXCEPTION_HANDLER
                                                                                        var var43 = dmbcExceptionManager.jlThrowablepop(); // type is REFERENCE value type is REFERENCE
                                                                                        var local_0_REFERENCE = var43; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2f9f5028
                                                                                        __label__ = 164;
                                                                                        continue $M_163_164;
                                                                                    case 164 :
                                                                                    // NORMAL
                                                                                        try {
                                                                                            $S_164 : {
                                                                                            // NORMAL
                                                                                                var var44 = ojdjJoint$1.$SwitchMap$org$jbox2d$dynamics$joints$JointType; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@793c780d
                                                                                                var var46 = ojdjJointType.ROPE.INTordinal(ojdjJointType.ROPE); // type is INT value type is INT
                                                                                                var44.data[var46] = 11;
                                                                                                __label__ = 180;
                                                                                                }
                                                                                        } catch (e) {
                                                                                            dmbcExceptionManager.VOIDpushjlThrowable(e);
                                                                                            if (e.instanceOf(jlNoSuchFieldError)) {
                                                                                                __label__ = 179;
                                                                                            } else {
                                                                                                throw dmbcExceptionManager.jlThrowablepop();
                                                                                            }
                                                                                        }
                                                                                        $M_180_179 : for(;;) switch (__label__) {
                                                                                            case 179 :
                                                                                            // EXCEPTION_HANDLER
                                                                                                var var47 = dmbcExceptionManager.jlThrowablepop(); // type is REFERENCE value type is REFERENCE
                                                                                                var local_0_REFERENCE = var47; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@50d50a3a
                                                                                                __label__ = 180;
                                                                                                continue $M_180_179;
                                                                                            case 180 :
                                                                                            // NORMAL
                                                                                                try {
                                                                                                    var var48 = ojdjJoint$1.$SwitchMap$org$jbox2d$dynamics$joints$JointType; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@5fd89cb8
                                                                                                    var var50 = ojdjJointType.UNKNOWN.INTordinal(ojdjJointType.UNKNOWN); // type is INT value type is INT
                                                                                                    var48.data[var50] = 12;
                                                                                                    return;
                                                                                                } catch (e) {
                                                                                                    dmbcExceptionManager.VOIDpushjlThrowable(e);
                                                                                                    if (e.instanceOf(jlNoSuchFieldError)) {
                                                                                                        __label__ = 195;
                                                                                                    } else {
                                                                                                        throw dmbcExceptionManager.jlThrowablepop();
                                                                                                    }
                                                                                                }
                                                                                                var var51 = dmbcExceptionManager.jlThrowablepop(); // type is REFERENCE value type is REFERENCE
                                                                                                var local_0_REFERENCE = var51; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@a13897b
                                                                                                return;
                                                                                        }
                                                                                }
                                                                            case 147 :
                                                                            // EXCEPTION_HANDLER
                                                                                var var39 = dmbcExceptionManager.jlThrowablepop(); // type is REFERENCE value type is REFERENCE
                                                                                var local_0_REFERENCE = var39; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@10f56424
                                                                                __label__ = 148;
                                                                                continue $M_147_148;
                                                                        }
                                                                }
                                                            case 115 :
                                                            // EXCEPTION_HANDLER
                                                                var var31 = dmbcExceptionManager.jlThrowablepop(); // type is REFERENCE value type is REFERENCE
                                                                var local_0_REFERENCE = var31; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@688938da
                                                                __label__ = 116;
                                                                continue $M_115_116;
                                                        }
                                                    case 99 :
                                                    // EXCEPTION_HANDLER
                                                        var var27 = dmbcExceptionManager.jlThrowablepop(); // type is REFERENCE value type is REFERENCE
                                                        var local_0_REFERENCE = var27; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@73af442f
                                                        __label__ = 100;
                                                        continue $M_99_100;
                                                }
                                        }
                                    case 68 :
                                    // EXCEPTION_HANDLER
                                        var var19 = dmbcExceptionManager.jlThrowablepop(); // type is REFERENCE value type is REFERENCE
                                        var local_0_REFERENCE = var19; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@65615370
                                        __label__ = 69;
                                        continue $M_69_68;
                                }
                        }
                }
        }
    },

    classInitCheck : function() {
        if (!ojdjJoint$1.__initialized) {
            ojdjJoint$1.__initialized = true;
            var thePrototype = ojdjJoint$1.Create.prototype;
            thePrototype.instanceOf = ojdjJoint$1.instanceOf;
            thePrototype.ClassgetClass = ojdjJoint$1.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            ojdjJointType.classInitCheck();
            ojdjJoint$1.VOIDclinit();
        }
    },

};

var ojdjMouseJoint = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 149,
    __implementedTypes : [149,114,1],
    $assertionsDisabled : false, // declared in org.jbox2d.dynamics.joints.Joint
    $assertionsDisabled : false, // declared in org.jbox2d.dynamics.joints.MouseJoint

    Create : function() {
        this.pool = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_type = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_prev = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_next = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_bodyA = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_bodyB = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_collideConnected = false; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_islandFlag = false; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_userData = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_edgeA = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_edgeB = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_localAnchorB = null; // declared in org.jbox2d.dynamics.joints.MouseJoint
        this.m_targetA = null; // declared in org.jbox2d.dynamics.joints.MouseJoint
        this.m_impulse = null; // declared in org.jbox2d.dynamics.joints.MouseJoint
        this.m_rB = null; // declared in org.jbox2d.dynamics.joints.MouseJoint
        this.m_localCenterB = null; // declared in org.jbox2d.dynamics.joints.MouseJoint
        this.m_mass = null; // declared in org.jbox2d.dynamics.joints.MouseJoint
        this.m_C = null; // declared in org.jbox2d.dynamics.joints.MouseJoint
        this.m_maxForce = 0; // declared in org.jbox2d.dynamics.joints.MouseJoint
        this.m_frequencyHz = 0; // declared in org.jbox2d.dynamics.joints.MouseJoint
        this.m_dampingRatio = 0; // declared in org.jbox2d.dynamics.joints.MouseJoint
        this.m_beta = 0; // declared in org.jbox2d.dynamics.joints.MouseJoint
        this.m_gamma = 0; // declared in org.jbox2d.dynamics.joints.MouseJoint
        this.m_indexB = 0; // declared in org.jbox2d.dynamics.joints.MouseJoint
        this.m_invMassB = 0; // declared in org.jbox2d.dynamics.joints.MouseJoint
        this.m_invIB = 0; // declared in org.jbox2d.dynamics.joints.MouseJoint
    },

    instanceOf : function(aType) {
        return ojdjMouseJoint.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdjMouseJoint;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    ojdjJointcreateojdWorldojdjJointDef : function(p0,p1) {
         return ojdjJoint.ojdjJointcreateojdWorldojdjJointDef(p0,p1);
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdjMouseJoint.BOOLEANdesiredAssertionStatus(ojdjMouseJoint); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_13_9 : for(;;) switch (__label__) {
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_13_9;
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_13_9;
        }
        ojdjMouseJoint.$assertionsDisabled = var1;
        return;
    },

    VOIDinitojpIWorldPoolojdjMouseJointDef : function(thisRef,argWorld,def) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            ojdjJoint.VOIDinitojpIWorldPoolojdjJointDef(thisRef,argWorld,def);
            var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var0);
            thisRef.m_localAnchorB = var0;
            var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var1);
            thisRef.m_targetA = var1;
            var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var2);
            thisRef.m_impulse = var2;
            var var3 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var3);
            thisRef.m_rB = var3;
            var var4 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var4);
            thisRef.m_localCenterB = var4;
            var var5 = new ojcMat22.Create(); // type is REFERENCE value type is REFERENCE
            ojcMat22.VOIDinit(var5);
            thisRef.m_mass = var5;
            var var6 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var6);
            thisRef.m_C = var6;
            var var7 = ojdjMouseJoint.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var7 != 0)) {
                __label__ = 107;
                break $S_0;
            }
            __label__ = 89;
            }
        $M_89_107 : for(;;) switch (__label__) {
            case 107 :
            // NORMAL
                $S_107 : {
                // NORMAL
                    var var10 = ojdjMouseJoint.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                    if ((var10 != 0)) {
                        __label__ = 130;
                        break $S_107;
                    }
                    __label__ = 113;
                    }
                $M_113_130 : for(;;) switch (__label__) {
                    case 130 :
                    // NORMAL
                        $S_130 : {
                        // NORMAL
                            var var13 = ojdjMouseJoint.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                            if ((var13 != 0)) {
                                __label__ = 153;
                                break $S_130;
                            }
                            __label__ = 136;
                            }
                        $M_136_153 : for(;;) switch (__label__) {
                            case 153 :
                            // NORMAL
                                $S_153 : {
                                // NORMAL
                                    var var17 = ojdjMouseJoint.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                                    if ((var17 != 0)) {
                                        __label__ = 176;
                                        break $S_153;
                                    }
                                    __label__ = 159;
                                    }
                                $M_159_176 : for(;;) switch (__label__) {
                                    case 176 :
                                    // NORMAL
                                        var var22 = thisRef.m_targetA.ojcVec2setojcVec2(thisRef.m_targetA,def.target); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2df65836
                                        var var24 = thisRef.m_bodyB.ojcTransformgetTransform(thisRef.m_bodyB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2fce2850
                                        ojcTransform.VOIDmulTransToOutUnsafeojcTransformojcVec2ojcVec2(var24,thisRef.m_targetA,thisRef.m_localAnchorB);
                                        var var27 = def.maxForce; // type is FLOAT value type is FLOAT
                                        thisRef.m_maxForce = var27;
                                        thisRef.m_impulse.VOIDsetZero(thisRef.m_impulse);
                                        var var29 = def.frequencyHz; // type is FLOAT value type is FLOAT
                                        thisRef.m_frequencyHz = var29;
                                        var var30 = def.dampingRatio; // type is FLOAT value type is FLOAT
                                        thisRef.m_dampingRatio = var30;
                                        thisRef.m_beta = 0.0;
                                        thisRef.m_gamma = 0.0;
                                        return;
                                    case 159 :
                                    // NORMAL
                                        $S_159 : {
                                        // NORMAL
                                            var var18 = def.dampingRatio; // type is FLOAT value type is FLOAT
                                            if ((var18 >= 0.0)) {
                                                __label__ = 176;
                                                continue $M_159_176;
                                            }
                                            }
                                        var var33 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                        jlAssertionError.VOIDinit(var33);
                                        throw var33;
                                }
                            case 136 :
                            // NORMAL
                                $S_136 : {
                                // NORMAL
                                    var var14 = def.frequencyHz; // type is FLOAT value type is FLOAT
                                    if ((var14 >= 0.0)) {
                                        __label__ = 153;
                                        continue $M_136_153;
                                    }
                                    }
                                var var16 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                jlAssertionError.VOIDinit(var16);
                                throw var16;
                        }
                    case 113 :
                    // NORMAL
                        $S_113 : {
                        // NORMAL
                            var var11 = def.maxForce; // type is FLOAT value type is FLOAT
                            if ((var11 >= 0.0)) {
                                __label__ = 130;
                                continue $M_113_130;
                            }
                            }
                        var var32 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                        jlAssertionError.VOIDinit(var32);
                        throw var32;
                }
            case 89 :
            // NORMAL
                $S_89 : {
                // NORMAL
                    var var9 = def.target.BOOLEANisValid(def.target); // type is BOOLEAN value type is BOOLEAN
                    if ((var9 != 0)) {
                        __label__ = 107;
                        continue $M_89_107;
                    }
                    }
                var var31 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var31);
                throw var31;
        }
    },

    VOIDinitVelocityConstraintsojdSolverData : function(thisRef,data) {
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_9_FLOAT = null; // type is FLOAT # of inits = 1
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_11_FLOAT = null; // type is FLOAT # of inits = 1
        var local_5_FLOAT = null; // type is FLOAT # of inits = 3
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_10_FLOAT = null; // type is FLOAT # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var1 = thisRef.m_bodyB.m_islandIndex; // type is INT value type is INT
            thisRef.m_indexB = var1;
            var var6 = thisRef.m_localCenterB.ojcVec2setojcVec2(thisRef.m_localCenterB,thisRef.m_bodyB.m_sweep.localCenter); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@462043da
            var var8 = thisRef.m_bodyB.m_invMass; // type is FLOAT value type is FLOAT
            thisRef.m_invMassB = var8;
            var var10 = thisRef.m_bodyB.m_invI; // type is FLOAT value type is FLOAT
            thisRef.m_invIB = var10;
            var var13 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_2_REFERENCE = var13.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@23681ad3
            var var18 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            var local_3_FLOAT = var18.a; // type is FLOAT value type is FLOAT
            var var24 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_4_REFERENCE = var24.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@426fb9bb
            var var29 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_5_FLOAT = var29.w; // type is FLOAT value type is FLOAT
            var var34 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1226acce
            local_6_REFERENCE = var34; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@45d51cd4
            var var38 = local_6_REFERENCE.ojcRotsetFLOAT(local_6_REFERENCE,local_3_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@56dc13c3
            var var40 = thisRef.m_bodyB.FLOATgetMass(thisRef.m_bodyB); // type is FLOAT value type is FLOAT
            var local_7_FLOAT = var40; // type is FLOAT value type is FLOAT
            var local_8_FLOAT = (6.2831855 * thisRef.m_frequencyHz); // type is FLOAT value type is FLOAT
            local_9_FLOAT = (((2.0 * local_7_FLOAT) * thisRef.m_dampingRatio) * local_8_FLOAT); // type is FLOAT value type is FLOAT
            local_10_FLOAT = (local_7_FLOAT * (local_8_FLOAT * local_8_FLOAT)); // type is FLOAT value type is FLOAT
            local_11_FLOAT = data.step.dt; // type is FLOAT value type is FLOAT
            var var66 = ojdjMouseJoint.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var66 != 0)) {
                __label__ = 202;
                break $S_0;
            }
            __label__ = 180;
            }
        $M_202_180 : for(;;) switch (__label__) {
            case 180 :
            // NORMAL
                $S_180 : {
                // NORMAL
                    var var71 = (local_9_FLOAT + (local_11_FLOAT * local_10_FLOAT)); // type is FLOAT value type is FLOAT
                    if ((var71 > 1.1920929E-7)) {
                        __label__ = 202;
                        continue $M_202_180;
                    }
                    }
                var var194 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var194);
                throw var194;
            case 202 :
            // NORMAL
                $S_202 : {
                // NORMAL
                    var var79 = (local_11_FLOAT * (local_9_FLOAT + (local_11_FLOAT * local_10_FLOAT))); // type is FLOAT value type is FLOAT
                    thisRef.m_gamma = var79;
                    var var80 = thisRef.m_gamma; // type is FLOAT value type is FLOAT
                    if ((var80 == 0.0)) {
                        __label__ = 236;
                        break $S_202;
                    }
                    __label__ = 226;
                    }
                $M_226_236 : for(;;) switch (__label__) {
                    case 236 :
                    // NORMAL
                        $S_236 : {
                        // NORMAL
                            var var88 = ((local_11_FLOAT * local_10_FLOAT) * thisRef.m_gamma); // type is FLOAT value type is FLOAT
                            thisRef.m_beta = var88;
                            var var90 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@35012549
                            var local_12_REFERENCE = var90; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@a1ce033
                            var var92 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@45d51cd4
                            var var95 = local_12_REFERENCE.ojcVec2setojcVec2(local_12_REFERENCE,thisRef.m_localAnchorB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2dfb6d62
                            var var97 = var95.ojcVec2subLocalojcVec2(var95,thisRef.m_localCenterB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1b0f2115
                            ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var92,var97,thisRef.m_rB);
                            var var100 = thisRef.pool.ojcMat22popMat22(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@27187450
                            var local_13_REFERENCE = var100; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4a6805f8
                            var var103 = local_13_REFERENCE.ex; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3c0ef1aa
                            var var114 = ((thisRef.m_invMassB + ((thisRef.m_invIB * thisRef.m_rB.y) * thisRef.m_rB.y)) + thisRef.m_gamma); // type is FLOAT value type is FLOAT
                            var103.x = var114;
                            var var116 = local_13_REFERENCE.ex; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5eeb78b7
                            var var124 = (((-thisRef.m_invIB) * thisRef.m_rB.x) * thisRef.m_rB.y); // type is FLOAT value type is FLOAT
                            var116.y = var124;
                            var var126 = local_13_REFERENCE.ey; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3a352dce
                            var var129 = local_13_REFERENCE.ex.y; // type is FLOAT value type is FLOAT
                            var126.x = var129;
                            var var131 = local_13_REFERENCE.ey; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@30f8b8b5
                            var var142 = ((thisRef.m_invMassB + ((thisRef.m_invIB * thisRef.m_rB.x) * thisRef.m_rB.x)) + thisRef.m_gamma); // type is FLOAT value type is FLOAT
                            var131.y = var142;
                            local_13_REFERENCE.VOIDinvertToOutojcMat22(local_13_REFERENCE,thisRef.m_mass);
                            var var147 = thisRef.m_C.ojcVec2setojcVec2(thisRef.m_C,local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7b309ca1
                            var var149 = var147.ojcVec2addLocalojcVec2(var147,thisRef.m_rB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7e9b7db0
                            var var151 = var149.ojcVec2subLocalojcVec2(var149,thisRef.m_targetA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6dd364f0
                            var var154 = thisRef.m_C.ojcVec2mulLocalFLOAT(thisRef.m_C,thisRef.m_beta); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@181b54ef
                            local_5_FLOAT = (local_5_FLOAT * 0.98); // type is FLOAT value type is FLOAT
                            var var159 = data.step.warmStarting; // type is BOOLEAN value type is BOOLEAN
                            if ((var159 == 0)) {
                                __label__ = 562;
                                break $S_236;
                            }
                            __label__ = 479;
                            }
                        $M_479_562 : for(;;) switch (__label__) {
                            case 479 :
                            // NORMAL
                                var var163 = thisRef.m_impulse.ojcVec2mulLocalFLOAT(thisRef.m_impulse,data.step.dtRatio); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@673116d9
                                var var164 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@31522758
                                var var170 = (var164.x + (thisRef.m_invMassB * thisRef.m_impulse.x)); // type is FLOAT value type is FLOAT
                                var164.x = var170;
                                var var171 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@31522758
                                var var177 = (var171.y + (thisRef.m_invMassB * thisRef.m_impulse.y)); // type is FLOAT value type is FLOAT
                                var171.y = var177;
                                var var178 = local_5_FLOAT; // type is FLOAT value type is FLOAT
                                var var179 = thisRef.m_invIB; // type is FLOAT value type is FLOAT
                                var var182 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.m_rB,thisRef.m_impulse); // type is FLOAT value type is FLOAT
                                local_5_FLOAT = (var178 + (var179 * var182)); // type is FLOAT value type is FLOAT
                                break $M_479_562;
                            case 562 :
                            // NORMAL
                                thisRef.m_impulse.VOIDsetZero(thisRef.m_impulse);
                                break $M_479_562;
                        }
                        var var189 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
                        var var190 = local_5_FLOAT; // type is FLOAT value type is FLOAT
                        var189.w = var190;
                        thisRef.pool.VOIDpushVec2INT(thisRef.pool,1);
                        thisRef.pool.VOIDpushMat22INT(thisRef.pool,1);
                        thisRef.pool.VOIDpushRotINT(thisRef.pool,1);
                        return;
                    case 226 :
                    // NORMAL
                        var var83 = (1.0 / thisRef.m_gamma); // type is FLOAT value type is FLOAT
                        thisRef.m_gamma = var83;
                        __label__ = 236;
                        continue $M_226_236;
                }
        }
    },

    VOIDsolveVelocityConstraintsojdSolverData : function(thisRef,data) {
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_7_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_3_FLOAT = null; // type is FLOAT # of inits = 2
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_8_FLOAT = null; // type is FLOAT # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var2 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_2_REFERENCE = var2.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@c8fcf0
            var var7 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_3_FLOAT = var7.w; // type is FLOAT value type is FLOAT
            var var12 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@61f11fbd
            var local_4_REFERENCE = var12; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@769cd292
            ojcVec2.VOIDcrossToOutUnsafeFLOATojcVec2ojcVec2(local_3_FLOAT,thisRef.m_rB,local_4_REFERENCE);
            var var19 = local_4_REFERENCE.ojcVec2addLocalojcVec2(local_4_REFERENCE,local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@96aa2a9
            var var21 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4e02e008
            local_5_REFERENCE = var21; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1e4e9b03
            var var24 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@27670282
            var local_6_REFERENCE = var24; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@736d6d6a
            var var28 = local_6_REFERENCE.ojcVec2setojcVec2(local_6_REFERENCE,thisRef.m_impulse); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@37ff5cbe
            var var30 = var28.ojcVec2mulLocalFLOAT(var28,thisRef.m_gamma); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6b5ccf02
            var var32 = var30.ojcVec2addLocalojcVec2(var30,thisRef.m_C); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@328770c1
            var var34 = var32.ojcVec2addLocalojcVec2(var32,local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2d6b1701
            var var35 = var34.ojcVec2negateLocal(var34); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@60bcb4be
            ojcMat22.VOIDmulToOutUnsafeojcMat22ojcVec2ojcVec2(thisRef.m_mass,local_6_REFERENCE,local_5_REFERENCE);
            local_7_REFERENCE = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@736d6d6a
            var var43 = local_7_REFERENCE.ojcVec2setojcVec2(local_7_REFERENCE,thisRef.m_impulse); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6d954374
            var var46 = thisRef.m_impulse.ojcVec2addLocalojcVec2(thisRef.m_impulse,local_5_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@649d377f
            local_8_FLOAT = (data.step.dt * thisRef.m_maxForce); // type is FLOAT value type is FLOAT
            var var54 = thisRef.m_impulse.FLOATlengthSquared(thisRef.m_impulse); // type is FLOAT value type is FLOAT
            var var57 = (local_8_FLOAT * local_8_FLOAT); // type is FLOAT value type is FLOAT
            if ((var54 <= var57)) {
                __label__ = 191;
                break $S_0;
            }
            __label__ = 173;
            }
        $M_191_173 : for(;;) switch (__label__) {
            case 191 :
            // NORMAL
                var var67 = local_5_REFERENCE.ojcVec2setojcVec2(local_5_REFERENCE,thisRef.m_impulse); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@11bbf7f2
                var var69 = var67.ojcVec2subLocalojcVec2(var67,local_7_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1427b83f
                var var70 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1088d6fe
                var var76 = (var70.x + (thisRef.m_invMassB * local_5_REFERENCE.x)); // type is FLOAT value type is FLOAT
                var70.x = var76;
                var var77 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1088d6fe
                var var83 = (var77.y + (thisRef.m_invMassB * local_5_REFERENCE.y)); // type is FLOAT value type is FLOAT
                var77.y = var83;
                var var84 = local_3_FLOAT; // type is FLOAT value type is FLOAT
                var var85 = thisRef.m_invIB; // type is FLOAT value type is FLOAT
                var var88 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.m_rB,local_5_REFERENCE); // type is FLOAT value type is FLOAT
                local_3_FLOAT = (var84 + (var85 * var88)); // type is FLOAT value type is FLOAT
                var var94 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
                var var95 = local_3_FLOAT; // type is FLOAT value type is FLOAT
                var94.w = var95;
                thisRef.pool.VOIDpushVec2INT(thisRef.pool,3);
                return;
            case 173 :
            // NORMAL
                var var59 = thisRef.m_impulse; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@536ed72c
                var var60 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                var var62 = thisRef.m_impulse.FLOATlength(thisRef.m_impulse); // type is FLOAT value type is FLOAT
                var var64 = var59.ojcVec2mulLocalFLOAT(var59,(var60 / var62)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5ec524f1
                __label__ = 191;
                continue $M_191_173;
        }
    },

    BOOLEANsolvePositionConstraintsojdSolverData : function(thisRef,data) {
        var __label__ = null;
        return 1;
    },

    classInitCheck : function() {
        if (!ojdjMouseJoint.__initialized) {
            ojdjMouseJoint.__initialized = true;
            var thePrototype = ojdjMouseJoint.Create.prototype;
            thePrototype.instanceOf = ojdjMouseJoint.instanceOf;
            thePrototype.ClassgetClass = ojdjMouseJoint.ClassgetClass;
            thePrototype.BOOLEANsolvePositionConstraintsojdSolverData = ojdjMouseJoint.BOOLEANsolvePositionConstraintsojdSolverData;
            thePrototype.VOIDsolveVelocityConstraintsojdSolverData = ojdjMouseJoint.VOIDsolveVelocityConstraintsojdSolverData;
            thePrototype.VOIDinitVelocityConstraintsojdSolverData = ojdjMouseJoint.VOIDinitVelocityConstraintsojdSolverData;
            thePrototype.BOOLEANgetCollideConnected = ojdjJoint.BOOLEANgetCollideConnected;
            thePrototype.ojdBodygetBodyB = ojdjJoint.ojdBodygetBodyB;
            thePrototype.ojdBodygetBodyA = ojdjJoint.ojdBodygetBodyA;
            thePrototype.ojdjJointTypegetType = ojdjJoint.ojdjJointTypegetType;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojdjJoint.classInitCheck();
            jlObject.classInitCheck();
            ojdjMouseJoint.VOIDclinit();
        }
    },

};

var ojdjMouseJointDef = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 150,
    __implementedTypes : [146,150,1],

    Create : function() {
        this.type = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.userData = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.bodyA = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.bodyB = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.collideConnected = false; // declared in org.jbox2d.dynamics.joints.JointDef
        this.target = null; // declared in org.jbox2d.dynamics.joints.MouseJointDef
        this.maxForce = 0; // declared in org.jbox2d.dynamics.joints.MouseJointDef
        this.frequencyHz = 0; // declared in org.jbox2d.dynamics.joints.MouseJointDef
        this.dampingRatio = 0; // declared in org.jbox2d.dynamics.joints.MouseJointDef
    },

    instanceOf : function(aType) {
        return ojdjMouseJointDef.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdjMouseJointDef;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        ojdjJointDef.VOIDinit(thisRef);
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var0);
        thisRef.target = var0;
        var var1 = ojdjJointType.MOUSE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@73313e1c
        thisRef.type = var1;
        var var3 = thisRef.target.ojcVec2setFLOATFLOAT(thisRef.target,0.0,0.0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@44ccce38
        thisRef.maxForce = 0.0;
        thisRef.frequencyHz = 5.0;
        thisRef.dampingRatio = 0.7;
        return;
    },

    classInitCheck : function() {
        if (!ojdjMouseJointDef.__initialized) {
            ojdjMouseJointDef.__initialized = true;
            var thePrototype = ojdjMouseJointDef.Create.prototype;
            thePrototype.instanceOf = ojdjMouseJointDef.instanceOf;
            thePrototype.ClassgetClass = ojdjMouseJointDef.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojdjJointDef.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var ojdjDistanceJoint = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 151,
    __implementedTypes : [114,151,1],
    $assertionsDisabled : false, // declared in org.jbox2d.dynamics.joints.Joint

    Create : function() {
        this.pool = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_type = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_prev = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_next = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_bodyA = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_bodyB = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_collideConnected = false; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_islandFlag = false; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_userData = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_edgeA = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_edgeB = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_u = null; // declared in org.jbox2d.dynamics.joints.DistanceJoint
        this.m_rA = null; // declared in org.jbox2d.dynamics.joints.DistanceJoint
        this.m_rB = null; // declared in org.jbox2d.dynamics.joints.DistanceJoint
        this.m_localCenterA = null; // declared in org.jbox2d.dynamics.joints.DistanceJoint
        this.m_localCenterB = null; // declared in org.jbox2d.dynamics.joints.DistanceJoint
        this.m_localAnchorA = null; // declared in org.jbox2d.dynamics.joints.DistanceJoint
        this.m_localAnchorB = null; // declared in org.jbox2d.dynamics.joints.DistanceJoint
        this.m_length = 0; // declared in org.jbox2d.dynamics.joints.DistanceJoint
        this.m_impulse = 0; // declared in org.jbox2d.dynamics.joints.DistanceJoint
        this.m_frequencyHz = 0; // declared in org.jbox2d.dynamics.joints.DistanceJoint
        this.m_dampingRatio = 0; // declared in org.jbox2d.dynamics.joints.DistanceJoint
        this.m_gamma = 0; // declared in org.jbox2d.dynamics.joints.DistanceJoint
        this.m_bias = 0; // declared in org.jbox2d.dynamics.joints.DistanceJoint
        this.m_indexA = 0; // declared in org.jbox2d.dynamics.joints.DistanceJoint
        this.m_indexB = 0; // declared in org.jbox2d.dynamics.joints.DistanceJoint
        this.m_invMassA = 0; // declared in org.jbox2d.dynamics.joints.DistanceJoint
        this.m_invMassB = 0; // declared in org.jbox2d.dynamics.joints.DistanceJoint
        this.m_invIA = 0; // declared in org.jbox2d.dynamics.joints.DistanceJoint
        this.m_invIB = 0; // declared in org.jbox2d.dynamics.joints.DistanceJoint
        this.m_mass = 0; // declared in org.jbox2d.dynamics.joints.DistanceJoint
    },

    instanceOf : function(aType) {
        return ojdjDistanceJoint.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdjDistanceJoint;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    ojdjJointcreateojdWorldojdjJointDef : function(p0,p1) {
         return ojdjJoint.ojdjJointcreateojdWorldojdjJointDef(p0,p1);
    },

    VOIDinitojpIWorldPoolojdjDistanceJointDef : function(thisRef,argWorld,def) {
        var __label__ = null;
        ojdjJoint.VOIDinitojpIWorldPoolojdjJointDef(thisRef,argWorld,def);
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var0);
        thisRef.m_u = var0;
        var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var1);
        thisRef.m_rA = var1;
        var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var2);
        thisRef.m_rB = var2;
        var var3 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var3);
        thisRef.m_localCenterA = var3;
        var var4 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var4);
        thisRef.m_localCenterB = var4;
        var var6 = def.localAnchorA.ojcVec2clone(def.localAnchorA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@737a4054
        thisRef.m_localAnchorA = var6;
        var var8 = def.localAnchorB.ojcVec2clone(def.localAnchorB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5ae406a
        thisRef.m_localAnchorB = var8;
        var var9 = def.length; // type is FLOAT value type is FLOAT
        thisRef.m_length = var9;
        thisRef.m_impulse = 0.0;
        var var10 = def.frequencyHz; // type is FLOAT value type is FLOAT
        thisRef.m_frequencyHz = var10;
        var var11 = def.dampingRatio; // type is FLOAT value type is FLOAT
        thisRef.m_dampingRatio = var11;
        thisRef.m_gamma = 0.0;
        thisRef.m_bias = 0.0;
        return;
    },

    VOIDinitVelocityConstraintsojdSolverData : function(thisRef,data) {
        var local_12_FLOAT = null; // type is FLOAT # of inits = 1
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_9_FLOAT = null; // type is FLOAT # of inits = 2
        var local_5_FLOAT = null; // type is FLOAT # of inits = 2
        var local_8_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_20_FLOAT = null; // type is FLOAT # of inits = 1
        var local_19_FLOAT = null; // type is FLOAT # of inits = 1
        var local_15_FLOAT = null; // type is FLOAT # of inits = 2
        var local_16_FLOAT = null; // type is FLOAT # of inits = 1
        var var151 = null; // type is FLOAT # of inits = 2
        var var193 = null; // type is FLOAT # of inits = 2
        var var209 = null; // type is FLOAT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var1 = thisRef.m_bodyA.m_islandIndex; // type is INT value type is INT
            thisRef.m_indexA = var1;
            var var3 = thisRef.m_bodyB.m_islandIndex; // type is INT value type is INT
            thisRef.m_indexB = var3;
            var var8 = thisRef.m_localCenterA.ojcVec2setojcVec2(thisRef.m_localCenterA,thisRef.m_bodyA.m_sweep.localCenter); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@37a7fd66
            var var13 = thisRef.m_localCenterB.ojcVec2setojcVec2(thisRef.m_localCenterB,thisRef.m_bodyB.m_sweep.localCenter); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1ef05384
            var var15 = thisRef.m_bodyA.m_invMass; // type is FLOAT value type is FLOAT
            thisRef.m_invMassA = var15;
            var var17 = thisRef.m_bodyB.m_invMass; // type is FLOAT value type is FLOAT
            thisRef.m_invMassB = var17;
            var var19 = thisRef.m_bodyA.m_invI; // type is FLOAT value type is FLOAT
            thisRef.m_invIA = var19;
            var var21 = thisRef.m_bodyB.m_invI; // type is FLOAT value type is FLOAT
            thisRef.m_invIB = var21;
            var var24 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            var local_2_REFERENCE = var24.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@34fb2920
            var var29 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            var local_3_FLOAT = var29.a; // type is FLOAT value type is FLOAT
            var var35 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_4_REFERENCE = var35.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@13ffa7a
            var var40 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_5_FLOAT = var40.w; // type is FLOAT value type is FLOAT
            var var46 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            var local_6_REFERENCE = var46.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@9fb7bf6
            var var51 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            var local_7_FLOAT = var51.a; // type is FLOAT value type is FLOAT
            var var57 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_8_REFERENCE = var57.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@158b753e
            var var62 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_9_FLOAT = var62.w; // type is FLOAT value type is FLOAT
            var var67 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7854fc86
            var local_10_REFERENCE = var67; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@64625dc
            var var70 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5430ca29
            var local_11_REFERENCE = var70; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1adc6714
            var var74 = local_10_REFERENCE.ojcRotsetFLOAT(local_10_REFERENCE,local_3_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@45330805
            var var77 = local_11_REFERENCE.ojcRotsetFLOAT(local_11_REFERENCE,local_7_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@726cbdba
            var var78 = local_10_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@64625dc
            var var81 = thisRef.m_u.ojcVec2setojcVec2(thisRef.m_u,thisRef.m_localAnchorA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@20df405c
            var var83 = var81.ojcVec2subLocalojcVec2(var81,thisRef.m_localCenterA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@59426794
            ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var78,var83,thisRef.m_rA);
            var var85 = local_11_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1adc6714
            var var88 = thisRef.m_u.ojcVec2setojcVec2(thisRef.m_u,thisRef.m_localAnchorB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@46c3f99
            var var90 = var88.ojcVec2subLocalojcVec2(var88,thisRef.m_localCenterB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@137ad3c3
            ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var85,var90,thisRef.m_rB);
            var var94 = thisRef.m_u.ojcVec2setojcVec2(thisRef.m_u,local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@497dbc50
            var var96 = var94.ojcVec2addLocalojcVec2(var94,thisRef.m_rB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3490c2c
            var var98 = var96.ojcVec2subLocalojcVec2(var96,local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@66bc6b2b
            var var100 = var98.ojcVec2subLocalojcVec2(var98,thisRef.m_rA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@231d48f4
            thisRef.pool.VOIDpushRotINT(thisRef.pool,2);
            var var103 = thisRef.m_u.FLOATlength(thisRef.m_u); // type is FLOAT value type is FLOAT
            local_12_FLOAT = var103; // type is FLOAT value type is FLOAT
            var var106 = local_12_FLOAT; // type is FLOAT value type is FLOAT
            if ((var106 <= 0.005)) {
                __label__ = 393;
                break $S_0;
            }
            __label__ = 358;
            }
        $M_358_393 : for(;;) switch (__label__) {
            case 358 :
            // NORMAL
                var var108 = thisRef.m_u; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@726effb
                var var112 = (var108.x * (1.0 / local_12_FLOAT)); // type is FLOAT value type is FLOAT
                var108.x = var112;
                var var113 = thisRef.m_u; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4c45bb5f
                var var117 = (var113.y * (1.0 / local_12_FLOAT)); // type is FLOAT value type is FLOAT
                var113.y = var117;
                break $M_358_393;
            case 393 :
            // NORMAL
                var var119 = thisRef.m_u.ojcVec2setFLOATFLOAT(thisRef.m_u,0.0,0.0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@492574cf
                break $M_358_393;
        }
        $S_403 : {
        // NORMAL
            var var122 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.m_rA,thisRef.m_u); // type is FLOAT value type is FLOAT
            var local_13_FLOAT = var122; // type is FLOAT value type is FLOAT
            var var127 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.m_rB,thisRef.m_u); // type is FLOAT value type is FLOAT
            var local_14_FLOAT = var127; // type is FLOAT value type is FLOAT
            local_15_FLOAT = (((thisRef.m_invMassA + ((thisRef.m_invIA * local_13_FLOAT) * local_13_FLOAT)) + thisRef.m_invMassB) + ((thisRef.m_invIB * local_14_FLOAT) * local_14_FLOAT)); // type is FLOAT value type is FLOAT
            var var147 = local_15_FLOAT; // type is FLOAT value type is FLOAT
            if ((var147 == 0.0)) {
                __label__ = 477;
                break $S_403;
            }
            __label__ = 470;
            }
        $M_470_477 : for(;;) switch (__label__) {
            case 470 :
            // NORMAL
                var151 = (1.0 / local_15_FLOAT); // type is FLOAT value type is FLOAT
                break $M_470_477;
            case 477 :
            // NORMAL
                var151 = 0.0; // type is FLOAT value type is FLOAT
                break $M_470_477;
        }
        $S_478 : {
        // NORMAL
            thisRef.m_mass = var151;
            var var152 = thisRef.m_frequencyHz; // type is FLOAT value type is FLOAT
            if ((var152 <= 0.0)) {
                __label__ = 631;
                break $S_478;
            }
            __label__ = 490;
            }
        $M_631_490 : for(;;) switch (__label__) {
            case 490 :
            // NORMAL
                $S_490 : {
                // NORMAL
                    local_16_FLOAT = (local_12_FLOAT - thisRef.m_length); // type is FLOAT value type is FLOAT
                    var local_17_FLOAT = (6.2831855 * thisRef.m_frequencyHz); // type is FLOAT value type is FLOAT
                    var local_18_FLOAT = (((2.0 * thisRef.m_mass) * thisRef.m_dampingRatio) * local_17_FLOAT); // type is FLOAT value type is FLOAT
                    local_19_FLOAT = ((thisRef.m_mass * local_17_FLOAT) * local_17_FLOAT); // type is FLOAT value type is FLOAT
                    local_20_FLOAT = data.step.dt; // type is FLOAT value type is FLOAT
                    var var188 = (local_20_FLOAT * (local_18_FLOAT + (local_20_FLOAT * local_19_FLOAT))); // type is FLOAT value type is FLOAT
                    thisRef.m_gamma = var188;
                    var var189 = thisRef.m_gamma; // type is FLOAT value type is FLOAT
                    if ((var189 == 0.0)) {
                        __label__ = 579;
                        break $S_490;
                    }
                    __label__ = 570;
                    }
                $M_579_570 : for(;;) switch (__label__) {
                    case 579 :
                    // NORMAL
                        var193 = 0.0; // type is FLOAT value type is FLOAT
                        break $M_579_570;
                    case 570 :
                    // NORMAL
                        var193 = (1.0 / thisRef.m_gamma); // type is FLOAT value type is FLOAT
                        break $M_579_570;
                }
                $S_580 : {
                // NORMAL
                    thisRef.m_gamma = var193;
                    var var200 = (((local_16_FLOAT * local_20_FLOAT) * local_19_FLOAT) * thisRef.m_gamma); // type is FLOAT value type is FLOAT
                    thisRef.m_bias = var200;
                    local_15_FLOAT = (local_15_FLOAT + thisRef.m_gamma); // type is FLOAT value type is FLOAT
                    var var205 = local_15_FLOAT; // type is FLOAT value type is FLOAT
                    if ((var205 == 0.0)) {
                        __label__ = 624;
                        break $S_580;
                    }
                    __label__ = 617;
                    }
                $M_617_624 : for(;;) switch (__label__) {
                    case 617 :
                    // NORMAL
                        var209 = (1.0 / local_15_FLOAT); // type is FLOAT value type is FLOAT
                        break $M_617_624;
                    case 624 :
                    // NORMAL
                        var209 = 0.0; // type is FLOAT value type is FLOAT
                        break $M_617_624;
                }
                thisRef.m_mass = var209;
                break $M_631_490;
            case 631 :
            // NORMAL
                thisRef.m_gamma = 0.0;
                thisRef.m_bias = 0.0;
                break $M_631_490;
        }
        $S_641 : {
        // NORMAL
            var var211 = data.step.warmStarting; // type is BOOLEAN value type is BOOLEAN
            if ((var211 == 0)) {
                __label__ = 826;
                break $S_641;
            }
            __label__ = 651;
            }
        $M_826_651 : for(;;) switch (__label__) {
            case 826 :
            // NORMAL
                thisRef.m_impulse = 0.0;
                break $M_826_651;
            case 651 :
            // NORMAL
                var var215 = (thisRef.m_impulse * data.step.dtRatio); // type is FLOAT value type is FLOAT
                thisRef.m_impulse = var215;
                var var217 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@b6cff7
                var local_16_REFERENCE = var217; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@305fb12d
                var var221 = local_16_REFERENCE.ojcVec2setojcVec2(local_16_REFERENCE,thisRef.m_u); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@51216b3a
                var var223 = var221.ojcVec2mulLocalFLOAT(var221,thisRef.m_impulse); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@33c0fedd
                var var224 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@77f17440
                var var230 = (var224.x - (thisRef.m_invMassA * local_16_REFERENCE.x)); // type is FLOAT value type is FLOAT
                var224.x = var230;
                var var231 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@77f17440
                var var237 = (var231.y - (thisRef.m_invMassA * local_16_REFERENCE.y)); // type is FLOAT value type is FLOAT
                var231.y = var237;
                var var238 = local_5_FLOAT; // type is FLOAT value type is FLOAT
                var var239 = thisRef.m_invIA; // type is FLOAT value type is FLOAT
                var var242 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.m_rA,local_16_REFERENCE); // type is FLOAT value type is FLOAT
                local_5_FLOAT = (var238 - (var239 * var242)); // type is FLOAT value type is FLOAT
                var var246 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@621cfef8
                var var252 = (var246.x + (thisRef.m_invMassB * local_16_REFERENCE.x)); // type is FLOAT value type is FLOAT
                var246.x = var252;
                var var253 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@621cfef8
                var var259 = (var253.y + (thisRef.m_invMassB * local_16_REFERENCE.y)); // type is FLOAT value type is FLOAT
                var253.y = var259;
                var var260 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                var var261 = thisRef.m_invIB; // type is FLOAT value type is FLOAT
                var var264 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.m_rB,local_16_REFERENCE); // type is FLOAT value type is FLOAT
                local_9_FLOAT = (var260 + (var261 * var264)); // type is FLOAT value type is FLOAT
                thisRef.pool.VOIDpushVec2INT(thisRef.pool,1);
                break $M_826_651;
        }
        var var271 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
        var var272 = local_5_FLOAT; // type is FLOAT value type is FLOAT
        var271.w = var272;
        var var275 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
        var var276 = local_9_FLOAT; // type is FLOAT value type is FLOAT
        var275.w = var276;
        return;
    },

    VOIDsolveVelocityConstraintsojdSolverData : function(thisRef,data) {
        var __label__ = null;
        var var2 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
        var local_2_REFERENCE = var2.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@404ff5e
        var var7 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
        var local_3_FLOAT = var7.w; // type is FLOAT value type is FLOAT
        var var13 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
        var local_4_REFERENCE = var13.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@171d8933
        var var18 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
        var local_5_FLOAT = var18.w; // type is FLOAT value type is FLOAT
        var var23 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@118ad69c
        var local_6_REFERENCE = var23; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@206427cd
        var var26 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3b9c290
        var local_7_REFERENCE = var26; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@789697c5
        ojcVec2.VOIDcrossToOutUnsafeFLOATojcVec2ojcVec2(local_3_FLOAT,thisRef.m_rA,local_6_REFERENCE);
        var var33 = local_6_REFERENCE.ojcVec2addLocalojcVec2(local_6_REFERENCE,local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3f6f807d
        ojcVec2.VOIDcrossToOutUnsafeFLOATojcVec2ojcVec2(local_5_FLOAT,thisRef.m_rB,local_7_REFERENCE);
        var var39 = local_7_REFERENCE.ojcVec2addLocalojcVec2(local_7_REFERENCE,local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3eb49212
        var var40 = thisRef.m_u; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@73546a16
        var var43 = local_7_REFERENCE.ojcVec2subLocalojcVec2(local_7_REFERENCE,local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3f30e306
        var var44 = ojcVec2.FLOATdotojcVec2ojcVec2(var40,var43); // type is FLOAT value type is FLOAT
        var local_8_FLOAT = var44; // type is FLOAT value type is FLOAT
        var local_9_FLOAT = ((-thisRef.m_mass) * ((local_8_FLOAT + thisRef.m_bias) + (thisRef.m_gamma * thisRef.m_impulse))); // type is FLOAT value type is FLOAT
        var var61 = (thisRef.m_impulse + local_9_FLOAT); // type is FLOAT value type is FLOAT
        thisRef.m_impulse = var61;
        var local_10_FLOAT = (local_9_FLOAT * thisRef.m_u.x); // type is FLOAT value type is FLOAT
        var local_11_FLOAT = (local_9_FLOAT * thisRef.m_u.y); // type is FLOAT value type is FLOAT
        var var74 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7c1ff0f5
        var var79 = (var74.x - (thisRef.m_invMassA * local_10_FLOAT)); // type is FLOAT value type is FLOAT
        var74.x = var79;
        var var80 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7c1ff0f5
        var var85 = (var80.y - (thisRef.m_invMassA * local_11_FLOAT)); // type is FLOAT value type is FLOAT
        var80.y = var85;
        var local_3_FLOAT = (local_3_FLOAT - (thisRef.m_invIA * ((thisRef.m_rA.x * local_11_FLOAT) - (thisRef.m_rA.y * local_10_FLOAT)))); // type is FLOAT value type is FLOAT
        var var100 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6621c966
        var var105 = (var100.x + (thisRef.m_invMassB * local_10_FLOAT)); // type is FLOAT value type is FLOAT
        var100.x = var105;
        var var106 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6621c966
        var var111 = (var106.y + (thisRef.m_invMassB * local_11_FLOAT)); // type is FLOAT value type is FLOAT
        var106.y = var111;
        var local_5_FLOAT = (local_5_FLOAT + (thisRef.m_invIB * ((thisRef.m_rB.x * local_11_FLOAT) - (thisRef.m_rB.y * local_10_FLOAT)))); // type is FLOAT value type is FLOAT
        var var128 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
        var var129 = local_3_FLOAT; // type is FLOAT value type is FLOAT
        var128.w = var129;
        var var132 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
        var var133 = local_5_FLOAT; // type is FLOAT value type is FLOAT
        var132.w = var133;
        thisRef.pool.VOIDpushVec2INT(thisRef.pool,2);
        return;
    },

    BOOLEANsolvePositionConstraintsojdSolverData : function(thisRef,data) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.m_frequencyHz; // type is FLOAT value type is FLOAT
            if ((var0 <= 0.0)) {
                break $S_0;
            }
            return 1;
            }
        $S_11 : {
        // NORMAL
            var var3 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@51d84a12
            var local_2_REFERENCE = var3; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@10d85919
            var var6 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@67b951ac
            var local_3_REFERENCE = var6; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5ebdb3e7
            var var9 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4da6faf8
            var local_4_REFERENCE = var9; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1fe472c4
            var var12 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@32fd74a5
            var local_5_REFERENCE = var12; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1ecdb96
            var var15 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7be79069
            var local_6_REFERENCE = var15; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@47a9bf83
            var var19 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            var local_7_REFERENCE = var19.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1e28b38f
            var var24 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            var local_8_FLOAT = var24.a; // type is FLOAT value type is FLOAT
            var var30 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            var local_9_REFERENCE = var30.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@797ffbb7
            var var35 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            var local_10_FLOAT = var35.a; // type is FLOAT value type is FLOAT
            var var41 = local_2_REFERENCE.ojcRotsetFLOAT(local_2_REFERENCE,local_8_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3e5c5829
            var var44 = local_3_REFERENCE.ojcRotsetFLOAT(local_3_REFERENCE,local_10_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3403bdc6
            var var45 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@10d85919
            var var48 = local_6_REFERENCE.ojcVec2setojcVec2(local_6_REFERENCE,thisRef.m_localAnchorA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6f6cd402
            var var50 = var48.ojcVec2subLocalojcVec2(var48,thisRef.m_localCenterA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@69c8381b
            ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var45,var50,local_4_REFERENCE);
            var var52 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5ebdb3e7
            var var55 = local_6_REFERENCE.ojcVec2setojcVec2(local_6_REFERENCE,thisRef.m_localAnchorB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3509b81b
            var var57 = var55.ojcVec2subLocalojcVec2(var55,thisRef.m_localCenterB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1c4ddef1
            ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var52,var57,local_5_REFERENCE);
            var var61 = local_6_REFERENCE.ojcVec2setojcVec2(local_6_REFERENCE,local_9_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1588c5be
            var var63 = var61.ojcVec2addLocalojcVec2(var61,local_5_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3da83ff4
            var var65 = var63.ojcVec2subLocalojcVec2(var63,local_7_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4519813a
            var var67 = var65.ojcVec2subLocalojcVec2(var65,local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3751753e
            var var69 = local_6_REFERENCE.FLOATnormalize(local_6_REFERENCE); // type is FLOAT value type is FLOAT
            var local_11_FLOAT = var69; // type is FLOAT value type is FLOAT
            var local_12_FLOAT = (local_11_FLOAT - thisRef.m_length); // type is FLOAT value type is FLOAT
            var var78 = ojcMathUtils.FLOATclampFLOATFLOATFLOAT(local_12_FLOAT,-0.2,0.2); // type is FLOAT value type is FLOAT
            var local_12_FLOAT = var78; // type is FLOAT value type is FLOAT
            var local_13_FLOAT = ((-thisRef.m_mass) * local_12_FLOAT); // type is FLOAT value type is FLOAT
            var local_14_FLOAT = (local_13_FLOAT * local_6_REFERENCE.x); // type is FLOAT value type is FLOAT
            var local_15_FLOAT = (local_13_FLOAT * local_6_REFERENCE.y); // type is FLOAT value type is FLOAT
            var var98 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6427e35f
            var var103 = (var98.x - (thisRef.m_invMassA * local_14_FLOAT)); // type is FLOAT value type is FLOAT
            var98.x = var103;
            var var104 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6427e35f
            var var109 = (var104.y - (thisRef.m_invMassA * local_15_FLOAT)); // type is FLOAT value type is FLOAT
            var104.y = var109;
            var local_8_FLOAT = (local_8_FLOAT - (thisRef.m_invIA * ((local_4_REFERENCE.x * local_15_FLOAT) - (local_4_REFERENCE.y * local_14_FLOAT)))); // type is FLOAT value type is FLOAT
            var var124 = local_9_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@188c37b0
            var var129 = (var124.x + (thisRef.m_invMassB * local_14_FLOAT)); // type is FLOAT value type is FLOAT
            var124.x = var129;
            var var130 = local_9_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@188c37b0
            var var135 = (var130.y + (thisRef.m_invMassB * local_15_FLOAT)); // type is FLOAT value type is FLOAT
            var130.y = var135;
            var local_10_FLOAT = (local_10_FLOAT + (thisRef.m_invIB * ((local_5_REFERENCE.x * local_15_FLOAT) - (local_5_REFERENCE.y * local_14_FLOAT)))); // type is FLOAT value type is FLOAT
            var var152 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            var var153 = local_8_FLOAT; // type is FLOAT value type is FLOAT
            var152.a = var153;
            var var156 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            var var157 = local_10_FLOAT; // type is FLOAT value type is FLOAT
            var156.a = var157;
            thisRef.pool.VOIDpushVec2INT(thisRef.pool,3);
            thisRef.pool.VOIDpushRotINT(thisRef.pool,2);
            var var161 = ojcMathUtils.FLOATabsFLOAT(local_12_FLOAT); // type is FLOAT value type is FLOAT
            if ((var161 >= 0.005)) {
                __label__ = 443;
                break $S_11;
            }
            __label__ = 439;
            }
        for(;;) switch (__label__) {
            case 443 :
            // NORMAL
                var var163 = 0; // type is INT value type is INT
                return var163;
            case 439 :
            // NORMAL
                var var163 = 1; // type is INT value type is INT
                return var163;
        }
    },

    classInitCheck : function() {
        if (!ojdjDistanceJoint.__initialized) {
            ojdjDistanceJoint.__initialized = true;
            var thePrototype = ojdjDistanceJoint.Create.prototype;
            thePrototype.instanceOf = ojdjDistanceJoint.instanceOf;
            thePrototype.ClassgetClass = ojdjDistanceJoint.ClassgetClass;
            thePrototype.BOOLEANsolvePositionConstraintsojdSolverData = ojdjDistanceJoint.BOOLEANsolvePositionConstraintsojdSolverData;
            thePrototype.VOIDsolveVelocityConstraintsojdSolverData = ojdjDistanceJoint.VOIDsolveVelocityConstraintsojdSolverData;
            thePrototype.VOIDinitVelocityConstraintsojdSolverData = ojdjDistanceJoint.VOIDinitVelocityConstraintsojdSolverData;
            thePrototype.BOOLEANgetCollideConnected = ojdjJoint.BOOLEANgetCollideConnected;
            thePrototype.ojdBodygetBodyB = ojdjJoint.ojdBodygetBodyB;
            thePrototype.ojdBodygetBodyA = ojdjJoint.ojdBodygetBodyA;
            thePrototype.ojdjJointTypegetType = ojdjJoint.ojdjJointTypegetType;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojdjJoint.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var ojdjDistanceJointDef = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 152,
    __implementedTypes : [146,1,152],

    Create : function() {
        this.type = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.userData = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.bodyA = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.bodyB = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.collideConnected = false; // declared in org.jbox2d.dynamics.joints.JointDef
        this.localAnchorA = null; // declared in org.jbox2d.dynamics.joints.DistanceJointDef
        this.localAnchorB = null; // declared in org.jbox2d.dynamics.joints.DistanceJointDef
        this.length = 0; // declared in org.jbox2d.dynamics.joints.DistanceJointDef
        this.frequencyHz = 0; // declared in org.jbox2d.dynamics.joints.DistanceJointDef
        this.dampingRatio = 0; // declared in org.jbox2d.dynamics.joints.DistanceJointDef
    },

    instanceOf : function(aType) {
        return ojdjDistanceJointDef.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdjDistanceJointDef;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        ojdjJointDef.VOIDinit(thisRef);
        var var0 = ojdjJointType.DISTANCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@35feae7c
        thisRef.type = var0;
        var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinitFLOATFLOAT(var1,0.0,0.0);
        thisRef.localAnchorA = var1;
        var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinitFLOATFLOAT(var2,0.0,0.0);
        thisRef.localAnchorB = var2;
        thisRef.length = 1.0;
        thisRef.frequencyHz = 0.0;
        thisRef.dampingRatio = 0.0;
        return;
    },

    VOIDinitializeojdBodyojdBodyojcVec2ojcVec2 : function(thisRef,b1,b2,anchor1,anchor2) {
        var __label__ = null;
        thisRef.bodyA = b1;
        thisRef.bodyB = b2;
        var var0 = thisRef.localAnchorA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@29bb7f
        var var2 = thisRef.bodyA.ojcVec2getLocalPointojcVec2(thisRef.bodyA,anchor1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5efd4f85
        var var3 = var0.ojcVec2setojcVec2(var0,var2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1347b7e2
        var var4 = thisRef.localAnchorB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@43f51362
        var var6 = thisRef.bodyB.ojcVec2getLocalPointojcVec2(thisRef.bodyB,anchor2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@ecaaa20
        var var7 = var4.ojcVec2setojcVec2(var4,var6); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3a7f5d1b
        var var8 = anchor2.ojcVec2subojcVec2(anchor2,anchor1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@14a91511
        var local_5_REFERENCE = var8; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7f2c6ae5
        var var11 = local_5_REFERENCE.FLOATlength(local_5_REFERENCE); // type is FLOAT value type is FLOAT
        thisRef.length = var11;
        return;
    },

    classInitCheck : function() {
        if (!ojdjDistanceJointDef.__initialized) {
            ojdjDistanceJointDef.__initialized = true;
            var thePrototype = ojdjDistanceJointDef.Create.prototype;
            thePrototype.instanceOf = ojdjDistanceJointDef.instanceOf;
            thePrototype.ClassgetClass = ojdjDistanceJointDef.ClassgetClass;
            thePrototype.VOIDinitializeojdBodyojdBodyojcVec2ojcVec2 = ojdjDistanceJointDef.VOIDinitializeojdBodyojdBodyojcVec2ojcVec2;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojdjJointDef.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var ojdjPrismaticJoint = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 153,
    __implementedTypes : [114,153,1],
    $assertionsDisabled : false, // declared in org.jbox2d.dynamics.joints.Joint
    $assertionsDisabled : false, // declared in org.jbox2d.dynamics.joints.PrismaticJoint

    Create : function() {
        this.pool = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_type = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_prev = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_next = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_bodyA = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_bodyB = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_collideConnected = false; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_islandFlag = false; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_userData = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_edgeA = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_edgeB = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_localCenterA = null; // declared in org.jbox2d.dynamics.joints.PrismaticJoint
        this.m_localCenterB = null; // declared in org.jbox2d.dynamics.joints.PrismaticJoint
        this.m_localAnchorA = null; // declared in org.jbox2d.dynamics.joints.PrismaticJoint
        this.m_localAnchorB = null; // declared in org.jbox2d.dynamics.joints.PrismaticJoint
        this.m_localXAxisA = null; // declared in org.jbox2d.dynamics.joints.PrismaticJoint
        this.m_localYAxisA = null; // declared in org.jbox2d.dynamics.joints.PrismaticJoint
        this.m_referenceAngle = 0; // declared in org.jbox2d.dynamics.joints.PrismaticJoint
        this.m_impulse = null; // declared in org.jbox2d.dynamics.joints.PrismaticJoint
        this.m_motorMass = 0; // declared in org.jbox2d.dynamics.joints.PrismaticJoint
        this.m_motorImpulse = 0; // declared in org.jbox2d.dynamics.joints.PrismaticJoint
        this.m_lowerTranslation = 0; // declared in org.jbox2d.dynamics.joints.PrismaticJoint
        this.m_upperTranslation = 0; // declared in org.jbox2d.dynamics.joints.PrismaticJoint
        this.m_maxMotorForce = 0; // declared in org.jbox2d.dynamics.joints.PrismaticJoint
        this.m_motorSpeed = 0; // declared in org.jbox2d.dynamics.joints.PrismaticJoint
        this.m_enableLimit = false; // declared in org.jbox2d.dynamics.joints.PrismaticJoint
        this.m_enableMotor = false; // declared in org.jbox2d.dynamics.joints.PrismaticJoint
        this.m_limitState = null; // declared in org.jbox2d.dynamics.joints.PrismaticJoint
        this.m_K = null; // declared in org.jbox2d.dynamics.joints.PrismaticJoint
        this.m_axis = null; // declared in org.jbox2d.dynamics.joints.PrismaticJoint
        this.m_perp = null; // declared in org.jbox2d.dynamics.joints.PrismaticJoint
        this.m_indexA = 0; // declared in org.jbox2d.dynamics.joints.PrismaticJoint
        this.m_indexB = 0; // declared in org.jbox2d.dynamics.joints.PrismaticJoint
        this.m_invMassA = 0; // declared in org.jbox2d.dynamics.joints.PrismaticJoint
        this.m_invMassB = 0; // declared in org.jbox2d.dynamics.joints.PrismaticJoint
        this.m_invIA = 0; // declared in org.jbox2d.dynamics.joints.PrismaticJoint
        this.m_invIB = 0; // declared in org.jbox2d.dynamics.joints.PrismaticJoint
        this.m_a1 = 0; // declared in org.jbox2d.dynamics.joints.PrismaticJoint
        this.m_a2 = 0; // declared in org.jbox2d.dynamics.joints.PrismaticJoint
        this.m_s1 = 0; // declared in org.jbox2d.dynamics.joints.PrismaticJoint
        this.m_s2 = 0; // declared in org.jbox2d.dynamics.joints.PrismaticJoint
    },

    instanceOf : function(aType) {
        return ojdjPrismaticJoint.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdjPrismaticJoint;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    ojdjJointcreateojdWorldojdjJointDef : function(p0,p1) {
         return ojdjJoint.ojdjJointcreateojdWorldojdjJointDef(p0,p1);
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdjPrismaticJoint.BOOLEANdesiredAssertionStatus(ojdjPrismaticJoint); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_13_9 : for(;;) switch (__label__) {
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_13_9;
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_13_9;
        }
        ojdjPrismaticJoint.$assertionsDisabled = var1;
        return;
    },

    VOIDinitojpIWorldPoolojdjPrismaticJointDef : function(thisRef,argWorld,def) {
        var __label__ = null;
        ojdjJoint.VOIDinitojpIWorldPoolojdjJointDef(thisRef,argWorld,def);
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var0);
        thisRef.m_localCenterA = var0;
        var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var1);
        thisRef.m_localCenterB = var1;
        var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinitojcVec2(var2,def.localAnchorA);
        thisRef.m_localAnchorA = var2;
        var var4 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinitojcVec2(var4,def.localAnchorB);
        thisRef.m_localAnchorB = var4;
        var var6 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinitojcVec2(var6,def.localAxisA);
        thisRef.m_localXAxisA = var6;
        var var9 = thisRef.m_localXAxisA.FLOATnormalize(thisRef.m_localXAxisA); // type is FLOAT value type is FLOAT
        var var10 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var10);
        thisRef.m_localYAxisA = var10;
        ojcVec2.VOIDcrossToOutUnsafeFLOATojcVec2ojcVec2(1.0,thisRef.m_localXAxisA,thisRef.m_localYAxisA);
        var var13 = def.referenceAngle; // type is FLOAT value type is FLOAT
        thisRef.m_referenceAngle = var13;
        var var14 = new ojcVec3.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec3.VOIDinit(var14);
        thisRef.m_impulse = var14;
        thisRef.m_motorMass = 0.0;
        thisRef.m_motorImpulse = 0.0;
        var var15 = def.lowerTranslation; // type is FLOAT value type is FLOAT
        thisRef.m_lowerTranslation = var15;
        var var16 = def.upperTranslation; // type is FLOAT value type is FLOAT
        thisRef.m_upperTranslation = var16;
        var var17 = def.maxMotorForce; // type is FLOAT value type is FLOAT
        thisRef.m_maxMotorForce = var17;
        var var18 = def.motorSpeed; // type is FLOAT value type is FLOAT
        thisRef.m_motorSpeed = var18;
        var var19 = def.enableLimit; // type is BOOLEAN value type is BOOLEAN
        thisRef.m_enableLimit = var19;
        var var20 = def.enableMotor; // type is BOOLEAN value type is BOOLEAN
        thisRef.m_enableMotor = var20;
        var var21 = ojdjLimitState.INACTIVE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6868c13a
        thisRef.m_limitState = var21;
        var var22 = new ojcMat33.Create(); // type is REFERENCE value type is REFERENCE
        ojcMat33.VOIDinit(var22);
        thisRef.m_K = var22;
        var var23 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var23);
        thisRef.m_axis = var23;
        var var24 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var24);
        thisRef.m_perp = var24;
        return;
    },

    VOIDinitVelocityConstraintsojdSolverData : function(thisRef,data) {
        var local_14_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_21_FLOAT = null; // type is FLOAT # of inits = 2
        var local_9_FLOAT = null; // type is FLOAT # of inits = 2
        var local_8_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_15_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_20_FLOAT = null; // type is FLOAT # of inits = 2
        var local_16_FLOAT = null; // type is FLOAT # of inits = 1
        var local_19_FLOAT = null; // type is FLOAT # of inits = 1
        var local_22_FLOAT = null; // type is FLOAT # of inits = 2
        var local_23_FLOAT = null; // type is FLOAT # of inits = 2
        var local_13_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_5_FLOAT = null; // type is FLOAT # of inits = 2
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_10_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_12_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_17_FLOAT = null; // type is FLOAT # of inits = 1
        var local_18_FLOAT = null; // type is FLOAT # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var1 = thisRef.m_bodyA.m_islandIndex; // type is INT value type is INT
            thisRef.m_indexA = var1;
            var var3 = thisRef.m_bodyB.m_islandIndex; // type is INT value type is INT
            thisRef.m_indexB = var3;
            var var8 = thisRef.m_localCenterA.ojcVec2setojcVec2(thisRef.m_localCenterA,thisRef.m_bodyA.m_sweep.localCenter); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@70627ff3
            var var13 = thisRef.m_localCenterB.ojcVec2setojcVec2(thisRef.m_localCenterB,thisRef.m_bodyB.m_sweep.localCenter); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7c2ce2b
            var var15 = thisRef.m_bodyA.m_invMass; // type is FLOAT value type is FLOAT
            thisRef.m_invMassA = var15;
            var var17 = thisRef.m_bodyB.m_invMass; // type is FLOAT value type is FLOAT
            thisRef.m_invMassB = var17;
            var var19 = thisRef.m_bodyA.m_invI; // type is FLOAT value type is FLOAT
            thisRef.m_invIA = var19;
            var var21 = thisRef.m_bodyB.m_invI; // type is FLOAT value type is FLOAT
            thisRef.m_invIB = var21;
            var var24 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            var local_2_REFERENCE = var24.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@27aeefa8
            var var29 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            var local_3_FLOAT = var29.a; // type is FLOAT value type is FLOAT
            var var35 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_4_REFERENCE = var35.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6e0152bf
            var var40 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_5_FLOAT = var40.w; // type is FLOAT value type is FLOAT
            var var46 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            var local_6_REFERENCE = var46.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@d7f256b
            var var51 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            var local_7_FLOAT = var51.a; // type is FLOAT value type is FLOAT
            var var57 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_8_REFERENCE = var57.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1c5d1179
            var var62 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_9_FLOAT = var62.w; // type is FLOAT value type is FLOAT
            var var67 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4c5e6ef5
            local_10_REFERENCE = var67; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2077a7a9
            var var70 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@28ae496b
            var local_11_REFERENCE = var70; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5c8e7568
            var var73 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@28ac6159
            local_12_REFERENCE = var73; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@41f585b8
            var var76 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@17ba8b7f
            local_13_REFERENCE = var76; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@23dc1896
            var var79 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4d857df2
            local_14_REFERENCE = var79; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@745da5b6
            var var82 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@620f741f
            local_15_REFERENCE = var82; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@698a0e7b
            var var86 = local_10_REFERENCE.ojcRotsetFLOAT(local_10_REFERENCE,local_3_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@29e277ae
            var var89 = local_11_REFERENCE.ojcRotsetFLOAT(local_11_REFERENCE,local_7_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6ac0e09e
            var var90 = local_10_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2077a7a9
            var var93 = local_12_REFERENCE.ojcVec2setojcVec2(local_12_REFERENCE,thisRef.m_localAnchorA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@c4c7ad9
            var var95 = var93.ojcVec2subLocalojcVec2(var93,thisRef.m_localCenterA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@15fa58c3
            ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var90,var95,local_14_REFERENCE);
            var var97 = local_11_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5c8e7568
            var var100 = local_12_REFERENCE.ojcVec2setojcVec2(local_12_REFERENCE,thisRef.m_localAnchorB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2f9f02d5
            var var102 = var100.ojcVec2subLocalojcVec2(var100,thisRef.m_localCenterB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@42b6d3a8
            ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var97,var102,local_15_REFERENCE);
            var var106 = local_12_REFERENCE.ojcVec2setojcVec2(local_12_REFERENCE,local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2d43e395
            var var108 = var106.ojcVec2subLocalojcVec2(var106,local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6ab88abe
            var var110 = var108.ojcVec2addLocalojcVec2(var108,local_15_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3de6a496
            var var112 = var110.ojcVec2subLocalojcVec2(var110,local_14_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@49b90b11
            local_16_FLOAT = thisRef.m_invMassA; // type is FLOAT value type is FLOAT
            local_17_FLOAT = thisRef.m_invMassB; // type is FLOAT value type is FLOAT
            local_18_FLOAT = thisRef.m_invIA; // type is FLOAT value type is FLOAT
            local_19_FLOAT = thisRef.m_invIB; // type is FLOAT value type is FLOAT
            ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(local_10_REFERENCE,thisRef.m_localXAxisA,thisRef.m_axis);
            var var130 = local_13_REFERENCE.ojcVec2setojcVec2(local_13_REFERENCE,local_12_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7b5406f8
            var var132 = var130.ojcVec2addLocalojcVec2(var130,local_14_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@55179e56
            var var135 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_13_REFERENCE,thisRef.m_axis); // type is FLOAT value type is FLOAT
            thisRef.m_a1 = var135;
            var var138 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_15_REFERENCE,thisRef.m_axis); // type is FLOAT value type is FLOAT
            thisRef.m_a2 = var138;
            var var153 = (((local_16_FLOAT + local_17_FLOAT) + ((local_18_FLOAT * thisRef.m_a1) * thisRef.m_a1)) + ((local_19_FLOAT * thisRef.m_a2) * thisRef.m_a2)); // type is FLOAT value type is FLOAT
            thisRef.m_motorMass = var153;
            var var154 = thisRef.m_motorMass; // type is FLOAT value type is FLOAT
            if ((var154 <= 0.0)) {
                __label__ = 491;
                break $S_0;
            }
            __label__ = 481;
            }
        $M_491_481 : for(;;) switch (__label__) {
            case 491 :
            // NORMAL
                $S_491 : {
                // NORMAL
                    ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(local_10_REFERENCE,thisRef.m_localYAxisA,thisRef.m_perp);
                    var var163 = local_13_REFERENCE.ojcVec2setojcVec2(local_13_REFERENCE,local_12_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5d5d5276
                    var var165 = var163.ojcVec2addLocalojcVec2(var163,local_14_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5cbd3b4f
                    var var168 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_13_REFERENCE,thisRef.m_perp); // type is FLOAT value type is FLOAT
                    thisRef.m_s1 = var168;
                    var var171 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_15_REFERENCE,thisRef.m_perp); // type is FLOAT value type is FLOAT
                    thisRef.m_s2 = var171;
                    local_20_FLOAT = (((local_16_FLOAT + local_17_FLOAT) + ((local_18_FLOAT * thisRef.m_s1) * thisRef.m_s1)) + ((local_19_FLOAT * thisRef.m_s2) * thisRef.m_s2)); // type is FLOAT value type is FLOAT
                    local_21_FLOAT = ((local_18_FLOAT * thisRef.m_s1) + (local_19_FLOAT * thisRef.m_s2)); // type is FLOAT value type is FLOAT
                    local_22_FLOAT = (((local_18_FLOAT * thisRef.m_s1) * thisRef.m_a1) + ((local_19_FLOAT * thisRef.m_s2) * thisRef.m_a2)); // type is FLOAT value type is FLOAT
                    local_23_FLOAT = (local_18_FLOAT + local_19_FLOAT); // type is FLOAT value type is FLOAT
                    var var216 = local_23_FLOAT; // type is FLOAT value type is FLOAT
                    if ((var216 != 0.0)) {
                        __label__ = 637;
                        break $S_491;
                    }
                    __label__ = 634;
                    }
                $M_634_637 : for(;;) switch (__label__) {
                    case 634 :
                    // NORMAL
                        local_23_FLOAT = 1.0; // type is FLOAT value type is FLOAT
                        __label__ = 637;
                        continue $M_634_637;
                    case 637 :
                    // NORMAL
                        $S_637 : {
                        // NORMAL
                            var local_24_FLOAT = ((local_18_FLOAT * thisRef.m_a1) + (local_19_FLOAT * thisRef.m_a2)); // type is FLOAT value type is FLOAT
                            var local_25_FLOAT = (((local_16_FLOAT + local_17_FLOAT) + ((local_18_FLOAT * thisRef.m_a1) * thisRef.m_a1)) + ((local_19_FLOAT * thisRef.m_a2) * thisRef.m_a2)); // type is FLOAT value type is FLOAT
                            var var250 = thisRef.m_K.ex.ojcVec3setFLOATFLOATFLOAT(thisRef.m_K.ex,local_20_FLOAT,local_21_FLOAT,local_22_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@70595e6
                            var var256 = thisRef.m_K.ey.ojcVec3setFLOATFLOATFLOAT(thisRef.m_K.ey,local_21_FLOAT,local_23_FLOAT,local_24_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6e894e7e
                            var var262 = thisRef.m_K.ez.ojcVec3setFLOATFLOATFLOAT(thisRef.m_K.ez,local_22_FLOAT,local_24_FLOAT,local_25_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@59f07f3b
                            var var263 = thisRef.m_enableLimit; // type is BOOLEAN value type is BOOLEAN
                            if ((var263 == 0)) {
                                __label__ = 878;
                                break $S_637;
                            }
                            __label__ = 745;
                            }
                        $M_745_878 : for(;;) switch (__label__) {
                            case 878 :
                            // NORMAL
                                var var290 = ojdjLimitState.INACTIVE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6c225009
                                thisRef.m_limitState = var290;
                                var var291 = thisRef.m_impulse; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@472342ce
                                var291.z = 0.0;
                                break $M_745_878;
                            case 745 :
                            // NORMAL
                                $S_745 : {
                                // NORMAL
                                    var var266 = ojcVec2.FLOATdotojcVec2ojcVec2(thisRef.m_axis,local_12_REFERENCE); // type is FLOAT value type is FLOAT
                                    local_20_FLOAT = var266; // type is FLOAT value type is FLOAT
                                    var var271 = ojcMathUtils.FLOATabsFLOAT((thisRef.m_upperTranslation - thisRef.m_lowerTranslation)); // type is FLOAT value type is FLOAT
                                    if ((var271 >= 0.01)) {
                                        __label__ = 784;
                                        break $S_745;
                                    }
                                    __label__ = 774;
                                    }
                                $M_784_774 : for(;;) switch (__label__) {
                                    case 774 :
                                    // NORMAL
                                        var var289 = ojdjLimitState.EQUAL; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@637d0eea
                                        thisRef.m_limitState = var289;
                                        break $M_784_774;
                                    case 784 :
                                    // NORMAL
                                        $S_784 : {
                                        // NORMAL
                                            var var273 = local_20_FLOAT; // type is FLOAT value type is FLOAT
                                            var var274 = thisRef.m_lowerTranslation; // type is FLOAT value type is FLOAT
                                            if ((var273 > var274)) {
                                                __label__ = 822;
                                                break $S_784;
                                            }
                                            __label__ = 794;
                                            }
                                        for(;;) switch (__label__) {
                                            case 822 :
                                            // NORMAL
                                                $S_822 : {
                                                // NORMAL
                                                    var var280 = local_20_FLOAT; // type is FLOAT value type is FLOAT
                                                    var var281 = thisRef.m_upperTranslation; // type is FLOAT value type is FLOAT
                                                    if ((var280 < var281)) {
                                                        __label__ = 860;
                                                        break $S_822;
                                                    }
                                                    __label__ = 832;
                                                    }
                                                for(;;) switch (__label__) {
                                                    case 832 :
                                                    // NORMAL
                                                        $S_832 : {
                                                        // NORMAL
                                                            var var283 = thisRef.m_limitState; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@39aebc19
                                                            var var284 = ojdjLimitState.AT_UPPER; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@47f2013d
                                                            if ((var283 == var284)) {
                                                                break $M_784_774;
                                                            }
                                                            }
                                                        var var285 = ojdjLimitState.AT_UPPER; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1a9a1e3f
                                                        thisRef.m_limitState = var285;
                                                        var var286 = thisRef.m_impulse; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@119b59d8
                                                        var286.z = 0.0;
                                                        break $M_784_774;
                                                    case 860 :
                                                    // NORMAL
                                                        var var287 = ojdjLimitState.INACTIVE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5d997186
                                                        thisRef.m_limitState = var287;
                                                        var var288 = thisRef.m_impulse; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@a3578e1
                                                        var288.z = 0.0;
                                                        break $M_784_774;
                                                }
                                            case 794 :
                                            // NORMAL
                                                $S_794 : {
                                                // NORMAL
                                                    var var276 = thisRef.m_limitState; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4014e47e
                                                    var var277 = ojdjLimitState.AT_LOWER; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@b0a303d
                                                    if ((var276 == var277)) {
                                                        break $M_784_774;
                                                    }
                                                    }
                                                var var278 = ojdjLimitState.AT_LOWER; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1d09759b
                                                thisRef.m_limitState = var278;
                                                var var279 = thisRef.m_impulse; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3cdae4ab
                                                var279.z = 0.0;
                                                break $M_784_774;
                                        }
                                }
                                break $M_745_878;
                        }
                        $S_893 : {
                        // NORMAL
                            var var292 = thisRef.m_enableMotor; // type is BOOLEAN value type is BOOLEAN
                            if ((var292 != 0)) {
                                __label__ = 905;
                                break $S_893;
                            }
                            __label__ = 900;
                            }
                        $M_900_905 : for(;;) switch (__label__) {
                            case 905 :
                            // NORMAL
                                $S_905 : {
                                // NORMAL
                                    var var294 = data.step.warmStarting; // type is BOOLEAN value type is BOOLEAN
                                    if ((var294 == 0)) {
                                        __label__ = 1192;
                                        break $S_905;
                                    }
                                    __label__ = 915;
                                    }
                                $M_1192_915 : for(;;) switch (__label__) {
                                    case 1192 :
                                    // NORMAL
                                        thisRef.m_impulse.VOIDsetZero(thisRef.m_impulse);
                                        thisRef.m_motorImpulse = 0.0;
                                        break $M_1192_915;
                                    case 915 :
                                    // NORMAL
                                        var var299 = thisRef.m_impulse.ojcVec3mulLocalFLOAT(thisRef.m_impulse,data.step.dtRatio); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5b8ad05a
                                        var var303 = (thisRef.m_motorImpulse * data.step.dtRatio); // type is FLOAT value type is FLOAT
                                        thisRef.m_motorImpulse = var303;
                                        var var305 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1db98ce
                                        var local_20_REFERENCE = var305; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@57a890c3
                                        var var309 = local_13_REFERENCE.ojcVec2setojcVec2(local_13_REFERENCE,thisRef.m_axis); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3c3cc921
                                        var var314 = var309.ojcVec2mulLocalFLOAT(var309,(thisRef.m_motorImpulse + thisRef.m_impulse.z)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@31b9d6fc
                                        var var317 = local_20_REFERENCE.ojcVec2setojcVec2(local_20_REFERENCE,thisRef.m_perp); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6c7925ed
                                        var var320 = var317.ojcVec2mulLocalFLOAT(var317,thisRef.m_impulse.x); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7fc49e29
                                        var var322 = var320.ojcVec2addLocalojcVec2(var320,local_13_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@25eb2531
                                        local_21_FLOAT = (((thisRef.m_impulse.x * thisRef.m_s1) + thisRef.m_impulse.y) + ((thisRef.m_motorImpulse + thisRef.m_impulse.z) * thisRef.m_a1)); // type is FLOAT value type is FLOAT
                                        local_22_FLOAT = (((thisRef.m_impulse.x * thisRef.m_s2) + thisRef.m_impulse.y) + ((thisRef.m_motorImpulse + thisRef.m_impulse.z) * thisRef.m_a2)); // type is FLOAT value type is FLOAT
                                        var var353 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2bb92e4e
                                        var var359 = (var353.x - (local_16_FLOAT * local_20_REFERENCE.x)); // type is FLOAT value type is FLOAT
                                        var353.x = var359;
                                        var var360 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2bb92e4e
                                        var var366 = (var360.y - (local_16_FLOAT * local_20_REFERENCE.y)); // type is FLOAT value type is FLOAT
                                        var360.y = var366;
                                        local_5_FLOAT = (local_5_FLOAT - (local_18_FLOAT * local_21_FLOAT)); // type is FLOAT value type is FLOAT
                                        var var373 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@9abdfa4
                                        var var379 = (var373.x + (local_17_FLOAT * local_20_REFERENCE.x)); // type is FLOAT value type is FLOAT
                                        var373.x = var379;
                                        var var380 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@9abdfa4
                                        var var386 = (var380.y + (local_17_FLOAT * local_20_REFERENCE.y)); // type is FLOAT value type is FLOAT
                                        var380.y = var386;
                                        local_9_FLOAT = (local_9_FLOAT + (local_19_FLOAT * local_22_FLOAT)); // type is FLOAT value type is FLOAT
                                        thisRef.pool.VOIDpushVec2INT(thisRef.pool,1);
                                        break $M_1192_915;
                                }
                                var var396 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
                                var var397 = local_5_FLOAT; // type is FLOAT value type is FLOAT
                                var396.w = var397;
                                var var400 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
                                var var401 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                                var400.w = var401;
                                thisRef.pool.VOIDpushRotINT(thisRef.pool,2);
                                thisRef.pool.VOIDpushVec2INT(thisRef.pool,4);
                                return;
                            case 900 :
                            // NORMAL
                                thisRef.m_motorImpulse = 0.0;
                                __label__ = 905;
                                continue $M_900_905;
                        }
                }
            case 481 :
            // NORMAL
                var var157 = (1.0 / thisRef.m_motorMass); // type is FLOAT value type is FLOAT
                thisRef.m_motorMass = var157;
                __label__ = 491;
                continue $M_491_481;
        }
    },

    VOIDsolveVelocityConstraintsojdSolverData : function(thisRef,data) {
        var local_5_FLOAT = null; // type is FLOAT # of inits = 4
        var local_9_FLOAT = null; // type is FLOAT # of inits = 1
        var local_6_FLOAT = null; // type is FLOAT # of inits = 1
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_11_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_7_FLOAT = null; // type is FLOAT # of inits = 1
        var local_15_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_8_FLOAT = null; // type is FLOAT # of inits = 1
        var local_14_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_3_FLOAT = null; // type is FLOAT # of inits = 4
        var local_10_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var2 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_2_REFERENCE = var2.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@77cb923c
            var var7 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_3_FLOAT = var7.w; // type is FLOAT value type is FLOAT
            var var13 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_4_REFERENCE = var13.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@17066749
            var var18 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_5_FLOAT = var18.w; // type is FLOAT value type is FLOAT
            local_6_FLOAT = thisRef.m_invMassA; // type is FLOAT value type is FLOAT
            local_7_FLOAT = thisRef.m_invMassB; // type is FLOAT value type is FLOAT
            local_8_FLOAT = thisRef.m_invIA; // type is FLOAT value type is FLOAT
            local_9_FLOAT = thisRef.m_invIB; // type is FLOAT value type is FLOAT
            var var35 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@f0062c4
            local_10_REFERENCE = var35; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7b48e16a
            var var37 = thisRef.m_enableMotor; // type is BOOLEAN value type is BOOLEAN
            if ((var37 == 0)) {
                __label__ = 348;
                break $S_0;
            }
            __label__ = 96;
            }
        $M_348_96 : for(;;) switch (__label__) {
            case 348 :
            // NORMAL
                $S_348 : {
                // NORMAL
                    var var145 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@141e6cf
                    local_11_REFERENCE = var145; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5db01877
                    var var149 = local_10_REFERENCE.ojcVec2setojcVec2(local_10_REFERENCE,local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2a30cea9
                    var var151 = var149.ojcVec2subLocalojcVec2(var149,local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@e28d889
                    var var152 = local_11_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5db01877
                    var var155 = ojcVec2.FLOATdotojcVec2ojcVec2(thisRef.m_perp,local_10_REFERENCE); // type is FLOAT value type is FLOAT
                    var var163 = ((var155 + (thisRef.m_s2 * local_5_FLOAT)) - (thisRef.m_s1 * local_3_FLOAT)); // type is FLOAT value type is FLOAT
                    var152.x = var163;
                    var var164 = local_11_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5db01877
                    var var167 = (local_5_FLOAT - local_3_FLOAT); // type is FLOAT value type is FLOAT
                    var164.y = var167;
                    var var168 = thisRef.m_enableLimit; // type is BOOLEAN value type is BOOLEAN
                    if ((var168 == 0)) {
                        __label__ = 975;
                        break $S_348;
                    }
                    __label__ = 416;
                    }
                $M_416_975 : for(;;) switch (__label__) {
                    case 975 :
                    // NORMAL
                        var var359 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2b28dca
                        var local_12_REFERENCE = var359; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@ccb74cd
                        var var361 = thisRef.m_K; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2022a67b
                        var var363 = local_11_REFERENCE.ojcVec2negateLocal(local_11_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6886de66
                        var361.VOIDsolve22ToOutojcVec2ojcVec2(var361,var363,local_12_REFERENCE);
                        var var366 = local_11_REFERENCE.ojcVec2negateLocal(local_11_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7e4cd261
                        var var367 = thisRef.m_impulse; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@29f6ac79
                        var var371 = (var367.x + local_12_REFERENCE.x); // type is FLOAT value type is FLOAT
                        var367.x = var371;
                        var var372 = thisRef.m_impulse; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1cd2d642
                        var var376 = (var372.y + local_12_REFERENCE.y); // type is FLOAT value type is FLOAT
                        var372.y = var376;
                        var var378 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@42f95e50
                        var local_13_REFERENCE = var378; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5a3e43b4
                        var var381 = local_13_REFERENCE.ojcVec2setojcVec2(local_13_REFERENCE,thisRef.m_perp); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@46b7a9ee
                        var var384 = var381.ojcVec2mulLocalFLOAT(var381,local_12_REFERENCE.x); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4cdd17bc
                        var local_14_FLOAT = ((local_12_REFERENCE.x * thisRef.m_s1) + local_12_REFERENCE.y); // type is FLOAT value type is FLOAT
                        var local_15_FLOAT = ((local_12_REFERENCE.x * thisRef.m_s2) + local_12_REFERENCE.y); // type is FLOAT value type is FLOAT
                        var var402 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1ea23751
                        var var408 = (var402.x - (local_6_FLOAT * local_13_REFERENCE.x)); // type is FLOAT value type is FLOAT
                        var402.x = var408;
                        var var409 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1ea23751
                        var var415 = (var409.y - (local_6_FLOAT * local_13_REFERENCE.y)); // type is FLOAT value type is FLOAT
                        var409.y = var415;
                        local_3_FLOAT = (local_3_FLOAT - (local_8_FLOAT * local_14_FLOAT)); // type is FLOAT value type is FLOAT
                        var var422 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@50267a7
                        var var428 = (var422.x + (local_7_FLOAT * local_13_REFERENCE.x)); // type is FLOAT value type is FLOAT
                        var422.x = var428;
                        var var429 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@50267a7
                        var var435 = (var429.y + (local_7_FLOAT * local_13_REFERENCE.y)); // type is FLOAT value type is FLOAT
                        var429.y = var435;
                        local_5_FLOAT = (local_5_FLOAT + (local_9_FLOAT * local_15_FLOAT)); // type is FLOAT value type is FLOAT
                        thisRef.pool.VOIDpushVec2INT(thisRef.pool,2);
                        break $M_416_975;
                    case 416 :
                    // NORMAL
                        $S_416 : {
                        // NORMAL
                            var var169 = thisRef.m_limitState; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@44dedba9
                            var var170 = ojdjLimitState.INACTIVE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6cd50365
                            if ((var169 == var170)) {
                                __label__ = 975;
                                continue $M_416_975;
                            }
                            }
                        $S_426 : {
                        // NORMAL
                            var var173 = local_10_REFERENCE.ojcVec2setojcVec2(local_10_REFERENCE,local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@17563fc8
                            var var175 = var173.ojcVec2subLocalojcVec2(var173,local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3312ba69
                            var var178 = ojcVec2.FLOATdotojcVec2ojcVec2(thisRef.m_axis,local_10_REFERENCE); // type is FLOAT value type is FLOAT
                            var local_12_FLOAT = ((var178 + (thisRef.m_a2 * local_5_FLOAT)) - (thisRef.m_a1 * local_3_FLOAT)); // type is FLOAT value type is FLOAT
                            var var189 = thisRef.pool.ojcVec3popVec3(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1233c31
                            var local_13_REFERENCE = var189; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@45a9c95b
                            var var197 = local_13_REFERENCE.ojcVec3setFLOATFLOATFLOAT(local_13_REFERENCE,local_11_REFERENCE.x,local_11_REFERENCE.y,local_12_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@63270659
                            var var199 = thisRef.pool.ojcVec3popVec3(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@45c029a6
                            local_14_REFERENCE = var199; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@52a7b42f
                            var var202 = thisRef.pool.ojcVec3popVec3(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5d9a479b
                            local_15_REFERENCE = var202; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@787134d9
                            var var205 = local_14_REFERENCE.ojcVec3setojcVec3(local_14_REFERENCE,thisRef.m_impulse); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@56f2be62
                            var var206 = thisRef.m_K; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@d3c7f2b
                            var var208 = local_13_REFERENCE.ojcVec3negateLocal(local_13_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4975ea33
                            var206.VOIDsolve33ToOutojcVec3ojcVec3(var206,var208,local_15_REFERENCE);
                            var var212 = thisRef.m_impulse.ojcVec3addLocalojcVec3(thisRef.m_impulse,local_15_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@465cca19
                            var var213 = thisRef.m_limitState; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@51e6d1e
                            var var214 = ojdjLimitState.AT_LOWER; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6b358fb1
                            if ((var213 != var214)) {
                                __label__ = 580;
                                break $S_426;
                            }
                            __label__ = 559;
                            }
                        $M_580_559 : for(;;) switch (__label__) {
                            case 559 :
                            // NORMAL
                                var var217 = thisRef.m_impulse; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@d77c496
                                var var220 = ojcMathUtils.FLOATmaxFLOATFLOAT(thisRef.m_impulse.z,0.0); // type is FLOAT value type is FLOAT
                                var217.z = var220;
                                break $M_580_559;
                            case 580 :
                            // NORMAL
                                $S_580 : {
                                // NORMAL
                                    var var215 = thisRef.m_limitState; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2ddbdb23
                                    var var216 = ojdjLimitState.AT_UPPER; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5b5b351b
                                    if ((var215 != var216)) {
                                        break $M_580_559;
                                    }
                                    }
                                var var221 = thisRef.m_impulse; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1c5461c6
                                var var224 = ojcMathUtils.FLOATminFLOATFLOAT(thisRef.m_impulse.z,0.0); // type is FLOAT value type is FLOAT
                                var221.z = var224;
                                break $M_580_559;
                        }
                        var var226 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2f3455ae
                        var local_16_REFERENCE = var226; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5cc581a8
                        var var229 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5e3494c6
                        var local_17_REFERENCE = var229; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@61519497
                        var var238 = local_10_REFERENCE.ojcVec2setFLOATFLOAT(local_10_REFERENCE,thisRef.m_K.ez.x,thisRef.m_K.ez.y); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6cc52436
                        var var244 = var238.ojcVec2mulLocalFLOAT(var238,(thisRef.m_impulse.z - local_14_REFERENCE.z)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1c7d20c7
                        var var247 = local_16_REFERENCE.ojcVec2setojcVec2(local_16_REFERENCE,local_11_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6615152a
                        var var248 = var247.ojcVec2negateLocal(var247); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@b0dd053
                        var var250 = var248.ojcVec2subLocalojcVec2(var248,local_10_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4eaca190
                        thisRef.m_K.VOIDsolve22ToOutojcVec2ojcVec2(thisRef.m_K,local_16_REFERENCE,local_17_REFERENCE);
                        var var259 = local_17_REFERENCE.ojcVec2addLocalFLOATFLOAT(local_17_REFERENCE,local_14_REFERENCE.x,local_14_REFERENCE.y); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3b22cb9a
                        var var260 = thisRef.m_impulse; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@75d02591
                        var var262 = local_17_REFERENCE.x; // type is FLOAT value type is FLOAT
                        var260.x = var262;
                        var var263 = thisRef.m_impulse; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@103afc30
                        var var265 = local_17_REFERENCE.y; // type is FLOAT value type is FLOAT
                        var263.y = var265;
                        var var268 = local_15_REFERENCE.ojcVec3setojcVec3(local_15_REFERENCE,thisRef.m_impulse); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3bb16f86
                        var var270 = var268.ojcVec3subLocalojcVec3(var268,local_14_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@16621d71
                        var var272 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@62ea4e81
                        var local_18_REFERENCE = var272; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2576e590
                        var var276 = local_10_REFERENCE.ojcVec2setojcVec2(local_10_REFERENCE,thisRef.m_axis); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@158b73e7
                        var var279 = var276.ojcVec2mulLocalFLOAT(var276,local_15_REFERENCE.z); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@13046db2
                        var var282 = local_18_REFERENCE.ojcVec2setojcVec2(local_18_REFERENCE,thisRef.m_perp); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@23aab715
                        var var285 = var282.ojcVec2mulLocalFLOAT(var282,local_15_REFERENCE.x); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@31628c95
                        var var287 = var285.ojcVec2addLocalojcVec2(var285,local_10_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7f38c515
                        var local_19_FLOAT = (((local_15_REFERENCE.x * thisRef.m_s1) + local_15_REFERENCE.y) + (local_15_REFERENCE.z * thisRef.m_a1)); // type is FLOAT value type is FLOAT
                        var local_20_FLOAT = (((local_15_REFERENCE.x * thisRef.m_s2) + local_15_REFERENCE.y) + (local_15_REFERENCE.z * thisRef.m_a2)); // type is FLOAT value type is FLOAT
                        var var316 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1ea23751
                        var var322 = (var316.x - (local_6_FLOAT * local_18_REFERENCE.x)); // type is FLOAT value type is FLOAT
                        var316.x = var322;
                        var var323 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1ea23751
                        var var329 = (var323.y - (local_6_FLOAT * local_18_REFERENCE.y)); // type is FLOAT value type is FLOAT
                        var323.y = var329;
                        local_3_FLOAT = (local_3_FLOAT - (local_8_FLOAT * local_19_FLOAT)); // type is FLOAT value type is FLOAT
                        var var336 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@50267a7
                        var var342 = (var336.x + (local_7_FLOAT * local_18_REFERENCE.x)); // type is FLOAT value type is FLOAT
                        var336.x = var342;
                        var var343 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@50267a7
                        var var349 = (var343.y + (local_7_FLOAT * local_18_REFERENCE.y)); // type is FLOAT value type is FLOAT
                        var343.y = var349;
                        local_5_FLOAT = (local_5_FLOAT + (local_9_FLOAT * local_20_FLOAT)); // type is FLOAT value type is FLOAT
                        thisRef.pool.VOIDpushVec2INT(thisRef.pool,3);
                        thisRef.pool.VOIDpushVec3INT(thisRef.pool,3);
                        break $M_416_975;
                }
                var var445 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
                var var446 = local_3_FLOAT; // type is FLOAT value type is FLOAT
                var445.w = var446;
                var var449 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
                var var450 = local_5_FLOAT; // type is FLOAT value type is FLOAT
                var449.w = var450;
                thisRef.pool.VOIDpushVec2INT(thisRef.pool,2);
                return;
            case 96 :
            // NORMAL
                $S_96 : {
                // NORMAL
                    var var38 = thisRef.m_limitState; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4f614ebd
                    var var39 = ojdjLimitState.EQUAL; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@39055a5b
                    if ((var38 == var39)) {
                        __label__ = 348;
                        continue $M_348_96;
                    }
                    }
                var var42 = local_10_REFERENCE.ojcVec2setojcVec2(local_10_REFERENCE,local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1ca66fca
                var var44 = var42.ojcVec2subLocalojcVec2(var42,local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@258f1126
                var var47 = ojcVec2.FLOATdotojcVec2ojcVec2(thisRef.m_axis,local_10_REFERENCE); // type is FLOAT value type is FLOAT
                var local_11_FLOAT = ((var47 + (thisRef.m_a2 * local_5_FLOAT)) - (thisRef.m_a1 * local_3_FLOAT)); // type is FLOAT value type is FLOAT
                var local_12_FLOAT = (thisRef.m_motorMass * (thisRef.m_motorSpeed - local_11_FLOAT)); // type is FLOAT value type is FLOAT
                var local_13_FLOAT = thisRef.m_motorImpulse; // type is FLOAT value type is FLOAT
                var local_14_FLOAT = (data.step.dt * thisRef.m_maxMotorForce); // type is FLOAT value type is FLOAT
                var var80 = ojcMathUtils.FLOATclampFLOATFLOATFLOAT((thisRef.m_motorImpulse + local_12_FLOAT),(-local_14_FLOAT),local_14_FLOAT); // type is FLOAT value type is FLOAT
                thisRef.m_motorImpulse = var80;
                var local_12_FLOAT = (thisRef.m_motorImpulse - local_13_FLOAT); // type is FLOAT value type is FLOAT
                var var86 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@605ea78c
                local_15_REFERENCE = var86; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@440ede83
                var var90 = local_15_REFERENCE.ojcVec2setojcVec2(local_15_REFERENCE,thisRef.m_axis); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@731aee5e
                var var92 = var90.ojcVec2mulLocalFLOAT(var90,local_12_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5ced07c8
                var local_16_FLOAT = (local_12_FLOAT * thisRef.m_a1); // type is FLOAT value type is FLOAT
                var local_17_FLOAT = (local_12_FLOAT * thisRef.m_a2); // type is FLOAT value type is FLOAT
                var var103 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1ea23751
                var var109 = (var103.x - (local_6_FLOAT * local_15_REFERENCE.x)); // type is FLOAT value type is FLOAT
                var103.x = var109;
                var var110 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1ea23751
                var var116 = (var110.y - (local_6_FLOAT * local_15_REFERENCE.y)); // type is FLOAT value type is FLOAT
                var110.y = var116;
                local_3_FLOAT = (local_3_FLOAT - (local_8_FLOAT * local_16_FLOAT)); // type is FLOAT value type is FLOAT
                var var123 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@50267a7
                var var129 = (var123.x + (local_7_FLOAT * local_15_REFERENCE.x)); // type is FLOAT value type is FLOAT
                var123.x = var129;
                var var130 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@50267a7
                var var136 = (var130.y + (local_7_FLOAT * local_15_REFERENCE.y)); // type is FLOAT value type is FLOAT
                var130.y = var136;
                local_5_FLOAT = (local_5_FLOAT + (local_9_FLOAT * local_17_FLOAT)); // type is FLOAT value type is FLOAT
                thisRef.pool.VOIDpushVec2INT(thisRef.pool,1);
                __label__ = 348;
                continue $M_348_96;
        }
    },

    BOOLEANsolvePositionConstraintsojdSolverData : function(thisRef,data) {
        var local_29_FLOAT = null; // type is FLOAT # of inits = 3
        var local_17_FLOAT = null; // type is FLOAT # of inits = 1
        var local_16_FLOAT = null; // type is FLOAT # of inits = 1
        var local_25_FLOAT = null; // type is FLOAT # of inits = 1
        var local_15_FLOAT = null; // type is FLOAT # of inits = 2
        var local_14_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_21_FLOAT = null; // type is FLOAT # of inits = 1
        var local_12_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_24_FLOAT = null; // type is FLOAT # of inits = 4
        var local_30_FLOAT = null; // type is FLOAT # of inits = 4
        var local_18_FLOAT = null; // type is FLOAT # of inits = 1
        var local_26_INT = null; // type is INT # of inits = 4
        var local_10_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_13_FLOAT = null; // type is FLOAT # of inits = 2
        var local_9_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_20_FLOAT = null; // type is FLOAT # of inits = 1
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_8_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_19_FLOAT = null; // type is FLOAT # of inits = 1
        var local_11_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_28_FLOAT = null; // type is FLOAT # of inits = 4
        var local_7_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_22_FLOAT = null; // type is FLOAT # of inits = 1
        var local_23_FLOAT = null; // type is FLOAT # of inits = 1
        var local_27_FLOAT = null; // type is FLOAT # of inits = 4
        var local_31_FLOAT = null; // type is FLOAT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var1 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@70f06430
            var local_2_REFERENCE = var1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7e99fd5e
            var var4 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3ccc0224
            var local_3_REFERENCE = var4; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@57fc1a77
            var var7 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@245e355c
            var local_4_REFERENCE = var7; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@159c5f84
            var var10 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@499da231
            var local_5_REFERENCE = var10; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7e8536d7
            var var13 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2b24088e
            local_6_REFERENCE = var13; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4ed2a132
            var var16 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5cb30211
            local_7_REFERENCE = var16; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@bbc87af
            var var19 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@781baf9c
            local_8_REFERENCE = var19; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1f34385a
            var var22 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2fff1dc6
            local_9_REFERENCE = var22; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3e978dd9
            var var25 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@241410cf
            local_10_REFERENCE = var25; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6143ae68
            var var28 = thisRef.pool.ojcVec3popVec3(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@60733dd6
            local_11_REFERENCE = var28; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@eadcc10
            var var32 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_12_REFERENCE = var32.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@45b1090b
            var var37 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_13_FLOAT = var37.a; // type is FLOAT value type is FLOAT
            var var43 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_14_REFERENCE = var43.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@12f73d56
            var var48 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_15_FLOAT = var48.a; // type is FLOAT value type is FLOAT
            var var54 = local_2_REFERENCE.ojcRotsetFLOAT(local_2_REFERENCE,local_13_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@16e1c5af
            var var57 = local_3_REFERENCE.ojcRotsetFLOAT(local_3_REFERENCE,local_15_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6f05c728
            local_16_FLOAT = thisRef.m_invMassA; // type is FLOAT value type is FLOAT
            local_17_FLOAT = thisRef.m_invMassB; // type is FLOAT value type is FLOAT
            local_18_FLOAT = thisRef.m_invIA; // type is FLOAT value type is FLOAT
            local_19_FLOAT = thisRef.m_invIB; // type is FLOAT value type is FLOAT
            var var70 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7e99fd5e
            var var73 = local_9_REFERENCE.ojcVec2setojcVec2(local_9_REFERENCE,thisRef.m_localAnchorA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@22317292
            var var75 = var73.ojcVec2subLocalojcVec2(var73,thisRef.m_localCenterA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@987e60f
            ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var70,var75,local_4_REFERENCE);
            var var77 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@57fc1a77
            var var80 = local_9_REFERENCE.ojcVec2setojcVec2(local_9_REFERENCE,thisRef.m_localAnchorB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@11d3862d
            var var82 = var80.ojcVec2subLocalojcVec2(var80,thisRef.m_localCenterB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@502e3fb8
            ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var77,var82,local_5_REFERENCE);
            var var86 = local_6_REFERENCE.ojcVec2setojcVec2(local_6_REFERENCE,local_14_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@792262cd
            var var88 = var86.ojcVec2addLocalojcVec2(var86,local_5_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4f234478
            var var90 = var88.ojcVec2subLocalojcVec2(var88,local_12_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@424c515f
            var var92 = var90.ojcVec2subLocalojcVec2(var90,local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@633e7551
            ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(local_2_REFERENCE,thisRef.m_localXAxisA,local_7_REFERENCE);
            var var98 = local_9_REFERENCE.ojcVec2setojcVec2(local_9_REFERENCE,local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@96057f1
            var var100 = var98.ojcVec2addLocalojcVec2(var98,local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5cb5c221
            var var102 = ojcVec2.FLOATcrossojcVec2ojcVec2(var100,local_7_REFERENCE); // type is FLOAT value type is FLOAT
            local_20_FLOAT = var102; // type is FLOAT value type is FLOAT
            var var107 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_5_REFERENCE,local_7_REFERENCE); // type is FLOAT value type is FLOAT
            local_21_FLOAT = var107; // type is FLOAT value type is FLOAT
            ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(local_2_REFERENCE,thisRef.m_localYAxisA,local_8_REFERENCE);
            var var115 = local_9_REFERENCE.ojcVec2setojcVec2(local_9_REFERENCE,local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7c53a641
            var var117 = var115.ojcVec2addLocalojcVec2(var115,local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6cd7c067
            var var119 = ojcVec2.FLOATcrossojcVec2ojcVec2(var117,local_8_REFERENCE); // type is FLOAT value type is FLOAT
            local_22_FLOAT = var119; // type is FLOAT value type is FLOAT
            var var124 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_5_REFERENCE,local_8_REFERENCE); // type is FLOAT value type is FLOAT
            local_23_FLOAT = var124; // type is FLOAT value type is FLOAT
            var var127 = local_10_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6143ae68
            var var130 = ojcVec2.FLOATdotojcVec2ojcVec2(local_8_REFERENCE,local_6_REFERENCE); // type is FLOAT value type is FLOAT
            var127.x = var130;
            var var131 = local_10_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6143ae68
            var var136 = ((local_15_FLOAT - local_13_FLOAT) - thisRef.m_referenceAngle); // type is FLOAT value type is FLOAT
            var131.y = var136;
            var var139 = ojcMathUtils.FLOATabsFLOAT(local_10_REFERENCE.x); // type is FLOAT value type is FLOAT
            local_24_FLOAT = var139; // type is FLOAT value type is FLOAT
            var var144 = ojcMathUtils.FLOATabsFLOAT(local_10_REFERENCE.y); // type is FLOAT value type is FLOAT
            local_25_FLOAT = var144; // type is FLOAT value type is FLOAT
            local_26_INT = 0; // type is INT value type is INT
            local_27_FLOAT = 0.0; // type is FLOAT value type is FLOAT
            var var151 = thisRef.m_enableLimit; // type is BOOLEAN value type is BOOLEAN
            if ((var151 == 0)) {
                __label__ = 554;
                break $S_0;
            }
            __label__ = 405;
            }
        $M_554_405 : for(;;) switch (__label__) {
            case 405 :
            // NORMAL
                $S_405 : {
                // NORMAL
                    var var154 = ojcVec2.FLOATdotojcVec2ojcVec2(local_7_REFERENCE,local_6_REFERENCE); // type is FLOAT value type is FLOAT
                    local_28_FLOAT = var154; // type is FLOAT value type is FLOAT
                    var var160 = ojcMathUtils.FLOATabsFLOAT((thisRef.m_upperTranslation - thisRef.m_lowerTranslation)); // type is FLOAT value type is FLOAT
                    if ((var160 >= 0.01)) {
                        __label__ = 461;
                        break $S_405;
                    }
                    __label__ = 432;
                    }
                for(;;) switch (__label__) {
                    case 432 :
                    // NORMAL
                        var var163 = ojcMathUtils.FLOATclampFLOATFLOATFLOAT(local_28_FLOAT,-0.2,0.2); // type is FLOAT value type is FLOAT
                        local_27_FLOAT = var163; // type is FLOAT value type is FLOAT
                        var var165 = local_24_FLOAT; // type is FLOAT value type is FLOAT
                        var var167 = ojcMathUtils.FLOATabsFLOAT(local_28_FLOAT); // type is FLOAT value type is FLOAT
                        var var168 = ojcMathUtils.FLOATmaxFLOATFLOAT(var165,var167); // type is FLOAT value type is FLOAT
                        local_24_FLOAT = var168; // type is FLOAT value type is FLOAT
                        local_26_INT = 1; // type is INT value type is INT
                        __label__ = 554;
                        continue $M_554_405;
                    case 461 :
                    // NORMAL
                        $S_461 : {
                        // NORMAL
                            var var171 = local_28_FLOAT; // type is FLOAT value type is FLOAT
                            var var172 = thisRef.m_lowerTranslation; // type is FLOAT value type is FLOAT
                            if ((var171 > var172)) {
                                __label__ = 509;
                                break $S_461;
                            }
                            __label__ = 471;
                            }
                        for(;;) switch (__label__) {
                            case 509 :
                            // NORMAL
                                $S_509 : {
                                // NORMAL
                                    var var187 = local_28_FLOAT; // type is FLOAT value type is FLOAT
                                    var var188 = thisRef.m_upperTranslation; // type is FLOAT value type is FLOAT
                                    if ((var187 < var188)) {
                                        __label__ = 554;
                                        continue $M_554_405;
                                    }
                                    }
                                var var194 = ojcMathUtils.FLOATclampFLOATFLOATFLOAT(((local_28_FLOAT - thisRef.m_upperTranslation) - 0.005),0.0,0.2); // type is FLOAT value type is FLOAT
                                local_27_FLOAT = var194; // type is FLOAT value type is FLOAT
                                var var200 = ojcMathUtils.FLOATmaxFLOATFLOAT(local_24_FLOAT,(local_28_FLOAT - thisRef.m_upperTranslation)); // type is FLOAT value type is FLOAT
                                local_24_FLOAT = var200; // type is FLOAT value type is FLOAT
                                local_26_INT = 1; // type is INT value type is INT
                                __label__ = 554;
                                continue $M_554_405;
                            case 471 :
                            // NORMAL
                                var var178 = ojcMathUtils.FLOATclampFLOATFLOATFLOAT(((local_28_FLOAT - thisRef.m_lowerTranslation) + 0.005),-0.2,0.0); // type is FLOAT value type is FLOAT
                                local_27_FLOAT = var178; // type is FLOAT value type is FLOAT
                                var var184 = ojcMathUtils.FLOATmaxFLOATFLOAT(local_24_FLOAT,(thisRef.m_lowerTranslation - local_28_FLOAT)); // type is FLOAT value type is FLOAT
                                local_24_FLOAT = var184; // type is FLOAT value type is FLOAT
                                local_26_INT = 1; // type is INT value type is INT
                                __label__ = 554;
                                continue $M_554_405;
                        }
                }
            case 554 :
            // NORMAL
                $S_554 : {
                // NORMAL
                    var var203 = local_26_INT; // type is INT value type is INT
                    if ((var203 == 0)) {
                        __label__ = 800;
                        break $S_554;
                    }
                    __label__ = 559;
                    }
                $M_559_800 : for(;;) switch (__label__) {
                    case 800 :
                    // NORMAL
                        $S_800 : {
                        // NORMAL
                            local_28_FLOAT = (((local_16_FLOAT + local_17_FLOAT) + ((local_18_FLOAT * local_22_FLOAT) * local_22_FLOAT)) + ((local_19_FLOAT * local_23_FLOAT) * local_23_FLOAT)); // type is FLOAT value type is FLOAT
                            local_29_FLOAT = ((local_18_FLOAT * local_22_FLOAT) + (local_19_FLOAT * local_23_FLOAT)); // type is FLOAT value type is FLOAT
                            local_30_FLOAT = (local_18_FLOAT + local_19_FLOAT); // type is FLOAT value type is FLOAT
                            var var342 = local_30_FLOAT; // type is FLOAT value type is FLOAT
                            if ((var342 != 0.0)) {
                                __label__ = 855;
                                break $S_800;
                            }
                            __label__ = 852;
                            }
                        $M_855_852 : for(;;) switch (__label__) {
                            case 852 :
                            // NORMAL
                                local_30_FLOAT = 1.0; // type is FLOAT value type is FLOAT
                                __label__ = 855;
                                continue $M_855_852;
                            case 855 :
                            // NORMAL
                                var var346 = thisRef.pool.ojcMat22popMat22(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6783cdd3
                                var local_31_REFERENCE = var346; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@15d5bfc8
                                var var352 = local_31_REFERENCE.ex.ojcVec2setFLOATFLOAT(local_31_REFERENCE.ex,local_28_FLOAT,local_29_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7455729d
                                var var357 = local_31_REFERENCE.ey.ojcVec2setFLOATFLOAT(local_31_REFERENCE.ey,local_29_FLOAT,local_30_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@26534088
                                var var358 = local_31_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@15d5bfc8
                                var var360 = local_10_REFERENCE.ojcVec2negateLocal(local_10_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5f47fcc4
                                var358.VOIDsolveToOutojcVec2ojcVec2(var358,var360,local_9_REFERENCE);
                                var var363 = local_10_REFERENCE.ojcVec2negateLocal(local_10_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@67d4331b
                                var var364 = local_11_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@eadcc10
                                var var366 = local_9_REFERENCE.x; // type is FLOAT value type is FLOAT
                                var364.x = var366;
                                var var367 = local_11_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@eadcc10
                                var var369 = local_9_REFERENCE.y; // type is FLOAT value type is FLOAT
                                var367.y = var369;
                                var var370 = local_11_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@eadcc10
                                var370.z = 0.0;
                                thisRef.pool.VOIDpushMat22INT(thisRef.pool,1);
                                break $M_559_800;
                        }
                    case 559 :
                    // NORMAL
                        $S_559 : {
                        // NORMAL
                            local_28_FLOAT = (((local_16_FLOAT + local_17_FLOAT) + ((local_18_FLOAT * local_22_FLOAT) * local_22_FLOAT)) + ((local_19_FLOAT * local_23_FLOAT) * local_23_FLOAT)); // type is FLOAT value type is FLOAT
                            local_29_FLOAT = ((local_18_FLOAT * local_22_FLOAT) + (local_19_FLOAT * local_23_FLOAT)); // type is FLOAT value type is FLOAT
                            local_30_FLOAT = (((local_18_FLOAT * local_22_FLOAT) * local_20_FLOAT) + ((local_19_FLOAT * local_23_FLOAT) * local_21_FLOAT)); // type is FLOAT value type is FLOAT
                            local_31_FLOAT = (local_18_FLOAT + local_19_FLOAT); // type is FLOAT value type is FLOAT
                            var var247 = local_31_FLOAT; // type is FLOAT value type is FLOAT
                            if ((var247 != 0.0)) {
                                __label__ = 633;
                                break $S_559;
                            }
                            __label__ = 630;
                            }
                        $M_633_630 : for(;;) switch (__label__) {
                            case 630 :
                            // NORMAL
                                local_31_FLOAT = 1.0; // type is FLOAT value type is FLOAT
                                __label__ = 633;
                                continue $M_633_630;
                            case 633 :
                            // NORMAL
                                var local_32_FLOAT = ((local_18_FLOAT * local_20_FLOAT) + (local_19_FLOAT * local_21_FLOAT)); // type is FLOAT value type is FLOAT
                                var local_33_FLOAT = (((local_16_FLOAT + local_17_FLOAT) + ((local_18_FLOAT * local_20_FLOAT) * local_20_FLOAT)) + ((local_19_FLOAT * local_21_FLOAT) * local_21_FLOAT)); // type is FLOAT value type is FLOAT
                                var var277 = thisRef.pool.ojcMat33popMat33(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@384a64e6
                                var local_34_REFERENCE = var277; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4a13467
                                var var284 = local_34_REFERENCE.ex.ojcVec3setFLOATFLOATFLOAT(local_34_REFERENCE.ex,local_28_FLOAT,local_29_FLOAT,local_30_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@64e059eb
                                var var290 = local_34_REFERENCE.ey.ojcVec3setFLOATFLOATFLOAT(local_34_REFERENCE.ey,local_29_FLOAT,local_31_FLOAT,local_32_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@226af287
                                var var296 = local_34_REFERENCE.ez.ojcVec3setFLOATFLOATFLOAT(local_34_REFERENCE.ez,local_30_FLOAT,local_32_FLOAT,local_33_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@496cdf78
                                var var298 = thisRef.pool.ojcVec3popVec3(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@44e3c83e
                                var local_35_REFERENCE = var298; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@22aaee48
                                var var300 = local_35_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@22aaee48
                                var var302 = local_10_REFERENCE.x; // type is FLOAT value type is FLOAT
                                var300.x = var302;
                                var var303 = local_35_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@22aaee48
                                var var305 = local_10_REFERENCE.y; // type is FLOAT value type is FLOAT
                                var303.y = var305;
                                var var306 = local_35_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@22aaee48
                                var var307 = local_27_FLOAT; // type is FLOAT value type is FLOAT
                                var306.z = var307;
                                var var308 = local_34_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4a13467
                                var var310 = local_35_REFERENCE.ojcVec3negateLocal(local_35_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@57a1de50
                                var308.VOIDsolve33ToOutojcVec3ojcVec3(var308,var310,local_11_REFERENCE);
                                thisRef.pool.VOIDpushVec3INT(thisRef.pool,1);
                                thisRef.pool.VOIDpushMat33INT(thisRef.pool,1);
                                break $M_559_800;
                        }
                }
                $S_946 : {
                // NORMAL
                    local_28_FLOAT = ((local_11_REFERENCE.x * local_8_REFERENCE.x) + (local_11_REFERENCE.z * local_7_REFERENCE.x)); // type is FLOAT value type is FLOAT
                    local_29_FLOAT = ((local_11_REFERENCE.x * local_8_REFERENCE.y) + (local_11_REFERENCE.z * local_7_REFERENCE.y)); // type is FLOAT value type is FLOAT
                    local_30_FLOAT = (((local_11_REFERENCE.x * local_22_FLOAT) + local_11_REFERENCE.y) + (local_11_REFERENCE.z * local_20_FLOAT)); // type is FLOAT value type is FLOAT
                    local_31_FLOAT = (((local_11_REFERENCE.x * local_23_FLOAT) + local_11_REFERENCE.y) + (local_11_REFERENCE.z * local_21_FLOAT)); // type is FLOAT value type is FLOAT
                    var var422 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@30e5c377
                    var var427 = (var422.x - (local_16_FLOAT * local_28_FLOAT)); // type is FLOAT value type is FLOAT
                    var422.x = var427;
                    var var428 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@30e5c377
                    var var433 = (var428.y - (local_16_FLOAT * local_29_FLOAT)); // type is FLOAT value type is FLOAT
                    var428.y = var433;
                    local_13_FLOAT = (local_13_FLOAT - (local_18_FLOAT * local_30_FLOAT)); // type is FLOAT value type is FLOAT
                    var var440 = local_14_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@321e79f7
                    var var445 = (var440.x + (local_17_FLOAT * local_28_FLOAT)); // type is FLOAT value type is FLOAT
                    var440.x = var445;
                    var var446 = local_14_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@321e79f7
                    var var451 = (var446.y + (local_17_FLOAT * local_29_FLOAT)); // type is FLOAT value type is FLOAT
                    var446.y = var451;
                    local_15_FLOAT = (local_15_FLOAT + (local_19_FLOAT * local_31_FLOAT)); // type is FLOAT value type is FLOAT
                    var var460 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
                    var var461 = local_13_FLOAT; // type is FLOAT value type is FLOAT
                    var460.a = var461;
                    var var464 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
                    var var465 = local_15_FLOAT; // type is FLOAT value type is FLOAT
                    var464.a = var465;
                    thisRef.pool.VOIDpushVec2INT(thisRef.pool,7);
                    thisRef.pool.VOIDpushVec3INT(thisRef.pool,1);
                    thisRef.pool.VOIDpushRotINT(thisRef.pool,2);
                    var var469 = local_24_FLOAT; // type is FLOAT value type is FLOAT
                    if ((var469 > 0.005)) {
                        __label__ = 1205;
                        break $S_946;
                    }
                    __label__ = 1193;
                    }
                $M_1205_1193 : for(;;) switch (__label__) {
                    case 1193 :
                    // NORMAL
                        $S_1193 : {
                        // NORMAL
                            var var471 = local_25_FLOAT; // type is FLOAT value type is FLOAT
                            if ((var471 > 0.03490659)) {
                                __label__ = 1205;
                                continue $M_1205_1193;
                            }
                            }
                        var var473 = 1; // type is INT value type is INT
                        return var473;
                    case 1205 :
                    // NORMAL
                        var var473 = 0; // type is INT value type is INT
                        return var473;
                }
        }
    },

    classInitCheck : function() {
        if (!ojdjPrismaticJoint.__initialized) {
            ojdjPrismaticJoint.__initialized = true;
            var thePrototype = ojdjPrismaticJoint.Create.prototype;
            thePrototype.instanceOf = ojdjPrismaticJoint.instanceOf;
            thePrototype.ClassgetClass = ojdjPrismaticJoint.ClassgetClass;
            thePrototype.BOOLEANsolvePositionConstraintsojdSolverData = ojdjPrismaticJoint.BOOLEANsolvePositionConstraintsojdSolverData;
            thePrototype.VOIDsolveVelocityConstraintsojdSolverData = ojdjPrismaticJoint.VOIDsolveVelocityConstraintsojdSolverData;
            thePrototype.VOIDinitVelocityConstraintsojdSolverData = ojdjPrismaticJoint.VOIDinitVelocityConstraintsojdSolverData;
            thePrototype.BOOLEANgetCollideConnected = ojdjJoint.BOOLEANgetCollideConnected;
            thePrototype.ojdBodygetBodyB = ojdjJoint.ojdBodygetBodyB;
            thePrototype.ojdBodygetBodyA = ojdjJoint.ojdBodygetBodyA;
            thePrototype.ojdjJointTypegetType = ojdjJoint.ojdjJointTypegetType;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojdjJoint.classInitCheck();
            jlObject.classInitCheck();
            ojdjPrismaticJoint.VOIDclinit();
        }
    },

};

var ojdjPrismaticJointDef = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 154,
    __implementedTypes : [146,154,1],

    Create : function() {
        this.type = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.userData = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.bodyA = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.bodyB = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.collideConnected = false; // declared in org.jbox2d.dynamics.joints.JointDef
        this.localAnchorA = null; // declared in org.jbox2d.dynamics.joints.PrismaticJointDef
        this.localAnchorB = null; // declared in org.jbox2d.dynamics.joints.PrismaticJointDef
        this.localAxisA = null; // declared in org.jbox2d.dynamics.joints.PrismaticJointDef
        this.referenceAngle = 0; // declared in org.jbox2d.dynamics.joints.PrismaticJointDef
        this.lowerTranslation = 0; // declared in org.jbox2d.dynamics.joints.PrismaticJointDef
        this.upperTranslation = 0; // declared in org.jbox2d.dynamics.joints.PrismaticJointDef
        this.maxMotorForce = 0; // declared in org.jbox2d.dynamics.joints.PrismaticJointDef
        this.motorSpeed = 0; // declared in org.jbox2d.dynamics.joints.PrismaticJointDef
        this.enableLimit = false; // declared in org.jbox2d.dynamics.joints.PrismaticJointDef
        this.enableMotor = false; // declared in org.jbox2d.dynamics.joints.PrismaticJointDef
    },

    instanceOf : function(aType) {
        return ojdjPrismaticJointDef.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdjPrismaticJointDef;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        ojdjJointDef.VOIDinit(thisRef);
        var var0 = ojdjJointType.PRISMATIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3c0b16d4
        thisRef.type = var0;
        var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var1);
        thisRef.localAnchorA = var1;
        var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var2);
        thisRef.localAnchorB = var2;
        var var3 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinitFLOATFLOAT(var3,1.0,0.0);
        thisRef.localAxisA = var3;
        thisRef.referenceAngle = 0.0;
        thisRef.enableLimit = 0;
        thisRef.lowerTranslation = 0.0;
        thisRef.upperTranslation = 0.0;
        thisRef.enableMotor = 0;
        thisRef.maxMotorForce = 0.0;
        thisRef.motorSpeed = 0.0;
        return;
    },

    classInitCheck : function() {
        if (!ojdjPrismaticJointDef.__initialized) {
            ojdjPrismaticJointDef.__initialized = true;
            var thePrototype = ojdjPrismaticJointDef.Create.prototype;
            thePrototype.instanceOf = ojdjPrismaticJointDef.instanceOf;
            thePrototype.ClassgetClass = ojdjPrismaticJointDef.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojdjJointDef.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var ojcVec3 = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 155,
    __implementedTypes : [155,2,1],
    $assertionsDisabled : false, // declared in org.jbox2d.common.Vec3

    Create : function() {
        this.z = 0; // declared in org.jbox2d.common.Vec3
        this.y = 0; // declared in org.jbox2d.common.Vec3
        this.x = 0; // declared in org.jbox2d.common.Vec3
    },

    instanceOf : function(aType) {
        return ojcVec3.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcVec3;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcVec3.BOOLEANdesiredAssertionStatus(ojcVec3); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_9_13 : for(;;) switch (__label__) {
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_9_13;
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_9_13;
        }
        ojcVec3.$assertionsDisabled = var1;
        return;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        thisRef.z = 0.0;
        thisRef.y = 0.0;
        thisRef.x = 0.0;
        return;
    },

    VOIDinitFLOATFLOATFLOAT : function(thisRef,argX,argY,argZ) {
        var __label__ = null;
        thisRef.x = argX;
        thisRef.y = argY;
        thisRef.z = argZ;
        return;
    },

    ojcVec3clone : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcVec3.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec3.VOIDinitojcVec3(var0,thisRef);
        return var0;
    },

    VOIDinitojcVec3 : function(thisRef,argCopy) {
        var __label__ = null;
        var var0 = argCopy.x; // type is FLOAT value type is FLOAT
        thisRef.x = var0;
        var var1 = argCopy.y; // type is FLOAT value type is FLOAT
        thisRef.y = var1;
        var var2 = argCopy.z; // type is FLOAT value type is FLOAT
        thisRef.z = var2;
        return;
    },

    VOIDsetZero : function(thisRef) {
        var __label__ = null;
        thisRef.x = 0.0;
        thisRef.y = 0.0;
        thisRef.z = 0.0;
        return;
    },

    ojcVec3setFLOATFLOATFLOAT : function(thisRef,argX,argY,argZ) {
        var __label__ = null;
        thisRef.x = argX;
        thisRef.y = argY;
        thisRef.z = argZ;
        return thisRef;
    },

    ojcVec3mulLocalFLOAT : function(thisRef,argScalar) {
        var __label__ = null;
        var var1 = (thisRef.x * argScalar); // type is FLOAT value type is FLOAT
        thisRef.x = var1;
        var var3 = (thisRef.y * argScalar); // type is FLOAT value type is FLOAT
        thisRef.y = var3;
        var var5 = (thisRef.z * argScalar); // type is FLOAT value type is FLOAT
        thisRef.z = var5;
        return thisRef;
    },

    ojcVec3setojcVec3 : function(thisRef,argVec) {
        var __label__ = null;
        var var0 = argVec.x; // type is FLOAT value type is FLOAT
        thisRef.x = var0;
        var var1 = argVec.y; // type is FLOAT value type is FLOAT
        thisRef.y = var1;
        var var2 = argVec.z; // type is FLOAT value type is FLOAT
        thisRef.z = var2;
        return thisRef;
    },

    ojcVec3negateLocal : function(thisRef) {
        var __label__ = null;
        var var1 = (-thisRef.x); // type is FLOAT value type is FLOAT
        thisRef.x = var1;
        var var3 = (-thisRef.y); // type is FLOAT value type is FLOAT
        thisRef.y = var3;
        var var5 = (-thisRef.z); // type is FLOAT value type is FLOAT
        thisRef.z = var5;
        return thisRef;
    },

    VOIDcrossToOutUnsafeojcVec3ojcVec3ojcVec3 : function(a,b,out) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcVec3.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 19;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_19_6 : for(;;) switch (__label__) {
            case 19 :
            // NORMAL
                $S_19 : {
                // NORMAL
                    var var2 = ojcVec3.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                    if ((var2 != 0)) {
                        __label__ = 38;
                        break $S_19;
                    }
                    __label__ = 25;
                    }
                $M_38_25 : for(;;) switch (__label__) {
                    case 25 :
                    // NORMAL
                        $S_25 : {
                        // NORMAL
                            if ((out != a)) {
                                __label__ = 38;
                                continue $M_38_25;
                            }
                            }
                        var var3 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                        jlAssertionError.VOIDinit(var3);
                        throw var3;
                    case 38 :
                    // NORMAL
                        var var10 = ((a.y * b.z) - (a.z * b.y)); // type is FLOAT value type is FLOAT
                        out.x = var10;
                        var var17 = ((a.z * b.x) - (a.x * b.z)); // type is FLOAT value type is FLOAT
                        out.y = var17;
                        var var24 = ((a.x * b.y) - (a.y * b.x)); // type is FLOAT value type is FLOAT
                        out.z = var24;
                        return;
                }
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    if ((out != b)) {
                        __label__ = 19;
                        continue $M_19_6;
                    }
                    }
                var var1 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var1);
                throw var1;
        }
    },

    FLOATdotojcVec3ojcVec3 : function(a,b) {
        var __label__ = null;
        return (((a.x * b.x) + (a.y * b.y)) + (a.z * b.z));
    },

    ojcVec3addLocalojcVec3 : function(thisRef,argVec) {
        var __label__ = null;
        var var2 = (thisRef.x + argVec.x); // type is FLOAT value type is FLOAT
        thisRef.x = var2;
        var var5 = (thisRef.y + argVec.y); // type is FLOAT value type is FLOAT
        thisRef.y = var5;
        var var8 = (thisRef.z + argVec.z); // type is FLOAT value type is FLOAT
        thisRef.z = var8;
        return thisRef;
    },

    ojcVec3subLocalojcVec3 : function(thisRef,argVec) {
        var __label__ = null;
        var var2 = (thisRef.x - argVec.x); // type is FLOAT value type is FLOAT
        thisRef.x = var2;
        var var5 = (thisRef.y - argVec.y); // type is FLOAT value type is FLOAT
        thisRef.y = var5;
        var var8 = (thisRef.z - argVec.z); // type is FLOAT value type is FLOAT
        thisRef.z = var8;
        return thisRef;
    },

    INThashCode : function(thisRef) {
        var __label__ = null;
        var local_1_INT = 31; // type is INT value type is INT
        var local_2_INT = 1; // type is INT value type is INT
        var var5 = (31 * local_2_INT); // type is INT value type is INT
        var var7 = jlFloat.INTfloatToIntBitsFLOAT(thisRef.x); // type is INT value type is INT
        var local_2_INT = (var5 + var7); // type is INT value type is INT
        var var11 = (31 * local_2_INT); // type is INT value type is INT
        var var13 = jlFloat.INTfloatToIntBitsFLOAT(thisRef.y); // type is INT value type is INT
        var local_2_INT = (var11 + var13); // type is INT value type is INT
        var var17 = (31 * local_2_INT); // type is INT value type is INT
        var var19 = jlFloat.INTfloatToIntBitsFLOAT(thisRef.z); // type is INT value type is INT
        var local_2_INT = (var17 + var19); // type is INT value type is INT
        return local_2_INT;
    },

    BOOLEANequalsjlObject : function(thisRef,obj) {
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((thisRef != obj)) {
                break $S_0;
            }
            return 1;
            }
        $S_7 : {
        // NORMAL
            if (obj != null ) {
                break $S_7;
            }
            return 0;
            }
        $S_13 : {
        // NORMAL
            var var0 = thisRef.ClassgetClass(); // type is REFERENCE value type is REFERENCE
            var var1 = obj.ClassgetClass(); // type is REFERENCE value type is REFERENCE
            if ((var0 == var1)) {
                break $S_13;
            }
            return 0;
            }
        $S_26 : {
        // NORMAL
            local_2_REFERENCE = obj; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@ed10538
            var var4 = jlFloat.INTfloatToIntBitsFLOAT(thisRef.x); // type is INT value type is INT
            var var7 = jlFloat.INTfloatToIntBitsFLOAT(local_2_REFERENCE.x); // type is INT value type is INT
            if ((var4 == var7)) {
                break $S_26;
            }
            return 0;
            }
        $S_50 : {
        // NORMAL
            var var9 = jlFloat.INTfloatToIntBitsFLOAT(thisRef.y); // type is INT value type is INT
            var var12 = jlFloat.INTfloatToIntBitsFLOAT(local_2_REFERENCE.y); // type is INT value type is INT
            if ((var9 == var12)) {
                break $S_50;
            }
            return 0;
            }
        var var14 = jlFloat.INTfloatToIntBitsFLOAT(thisRef.z); // type is INT value type is INT
        var var17 = jlFloat.INTfloatToIntBitsFLOAT(local_2_REFERENCE.z); // type is INT value type is INT
        if ((var14 == var17)) {
            return 1;
        }
        return 0;
    },

    jlStringtoString : function(thisRef) {
        var __label__ = null;
        var var0 = new jlStringBuilder.Create(); // type is REFERENCE value type is REFERENCE
        jlStringBuilder.VOIDinit(var0);
        var var1 = var0.jlStringBuilderappendjlString(var0,bytecoder.stringpool[9]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7bab4685
        var var3 = var1.jlStringBuilderappendFLOAT(var1,thisRef.x); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6218abbc
        var var4 = var3.jlStringBuilderappendjlString(var3,bytecoder.stringpool[10]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3bdc1c9a
        var var6 = var4.jlStringBuilderappendFLOAT(var4,thisRef.y); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@113a8683
        var var7 = var6.jlStringBuilderappendjlString(var6,bytecoder.stringpool[10]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3004754f
        var var9 = var7.jlStringBuilderappendFLOAT(var7,thisRef.z); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@17e66db8
        var var10 = var9.jlStringBuilderappendjlString(var9,bytecoder.stringpool[11]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4c059b12
        var var11 = var10.jlStringtoString(var10); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@9ce128f
        return var11;
    },

    classInitCheck : function() {
        if (!ojcVec3.__initialized) {
            ojcVec3.__initialized = true;
            var thePrototype = ojcVec3.Create.prototype;
            thePrototype.instanceOf = ojcVec3.instanceOf;
            thePrototype.ClassgetClass = ojcVec3.ClassgetClass;
            thePrototype.jlStringtoString = ojcVec3.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = ojcVec3.BOOLEANequalsjlObject;
            thePrototype.INThashCode = ojcVec3.INThashCode;
            thePrototype.ojcVec3subLocalojcVec3 = ojcVec3.ojcVec3subLocalojcVec3;
            thePrototype.ojcVec3addLocalojcVec3 = ojcVec3.ojcVec3addLocalojcVec3;
            thePrototype.ojcVec3negateLocal = ojcVec3.ojcVec3negateLocal;
            thePrototype.ojcVec3setojcVec3 = ojcVec3.ojcVec3setojcVec3;
            thePrototype.ojcVec3mulLocalFLOAT = ojcVec3.ojcVec3mulLocalFLOAT;
            thePrototype.ojcVec3setFLOATFLOATFLOAT = ojcVec3.ojcVec3setFLOATFLOATFLOAT;
            thePrototype.VOIDsetZero = ojcVec3.VOIDsetZero;
            thePrototype.ojcVec3clone = ojcVec3.ojcVec3clone;
            jlObject.classInitCheck();
            jiSerializable.classInitCheck();
            ojcVec3.VOIDclinit();
        }
    },

};

var ojdjLimitState = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 156,
    __implementedTypes : [156,56,2,1,11],
    INACTIVE : null, // declared in org.jbox2d.dynamics.joints.LimitState
    AT_LOWER : null, // declared in org.jbox2d.dynamics.joints.LimitState
    AT_UPPER : null, // declared in org.jbox2d.dynamics.joints.LimitState
    EQUAL : null, // declared in org.jbox2d.dynamics.joints.LimitState
    $VALUES : null, // declared in org.jbox2d.dynamics.joints.LimitState

    Create : function() {
        this.name = null; // declared in java.lang.Enum
        this.ordinalNumber = 0; // declared in java.lang.Enum
    },

    instanceOf : function(aType) {
        return ojdjLimitState.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdjLimitState;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var __label__ = null;
        var var0 = new ojdjLimitState.Create(); // type is REFERENCE value type is REFERENCE
        ojdjLimitState.VOIDinitjlStringINT(var0,bytecoder.stringpool[54],0);
        ojdjLimitState.INACTIVE = var0;
        var var1 = new ojdjLimitState.Create(); // type is REFERENCE value type is REFERENCE
        ojdjLimitState.VOIDinitjlStringINT(var1,bytecoder.stringpool[55],1);
        ojdjLimitState.AT_LOWER = var1;
        var var2 = new ojdjLimitState.Create(); // type is REFERENCE value type is REFERENCE
        ojdjLimitState.VOIDinitjlStringINT(var2,bytecoder.stringpool[56],2);
        ojdjLimitState.AT_UPPER = var2;
        var var3 = new ojdjLimitState.Create(); // type is REFERENCE value type is REFERENCE
        ojdjLimitState.VOIDinitjlStringINT(var3,bytecoder.stringpool[57],3);
        ojdjLimitState.EQUAL = var3;
        var var4 = bytecoder.newArray(4,null); // type is REFERENCE value type is REFERENCE
        var var5 = ojdjLimitState.INACTIVE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@27427f44
        var4.data[0] = var5;
        var var6 = ojdjLimitState.AT_LOWER; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@20311f48
        var4.data[1] = var6;
        var var7 = ojdjLimitState.AT_UPPER; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7a1a178c
        var4.data[2] = var7;
        var var8 = ojdjLimitState.EQUAL; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2e0c768e
        var4.data[3] = var8;
        ojdjLimitState.$VALUES = var4;
        return;
    },

    VOIDinitjlStringINT : function(thisRef,p1,p2) {
        var __label__ = null;
        jlEnum.VOIDinitjlStringINT(thisRef,p1,p2);
        return;
    },

    classInitCheck : function() {
        if (!ojdjLimitState.__initialized) {
            ojdjLimitState.__initialized = true;
            var thePrototype = ojdjLimitState.Create.prototype;
            thePrototype.instanceOf = ojdjLimitState.instanceOf;
            thePrototype.ClassgetClass = ojdjLimitState.ClassgetClass;
            thePrototype.INTordinal = jlEnum.INTordinal;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlEnum.classInitCheck();
            jiSerializable.classInitCheck();
            jlObject.classInitCheck();
            jlComparable.classInitCheck();
            jlrArray.classInitCheck();
            ojdjLimitState.VOIDclinit();
        }
    },

};

var ojcMat33 = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 157,
    __implementedTypes : [157,2,1],
    $assertionsDisabled : false, // declared in org.jbox2d.common.Mat33
    IDENTITY : null, // declared in org.jbox2d.common.Mat33

    Create : function() {
        this.ex = null; // declared in org.jbox2d.common.Mat33
        this.ey = null; // declared in org.jbox2d.common.Mat33
        this.ez = null; // declared in org.jbox2d.common.Mat33
    },

    instanceOf : function(aType) {
        return ojcMat33.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcMat33;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcMat33.BOOLEANdesiredAssertionStatus(ojcMat33); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_13_9 : for(;;) switch (__label__) {
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_13_9;
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_13_9;
        }
        ojcMat33.$assertionsDisabled = var1;
        var var2 = new ojcMat33.Create(); // type is REFERENCE value type is REFERENCE
        var var3 = new ojcVec3.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec3.VOIDinitFLOATFLOATFLOAT(var3,1.0,0.0,0.0);
        var var4 = new ojcVec3.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec3.VOIDinitFLOATFLOATFLOAT(var4,0.0,1.0,0.0);
        var var5 = new ojcVec3.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec3.VOIDinitFLOATFLOATFLOAT(var5,0.0,0.0,1.0);
        ojcMat33.VOIDinitojcVec3ojcVec3ojcVec3(var2,var3,var4,var5);
        ojcMat33.IDENTITY = var2;
        return;
    },

    VOIDinitojcVec3ojcVec3ojcVec3 : function(thisRef,argCol1,argCol2,argCol3) {
        var __label__ = null;
        var var0 = argCol1.ojcVec3clone(argCol1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3cf0372
        thisRef.ex = var0;
        var var1 = argCol2.ojcVec3clone(argCol2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7bee9bd
        thisRef.ey = var1;
        var var2 = argCol3.ojcVec3clone(argCol3); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@45ebb9ae
        thisRef.ez = var2;
        return;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcVec3.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec3.VOIDinit(var0);
        thisRef.ex = var0;
        var var1 = new ojcVec3.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec3.VOIDinit(var1);
        thisRef.ey = var1;
        var var2 = new ojcVec3.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec3.VOIDinit(var2);
        thisRef.ez = var2;
        return;
    },

    VOIDsolve33ToOutojcVec3ojcVec3 : function(thisRef,b,out) {
        var local_3_FLOAT = null; // type is FLOAT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcMat33.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 19;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_19_6 : for(;;) switch (__label__) {
            case 19 :
            // NORMAL
                $S_19 : {
                // NORMAL
                    ojcVec3.VOIDcrossToOutUnsafeojcVec3ojcVec3ojcVec3(thisRef.ey,thisRef.ez,out);
                    var var4 = ojcVec3.FLOATdotojcVec3ojcVec3(thisRef.ex,out); // type is FLOAT value type is FLOAT
                    local_3_FLOAT = var4; // type is FLOAT value type is FLOAT
                    var var7 = local_3_FLOAT; // type is FLOAT value type is FLOAT
                    if ((var7 == 0.0)) {
                        __label__ = 50;
                        break $S_19;
                    }
                    __label__ = 46;
                    }
                $M_46_50 : for(;;) switch (__label__) {
                    case 50 :
                    // NORMAL
                        ojcVec3.VOIDcrossToOutUnsafeojcVec3ojcVec3ojcVec3(thisRef.ey,thisRef.ez,out);
                        var var14 = local_3_FLOAT; // type is FLOAT value type is FLOAT
                        var var15 = ojcVec3.FLOATdotojcVec3ojcVec3(b,out); // type is FLOAT value type is FLOAT
                        var local_4_FLOAT = (var14 * var15); // type is FLOAT value type is FLOAT
                        ojcVec3.VOIDcrossToOutUnsafeojcVec3ojcVec3ojcVec3(b,thisRef.ez,out);
                        var var20 = local_3_FLOAT; // type is FLOAT value type is FLOAT
                        var var22 = ojcVec3.FLOATdotojcVec3ojcVec3(thisRef.ex,out); // type is FLOAT value type is FLOAT
                        var local_5_FLOAT = (var20 * var22); // type is FLOAT value type is FLOAT
                        ojcVec3.VOIDcrossToOutUnsafeojcVec3ojcVec3ojcVec3(thisRef.ey,b,out);
                        var var27 = local_3_FLOAT; // type is FLOAT value type is FLOAT
                        var var29 = ojcVec3.FLOATdotojcVec3ojcVec3(thisRef.ex,out); // type is FLOAT value type is FLOAT
                        var local_6_FLOAT = (var27 * var29); // type is FLOAT value type is FLOAT
                        var var33 = local_4_FLOAT; // type is FLOAT value type is FLOAT
                        out.x = var33;
                        var var34 = local_5_FLOAT; // type is FLOAT value type is FLOAT
                        out.y = var34;
                        var var35 = local_6_FLOAT; // type is FLOAT value type is FLOAT
                        out.z = var35;
                        return;
                    case 46 :
                    // NORMAL
                        local_3_FLOAT = (1.0 / local_3_FLOAT); // type is FLOAT value type is FLOAT
                        __label__ = 50;
                        continue $M_46_50;
                }
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    if ((b != out)) {
                        __label__ = 19;
                        continue $M_19_6;
                    }
                    }
                var var36 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var36);
                throw var36;
        }
    },

    VOIDsolve22ToOutojcVec2ojcVec2 : function(thisRef,b,out) {
        var local_4_FLOAT = null; // type is FLOAT # of inits = 1
        var local_3_FLOAT = null; // type is FLOAT # of inits = 1
        var local_6_FLOAT = null; // type is FLOAT # of inits = 1
        var local_5_FLOAT = null; // type is FLOAT # of inits = 1
        var local_7_FLOAT = null; // type is FLOAT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_3_FLOAT = thisRef.ex.x; // type is FLOAT value type is FLOAT
            local_4_FLOAT = thisRef.ey.x; // type is FLOAT value type is FLOAT
            local_5_FLOAT = thisRef.ex.y; // type is FLOAT value type is FLOAT
            local_6_FLOAT = thisRef.ey.y; // type is FLOAT value type is FLOAT
            local_7_FLOAT = ((local_3_FLOAT * local_6_FLOAT) - (local_4_FLOAT * local_5_FLOAT)); // type is FLOAT value type is FLOAT
            var var25 = local_7_FLOAT; // type is FLOAT value type is FLOAT
            if ((var25 == 0.0)) {
                __label__ = 60;
                break $S_0;
            }
            __label__ = 54;
            }
        $M_60_54 : for(;;) switch (__label__) {
            case 60 :
            // NORMAL
                var var38 = (local_7_FLOAT * ((local_6_FLOAT * b.x) - (local_4_FLOAT * b.y))); // type is FLOAT value type is FLOAT
                out.x = var38;
                var var47 = (local_7_FLOAT * ((local_3_FLOAT * b.y) - (local_5_FLOAT * b.x))); // type is FLOAT value type is FLOAT
                out.y = var47;
                return;
            case 54 :
            // NORMAL
                local_7_FLOAT = (1.0 / local_7_FLOAT); // type is FLOAT value type is FLOAT
                __label__ = 60;
                continue $M_60_54;
        }
    },

    INThashCode : function(thisRef) {
        var var13 = null; // type is INT # of inits = 1
        var var17 = null; // type is INT # of inits = 2
        var var25 = null; // type is INT # of inits = 2
        var var21 = null; // type is INT # of inits = 1
        var var9 = null; // type is INT # of inits = 2
        var var5 = null; // type is INT # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var local_1_INT = 31; // type is INT value type is INT
            var local_2_INT = 1; // type is INT value type is INT
            var5 = (31 * local_2_INT); // type is INT value type is INT
            var var6 = thisRef.ex; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@677c746f
            if (var6 != null ) {
                __label__ = 20;
                break $S_0;
            }
            __label__ = 16;
            }
        $M_16_20 : for(;;) switch (__label__) {
            case 20 :
            // NORMAL
                var var8 = thisRef.ex.INThashCode(thisRef.ex); // type is INT value type is INT
                var9 = var8; // type is INT value type is INT
                break $M_16_20;
            case 16 :
            // NORMAL
                var9 = 0; // type is INT value type is INT
                break $M_16_20;
        }
        $S_27 : {
        // NORMAL
            var local_2_INT = (var5 + var9); // type is INT value type is INT
            var13 = (31 * local_2_INT); // type is INT value type is INT
            var var14 = thisRef.ey; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5da7851
            if (var14 != null ) {
                __label__ = 44;
                break $S_27;
            }
            __label__ = 40;
            }
        $M_40_44 : for(;;) switch (__label__) {
            case 40 :
            // NORMAL
                var17 = 0; // type is INT value type is INT
                break $M_40_44;
            case 44 :
            // NORMAL
                var var16 = thisRef.ey.INThashCode(thisRef.ey); // type is INT value type is INT
                var17 = var16; // type is INT value type is INT
                break $M_40_44;
        }
        $S_51 : {
        // NORMAL
            var local_2_INT = (var13 + var17); // type is INT value type is INT
            var21 = (31 * local_2_INT); // type is INT value type is INT
            var var22 = thisRef.ez; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6b049a00
            if (var22 != null ) {
                __label__ = 68;
                break $S_51;
            }
            __label__ = 64;
            }
        $M_68_64 : for(;;) switch (__label__) {
            case 64 :
            // NORMAL
                var25 = 0; // type is INT value type is INT
                break $M_68_64;
            case 68 :
            // NORMAL
                var var24 = thisRef.ez.INThashCode(thisRef.ez); // type is INT value type is INT
                var25 = var24; // type is INT value type is INT
                break $M_68_64;
        }
        var local_2_INT = (var21 + var25); // type is INT value type is INT
        return local_2_INT;
    },

    BOOLEANequalsjlObject : function(thisRef,obj) {
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((thisRef != obj)) {
                break $S_0;
            }
            return 1;
            }
        $S_7 : {
        // NORMAL
            if (obj != null ) {
                break $S_7;
            }
            return 0;
            }
        $S_13 : {
        // NORMAL
            var var0 = thisRef.ClassgetClass(); // type is REFERENCE value type is REFERENCE
            var var1 = obj.ClassgetClass(); // type is REFERENCE value type is REFERENCE
            if ((var0 == var1)) {
                break $S_13;
            }
            return 0;
            }
        $S_26 : {
        // NORMAL
            local_2_REFERENCE = obj; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@50260ef4
            var var3 = thisRef.ex; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7d186657
            if (var3 != null ) {
                __label__ = 47;
                break $S_26;
            }
            __label__ = 38;
            }
        $M_47_38 : for(;;) switch (__label__) {
            case 38 :
            // NORMAL
                var var9 = local_2_REFERENCE.ex; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2bdd7d84
                if (var9 == null ) {
                    break $M_47_38;
                }
                return 0;
            case 47 :
            // NORMAL
                var var7 = thisRef.ex.BOOLEANequalsjlObject(thisRef.ex,local_2_REFERENCE.ex); // type is BOOLEAN value type is BOOLEAN
                if ((var7 != 0)) {
                    break $M_47_38;
                }
                return 0;
        }
        $S_63 : {
        // NORMAL
            var var10 = thisRef.ey; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@65584e65
            if (var10 != null ) {
                __label__ = 79;
                break $S_63;
            }
            __label__ = 70;
            }
        $M_79_70 : for(;;) switch (__label__) {
            case 79 :
            // NORMAL
                var var14 = thisRef.ey.BOOLEANequalsjlObject(thisRef.ey,local_2_REFERENCE.ey); // type is BOOLEAN value type is BOOLEAN
                if ((var14 != 0)) {
                    break $M_79_70;
                }
                return 0;
            case 70 :
            // NORMAL
                var var16 = local_2_REFERENCE.ey; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2f56668a
                if (var16 == null ) {
                    break $M_79_70;
                }
                return 0;
        }
        $S_95 : {
        // NORMAL
            var var17 = thisRef.ez; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@11c287e9
            if (var17 != null ) {
                __label__ = 111;
                break $S_95;
            }
            __label__ = 102;
            }
        for(;;) switch (__label__) {
            case 102 :
            // NORMAL
                var var23 = local_2_REFERENCE.ez; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5133e908
                if (var23 == null ) {
                    return 1;
                }
                return 0;
            case 111 :
            // NORMAL
                var var21 = thisRef.ez.BOOLEANequalsjlObject(thisRef.ez,local_2_REFERENCE.ez); // type is BOOLEAN value type is BOOLEAN
                if ((var21 != 0)) {
                    return 1;
                }
                return 0;
        }
    },

    VOIDgetInverse22ojcMat33 : function(thisRef,M) {
        var local_5_FLOAT = null; // type is FLOAT # of inits = 1
        var local_6_FLOAT = null; // type is FLOAT # of inits = 2
        var local_3_FLOAT = null; // type is FLOAT # of inits = 1
        var local_4_FLOAT = null; // type is FLOAT # of inits = 1
        var local_2_FLOAT = null; // type is FLOAT # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_2_FLOAT = thisRef.ex.x; // type is FLOAT value type is FLOAT
            local_3_FLOAT = thisRef.ey.x; // type is FLOAT value type is FLOAT
            local_4_FLOAT = thisRef.ex.y; // type is FLOAT value type is FLOAT
            local_5_FLOAT = thisRef.ey.y; // type is FLOAT value type is FLOAT
            local_6_FLOAT = ((local_2_FLOAT * local_5_FLOAT) - (local_3_FLOAT * local_4_FLOAT)); // type is FLOAT value type is FLOAT
            var var25 = local_6_FLOAT; // type is FLOAT value type is FLOAT
            if ((var25 == 0.0)) {
                __label__ = 58;
                break $S_0;
            }
            __label__ = 52;
            }
        $M_58_52 : for(;;) switch (__label__) {
            case 58 :
            // NORMAL
                var var30 = M.ex; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2d55fcda
                var var33 = (local_6_FLOAT * local_5_FLOAT); // type is FLOAT value type is FLOAT
                var30.x = var33;
                var var34 = M.ey; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7a448482
                var var38 = ((-local_6_FLOAT) * local_3_FLOAT); // type is FLOAT value type is FLOAT
                var34.x = var38;
                var var39 = M.ex; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@54b0a0a5
                var39.z = 0.0;
                var var40 = M.ex; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3df3cf34
                var var44 = ((-local_6_FLOAT) * local_4_FLOAT); // type is FLOAT value type is FLOAT
                var40.y = var44;
                var var45 = M.ey; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3fc2577c
                var var48 = (local_6_FLOAT * local_2_FLOAT); // type is FLOAT value type is FLOAT
                var45.y = var48;
                var var49 = M.ey; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@61fcb492
                var49.z = 0.0;
                var var50 = M.ez; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@30989580
                var50.x = 0.0;
                var var51 = M.ez; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@13b176c8
                var51.y = 0.0;
                var var52 = M.ez; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3e65aa75
                var52.z = 0.0;
                return;
            case 52 :
            // NORMAL
                local_6_FLOAT = (1.0 / local_6_FLOAT); // type is FLOAT value type is FLOAT
                __label__ = 58;
                continue $M_58_52;
        }
    },

    VOIDgetSymInverse33ojcMat33 : function(thisRef,M) {
        var local_5_FLOAT = null; // type is FLOAT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var local_2_FLOAT = ((thisRef.ey.y * thisRef.ez.z) - (thisRef.ey.z * thisRef.ez.y)); // type is FLOAT value type is FLOAT
            var local_3_FLOAT = ((thisRef.ey.z * thisRef.ez.x) - (thisRef.ey.x * thisRef.ez.z)); // type is FLOAT value type is FLOAT
            var local_4_FLOAT = ((thisRef.ey.x * thisRef.ez.y) - (thisRef.ey.y * thisRef.ez.x)); // type is FLOAT value type is FLOAT
            local_5_FLOAT = (((thisRef.ex.x * local_2_FLOAT) + (thisRef.ex.y * local_3_FLOAT)) + (thisRef.ex.z * local_4_FLOAT)); // type is FLOAT value type is FLOAT
            var var55 = local_5_FLOAT; // type is FLOAT value type is FLOAT
            if ((var55 == 0.0)) {
                __label__ = 142;
                break $S_0;
            }
            __label__ = 136;
            }
        $M_142_136 : for(;;) switch (__label__) {
            case 136 :
            // NORMAL
                local_5_FLOAT = (1.0 / local_5_FLOAT); // type is FLOAT value type is FLOAT
                __label__ = 142;
                continue $M_142_136;
            case 142 :
            // NORMAL
                var local_6_FLOAT = thisRef.ex.x; // type is FLOAT value type is FLOAT
                var local_7_FLOAT = thisRef.ey.x; // type is FLOAT value type is FLOAT
                var local_8_FLOAT = thisRef.ez.x; // type is FLOAT value type is FLOAT
                var local_9_FLOAT = thisRef.ey.y; // type is FLOAT value type is FLOAT
                var local_10_FLOAT = thisRef.ez.y; // type is FLOAT value type is FLOAT
                var local_11_FLOAT = thisRef.ez.z; // type is FLOAT value type is FLOAT
                var var84 = M.ex; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@74c6bf1f
                var var93 = (local_5_FLOAT * ((local_9_FLOAT * local_11_FLOAT) - (local_10_FLOAT * local_10_FLOAT))); // type is FLOAT value type is FLOAT
                var84.x = var93;
                var var94 = M.ex; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@f0d43f4
                var var103 = (local_5_FLOAT * ((local_8_FLOAT * local_10_FLOAT) - (local_7_FLOAT * local_11_FLOAT))); // type is FLOAT value type is FLOAT
                var94.y = var103;
                var var104 = M.ex; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@35ce35db
                var var113 = (local_5_FLOAT * ((local_7_FLOAT * local_10_FLOAT) - (local_8_FLOAT * local_9_FLOAT))); // type is FLOAT value type is FLOAT
                var104.z = var113;
                var var114 = M.ey; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6604c8c
                var var116 = M.ex.y; // type is FLOAT value type is FLOAT
                var114.x = var116;
                var var117 = M.ey; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@471f3518
                var var126 = (local_5_FLOAT * ((local_6_FLOAT * local_11_FLOAT) - (local_8_FLOAT * local_8_FLOAT))); // type is FLOAT value type is FLOAT
                var117.y = var126;
                var var127 = M.ey; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2268ccec
                var var136 = (local_5_FLOAT * ((local_8_FLOAT * local_7_FLOAT) - (local_6_FLOAT * local_10_FLOAT))); // type is FLOAT value type is FLOAT
                var127.z = var136;
                var var137 = M.ez; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@66cc4597
                var var139 = M.ex.z; // type is FLOAT value type is FLOAT
                var137.x = var139;
                var var140 = M.ez; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@62cc71ee
                var var142 = M.ey.z; // type is FLOAT value type is FLOAT
                var140.y = var142;
                var var143 = M.ez; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5cc52f5a
                var var152 = (local_5_FLOAT * ((local_6_FLOAT * local_9_FLOAT) - (local_7_FLOAT * local_7_FLOAT))); // type is FLOAT value type is FLOAT
                var143.z = var152;
                return;
        }
    },

    VOIDmul22ToOutUnsafeojcMat33ojcVec2ojcVec2 : function(A,v,out) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcMat33.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 19;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_6_19 : for(;;) switch (__label__) {
            case 19 :
            // NORMAL
                var var10 = ((A.ex.y * v.x) + (A.ey.y * v.y)); // type is FLOAT value type is FLOAT
                out.y = var10;
                var var19 = ((A.ex.x * v.x) + (A.ey.x * v.y)); // type is FLOAT value type is FLOAT
                out.x = var19;
                return;
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    if ((v != out)) {
                        __label__ = 19;
                        continue $M_6_19;
                    }
                    }
                var var1 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var1);
                throw var1;
        }
    },

    VOIDmulToOutUnsafeojcMat33ojcVec3ojcVec3 : function(A,v,out) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcMat33.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 19;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_19_6 : for(;;) switch (__label__) {
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    if ((out != v)) {
                        __label__ = 19;
                        continue $M_19_6;
                    }
                    }
                var var1 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var1);
                throw var1;
            case 19 :
            // NORMAL
                var var15 = (((v.x * A.ex.x) + (v.y * A.ey.x)) + (v.z * A.ez.x)); // type is FLOAT value type is FLOAT
                out.x = var15;
                var var29 = (((v.x * A.ex.y) + (v.y * A.ey.y)) + (v.z * A.ez.y)); // type is FLOAT value type is FLOAT
                out.y = var29;
                var var43 = (((v.x * A.ex.z) + (v.y * A.ey.z)) + (v.z * A.ez.z)); // type is FLOAT value type is FLOAT
                out.z = var43;
                return;
        }
    },

    classInitCheck : function() {
        if (!ojcMat33.__initialized) {
            ojcMat33.__initialized = true;
            var thePrototype = ojcMat33.Create.prototype;
            thePrototype.instanceOf = ojcMat33.instanceOf;
            thePrototype.ClassgetClass = ojcMat33.ClassgetClass;
            thePrototype.VOIDgetSymInverse33ojcMat33 = ojcMat33.VOIDgetSymInverse33ojcMat33;
            thePrototype.VOIDgetInverse22ojcMat33 = ojcMat33.VOIDgetInverse22ojcMat33;
            thePrototype.BOOLEANequalsjlObject = ojcMat33.BOOLEANequalsjlObject;
            thePrototype.INThashCode = ojcMat33.INThashCode;
            thePrototype.VOIDsolve22ToOutojcVec2ojcVec2 = ojcMat33.VOIDsolve22ToOutojcVec2ojcVec2;
            thePrototype.VOIDsolve33ToOutojcVec3ojcVec3 = ojcMat33.VOIDsolve33ToOutojcVec3ojcVec3;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            jlObject.classInitCheck();
            jiSerializable.classInitCheck();
            ojcVec3.classInitCheck();
            ojcMat33.VOIDclinit();
        }
    },

};

var ojdjRevoluteJoint = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 158,
    __implementedTypes : [114,158,1],
    $assertionsDisabled : false, // declared in org.jbox2d.dynamics.joints.Joint
    $assertionsDisabled : false, // declared in org.jbox2d.dynamics.joints.RevoluteJoint

    Create : function() {
        this.pool = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_type = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_prev = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_next = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_bodyA = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_bodyB = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_collideConnected = false; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_islandFlag = false; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_userData = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_edgeA = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_edgeB = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_localAnchorA = null; // declared in org.jbox2d.dynamics.joints.RevoluteJoint
        this.m_localAnchorB = null; // declared in org.jbox2d.dynamics.joints.RevoluteJoint
        this.m_impulse = null; // declared in org.jbox2d.dynamics.joints.RevoluteJoint
        this.m_rA = null; // declared in org.jbox2d.dynamics.joints.RevoluteJoint
        this.m_rB = null; // declared in org.jbox2d.dynamics.joints.RevoluteJoint
        this.m_localCenterA = null; // declared in org.jbox2d.dynamics.joints.RevoluteJoint
        this.m_localCenterB = null; // declared in org.jbox2d.dynamics.joints.RevoluteJoint
        this.m_mass = null; // declared in org.jbox2d.dynamics.joints.RevoluteJoint
        this.m_referenceAngle = 0; // declared in org.jbox2d.dynamics.joints.RevoluteJoint
        this.m_motorImpulse = 0; // declared in org.jbox2d.dynamics.joints.RevoluteJoint
        this.m_lowerAngle = 0; // declared in org.jbox2d.dynamics.joints.RevoluteJoint
        this.m_upperAngle = 0; // declared in org.jbox2d.dynamics.joints.RevoluteJoint
        this.m_maxMotorTorque = 0; // declared in org.jbox2d.dynamics.joints.RevoluteJoint
        this.m_motorSpeed = 0; // declared in org.jbox2d.dynamics.joints.RevoluteJoint
        this.m_enableLimit = false; // declared in org.jbox2d.dynamics.joints.RevoluteJoint
        this.m_enableMotor = false; // declared in org.jbox2d.dynamics.joints.RevoluteJoint
        this.m_limitState = null; // declared in org.jbox2d.dynamics.joints.RevoluteJoint
        this.m_indexA = 0; // declared in org.jbox2d.dynamics.joints.RevoluteJoint
        this.m_indexB = 0; // declared in org.jbox2d.dynamics.joints.RevoluteJoint
        this.m_invMassA = 0; // declared in org.jbox2d.dynamics.joints.RevoluteJoint
        this.m_invMassB = 0; // declared in org.jbox2d.dynamics.joints.RevoluteJoint
        this.m_invIA = 0; // declared in org.jbox2d.dynamics.joints.RevoluteJoint
        this.m_invIB = 0; // declared in org.jbox2d.dynamics.joints.RevoluteJoint
        this.m_motorMass = 0; // declared in org.jbox2d.dynamics.joints.RevoluteJoint
    },

    instanceOf : function(aType) {
        return ojdjRevoluteJoint.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdjRevoluteJoint;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    ojdjJointcreateojdWorldojdjJointDef : function(p0,p1) {
         return ojdjJoint.ojdjJointcreateojdWorldojdjJointDef(p0,p1);
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdjRevoluteJoint.BOOLEANdesiredAssertionStatus(ojdjRevoluteJoint); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_13_9 : for(;;) switch (__label__) {
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_13_9;
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_13_9;
        }
        ojdjRevoluteJoint.$assertionsDisabled = var1;
        return;
    },

    VOIDinitojpIWorldPoolojdjRevoluteJointDef : function(thisRef,argWorld,def) {
        var __label__ = null;
        ojdjJoint.VOIDinitojpIWorldPoolojdjJointDef(thisRef,argWorld,def);
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var0);
        thisRef.m_localAnchorA = var0;
        var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var1);
        thisRef.m_localAnchorB = var1;
        var var2 = new ojcVec3.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec3.VOIDinit(var2);
        thisRef.m_impulse = var2;
        var var3 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var3);
        thisRef.m_rA = var3;
        var var4 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var4);
        thisRef.m_rB = var4;
        var var5 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var5);
        thisRef.m_localCenterA = var5;
        var var6 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var6);
        thisRef.m_localCenterB = var6;
        var var7 = new ojcMat33.Create(); // type is REFERENCE value type is REFERENCE
        ojcMat33.VOIDinit(var7);
        thisRef.m_mass = var7;
        var var10 = thisRef.m_localAnchorA.ojcVec2setojcVec2(thisRef.m_localAnchorA,def.localAnchorA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7273d1e4
        var var13 = thisRef.m_localAnchorB.ojcVec2setojcVec2(thisRef.m_localAnchorB,def.localAnchorB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@61a11c91
        var var14 = def.referenceAngle; // type is FLOAT value type is FLOAT
        thisRef.m_referenceAngle = var14;
        thisRef.m_motorImpulse = 0.0;
        var var15 = def.lowerAngle; // type is FLOAT value type is FLOAT
        thisRef.m_lowerAngle = var15;
        var var16 = def.upperAngle; // type is FLOAT value type is FLOAT
        thisRef.m_upperAngle = var16;
        var var17 = def.maxMotorTorque; // type is FLOAT value type is FLOAT
        thisRef.m_maxMotorTorque = var17;
        var var18 = def.motorSpeed; // type is FLOAT value type is FLOAT
        thisRef.m_motorSpeed = var18;
        var var19 = def.enableLimit; // type is BOOLEAN value type is BOOLEAN
        thisRef.m_enableLimit = var19;
        var var20 = def.enableMotor; // type is BOOLEAN value type is BOOLEAN
        thisRef.m_enableMotor = var20;
        var var21 = ojdjLimitState.INACTIVE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4afc7cfa
        thisRef.m_limitState = var21;
        return;
    },

    VOIDinitVelocityConstraintsojdSolverData : function(thisRef,data) {
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_15_INT = null; // type is INT # of inits = 1
        var var101 = null; // type is INT # of inits = 2
        var local_2_FLOAT = null; // type is FLOAT # of inits = 1
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_7_FLOAT = null; // type is FLOAT # of inits = 2
        var local_16_FLOAT = null; // type is FLOAT # of inits = 1
        var local_11_FLOAT = null; // type is FLOAT # of inits = 1
        var local_4_FLOAT = null; // type is FLOAT # of inits = 2
        var local_12_FLOAT = null; // type is FLOAT # of inits = 1
        var local_14_FLOAT = null; // type is FLOAT # of inits = 1
        var local_5_FLOAT = null; // type is FLOAT # of inits = 1
        var local_13_FLOAT = null; // type is FLOAT # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var1 = thisRef.m_bodyA.m_islandIndex; // type is INT value type is INT
            thisRef.m_indexA = var1;
            var var3 = thisRef.m_bodyB.m_islandIndex; // type is INT value type is INT
            thisRef.m_indexB = var3;
            var var8 = thisRef.m_localCenterA.ojcVec2setojcVec2(thisRef.m_localCenterA,thisRef.m_bodyA.m_sweep.localCenter); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@693d82af
            var var13 = thisRef.m_localCenterB.ojcVec2setojcVec2(thisRef.m_localCenterB,thisRef.m_bodyB.m_sweep.localCenter); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@62d570a2
            var var15 = thisRef.m_bodyA.m_invMass; // type is FLOAT value type is FLOAT
            thisRef.m_invMassA = var15;
            var var17 = thisRef.m_bodyB.m_invMass; // type is FLOAT value type is FLOAT
            thisRef.m_invMassB = var17;
            var var19 = thisRef.m_bodyA.m_invI; // type is FLOAT value type is FLOAT
            thisRef.m_invIA = var19;
            var var21 = thisRef.m_bodyB.m_invI; // type is FLOAT value type is FLOAT
            thisRef.m_invIB = var21;
            var var24 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_2_FLOAT = var24.a; // type is FLOAT value type is FLOAT
            var var30 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_3_REFERENCE = var30.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6a76650e
            var var35 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_4_FLOAT = var35.w; // type is FLOAT value type is FLOAT
            var var41 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_5_FLOAT = var41.a; // type is FLOAT value type is FLOAT
            var var47 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_6_REFERENCE = var47.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@19ef6def
            var var52 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_7_FLOAT = var52.w; // type is FLOAT value type is FLOAT
            var var57 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1cc2bc87
            var local_8_REFERENCE = var57; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@555b8fdd
            var var60 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@cdcde6d
            var local_9_REFERENCE = var60; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6e3e4a0c
            var var63 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6711e5c8
            var local_10_REFERENCE = var63; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6e3dab90
            var var67 = local_8_REFERENCE.ojcRotsetFLOAT(local_8_REFERENCE,local_2_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4f83f8c
            var var70 = local_9_REFERENCE.ojcRotsetFLOAT(local_9_REFERENCE,local_5_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@180a6b35
            var var71 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@555b8fdd
            var var74 = local_10_REFERENCE.ojcVec2setojcVec2(local_10_REFERENCE,thisRef.m_localAnchorA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@70ddf259
            var var76 = var74.ojcVec2subLocalojcVec2(var74,thisRef.m_localCenterA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@733fa6f9
            ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var71,var76,thisRef.m_rA);
            var var78 = local_9_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6e3e4a0c
            var var81 = local_10_REFERENCE.ojcVec2setojcVec2(local_10_REFERENCE,thisRef.m_localAnchorB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@367ef34d
            var var83 = var81.ojcVec2subLocalojcVec2(var81,thisRef.m_localCenterB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7d666574
            ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var78,var83,thisRef.m_rB);
            local_11_FLOAT = thisRef.m_invMassA; // type is FLOAT value type is FLOAT
            local_12_FLOAT = thisRef.m_invMassB; // type is FLOAT value type is FLOAT
            local_13_FLOAT = thisRef.m_invIA; // type is FLOAT value type is FLOAT
            local_14_FLOAT = thisRef.m_invIB; // type is FLOAT value type is FLOAT
            var var99 = (local_13_FLOAT + local_14_FLOAT); // type is FLOAT value type is FLOAT
            if ((var99 != 0.0)) {
                __label__ = 320;
                break $S_0;
            }
            __label__ = 316;
            }
        $M_316_320 : for(;;) switch (__label__) {
            case 320 :
            // NORMAL
                var101 = 0; // type is INT value type is INT
                break $M_316_320;
            case 316 :
            // NORMAL
                var101 = 1; // type is INT value type is INT
                break $M_316_320;
        }
        $S_321 : {
        // NORMAL
            local_15_INT = var101; // type is INT value type is INT
            var var105 = thisRef.m_mass.ex; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@62361fbb
            var var124 = (((local_11_FLOAT + local_12_FLOAT) + ((thisRef.m_rA.y * thisRef.m_rA.y) * local_13_FLOAT)) + ((thisRef.m_rB.y * thisRef.m_rB.y) * local_14_FLOAT)); // type is FLOAT value type is FLOAT
            var105.x = var124;
            var var126 = thisRef.m_mass.ey; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6cb0756a
            var var142 = ((((-thisRef.m_rA.y) * thisRef.m_rA.x) * local_13_FLOAT) - ((thisRef.m_rB.y * thisRef.m_rB.x) * local_14_FLOAT)); // type is FLOAT value type is FLOAT
            var126.x = var142;
            var var144 = thisRef.m_mass.ez; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2d95172a
            var var154 = (((-thisRef.m_rA.y) * local_13_FLOAT) - (thisRef.m_rB.y * local_14_FLOAT)); // type is FLOAT value type is FLOAT
            var144.x = var154;
            var var156 = thisRef.m_mass.ex; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@63969a29
            var var159 = thisRef.m_mass.ey.x; // type is FLOAT value type is FLOAT
            var156.y = var159;
            var var161 = thisRef.m_mass.ey; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@318f9a27
            var var180 = (((local_11_FLOAT + local_12_FLOAT) + ((thisRef.m_rA.x * thisRef.m_rA.x) * local_13_FLOAT)) + ((thisRef.m_rB.x * thisRef.m_rB.x) * local_14_FLOAT)); // type is FLOAT value type is FLOAT
            var161.y = var180;
            var var182 = thisRef.m_mass.ez; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5efbb259
            var var191 = ((thisRef.m_rA.x * local_13_FLOAT) + (thisRef.m_rB.x * local_14_FLOAT)); // type is FLOAT value type is FLOAT
            var182.y = var191;
            var var193 = thisRef.m_mass.ex; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5b52c2eb
            var var196 = thisRef.m_mass.ez.x; // type is FLOAT value type is FLOAT
            var193.z = var196;
            var var198 = thisRef.m_mass.ey; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@cc25c7a
            var var201 = thisRef.m_mass.ez.y; // type is FLOAT value type is FLOAT
            var198.z = var201;
            var var203 = thisRef.m_mass.ez; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4151b167
            var var206 = (local_13_FLOAT + local_14_FLOAT); // type is FLOAT value type is FLOAT
            var203.z = var206;
            var var209 = (local_13_FLOAT + local_14_FLOAT); // type is FLOAT value type is FLOAT
            thisRef.m_motorMass = var209;
            var var210 = thisRef.m_motorMass; // type is FLOAT value type is FLOAT
            if ((var210 <= 0.0)) {
                __label__ = 643;
                break $S_321;
            }
            __label__ = 633;
            }
        $M_643_633 : for(;;) switch (__label__) {
            case 633 :
            // NORMAL
                var var213 = (1.0 / thisRef.m_motorMass); // type is FLOAT value type is FLOAT
                thisRef.m_motorMass = var213;
                __label__ = 643;
                continue $M_643_633;
            case 643 :
            // NORMAL
                $S_643 : {
                // NORMAL
                    var var214 = thisRef.m_enableMotor; // type is BOOLEAN value type is BOOLEAN
                    if ((var214 == 0)) {
                        __label__ = 655;
                        break $S_643;
                    }
                    __label__ = 650;
                    }
                $M_655_650 : for(;;) switch (__label__) {
                    case 655 :
                    // NORMAL
                        thisRef.m_motorImpulse = 0.0;
                        break $M_655_650;
                    case 650 :
                    // NORMAL
                        var var215 = local_15_INT; // type is INT value type is INT
                        if ((var215 == 0)) {
                            break $M_655_650;
                        }
                        __label__ = 655;
                        continue $M_655_650;
                }
                $S_660 : {
                // NORMAL
                    var var216 = thisRef.m_enableLimit; // type is BOOLEAN value type is BOOLEAN
                    if ((var216 == 0)) {
                        __label__ = 805;
                        break $S_660;
                    }
                    __label__ = 667;
                    }
                $M_667_805 : for(;;) switch (__label__) {
                    case 805 :
                    // NORMAL
                        var var247 = ojdjLimitState.INACTIVE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@423baa6e
                        thisRef.m_limitState = var247;
                        break $M_667_805;
                    case 667 :
                    // NORMAL
                        $S_667 : {
                        // NORMAL
                            var var217 = local_15_INT; // type is INT value type is INT
                            if ((var217 != 0)) {
                                __label__ = 805;
                                continue $M_667_805;
                            }
                            }
                        $S_672 : {
                        // NORMAL
                            local_16_FLOAT = ((local_5_FLOAT - local_2_FLOAT) - thisRef.m_referenceAngle); // type is FLOAT value type is FLOAT
                            var var228 = ojcMathUtils.FLOATabsFLOAT((thisRef.m_upperAngle - thisRef.m_lowerAngle)); // type is FLOAT value type is FLOAT
                            if ((var228 >= 0.06981318)) {
                                __label__ = 711;
                                break $S_672;
                            }
                            __label__ = 701;
                            }
                        $M_701_711 : for(;;) switch (__label__) {
                            case 701 :
                            // NORMAL
                                var var240 = ojdjLimitState.EQUAL; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@fb37d58
                                thisRef.m_limitState = var240;
                                break $M_701_711;
                            case 711 :
                            // NORMAL
                                $S_711 : {
                                // NORMAL
                                    var var230 = local_16_FLOAT; // type is FLOAT value type is FLOAT
                                    var var231 = thisRef.m_lowerAngle; // type is FLOAT value type is FLOAT
                                    if ((var230 > var231)) {
                                        __label__ = 749;
                                        break $S_711;
                                    }
                                    __label__ = 721;
                                    }
                                for(;;) switch (__label__) {
                                    case 721 :
                                    // NORMAL
                                        $S_721 : {
                                        // NORMAL
                                            var var243 = thisRef.m_limitState; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@110cc158
                                            var var244 = ojdjLimitState.AT_LOWER; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5d1a9097
                                            if ((var243 == var244)) {
                                                __label__ = 739;
                                                break $S_721;
                                            }
                                            __label__ = 731;
                                            }
                                        $M_739_731 : for(;;) switch (__label__) {
                                            case 739 :
                                            // NORMAL
                                                var var246 = ojdjLimitState.AT_LOWER; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@42ed3980
                                                thisRef.m_limitState = var246;
                                                break $M_701_711;
                                            case 731 :
                                            // NORMAL
                                                var var245 = thisRef.m_impulse; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@56a0d538
                                                var245.z = 0.0;
                                                __label__ = 739;
                                                continue $M_739_731;
                                        }
                                    case 749 :
                                    // NORMAL
                                        $S_749 : {
                                        // NORMAL
                                            var var233 = local_16_FLOAT; // type is FLOAT value type is FLOAT
                                            var var234 = thisRef.m_upperAngle; // type is FLOAT value type is FLOAT
                                            if ((var233 < var234)) {
                                                __label__ = 787;
                                                break $S_749;
                                            }
                                            __label__ = 759;
                                            }
                                        for(;;) switch (__label__) {
                                            case 759 :
                                            // NORMAL
                                                $S_759 : {
                                                // NORMAL
                                                    var var236 = thisRef.m_limitState; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@21d1d8b5
                                                    var var237 = ojdjLimitState.AT_UPPER; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@28466a30
                                                    if ((var236 == var237)) {
                                                        __label__ = 777;
                                                        break $S_759;
                                                    }
                                                    __label__ = 769;
                                                    }
                                                $M_777_769 : for(;;) switch (__label__) {
                                                    case 769 :
                                                    // NORMAL
                                                        var var238 = thisRef.m_impulse; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@34c7781
                                                        var238.z = 0.0;
                                                        __label__ = 777;
                                                        continue $M_777_769;
                                                    case 777 :
                                                    // NORMAL
                                                        var var239 = ojdjLimitState.AT_UPPER; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@53156bc5
                                                        thisRef.m_limitState = var239;
                                                        break $M_701_711;
                                                }
                                            case 787 :
                                            // NORMAL
                                                var var241 = ojdjLimitState.INACTIVE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7cae0562
                                                thisRef.m_limitState = var241;
                                                var var242 = thisRef.m_impulse; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@67a2e72d
                                                var242.z = 0.0;
                                                break $M_701_711;
                                        }
                                }
                        }
                        break $M_667_805;
                }
                $S_812 : {
                // NORMAL
                    var var249 = data.step.warmStarting; // type is BOOLEAN value type is BOOLEAN
                    if ((var249 == 0)) {
                        __label__ = 1054;
                        break $S_812;
                    }
                    __label__ = 822;
                    }
                $M_822_1054 : for(;;) switch (__label__) {
                    case 1054 :
                    // NORMAL
                        thisRef.m_impulse.VOIDsetZero(thisRef.m_impulse);
                        thisRef.m_motorImpulse = 0.0;
                        break $M_822_1054;
                    case 822 :
                    // NORMAL
                        var var251 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7327427
                        var local_16_REFERENCE = var251; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7f816c47
                        var var253 = thisRef.m_impulse; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7388f3c0
                        var var257 = (var253.x * data.step.dtRatio); // type is FLOAT value type is FLOAT
                        var253.x = var257;
                        var var258 = thisRef.m_impulse; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3e3f913
                        var var262 = (var258.y * data.step.dtRatio); // type is FLOAT value type is FLOAT
                        var258.y = var262;
                        var var266 = (thisRef.m_motorImpulse * data.step.dtRatio); // type is FLOAT value type is FLOAT
                        thisRef.m_motorImpulse = var266;
                        var var267 = local_16_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7f816c47
                        var var269 = thisRef.m_impulse.x; // type is FLOAT value type is FLOAT
                        var267.x = var269;
                        var var270 = local_16_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7f816c47
                        var var272 = thisRef.m_impulse.y; // type is FLOAT value type is FLOAT
                        var270.y = var272;
                        var var273 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@30aef6ee
                        var var279 = (var273.x - (local_11_FLOAT * local_16_REFERENCE.x)); // type is FLOAT value type is FLOAT
                        var273.x = var279;
                        var var280 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@30aef6ee
                        var var286 = (var280.y - (local_11_FLOAT * local_16_REFERENCE.y)); // type is FLOAT value type is FLOAT
                        var280.y = var286;
                        var var287 = local_4_FLOAT; // type is FLOAT value type is FLOAT
                        var var288 = local_13_FLOAT; // type is FLOAT value type is FLOAT
                        var var291 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.m_rA,local_16_REFERENCE); // type is FLOAT value type is FLOAT
                        local_4_FLOAT = (var287 - (var288 * ((var291 + thisRef.m_motorImpulse) + thisRef.m_impulse.z))); // type is FLOAT value type is FLOAT
                        var var300 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1b9bf317
                        var var306 = (var300.x + (local_12_FLOAT * local_16_REFERENCE.x)); // type is FLOAT value type is FLOAT
                        var300.x = var306;
                        var var307 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1b9bf317
                        var var313 = (var307.y + (local_12_FLOAT * local_16_REFERENCE.y)); // type is FLOAT value type is FLOAT
                        var307.y = var313;
                        var var314 = local_7_FLOAT; // type is FLOAT value type is FLOAT
                        var var315 = local_14_FLOAT; // type is FLOAT value type is FLOAT
                        var var318 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.m_rB,local_16_REFERENCE); // type is FLOAT value type is FLOAT
                        local_7_FLOAT = (var314 + (var315 * ((var318 + thisRef.m_motorImpulse) + thisRef.m_impulse.z))); // type is FLOAT value type is FLOAT
                        thisRef.pool.VOIDpushVec2INT(thisRef.pool,1);
                        break $M_822_1054;
                }
                var var331 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
                var var332 = local_4_FLOAT; // type is FLOAT value type is FLOAT
                var331.w = var332;
                var var335 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
                var var336 = local_7_FLOAT; // type is FLOAT value type is FLOAT
                var335.w = var336;
                thisRef.pool.VOIDpushVec2INT(thisRef.pool,1);
                thisRef.pool.VOIDpushRotINT(thisRef.pool,2);
                return;
        }
    },

    VOIDsolveVelocityConstraintsojdSolverData : function(thisRef,data) {
        var local_3_FLOAT = null; // type is FLOAT # of inits = 4
        var local_5_FLOAT = null; // type is FLOAT # of inits = 4
        var local_12_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_11_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_8_FLOAT = null; // type is FLOAT # of inits = 1
        var local_10_INT = null; // type is INT # of inits = 1
        var local_6_FLOAT = null; // type is FLOAT # of inits = 1
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_7_FLOAT = null; // type is FLOAT # of inits = 1
        var local_9_FLOAT = null; // type is FLOAT # of inits = 1
        var var38 = null; // type is INT # of inits = 2
        var local_15_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var2 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_2_REFERENCE = var2.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@194e1393
            var var7 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_3_FLOAT = var7.w; // type is FLOAT value type is FLOAT
            var var13 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_4_REFERENCE = var13.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@687d0a38
            var var18 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_5_FLOAT = var18.w; // type is FLOAT value type is FLOAT
            local_6_FLOAT = thisRef.m_invMassA; // type is FLOAT value type is FLOAT
            local_7_FLOAT = thisRef.m_invMassB; // type is FLOAT value type is FLOAT
            local_8_FLOAT = thisRef.m_invIA; // type is FLOAT value type is FLOAT
            local_9_FLOAT = thisRef.m_invIB; // type is FLOAT value type is FLOAT
            var var36 = (local_8_FLOAT + local_9_FLOAT); // type is FLOAT value type is FLOAT
            if ((var36 != 0.0)) {
                __label__ = 92;
                break $S_0;
            }
            __label__ = 88;
            }
        $M_92_88 : for(;;) switch (__label__) {
            case 88 :
            // NORMAL
                var38 = 1; // type is INT value type is INT
                break $M_92_88;
            case 92 :
            // NORMAL
                var38 = 0; // type is INT value type is INT
                break $M_92_88;
        }
        $S_93 : {
        // NORMAL
            local_10_INT = var38; // type is INT value type is INT
            var var41 = thisRef.m_enableMotor; // type is BOOLEAN value type is BOOLEAN
            if ((var41 == 0)) {
                __label__ = 204;
                break $S_93;
            }
            __label__ = 102;
            }
        $M_204_102 : for(;;) switch (__label__) {
            case 102 :
            // NORMAL
                $S_102 : {
                // NORMAL
                    var var42 = thisRef.m_limitState; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@e262ab1
                    var var43 = ojdjLimitState.EQUAL; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7aa7e76a
                    if ((var42 == var43)) {
                        __label__ = 204;
                        continue $M_204_102;
                    }
                    }
                $S_112 : {
                // NORMAL
                    var var44 = local_10_INT; // type is INT value type is INT
                    if ((var44 != 0)) {
                        __label__ = 204;
                        continue $M_204_102;
                    }
                    }
                var local_11_FLOAT = ((local_5_FLOAT - local_3_FLOAT) - thisRef.m_motorSpeed); // type is FLOAT value type is FLOAT
                var local_12_FLOAT = ((-thisRef.m_motorMass) * local_11_FLOAT); // type is FLOAT value type is FLOAT
                var local_13_FLOAT = thisRef.m_motorImpulse; // type is FLOAT value type is FLOAT
                var local_14_FLOAT = (data.step.dt * thisRef.m_maxMotorTorque); // type is FLOAT value type is FLOAT
                var var73 = ojcMathUtils.FLOATclampFLOATFLOATFLOAT((thisRef.m_motorImpulse + local_12_FLOAT),(-local_14_FLOAT),local_14_FLOAT); // type is FLOAT value type is FLOAT
                thisRef.m_motorImpulse = var73;
                var local_12_FLOAT = (thisRef.m_motorImpulse - local_13_FLOAT); // type is FLOAT value type is FLOAT
                local_3_FLOAT = (local_3_FLOAT - (local_8_FLOAT * local_12_FLOAT)); // type is FLOAT value type is FLOAT
                local_5_FLOAT = (local_5_FLOAT + (local_9_FLOAT * local_12_FLOAT)); // type is FLOAT value type is FLOAT
                __label__ = 204;
                continue $M_204_102;
            case 204 :
            // NORMAL
                $S_204 : {
                // NORMAL
                    var var91 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@139cb126
                    local_11_REFERENCE = var91; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@69a76594
                    var var93 = thisRef.m_enableLimit; // type is BOOLEAN value type is BOOLEAN
                    if ((var93 == 0)) {
                        __label__ = 925;
                        break $S_204;
                    }
                    __label__ = 222;
                    }
                $M_222_925 : for(;;) switch (__label__) {
                    case 222 :
                    // NORMAL
                        $S_222 : {
                        // NORMAL
                            var var94 = thisRef.m_limitState; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@13b045a7
                            var var95 = ojdjLimitState.INACTIVE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2c7c86c2
                            if ((var94 == var95)) {
                                __label__ = 925;
                                continue $M_222_925;
                            }
                            }
                        $S_232 : {
                        // NORMAL
                            var var96 = local_10_INT; // type is INT value type is INT
                            if ((var96 != 0)) {
                                __label__ = 925;
                                continue $M_222_925;
                            }
                            }
                        $S_237 : {
                        // NORMAL
                            var var98 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@69a5a890
                            local_12_REFERENCE = var98; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@a6e3cc3
                            var var101 = thisRef.pool.ojcVec3popVec3(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1fc63103
                            var local_13_REFERENCE = var101; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@e4ad221
                            ojcVec2.VOIDcrossToOutUnsafeFLOATojcVec2ojcVec2(local_3_FLOAT,thisRef.m_rA,local_11_REFERENCE);
                            ojcVec2.VOIDcrossToOutUnsafeFLOATojcVec2ojcVec2(local_5_FLOAT,thisRef.m_rB,local_12_REFERENCE);
                            var var111 = local_12_REFERENCE.ojcVec2addLocalojcVec2(local_12_REFERENCE,local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@46c80fbc
                            var var113 = var111.ojcVec2subLocalojcVec2(var111,local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@26ddedd
                            var var115 = var113.ojcVec2subLocalojcVec2(var113,local_11_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2c0da9ba
                            var local_14_FLOAT = (local_5_FLOAT - local_3_FLOAT); // type is FLOAT value type is FLOAT
                            var var126 = local_13_REFERENCE.ojcVec3setFLOATFLOATFLOAT(local_13_REFERENCE,local_12_REFERENCE.x,local_12_REFERENCE.y,local_14_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@748ebdc0
                            var var128 = thisRef.pool.ojcVec3popVec3(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@72bdf902
                            local_15_REFERENCE = var128; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5e0d501c
                            thisRef.m_mass.VOIDsolve33ToOutojcVec3ojcVec3(thisRef.m_mass,local_13_REFERENCE,local_15_REFERENCE);
                            var var134 = local_15_REFERENCE.ojcVec3negateLocal(local_15_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1eca5abe
                            var var135 = thisRef.m_limitState; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5f4b70a4
                            var var136 = ojdjLimitState.EQUAL; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5eaaa630
                            if ((var135 != var136)) {
                                __label__ = 372;
                                break $S_237;
                            }
                            __label__ = 359;
                            }
                        $M_359_372 : for(;;) switch (__label__) {
                            case 372 :
                            // NORMAL
                                $S_372 : {
                                // NORMAL
                                    var var140 = thisRef.m_limitState; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4342210e
                                    var var141 = ojdjLimitState.AT_LOWER; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@f919c72
                                    if ((var140 != var141)) {
                                        __label__ = 568;
                                        break $S_372;
                                    }
                                    __label__ = 382;
                                    }
                                for(;;) switch (__label__) {
                                    case 568 :
                                    // NORMAL
                                        $S_568 : {
                                        // NORMAL
                                            var var142 = thisRef.m_limitState; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@b5b1374
                                            var var143 = ojdjLimitState.AT_UPPER; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4bbf09
                                            if ((var142 != var143)) {
                                                break $M_359_372;
                                            }
                                            }
                                        $S_578 : {
                                        // NORMAL
                                            var local_16_FLOAT = (thisRef.m_impulse.z + local_15_REFERENCE.z); // type is FLOAT value type is FLOAT
                                            var var151 = local_16_FLOAT; // type is FLOAT value type is FLOAT
                                            if ((var151 <= 0.0)) {
                                                __label__ = 751;
                                                break $S_578;
                                            }
                                            __label__ = 600;
                                            }
                                        for(;;) switch (__label__) {
                                            case 600 :
                                            // NORMAL
                                                var var154 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5253a45f
                                                var local_17_REFERENCE = var154; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5122d06b
                                                var var163 = local_17_REFERENCE.ojcVec2setFLOATFLOAT(local_17_REFERENCE,thisRef.m_mass.ez.x,thisRef.m_mass.ez.y); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2b1a988
                                                var var166 = var163.ojcVec2mulLocalFLOAT(var163,thisRef.m_impulse.z); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5f5fed20
                                                var var168 = var166.ojcVec2subLocalojcVec2(var166,local_12_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@10e1cbc8
                                                thisRef.m_mass.VOIDsolve22ToOutojcVec2ojcVec2(thisRef.m_mass,local_17_REFERENCE,local_11_REFERENCE);
                                                var var172 = local_15_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5e0d501c
                                                var var174 = local_11_REFERENCE.x; // type is FLOAT value type is FLOAT
                                                var172.x = var174;
                                                var var175 = local_15_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5e0d501c
                                                var var177 = local_11_REFERENCE.y; // type is FLOAT value type is FLOAT
                                                var175.y = var177;
                                                var var178 = local_15_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5e0d501c
                                                var var181 = (-thisRef.m_impulse.z); // type is FLOAT value type is FLOAT
                                                var178.z = var181;
                                                var var182 = thisRef.m_impulse; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5707f037
                                                var var186 = (var182.x + local_11_REFERENCE.x); // type is FLOAT value type is FLOAT
                                                var182.x = var186;
                                                var var187 = thisRef.m_impulse; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5875feb6
                                                var var191 = (var187.y + local_11_REFERENCE.y); // type is FLOAT value type is FLOAT
                                                var187.y = var191;
                                                var var192 = thisRef.m_impulse; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@78e32e75
                                                var192.z = 0.0;
                                                thisRef.pool.VOIDpushVec2INT(thisRef.pool,1);
                                                break $M_359_372;
                                            case 751 :
                                            // NORMAL
                                                var var196 = thisRef.m_impulse.ojcVec3addLocalojcVec3(thisRef.m_impulse,local_15_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@66c2052a
                                                break $M_359_372;
                                        }
                                    case 382 :
                                    // NORMAL
                                        $S_382 : {
                                        // NORMAL
                                            var local_16_FLOAT = (thisRef.m_impulse.z + local_15_REFERENCE.z); // type is FLOAT value type is FLOAT
                                            var var203 = local_16_FLOAT; // type is FLOAT value type is FLOAT
                                            if ((var203 >= 0.0)) {
                                                __label__ = 555;
                                                break $S_382;
                                            }
                                            __label__ = 404;
                                            }
                                        $M_404_555 : for(;;) switch (__label__) {
                                            case 404 :
                                            // NORMAL
                                                var var206 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@eacc78d
                                                var local_17_REFERENCE = var206; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@79db18a0
                                                var var214 = local_17_REFERENCE.ojcVec2setFLOATFLOAT(local_17_REFERENCE,thisRef.m_mass.ez.x,thisRef.m_mass.ez.y); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@18aa0168
                                                var var217 = var214.ojcVec2mulLocalFLOAT(var214,thisRef.m_impulse.z); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6e37ac02
                                                var var219 = var217.ojcVec2subLocalojcVec2(var217,local_12_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@64f8ee6
                                                thisRef.m_mass.VOIDsolve22ToOutojcVec2ojcVec2(thisRef.m_mass,local_17_REFERENCE,local_11_REFERENCE);
                                                var var223 = local_15_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5e0d501c
                                                var var225 = local_11_REFERENCE.x; // type is FLOAT value type is FLOAT
                                                var223.x = var225;
                                                var var226 = local_15_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5e0d501c
                                                var var228 = local_11_REFERENCE.y; // type is FLOAT value type is FLOAT
                                                var226.y = var228;
                                                var var229 = local_15_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5e0d501c
                                                var var232 = (-thisRef.m_impulse.z); // type is FLOAT value type is FLOAT
                                                var229.z = var232;
                                                var var233 = thisRef.m_impulse; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@27f08897
                                                var var237 = (var233.x + local_11_REFERENCE.x); // type is FLOAT value type is FLOAT
                                                var233.x = var237;
                                                var var238 = thisRef.m_impulse; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6f997c40
                                                var var242 = (var238.y + local_11_REFERENCE.y); // type is FLOAT value type is FLOAT
                                                var238.y = var242;
                                                var var243 = thisRef.m_impulse; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3c9d9a0d
                                                var243.z = 0.0;
                                                thisRef.pool.VOIDpushVec2INT(thisRef.pool,1);
                                                break $M_404_555;
                                            case 555 :
                                            // NORMAL
                                                var var247 = thisRef.m_impulse.ojcVec3addLocalojcVec3(thisRef.m_impulse,local_15_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@46df1bc6
                                                break $M_404_555;
                                        }
                                        break $M_359_372;
                                }
                            case 359 :
                            // NORMAL
                                var var139 = thisRef.m_impulse.ojcVec3addLocalojcVec3(thisRef.m_impulse,local_15_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@654897ba
                                break $M_359_372;
                        }
                        var var249 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@41979c2f
                        var local_16_REFERENCE = var249; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@110a3be2
                        var var256 = local_16_REFERENCE.ojcVec2setFLOATFLOAT(local_16_REFERENCE,local_15_REFERENCE.x,local_15_REFERENCE.y); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2fb5132e
                        var var257 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@52a8b22
                        var var263 = (var257.x - (local_6_FLOAT * local_16_REFERENCE.x)); // type is FLOAT value type is FLOAT
                        var257.x = var263;
                        var var264 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@52a8b22
                        var var270 = (var264.y - (local_6_FLOAT * local_16_REFERENCE.y)); // type is FLOAT value type is FLOAT
                        var264.y = var270;
                        var var271 = local_3_FLOAT; // type is FLOAT value type is FLOAT
                        var var272 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                        var var275 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.m_rA,local_16_REFERENCE); // type is FLOAT value type is FLOAT
                        local_3_FLOAT = (var271 - (var272 * (var275 + local_15_REFERENCE.z))); // type is FLOAT value type is FLOAT
                        var var282 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@25940a08
                        var var288 = (var282.x + (local_7_FLOAT * local_16_REFERENCE.x)); // type is FLOAT value type is FLOAT
                        var282.x = var288;
                        var var289 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@25940a08
                        var var295 = (var289.y + (local_7_FLOAT * local_16_REFERENCE.y)); // type is FLOAT value type is FLOAT
                        var289.y = var295;
                        var var296 = local_5_FLOAT; // type is FLOAT value type is FLOAT
                        var var297 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                        var var300 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.m_rB,local_16_REFERENCE); // type is FLOAT value type is FLOAT
                        local_5_FLOAT = (var296 + (var297 * (var300 + local_15_REFERENCE.z))); // type is FLOAT value type is FLOAT
                        thisRef.pool.VOIDpushVec2INT(thisRef.pool,2);
                        thisRef.pool.VOIDpushVec3INT(thisRef.pool,2);
                        break $M_222_925;
                    case 925 :
                    // NORMAL
                        var var310 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@e61b425
                        local_12_REFERENCE = var310; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5b4cc537
                        var var312 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@736a3722
                        var local_13_REFERENCE = var312; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@33ffd786
                        ojcVec2.VOIDcrossToOutUnsafeFLOATojcVec2ojcVec2(local_3_FLOAT,thisRef.m_rA,local_11_REFERENCE);
                        ojcVec2.VOIDcrossToOutUnsafeFLOATojcVec2ojcVec2(local_5_FLOAT,thisRef.m_rB,local_12_REFERENCE);
                        var var321 = local_12_REFERENCE.ojcVec2addLocalojcVec2(local_12_REFERENCE,local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@34d48eb4
                        var var323 = var321.ojcVec2subLocalojcVec2(var321,local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3797c497
                        var var325 = var323.ojcVec2subLocalojcVec2(var323,local_11_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@15e63660
                        var var326 = thisRef.m_mass; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@58e880bd
                        var var328 = local_12_REFERENCE.ojcVec2negateLocal(local_12_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4859143a
                        var326.VOIDsolve22ToOutojcVec2ojcVec2(var326,var328,local_13_REFERENCE);
                        var var330 = thisRef.m_impulse; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4163c2da
                        var var334 = (var330.x + local_13_REFERENCE.x); // type is FLOAT value type is FLOAT
                        var330.x = var334;
                        var var335 = thisRef.m_impulse; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6592a9a0
                        var var339 = (var335.y + local_13_REFERENCE.y); // type is FLOAT value type is FLOAT
                        var335.y = var339;
                        var var340 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@52a8b22
                        var var346 = (var340.x - (local_6_FLOAT * local_13_REFERENCE.x)); // type is FLOAT value type is FLOAT
                        var340.x = var346;
                        var var347 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@52a8b22
                        var var353 = (var347.y - (local_6_FLOAT * local_13_REFERENCE.y)); // type is FLOAT value type is FLOAT
                        var347.y = var353;
                        var var354 = local_3_FLOAT; // type is FLOAT value type is FLOAT
                        var var355 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                        var var358 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.m_rA,local_13_REFERENCE); // type is FLOAT value type is FLOAT
                        local_3_FLOAT = (var354 - (var355 * var358)); // type is FLOAT value type is FLOAT
                        var var362 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@25940a08
                        var var368 = (var362.x + (local_7_FLOAT * local_13_REFERENCE.x)); // type is FLOAT value type is FLOAT
                        var362.x = var368;
                        var var369 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@25940a08
                        var var375 = (var369.y + (local_7_FLOAT * local_13_REFERENCE.y)); // type is FLOAT value type is FLOAT
                        var369.y = var375;
                        var var376 = local_5_FLOAT; // type is FLOAT value type is FLOAT
                        var var377 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                        var var380 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.m_rB,local_13_REFERENCE); // type is FLOAT value type is FLOAT
                        local_5_FLOAT = (var376 + (var377 * var380)); // type is FLOAT value type is FLOAT
                        thisRef.pool.VOIDpushVec2INT(thisRef.pool,2);
                        break $M_222_925;
                }
                var var387 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
                var var388 = local_3_FLOAT; // type is FLOAT value type is FLOAT
                var387.w = var388;
                var var391 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
                var var392 = local_5_FLOAT; // type is FLOAT value type is FLOAT
                var391.w = var392;
                thisRef.pool.VOIDpushVec2INT(thisRef.pool,1);
                return;
        }
    },

    BOOLEANsolvePositionConstraintsojdSolverData : function(thisRef,data) {
        var local_11_FLOAT = null; // type is FLOAT # of inits = 1
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_7_FLOAT = null; // type is FLOAT # of inits = 3
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_12_FLOAT = null; // type is FLOAT # of inits = 4
        var local_10_INT = null; // type is INT # of inits = 1
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_8_FLOAT = null; // type is FLOAT # of inits = 4
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_5_FLOAT = null; // type is FLOAT # of inits = 3
        var var42 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var1 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@64fd1c6e
            local_2_REFERENCE = var1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6bd6a146
            var var4 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@58224728
            local_3_REFERENCE = var4; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@10b1357e
            var var8 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_4_REFERENCE = var8.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5f9ffe36
            var var13 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_5_FLOAT = var13.a; // type is FLOAT value type is FLOAT
            var var19 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_6_REFERENCE = var19.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@25dc64bc
            var var24 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_7_FLOAT = var24.a; // type is FLOAT value type is FLOAT
            var var30 = local_2_REFERENCE.ojcRotsetFLOAT(local_2_REFERENCE,local_5_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@294e1205
            var var33 = local_3_REFERENCE.ojcRotsetFLOAT(local_3_REFERENCE,local_7_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@631f1b03
            local_8_FLOAT = 0.0; // type is FLOAT value type is FLOAT
            var local_9_FLOAT = 0.0; // type is FLOAT value type is FLOAT
            var var40 = (thisRef.m_invIA + thisRef.m_invIB); // type is FLOAT value type is FLOAT
            if ((var40 != 0.0)) {
                __label__ = 114;
                break $S_0;
            }
            __label__ = 110;
            }
        $M_110_114 : for(;;) switch (__label__) {
            case 114 :
            // NORMAL
                var42 = 0; // type is INT value type is INT
                break $M_110_114;
            case 110 :
            // NORMAL
                var42 = 1; // type is INT value type is INT
                break $M_110_114;
        }
        $S_115 : {
        // NORMAL
            local_10_INT = var42; // type is INT value type is INT
            var var45 = thisRef.m_enableLimit; // type is BOOLEAN value type is BOOLEAN
            if ((var45 == 0)) {
                __label__ = 320;
                break $S_115;
            }
            __label__ = 124;
            }
        $M_320_124 : for(;;) switch (__label__) {
            case 320 :
            // NORMAL
                $S_320 : {
                // NORMAL
                    var var123 = local_2_REFERENCE.ojcRotsetFLOAT(local_2_REFERENCE,local_5_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@43d12718
                    var var126 = local_3_REFERENCE.ojcRotsetFLOAT(local_3_REFERENCE,local_7_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5ee525a
                    var var128 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5ce9a6d8
                    var local_11_REFERENCE = var128; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@47356945
                    var var131 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@d166f5c
                    var local_12_REFERENCE = var131; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7a9d8026
                    var var134 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6b5336cb
                    var local_13_REFERENCE = var134; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7c005a5
                    var var137 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3992f68e
                    var local_14_REFERENCE = var137; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2f98cd2a
                    var var139 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6bd6a146
                    var var142 = local_13_REFERENCE.ojcVec2setojcVec2(local_13_REFERENCE,thisRef.m_localAnchorA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5d8f437c
                    var var144 = var142.ojcVec2subLocalojcVec2(var142,thisRef.m_localCenterA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5ae59845
                    ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var139,var144,local_11_REFERENCE);
                    var var146 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@10b1357e
                    var var149 = local_13_REFERENCE.ojcVec2setojcVec2(local_13_REFERENCE,thisRef.m_localAnchorB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@74ed3311
                    var var151 = var149.ojcVec2subLocalojcVec2(var149,thisRef.m_localCenterB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1df5513b
                    ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var146,var151,local_12_REFERENCE);
                    var var155 = local_13_REFERENCE.ojcVec2setojcVec2(local_13_REFERENCE,local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3ac6755a
                    var var157 = var155.ojcVec2addLocalojcVec2(var155,local_12_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4c97e5f7
                    var var159 = var157.ojcVec2subLocalojcVec2(var157,local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@51ff22cf
                    var var161 = var159.ojcVec2subLocalojcVec2(var159,local_11_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@66b4dd42
                    var var163 = local_13_REFERENCE.FLOATlength(local_13_REFERENCE); // type is FLOAT value type is FLOAT
                    var local_9_FLOAT = var163; // type is FLOAT value type is FLOAT
                    var local_15_FLOAT = thisRef.m_invMassA; // type is FLOAT value type is FLOAT
                    var local_16_FLOAT = thisRef.m_invMassB; // type is FLOAT value type is FLOAT
                    var local_17_FLOAT = thisRef.m_invIA; // type is FLOAT value type is FLOAT
                    var local_18_FLOAT = thisRef.m_invIB; // type is FLOAT value type is FLOAT
                    var var178 = thisRef.pool.ojcMat22popMat22(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6fd1186b
                    var local_19_REFERENCE = var178; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1c9af03b
                    var var181 = local_19_REFERENCE.ex; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@34db503d
                    var var200 = (((local_15_FLOAT + local_16_FLOAT) + ((local_17_FLOAT * local_11_REFERENCE.y) * local_11_REFERENCE.y)) + ((local_18_FLOAT * local_12_REFERENCE.y) * local_12_REFERENCE.y)); // type is FLOAT value type is FLOAT
                    var181.x = var200;
                    var var202 = local_19_REFERENCE.ex; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7445c529
                    var var218 = ((((-local_17_FLOAT) * local_11_REFERENCE.x) * local_11_REFERENCE.y) - ((local_18_FLOAT * local_12_REFERENCE.x) * local_12_REFERENCE.y)); // type is FLOAT value type is FLOAT
                    var202.y = var218;
                    var var220 = local_19_REFERENCE.ey; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@13b0898a
                    var var223 = local_19_REFERENCE.ex.y; // type is FLOAT value type is FLOAT
                    var220.x = var223;
                    var var225 = local_19_REFERENCE.ey; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@58e0b8ef
                    var var244 = (((local_15_FLOAT + local_16_FLOAT) + ((local_17_FLOAT * local_11_REFERENCE.x) * local_11_REFERENCE.x)) + ((local_18_FLOAT * local_12_REFERENCE.x) * local_12_REFERENCE.x)); // type is FLOAT value type is FLOAT
                    var225.y = var244;
                    local_19_REFERENCE.VOIDsolveToOutojcVec2ojcVec2(local_19_REFERENCE,local_13_REFERENCE,local_14_REFERENCE);
                    var var249 = local_14_REFERENCE.ojcVec2negateLocal(local_14_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@36545176
                    var var250 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7eec205
                    var var256 = (var250.x - (local_15_FLOAT * local_14_REFERENCE.x)); // type is FLOAT value type is FLOAT
                    var250.x = var256;
                    var var257 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7eec205
                    var var263 = (var257.y - (local_15_FLOAT * local_14_REFERENCE.y)); // type is FLOAT value type is FLOAT
                    var257.y = var263;
                    var var264 = local_5_FLOAT; // type is FLOAT value type is FLOAT
                    var var265 = local_17_FLOAT; // type is FLOAT value type is FLOAT
                    var var268 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_11_REFERENCE,local_14_REFERENCE); // type is FLOAT value type is FLOAT
                    local_5_FLOAT = (var264 - (var265 * var268)); // type is FLOAT value type is FLOAT
                    var var272 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@45d9cfc5
                    var var278 = (var272.x + (local_16_FLOAT * local_14_REFERENCE.x)); // type is FLOAT value type is FLOAT
                    var272.x = var278;
                    var var279 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@45d9cfc5
                    var var285 = (var279.y + (local_16_FLOAT * local_14_REFERENCE.y)); // type is FLOAT value type is FLOAT
                    var279.y = var285;
                    var var286 = local_7_FLOAT; // type is FLOAT value type is FLOAT
                    var var287 = local_18_FLOAT; // type is FLOAT value type is FLOAT
                    var var290 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_12_REFERENCE,local_14_REFERENCE); // type is FLOAT value type is FLOAT
                    local_7_FLOAT = (var286 + (var287 * var290)); // type is FLOAT value type is FLOAT
                    thisRef.pool.VOIDpushVec2INT(thisRef.pool,4);
                    thisRef.pool.VOIDpushMat22INT(thisRef.pool,1);
                    var var298 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
                    var var299 = local_5_FLOAT; // type is FLOAT value type is FLOAT
                    var298.a = var299;
                    var var302 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
                    var var303 = local_7_FLOAT; // type is FLOAT value type is FLOAT
                    var302.a = var303;
                    thisRef.pool.VOIDpushRotINT(thisRef.pool,2);
                    var var305 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                    if ((var305 > 0.005)) {
                        __label__ = 822;
                        break $S_320;
                    }
                    __label__ = 810;
                    }
                $M_822_810 : for(;;) switch (__label__) {
                    case 822 :
                    // NORMAL
                        var var309 = 0; // type is INT value type is INT
                        return var309;
                    case 810 :
                    // NORMAL
                        $S_810 : {
                        // NORMAL
                            var var307 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                            if ((var307 > 0.03490659)) {
                                __label__ = 822;
                                continue $M_822_810;
                            }
                            }
                        var var309 = 1; // type is INT value type is INT
                        return var309;
                }
            case 124 :
            // NORMAL
                $S_124 : {
                // NORMAL
                    var var46 = thisRef.m_limitState; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6ce2a618
                    var var47 = ojdjLimitState.INACTIVE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7b898ed7
                    if ((var46 == var47)) {
                        __label__ = 320;
                        continue $M_320_124;
                    }
                    }
                $S_134 : {
                // NORMAL
                    var var48 = local_10_INT; // type is INT value type is INT
                    if ((var48 != 0)) {
                        __label__ = 320;
                        continue $M_320_124;
                    }
                    }
                $S_139 : {
                // NORMAL
                    local_11_FLOAT = ((local_7_FLOAT - local_5_FLOAT) - thisRef.m_referenceAngle); // type is FLOAT value type is FLOAT
                    local_12_FLOAT = 0.0; // type is FLOAT value type is FLOAT
                    var var58 = thisRef.m_limitState; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@26f37689
                    var var59 = ojdjLimitState.EQUAL; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@32385cc0
                    if ((var58 != var59)) {
                        __label__ = 200;
                        break $S_139;
                    }
                    __label__ = 164;
                    }
                $M_164_200 : for(;;) switch (__label__) {
                    case 164 :
                    // NORMAL
                        var var63 = ojcMathUtils.FLOATclampFLOATFLOATFLOAT((local_11_FLOAT - thisRef.m_lowerAngle),-0.13962635,0.13962635); // type is FLOAT value type is FLOAT
                        var local_13_FLOAT = var63; // type is FLOAT value type is FLOAT
                        local_12_FLOAT = ((-thisRef.m_motorMass) * local_13_FLOAT); // type is FLOAT value type is FLOAT
                        var var72 = ojcMathUtils.FLOATabsFLOAT(local_13_FLOAT); // type is FLOAT value type is FLOAT
                        local_8_FLOAT = var72; // type is FLOAT value type is FLOAT
                        break $M_164_200;
                    case 200 :
                    // NORMAL
                        $S_200 : {
                        // NORMAL
                            var var74 = thisRef.m_limitState; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4b93fef9
                            var var75 = ojdjLimitState.AT_LOWER; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7cdb2e6a
                            if ((var74 != var75)) {
                                __label__ = 250;
                                break $S_200;
                            }
                            __label__ = 210;
                            }
                        for(;;) switch (__label__) {
                            case 210 :
                            // NORMAL
                                var local_13_FLOAT = (local_11_FLOAT - thisRef.m_lowerAngle); // type is FLOAT value type is FLOAT
                                local_8_FLOAT = (-local_13_FLOAT); // type is FLOAT value type is FLOAT
                                var var85 = ojcMathUtils.FLOATclampFLOATFLOATFLOAT((local_13_FLOAT + 0.03490659),-0.13962635,0.0); // type is FLOAT value type is FLOAT
                                var local_13_FLOAT = var85; // type is FLOAT value type is FLOAT
                                local_12_FLOAT = ((-thisRef.m_motorMass) * local_13_FLOAT); // type is FLOAT value type is FLOAT
                                break $M_164_200;
                            case 250 :
                            // NORMAL
                                $S_250 : {
                                // NORMAL
                                    var var92 = thisRef.m_limitState; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@41a15846
                                    var var93 = ojdjLimitState.AT_UPPER; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@310fd2ee
                                    if ((var92 != var93)) {
                                        break $M_164_200;
                                    }
                                    }
                                var local_13_FLOAT = (local_11_FLOAT - thisRef.m_upperAngle); // type is FLOAT value type is FLOAT
                                local_8_FLOAT = local_13_FLOAT; // type is FLOAT value type is FLOAT
                                var var102 = ojcMathUtils.FLOATclampFLOATFLOATFLOAT((local_13_FLOAT - 0.03490659),0.0,0.13962635); // type is FLOAT value type is FLOAT
                                var local_13_FLOAT = var102; // type is FLOAT value type is FLOAT
                                local_12_FLOAT = ((-thisRef.m_motorMass) * local_13_FLOAT); // type is FLOAT value type is FLOAT
                                break $M_164_200;
                        }
                }
                local_5_FLOAT = (local_5_FLOAT - (thisRef.m_invIA * local_12_FLOAT)); // type is FLOAT value type is FLOAT
                local_7_FLOAT = (local_7_FLOAT + (thisRef.m_invIB * local_12_FLOAT)); // type is FLOAT value type is FLOAT
                __label__ = 320;
                continue $M_320_124;
        }
    },

    classInitCheck : function() {
        if (!ojdjRevoluteJoint.__initialized) {
            ojdjRevoluteJoint.__initialized = true;
            var thePrototype = ojdjRevoluteJoint.Create.prototype;
            thePrototype.instanceOf = ojdjRevoluteJoint.instanceOf;
            thePrototype.ClassgetClass = ojdjRevoluteJoint.ClassgetClass;
            thePrototype.BOOLEANsolvePositionConstraintsojdSolverData = ojdjRevoluteJoint.BOOLEANsolvePositionConstraintsojdSolverData;
            thePrototype.VOIDsolveVelocityConstraintsojdSolverData = ojdjRevoluteJoint.VOIDsolveVelocityConstraintsojdSolverData;
            thePrototype.VOIDinitVelocityConstraintsojdSolverData = ojdjRevoluteJoint.VOIDinitVelocityConstraintsojdSolverData;
            thePrototype.BOOLEANgetCollideConnected = ojdjJoint.BOOLEANgetCollideConnected;
            thePrototype.ojdBodygetBodyB = ojdjJoint.ojdBodygetBodyB;
            thePrototype.ojdBodygetBodyA = ojdjJoint.ojdBodygetBodyA;
            thePrototype.ojdjJointTypegetType = ojdjJoint.ojdjJointTypegetType;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojdjJoint.classInitCheck();
            jlObject.classInitCheck();
            ojdjRevoluteJoint.VOIDclinit();
        }
    },

};

var ojdjWeldJoint = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 159,
    __implementedTypes : [114,159,1],
    $assertionsDisabled : false, // declared in org.jbox2d.dynamics.joints.Joint

    Create : function() {
        this.pool = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_type = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_prev = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_next = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_bodyA = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_bodyB = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_collideConnected = false; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_islandFlag = false; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_userData = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_edgeA = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_edgeB = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_rA = null; // declared in org.jbox2d.dynamics.joints.WeldJoint
        this.m_rB = null; // declared in org.jbox2d.dynamics.joints.WeldJoint
        this.m_localCenterA = null; // declared in org.jbox2d.dynamics.joints.WeldJoint
        this.m_localCenterB = null; // declared in org.jbox2d.dynamics.joints.WeldJoint
        this.m_mass = null; // declared in org.jbox2d.dynamics.joints.WeldJoint
        this.m_localAnchorA = null; // declared in org.jbox2d.dynamics.joints.WeldJoint
        this.m_localAnchorB = null; // declared in org.jbox2d.dynamics.joints.WeldJoint
        this.m_referenceAngle = 0; // declared in org.jbox2d.dynamics.joints.WeldJoint
        this.m_frequencyHz = 0; // declared in org.jbox2d.dynamics.joints.WeldJoint
        this.m_dampingRatio = 0; // declared in org.jbox2d.dynamics.joints.WeldJoint
        this.m_impulse = null; // declared in org.jbox2d.dynamics.joints.WeldJoint
        this.m_indexA = 0; // declared in org.jbox2d.dynamics.joints.WeldJoint
        this.m_indexB = 0; // declared in org.jbox2d.dynamics.joints.WeldJoint
        this.m_invMassA = 0; // declared in org.jbox2d.dynamics.joints.WeldJoint
        this.m_invMassB = 0; // declared in org.jbox2d.dynamics.joints.WeldJoint
        this.m_invIA = 0; // declared in org.jbox2d.dynamics.joints.WeldJoint
        this.m_invIB = 0; // declared in org.jbox2d.dynamics.joints.WeldJoint
        this.m_gamma = 0; // declared in org.jbox2d.dynamics.joints.WeldJoint
        this.m_bias = 0; // declared in org.jbox2d.dynamics.joints.WeldJoint
    },

    instanceOf : function(aType) {
        return ojdjWeldJoint.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdjWeldJoint;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    ojdjJointcreateojdWorldojdjJointDef : function(p0,p1) {
         return ojdjJoint.ojdjJointcreateojdWorldojdjJointDef(p0,p1);
    },

    VOIDinitojpIWorldPoolojdjWeldJointDef : function(thisRef,argWorld,def) {
        var __label__ = null;
        ojdjJoint.VOIDinitojpIWorldPoolojdjJointDef(thisRef,argWorld,def);
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var0);
        thisRef.m_rA = var0;
        var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var1);
        thisRef.m_rB = var1;
        var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var2);
        thisRef.m_localCenterA = var2;
        var var3 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var3);
        thisRef.m_localCenterB = var3;
        var var4 = new ojcMat33.Create(); // type is REFERENCE value type is REFERENCE
        ojcMat33.VOIDinit(var4);
        thisRef.m_mass = var4;
        var var5 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinitojcVec2(var5,def.localAnchorA);
        thisRef.m_localAnchorA = var5;
        var var7 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinitojcVec2(var7,def.localAnchorB);
        thisRef.m_localAnchorB = var7;
        var var9 = def.referenceAngle; // type is FLOAT value type is FLOAT
        thisRef.m_referenceAngle = var9;
        var var10 = def.frequencyHz; // type is FLOAT value type is FLOAT
        thisRef.m_frequencyHz = var10;
        var var11 = def.dampingRatio; // type is FLOAT value type is FLOAT
        thisRef.m_dampingRatio = var11;
        var var12 = new ojcVec3.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec3.VOIDinit(var12);
        thisRef.m_impulse = var12;
        thisRef.m_impulse.VOIDsetZero(thisRef.m_impulse);
        return;
    },

    VOIDinitVelocityConstraintsojdSolverData : function(thisRef,data) {
        var local_14_FLOAT = null; // type is FLOAT # of inits = 1
        var local_16_FLOAT = null; // type is FLOAT # of inits = 2
        var local_12_FLOAT = null; // type is FLOAT # of inits = 1
        var local_5_FLOAT = null; // type is FLOAT # of inits = 1
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_7_FLOAT = null; // type is FLOAT # of inits = 2
        var local_13_FLOAT = null; // type is FLOAT # of inits = 1
        var var280 = null; // type is FLOAT # of inits = 2
        var local_4_FLOAT = null; // type is FLOAT # of inits = 2
        var local_15_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_18_FLOAT = null; // type is FLOAT # of inits = 1
        var var275 = null; // type is REFERENCE # of inits = 1
        var local_11_FLOAT = null; // type is FLOAT # of inits = 1
        var local_21_FLOAT = null; // type is FLOAT # of inits = 1
        var var262 = null; // type is FLOAT # of inits = 2
        var local_2_FLOAT = null; // type is FLOAT # of inits = 1
        var local_22_FLOAT = null; // type is FLOAT # of inits = 1
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 1
        var var218 = null; // type is FLOAT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var1 = thisRef.m_bodyA.m_islandIndex; // type is INT value type is INT
            thisRef.m_indexA = var1;
            var var3 = thisRef.m_bodyB.m_islandIndex; // type is INT value type is INT
            thisRef.m_indexB = var3;
            var var8 = thisRef.m_localCenterA.ojcVec2setojcVec2(thisRef.m_localCenterA,thisRef.m_bodyA.m_sweep.localCenter); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@cf66e82
            var var13 = thisRef.m_localCenterB.ojcVec2setojcVec2(thisRef.m_localCenterB,thisRef.m_bodyB.m_sweep.localCenter); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@313bd12
            var var15 = thisRef.m_bodyA.m_invMass; // type is FLOAT value type is FLOAT
            thisRef.m_invMassA = var15;
            var var17 = thisRef.m_bodyB.m_invMass; // type is FLOAT value type is FLOAT
            thisRef.m_invMassB = var17;
            var var19 = thisRef.m_bodyA.m_invI; // type is FLOAT value type is FLOAT
            thisRef.m_invIA = var19;
            var var21 = thisRef.m_bodyB.m_invI; // type is FLOAT value type is FLOAT
            thisRef.m_invIB = var21;
            var var24 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_2_FLOAT = var24.a; // type is FLOAT value type is FLOAT
            var var30 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_3_REFERENCE = var30.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6cae4e45
            var var35 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_4_FLOAT = var35.w; // type is FLOAT value type is FLOAT
            var var41 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_5_FLOAT = var41.a; // type is FLOAT value type is FLOAT
            var var47 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_6_REFERENCE = var47.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1c00fab3
            var var52 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_7_FLOAT = var52.w; // type is FLOAT value type is FLOAT
            var var57 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@23bd05cf
            var local_8_REFERENCE = var57; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3d58d787
            var var60 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@231a6a0f
            var local_9_REFERENCE = var60; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@38d4c9bd
            var var63 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@738c3015
            var local_10_REFERENCE = var63; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@893350c
            var var67 = local_8_REFERENCE.ojcRotsetFLOAT(local_8_REFERENCE,local_2_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@78a97c03
            var var70 = local_9_REFERENCE.ojcRotsetFLOAT(local_9_REFERENCE,local_5_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@662edb8a
            var var71 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3d58d787
            var var74 = local_10_REFERENCE.ojcVec2setojcVec2(local_10_REFERENCE,thisRef.m_localAnchorA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@743053c2
            var var76 = var74.ojcVec2subLocalojcVec2(var74,thisRef.m_localCenterA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@651a231d
            ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var71,var76,thisRef.m_rA);
            var var78 = local_9_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@38d4c9bd
            var var81 = local_10_REFERENCE.ojcVec2setojcVec2(local_10_REFERENCE,thisRef.m_localAnchorB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@56e012d9
            var var83 = var81.ojcVec2subLocalojcVec2(var81,thisRef.m_localCenterB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@46826104
            ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var78,var83,thisRef.m_rB);
            local_11_FLOAT = thisRef.m_invMassA; // type is FLOAT value type is FLOAT
            local_12_FLOAT = thisRef.m_invMassB; // type is FLOAT value type is FLOAT
            local_13_FLOAT = thisRef.m_invIA; // type is FLOAT value type is FLOAT
            local_14_FLOAT = thisRef.m_invIB; // type is FLOAT value type is FLOAT
            var var98 = thisRef.pool.ojcMat33popMat33(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@305a9455
            local_15_REFERENCE = var98; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@731bae90
            var var101 = local_15_REFERENCE.ex; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@46c4b88
            var var120 = (((local_11_FLOAT + local_12_FLOAT) + ((thisRef.m_rA.y * thisRef.m_rA.y) * local_13_FLOAT)) + ((thisRef.m_rB.y * thisRef.m_rB.y) * local_14_FLOAT)); // type is FLOAT value type is FLOAT
            var101.x = var120;
            var var122 = local_15_REFERENCE.ey; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@524cf706
            var var138 = ((((-thisRef.m_rA.y) * thisRef.m_rA.x) * local_13_FLOAT) - ((thisRef.m_rB.y * thisRef.m_rB.x) * local_14_FLOAT)); // type is FLOAT value type is FLOAT
            var122.x = var138;
            var var140 = local_15_REFERENCE.ez; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@713260a
            var var150 = (((-thisRef.m_rA.y) * local_13_FLOAT) - (thisRef.m_rB.y * local_14_FLOAT)); // type is FLOAT value type is FLOAT
            var140.x = var150;
            var var152 = local_15_REFERENCE.ex; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@638fe281
            var var155 = local_15_REFERENCE.ey.x; // type is FLOAT value type is FLOAT
            var152.y = var155;
            var var157 = local_15_REFERENCE.ey; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@559d573
            var var176 = (((local_11_FLOAT + local_12_FLOAT) + ((thisRef.m_rA.x * thisRef.m_rA.x) * local_13_FLOAT)) + ((thisRef.m_rB.x * thisRef.m_rB.x) * local_14_FLOAT)); // type is FLOAT value type is FLOAT
            var157.y = var176;
            var var178 = local_15_REFERENCE.ez; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3018f619
            var var187 = ((thisRef.m_rA.x * local_13_FLOAT) + (thisRef.m_rB.x * local_14_FLOAT)); // type is FLOAT value type is FLOAT
            var178.y = var187;
            var var189 = local_15_REFERENCE.ex; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2ea5a566
            var var192 = local_15_REFERENCE.ez.x; // type is FLOAT value type is FLOAT
            var189.z = var192;
            var var194 = local_15_REFERENCE.ey; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3222c1d9
            var var197 = local_15_REFERENCE.ez.y; // type is FLOAT value type is FLOAT
            var194.z = var197;
            var var199 = local_15_REFERENCE.ez; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@799b68a3
            var var202 = (local_13_FLOAT + local_14_FLOAT); // type is FLOAT value type is FLOAT
            var199.z = var202;
            var var203 = thisRef.m_frequencyHz; // type is FLOAT value type is FLOAT
            if ((var203 <= 0.0)) {
                __label__ = 772;
                break $S_0;
            }
            __label__ = 594;
            }
        $M_772_594 : for(;;) switch (__label__) {
            case 772 :
            // NORMAL
                local_15_REFERENCE.VOIDgetSymInverse33ojcMat33(local_15_REFERENCE,thisRef.m_mass);
                thisRef.m_gamma = 0.0;
                thisRef.m_bias = 0.0;
                break $M_772_594;
            case 594 :
            // NORMAL
                $S_594 : {
                // NORMAL
                    local_15_REFERENCE.VOIDgetInverse22ojcMat33(local_15_REFERENCE,thisRef.m_mass);
                    local_16_FLOAT = (local_13_FLOAT + local_14_FLOAT); // type is FLOAT value type is FLOAT
                    var var214 = local_16_FLOAT; // type is FLOAT value type is FLOAT
                    if ((var214 <= 0.0)) {
                        __label__ = 624;
                        break $S_594;
                    }
                    __label__ = 617;
                    }
                $M_617_624 : for(;;) switch (__label__) {
                    case 617 :
                    // NORMAL
                        var218 = (1.0 / local_16_FLOAT); // type is FLOAT value type is FLOAT
                        break $M_617_624;
                    case 624 :
                    // NORMAL
                        var218 = 0.0; // type is FLOAT value type is FLOAT
                        break $M_617_624;
                }
                $S_625 : {
                // NORMAL
                    var local_17_FLOAT = var218; // type is FLOAT value type is FLOAT
                    local_18_FLOAT = ((local_5_FLOAT - local_2_FLOAT) - thisRef.m_referenceAngle); // type is FLOAT value type is FLOAT
                    var local_19_FLOAT = (6.2831855 * thisRef.m_frequencyHz); // type is FLOAT value type is FLOAT
                    var local_20_FLOAT = (((2.0 * local_17_FLOAT) * thisRef.m_dampingRatio) * local_19_FLOAT); // type is FLOAT value type is FLOAT
                    local_21_FLOAT = ((local_17_FLOAT * local_19_FLOAT) * local_19_FLOAT); // type is FLOAT value type is FLOAT
                    local_22_FLOAT = data.step.dt; // type is FLOAT value type is FLOAT
                    var var257 = (local_22_FLOAT * (local_20_FLOAT + (local_22_FLOAT * local_21_FLOAT))); // type is FLOAT value type is FLOAT
                    thisRef.m_gamma = var257;
                    var var258 = thisRef.m_gamma; // type is FLOAT value type is FLOAT
                    if ((var258 == 0.0)) {
                        __label__ = 714;
                        break $S_625;
                    }
                    __label__ = 705;
                    }
                $M_705_714 : for(;;) switch (__label__) {
                    case 705 :
                    // NORMAL
                        var262 = (1.0 / thisRef.m_gamma); // type is FLOAT value type is FLOAT
                        break $M_705_714;
                    case 714 :
                    // NORMAL
                        var262 = 0.0; // type is FLOAT value type is FLOAT
                        break $M_705_714;
                }
                $S_715 : {
                // NORMAL
                    thisRef.m_gamma = var262;
                    var var269 = (((local_18_FLOAT * local_22_FLOAT) * local_21_FLOAT) * thisRef.m_gamma); // type is FLOAT value type is FLOAT
                    thisRef.m_bias = var269;
                    local_16_FLOAT = (local_16_FLOAT + thisRef.m_gamma); // type is FLOAT value type is FLOAT
                    var275 = thisRef.m_mass.ez; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@ec4e1b7
                    var var276 = local_16_FLOAT; // type is FLOAT value type is FLOAT
                    if ((var276 == 0.0)) {
                        __label__ = 765;
                        break $S_715;
                    }
                    __label__ = 758;
                    }
                $M_758_765 : for(;;) switch (__label__) {
                    case 765 :
                    // NORMAL
                        var280 = 0.0; // type is FLOAT value type is FLOAT
                        break $M_758_765;
                    case 758 :
                    // NORMAL
                        var280 = (1.0 / local_16_FLOAT); // type is FLOAT value type is FLOAT
                        break $M_758_765;
                }
                var275.z = var280;
                break $M_772_594;
        }
        $S_791 : {
        // NORMAL
            var var282 = data.step.warmStarting; // type is BOOLEAN value type is BOOLEAN
            if ((var282 == 0)) {
                __label__ = 980;
                break $S_791;
            }
            __label__ = 801;
            }
        $M_801_980 : for(;;) switch (__label__) {
            case 980 :
            // NORMAL
                thisRef.m_impulse.VOIDsetZero(thisRef.m_impulse);
                break $M_801_980;
            case 801 :
            // NORMAL
                var var284 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@dc9fb9c
                var local_16_REFERENCE = var284; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2941cff5
                var var289 = thisRef.m_impulse.ojcVec3mulLocalFLOAT(thisRef.m_impulse,data.step.dtRatio); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@bbd640e
                var var295 = local_16_REFERENCE.ojcVec2setFLOATFLOAT(local_16_REFERENCE,thisRef.m_impulse.x,thisRef.m_impulse.y); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@225df597
                var var296 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3664a86d
                var var302 = (var296.x - (local_11_FLOAT * local_16_REFERENCE.x)); // type is FLOAT value type is FLOAT
                var296.x = var302;
                var var303 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3664a86d
                var var309 = (var303.y - (local_11_FLOAT * local_16_REFERENCE.y)); // type is FLOAT value type is FLOAT
                var303.y = var309;
                var var310 = local_4_FLOAT; // type is FLOAT value type is FLOAT
                var var311 = local_13_FLOAT; // type is FLOAT value type is FLOAT
                var var314 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.m_rA,local_16_REFERENCE); // type is FLOAT value type is FLOAT
                local_4_FLOAT = (var310 - (var311 * (var314 + thisRef.m_impulse.z))); // type is FLOAT value type is FLOAT
                var var321 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1f4edff3
                var var327 = (var321.x + (local_12_FLOAT * local_16_REFERENCE.x)); // type is FLOAT value type is FLOAT
                var321.x = var327;
                var var328 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1f4edff3
                var var334 = (var328.y + (local_12_FLOAT * local_16_REFERENCE.y)); // type is FLOAT value type is FLOAT
                var328.y = var334;
                var var335 = local_7_FLOAT; // type is FLOAT value type is FLOAT
                var var336 = local_14_FLOAT; // type is FLOAT value type is FLOAT
                var var339 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.m_rB,local_16_REFERENCE); // type is FLOAT value type is FLOAT
                local_7_FLOAT = (var335 + (var336 * (var339 + thisRef.m_impulse.z))); // type is FLOAT value type is FLOAT
                thisRef.pool.VOIDpushVec2INT(thisRef.pool,1);
                break $M_801_980;
        }
        var var350 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
        var var351 = local_4_FLOAT; // type is FLOAT value type is FLOAT
        var350.w = var351;
        var var354 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
        var var355 = local_7_FLOAT; // type is FLOAT value type is FLOAT
        var354.w = var355;
        thisRef.pool.VOIDpushVec2INT(thisRef.pool,1);
        thisRef.pool.VOIDpushRotINT(thisRef.pool,2);
        thisRef.pool.VOIDpushMat33INT(thisRef.pool,1);
        return;
    },

    VOIDsolveVelocityConstraintsojdSolverData : function(thisRef,data) {
        var local_6_FLOAT = null; // type is FLOAT # of inits = 1
        var local_11_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_5_FLOAT = null; // type is FLOAT # of inits = 4
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_10_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_12_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_7_FLOAT = null; // type is FLOAT # of inits = 1
        var local_9_FLOAT = null; // type is FLOAT # of inits = 1
        var local_8_FLOAT = null; // type is FLOAT # of inits = 1
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_3_FLOAT = null; // type is FLOAT # of inits = 4
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var2 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_2_REFERENCE = var2.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7ff95d47
            var var7 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_3_FLOAT = var7.w; // type is FLOAT value type is FLOAT
            var var13 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_4_REFERENCE = var13.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1fa783fb
            var var18 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_5_FLOAT = var18.w; // type is FLOAT value type is FLOAT
            local_6_FLOAT = thisRef.m_invMassA; // type is FLOAT value type is FLOAT
            local_7_FLOAT = thisRef.m_invMassB; // type is FLOAT value type is FLOAT
            local_8_FLOAT = thisRef.m_invIA; // type is FLOAT value type is FLOAT
            local_9_FLOAT = thisRef.m_invIB; // type is FLOAT value type is FLOAT
            var var35 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@484bdb79
            local_10_REFERENCE = var35; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7d318bae
            var var38 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7ccc11be
            local_11_REFERENCE = var38; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@68d94f6e
            var var41 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@496a6805
            local_12_REFERENCE = var41; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@66d8c5b4
            var var43 = thisRef.m_frequencyHz; // type is FLOAT value type is FLOAT
            if ((var43 <= 0.0)) {
                __label__ = 390;
                break $S_0;
            }
            __label__ = 120;
            }
        $M_120_390 : for(;;) switch (__label__) {
            case 390 :
            // NORMAL
                ojcVec2.VOIDcrossToOutUnsafeFLOATojcVec2ojcVec2(local_3_FLOAT,thisRef.m_rA,local_12_REFERENCE);
                ojcVec2.VOIDcrossToOutUnsafeFLOATojcVec2ojcVec2(local_5_FLOAT,thisRef.m_rB,local_10_REFERENCE);
                var var163 = local_10_REFERENCE.ojcVec2addLocalojcVec2(local_10_REFERENCE,local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6af19288
                var var165 = var163.ojcVec2subLocalojcVec2(var163,local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7cf70cbc
                var var167 = var165.ojcVec2subLocalojcVec2(var165,local_12_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@60aaa37d
                var local_13_FLOAT = (local_5_FLOAT - local_3_FLOAT); // type is FLOAT value type is FLOAT
                var var173 = thisRef.pool.ojcVec3popVec3(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7a1ac52d
                var local_14_REFERENCE = var173; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1c196d34
                var var181 = local_14_REFERENCE.ojcVec3setFLOATFLOATFLOAT(local_14_REFERENCE,local_10_REFERENCE.x,local_10_REFERENCE.y,local_13_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@584f00e7
                var var183 = thisRef.pool.ojcVec3popVec3(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6dcbf1d8
                var local_15_REFERENCE = var183; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@41d462e1
                ojcMat33.VOIDmulToOutUnsafeojcMat33ojcVec3ojcVec3(thisRef.m_mass,local_14_REFERENCE,local_15_REFERENCE);
                var var188 = local_15_REFERENCE.ojcVec3negateLocal(local_15_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@16f3d722
                var var191 = thisRef.m_impulse.ojcVec3addLocalojcVec3(thisRef.m_impulse,local_15_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@369ba523
                var var197 = local_11_REFERENCE.ojcVec2setFLOATFLOAT(local_11_REFERENCE,local_15_REFERENCE.x,local_15_REFERENCE.y); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4ecd719
                var var198 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@648d5059
                var var204 = (var198.x - (local_6_FLOAT * local_11_REFERENCE.x)); // type is FLOAT value type is FLOAT
                var198.x = var204;
                var var205 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@648d5059
                var var211 = (var205.y - (local_6_FLOAT * local_11_REFERENCE.y)); // type is FLOAT value type is FLOAT
                var205.y = var211;
                var var212 = local_3_FLOAT; // type is FLOAT value type is FLOAT
                var var213 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                var var216 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.m_rA,local_11_REFERENCE); // type is FLOAT value type is FLOAT
                local_3_FLOAT = (var212 - (var213 * (var216 + local_15_REFERENCE.z))); // type is FLOAT value type is FLOAT
                var var223 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6228a03c
                var var229 = (var223.x + (local_7_FLOAT * local_11_REFERENCE.x)); // type is FLOAT value type is FLOAT
                var223.x = var229;
                var var230 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6228a03c
                var var236 = (var230.y + (local_7_FLOAT * local_11_REFERENCE.y)); // type is FLOAT value type is FLOAT
                var230.y = var236;
                var var237 = local_5_FLOAT; // type is FLOAT value type is FLOAT
                var var238 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                var var241 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.m_rB,local_11_REFERENCE); // type is FLOAT value type is FLOAT
                local_5_FLOAT = (var237 + (var238 * (var241 + local_15_REFERENCE.z))); // type is FLOAT value type is FLOAT
                thisRef.pool.VOIDpushVec3INT(thisRef.pool,2);
                break $M_120_390;
            case 120 :
            // NORMAL
                var local_13_FLOAT = (local_5_FLOAT - local_3_FLOAT); // type is FLOAT value type is FLOAT
                var local_14_FLOAT = ((-thisRef.m_mass.ez.z) * ((local_13_FLOAT + thisRef.m_bias) + (thisRef.m_gamma * thisRef.m_impulse.z))); // type is FLOAT value type is FLOAT
                var var65 = thisRef.m_impulse; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@66cd7e0f
                var var68 = (var65.z + local_14_FLOAT); // type is FLOAT value type is FLOAT
                var65.z = var68;
                local_3_FLOAT = (local_3_FLOAT - (local_8_FLOAT * local_14_FLOAT)); // type is FLOAT value type is FLOAT
                local_5_FLOAT = (local_5_FLOAT + (local_9_FLOAT * local_14_FLOAT)); // type is FLOAT value type is FLOAT
                ojcVec2.VOIDcrossToOutUnsafeFLOATojcVec2ojcVec2(local_5_FLOAT,thisRef.m_rB,local_10_REFERENCE);
                ojcVec2.VOIDcrossToOutUnsafeFLOATojcVec2ojcVec2(local_3_FLOAT,thisRef.m_rA,local_12_REFERENCE);
                var var89 = local_10_REFERENCE.ojcVec2addLocalojcVec2(local_10_REFERENCE,local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6e0fef33
                var var91 = var89.ojcVec2subLocalojcVec2(var89,local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@556ed6c
                var var93 = var91.ojcVec2subLocalojcVec2(var91,local_12_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6760b6c0
                var local_15_REFERENCE = local_11_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@68d94f6e
                ojcMat33.VOIDmul22ToOutUnsafeojcMat33ojcVec2ojcVec2(thisRef.m_mass,local_10_REFERENCE,local_15_REFERENCE);
                var var100 = local_15_REFERENCE.ojcVec2negateLocal(local_15_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6ad09125
                var var101 = thisRef.m_impulse; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7bb79d3b
                var var105 = (var101.x + local_15_REFERENCE.x); // type is FLOAT value type is FLOAT
                var101.x = var105;
                var var106 = thisRef.m_impulse; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@49b822ac
                var var110 = (var106.y + local_15_REFERENCE.y); // type is FLOAT value type is FLOAT
                var106.y = var110;
                var var111 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@648d5059
                var var117 = (var111.x - (local_6_FLOAT * local_11_REFERENCE.x)); // type is FLOAT value type is FLOAT
                var111.x = var117;
                var var118 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@648d5059
                var var124 = (var118.y - (local_6_FLOAT * local_11_REFERENCE.y)); // type is FLOAT value type is FLOAT
                var118.y = var124;
                var var125 = local_3_FLOAT; // type is FLOAT value type is FLOAT
                var var126 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                var var129 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.m_rA,local_11_REFERENCE); // type is FLOAT value type is FLOAT
                local_3_FLOAT = (var125 - (var126 * var129)); // type is FLOAT value type is FLOAT
                var var133 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6228a03c
                var var139 = (var133.x + (local_7_FLOAT * local_11_REFERENCE.x)); // type is FLOAT value type is FLOAT
                var133.x = var139;
                var var140 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6228a03c
                var var146 = (var140.y + (local_7_FLOAT * local_11_REFERENCE.y)); // type is FLOAT value type is FLOAT
                var140.y = var146;
                var var147 = local_5_FLOAT; // type is FLOAT value type is FLOAT
                var var148 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                var var151 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.m_rB,local_11_REFERENCE); // type is FLOAT value type is FLOAT
                local_5_FLOAT = (var147 + (var148 * var151)); // type is FLOAT value type is FLOAT
                break $M_120_390;
        }
        var var251 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
        var var252 = local_3_FLOAT; // type is FLOAT value type is FLOAT
        var251.w = var252;
        var var255 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
        var var256 = local_5_FLOAT; // type is FLOAT value type is FLOAT
        var255.w = var256;
        thisRef.pool.VOIDpushVec2INT(thisRef.pool,3);
        return;
    },

    BOOLEANsolvePositionConstraintsojdSolverData : function(thisRef,data) {
        var local_12_FLOAT = null; // type is FLOAT # of inits = 1
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_9_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_16_FLOAT = null; // type is FLOAT # of inits = 2
        var local_3_FLOAT = null; // type is FLOAT # of inits = 3
        var local_19_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_11_FLOAT = null; // type is FLOAT # of inits = 1
        var local_14_FLOAT = null; // type is FLOAT # of inits = 1
        var local_18_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_17_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_5_FLOAT = null; // type is FLOAT # of inits = 3
        var local_13_FLOAT = null; // type is FLOAT # of inits = 1
        var local_15_FLOAT = null; // type is FLOAT # of inits = 2
        var local_10_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var2 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_2_REFERENCE = var2.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@460c1eb1
            var var7 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_3_FLOAT = var7.a; // type is FLOAT value type is FLOAT
            var var13 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_4_REFERENCE = var13.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1c90d33f
            var var18 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_5_FLOAT = var18.a; // type is FLOAT value type is FLOAT
            var var23 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2cf07cc2
            var local_6_REFERENCE = var23; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7d6efe4e
            var var26 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5bb19ec4
            var local_7_REFERENCE = var26; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4122b7a6
            var var29 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6e1bd52c
            var local_8_REFERENCE = var29; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@648dda2f
            var var32 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@331d3fc4
            local_9_REFERENCE = var32; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5ad9ff30
            var var35 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@67562186
            local_10_REFERENCE = var35; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4aa6f598
            var var39 = local_6_REFERENCE.ojcRotsetFLOAT(local_6_REFERENCE,local_3_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@57d43af5
            var var42 = local_7_REFERENCE.ojcRotsetFLOAT(local_7_REFERENCE,local_5_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5d02de82
            local_11_FLOAT = thisRef.m_invMassA; // type is FLOAT value type is FLOAT
            local_12_FLOAT = thisRef.m_invMassB; // type is FLOAT value type is FLOAT
            local_13_FLOAT = thisRef.m_invIA; // type is FLOAT value type is FLOAT
            local_14_FLOAT = thisRef.m_invIB; // type is FLOAT value type is FLOAT
            var var55 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7d6efe4e
            var var58 = local_8_REFERENCE.ojcVec2setojcVec2(local_8_REFERENCE,thisRef.m_localAnchorA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@73b29f9
            var var60 = var58.ojcVec2subLocalojcVec2(var58,thisRef.m_localCenterA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@51377289
            ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var55,var60,local_9_REFERENCE);
            var var62 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4122b7a6
            var var65 = local_8_REFERENCE.ojcVec2setojcVec2(local_8_REFERENCE,thisRef.m_localAnchorB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2742f9c8
            var var67 = var65.ojcVec2subLocalojcVec2(var65,thisRef.m_localCenterB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6cffd56c
            ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var62,var67,local_10_REFERENCE);
            var var70 = thisRef.pool.ojcMat33popMat33(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@32d55deb
            local_17_REFERENCE = var70; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1d38189f
            var var73 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@581cd202
            local_18_REFERENCE = var73; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@38792184
            var var76 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6820fc70
            local_19_REFERENCE = var76; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2d4c69c4
            var var79 = local_17_REFERENCE.ex; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7a6610ad
            var var98 = (((local_11_FLOAT + local_12_FLOAT) + ((local_9_REFERENCE.y * local_9_REFERENCE.y) * local_13_FLOAT)) + ((local_10_REFERENCE.y * local_10_REFERENCE.y) * local_14_FLOAT)); // type is FLOAT value type is FLOAT
            var79.x = var98;
            var var100 = local_17_REFERENCE.ey; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6244200f
            var var116 = ((((-local_9_REFERENCE.y) * local_9_REFERENCE.x) * local_13_FLOAT) - ((local_10_REFERENCE.y * local_10_REFERENCE.x) * local_14_FLOAT)); // type is FLOAT value type is FLOAT
            var100.x = var116;
            var var118 = local_17_REFERENCE.ez; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5cf66287
            var var128 = (((-local_9_REFERENCE.y) * local_13_FLOAT) - (local_10_REFERENCE.y * local_14_FLOAT)); // type is FLOAT value type is FLOAT
            var118.x = var128;
            var var130 = local_17_REFERENCE.ex; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@335ad615
            var var133 = local_17_REFERENCE.ey.x; // type is FLOAT value type is FLOAT
            var130.y = var133;
            var var135 = local_17_REFERENCE.ey; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@79f34bab
            var var154 = (((local_11_FLOAT + local_12_FLOAT) + ((local_9_REFERENCE.x * local_9_REFERENCE.x) * local_13_FLOAT)) + ((local_10_REFERENCE.x * local_10_REFERENCE.x) * local_14_FLOAT)); // type is FLOAT value type is FLOAT
            var135.y = var154;
            var var156 = local_17_REFERENCE.ez; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3af458c2
            var var165 = ((local_9_REFERENCE.x * local_13_FLOAT) + (local_10_REFERENCE.x * local_14_FLOAT)); // type is FLOAT value type is FLOAT
            var156.y = var165;
            var var167 = local_17_REFERENCE.ex; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@55f9e741
            var var170 = local_17_REFERENCE.ez.x; // type is FLOAT value type is FLOAT
            var167.z = var170;
            var var172 = local_17_REFERENCE.ey; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@30f66995
            var var175 = local_17_REFERENCE.ez.y; // type is FLOAT value type is FLOAT
            var172.z = var175;
            var var177 = local_17_REFERENCE.ez; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@53bbd233
            var var180 = (local_13_FLOAT + local_14_FLOAT); // type is FLOAT value type is FLOAT
            var177.z = var180;
            var var181 = thisRef.m_frequencyHz; // type is FLOAT value type is FLOAT
            if ((var181 <= 0.0)) {
                __label__ = 620;
                break $S_0;
            }
            __label__ = 472;
            }
        $M_620_472 : for(;;) switch (__label__) {
            case 472 :
            // NORMAL
                var var284 = local_18_REFERENCE.ojcVec2setojcVec2(local_18_REFERENCE,local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4b11b2ce
                var var286 = var284.ojcVec2addLocalojcVec2(var284,local_10_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@51c89702
                var var288 = var286.ojcVec2subLocalojcVec2(var286,local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@52f1e66f
                var var290 = var288.ojcVec2subLocalojcVec2(var288,local_9_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5fd69c48
                var var292 = local_18_REFERENCE.FLOATlength(local_18_REFERENCE); // type is FLOAT value type is FLOAT
                local_15_FLOAT = var292; // type is FLOAT value type is FLOAT
                local_16_FLOAT = 0.0; // type is FLOAT value type is FLOAT
                local_17_REFERENCE.VOIDsolve22ToOutojcVec2ojcVec2(local_17_REFERENCE,local_18_REFERENCE,local_19_REFERENCE);
                var var299 = local_19_REFERENCE.ojcVec2negateLocal(local_19_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1997c2be
                var var300 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@65a65dfe
                var var306 = (var300.x - (local_11_FLOAT * local_19_REFERENCE.x)); // type is FLOAT value type is FLOAT
                var300.x = var306;
                var var307 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@65a65dfe
                var var313 = (var307.y - (local_11_FLOAT * local_19_REFERENCE.y)); // type is FLOAT value type is FLOAT
                var307.y = var313;
                var var314 = local_3_FLOAT; // type is FLOAT value type is FLOAT
                var var315 = local_13_FLOAT; // type is FLOAT value type is FLOAT
                var var318 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_9_REFERENCE,local_19_REFERENCE); // type is FLOAT value type is FLOAT
                local_3_FLOAT = (var314 - (var315 * var318)); // type is FLOAT value type is FLOAT
                var var322 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3b93def2
                var var328 = (var322.x + (local_12_FLOAT * local_19_REFERENCE.x)); // type is FLOAT value type is FLOAT
                var322.x = var328;
                var var329 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3b93def2
                var var335 = (var329.y + (local_12_FLOAT * local_19_REFERENCE.y)); // type is FLOAT value type is FLOAT
                var329.y = var335;
                var var336 = local_5_FLOAT; // type is FLOAT value type is FLOAT
                var var337 = local_14_FLOAT; // type is FLOAT value type is FLOAT
                var var340 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_10_REFERENCE,local_19_REFERENCE); // type is FLOAT value type is FLOAT
                local_5_FLOAT = (var336 + (var337 * var340)); // type is FLOAT value type is FLOAT
                break $M_620_472;
            case 620 :
            // NORMAL
                var var185 = local_18_REFERENCE.ojcVec2setojcVec2(local_18_REFERENCE,local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@cf23609
                var var187 = var185.ojcVec2addLocalojcVec2(var185,local_10_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@516d6b66
                var var189 = var187.ojcVec2subLocalojcVec2(var187,local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3a3289df
                var var191 = var189.ojcVec2subLocalojcVec2(var189,local_9_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1d173e15
                var local_20_FLOAT = ((local_5_FLOAT - local_3_FLOAT) - thisRef.m_referenceAngle); // type is FLOAT value type is FLOAT
                var var200 = local_18_REFERENCE.FLOATlength(local_18_REFERENCE); // type is FLOAT value type is FLOAT
                local_15_FLOAT = var200; // type is FLOAT value type is FLOAT
                var var204 = ojcMathUtils.FLOATabsFLOAT(local_20_FLOAT); // type is FLOAT value type is FLOAT
                local_16_FLOAT = var204; // type is FLOAT value type is FLOAT
                var var208 = thisRef.pool.ojcVec3popVec3(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@c811c0
                var local_21_REFERENCE = var208; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3ac47ce4
                var var211 = thisRef.pool.ojcVec3popVec3(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@14167612
                var local_22_REFERENCE = var211; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@30d51513
                var var219 = local_21_REFERENCE.ojcVec3setFLOATFLOATFLOAT(local_21_REFERENCE,local_18_REFERENCE.x,local_18_REFERENCE.y,local_20_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@70d354d8
                local_17_REFERENCE.VOIDsolve33ToOutojcVec3ojcVec3(local_17_REFERENCE,local_21_REFERENCE,local_22_REFERENCE);
                var var224 = local_22_REFERENCE.ojcVec3negateLocal(local_22_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@69e9357a
                var var230 = local_19_REFERENCE.ojcVec2setFLOATFLOAT(local_19_REFERENCE,local_22_REFERENCE.x,local_22_REFERENCE.y); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4e6868b3
                var var231 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@65a65dfe
                var var237 = (var231.x - (local_11_FLOAT * local_19_REFERENCE.x)); // type is FLOAT value type is FLOAT
                var231.x = var237;
                var var238 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@65a65dfe
                var var244 = (var238.y - (local_11_FLOAT * local_19_REFERENCE.y)); // type is FLOAT value type is FLOAT
                var238.y = var244;
                var var245 = local_3_FLOAT; // type is FLOAT value type is FLOAT
                var var246 = local_13_FLOAT; // type is FLOAT value type is FLOAT
                var var249 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_9_REFERENCE,local_19_REFERENCE); // type is FLOAT value type is FLOAT
                local_3_FLOAT = (var245 - (var246 * (var249 + local_22_REFERENCE.z))); // type is FLOAT value type is FLOAT
                var var256 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3b93def2
                var var262 = (var256.x + (local_12_FLOAT * local_19_REFERENCE.x)); // type is FLOAT value type is FLOAT
                var256.x = var262;
                var var263 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3b93def2
                var var269 = (var263.y + (local_12_FLOAT * local_19_REFERENCE.y)); // type is FLOAT value type is FLOAT
                var263.y = var269;
                var var270 = local_5_FLOAT; // type is FLOAT value type is FLOAT
                var var271 = local_14_FLOAT; // type is FLOAT value type is FLOAT
                var var274 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_10_REFERENCE,local_19_REFERENCE); // type is FLOAT value type is FLOAT
                local_5_FLOAT = (var270 + (var271 * (var274 + local_22_REFERENCE.z))); // type is FLOAT value type is FLOAT
                thisRef.pool.VOIDpushVec3INT(thisRef.pool,2);
                break $M_620_472;
        }
        $S_858 : {
        // NORMAL
            var var346 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            var var347 = local_3_FLOAT; // type is FLOAT value type is FLOAT
            var346.a = var347;
            var var350 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            var var351 = local_5_FLOAT; // type is FLOAT value type is FLOAT
            var350.a = var351;
            thisRef.pool.VOIDpushVec2INT(thisRef.pool,5);
            thisRef.pool.VOIDpushRotINT(thisRef.pool,2);
            thisRef.pool.VOIDpushMat33INT(thisRef.pool,1);
            var var355 = local_15_FLOAT; // type is FLOAT value type is FLOAT
            if ((var355 > 0.005)) {
                __label__ = 935;
                break $S_858;
            }
            __label__ = 923;
            }
        $M_935_923 : for(;;) switch (__label__) {
            case 935 :
            // NORMAL
                var var359 = 0; // type is INT value type is INT
                return var359;
            case 923 :
            // NORMAL
                $S_923 : {
                // NORMAL
                    var var357 = local_16_FLOAT; // type is FLOAT value type is FLOAT
                    if ((var357 > 0.03490659)) {
                        __label__ = 935;
                        continue $M_935_923;
                    }
                    }
                var var359 = 1; // type is INT value type is INT
                return var359;
        }
    },

    classInitCheck : function() {
        if (!ojdjWeldJoint.__initialized) {
            ojdjWeldJoint.__initialized = true;
            var thePrototype = ojdjWeldJoint.Create.prototype;
            thePrototype.instanceOf = ojdjWeldJoint.instanceOf;
            thePrototype.ClassgetClass = ojdjWeldJoint.ClassgetClass;
            thePrototype.BOOLEANsolvePositionConstraintsojdSolverData = ojdjWeldJoint.BOOLEANsolvePositionConstraintsojdSolverData;
            thePrototype.VOIDsolveVelocityConstraintsojdSolverData = ojdjWeldJoint.VOIDsolveVelocityConstraintsojdSolverData;
            thePrototype.VOIDinitVelocityConstraintsojdSolverData = ojdjWeldJoint.VOIDinitVelocityConstraintsojdSolverData;
            thePrototype.BOOLEANgetCollideConnected = ojdjJoint.BOOLEANgetCollideConnected;
            thePrototype.ojdBodygetBodyB = ojdjJoint.ojdBodygetBodyB;
            thePrototype.ojdBodygetBodyA = ojdjJoint.ojdBodygetBodyA;
            thePrototype.ojdjJointTypegetType = ojdjJoint.ojdjJointTypegetType;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojdjJoint.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var ojdjWeldJointDef = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 160,
    __implementedTypes : [146,160,1],

    Create : function() {
        this.type = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.userData = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.bodyA = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.bodyB = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.collideConnected = false; // declared in org.jbox2d.dynamics.joints.JointDef
        this.localAnchorA = null; // declared in org.jbox2d.dynamics.joints.WeldJointDef
        this.localAnchorB = null; // declared in org.jbox2d.dynamics.joints.WeldJointDef
        this.referenceAngle = 0; // declared in org.jbox2d.dynamics.joints.WeldJointDef
        this.frequencyHz = 0; // declared in org.jbox2d.dynamics.joints.WeldJointDef
        this.dampingRatio = 0; // declared in org.jbox2d.dynamics.joints.WeldJointDef
    },

    instanceOf : function(aType) {
        return ojdjWeldJointDef.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdjWeldJointDef;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        ojdjJointDef.VOIDinit(thisRef);
        var var0 = ojdjJointType.WELD; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2be885e6
        thisRef.type = var0;
        var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var1);
        thisRef.localAnchorA = var1;
        var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var2);
        thisRef.localAnchorB = var2;
        thisRef.referenceAngle = 0.0;
        return;
    },

    classInitCheck : function() {
        if (!ojdjWeldJointDef.__initialized) {
            ojdjWeldJointDef.__initialized = true;
            var thePrototype = ojdjWeldJointDef.Create.prototype;
            thePrototype.instanceOf = ojdjWeldJointDef.instanceOf;
            thePrototype.ClassgetClass = ojdjWeldJointDef.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojdjJointDef.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var ojdjFrictionJoint = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 161,
    __implementedTypes : [161,114,1],
    $assertionsDisabled : false, // declared in org.jbox2d.dynamics.joints.Joint
    $assertionsDisabled : false, // declared in org.jbox2d.dynamics.joints.FrictionJoint

    Create : function() {
        this.pool = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_type = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_prev = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_next = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_bodyA = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_bodyB = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_collideConnected = false; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_islandFlag = false; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_userData = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_edgeA = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_edgeB = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_rA = null; // declared in org.jbox2d.dynamics.joints.FrictionJoint
        this.m_rB = null; // declared in org.jbox2d.dynamics.joints.FrictionJoint
        this.m_localCenterA = null; // declared in org.jbox2d.dynamics.joints.FrictionJoint
        this.m_localCenterB = null; // declared in org.jbox2d.dynamics.joints.FrictionJoint
        this.m_linearMass = null; // declared in org.jbox2d.dynamics.joints.FrictionJoint
        this.m_localAnchorA = null; // declared in org.jbox2d.dynamics.joints.FrictionJoint
        this.m_localAnchorB = null; // declared in org.jbox2d.dynamics.joints.FrictionJoint
        this.m_linearImpulse = null; // declared in org.jbox2d.dynamics.joints.FrictionJoint
        this.m_angularImpulse = 0; // declared in org.jbox2d.dynamics.joints.FrictionJoint
        this.m_maxForce = 0; // declared in org.jbox2d.dynamics.joints.FrictionJoint
        this.m_maxTorque = 0; // declared in org.jbox2d.dynamics.joints.FrictionJoint
        this.m_indexA = 0; // declared in org.jbox2d.dynamics.joints.FrictionJoint
        this.m_indexB = 0; // declared in org.jbox2d.dynamics.joints.FrictionJoint
        this.m_invMassA = 0; // declared in org.jbox2d.dynamics.joints.FrictionJoint
        this.m_invMassB = 0; // declared in org.jbox2d.dynamics.joints.FrictionJoint
        this.m_invIA = 0; // declared in org.jbox2d.dynamics.joints.FrictionJoint
        this.m_invIB = 0; // declared in org.jbox2d.dynamics.joints.FrictionJoint
        this.m_angularMass = 0; // declared in org.jbox2d.dynamics.joints.FrictionJoint
    },

    instanceOf : function(aType) {
        return ojdjFrictionJoint.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdjFrictionJoint;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    ojdjJointcreateojdWorldojdjJointDef : function(p0,p1) {
         return ojdjJoint.ojdjJointcreateojdWorldojdjJointDef(p0,p1);
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdjFrictionJoint.BOOLEANdesiredAssertionStatus(ojdjFrictionJoint); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_9_13 : for(;;) switch (__label__) {
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_9_13;
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_9_13;
        }
        ojdjFrictionJoint.$assertionsDisabled = var1;
        return;
    },

    VOIDinitojpIWorldPoolojdjFrictionJointDef : function(thisRef,argWorldPool,def) {
        var __label__ = null;
        ojdjJoint.VOIDinitojpIWorldPoolojdjJointDef(thisRef,argWorldPool,def);
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var0);
        thisRef.m_rA = var0;
        var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var1);
        thisRef.m_rB = var1;
        var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var2);
        thisRef.m_localCenterA = var2;
        var var3 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var3);
        thisRef.m_localCenterB = var3;
        var var4 = new ojcMat22.Create(); // type is REFERENCE value type is REFERENCE
        ojcMat22.VOIDinit(var4);
        thisRef.m_linearMass = var4;
        var var5 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinitojcVec2(var5,def.localAnchorA);
        thisRef.m_localAnchorA = var5;
        var var7 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinitojcVec2(var7,def.localAnchorB);
        thisRef.m_localAnchorB = var7;
        var var9 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var9);
        thisRef.m_linearImpulse = var9;
        thisRef.m_angularImpulse = 0.0;
        var var10 = def.maxForce; // type is FLOAT value type is FLOAT
        thisRef.m_maxForce = var10;
        var var11 = def.maxTorque; // type is FLOAT value type is FLOAT
        thisRef.m_maxTorque = var11;
        return;
    },

    VOIDinitVelocityConstraintsojdSolverData : function(thisRef,data) {
        var local_13_FLOAT = null; // type is FLOAT # of inits = 1
        var local_8_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_14_FLOAT = null; // type is FLOAT # of inits = 1
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_7_FLOAT = null; // type is FLOAT # of inits = 2
        var local_4_FLOAT = null; // type is FLOAT # of inits = 2
        var local_12_FLOAT = null; // type is FLOAT # of inits = 1
        var local_11_FLOAT = null; // type is FLOAT # of inits = 1
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var1 = thisRef.m_bodyA.m_islandIndex; // type is INT value type is INT
            thisRef.m_indexA = var1;
            var var3 = thisRef.m_bodyB.m_islandIndex; // type is INT value type is INT
            thisRef.m_indexB = var3;
            var var8 = thisRef.m_localCenterA.ojcVec2setojcVec2(thisRef.m_localCenterA,thisRef.m_bodyA.m_sweep.localCenter); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@26a622f4
            var var13 = thisRef.m_localCenterB.ojcVec2setojcVec2(thisRef.m_localCenterB,thisRef.m_bodyB.m_sweep.localCenter); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3f88eb55
            var var15 = thisRef.m_bodyA.m_invMass; // type is FLOAT value type is FLOAT
            thisRef.m_invMassA = var15;
            var var17 = thisRef.m_bodyB.m_invMass; // type is FLOAT value type is FLOAT
            thisRef.m_invMassB = var17;
            var var19 = thisRef.m_bodyA.m_invI; // type is FLOAT value type is FLOAT
            thisRef.m_invIA = var19;
            var var21 = thisRef.m_bodyB.m_invI; // type is FLOAT value type is FLOAT
            thisRef.m_invIB = var21;
            var var24 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            var local_2_FLOAT = var24.a; // type is FLOAT value type is FLOAT
            var var30 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_3_REFERENCE = var30.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6eb400cf
            var var35 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_4_FLOAT = var35.w; // type is FLOAT value type is FLOAT
            var var41 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            var local_5_FLOAT = var41.a; // type is FLOAT value type is FLOAT
            var var47 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_6_REFERENCE = var47.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@a32797e
            var var52 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_7_FLOAT = var52.w; // type is FLOAT value type is FLOAT
            var var57 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1d944b4e
            local_8_REFERENCE = var57; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7e367ce2
            var var60 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@65bed9ea
            var local_9_REFERENCE = var60; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2bc20fea
            var var63 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@32a27a65
            var local_10_REFERENCE = var63; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@dd39944
            var var67 = local_9_REFERENCE.ojcRotsetFLOAT(local_9_REFERENCE,local_2_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1eb1609d
            var var70 = local_10_REFERENCE.ojcRotsetFLOAT(local_10_REFERENCE,local_5_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@253781fe
            var var71 = local_9_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2bc20fea
            var var74 = local_8_REFERENCE.ojcVec2setojcVec2(local_8_REFERENCE,thisRef.m_localAnchorA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4e7a66f
            var var76 = var74.ojcVec2subLocalojcVec2(var74,thisRef.m_localCenterA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@156f160e
            ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var71,var76,thisRef.m_rA);
            var var78 = local_10_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@dd39944
            var var81 = local_8_REFERENCE.ojcVec2setojcVec2(local_8_REFERENCE,thisRef.m_localAnchorB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4f29b6
            var var83 = var81.ojcVec2subLocalojcVec2(var81,thisRef.m_localCenterB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@19ee7030
            ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var78,var83,thisRef.m_rB);
            local_11_FLOAT = thisRef.m_invMassA; // type is FLOAT value type is FLOAT
            local_12_FLOAT = thisRef.m_invMassB; // type is FLOAT value type is FLOAT
            local_13_FLOAT = thisRef.m_invIA; // type is FLOAT value type is FLOAT
            local_14_FLOAT = thisRef.m_invIB; // type is FLOAT value type is FLOAT
            var var98 = thisRef.pool.ojcMat22popMat22(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@208379bc
            var local_15_REFERENCE = var98; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4d31d4c4
            var var101 = local_15_REFERENCE.ex; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@34ca564d
            var var120 = (((local_11_FLOAT + local_12_FLOAT) + ((local_13_FLOAT * thisRef.m_rA.y) * thisRef.m_rA.y)) + ((local_14_FLOAT * thisRef.m_rB.y) * thisRef.m_rB.y)); // type is FLOAT value type is FLOAT
            var101.x = var120;
            var var122 = local_15_REFERENCE.ex; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5ecfcf14
            var var138 = ((((-local_13_FLOAT) * thisRef.m_rA.x) * thisRef.m_rA.y) - ((local_14_FLOAT * thisRef.m_rB.x) * thisRef.m_rB.y)); // type is FLOAT value type is FLOAT
            var122.y = var138;
            var var140 = local_15_REFERENCE.ey; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@653a13e8
            var var143 = local_15_REFERENCE.ex.y; // type is FLOAT value type is FLOAT
            var140.x = var143;
            var var145 = local_15_REFERENCE.ey; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@26ee6c7f
            var var164 = (((local_11_FLOAT + local_12_FLOAT) + ((local_13_FLOAT * thisRef.m_rA.x) * thisRef.m_rA.x)) + ((local_14_FLOAT * thisRef.m_rB.x) * thisRef.m_rB.x)); // type is FLOAT value type is FLOAT
            var145.y = var164;
            local_15_REFERENCE.VOIDinvertToOutojcMat22(local_15_REFERENCE,thisRef.m_linearMass);
            var var169 = (local_13_FLOAT + local_14_FLOAT); // type is FLOAT value type is FLOAT
            thisRef.m_angularMass = var169;
            var var170 = thisRef.m_angularMass; // type is FLOAT value type is FLOAT
            if ((var170 <= 0.0)) {
                __label__ = 518;
                break $S_0;
            }
            __label__ = 508;
            }
        $M_508_518 : for(;;) switch (__label__) {
            case 508 :
            // NORMAL
                var var173 = (1.0 / thisRef.m_angularMass); // type is FLOAT value type is FLOAT
                thisRef.m_angularMass = var173;
                __label__ = 518;
                continue $M_508_518;
            case 518 :
            // NORMAL
                $S_518 : {
                // NORMAL
                    var var175 = data.step.warmStarting; // type is BOOLEAN value type is BOOLEAN
                    if ((var175 == 0)) {
                        __label__ = 678;
                        break $S_518;
                    }
                    __label__ = 528;
                    }
                $M_678_528 : for(;;) switch (__label__) {
                    case 528 :
                    // NORMAL
                        var var180 = thisRef.m_linearImpulse.ojcVec2mulLocalFLOAT(thisRef.m_linearImpulse,data.step.dtRatio); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@40f03ed1
                        var var184 = (thisRef.m_angularImpulse * data.step.dtRatio); // type is FLOAT value type is FLOAT
                        thisRef.m_angularImpulse = var184;
                        var var186 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6067feb4
                        var local_16_REFERENCE = var186; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@55f71403
                        var var190 = local_16_REFERENCE.ojcVec2setojcVec2(local_16_REFERENCE,thisRef.m_linearImpulse); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@af1756
                        var var193 = local_8_REFERENCE.ojcVec2setojcVec2(local_8_REFERENCE,local_16_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@41e8a724
                        var var195 = var193.ojcVec2mulLocalFLOAT(var193,local_11_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1ea563f3
                        var var198 = local_3_REFERENCE.ojcVec2subLocalojcVec2(local_3_REFERENCE,local_8_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@739f2b28
                        var var199 = local_4_FLOAT; // type is FLOAT value type is FLOAT
                        var var200 = local_13_FLOAT; // type is FLOAT value type is FLOAT
                        var var203 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.m_rA,local_16_REFERENCE); // type is FLOAT value type is FLOAT
                        local_4_FLOAT = (var199 - (var200 * (var203 + thisRef.m_angularImpulse))); // type is FLOAT value type is FLOAT
                        var var211 = local_8_REFERENCE.ojcVec2setojcVec2(local_8_REFERENCE,local_16_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@bf287aa
                        var var213 = var211.ojcVec2mulLocalFLOAT(var211,local_12_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@f27c077
                        var var216 = local_6_REFERENCE.ojcVec2addLocalojcVec2(local_6_REFERENCE,local_8_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3a28909b
                        var var217 = local_7_FLOAT; // type is FLOAT value type is FLOAT
                        var var218 = local_14_FLOAT; // type is FLOAT value type is FLOAT
                        var var221 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.m_rB,local_16_REFERENCE); // type is FLOAT value type is FLOAT
                        local_7_FLOAT = (var217 + (var218 * (var221 + thisRef.m_angularImpulse))); // type is FLOAT value type is FLOAT
                        thisRef.pool.VOIDpushVec2INT(thisRef.pool,1);
                        break $M_678_528;
                    case 678 :
                    // NORMAL
                        thisRef.m_linearImpulse.VOIDsetZero(thisRef.m_linearImpulse);
                        thisRef.m_angularImpulse = 0.0;
                        break $M_678_528;
                }
                $S_690 : {
                // NORMAL
                    var var230 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
                    var var231 = var230.w; // type is FLOAT value type is FLOAT
                    var var232 = local_4_FLOAT; // type is FLOAT value type is FLOAT
                    if ((var231 == var232)) {
                        __label__ = 740;
                        break $S_690;
                    }
                    __label__ = 708;
                    }
                $M_708_740 : for(;;) switch (__label__) {
                    case 708 :
                    // NORMAL
                        $S_708 : {
                        // NORMAL
                            var var234 = ojdjFrictionJoint.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                            if ((var234 != 0)) {
                                __label__ = 740;
                                continue $M_708_740;
                            }
                            }
                        $S_714 : {
                        // NORMAL
                            var var237 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
                            var var238 = var237.w; // type is FLOAT value type is FLOAT
                            var var239 = local_4_FLOAT; // type is FLOAT value type is FLOAT
                            if ((var238 != var239)) {
                                __label__ = 740;
                                continue $M_708_740;
                            }
                            }
                        var var241 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                        jlAssertionError.VOIDinit(var241);
                        throw var241;
                    case 740 :
                    // NORMAL
                        var var244 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
                        var var245 = local_4_FLOAT; // type is FLOAT value type is FLOAT
                        var244.w = var245;
                        var var248 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
                        var var249 = local_7_FLOAT; // type is FLOAT value type is FLOAT
                        var248.w = var249;
                        thisRef.pool.VOIDpushRotINT(thisRef.pool,2);
                        thisRef.pool.VOIDpushVec2INT(thisRef.pool,1);
                        thisRef.pool.VOIDpushMat22INT(thisRef.pool,1);
                        return;
                }
        }
    },

    VOIDsolveVelocityConstraintsojdSolverData : function(thisRef,data) {
        var local_12_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_3_FLOAT = null; // type is FLOAT # of inits = 3
        var local_8_FLOAT = null; // type is FLOAT # of inits = 1
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_7_FLOAT = null; // type is FLOAT # of inits = 1
        var local_15_FLOAT = null; // type is FLOAT # of inits = 1
        var local_9_FLOAT = null; // type is FLOAT # of inits = 1
        var local_5_FLOAT = null; // type is FLOAT # of inits = 3
        var local_13_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_14_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_6_FLOAT = null; // type is FLOAT # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var2 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_2_REFERENCE = var2.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@618a79be
            var var7 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_3_FLOAT = var7.w; // type is FLOAT value type is FLOAT
            var var13 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_4_REFERENCE = var13.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@460c79a6
            var var18 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_5_FLOAT = var18.w; // type is FLOAT value type is FLOAT
            local_6_FLOAT = thisRef.m_invMassA; // type is FLOAT value type is FLOAT
            local_7_FLOAT = thisRef.m_invMassB; // type is FLOAT value type is FLOAT
            local_8_FLOAT = thisRef.m_invIA; // type is FLOAT value type is FLOAT
            local_9_FLOAT = thisRef.m_invIB; // type is FLOAT value type is FLOAT
            var local_10_FLOAT = data.step.dt; // type is FLOAT value type is FLOAT
            var local_11_FLOAT = (local_5_FLOAT - local_3_FLOAT); // type is FLOAT value type is FLOAT
            var local_12_FLOAT = ((-thisRef.m_angularMass) * local_11_FLOAT); // type is FLOAT value type is FLOAT
            var local_13_FLOAT = thisRef.m_angularImpulse; // type is FLOAT value type is FLOAT
            var local_14_FLOAT = (local_10_FLOAT * thisRef.m_maxTorque); // type is FLOAT value type is FLOAT
            var var63 = ojcMathUtils.FLOATclampFLOATFLOATFLOAT((thisRef.m_angularImpulse + local_12_FLOAT),(-local_14_FLOAT),local_14_FLOAT); // type is FLOAT value type is FLOAT
            thisRef.m_angularImpulse = var63;
            var local_12_FLOAT = (thisRef.m_angularImpulse - local_13_FLOAT); // type is FLOAT value type is FLOAT
            local_3_FLOAT = (local_3_FLOAT - (local_8_FLOAT * local_12_FLOAT)); // type is FLOAT value type is FLOAT
            local_5_FLOAT = (local_5_FLOAT + (local_9_FLOAT * local_12_FLOAT)); // type is FLOAT value type is FLOAT
            var var81 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2732b830
            var local_11_REFERENCE = var81; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@58c0937
            var var84 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3779d7b1
            local_12_REFERENCE = var84; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4672c8c4
            ojcVec2.VOIDcrossToOutUnsafeFLOATojcVec2ojcVec2(local_3_FLOAT,thisRef.m_rA,local_12_REFERENCE);
            ojcVec2.VOIDcrossToOutUnsafeFLOATojcVec2ojcVec2(local_5_FLOAT,thisRef.m_rB,local_11_REFERENCE);
            var var94 = local_11_REFERENCE.ojcVec2addLocalojcVec2(local_11_REFERENCE,local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@129d59b1
            var var96 = var94.ojcVec2subLocalojcVec2(var94,local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@205c90ea
            var var98 = var96.ojcVec2subLocalojcVec2(var96,local_12_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@457ce067
            var var100 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3c416326
            local_13_REFERENCE = var100; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@34982154
            ojcMat22.VOIDmulToOutUnsafeojcMat22ojcVec2ojcVec2(thisRef.m_linearMass,local_11_REFERENCE,local_13_REFERENCE);
            var var106 = local_13_REFERENCE.ojcVec2negateLocal(local_13_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@44e9e5ce
            var var108 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@f6e679
            local_14_REFERENCE = var108; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@74e2db6
            var var112 = local_14_REFERENCE.ojcVec2setojcVec2(local_14_REFERENCE,thisRef.m_linearImpulse); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@22ab41d8
            var var115 = thisRef.m_linearImpulse.ojcVec2addLocalojcVec2(thisRef.m_linearImpulse,local_13_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@15c44ef8
            local_15_FLOAT = (local_10_FLOAT * thisRef.m_maxForce); // type is FLOAT value type is FLOAT
            var var122 = thisRef.m_linearImpulse.FLOATlengthSquared(thisRef.m_linearImpulse); // type is FLOAT value type is FLOAT
            var var125 = (local_15_FLOAT * local_15_FLOAT); // type is FLOAT value type is FLOAT
            if ((var122 <= var125)) {
                __label__ = 326;
                break $S_0;
            }
            __label__ = 308;
            }
        $M_326_308 : for(;;) switch (__label__) {
            case 308 :
            // NORMAL
                var var128 = thisRef.m_linearImpulse.FLOATnormalize(thisRef.m_linearImpulse); // type is FLOAT value type is FLOAT
                var var131 = thisRef.m_linearImpulse.ojcVec2mulLocalFLOAT(thisRef.m_linearImpulse,local_15_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1e881e1b
                __label__ = 326;
                continue $M_326_308;
            case 326 :
            // NORMAL
                $S_326 : {
                // NORMAL
                    var var134 = local_13_REFERENCE.ojcVec2setojcVec2(local_13_REFERENCE,thisRef.m_linearImpulse); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@29fae69d
                    var var136 = var134.ojcVec2subLocalojcVec2(var134,local_14_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5127c7fb
                    var var139 = local_12_REFERENCE.ojcVec2setojcVec2(local_12_REFERENCE,local_13_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@66a3f0a9
                    var var141 = var139.ojcVec2mulLocalFLOAT(var139,local_6_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@380542a0
                    var var144 = local_2_REFERENCE.ojcVec2subLocalojcVec2(local_2_REFERENCE,local_12_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@46359533
                    var var145 = local_3_FLOAT; // type is FLOAT value type is FLOAT
                    var var146 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                    var var149 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.m_rA,local_13_REFERENCE); // type is FLOAT value type is FLOAT
                    local_3_FLOAT = (var145 - (var146 * var149)); // type is FLOAT value type is FLOAT
                    var var155 = local_12_REFERENCE.ojcVec2setojcVec2(local_12_REFERENCE,local_13_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@29429a11
                    var var157 = var155.ojcVec2mulLocalFLOAT(var155,local_7_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@501d0128
                    var var160 = local_4_REFERENCE.ojcVec2addLocalojcVec2(local_4_REFERENCE,local_12_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@429f59c9
                    var var161 = local_5_FLOAT; // type is FLOAT value type is FLOAT
                    var var162 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                    var var165 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.m_rB,local_13_REFERENCE); // type is FLOAT value type is FLOAT
                    local_5_FLOAT = (var161 + (var162 * var165)); // type is FLOAT value type is FLOAT
                    var var171 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
                    var var172 = var171.w; // type is FLOAT value type is FLOAT
                    var var173 = local_3_FLOAT; // type is FLOAT value type is FLOAT
                    if ((var172 == var173)) {
                        __label__ = 462;
                        break $S_326;
                    }
                    __label__ = 431;
                    }
                $M_462_431 : for(;;) switch (__label__) {
                    case 462 :
                    // NORMAL
                        var var184 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
                        var var185 = local_3_FLOAT; // type is FLOAT value type is FLOAT
                        var184.w = var185;
                        var var188 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
                        var var189 = local_5_FLOAT; // type is FLOAT value type is FLOAT
                        var188.w = var189;
                        thisRef.pool.VOIDpushVec2INT(thisRef.pool,4);
                        return;
                    case 431 :
                    // NORMAL
                        $S_431 : {
                        // NORMAL
                            var var175 = ojdjFrictionJoint.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                            if ((var175 != 0)) {
                                __label__ = 462;
                                continue $M_462_431;
                            }
                            }
                        $S_437 : {
                        // NORMAL
                            var var178 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
                            var var179 = var178.w; // type is FLOAT value type is FLOAT
                            var var180 = local_3_FLOAT; // type is FLOAT value type is FLOAT
                            if ((var179 != var180)) {
                                __label__ = 462;
                                continue $M_462_431;
                            }
                            }
                        var var191 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                        jlAssertionError.VOIDinit(var191);
                        throw var191;
                }
        }
    },

    BOOLEANsolvePositionConstraintsojdSolverData : function(thisRef,data) {
        var __label__ = null;
        return 1;
    },

    classInitCheck : function() {
        if (!ojdjFrictionJoint.__initialized) {
            ojdjFrictionJoint.__initialized = true;
            var thePrototype = ojdjFrictionJoint.Create.prototype;
            thePrototype.instanceOf = ojdjFrictionJoint.instanceOf;
            thePrototype.ClassgetClass = ojdjFrictionJoint.ClassgetClass;
            thePrototype.BOOLEANsolvePositionConstraintsojdSolverData = ojdjFrictionJoint.BOOLEANsolvePositionConstraintsojdSolverData;
            thePrototype.VOIDsolveVelocityConstraintsojdSolverData = ojdjFrictionJoint.VOIDsolveVelocityConstraintsojdSolverData;
            thePrototype.VOIDinitVelocityConstraintsojdSolverData = ojdjFrictionJoint.VOIDinitVelocityConstraintsojdSolverData;
            thePrototype.BOOLEANgetCollideConnected = ojdjJoint.BOOLEANgetCollideConnected;
            thePrototype.ojdBodygetBodyB = ojdjJoint.ojdBodygetBodyB;
            thePrototype.ojdBodygetBodyA = ojdjJoint.ojdBodygetBodyA;
            thePrototype.ojdjJointTypegetType = ojdjJoint.ojdjJointTypegetType;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojdjJoint.classInitCheck();
            jlObject.classInitCheck();
            ojdjFrictionJoint.VOIDclinit();
        }
    },

};

var ojdjFrictionJointDef = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 162,
    __implementedTypes : [162,146,1],

    Create : function() {
        this.type = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.userData = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.bodyA = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.bodyB = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.collideConnected = false; // declared in org.jbox2d.dynamics.joints.JointDef
        this.localAnchorA = null; // declared in org.jbox2d.dynamics.joints.FrictionJointDef
        this.localAnchorB = null; // declared in org.jbox2d.dynamics.joints.FrictionJointDef
        this.maxForce = 0; // declared in org.jbox2d.dynamics.joints.FrictionJointDef
        this.maxTorque = 0; // declared in org.jbox2d.dynamics.joints.FrictionJointDef
    },

    instanceOf : function(aType) {
        return ojdjFrictionJointDef.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdjFrictionJointDef;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        ojdjJointDef.VOIDinit(thisRef);
        var var0 = ojdjJointType.FRICTION; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1b0e5221
        thisRef.type = var0;
        var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var1);
        thisRef.localAnchorA = var1;
        var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var2);
        thisRef.localAnchorB = var2;
        thisRef.maxForce = 0.0;
        thisRef.maxTorque = 0.0;
        return;
    },

    classInitCheck : function() {
        if (!ojdjFrictionJointDef.__initialized) {
            ojdjFrictionJointDef.__initialized = true;
            var thePrototype = ojdjFrictionJointDef.Create.prototype;
            thePrototype.instanceOf = ojdjFrictionJointDef.instanceOf;
            thePrototype.ClassgetClass = ojdjFrictionJointDef.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojdjJointDef.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var ojdjWheelJoint = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 163,
    __implementedTypes : [163,114,1],
    $assertionsDisabled : false, // declared in org.jbox2d.dynamics.joints.Joint

    Create : function() {
        this.pool = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_type = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_prev = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_next = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_bodyA = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_bodyB = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_collideConnected = false; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_islandFlag = false; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_userData = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_edgeA = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_edgeB = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_localAnchorA = null; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.m_localAnchorB = null; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.m_localXAxisA = null; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.m_localYAxisA = null; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.m_localCenterA = null; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.m_localCenterB = null; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.m_ax = null; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.m_ay = null; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.rA = null; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.rB = null; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.d = null; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.m_motorMass = 0; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.m_motorImpulse = 0; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.m_maxMotorTorque = 0; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.m_motorSpeed = 0; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.m_enableMotor = false; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.m_frequencyHz = 0; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.m_dampingRatio = 0; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.m_indexA = 0; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.m_indexB = 0; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.m_invMassA = 0; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.m_invMassB = 0; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.m_invIA = 0; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.m_invIB = 0; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.m_sAy = 0; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.m_sBy = 0; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.m_mass = 0; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.m_springMass = 0; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.m_bias = 0; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.m_gamma = 0; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.m_sAx = 0; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.m_sBx = 0; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.m_springImpulse = 0; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.m_impulse = 0; // declared in org.jbox2d.dynamics.joints.WheelJoint
    },

    instanceOf : function(aType) {
        return ojdjWheelJoint.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdjWheelJoint;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    ojdjJointcreateojdWorldojdjJointDef : function(p0,p1) {
         return ojdjJoint.ojdjJointcreateojdWorldojdjJointDef(p0,p1);
    },

    VOIDinitojpIWorldPoolojdjWheelJointDef : function(thisRef,argPool,def) {
        var __label__ = null;
        ojdjJoint.VOIDinitojpIWorldPoolojdjJointDef(thisRef,argPool,def);
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var0);
        thisRef.m_localAnchorA = var0;
        var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var1);
        thisRef.m_localAnchorB = var1;
        var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var2);
        thisRef.m_localXAxisA = var2;
        var var3 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var3);
        thisRef.m_localYAxisA = var3;
        var var4 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var4);
        thisRef.m_localCenterA = var4;
        var var5 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var5);
        thisRef.m_localCenterB = var5;
        var var6 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var6);
        thisRef.m_ax = var6;
        var var7 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var7);
        thisRef.m_ay = var7;
        var var8 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var8);
        thisRef.rA = var8;
        var var9 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var9);
        thisRef.rB = var9;
        var var10 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var10);
        thisRef.d = var10;
        var var13 = thisRef.m_localAnchorA.ojcVec2setojcVec2(thisRef.m_localAnchorA,def.localAnchorA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@457c6930
        var var16 = thisRef.m_localAnchorB.ojcVec2setojcVec2(thisRef.m_localAnchorB,def.localAnchorB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@268d6d63
        var var19 = thisRef.m_localXAxisA.ojcVec2setojcVec2(thisRef.m_localXAxisA,def.localAxisA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@66d018fe
        ojcVec2.VOIDcrossToOutUnsafeFLOATojcVec2ojcVec2(1.0,thisRef.m_localXAxisA,thisRef.m_localYAxisA);
        thisRef.m_motorMass = 0.0;
        thisRef.m_motorImpulse = 0.0;
        var var22 = def.maxMotorTorque; // type is FLOAT value type is FLOAT
        thisRef.m_maxMotorTorque = var22;
        var var23 = def.motorSpeed; // type is FLOAT value type is FLOAT
        thisRef.m_motorSpeed = var23;
        var var24 = def.enableMotor; // type is BOOLEAN value type is BOOLEAN
        thisRef.m_enableMotor = var24;
        var var25 = def.frequencyHz; // type is FLOAT value type is FLOAT
        thisRef.m_frequencyHz = var25;
        var var26 = def.dampingRatio; // type is FLOAT value type is FLOAT
        thisRef.m_dampingRatio = var26;
        return;
    },

    VOIDinitVelocityConstraintsojdSolverData : function(thisRef,data) {
        var local_14_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_8_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_16_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_12_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_21_FLOAT = null; // type is FLOAT # of inits = 1
        var local_5_FLOAT = null; // type is FLOAT # of inits = 1
        var local_9_FLOAT = null; // type is FLOAT # of inits = 2
        var local_2_FLOAT = null; // type is FLOAT # of inits = 1
        var local_17_FLOAT = null; // type is FLOAT # of inits = 1
        var local_18_FLOAT = null; // type is FLOAT # of inits = 2
        var local_22_FLOAT = null; // type is FLOAT # of inits = 1
        var local_13_FLOAT = null; // type is FLOAT # of inits = 2
        var local_3_FLOAT = null; // type is FLOAT # of inits = 1
        var local_4_FLOAT = null; // type is FLOAT # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var1 = thisRef.m_bodyA.m_islandIndex; // type is INT value type is INT
            thisRef.m_indexA = var1;
            var var3 = thisRef.m_bodyB.m_islandIndex; // type is INT value type is INT
            thisRef.m_indexB = var3;
            var var8 = thisRef.m_localCenterA.ojcVec2setojcVec2(thisRef.m_localCenterA,thisRef.m_bodyA.m_sweep.localCenter); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@35eb171b
            var var13 = thisRef.m_localCenterB.ojcVec2setojcVec2(thisRef.m_localCenterB,thisRef.m_bodyB.m_sweep.localCenter); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@679ee196
            var var15 = thisRef.m_bodyA.m_invMass; // type is FLOAT value type is FLOAT
            thisRef.m_invMassA = var15;
            var var17 = thisRef.m_bodyB.m_invMass; // type is FLOAT value type is FLOAT
            thisRef.m_invMassB = var17;
            var var19 = thisRef.m_bodyA.m_invI; // type is FLOAT value type is FLOAT
            thisRef.m_invIA = var19;
            var var21 = thisRef.m_bodyB.m_invI; // type is FLOAT value type is FLOAT
            thisRef.m_invIB = var21;
            local_2_FLOAT = thisRef.m_invMassA; // type is FLOAT value type is FLOAT
            local_3_FLOAT = thisRef.m_invMassB; // type is FLOAT value type is FLOAT
            local_4_FLOAT = thisRef.m_invIA; // type is FLOAT value type is FLOAT
            local_5_FLOAT = thisRef.m_invIB; // type is FLOAT value type is FLOAT
            var var36 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            var local_6_REFERENCE = var36.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5b7d9fd0
            var var41 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            var local_7_FLOAT = var41.a; // type is FLOAT value type is FLOAT
            var var47 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_8_REFERENCE = var47.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7cc82f2d
            var var52 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_9_FLOAT = var52.w; // type is FLOAT value type is FLOAT
            var var58 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            var local_10_REFERENCE = var58.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@11f6bc60
            var var63 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            var local_11_FLOAT = var63.a; // type is FLOAT value type is FLOAT
            var var69 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_12_REFERENCE = var69.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1747d99
            var var74 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_13_FLOAT = var74.w; // type is FLOAT value type is FLOAT
            var var79 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@36c0e178
            local_14_REFERENCE = var79; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@28ad70a9
            var var82 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@b4c11ca
            var local_15_REFERENCE = var82; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2ffdb97f
            var var85 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@dc781ac
            local_16_REFERENCE = var85; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@9616914
            var var89 = local_14_REFERENCE.ojcRotsetFLOAT(local_14_REFERENCE,local_7_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3c3d6a4d
            var var92 = local_15_REFERENCE.ojcRotsetFLOAT(local_15_REFERENCE,local_11_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5794ee41
            var var93 = local_14_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@28ad70a9
            var var96 = local_16_REFERENCE.ojcVec2setojcVec2(local_16_REFERENCE,thisRef.m_localAnchorA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@15e0938d
            var var98 = var96.ojcVec2subLocalojcVec2(var96,thisRef.m_localCenterA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@241bba7c
            ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var93,var98,thisRef.rA);
            var var100 = local_15_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2ffdb97f
            var var103 = local_16_REFERENCE.ojcVec2setojcVec2(local_16_REFERENCE,thisRef.m_localAnchorB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@73a3d3b0
            var var105 = var103.ojcVec2subLocalojcVec2(var103,thisRef.m_localCenterB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3b5cd63
            ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var100,var105,thisRef.rB);
            var var109 = thisRef.d.ojcVec2setojcVec2(thisRef.d,local_10_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@12d84a63
            var var111 = var109.ojcVec2addLocalojcVec2(var109,thisRef.rB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6be9da1e
            var var113 = var111.ojcVec2subLocalojcVec2(var111,local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@63aaa80
            var var115 = var113.ojcVec2subLocalojcVec2(var113,thisRef.rA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2b49a1f1
            ojcRot.VOIDmulToOutojcRotojcVec2ojcVec2(local_14_REFERENCE,thisRef.m_localYAxisA,thisRef.m_ay);
            var var121 = local_16_REFERENCE.ojcVec2setojcVec2(local_16_REFERENCE,thisRef.d); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7b126da9
            var var123 = var121.ojcVec2addLocalojcVec2(var121,thisRef.rA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5e8e71ff
            var var125 = ojcVec2.FLOATcrossojcVec2ojcVec2(var123,thisRef.m_ay); // type is FLOAT value type is FLOAT
            thisRef.m_sAy = var125;
            var var128 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.rB,thisRef.m_ay); // type is FLOAT value type is FLOAT
            thisRef.m_sBy = var128;
            var var143 = (((local_2_FLOAT + local_3_FLOAT) + ((local_4_FLOAT * thisRef.m_sAy) * thisRef.m_sAy)) + ((local_5_FLOAT * thisRef.m_sBy) * thisRef.m_sBy)); // type is FLOAT value type is FLOAT
            thisRef.m_mass = var143;
            var var144 = thisRef.m_mass; // type is FLOAT value type is FLOAT
            if ((var144 <= 0.0)) {
                __label__ = 471;
                break $S_0;
            }
            __label__ = 461;
            }
        $M_471_461 : for(;;) switch (__label__) {
            case 461 :
            // NORMAL
                var var147 = (1.0 / thisRef.m_mass); // type is FLOAT value type is FLOAT
                thisRef.m_mass = var147;
                __label__ = 471;
                continue $M_471_461;
            case 471 :
            // NORMAL
                $S_471 : {
                // NORMAL
                    thisRef.m_springMass = 0.0;
                    thisRef.m_bias = 0.0;
                    thisRef.m_gamma = 0.0;
                    var var148 = thisRef.m_frequencyHz; // type is FLOAT value type is FLOAT
                    if ((var148 <= 0.0)) {
                        __label__ = 739;
                        break $S_471;
                    }
                    __label__ = 495;
                    }
                $M_739_495 : for(;;) switch (__label__) {
                    case 495 :
                    // NORMAL
                        $S_495 : {
                        // NORMAL
                            ojcRot.VOIDmulToOutojcRotojcVec2ojcVec2(local_14_REFERENCE,thisRef.m_localXAxisA,thisRef.m_ax);
                            var var155 = local_16_REFERENCE.ojcVec2setojcVec2(local_16_REFERENCE,thisRef.d); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@d33ae04
                            var var157 = var155.ojcVec2addLocalojcVec2(var155,thisRef.rA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6b93c07a
                            var var159 = ojcVec2.FLOATcrossojcVec2ojcVec2(var157,thisRef.m_ax); // type is FLOAT value type is FLOAT
                            thisRef.m_sAx = var159;
                            var var162 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.rB,thisRef.m_ax); // type is FLOAT value type is FLOAT
                            thisRef.m_sBx = var162;
                            local_17_FLOAT = (((local_2_FLOAT + local_3_FLOAT) + ((local_4_FLOAT * thisRef.m_sAx) * thisRef.m_sAx)) + ((local_5_FLOAT * thisRef.m_sBx) * thisRef.m_sBx)); // type is FLOAT value type is FLOAT
                            var var180 = local_17_FLOAT; // type is FLOAT value type is FLOAT
                            if ((var180 <= 0.0)) {
                                __label__ = 736;
                                break $S_495;
                            }
                            __label__ = 588;
                            }
                        $M_736_588 : for(;;) switch (__label__) {
                            case 736 :
                            // NORMAL
                                break $M_739_495;
                            case 588 :
                            // NORMAL
                                $S_588 : {
                                // NORMAL
                                    var var183 = (1.0 / local_17_FLOAT); // type is FLOAT value type is FLOAT
                                    thisRef.m_springMass = var183;
                                    var var186 = ojcVec2.FLOATdotojcVec2ojcVec2(thisRef.d,thisRef.m_ax); // type is FLOAT value type is FLOAT
                                    local_18_FLOAT = var186; // type is FLOAT value type is FLOAT
                                    var local_19_FLOAT = (6.2831855 * thisRef.m_frequencyHz); // type is FLOAT value type is FLOAT
                                    var local_20_FLOAT = (((2.0 * thisRef.m_springMass) * thisRef.m_dampingRatio) * local_19_FLOAT); // type is FLOAT value type is FLOAT
                                    local_21_FLOAT = ((thisRef.m_springMass * local_19_FLOAT) * local_19_FLOAT); // type is FLOAT value type is FLOAT
                                    local_22_FLOAT = data.step.dt; // type is FLOAT value type is FLOAT
                                    var var218 = (local_22_FLOAT * (local_20_FLOAT + (local_22_FLOAT * local_21_FLOAT))); // type is FLOAT value type is FLOAT
                                    thisRef.m_gamma = var218;
                                    var var219 = thisRef.m_gamma; // type is FLOAT value type is FLOAT
                                    if ((var219 <= 0.0)) {
                                        __label__ = 689;
                                        break $S_588;
                                    }
                                    __label__ = 679;
                                    }
                                $M_679_689 : for(;;) switch (__label__) {
                                    case 679 :
                                    // NORMAL
                                        var var222 = (1.0 / thisRef.m_gamma); // type is FLOAT value type is FLOAT
                                        thisRef.m_gamma = var222;
                                        __label__ = 689;
                                        continue $M_679_689;
                                    case 689 :
                                    // NORMAL
                                        $S_689 : {
                                        // NORMAL
                                            var var229 = (((local_18_FLOAT * local_22_FLOAT) * local_21_FLOAT) * thisRef.m_gamma); // type is FLOAT value type is FLOAT
                                            thisRef.m_bias = var229;
                                            var var232 = (local_17_FLOAT + thisRef.m_gamma); // type is FLOAT value type is FLOAT
                                            thisRef.m_springMass = var232;
                                            var var233 = thisRef.m_springMass; // type is FLOAT value type is FLOAT
                                            if ((var233 <= 0.0)) {
                                                __label__ = 736;
                                                continue $M_736_588;
                                            }
                                            }
                                        var var236 = (1.0 / thisRef.m_springMass); // type is FLOAT value type is FLOAT
                                        thisRef.m_springMass = var236;
                                        __label__ = 736;
                                        continue $M_736_588;
                                }
                        }
                    case 739 :
                    // NORMAL
                        thisRef.m_springImpulse = 0.0;
                        break $M_739_495;
                }
                $S_744 : {
                // NORMAL
                    var var237 = thisRef.m_enableMotor; // type is BOOLEAN value type is BOOLEAN
                    if ((var237 == 0)) {
                        __label__ = 782;
                        break $S_744;
                    }
                    __label__ = 751;
                    }
                $M_782_751 : for(;;) switch (__label__) {
                    case 751 :
                    // NORMAL
                        $S_751 : {
                        // NORMAL
                            var var240 = (local_4_FLOAT + local_5_FLOAT); // type is FLOAT value type is FLOAT
                            thisRef.m_motorMass = var240;
                            var var241 = thisRef.m_motorMass; // type is FLOAT value type is FLOAT
                            if ((var241 <= 0.0)) {
                                break $M_782_751;
                            }
                            }
                        var var244 = (1.0 / thisRef.m_motorMass); // type is FLOAT value type is FLOAT
                        thisRef.m_motorMass = var244;
                        break $M_782_751;
                    case 782 :
                    // NORMAL
                        thisRef.m_motorMass = 0.0;
                        thisRef.m_motorImpulse = 0.0;
                        break $M_782_751;
                }
                $S_792 : {
                // NORMAL
                    var var246 = data.step.warmStarting; // type is BOOLEAN value type is BOOLEAN
                    if ((var246 == 0)) {
                        __label__ = 1090;
                        break $S_792;
                    }
                    __label__ = 802;
                    }
                $M_1090_802 : for(;;) switch (__label__) {
                    case 1090 :
                    // NORMAL
                        thisRef.m_impulse = 0.0;
                        thisRef.m_springImpulse = 0.0;
                        thisRef.m_motorImpulse = 0.0;
                        break $M_1090_802;
                    case 802 :
                    // NORMAL
                        var var248 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3048784
                        var local_17_REFERENCE = var248; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2ea80f92
                        var var253 = (thisRef.m_impulse * data.step.dtRatio); // type is FLOAT value type is FLOAT
                        thisRef.m_impulse = var253;
                        var var257 = (thisRef.m_springImpulse * data.step.dtRatio); // type is FLOAT value type is FLOAT
                        thisRef.m_springImpulse = var257;
                        var var261 = (thisRef.m_motorImpulse * data.step.dtRatio); // type is FLOAT value type is FLOAT
                        thisRef.m_motorImpulse = var261;
                        var var262 = local_17_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2ea80f92
                        var var271 = ((thisRef.m_impulse * thisRef.m_ay.x) + (thisRef.m_springImpulse * thisRef.m_ax.x)); // type is FLOAT value type is FLOAT
                        var262.x = var271;
                        var var272 = local_17_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2ea80f92
                        var var281 = ((thisRef.m_impulse * thisRef.m_ay.y) + (thisRef.m_springImpulse * thisRef.m_ax.y)); // type is FLOAT value type is FLOAT
                        var272.y = var281;
                        local_18_FLOAT = (((thisRef.m_impulse * thisRef.m_sAy) + (thisRef.m_springImpulse * thisRef.m_sAx)) + thisRef.m_motorImpulse); // type is FLOAT value type is FLOAT
                        var local_19_FLOAT = (((thisRef.m_impulse * thisRef.m_sBy) + (thisRef.m_springImpulse * thisRef.m_sBx)) + thisRef.m_motorImpulse); // type is FLOAT value type is FLOAT
                        var var302 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2bb7340e
                        var var308 = (var302.x - (thisRef.m_invMassA * local_17_REFERENCE.x)); // type is FLOAT value type is FLOAT
                        var302.x = var308;
                        var var309 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2bb7340e
                        var var315 = (var309.y - (thisRef.m_invMassA * local_17_REFERENCE.y)); // type is FLOAT value type is FLOAT
                        var309.y = var315;
                        local_9_FLOAT = (local_9_FLOAT - (thisRef.m_invIA * local_18_FLOAT)); // type is FLOAT value type is FLOAT
                        var var322 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2a869524
                        var var328 = (var322.x + (thisRef.m_invMassB * local_17_REFERENCE.x)); // type is FLOAT value type is FLOAT
                        var322.x = var328;
                        var var329 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2a869524
                        var var335 = (var329.y + (thisRef.m_invMassB * local_17_REFERENCE.y)); // type is FLOAT value type is FLOAT
                        var329.y = var335;
                        local_13_FLOAT = (local_13_FLOAT + (thisRef.m_invIB * local_19_FLOAT)); // type is FLOAT value type is FLOAT
                        thisRef.pool.VOIDpushVec2INT(thisRef.pool,1);
                        break $M_1090_802;
                }
                thisRef.pool.VOIDpushRotINT(thisRef.pool,2);
                thisRef.pool.VOIDpushVec2INT(thisRef.pool,1);
                var var347 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
                var var348 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                var347.w = var348;
                var var351 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
                var var352 = local_13_FLOAT; // type is FLOAT value type is FLOAT
                var351.w = var352;
                return;
        }
    },

    VOIDsolveVelocityConstraintsojdSolverData : function(thisRef,data) {
        var __label__ = null;
        var local_2_FLOAT = thisRef.m_invMassA; // type is FLOAT value type is FLOAT
        var local_3_FLOAT = thisRef.m_invMassB; // type is FLOAT value type is FLOAT
        var local_4_FLOAT = thisRef.m_invIA; // type is FLOAT value type is FLOAT
        var local_5_FLOAT = thisRef.m_invIB; // type is FLOAT value type is FLOAT
        var var14 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
        var local_6_REFERENCE = var14.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@321f2e3
        var var19 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
        var local_7_FLOAT = var19.w; // type is FLOAT value type is FLOAT
        var var25 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
        var local_8_REFERENCE = var25.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2455637b
        var var30 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
        var local_9_FLOAT = var30.w; // type is FLOAT value type is FLOAT
        var var35 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@12e1f0e5
        var local_10_REFERENCE = var35; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3fa64cbd
        var var38 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@339c1740
        var local_11_REFERENCE = var38; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3c5df4f3
        var var40 = thisRef.m_ax; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@21264d45
        var var43 = local_10_REFERENCE.ojcVec2setojcVec2(local_10_REFERENCE,local_8_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2ce82e78
        var var45 = var43.ojcVec2subLocalojcVec2(var43,local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7f9d1ab2
        var var46 = ojcVec2.FLOATdotojcVec2ojcVec2(var40,var45); // type is FLOAT value type is FLOAT
        var local_12_FLOAT = ((var46 + (thisRef.m_sBx * local_9_FLOAT)) - (thisRef.m_sAx * local_7_FLOAT)); // type is FLOAT value type is FLOAT
        var local_13_FLOAT = ((-thisRef.m_springMass) * ((local_12_FLOAT + thisRef.m_bias) + (thisRef.m_gamma * thisRef.m_springImpulse))); // type is FLOAT value type is FLOAT
        var var71 = (thisRef.m_springImpulse + local_13_FLOAT); // type is FLOAT value type is FLOAT
        thisRef.m_springImpulse = var71;
        var var72 = local_11_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3c5df4f3
        var var76 = (local_13_FLOAT * thisRef.m_ax.x); // type is FLOAT value type is FLOAT
        var72.x = var76;
        var var77 = local_11_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3c5df4f3
        var var81 = (local_13_FLOAT * thisRef.m_ax.y); // type is FLOAT value type is FLOAT
        var77.y = var81;
        var local_14_FLOAT = (local_13_FLOAT * thisRef.m_sAx); // type is FLOAT value type is FLOAT
        var local_15_FLOAT = (local_13_FLOAT * thisRef.m_sBx); // type is FLOAT value type is FLOAT
        var var92 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2cb483de
        var var98 = (var92.x - (local_2_FLOAT * local_11_REFERENCE.x)); // type is FLOAT value type is FLOAT
        var92.x = var98;
        var var99 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2cb483de
        var var105 = (var99.y - (local_2_FLOAT * local_11_REFERENCE.y)); // type is FLOAT value type is FLOAT
        var99.y = var105;
        var local_7_FLOAT = (local_7_FLOAT - (local_4_FLOAT * local_14_FLOAT)); // type is FLOAT value type is FLOAT
        var var112 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3febbf68
        var var118 = (var112.x + (local_3_FLOAT * local_11_REFERENCE.x)); // type is FLOAT value type is FLOAT
        var112.x = var118;
        var var119 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3febbf68
        var var125 = (var119.y + (local_3_FLOAT * local_11_REFERENCE.y)); // type is FLOAT value type is FLOAT
        var119.y = var125;
        var local_9_FLOAT = (local_9_FLOAT + (local_5_FLOAT * local_15_FLOAT)); // type is FLOAT value type is FLOAT
        var local_12_FLOAT = ((local_9_FLOAT - local_7_FLOAT) - thisRef.m_motorSpeed); // type is FLOAT value type is FLOAT
        var local_13_FLOAT = ((-thisRef.m_motorMass) * local_12_FLOAT); // type is FLOAT value type is FLOAT
        var local_14_FLOAT = thisRef.m_motorImpulse; // type is FLOAT value type is FLOAT
        var local_15_FLOAT = (data.step.dt * thisRef.m_maxMotorTorque); // type is FLOAT value type is FLOAT
        var var156 = ojcMathUtils.FLOATclampFLOATFLOATFLOAT((thisRef.m_motorImpulse + local_13_FLOAT),(-local_15_FLOAT),local_15_FLOAT); // type is FLOAT value type is FLOAT
        thisRef.m_motorImpulse = var156;
        var local_13_FLOAT = (thisRef.m_motorImpulse - local_14_FLOAT); // type is FLOAT value type is FLOAT
        var local_7_FLOAT = (local_7_FLOAT - (local_4_FLOAT * local_13_FLOAT)); // type is FLOAT value type is FLOAT
        var local_9_FLOAT = (local_9_FLOAT + (local_5_FLOAT * local_13_FLOAT)); // type is FLOAT value type is FLOAT
        var var173 = thisRef.m_ay; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@521ddd03
        var var176 = local_10_REFERENCE.ojcVec2setojcVec2(local_10_REFERENCE,local_8_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@45c20578
        var var178 = var176.ojcVec2subLocalojcVec2(var176,local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4d60d46d
        var var179 = ojcVec2.FLOATdotojcVec2ojcVec2(var173,var178); // type is FLOAT value type is FLOAT
        var local_12_FLOAT = ((var179 + (thisRef.m_sBy * local_9_FLOAT)) - (thisRef.m_sAy * local_7_FLOAT)); // type is FLOAT value type is FLOAT
        var local_13_FLOAT = ((-thisRef.m_mass) * local_12_FLOAT); // type is FLOAT value type is FLOAT
        var var196 = (thisRef.m_impulse + local_13_FLOAT); // type is FLOAT value type is FLOAT
        thisRef.m_impulse = var196;
        var var197 = local_11_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3c5df4f3
        var var201 = (local_13_FLOAT * thisRef.m_ay.x); // type is FLOAT value type is FLOAT
        var197.x = var201;
        var var202 = local_11_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3c5df4f3
        var var206 = (local_13_FLOAT * thisRef.m_ay.y); // type is FLOAT value type is FLOAT
        var202.y = var206;
        var local_14_FLOAT = (local_13_FLOAT * thisRef.m_sAy); // type is FLOAT value type is FLOAT
        var local_15_FLOAT = (local_13_FLOAT * thisRef.m_sBy); // type is FLOAT value type is FLOAT
        var var215 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2cb483de
        var var221 = (var215.x - (local_2_FLOAT * local_11_REFERENCE.x)); // type is FLOAT value type is FLOAT
        var215.x = var221;
        var var222 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2cb483de
        var var228 = (var222.y - (local_2_FLOAT * local_11_REFERENCE.y)); // type is FLOAT value type is FLOAT
        var222.y = var228;
        var local_7_FLOAT = (local_7_FLOAT - (local_4_FLOAT * local_14_FLOAT)); // type is FLOAT value type is FLOAT
        var var235 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3febbf68
        var var241 = (var235.x + (local_3_FLOAT * local_11_REFERENCE.x)); // type is FLOAT value type is FLOAT
        var235.x = var241;
        var var242 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3febbf68
        var var248 = (var242.y + (local_3_FLOAT * local_11_REFERENCE.y)); // type is FLOAT value type is FLOAT
        var242.y = var248;
        var local_9_FLOAT = (local_9_FLOAT + (local_5_FLOAT * local_15_FLOAT)); // type is FLOAT value type is FLOAT
        thisRef.pool.VOIDpushVec2INT(thisRef.pool,2);
        var var258 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
        var var259 = local_7_FLOAT; // type is FLOAT value type is FLOAT
        var258.w = var259;
        var var262 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
        var var263 = local_9_FLOAT; // type is FLOAT value type is FLOAT
        var262.w = var263;
        return;
    },

    BOOLEANsolvePositionConstraintsojdSolverData : function(thisRef,data) {
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_10_FLOAT = null; // type is FLOAT # of inits = 1
        var local_14_FLOAT = null; // type is FLOAT # of inits = 2
        var local_13_FLOAT = null; // type is FLOAT # of inits = 1
        var local_9_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_11_FLOAT = null; // type is FLOAT # of inits = 1
        var local_3_FLOAT = null; // type is FLOAT # of inits = 2
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_5_FLOAT = null; // type is FLOAT # of inits = 2
        var local_12_FLOAT = null; // type is FLOAT # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var2 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_2_REFERENCE = var2.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3714fb49
            var var7 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_3_FLOAT = var7.a; // type is FLOAT value type is FLOAT
            var var13 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_4_REFERENCE = var13.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4db30f78
            var var18 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_5_FLOAT = var18.a; // type is FLOAT value type is FLOAT
            var var23 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5ca6afe3
            var local_6_REFERENCE = var23; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@692f34b4
            var var26 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7971446b
            var local_7_REFERENCE = var26; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2cec5cf2
            var var29 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@455c273b
            var local_8_REFERENCE = var29; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@55c621b0
            var var33 = local_6_REFERENCE.ojcRotsetFLOAT(local_6_REFERENCE,local_3_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@26e7757f
            var var36 = local_7_REFERENCE.ojcRotsetFLOAT(local_7_REFERENCE,local_5_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6822a69d
            var var37 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@692f34b4
            var var40 = local_8_REFERENCE.ojcVec2setojcVec2(local_8_REFERENCE,thisRef.m_localAnchorA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4c63315d
            var var42 = var40.ojcVec2subLocalojcVec2(var40,thisRef.m_localCenterA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@284c52c0
            ojcRot.VOIDmulToOutojcRotojcVec2ojcVec2(var37,var42,thisRef.rA);
            var var44 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2cec5cf2
            var var47 = local_8_REFERENCE.ojcVec2setojcVec2(local_8_REFERENCE,thisRef.m_localAnchorB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@359d863b
            var var49 = var47.ojcVec2subLocalojcVec2(var47,thisRef.m_localCenterB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@48f6d85b
            ojcRot.VOIDmulToOutojcRotojcVec2ojcVec2(var44,var49,thisRef.rB);
            var var53 = thisRef.d.ojcVec2setojcVec2(thisRef.d,local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1d4ae1c1
            var var55 = var53.ojcVec2subLocalojcVec2(var53,local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@575a6afa
            var var57 = var55.ojcVec2addLocalojcVec2(var55,thisRef.rB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@e2f8274
            var var59 = var57.ojcVec2subLocalojcVec2(var57,thisRef.rA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@70e5b7ea
            var var61 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3aeb04de
            local_9_REFERENCE = var61; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@206d691
            ojcRot.VOIDmulToOutojcRotojcVec2ojcVec2(local_6_REFERENCE,thisRef.m_localYAxisA,local_9_REFERENCE);
            var var68 = local_8_REFERENCE.ojcVec2setojcVec2(local_8_REFERENCE,thisRef.d); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3ee2a4c3
            var var70 = var68.ojcVec2addLocalojcVec2(var68,thisRef.rA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4cacad49
            var var72 = ojcVec2.FLOATcrossojcVec2ojcVec2(var70,local_9_REFERENCE); // type is FLOAT value type is FLOAT
            local_10_FLOAT = var72; // type is FLOAT value type is FLOAT
            var var77 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.rB,local_9_REFERENCE); // type is FLOAT value type is FLOAT
            local_11_FLOAT = var77; // type is FLOAT value type is FLOAT
            var var82 = ojcVec2.FLOATdotojcVec2ojcVec2(thisRef.d,local_9_REFERENCE); // type is FLOAT value type is FLOAT
            local_12_FLOAT = var82; // type is FLOAT value type is FLOAT
            local_13_FLOAT = (((thisRef.m_invMassA + thisRef.m_invMassB) + ((thisRef.m_invIA * thisRef.m_sAy) * thisRef.m_sAy)) + ((thisRef.m_invIB * thisRef.m_sBy) * thisRef.m_sBy)); // type is FLOAT value type is FLOAT
            var var102 = local_13_FLOAT; // type is FLOAT value type is FLOAT
            if ((var102 == 0.0)) {
                __label__ = 306;
                break $S_0;
            }
            __label__ = 295;
            }
        $M_306_295 : for(;;) switch (__label__) {
            case 295 :
            // NORMAL
                local_14_FLOAT = ((-local_12_FLOAT) / local_13_FLOAT); // type is FLOAT value type is FLOAT
                break $M_306_295;
            case 306 :
            // NORMAL
                local_14_FLOAT = 0.0; // type is FLOAT value type is FLOAT
                break $M_306_295;
        }
        $S_309 : {
        // NORMAL
            var var112 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@112b09d1
            var local_15_REFERENCE = var112; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@730432de
            var var114 = local_15_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@730432de
            var var118 = (local_14_FLOAT * local_9_REFERENCE.x); // type is FLOAT value type is FLOAT
            var114.x = var118;
            var var119 = local_15_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@730432de
            var var123 = (local_14_FLOAT * local_9_REFERENCE.y); // type is FLOAT value type is FLOAT
            var119.y = var123;
            var local_16_FLOAT = (local_14_FLOAT * local_10_FLOAT); // type is FLOAT value type is FLOAT
            var local_17_FLOAT = (local_14_FLOAT * local_11_FLOAT); // type is FLOAT value type is FLOAT
            var var134 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5e3f85de
            var var140 = (var134.x - (thisRef.m_invMassA * local_15_REFERENCE.x)); // type is FLOAT value type is FLOAT
            var134.x = var140;
            var var141 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5e3f85de
            var var147 = (var141.y - (thisRef.m_invMassA * local_15_REFERENCE.y)); // type is FLOAT value type is FLOAT
            var141.y = var147;
            local_3_FLOAT = (local_3_FLOAT - (thisRef.m_invIA * local_16_FLOAT)); // type is FLOAT value type is FLOAT
            var var154 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@510228b3
            var var160 = (var154.x + (thisRef.m_invMassB * local_15_REFERENCE.x)); // type is FLOAT value type is FLOAT
            var154.x = var160;
            var var161 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@510228b3
            var var167 = (var161.y + (thisRef.m_invMassB * local_15_REFERENCE.y)); // type is FLOAT value type is FLOAT
            var161.y = var167;
            local_5_FLOAT = (local_5_FLOAT + (thisRef.m_invIB * local_17_FLOAT)); // type is FLOAT value type is FLOAT
            thisRef.pool.VOIDpushVec2INT(thisRef.pool,3);
            thisRef.pool.VOIDpushRotINT(thisRef.pool,2);
            var var178 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            var var179 = local_3_FLOAT; // type is FLOAT value type is FLOAT
            var178.a = var179;
            var var182 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            var var183 = local_5_FLOAT; // type is FLOAT value type is FLOAT
            var182.a = var183;
            var var185 = ojcMathUtils.FLOATabsFLOAT(local_12_FLOAT); // type is FLOAT value type is FLOAT
            if ((var185 > 0.005)) {
                __label__ = 522;
                break $S_309;
            }
            __label__ = 518;
            }
        for(;;) switch (__label__) {
            case 518 :
            // NORMAL
                var var187 = 1; // type is INT value type is INT
                return var187;
            case 522 :
            // NORMAL
                var var187 = 0; // type is INT value type is INT
                return var187;
        }
    },

    classInitCheck : function() {
        if (!ojdjWheelJoint.__initialized) {
            ojdjWheelJoint.__initialized = true;
            var thePrototype = ojdjWheelJoint.Create.prototype;
            thePrototype.instanceOf = ojdjWheelJoint.instanceOf;
            thePrototype.ClassgetClass = ojdjWheelJoint.ClassgetClass;
            thePrototype.BOOLEANsolvePositionConstraintsojdSolverData = ojdjWheelJoint.BOOLEANsolvePositionConstraintsojdSolverData;
            thePrototype.VOIDsolveVelocityConstraintsojdSolverData = ojdjWheelJoint.VOIDsolveVelocityConstraintsojdSolverData;
            thePrototype.VOIDinitVelocityConstraintsojdSolverData = ojdjWheelJoint.VOIDinitVelocityConstraintsojdSolverData;
            thePrototype.BOOLEANgetCollideConnected = ojdjJoint.BOOLEANgetCollideConnected;
            thePrototype.ojdBodygetBodyB = ojdjJoint.ojdBodygetBodyB;
            thePrototype.ojdBodygetBodyA = ojdjJoint.ojdBodygetBodyA;
            thePrototype.ojdjJointTypegetType = ojdjJoint.ojdjJointTypegetType;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojdjJoint.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var ojdjWheelJointDef = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 164,
    __implementedTypes : [146,164,1],

    Create : function() {
        this.type = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.userData = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.bodyA = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.bodyB = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.collideConnected = false; // declared in org.jbox2d.dynamics.joints.JointDef
        this.localAnchorA = null; // declared in org.jbox2d.dynamics.joints.WheelJointDef
        this.localAnchorB = null; // declared in org.jbox2d.dynamics.joints.WheelJointDef
        this.localAxisA = null; // declared in org.jbox2d.dynamics.joints.WheelJointDef
        this.maxMotorTorque = 0; // declared in org.jbox2d.dynamics.joints.WheelJointDef
        this.motorSpeed = 0; // declared in org.jbox2d.dynamics.joints.WheelJointDef
        this.enableMotor = false; // declared in org.jbox2d.dynamics.joints.WheelJointDef
        this.frequencyHz = 0; // declared in org.jbox2d.dynamics.joints.WheelJointDef
        this.dampingRatio = 0; // declared in org.jbox2d.dynamics.joints.WheelJointDef
    },

    instanceOf : function(aType) {
        return ojdjWheelJointDef.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdjWheelJointDef;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        ojdjJointDef.VOIDinit(thisRef);
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var0);
        thisRef.localAnchorA = var0;
        var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var1);
        thisRef.localAnchorB = var1;
        var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var2);
        thisRef.localAxisA = var2;
        var var3 = ojdjJointType.WHEEL; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6a3a23db
        thisRef.type = var3;
        var var5 = thisRef.localAxisA.ojcVec2setFLOATFLOAT(thisRef.localAxisA,1.0,0.0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3821f2d0
        thisRef.enableMotor = 0;
        thisRef.maxMotorTorque = 0.0;
        thisRef.motorSpeed = 0.0;
        return;
    },

    classInitCheck : function() {
        if (!ojdjWheelJointDef.__initialized) {
            ojdjWheelJointDef.__initialized = true;
            var thePrototype = ojdjWheelJointDef.Create.prototype;
            thePrototype.instanceOf = ojdjWheelJointDef.instanceOf;
            thePrototype.ClassgetClass = ojdjWheelJointDef.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojdjJointDef.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var ojdjGearJoint = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 165,
    __implementedTypes : [165,114,1],
    $assertionsDisabled : false, // declared in org.jbox2d.dynamics.joints.Joint
    $assertionsDisabled : false, // declared in org.jbox2d.dynamics.joints.GearJoint

    Create : function() {
        this.pool = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_type = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_prev = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_next = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_bodyA = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_bodyB = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_collideConnected = false; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_islandFlag = false; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_userData = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_edgeA = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_edgeB = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_localAnchorA = null; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_localAnchorB = null; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_localAnchorC = null; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_localAnchorD = null; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_localAxisC = null; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_localAxisD = null; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_lcA = null; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_lcB = null; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_lcC = null; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_lcD = null; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_JvAC = null; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_JvBD = null; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_joint1 = null; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_joint2 = null; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_typeA = null; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_typeB = null; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_bodyC = null; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_referenceAngleA = 0; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_bodyD = null; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_referenceAngleB = 0; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_ratio = 0; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_constant = 0; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_impulse = 0; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_indexA = 0; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_indexB = 0; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_indexC = 0; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_indexD = 0; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_mA = 0; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_mB = 0; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_mC = 0; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_mD = 0; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_iA = 0; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_iB = 0; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_iC = 0; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_iD = 0; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_mass = 0; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_JwA = 0; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_JwC = 0; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_JwB = 0; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_JwD = 0; // declared in org.jbox2d.dynamics.joints.GearJoint
    },

    instanceOf : function(aType) {
        return ojdjGearJoint.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdjGearJoint;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    ojdjJointcreateojdWorldojdjJointDef : function(p0,p1) {
         return ojdjJoint.ojdjJointcreateojdWorldojdjJointDef(p0,p1);
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdjGearJoint.BOOLEANdesiredAssertionStatus(ojdjGearJoint); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_9_13 : for(;;) switch (__label__) {
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_9_13;
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_9_13;
        }
        ojdjGearJoint.$assertionsDisabled = var1;
        return;
    },

    VOIDinitojpIWorldPoolojdjGearJointDef : function(thisRef,argWorldPool,def) {
        var local_3_FLOAT = null; // type is FLOAT # of inits = 2
        var local_4_FLOAT = null; // type is FLOAT # of inits = 2
        var local_8_FLOAT = null; // type is FLOAT # of inits = 1
        var local_11_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_6_FLOAT = null; // type is FLOAT # of inits = 1
        var local_12_FLOAT = null; // type is FLOAT # of inits = 1
        var local_7_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_9_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_10_FLOAT = null; // type is FLOAT # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            ojdjJoint.VOIDinitojpIWorldPoolojdjJointDef(thisRef,argWorldPool,def);
            var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var0);
            thisRef.m_localAnchorA = var0;
            var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var1);
            thisRef.m_localAnchorB = var1;
            var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var2);
            thisRef.m_localAnchorC = var2;
            var var3 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var3);
            thisRef.m_localAnchorD = var3;
            var var4 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var4);
            thisRef.m_localAxisC = var4;
            var var5 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var5);
            thisRef.m_localAxisD = var5;
            var var6 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var6);
            thisRef.m_lcA = var6;
            var var7 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var7);
            thisRef.m_lcB = var7;
            var var8 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var8);
            thisRef.m_lcC = var8;
            var var9 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var9);
            thisRef.m_lcD = var9;
            var var10 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var10);
            thisRef.m_JvAC = var10;
            var var11 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var11);
            thisRef.m_JvBD = var11;
            var var12 = def.joint1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6f38a41b
            thisRef.m_joint1 = var12;
            var var13 = def.joint2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3b6ce591
            thisRef.m_joint2 = var13;
            var var15 = thisRef.m_joint1.ojdjJointTypegetType(thisRef.m_joint1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4378b852
            thisRef.m_typeA = var15;
            var var17 = thisRef.m_joint2.ojdjJointTypegetType(thisRef.m_joint2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@f75e8e0
            thisRef.m_typeB = var17;
            var var18 = ojdjGearJoint.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var18 != 0)) {
                __label__ = 210;
                break $S_0;
            }
            __label__ = 182;
            }
        $M_210_182 : for(;;) switch (__label__) {
            case 210 :
            // NORMAL
                $S_210 : {
                // NORMAL
                    var var24 = ojdjGearJoint.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                    if ((var24 != 0)) {
                        __label__ = 244;
                        break $S_210;
                    }
                    __label__ = 216;
                    }
                $M_244_216 : for(;;) switch (__label__) {
                    case 244 :
                    // NORMAL
                        $S_244 : {
                        // NORMAL
                            var var31 = thisRef.m_joint1.ojdBodygetBodyA(thisRef.m_joint1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@25c79d69
                            thisRef.m_bodyC = var31;
                            var var33 = thisRef.m_joint1.ojdBodygetBodyB(thisRef.m_joint1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@795bb42d
                            thisRef.m_bodyA = var33;
                            local_5_REFERENCE = thisRef.m_bodyA.m_xf; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7f67397c
                            local_6_FLOAT = thisRef.m_bodyA.m_sweep.a; // type is FLOAT value type is FLOAT
                            local_7_REFERENCE = thisRef.m_bodyC.m_xf; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5f75ec98
                            local_8_FLOAT = thisRef.m_bodyC.m_sweep.a; // type is FLOAT value type is FLOAT
                            var var50 = thisRef.m_typeA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@46401eca
                            var var51 = ojdjJointType.REVOLUTE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@629e30f3
                            if ((var50 != var51)) {
                                __label__ = 383;
                                break $S_244;
                            }
                            __label__ = 318;
                            }
                        $M_318_383 : for(;;) switch (__label__) {
                            case 383 :
                            // NORMAL
                                var var73 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@24744905
                                local_9_REFERENCE = var73; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6da56daa
                                var var75 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5495703f
                                var local_10_REFERENCE = var75; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@12659229
                                var var77 = def.joint1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1ef313e
                                local_11_REFERENCE = var77; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6a0e3aae
                                var var82 = thisRef.m_localAnchorC.ojcVec2setojcVec2(thisRef.m_localAnchorC,local_11_REFERENCE.m_localAnchorA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7556c67
                                var var86 = thisRef.m_localAnchorA.ojcVec2setojcVec2(thisRef.m_localAnchorA,local_11_REFERENCE.m_localAnchorB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@783ee03a
                                var var88 = local_11_REFERENCE.m_referenceAngle; // type is FLOAT value type is FLOAT
                                thisRef.m_referenceAngleA = var88;
                                var var92 = thisRef.m_localAxisC.ojcVec2setojcVec2(thisRef.m_localAxisC,local_11_REFERENCE.m_localXAxisA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4674d1ce
                                var local_12_REFERENCE = thisRef.m_localAnchorC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3e6a7eff
                                ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(local_5_REFERENCE.q,thisRef.m_localAnchorA,local_10_REFERENCE);
                                var var102 = local_10_REFERENCE.ojcVec2addLocalojcVec2(local_10_REFERENCE,local_5_REFERENCE.p); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@12701b01
                                var var105 = var102.ojcVec2subLocalojcVec2(var102,local_7_REFERENCE.p); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1d401645
                                ojcRot.VOIDmulTransUnsafeojcRotojcVec2ojcVec2(local_7_REFERENCE.q,local_10_REFERENCE,local_9_REFERENCE);
                                var var112 = local_9_REFERENCE.ojcVec2subLocalojcVec2(local_9_REFERENCE,local_12_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7d5a4e82
                                var var114 = ojcVec2.FLOATdotojcVec2ojcVec2(var112,thisRef.m_localAxisC); // type is FLOAT value type is FLOAT
                                local_3_FLOAT = var114; // type is FLOAT value type is FLOAT
                                thisRef.pool.VOIDpushVec2INT(thisRef.pool,2);
                                break $M_318_383;
                            case 318 :
                            // NORMAL
                                var var52 = def.joint1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@10aa4a50
                                local_9_REFERENCE = var52; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@54f0cd68
                                var var57 = thisRef.m_localAnchorC.ojcVec2setojcVec2(thisRef.m_localAnchorC,local_9_REFERENCE.m_localAnchorA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@290e357
                                var var61 = thisRef.m_localAnchorA.ojcVec2setojcVec2(thisRef.m_localAnchorA,local_9_REFERENCE.m_localAnchorB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1f7f2f7e
                                var var63 = local_9_REFERENCE.m_referenceAngle; // type is FLOAT value type is FLOAT
                                thisRef.m_referenceAngleA = var63;
                                thisRef.m_localAxisC.VOIDsetZero(thisRef.m_localAxisC);
                                local_3_FLOAT = ((local_6_FLOAT - local_8_FLOAT) - thisRef.m_referenceAngleA); // type is FLOAT value type is FLOAT
                                break $M_318_383;
                        }
                        $S_538 : {
                        // NORMAL
                            var var118 = thisRef.m_joint2.ojdBodygetBodyA(thisRef.m_joint2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@307e5c4d
                            thisRef.m_bodyD = var118;
                            var var120 = thisRef.m_joint2.ojdBodygetBodyB(thisRef.m_joint2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@724468d8
                            thisRef.m_bodyB = var120;
                            local_9_REFERENCE = thisRef.m_bodyB.m_xf; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@774ba79c
                            local_10_FLOAT = thisRef.m_bodyB.m_sweep.a; // type is FLOAT value type is FLOAT
                            local_11_REFERENCE = thisRef.m_bodyD.m_xf; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@11a972d4
                            local_12_FLOAT = thisRef.m_bodyD.m_sweep.a; // type is FLOAT value type is FLOAT
                            var var135 = thisRef.m_typeB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@53f7c898
                            var var136 = ojdjJointType.REVOLUTE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2246896
                            if ((var135 != var136)) {
                                __label__ = 678;
                                break $S_538;
                            }
                            __label__ = 612;
                            }
                        $M_678_612 : for(;;) switch (__label__) {
                            case 612 :
                            // NORMAL
                                var var184 = def.joint2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@28794809
                                var local_13_REFERENCE = var184; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@729cb000
                                var var188 = thisRef.m_localAnchorD.ojcVec2setojcVec2(thisRef.m_localAnchorD,local_13_REFERENCE.m_localAnchorA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1fc205c3
                                var var192 = thisRef.m_localAnchorB.ojcVec2setojcVec2(thisRef.m_localAnchorB,local_13_REFERENCE.m_localAnchorB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3e03ae75
                                var var194 = local_13_REFERENCE.m_referenceAngle; // type is FLOAT value type is FLOAT
                                thisRef.m_referenceAngleB = var194;
                                thisRef.m_localAxisD.VOIDsetZero(thisRef.m_localAxisD);
                                local_4_FLOAT = ((local_10_FLOAT - local_12_FLOAT) - thisRef.m_referenceAngleB); // type is FLOAT value type is FLOAT
                                break $M_678_612;
                            case 678 :
                            // NORMAL
                                var var138 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5c5890bc
                                var local_13_REFERENCE = var138; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4bd33787
                                var var141 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@44b0df23
                                var local_14_REFERENCE = var141; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@67e3a1c6
                                var var143 = def.joint2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7fa600f6
                                var local_15_REFERENCE = var143; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2d9b7f8a
                                var var148 = thisRef.m_localAnchorD.ojcVec2setojcVec2(thisRef.m_localAnchorD,local_15_REFERENCE.m_localAnchorA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6f10e4dd
                                var var152 = thisRef.m_localAnchorB.ojcVec2setojcVec2(thisRef.m_localAnchorB,local_15_REFERENCE.m_localAnchorB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@15879568
                                var var154 = local_15_REFERENCE.m_referenceAngle; // type is FLOAT value type is FLOAT
                                thisRef.m_referenceAngleB = var154;
                                var var158 = thisRef.m_localAxisD.ojcVec2setojcVec2(thisRef.m_localAxisD,local_15_REFERENCE.m_localXAxisA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5ae9869e
                                var local_16_REFERENCE = thisRef.m_localAnchorD; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2cf8d566
                                ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(local_9_REFERENCE.q,thisRef.m_localAnchorB,local_14_REFERENCE);
                                var var168 = local_14_REFERENCE.ojcVec2addLocalojcVec2(local_14_REFERENCE,local_9_REFERENCE.p); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4426fa28
                                var var171 = var168.ojcVec2subLocalojcVec2(var168,local_11_REFERENCE.p); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6d230b11
                                ojcRot.VOIDmulTransUnsafeojcRotojcVec2ojcVec2(local_11_REFERENCE.q,local_14_REFERENCE,local_13_REFERENCE);
                                var var178 = local_13_REFERENCE.ojcVec2subLocalojcVec2(local_13_REFERENCE,local_16_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7b68ad5d
                                var var180 = ojcVec2.FLOATdotojcVec2ojcVec2(var178,thisRef.m_localAxisD); // type is FLOAT value type is FLOAT
                                local_4_FLOAT = var180; // type is FLOAT value type is FLOAT
                                thisRef.pool.VOIDpushVec2INT(thisRef.pool,2);
                                break $M_678_612;
                        }
                        var var202 = def.ratio; // type is FLOAT value type is FLOAT
                        thisRef.m_ratio = var202;
                        var var207 = (local_3_FLOAT + (thisRef.m_ratio * local_4_FLOAT)); // type is FLOAT value type is FLOAT
                        thisRef.m_constant = var207;
                        thisRef.m_impulse = 0.0;
                        return;
                    case 216 :
                    // NORMAL
                        $S_216 : {
                        // NORMAL
                            var var25 = thisRef.m_typeB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@115104b3
                            var var26 = ojdjJointType.REVOLUTE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@62d55b0b
                            if ((var25 == var26)) {
                                __label__ = 244;
                                continue $M_244_216;
                            }
                            }
                        $S_226 : {
                        // NORMAL
                            var var27 = thisRef.m_typeB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@17dbbfc3
                            var var28 = ojdjJointType.PRISMATIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2967ea20
                            if ((var27 == var28)) {
                                __label__ = 244;
                                continue $M_244_216;
                            }
                            }
                        var var29 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                        jlAssertionError.VOIDinit(var29);
                        throw var29;
                }
            case 182 :
            // NORMAL
                $S_182 : {
                // NORMAL
                    var var19 = thisRef.m_typeA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@300a0723
                    var var20 = ojdjJointType.REVOLUTE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@784f0f2a
                    if ((var19 == var20)) {
                        __label__ = 210;
                        continue $M_210_182;
                    }
                    }
                $S_192 : {
                // NORMAL
                    var var21 = thisRef.m_typeA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@32208247
                    var var22 = ojdjJointType.PRISMATIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@240058c9
                    if ((var21 == var22)) {
                        __label__ = 210;
                        continue $M_210_182;
                    }
                    }
                var var23 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var23);
                throw var23;
        }
    },

    VOIDinitVelocityConstraintsojdSolverData : function(thisRef,data) {
        var local_17_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_14_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_9_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_4_FLOAT = null; // type is FLOAT # of inits = 2
        var local_12_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_10_FLOAT = null; // type is FLOAT # of inits = 2
        var var273 = null; // type is FLOAT # of inits = 2
        var local_15_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_13_FLOAT = null; // type is FLOAT # of inits = 2
        var local_16_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_18_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_7_FLOAT = null; // type is FLOAT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var1 = thisRef.m_bodyA.m_islandIndex; // type is INT value type is INT
            thisRef.m_indexA = var1;
            var var3 = thisRef.m_bodyB.m_islandIndex; // type is INT value type is INT
            thisRef.m_indexB = var3;
            var var5 = thisRef.m_bodyC.m_islandIndex; // type is INT value type is INT
            thisRef.m_indexC = var5;
            var var7 = thisRef.m_bodyD.m_islandIndex; // type is INT value type is INT
            thisRef.m_indexD = var7;
            var var12 = thisRef.m_lcA.ojcVec2setojcVec2(thisRef.m_lcA,thisRef.m_bodyA.m_sweep.localCenter); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4b7d8ae4
            var var17 = thisRef.m_lcB.ojcVec2setojcVec2(thisRef.m_lcB,thisRef.m_bodyB.m_sweep.localCenter); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2997694d
            var var22 = thisRef.m_lcC.ojcVec2setojcVec2(thisRef.m_lcC,thisRef.m_bodyC.m_sweep.localCenter); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2654a902
            var var27 = thisRef.m_lcD.ojcVec2setojcVec2(thisRef.m_lcD,thisRef.m_bodyD.m_sweep.localCenter); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4a9c885e
            var var29 = thisRef.m_bodyA.m_invMass; // type is FLOAT value type is FLOAT
            thisRef.m_mA = var29;
            var var31 = thisRef.m_bodyB.m_invMass; // type is FLOAT value type is FLOAT
            thisRef.m_mB = var31;
            var var33 = thisRef.m_bodyC.m_invMass; // type is FLOAT value type is FLOAT
            thisRef.m_mC = var33;
            var var35 = thisRef.m_bodyD.m_invMass; // type is FLOAT value type is FLOAT
            thisRef.m_mD = var35;
            var var37 = thisRef.m_bodyA.m_invI; // type is FLOAT value type is FLOAT
            thisRef.m_iA = var37;
            var var39 = thisRef.m_bodyB.m_invI; // type is FLOAT value type is FLOAT
            thisRef.m_iB = var39;
            var var41 = thisRef.m_bodyC.m_invI; // type is FLOAT value type is FLOAT
            thisRef.m_iC = var41;
            var var43 = thisRef.m_bodyD.m_invI; // type is FLOAT value type is FLOAT
            thisRef.m_iD = var43;
            var var46 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            var local_2_FLOAT = var46.a; // type is FLOAT value type is FLOAT
            var var52 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_3_REFERENCE = var52.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6d910143
            var var57 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_4_FLOAT = var57.w; // type is FLOAT value type is FLOAT
            var var63 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            var local_5_FLOAT = var63.a; // type is FLOAT value type is FLOAT
            var var69 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_6_REFERENCE = var69.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7fded0bd
            var var74 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_7_FLOAT = var74.w; // type is FLOAT value type is FLOAT
            var var80 = data.positions.data[thisRef.m_indexC]; // type is REFERENCE value type is REFERENCE
            var local_8_FLOAT = var80.a; // type is FLOAT value type is FLOAT
            var var86 = data.velocities.data[thisRef.m_indexC]; // type is REFERENCE value type is REFERENCE
            local_9_REFERENCE = var86.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7cc16afd
            var var91 = data.velocities.data[thisRef.m_indexC]; // type is REFERENCE value type is REFERENCE
            local_10_FLOAT = var91.w; // type is FLOAT value type is FLOAT
            var var97 = data.positions.data[thisRef.m_indexD]; // type is REFERENCE value type is REFERENCE
            var local_11_FLOAT = var97.a; // type is FLOAT value type is FLOAT
            var var103 = data.velocities.data[thisRef.m_indexD]; // type is REFERENCE value type is REFERENCE
            local_12_REFERENCE = var103.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@52b1d343
            var var108 = data.velocities.data[thisRef.m_indexD]; // type is REFERENCE value type is REFERENCE
            local_13_FLOAT = var108.w; // type is FLOAT value type is FLOAT
            var var113 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@37cf5b4f
            local_14_REFERENCE = var113; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@651ee1d5
            var var116 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3e9d2e33
            local_15_REFERENCE = var116; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@36517812
            var var119 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@49fc2d9f
            local_16_REFERENCE = var119; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@77dd9135
            var var122 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@150bc428
            local_17_REFERENCE = var122; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7bb70a89
            var var126 = local_14_REFERENCE.ojcRotsetFLOAT(local_14_REFERENCE,local_2_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@58d3e0e5
            var var129 = local_15_REFERENCE.ojcRotsetFLOAT(local_15_REFERENCE,local_5_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@f68b17a
            var var132 = local_16_REFERENCE.ojcRotsetFLOAT(local_16_REFERENCE,local_8_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2750f5dd
            var var135 = local_17_REFERENCE.ojcRotsetFLOAT(local_17_REFERENCE,local_11_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6cb14f9b
            thisRef.m_mass = 0.0;
            var var137 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2ba25e20
            local_18_REFERENCE = var137; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@69b54c63
            var var139 = thisRef.m_typeA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@610bc94f
            var var140 = ojdjJointType.REVOLUTE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@41d536ae
            if ((var139 != var140)) {
                __label__ = 509;
                break $S_0;
            }
            __label__ = 471;
            }
        $M_509_471 : for(;;) switch (__label__) {
            case 471 :
            // NORMAL
                thisRef.m_JvAC.VOIDsetZero(thisRef.m_JvAC);
                thisRef.m_JwA = 1.0;
                thisRef.m_JwC = 1.0;
                var var193 = (thisRef.m_mass + (thisRef.m_iA + thisRef.m_iC)); // type is FLOAT value type is FLOAT
                thisRef.m_mass = var193;
                break $M_509_471;
            case 509 :
            // NORMAL
                var var142 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@27fe7498
                var local_19_REFERENCE = var142; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1e147d19
                var var145 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@21ea9e25
                var local_20_REFERENCE = var145; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@49e2bcf0
                ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(local_16_REFERENCE,thisRef.m_localAxisC,thisRef.m_JvAC);
                var var150 = local_16_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@77dd9135
                var var153 = local_18_REFERENCE.ojcVec2setojcVec2(local_18_REFERENCE,thisRef.m_localAnchorC); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1d6c5be0
                var var155 = var153.ojcVec2subLocalojcVec2(var153,thisRef.m_lcC); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@20ad01e1
                ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var150,var155,local_19_REFERENCE);
                var var157 = local_14_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@651ee1d5
                var var160 = local_18_REFERENCE.ojcVec2setojcVec2(local_18_REFERENCE,thisRef.m_localAnchorA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@55c3b867
                var var162 = var160.ojcVec2subLocalojcVec2(var160,thisRef.m_lcA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@99a9b13
                ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var157,var162,local_20_REFERENCE);
                var var166 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_19_REFERENCE,thisRef.m_JvAC); // type is FLOAT value type is FLOAT
                thisRef.m_JwC = var166;
                var var169 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_20_REFERENCE,thisRef.m_JvAC); // type is FLOAT value type is FLOAT
                thisRef.m_JwA = var169;
                var var186 = (thisRef.m_mass + (((thisRef.m_mC + thisRef.m_mA) + ((thisRef.m_iC * thisRef.m_JwC) * thisRef.m_JwC)) + ((thisRef.m_iA * thisRef.m_JwA) * thisRef.m_JwA))); // type is FLOAT value type is FLOAT
                thisRef.m_mass = var186;
                thisRef.pool.VOIDpushVec2INT(thisRef.pool,2);
                break $M_509_471;
        }
        $S_674 : {
        // NORMAL
            var var194 = thisRef.m_typeB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@76d6629b
            var var195 = ojdjJointType.REVOLUTE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3ebcc7a9
            if ((var194 != var195)) {
                __label__ = 738;
                break $S_674;
            }
            __label__ = 684;
            }
        $M_684_738 : for(;;) switch (__label__) {
            case 738 :
            // NORMAL
                var var209 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@76745099
                var local_19_REFERENCE = var209; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2b6b1f47
                var var211 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6e6c620b
                var local_20_REFERENCE = var211; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@36b571e0
                var var213 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@62910f37
                var local_21_REFERENCE = var213; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1173b505
                ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(local_17_REFERENCE,thisRef.m_localAxisD,local_19_REFERENCE);
                var var218 = local_17_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7bb70a89
                var var221 = local_18_REFERENCE.ojcVec2setojcVec2(local_18_REFERENCE,thisRef.m_localAnchorD); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1c82f11a
                var var223 = var221.ojcVec2subLocalojcVec2(var221,thisRef.m_lcD); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1a5a91b
                ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var218,var223,local_20_REFERENCE);
                var var225 = local_15_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@36517812
                var var228 = local_18_REFERENCE.ojcVec2setojcVec2(local_18_REFERENCE,thisRef.m_localAnchorB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6ba7e6af
                var var230 = var228.ojcVec2subLocalojcVec2(var228,thisRef.m_lcB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@67f0ad43
                ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var225,var230,local_21_REFERENCE);
                var var234 = thisRef.m_JvBD.ojcVec2setojcVec2(thisRef.m_JvBD,local_19_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6c719a86
                var var236 = var234.ojcVec2mulLocalFLOAT(var234,thisRef.m_ratio); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@40300b62
                var var237 = thisRef.m_ratio; // type is FLOAT value type is FLOAT
                var var240 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_20_REFERENCE,local_19_REFERENCE); // type is FLOAT value type is FLOAT
                var var241 = (var237 * var240); // type is FLOAT value type is FLOAT
                thisRef.m_JwD = var241;
                var var242 = thisRef.m_ratio; // type is FLOAT value type is FLOAT
                var var245 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_21_REFERENCE,local_19_REFERENCE); // type is FLOAT value type is FLOAT
                var var246 = (var242 * var245); // type is FLOAT value type is FLOAT
                thisRef.m_JwB = var246;
                var var267 = (thisRef.m_mass + ((((thisRef.m_ratio * thisRef.m_ratio) * (thisRef.m_mD + thisRef.m_mB)) + ((thisRef.m_iD * thisRef.m_JwD) * thisRef.m_JwD)) + ((thisRef.m_iB * thisRef.m_JwB) * thisRef.m_JwB))); // type is FLOAT value type is FLOAT
                thisRef.m_mass = var267;
                thisRef.pool.VOIDpushVec2INT(thisRef.pool,3);
                break $M_684_738;
            case 684 :
            // NORMAL
                thisRef.m_JvBD.VOIDsetZero(thisRef.m_JvBD);
                var var197 = thisRef.m_ratio; // type is FLOAT value type is FLOAT
                thisRef.m_JwB = var197;
                var var198 = thisRef.m_ratio; // type is FLOAT value type is FLOAT
                thisRef.m_JwD = var198;
                var var207 = (thisRef.m_mass + ((thisRef.m_ratio * thisRef.m_ratio) * (thisRef.m_iB + thisRef.m_iD))); // type is FLOAT value type is FLOAT
                thisRef.m_mass = var207;
                break $M_684_738;
        }
        $S_945 : {
        // NORMAL
            var var269 = thisRef.m_mass; // type is FLOAT value type is FLOAT
            if ((var269 <= 0.0)) {
                __label__ = 964;
                break $S_945;
            }
            __label__ = 955;
            }
        $M_955_964 : for(;;) switch (__label__) {
            case 955 :
            // NORMAL
                var273 = (1.0 / thisRef.m_mass); // type is FLOAT value type is FLOAT
                break $M_955_964;
            case 964 :
            // NORMAL
                var273 = 0.0; // type is FLOAT value type is FLOAT
                break $M_955_964;
        }
        $S_965 : {
        // NORMAL
            thisRef.m_mass = var273;
            var var275 = data.step.warmStarting; // type is BOOLEAN value type is BOOLEAN
            if ((var275 == 0)) {
                __label__ = 1271;
                break $S_965;
            }
            __label__ = 978;
            }
        $M_978_1271 : for(;;) switch (__label__) {
            case 978 :
            // NORMAL
                var var276 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@38a5ea64
                var var284 = (var276.x + ((thisRef.m_mA * thisRef.m_impulse) * thisRef.m_JvAC.x)); // type is FLOAT value type is FLOAT
                var276.x = var284;
                var var285 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@38a5ea64
                var var293 = (var285.y + ((thisRef.m_mA * thisRef.m_impulse) * thisRef.m_JvAC.y)); // type is FLOAT value type is FLOAT
                var285.y = var293;
                local_4_FLOAT = (local_4_FLOAT + ((thisRef.m_iA * thisRef.m_impulse) * thisRef.m_JwA)); // type is FLOAT value type is FLOAT
                var var302 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@489371fd
                var var310 = (var302.x + ((thisRef.m_mB * thisRef.m_impulse) * thisRef.m_JvBD.x)); // type is FLOAT value type is FLOAT
                var302.x = var310;
                var var311 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@489371fd
                var var319 = (var311.y + ((thisRef.m_mB * thisRef.m_impulse) * thisRef.m_JvBD.y)); // type is FLOAT value type is FLOAT
                var311.y = var319;
                local_7_FLOAT = (local_7_FLOAT + ((thisRef.m_iB * thisRef.m_impulse) * thisRef.m_JwB)); // type is FLOAT value type is FLOAT
                var var328 = local_9_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3b1f4a5f
                var var336 = (var328.x - ((thisRef.m_mC * thisRef.m_impulse) * thisRef.m_JvAC.x)); // type is FLOAT value type is FLOAT
                var328.x = var336;
                var var337 = local_9_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3b1f4a5f
                var var345 = (var337.y - ((thisRef.m_mC * thisRef.m_impulse) * thisRef.m_JvAC.y)); // type is FLOAT value type is FLOAT
                var337.y = var345;
                local_10_FLOAT = (local_10_FLOAT - ((thisRef.m_iC * thisRef.m_impulse) * thisRef.m_JwC)); // type is FLOAT value type is FLOAT
                var var354 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@727fd334
                var var362 = (var354.x - ((thisRef.m_mD * thisRef.m_impulse) * thisRef.m_JvBD.x)); // type is FLOAT value type is FLOAT
                var354.x = var362;
                var var363 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@727fd334
                var var371 = (var363.y - ((thisRef.m_mD * thisRef.m_impulse) * thisRef.m_JvBD.y)); // type is FLOAT value type is FLOAT
                var363.y = var371;
                local_13_FLOAT = (local_13_FLOAT - ((thisRef.m_iD * thisRef.m_impulse) * thisRef.m_JwD)); // type is FLOAT value type is FLOAT
                break $M_978_1271;
            case 1271 :
            // NORMAL
                thisRef.m_impulse = 0.0;
                break $M_978_1271;
        }
        thisRef.pool.VOIDpushVec2INT(thisRef.pool,1);
        thisRef.pool.VOIDpushRotINT(thisRef.pool,4);
        var var384 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
        var var385 = local_4_FLOAT; // type is FLOAT value type is FLOAT
        var384.w = var385;
        var var388 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
        var var389 = local_7_FLOAT; // type is FLOAT value type is FLOAT
        var388.w = var389;
        var var392 = data.velocities.data[thisRef.m_indexC]; // type is REFERENCE value type is REFERENCE
        var var393 = local_10_FLOAT; // type is FLOAT value type is FLOAT
        var392.w = var393;
        var var396 = data.velocities.data[thisRef.m_indexD]; // type is REFERENCE value type is REFERENCE
        var var397 = local_13_FLOAT; // type is FLOAT value type is FLOAT
        var396.w = var397;
        return;
    },

    VOIDsolveVelocityConstraintsojdSolverData : function(thisRef,data) {
        var __label__ = null;
        var var2 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
        var local_2_REFERENCE = var2.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@71da6685
        var var7 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
        var local_3_FLOAT = var7.w; // type is FLOAT value type is FLOAT
        var var13 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
        var local_4_REFERENCE = var13.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@17ea3088
        var var18 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
        var local_5_FLOAT = var18.w; // type is FLOAT value type is FLOAT
        var var24 = data.velocities.data[thisRef.m_indexC]; // type is REFERENCE value type is REFERENCE
        var local_6_REFERENCE = var24.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6c006f73
        var var29 = data.velocities.data[thisRef.m_indexC]; // type is REFERENCE value type is REFERENCE
        var local_7_FLOAT = var29.w; // type is FLOAT value type is FLOAT
        var var35 = data.velocities.data[thisRef.m_indexD]; // type is REFERENCE value type is REFERENCE
        var local_8_REFERENCE = var35.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6fd0f5cc
        var var40 = data.velocities.data[thisRef.m_indexD]; // type is REFERENCE value type is REFERENCE
        var local_9_FLOAT = var40.w; // type is FLOAT value type is FLOAT
        var var45 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4d1c58fd
        var local_10_REFERENCE = var45; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@b344fa6
        var var48 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@64a0c244
        var local_11_REFERENCE = var48; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@c363589
        var var50 = thisRef.m_JvAC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@23425f42
        var var53 = local_10_REFERENCE.ojcVec2setojcVec2(local_10_REFERENCE,local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@aa27df3
        var var55 = var53.ojcVec2subLocalojcVec2(var53,local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@68f22c01
        var var56 = ojcVec2.FLOATdotojcVec2ojcVec2(var50,var55); // type is FLOAT value type is FLOAT
        var var57 = thisRef.m_JvBD; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@55d5d6eb
        var var60 = local_11_REFERENCE.ojcVec2setojcVec2(local_11_REFERENCE,local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@64dc2b5c
        var var62 = var60.ojcVec2subLocalojcVec2(var60,local_8_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7d889fd1
        var var63 = ojcVec2.FLOATdotojcVec2ojcVec2(var57,var62); // type is FLOAT value type is FLOAT
        var local_12_FLOAT = (var56 + var63); // type is FLOAT value type is FLOAT
        var local_12_FLOAT = (local_12_FLOAT + (((thisRef.m_JwA * local_3_FLOAT) - (thisRef.m_JwC * local_7_FLOAT)) + ((thisRef.m_JwB * local_5_FLOAT) - (thisRef.m_JwD * local_9_FLOAT)))); // type is FLOAT value type is FLOAT
        thisRef.pool.VOIDpushVec2INT(thisRef.pool,2);
        var local_13_FLOAT = ((-thisRef.m_mass) * local_12_FLOAT); // type is FLOAT value type is FLOAT
        var var94 = (thisRef.m_impulse + local_13_FLOAT); // type is FLOAT value type is FLOAT
        thisRef.m_impulse = var94;
        var var95 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4633645
        var var103 = (var95.x + ((thisRef.m_mA * local_13_FLOAT) * thisRef.m_JvAC.x)); // type is FLOAT value type is FLOAT
        var95.x = var103;
        var var104 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4633645
        var var112 = (var104.y + ((thisRef.m_mA * local_13_FLOAT) * thisRef.m_JvAC.y)); // type is FLOAT value type is FLOAT
        var104.y = var112;
        var local_3_FLOAT = (local_3_FLOAT + ((thisRef.m_iA * local_13_FLOAT) * thisRef.m_JwA)); // type is FLOAT value type is FLOAT
        var var121 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7ffacaac
        var var129 = (var121.x + ((thisRef.m_mB * local_13_FLOAT) * thisRef.m_JvBD.x)); // type is FLOAT value type is FLOAT
        var121.x = var129;
        var var130 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7ffacaac
        var var138 = (var130.y + ((thisRef.m_mB * local_13_FLOAT) * thisRef.m_JvBD.y)); // type is FLOAT value type is FLOAT
        var130.y = var138;
        var local_5_FLOAT = (local_5_FLOAT + ((thisRef.m_iB * local_13_FLOAT) * thisRef.m_JwB)); // type is FLOAT value type is FLOAT
        var var147 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7a7988c4
        var var155 = (var147.x - ((thisRef.m_mC * local_13_FLOAT) * thisRef.m_JvAC.x)); // type is FLOAT value type is FLOAT
        var147.x = var155;
        var var156 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7a7988c4
        var var164 = (var156.y - ((thisRef.m_mC * local_13_FLOAT) * thisRef.m_JvAC.y)); // type is FLOAT value type is FLOAT
        var156.y = var164;
        var local_7_FLOAT = (local_7_FLOAT - ((thisRef.m_iC * local_13_FLOAT) * thisRef.m_JwC)); // type is FLOAT value type is FLOAT
        var var173 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@43b6e64d
        var var181 = (var173.x - ((thisRef.m_mD * local_13_FLOAT) * thisRef.m_JvBD.x)); // type is FLOAT value type is FLOAT
        var173.x = var181;
        var var182 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@43b6e64d
        var var190 = (var182.y - ((thisRef.m_mD * local_13_FLOAT) * thisRef.m_JvBD.y)); // type is FLOAT value type is FLOAT
        var182.y = var190;
        var local_9_FLOAT = (local_9_FLOAT - ((thisRef.m_iD * local_13_FLOAT) * thisRef.m_JwD)); // type is FLOAT value type is FLOAT
        var var201 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
        var var202 = local_3_FLOAT; // type is FLOAT value type is FLOAT
        var201.w = var202;
        var var205 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
        var var206 = local_5_FLOAT; // type is FLOAT value type is FLOAT
        var205.w = var206;
        var var209 = data.velocities.data[thisRef.m_indexC]; // type is REFERENCE value type is REFERENCE
        var var210 = local_7_FLOAT; // type is FLOAT value type is FLOAT
        var209.w = var210;
        var var213 = data.velocities.data[thisRef.m_indexD]; // type is REFERENCE value type is REFERENCE
        var var214 = local_9_FLOAT; // type is FLOAT value type is FLOAT
        var213.w = var214;
        return;
    },

    BOOLEANsolvePositionConstraintsojdSolverData : function(thisRef,data) {
        var local_10_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_26_FLOAT = null; // type is FLOAT # of inits = 2
        var local_21_FLOAT = null; // type is FLOAT # of inits = 2
        var local_17_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_18_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_22_FLOAT = null; // type is FLOAT # of inits = 2
        var local_5_FLOAT = null; // type is FLOAT # of inits = 2
        var local_7_FLOAT = null; // type is FLOAT # of inits = 2
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_11_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_3_FLOAT = null; // type is FLOAT # of inits = 2
        var local_13_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_20_FLOAT = null; // type is FLOAT # of inits = 2
        var local_9_FLOAT = null; // type is FLOAT # of inits = 2
        var local_19_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_8_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_16_FLOAT = null; // type is FLOAT # of inits = 2
        var local_24_FLOAT = null; // type is FLOAT # of inits = 5
        var local_23_FLOAT = null; // type is FLOAT # of inits = 2
        var local_12_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_15_FLOAT = null; // type is FLOAT # of inits = 2
        var local_25_FLOAT = null; // type is FLOAT # of inits = 1
        var local_14_FLOAT = null; // type is FLOAT # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var2 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_2_REFERENCE = var2.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3a69fe83
            var var7 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_3_FLOAT = var7.a; // type is FLOAT value type is FLOAT
            var var13 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_4_REFERENCE = var13.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@681c6f20
            var var18 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_5_FLOAT = var18.a; // type is FLOAT value type is FLOAT
            var var24 = data.positions.data[thisRef.m_indexC]; // type is REFERENCE value type is REFERENCE
            local_6_REFERENCE = var24.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@216d8735
            var var29 = data.positions.data[thisRef.m_indexC]; // type is REFERENCE value type is REFERENCE
            local_7_FLOAT = var29.a; // type is FLOAT value type is FLOAT
            var var35 = data.positions.data[thisRef.m_indexD]; // type is REFERENCE value type is REFERENCE
            local_8_REFERENCE = var35.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@cc1ca6d
            var var40 = data.positions.data[thisRef.m_indexD]; // type is REFERENCE value type is REFERENCE
            local_9_FLOAT = var40.a; // type is FLOAT value type is FLOAT
            var var45 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7929a090
            local_10_REFERENCE = var45; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@69b7f6f3
            var var48 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7247b5fa
            local_11_REFERENCE = var48; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3cab8063
            var var51 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3fded0a8
            local_12_REFERENCE = var51; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3244a1d4
            var var54 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3dcee79c
            local_13_REFERENCE = var54; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@be93557
            var var58 = local_10_REFERENCE.ojcRotsetFLOAT(local_10_REFERENCE,local_3_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@957fd95
            var var61 = local_11_REFERENCE.ojcRotsetFLOAT(local_11_REFERENCE,local_5_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@46707120
            var var64 = local_12_REFERENCE.ojcRotsetFLOAT(local_12_REFERENCE,local_7_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@fe2a2d6
            var var67 = local_13_REFERENCE.ojcRotsetFLOAT(local_13_REFERENCE,local_9_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@45da56b1
            local_14_FLOAT = 0.0; // type is FLOAT value type is FLOAT
            var var71 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@73d7a0ca
            local_17_REFERENCE = var71; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5dbf5ab7
            var var74 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@366b26e1
            local_18_REFERENCE = var74; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3df761fb
            var var77 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2c85c6e8
            local_19_REFERENCE = var77; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2a2a3d90
            local_24_FLOAT = 0.0; // type is FLOAT value type is FLOAT
            var var81 = thisRef.m_typeA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3bfd7217
            var var82 = ojdjJointType.REVOLUTE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@75e25452
            if ((var81 != var82)) {
                __label__ = 273;
                break $S_0;
            }
            __label__ = 234;
            }
        $M_273_234 : for(;;) switch (__label__) {
            case 234 :
            // NORMAL
                local_18_REFERENCE.VOIDsetZero(local_18_REFERENCE);
                local_20_FLOAT = 1.0; // type is FLOAT value type is FLOAT
                local_22_FLOAT = 1.0; // type is FLOAT value type is FLOAT
                local_24_FLOAT = (local_24_FLOAT + (thisRef.m_iA + thisRef.m_iC)); // type is FLOAT value type is FLOAT
                local_15_FLOAT = ((local_3_FLOAT - local_7_FLOAT) - thisRef.m_referenceAngleA); // type is FLOAT value type is FLOAT
                break $M_273_234;
            case 273 :
            // NORMAL
                var var84 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1ad13821
                var local_25_REFERENCE = var84; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@18611f15
                var var87 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@48dcabc4
                var local_26_REFERENCE = var87; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2f7b2649
                var var90 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3c7813b7
                var local_27_REFERENCE = var90; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2c712a9a
                var var93 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@15e265b
                var local_28_REFERENCE = var93; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@77611157
                ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(local_12_REFERENCE,thisRef.m_localAxisC,local_18_REFERENCE);
                var var98 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3244a1d4
                var var101 = local_17_REFERENCE.ojcVec2setojcVec2(local_17_REFERENCE,thisRef.m_localAnchorC); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@bf841a7
                var var103 = var101.ojcVec2subLocalojcVec2(var101,thisRef.m_lcC); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2e788fb8
                ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var98,var103,local_25_REFERENCE);
                var var105 = local_10_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@69b7f6f3
                var var108 = local_17_REFERENCE.ojcVec2setojcVec2(local_17_REFERENCE,thisRef.m_localAnchorA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5e6418d2
                var var110 = var108.ojcVec2subLocalojcVec2(var108,thisRef.m_lcA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@217051e0
                ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var105,var110,local_26_REFERENCE);
                var var114 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_25_REFERENCE,local_18_REFERENCE); // type is FLOAT value type is FLOAT
                local_22_FLOAT = var114; // type is FLOAT value type is FLOAT
                var var119 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_26_REFERENCE,local_18_REFERENCE); // type is FLOAT value type is FLOAT
                local_20_FLOAT = var119; // type is FLOAT value type is FLOAT
                local_24_FLOAT = (local_24_FLOAT + (((thisRef.m_mC + thisRef.m_mA) + ((thisRef.m_iC * local_22_FLOAT) * local_22_FLOAT)) + ((thisRef.m_iA * local_20_FLOAT) * local_20_FLOAT))); // type is FLOAT value type is FLOAT
                var var142 = local_27_REFERENCE.ojcVec2setojcVec2(local_27_REFERENCE,thisRef.m_localAnchorC); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@68ccc910
                var var144 = var142.ojcVec2subLocalojcVec2(var142,thisRef.m_lcC); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2239efe
                var var145 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3244a1d4
                var var148 = local_17_REFERENCE.ojcVec2setojcVec2(local_17_REFERENCE,local_26_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7cffb4e0
                var var150 = var148.ojcVec2addLocalojcVec2(var148,local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5f2315ce
                var var152 = var150.ojcVec2subLocalojcVec2(var150,local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5129d373
                ojcRot.VOIDmulTransUnsafeojcRotojcVec2ojcVec2(var145,var152,local_28_REFERENCE);
                var var156 = local_28_REFERENCE.ojcVec2subLocalojcVec2(local_28_REFERENCE,local_27_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4fe373c6
                var var158 = ojcVec2.FLOATdotojcVec2ojcVec2(var156,thisRef.m_localAxisC); // type is FLOAT value type is FLOAT
                local_15_FLOAT = var158; // type is FLOAT value type is FLOAT
                thisRef.pool.VOIDpushVec2INT(thisRef.pool,4);
                break $M_273_234;
        }
        $S_494 : {
        // NORMAL
            var var177 = thisRef.m_typeB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4e3a866e
            var var178 = ojdjJointType.REVOLUTE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@9f06702
            if ((var177 != var178)) {
                __label__ = 560;
                break $S_494;
            }
            __label__ = 504;
            }
        $M_504_560 : for(;;) switch (__label__) {
            case 560 :
            // NORMAL
                var var204 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@16dd9f04
                var local_25_REFERENCE = var204; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4274b35a
                var var206 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@58e7448c
                var local_26_REFERENCE = var206; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@52a5e0e5
                var var208 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@28fa700a
                var local_27_REFERENCE = var208; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4ff3f82c
                var var210 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2dd2067a
                var local_28_REFERENCE = var210; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@500d69ed
                var var212 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2b8c39c6
                var local_29_REFERENCE = var212; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7bee8603
                ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(local_13_REFERENCE,thisRef.m_localAxisD,local_25_REFERENCE);
                var var217 = local_13_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@be93557
                var var220 = local_17_REFERENCE.ojcVec2setojcVec2(local_17_REFERENCE,thisRef.m_localAnchorD); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@46b2aed2
                var var222 = var220.ojcVec2subLocalojcVec2(var220,thisRef.m_lcD); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7dcbe5e8
                ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var217,var222,local_26_REFERENCE);
                var var224 = local_11_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3cab8063
                var var227 = local_17_REFERENCE.ojcVec2setojcVec2(local_17_REFERENCE,thisRef.m_localAnchorB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3743a19e
                var var229 = var227.ojcVec2subLocalojcVec2(var227,thisRef.m_lcB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3812f7eb
                ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var224,var229,local_27_REFERENCE);
                var var233 = local_19_REFERENCE.ojcVec2setojcVec2(local_19_REFERENCE,local_25_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6b050a05
                var var235 = var233.ojcVec2mulLocalFLOAT(var233,thisRef.m_ratio); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@49c35628
                var var238 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_26_REFERENCE,local_25_REFERENCE); // type is FLOAT value type is FLOAT
                local_23_FLOAT = var238; // type is FLOAT value type is FLOAT
                var var242 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_27_REFERENCE,local_25_REFERENCE); // type is FLOAT value type is FLOAT
                local_21_FLOAT = var242; // type is FLOAT value type is FLOAT
                local_24_FLOAT = (local_24_FLOAT + ((((thisRef.m_ratio * thisRef.m_ratio) * (thisRef.m_mD + thisRef.m_mB)) + ((thisRef.m_iD * local_23_FLOAT) * local_23_FLOAT)) + ((thisRef.m_iB * local_21_FLOAT) * local_21_FLOAT))); // type is FLOAT value type is FLOAT
                var var268 = local_28_REFERENCE.ojcVec2setojcVec2(local_28_REFERENCE,thisRef.m_localAnchorD); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@632651df
                var var270 = var268.ojcVec2subLocalojcVec2(var268,thisRef.m_lcD); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4c245fff
                var var271 = local_13_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@be93557
                var var274 = local_17_REFERENCE.ojcVec2setojcVec2(local_17_REFERENCE,local_27_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@fb2315c
                var var276 = var274.ojcVec2addLocalojcVec2(var274,local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5c135494
                var var278 = var276.ojcVec2subLocalojcVec2(var276,local_8_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@dea4e60
                ojcRot.VOIDmulTransUnsafeojcRotojcVec2ojcVec2(var271,var278,local_29_REFERENCE);
                var var282 = local_29_REFERENCE.ojcVec2subLocalojcVec2(local_29_REFERENCE,local_28_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@63df2385
                var var284 = ojcVec2.FLOATdotojcVec2ojcVec2(var282,thisRef.m_localAxisD); // type is FLOAT value type is FLOAT
                local_16_FLOAT = var284; // type is FLOAT value type is FLOAT
                thisRef.pool.VOIDpushVec2INT(thisRef.pool,5);
                break $M_504_560;
            case 504 :
            // NORMAL
                local_19_REFERENCE.VOIDsetZero(local_19_REFERENCE);
                local_21_FLOAT = thisRef.m_ratio; // type is FLOAT value type is FLOAT
                local_23_FLOAT = thisRef.m_ratio; // type is FLOAT value type is FLOAT
                local_24_FLOAT = (local_24_FLOAT + ((thisRef.m_ratio * thisRef.m_ratio) * (thisRef.m_iB + thisRef.m_iD))); // type is FLOAT value type is FLOAT
                local_16_FLOAT = ((local_5_FLOAT - local_9_FLOAT) - thisRef.m_referenceAngleB); // type is FLOAT value type is FLOAT
                break $M_504_560;
        }
        $S_818 : {
        // NORMAL
            local_25_FLOAT = ((local_15_FLOAT + (thisRef.m_ratio * local_16_FLOAT)) - thisRef.m_constant); // type is FLOAT value type is FLOAT
            local_26_FLOAT = 0.0; // type is FLOAT value type is FLOAT
            var var298 = local_24_FLOAT; // type is FLOAT value type is FLOAT
            if ((var298 <= 0.0)) {
                __label__ = 853;
                break $S_818;
            }
            __label__ = 845;
            }
        $M_853_845 : for(;;) switch (__label__) {
            case 845 :
            // NORMAL
                local_26_FLOAT = ((-local_25_FLOAT) / local_24_FLOAT); // type is FLOAT value type is FLOAT
                __label__ = 853;
                continue $M_853_845;
            case 853 :
            // NORMAL
                $S_853 : {
                // NORMAL
                    thisRef.pool.VOIDpushVec2INT(thisRef.pool,3);
                    thisRef.pool.VOIDpushRotINT(thisRef.pool,4);
                    var var307 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@20286359
                    var var315 = (var307.x + ((thisRef.m_mA * local_26_FLOAT) * local_18_REFERENCE.x)); // type is FLOAT value type is FLOAT
                    var307.x = var315;
                    var var316 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@20286359
                    var var324 = (var316.y + ((thisRef.m_mA * local_26_FLOAT) * local_18_REFERENCE.y)); // type is FLOAT value type is FLOAT
                    var316.y = var324;
                    local_3_FLOAT = (local_3_FLOAT + ((thisRef.m_iA * local_26_FLOAT) * local_20_FLOAT)); // type is FLOAT value type is FLOAT
                    var var333 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3d5d0284
                    var var341 = (var333.x + ((thisRef.m_mB * local_26_FLOAT) * local_19_REFERENCE.x)); // type is FLOAT value type is FLOAT
                    var333.x = var341;
                    var var342 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3d5d0284
                    var var350 = (var342.y + ((thisRef.m_mB * local_26_FLOAT) * local_19_REFERENCE.y)); // type is FLOAT value type is FLOAT
                    var342.y = var350;
                    local_5_FLOAT = (local_5_FLOAT + ((thisRef.m_iB * local_26_FLOAT) * local_21_FLOAT)); // type is FLOAT value type is FLOAT
                    var var359 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7d1e7ff5
                    var var367 = (var359.x - ((thisRef.m_mC * local_26_FLOAT) * local_18_REFERENCE.x)); // type is FLOAT value type is FLOAT
                    var359.x = var367;
                    var var368 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7d1e7ff5
                    var var376 = (var368.y - ((thisRef.m_mC * local_26_FLOAT) * local_18_REFERENCE.y)); // type is FLOAT value type is FLOAT
                    var368.y = var376;
                    local_7_FLOAT = (local_7_FLOAT - ((thisRef.m_iC * local_26_FLOAT) * local_22_FLOAT)); // type is FLOAT value type is FLOAT
                    var var385 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@ae67e5d
                    var var393 = (var385.x - ((thisRef.m_mD * local_26_FLOAT) * local_19_REFERENCE.x)); // type is FLOAT value type is FLOAT
                    var385.x = var393;
                    var var394 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@ae67e5d
                    var var402 = (var394.y - ((thisRef.m_mD * local_26_FLOAT) * local_19_REFERENCE.y)); // type is FLOAT value type is FLOAT
                    var394.y = var402;
                    local_9_FLOAT = (local_9_FLOAT - ((thisRef.m_iD * local_26_FLOAT) * local_23_FLOAT)); // type is FLOAT value type is FLOAT
                    var var413 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
                    var var414 = local_3_FLOAT; // type is FLOAT value type is FLOAT
                    var413.a = var414;
                    var var417 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
                    var var418 = local_5_FLOAT; // type is FLOAT value type is FLOAT
                    var417.a = var418;
                    var var421 = data.positions.data[thisRef.m_indexC]; // type is REFERENCE value type is REFERENCE
                    var var422 = local_7_FLOAT; // type is FLOAT value type is FLOAT
                    var421.a = var422;
                    var var425 = data.positions.data[thisRef.m_indexD]; // type is REFERENCE value type is REFERENCE
                    var var426 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                    var425.a = var426;
                    var var427 = local_14_FLOAT; // type is FLOAT value type is FLOAT
                    if ((var427 >= 0.005)) {
                        __label__ = 1180;
                        break $S_853;
                    }
                    __label__ = 1176;
                    }
                for(;;) switch (__label__) {
                    case 1180 :
                    // NORMAL
                        var var429 = 0; // type is INT value type is INT
                        return var429;
                    case 1176 :
                    // NORMAL
                        var var429 = 1; // type is INT value type is INT
                        return var429;
                }
        }
    },

    classInitCheck : function() {
        if (!ojdjGearJoint.__initialized) {
            ojdjGearJoint.__initialized = true;
            var thePrototype = ojdjGearJoint.Create.prototype;
            thePrototype.instanceOf = ojdjGearJoint.instanceOf;
            thePrototype.ClassgetClass = ojdjGearJoint.ClassgetClass;
            thePrototype.BOOLEANsolvePositionConstraintsojdSolverData = ojdjGearJoint.BOOLEANsolvePositionConstraintsojdSolverData;
            thePrototype.VOIDsolveVelocityConstraintsojdSolverData = ojdjGearJoint.VOIDsolveVelocityConstraintsojdSolverData;
            thePrototype.VOIDinitVelocityConstraintsojdSolverData = ojdjGearJoint.VOIDinitVelocityConstraintsojdSolverData;
            thePrototype.BOOLEANgetCollideConnected = ojdjJoint.BOOLEANgetCollideConnected;
            thePrototype.ojdBodygetBodyB = ojdjJoint.ojdBodygetBodyB;
            thePrototype.ojdBodygetBodyA = ojdjJoint.ojdBodygetBodyA;
            thePrototype.ojdjJointTypegetType = ojdjJoint.ojdjJointTypegetType;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojdjJoint.classInitCheck();
            jlObject.classInitCheck();
            ojdjGearJoint.VOIDclinit();
        }
    },

};

var ojdjGearJointDef = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 166,
    __implementedTypes : [146,166,1],

    Create : function() {
        this.type = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.userData = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.bodyA = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.bodyB = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.collideConnected = false; // declared in org.jbox2d.dynamics.joints.JointDef
        this.joint1 = null; // declared in org.jbox2d.dynamics.joints.GearJointDef
        this.joint2 = null; // declared in org.jbox2d.dynamics.joints.GearJointDef
        this.ratio = 0; // declared in org.jbox2d.dynamics.joints.GearJointDef
    },

    instanceOf : function(aType) {
        return ojdjGearJointDef.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdjGearJointDef;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        ojdjJointDef.VOIDinit(thisRef);
        var var0 = ojdjJointType.GEAR; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4dee950b
        thisRef.type = var0;
        thisRef.joint1 = null;
        thisRef.joint2 = null;
        return;
    },

    classInitCheck : function() {
        if (!ojdjGearJointDef.__initialized) {
            ojdjGearJointDef.__initialized = true;
            var thePrototype = ojdjGearJointDef.Create.prototype;
            thePrototype.instanceOf = ojdjGearJointDef.instanceOf;
            thePrototype.ClassgetClass = ojdjGearJointDef.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojdjJointDef.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var ojdjPulleyJoint = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 167,
    __implementedTypes : [167,114,1],
    $assertionsDisabled : false, // declared in org.jbox2d.dynamics.joints.Joint
    $assertionsDisabled : false, // declared in org.jbox2d.dynamics.joints.PulleyJoint

    Create : function() {
        this.pool = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_type = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_prev = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_next = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_bodyA = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_bodyB = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_collideConnected = false; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_islandFlag = false; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_userData = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_edgeA = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_edgeB = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_groundAnchorA = null; // declared in org.jbox2d.dynamics.joints.PulleyJoint
        this.m_groundAnchorB = null; // declared in org.jbox2d.dynamics.joints.PulleyJoint
        this.m_localAnchorA = null; // declared in org.jbox2d.dynamics.joints.PulleyJoint
        this.m_localAnchorB = null; // declared in org.jbox2d.dynamics.joints.PulleyJoint
        this.m_uA = null; // declared in org.jbox2d.dynamics.joints.PulleyJoint
        this.m_uB = null; // declared in org.jbox2d.dynamics.joints.PulleyJoint
        this.m_rA = null; // declared in org.jbox2d.dynamics.joints.PulleyJoint
        this.m_rB = null; // declared in org.jbox2d.dynamics.joints.PulleyJoint
        this.m_localCenterA = null; // declared in org.jbox2d.dynamics.joints.PulleyJoint
        this.m_localCenterB = null; // declared in org.jbox2d.dynamics.joints.PulleyJoint
        this.m_ratio = 0; // declared in org.jbox2d.dynamics.joints.PulleyJoint
        this.m_lengthA = 0; // declared in org.jbox2d.dynamics.joints.PulleyJoint
        this.m_lengthB = 0; // declared in org.jbox2d.dynamics.joints.PulleyJoint
        this.m_constant = 0; // declared in org.jbox2d.dynamics.joints.PulleyJoint
        this.m_impulse = 0; // declared in org.jbox2d.dynamics.joints.PulleyJoint
        this.m_indexA = 0; // declared in org.jbox2d.dynamics.joints.PulleyJoint
        this.m_indexB = 0; // declared in org.jbox2d.dynamics.joints.PulleyJoint
        this.m_invMassA = 0; // declared in org.jbox2d.dynamics.joints.PulleyJoint
        this.m_invMassB = 0; // declared in org.jbox2d.dynamics.joints.PulleyJoint
        this.m_invIA = 0; // declared in org.jbox2d.dynamics.joints.PulleyJoint
        this.m_invIB = 0; // declared in org.jbox2d.dynamics.joints.PulleyJoint
        this.m_mass = 0; // declared in org.jbox2d.dynamics.joints.PulleyJoint
    },

    instanceOf : function(aType) {
        return ojdjPulleyJoint.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdjPulleyJoint;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    ojdjJointcreateojdWorldojdjJointDef : function(p0,p1) {
         return ojdjJoint.ojdjJointcreateojdWorldojdjJointDef(p0,p1);
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdjPulleyJoint.BOOLEANdesiredAssertionStatus(ojdjPulleyJoint); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_9_13 : for(;;) switch (__label__) {
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_9_13;
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_9_13;
        }
        ojdjPulleyJoint.$assertionsDisabled = var1;
        return;
    },

    VOIDinitojpIWorldPoolojdjPulleyJointDef : function(thisRef,argWorldPool,def) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            ojdjJoint.VOIDinitojpIWorldPoolojdjJointDef(thisRef,argWorldPool,def);
            var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var0);
            thisRef.m_groundAnchorA = var0;
            var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var1);
            thisRef.m_groundAnchorB = var1;
            var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var2);
            thisRef.m_localAnchorA = var2;
            var var3 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var3);
            thisRef.m_localAnchorB = var3;
            var var4 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var4);
            thisRef.m_uA = var4;
            var var5 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var5);
            thisRef.m_uB = var5;
            var var6 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var6);
            thisRef.m_rA = var6;
            var var7 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var7);
            thisRef.m_rB = var7;
            var var8 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var8);
            thisRef.m_localCenterA = var8;
            var var9 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var9);
            thisRef.m_localCenterB = var9;
            var var12 = thisRef.m_groundAnchorA.ojcVec2setojcVec2(thisRef.m_groundAnchorA,def.groundAnchorA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@66971abf
            var var15 = thisRef.m_groundAnchorB.ojcVec2setojcVec2(thisRef.m_groundAnchorB,def.groundAnchorB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@72e7cca5
            var var18 = thisRef.m_localAnchorA.ojcVec2setojcVec2(thisRef.m_localAnchorA,def.localAnchorA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7637e9f3
            var var21 = thisRef.m_localAnchorB.ojcVec2setojcVec2(thisRef.m_localAnchorB,def.localAnchorB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@35ece7ba
            var var22 = ojdjPulleyJoint.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var22 != 0)) {
                __label__ = 187;
                break $S_0;
            }
            __label__ = 170;
            }
        $M_187_170 : for(;;) switch (__label__) {
            case 187 :
            // NORMAL
                var var26 = def.ratio; // type is FLOAT value type is FLOAT
                thisRef.m_ratio = var26;
                var var27 = def.lengthA; // type is FLOAT value type is FLOAT
                thisRef.m_lengthA = var27;
                var var28 = def.lengthB; // type is FLOAT value type is FLOAT
                thisRef.m_lengthB = var28;
                var var33 = (def.lengthA + (thisRef.m_ratio * def.lengthB)); // type is FLOAT value type is FLOAT
                thisRef.m_constant = var33;
                thisRef.m_impulse = 0.0;
                return;
            case 170 :
            // NORMAL
                $S_170 : {
                // NORMAL
                    var var23 = def.ratio; // type is FLOAT value type is FLOAT
                    if ((var23 != 0.0)) {
                        __label__ = 187;
                        continue $M_187_170;
                    }
                    }
                var var25 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var25);
                throw var25;
        }
    },

    VOIDinitVelocityConstraintsojdSolverData : function(thisRef,data) {
        var local_5_FLOAT = null; // type is FLOAT # of inits = 2
        var local_9_FLOAT = null; // type is FLOAT # of inits = 2
        var local_14_FLOAT = null; // type is FLOAT # of inits = 1
        var local_8_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_13_FLOAT = null; // type is FLOAT # of inits = 1
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var1 = thisRef.m_bodyA.m_islandIndex; // type is INT value type is INT
            thisRef.m_indexA = var1;
            var var3 = thisRef.m_bodyB.m_islandIndex; // type is INT value type is INT
            thisRef.m_indexB = var3;
            var var8 = thisRef.m_localCenterA.ojcVec2setojcVec2(thisRef.m_localCenterA,thisRef.m_bodyA.m_sweep.localCenter); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@aa7bfe2
            var var13 = thisRef.m_localCenterB.ojcVec2setojcVec2(thisRef.m_localCenterB,thisRef.m_bodyB.m_sweep.localCenter); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@61fe141c
            var var15 = thisRef.m_bodyA.m_invMass; // type is FLOAT value type is FLOAT
            thisRef.m_invMassA = var15;
            var var17 = thisRef.m_bodyB.m_invMass; // type is FLOAT value type is FLOAT
            thisRef.m_invMassB = var17;
            var var19 = thisRef.m_bodyA.m_invI; // type is FLOAT value type is FLOAT
            thisRef.m_invIA = var19;
            var var21 = thisRef.m_bodyB.m_invI; // type is FLOAT value type is FLOAT
            thisRef.m_invIB = var21;
            var var24 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            var local_2_REFERENCE = var24.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@50244a92
            var var29 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            var local_3_FLOAT = var29.a; // type is FLOAT value type is FLOAT
            var var35 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_4_REFERENCE = var35.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@27a9a766
            var var40 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_5_FLOAT = var40.w; // type is FLOAT value type is FLOAT
            var var46 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            var local_6_REFERENCE = var46.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@10c654de
            var var51 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            var local_7_FLOAT = var51.a; // type is FLOAT value type is FLOAT
            var var57 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_8_REFERENCE = var57.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@189fc2e
            var var62 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_9_FLOAT = var62.w; // type is FLOAT value type is FLOAT
            var var67 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@738b5657
            var local_10_REFERENCE = var67; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@19735dd7
            var var70 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3b319a83
            var local_11_REFERENCE = var70; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@75177947
            var var73 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5c07a05c
            var local_12_REFERENCE = var73; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5f19d3ee
            var var77 = local_10_REFERENCE.ojcRotsetFLOAT(local_10_REFERENCE,local_3_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@684baf0c
            var var80 = local_11_REFERENCE.ojcRotsetFLOAT(local_11_REFERENCE,local_7_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@26583e03
            var var81 = local_10_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@19735dd7
            var var84 = local_12_REFERENCE.ojcVec2setojcVec2(local_12_REFERENCE,thisRef.m_localAnchorA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@473c6fd4
            var var86 = var84.ojcVec2subLocalojcVec2(var84,thisRef.m_localCenterA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@56ab527e
            ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var81,var86,thisRef.m_rA);
            var var88 = local_11_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@75177947
            var var91 = local_12_REFERENCE.ojcVec2setojcVec2(local_12_REFERENCE,thisRef.m_localAnchorB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@63adb468
            var var93 = var91.ojcVec2subLocalojcVec2(var91,thisRef.m_localCenterB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4622638
            ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var88,var93,thisRef.m_rB);
            var var97 = thisRef.m_uA.ojcVec2setojcVec2(thisRef.m_uA,local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2004bbaf
            var var99 = var97.ojcVec2addLocalojcVec2(var97,thisRef.m_rA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2cb03573
            var var101 = var99.ojcVec2subLocalojcVec2(var99,thisRef.m_groundAnchorA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2230ca79
            var var104 = thisRef.m_uB.ojcVec2setojcVec2(thisRef.m_uB,local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@37f66be1
            var var106 = var104.ojcVec2addLocalojcVec2(var104,thisRef.m_rB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@32aa7773
            var var108 = var106.ojcVec2subLocalojcVec2(var106,thisRef.m_groundAnchorB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1f1cd7f8
            var var110 = thisRef.m_uA.FLOATlength(thisRef.m_uA); // type is FLOAT value type is FLOAT
            local_13_FLOAT = var110; // type is FLOAT value type is FLOAT
            var var114 = thisRef.m_uB.FLOATlength(thisRef.m_uB); // type is FLOAT value type is FLOAT
            local_14_FLOAT = var114; // type is FLOAT value type is FLOAT
            var var117 = local_13_FLOAT; // type is FLOAT value type is FLOAT
            if ((var117 <= 0.049999997)) {
                __label__ = 398;
                break $S_0;
            }
            __label__ = 383;
            }
        $M_383_398 : for(;;) switch (__label__) {
            case 398 :
            // NORMAL
                thisRef.m_uA.VOIDsetZero(thisRef.m_uA);
                break $M_383_398;
            case 383 :
            // NORMAL
                var var122 = thisRef.m_uA.ojcVec2mulLocalFLOAT(thisRef.m_uA,(1.0 / local_13_FLOAT)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3b5bb560
                break $M_383_398;
        }
        $S_405 : {
        // NORMAL
            var var124 = local_14_FLOAT; // type is FLOAT value type is FLOAT
            if ((var124 <= 0.049999997)) {
                __label__ = 428;
                break $S_405;
            }
            __label__ = 413;
            }
        $M_428_413 : for(;;) switch (__label__) {
            case 413 :
            // NORMAL
                var var130 = thisRef.m_uB.ojcVec2mulLocalFLOAT(thisRef.m_uB,(1.0 / local_14_FLOAT)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3f767889
                break $M_428_413;
            case 428 :
            // NORMAL
                thisRef.m_uB.VOIDsetZero(thisRef.m_uB);
                break $M_428_413;
        }
        $S_435 : {
        // NORMAL
            var var133 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.m_rA,thisRef.m_uA); // type is FLOAT value type is FLOAT
            var local_15_FLOAT = var133; // type is FLOAT value type is FLOAT
            var var138 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.m_rB,thisRef.m_uB); // type is FLOAT value type is FLOAT
            var local_16_FLOAT = var138; // type is FLOAT value type is FLOAT
            var local_17_FLOAT = (thisRef.m_invMassA + ((thisRef.m_invIA * local_15_FLOAT) * local_15_FLOAT)); // type is FLOAT value type is FLOAT
            var local_18_FLOAT = (thisRef.m_invMassB + ((thisRef.m_invIB * local_16_FLOAT) * local_16_FLOAT)); // type is FLOAT value type is FLOAT
            var var165 = (local_17_FLOAT + ((thisRef.m_ratio * thisRef.m_ratio) * local_18_FLOAT)); // type is FLOAT value type is FLOAT
            thisRef.m_mass = var165;
            var var166 = thisRef.m_mass; // type is FLOAT value type is FLOAT
            if ((var166 <= 0.0)) {
                __label__ = 533;
                break $S_435;
            }
            __label__ = 523;
            }
        $M_523_533 : for(;;) switch (__label__) {
            case 533 :
            // NORMAL
                $S_533 : {
                // NORMAL
                    var var171 = data.step.warmStarting; // type is BOOLEAN value type is BOOLEAN
                    if ((var171 == 0)) {
                        __label__ = 753;
                        break $S_533;
                    }
                    __label__ = 543;
                    }
                $M_543_753 : for(;;) switch (__label__) {
                    case 543 :
                    // NORMAL
                        var var175 = (thisRef.m_impulse * data.step.dtRatio); // type is FLOAT value type is FLOAT
                        thisRef.m_impulse = var175;
                        var var177 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5e8691fb
                        var local_19_REFERENCE = var177; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@27dc2ec4
                        var var180 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@41ca7fea
                        var local_20_REFERENCE = var180; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4d74f56a
                        var var184 = local_19_REFERENCE.ojcVec2setojcVec2(local_19_REFERENCE,thisRef.m_uA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2717bc76
                        var var187 = var184.ojcVec2mulLocalFLOAT(var184,(-thisRef.m_impulse)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@61fb1c5e
                        var var190 = local_20_REFERENCE.ojcVec2setojcVec2(local_20_REFERENCE,thisRef.m_uB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@73dc0aa4
                        var var195 = var190.ojcVec2mulLocalFLOAT(var190,((-thisRef.m_ratio) * thisRef.m_impulse)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@19e97e10
                        var var196 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@718f0156
                        var var202 = (var196.x + (thisRef.m_invMassA * local_19_REFERENCE.x)); // type is FLOAT value type is FLOAT
                        var196.x = var202;
                        var var203 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@718f0156
                        var var209 = (var203.y + (thisRef.m_invMassA * local_19_REFERENCE.y)); // type is FLOAT value type is FLOAT
                        var203.y = var209;
                        var var210 = local_5_FLOAT; // type is FLOAT value type is FLOAT
                        var var211 = thisRef.m_invIA; // type is FLOAT value type is FLOAT
                        var var214 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.m_rA,local_19_REFERENCE); // type is FLOAT value type is FLOAT
                        local_5_FLOAT = (var210 + (var211 * var214)); // type is FLOAT value type is FLOAT
                        var var218 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@488052f1
                        var var224 = (var218.x + (thisRef.m_invMassB * local_20_REFERENCE.x)); // type is FLOAT value type is FLOAT
                        var218.x = var224;
                        var var225 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@488052f1
                        var var231 = (var225.y + (thisRef.m_invMassB * local_20_REFERENCE.y)); // type is FLOAT value type is FLOAT
                        var225.y = var231;
                        var var232 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                        var var233 = thisRef.m_invIB; // type is FLOAT value type is FLOAT
                        var var236 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.m_rB,local_20_REFERENCE); // type is FLOAT value type is FLOAT
                        local_9_FLOAT = (var232 + (var233 * var236)); // type is FLOAT value type is FLOAT
                        thisRef.pool.VOIDpushVec2INT(thisRef.pool,2);
                        break $M_543_753;
                    case 753 :
                    // NORMAL
                        thisRef.m_impulse = 0.0;
                        break $M_543_753;
                }
                var var243 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
                var var244 = local_5_FLOAT; // type is FLOAT value type is FLOAT
                var243.w = var244;
                var var247 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
                var var248 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                var247.w = var248;
                thisRef.pool.VOIDpushVec2INT(thisRef.pool,1);
                thisRef.pool.VOIDpushRotINT(thisRef.pool,2);
                return;
            case 523 :
            // NORMAL
                var var169 = (1.0 / thisRef.m_mass); // type is FLOAT value type is FLOAT
                thisRef.m_mass = var169;
                __label__ = 533;
                continue $M_523_533;
        }
    },

    VOIDsolveVelocityConstraintsojdSolverData : function(thisRef,data) {
        var __label__ = null;
        var var2 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
        var local_2_REFERENCE = var2.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@49667d5a
        var var7 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
        var local_3_FLOAT = var7.w; // type is FLOAT value type is FLOAT
        var var13 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
        var local_4_REFERENCE = var13.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@39d890c8
        var var18 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
        var local_5_FLOAT = var18.w; // type is FLOAT value type is FLOAT
        var var23 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4bfe6d5f
        var local_6_REFERENCE = var23; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7aab51f9
        var var26 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@dd7f5b
        var local_7_REFERENCE = var26; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7d7ee158
        var var29 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4552ef3d
        var local_8_REFERENCE = var29; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@65564af7
        var var32 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@e1ad6a1
        var local_9_REFERENCE = var32; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4e4921b
        ojcVec2.VOIDcrossToOutUnsafeFLOATojcVec2ojcVec2(local_3_FLOAT,thisRef.m_rA,local_6_REFERENCE);
        var var39 = local_6_REFERENCE.ojcVec2addLocalojcVec2(local_6_REFERENCE,local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@569dbebd
        ojcVec2.VOIDcrossToOutUnsafeFLOATojcVec2ojcVec2(local_5_FLOAT,thisRef.m_rB,local_7_REFERENCE);
        var var45 = local_7_REFERENCE.ojcVec2addLocalojcVec2(local_7_REFERENCE,local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1cb476b
        var var48 = ojcVec2.FLOATdotojcVec2ojcVec2(thisRef.m_uA,local_6_REFERENCE); // type is FLOAT value type is FLOAT
        var var49 = (-var48); // type is FLOAT value type is FLOAT
        var var50 = thisRef.m_ratio; // type is FLOAT value type is FLOAT
        var var53 = ojcVec2.FLOATdotojcVec2ojcVec2(thisRef.m_uB,local_7_REFERENCE); // type is FLOAT value type is FLOAT
        var local_10_FLOAT = (var49 - (var50 * var53)); // type is FLOAT value type is FLOAT
        var local_11_FLOAT = ((-thisRef.m_mass) * local_10_FLOAT); // type is FLOAT value type is FLOAT
        var var66 = (thisRef.m_impulse + local_11_FLOAT); // type is FLOAT value type is FLOAT
        thisRef.m_impulse = var66;
        var var69 = local_8_REFERENCE.ojcVec2setojcVec2(local_8_REFERENCE,thisRef.m_uA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@593c362d
        var var72 = var69.ojcVec2mulLocalFLOAT(var69,(-local_11_FLOAT)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7968035b
        var var75 = local_9_REFERENCE.ojcVec2setojcVec2(local_9_REFERENCE,thisRef.m_uB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@42bb329d
        var var80 = var75.ojcVec2mulLocalFLOAT(var75,((-thisRef.m_ratio) * local_11_FLOAT)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1910c5be
        var var81 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@212505ef
        var var87 = (var81.x + (thisRef.m_invMassA * local_8_REFERENCE.x)); // type is FLOAT value type is FLOAT
        var81.x = var87;
        var var88 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@212505ef
        var var94 = (var88.y + (thisRef.m_invMassA * local_8_REFERENCE.y)); // type is FLOAT value type is FLOAT
        var88.y = var94;
        var var95 = local_3_FLOAT; // type is FLOAT value type is FLOAT
        var var96 = thisRef.m_invIA; // type is FLOAT value type is FLOAT
        var var99 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.m_rA,local_8_REFERENCE); // type is FLOAT value type is FLOAT
        var local_3_FLOAT = (var95 + (var96 * var99)); // type is FLOAT value type is FLOAT
        var var103 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@186ea84b
        var var109 = (var103.x + (thisRef.m_invMassB * local_9_REFERENCE.x)); // type is FLOAT value type is FLOAT
        var103.x = var109;
        var var110 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@186ea84b
        var var116 = (var110.y + (thisRef.m_invMassB * local_9_REFERENCE.y)); // type is FLOAT value type is FLOAT
        var110.y = var116;
        var var117 = local_5_FLOAT; // type is FLOAT value type is FLOAT
        var var118 = thisRef.m_invIB; // type is FLOAT value type is FLOAT
        var var121 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.m_rB,local_9_REFERENCE); // type is FLOAT value type is FLOAT
        var local_5_FLOAT = (var117 + (var118 * var121)); // type is FLOAT value type is FLOAT
        var var127 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
        var var128 = local_3_FLOAT; // type is FLOAT value type is FLOAT
        var127.w = var128;
        var var131 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
        var var132 = local_5_FLOAT; // type is FLOAT value type is FLOAT
        var131.w = var132;
        thisRef.pool.VOIDpushVec2INT(thisRef.pool,4);
        return;
    },

    BOOLEANsolvePositionConstraintsojdSolverData : function(thisRef,data) {
        var local_13_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_10_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_7_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_9_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_14_FLOAT = null; // type is FLOAT # of inits = 2
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_16_FLOAT = null; // type is FLOAT # of inits = 1
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_15_FLOAT = null; // type is FLOAT # of inits = 1
        var local_11_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_21_FLOAT = null; // type is FLOAT # of inits = 2
        var local_12_FLOAT = null; // type is FLOAT # of inits = 2
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var1 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@44605136
            var local_2_REFERENCE = var1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1421a632
            var var4 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4634f0dd
            var local_3_REFERENCE = var4; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2109d8a9
            var var7 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6726d45f
            local_4_REFERENCE = var7; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5cc13f51
            var var10 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7e2feebf
            local_5_REFERENCE = var10; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@723d5cec
            var var13 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1f7c5bbf
            local_6_REFERENCE = var13; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6c48804e
            var var16 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@70df0469
            local_7_REFERENCE = var16; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@67c0aea4
            var var19 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@218aa201
            var local_8_REFERENCE = var19; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2051fa99
            var var22 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5d0dfc8f
            local_9_REFERENCE = var22; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@322e3eba
            var var25 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5579570b
            local_10_REFERENCE = var25; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2a6cde2f
            var var29 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_11_REFERENCE = var29.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@21176d0f
            var var34 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_12_FLOAT = var34.a; // type is FLOAT value type is FLOAT
            var var40 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_13_REFERENCE = var40.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@e3dce86
            var var45 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_14_FLOAT = var45.a; // type is FLOAT value type is FLOAT
            var var51 = local_2_REFERENCE.ojcRotsetFLOAT(local_2_REFERENCE,local_12_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3c66a24a
            var var54 = local_3_REFERENCE.ojcRotsetFLOAT(local_3_REFERENCE,local_14_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@23387bc2
            var var55 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1421a632
            var var58 = local_8_REFERENCE.ojcVec2setojcVec2(local_8_REFERENCE,thisRef.m_localAnchorA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@395d15bf
            var var60 = var58.ojcVec2subLocalojcVec2(var58,thisRef.m_localCenterA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@59f4a5ec
            ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var55,var60,local_4_REFERENCE);
            var var62 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2109d8a9
            var var65 = local_8_REFERENCE.ojcVec2setojcVec2(local_8_REFERENCE,thisRef.m_localAnchorB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5009386a
            var var67 = var65.ojcVec2subLocalojcVec2(var65,thisRef.m_localCenterB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@300fbfc2
            ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var62,var67,local_5_REFERENCE);
            var var71 = local_6_REFERENCE.ojcVec2setojcVec2(local_6_REFERENCE,local_11_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@612eb491
            var var73 = var71.ojcVec2addLocalojcVec2(var71,local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1d89a69d
            var var75 = var73.ojcVec2subLocalojcVec2(var73,thisRef.m_groundAnchorA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@45a072e
            var var78 = local_7_REFERENCE.ojcVec2setojcVec2(local_7_REFERENCE,local_13_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@496659c8
            var var80 = var78.ojcVec2addLocalojcVec2(var78,local_5_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5df8f649
            var var82 = var80.ojcVec2subLocalojcVec2(var80,thisRef.m_groundAnchorB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@d151e25
            var var84 = local_6_REFERENCE.FLOATlength(local_6_REFERENCE); // type is FLOAT value type is FLOAT
            local_15_FLOAT = var84; // type is FLOAT value type is FLOAT
            var var88 = local_7_REFERENCE.FLOATlength(local_7_REFERENCE); // type is FLOAT value type is FLOAT
            local_16_FLOAT = var88; // type is FLOAT value type is FLOAT
            var var91 = local_15_FLOAT; // type is FLOAT value type is FLOAT
            if ((var91 <= 0.049999997)) {
                __label__ = 286;
                break $S_0;
            }
            __label__ = 273;
            }
        $M_286_273 : for(;;) switch (__label__) {
            case 273 :
            // NORMAL
                var var97 = local_6_REFERENCE.ojcVec2mulLocalFLOAT(local_6_REFERENCE,(1.0 / local_15_FLOAT)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@59a21bde
                break $M_286_273;
            case 286 :
            // NORMAL
                local_6_REFERENCE.VOIDsetZero(local_6_REFERENCE);
                break $M_286_273;
        }
        $S_291 : {
        // NORMAL
            var var98 = local_16_FLOAT; // type is FLOAT value type is FLOAT
            if ((var98 <= 0.049999997)) {
                __label__ = 312;
                break $S_291;
            }
            __label__ = 299;
            }
        $M_299_312 : for(;;) switch (__label__) {
            case 299 :
            // NORMAL
                var var103 = local_7_REFERENCE.ojcVec2mulLocalFLOAT(local_7_REFERENCE,(1.0 / local_16_FLOAT)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@22f1a13b
                break $M_299_312;
            case 312 :
            // NORMAL
                local_7_REFERENCE.VOIDsetZero(local_7_REFERENCE);
                break $M_299_312;
        }
        $S_317 : {
        // NORMAL
            var var107 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_4_REFERENCE,local_6_REFERENCE); // type is FLOAT value type is FLOAT
            var local_17_FLOAT = var107; // type is FLOAT value type is FLOAT
            var var112 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_5_REFERENCE,local_7_REFERENCE); // type is FLOAT value type is FLOAT
            var local_18_FLOAT = var112; // type is FLOAT value type is FLOAT
            var local_19_FLOAT = (thisRef.m_invMassA + ((thisRef.m_invIA * local_17_FLOAT) * local_17_FLOAT)); // type is FLOAT value type is FLOAT
            var local_20_FLOAT = (thisRef.m_invMassB + ((thisRef.m_invIB * local_18_FLOAT) * local_18_FLOAT)); // type is FLOAT value type is FLOAT
            local_21_FLOAT = (local_19_FLOAT + ((thisRef.m_ratio * thisRef.m_ratio) * local_20_FLOAT)); // type is FLOAT value type is FLOAT
            var var142 = local_21_FLOAT; // type is FLOAT value type is FLOAT
            if ((var142 <= 0.0)) {
                __label__ = 399;
                break $S_317;
            }
            __label__ = 393;
            }
        $M_393_399 : for(;;) switch (__label__) {
            case 399 :
            // NORMAL
                $S_399 : {
                // NORMAL
                    var local_22_FLOAT = ((thisRef.m_constant - local_15_FLOAT) - (thisRef.m_ratio * local_16_FLOAT)); // type is FLOAT value type is FLOAT
                    var var157 = ojcMathUtils.FLOATabsFLOAT(local_22_FLOAT); // type is FLOAT value type is FLOAT
                    var local_23_FLOAT = var157; // type is FLOAT value type is FLOAT
                    var local_24_FLOAT = ((-local_21_FLOAT) * local_22_FLOAT); // type is FLOAT value type is FLOAT
                    var var168 = local_9_REFERENCE.ojcVec2setojcVec2(local_9_REFERENCE,local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@38a14192
                    var var171 = var168.ojcVec2mulLocalFLOAT(var168,(-local_24_FLOAT)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1d608495
                    var var174 = local_10_REFERENCE.ojcVec2setojcVec2(local_10_REFERENCE,local_7_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5455000c
                    var var179 = var174.ojcVec2mulLocalFLOAT(var174,((-thisRef.m_ratio) * local_24_FLOAT)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7b829bc4
                    var var180 = local_11_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@28e71dc
                    var var186 = (var180.x + (thisRef.m_invMassA * local_9_REFERENCE.x)); // type is FLOAT value type is FLOAT
                    var180.x = var186;
                    var var187 = local_11_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@28e71dc
                    var var193 = (var187.y + (thisRef.m_invMassA * local_9_REFERENCE.y)); // type is FLOAT value type is FLOAT
                    var187.y = var193;
                    var var194 = local_12_FLOAT; // type is FLOAT value type is FLOAT
                    var var195 = thisRef.m_invIA; // type is FLOAT value type is FLOAT
                    var var198 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_4_REFERENCE,local_9_REFERENCE); // type is FLOAT value type is FLOAT
                    local_12_FLOAT = (var194 + (var195 * var198)); // type is FLOAT value type is FLOAT
                    var var202 = local_13_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@60d94aa7
                    var var208 = (var202.x + (thisRef.m_invMassB * local_10_REFERENCE.x)); // type is FLOAT value type is FLOAT
                    var202.x = var208;
                    var var209 = local_13_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@60d94aa7
                    var var215 = (var209.y + (thisRef.m_invMassB * local_10_REFERENCE.y)); // type is FLOAT value type is FLOAT
                    var209.y = var215;
                    var var216 = local_14_FLOAT; // type is FLOAT value type is FLOAT
                    var var217 = thisRef.m_invIB; // type is FLOAT value type is FLOAT
                    var var220 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_5_REFERENCE,local_10_REFERENCE); // type is FLOAT value type is FLOAT
                    local_14_FLOAT = (var216 + (var217 * var220)); // type is FLOAT value type is FLOAT
                    var var226 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
                    var var227 = local_12_FLOAT; // type is FLOAT value type is FLOAT
                    var226.a = var227;
                    var var230 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
                    var var231 = local_14_FLOAT; // type is FLOAT value type is FLOAT
                    var230.a = var231;
                    thisRef.pool.VOIDpushRotINT(thisRef.pool,2);
                    thisRef.pool.VOIDpushVec2INT(thisRef.pool,7);
                    var var234 = local_23_FLOAT; // type is FLOAT value type is FLOAT
                    if ((var234 >= 0.005)) {
                        __label__ = 639;
                        break $S_399;
                    }
                    __label__ = 635;
                    }
                for(;;) switch (__label__) {
                    case 635 :
                    // NORMAL
                        var var236 = 1; // type is INT value type is INT
                        return var236;
                    case 639 :
                    // NORMAL
                        var var236 = 0; // type is INT value type is INT
                        return var236;
                }
            case 393 :
            // NORMAL
                local_21_FLOAT = (1.0 / local_21_FLOAT); // type is FLOAT value type is FLOAT
                __label__ = 399;
                continue $M_393_399;
        }
    },

    classInitCheck : function() {
        if (!ojdjPulleyJoint.__initialized) {
            ojdjPulleyJoint.__initialized = true;
            var thePrototype = ojdjPulleyJoint.Create.prototype;
            thePrototype.instanceOf = ojdjPulleyJoint.instanceOf;
            thePrototype.ClassgetClass = ojdjPulleyJoint.ClassgetClass;
            thePrototype.BOOLEANsolvePositionConstraintsojdSolverData = ojdjPulleyJoint.BOOLEANsolvePositionConstraintsojdSolverData;
            thePrototype.VOIDsolveVelocityConstraintsojdSolverData = ojdjPulleyJoint.VOIDsolveVelocityConstraintsojdSolverData;
            thePrototype.VOIDinitVelocityConstraintsojdSolverData = ojdjPulleyJoint.VOIDinitVelocityConstraintsojdSolverData;
            thePrototype.BOOLEANgetCollideConnected = ojdjJoint.BOOLEANgetCollideConnected;
            thePrototype.ojdBodygetBodyB = ojdjJoint.ojdBodygetBodyB;
            thePrototype.ojdBodygetBodyA = ojdjJoint.ojdBodygetBodyA;
            thePrototype.ojdjJointTypegetType = ojdjJoint.ojdjJointTypegetType;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojdjJoint.classInitCheck();
            jlObject.classInitCheck();
            ojdjPulleyJoint.VOIDclinit();
        }
    },

};

var ojdjPulleyJointDef = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 168,
    __implementedTypes : [146,168,1],
    $assertionsDisabled : false, // declared in org.jbox2d.dynamics.joints.PulleyJointDef

    Create : function() {
        this.type = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.userData = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.bodyA = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.bodyB = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.collideConnected = false; // declared in org.jbox2d.dynamics.joints.JointDef
        this.groundAnchorA = null; // declared in org.jbox2d.dynamics.joints.PulleyJointDef
        this.groundAnchorB = null; // declared in org.jbox2d.dynamics.joints.PulleyJointDef
        this.localAnchorA = null; // declared in org.jbox2d.dynamics.joints.PulleyJointDef
        this.localAnchorB = null; // declared in org.jbox2d.dynamics.joints.PulleyJointDef
        this.ratio = 0; // declared in org.jbox2d.dynamics.joints.PulleyJointDef
        this.lengthA = 0; // declared in org.jbox2d.dynamics.joints.PulleyJointDef
        this.lengthB = 0; // declared in org.jbox2d.dynamics.joints.PulleyJointDef
    },

    instanceOf : function(aType) {
        return ojdjPulleyJointDef.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdjPulleyJointDef;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdjPulleyJointDef.BOOLEANdesiredAssertionStatus(ojdjPulleyJointDef); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_13_9 : for(;;) switch (__label__) {
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_13_9;
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_13_9;
        }
        ojdjPulleyJointDef.$assertionsDisabled = var1;
        return;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        ojdjJointDef.VOIDinit(thisRef);
        var var0 = ojdjJointType.PULLEY; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6f362
        thisRef.type = var0;
        var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinitFLOATFLOAT(var1,-1.0,1.0);
        thisRef.groundAnchorA = var1;
        var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinitFLOATFLOAT(var2,1.0,1.0);
        thisRef.groundAnchorB = var2;
        var var3 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinitFLOATFLOAT(var3,-1.0,0.0);
        thisRef.localAnchorA = var3;
        var var4 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinitFLOATFLOAT(var4,1.0,0.0);
        thisRef.localAnchorB = var4;
        thisRef.lengthA = 0.0;
        thisRef.lengthB = 0.0;
        thisRef.ratio = 1.0;
        thisRef.collideConnected = 1;
        return;
    },

    classInitCheck : function() {
        if (!ojdjPulleyJointDef.__initialized) {
            ojdjPulleyJointDef.__initialized = true;
            var thePrototype = ojdjPulleyJointDef.Create.prototype;
            thePrototype.instanceOf = ojdjPulleyJointDef.instanceOf;
            thePrototype.ClassgetClass = ojdjPulleyJointDef.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojdjJointDef.classInitCheck();
            jlObject.classInitCheck();
            ojdjPulleyJointDef.VOIDclinit();
        }
    },

};

var ojdjConstantVolumeJoint = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 169,
    __implementedTypes : [169,114,1],
    $assertionsDisabled : false, // declared in org.jbox2d.dynamics.joints.Joint

    Create : function() {
        this.pool = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_type = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_prev = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_next = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_bodyA = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_bodyB = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_collideConnected = false; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_islandFlag = false; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_userData = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_edgeA = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_edgeB = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_impulse = 0; // declared in org.jbox2d.dynamics.joints.ConstantVolumeJoint
        this.world = null; // declared in org.jbox2d.dynamics.joints.ConstantVolumeJoint
        this.bodies = null; // declared in org.jbox2d.dynamics.joints.ConstantVolumeJoint
        this.targetLengths = null; // declared in org.jbox2d.dynamics.joints.ConstantVolumeJoint
        this.targetVolume = 0; // declared in org.jbox2d.dynamics.joints.ConstantVolumeJoint
        this.distanceJoints = null; // declared in org.jbox2d.dynamics.joints.ConstantVolumeJoint
        this.normals = null; // declared in org.jbox2d.dynamics.joints.ConstantVolumeJoint
    },

    instanceOf : function(aType) {
        return ojdjConstantVolumeJoint.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdjConstantVolumeJoint;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    ojdjJointcreateojdWorldojdjJointDef : function(p0,p1) {
         return ojdjJoint.ojdjJointcreateojdWorldojdjJointDef(p0,p1);
    },

    VOIDinitojdWorldojdjConstantVolumeJointDef : function(thisRef,argWorld,def) {
        var local_3_INT = null; // type is INT # of inits = 6
        var local_4_INT = null; // type is INT # of inits = 4
        var var84 = null; // type is INT # of inits = 2
        var var48 = null; // type is INT # of inits = 2
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = argWorld.ojpIWorldPoolgetPool(argWorld); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2fcc44b6
            ojdjJoint.VOIDinitojpIWorldPoolojdjJointDef(thisRef,var0,def);
            thisRef.m_impulse = 0.0;
            thisRef.world = argWorld;
            var var2 = def.bodies.INTsize(def.bodies); // type is INT value type is INT
            if ((var2 > 2)) {
                __label__ = 40;
                break $S_0;
            }
            __label__ = 30;
            }
        for(;;) switch (__label__) {
            case 30 :
            // NORMAL
                var var41 = new jlIllegalArgumentException.Create(); // type is REFERENCE value type is REFERENCE
                jlIllegalArgumentException.VOIDinitjlString(var41,bytecoder.stringpool[58]);
                throw var41;
            case 40 :
            // NORMAL
                $S_40 : {
                // NORMAL
                    var var5 = def.bodies.A1jlObjecttoArrayA1jlObject(def.bodies,bytecoder.newArray(0,null)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@15749250
                    thisRef.bodies = var5;
                    var var8 = bytecoder.newArray(thisRef.bodies.data.length,0.0); // type is REFERENCE value type is REFERENCE
                    thisRef.targetLengths = var8;
                    local_3_INT = 0; // type is INT value type is INT
                    __label__ = 71;
                    }
                $L_71 : for (;;) {
                    $S_71 : {
                    // NORMAL
                        var var11 = local_3_INT; // type is INT value type is INT
                        var var13 = thisRef.targetLengths.data.length; // type is INT value type is INT
                        if ((var11 >= var13)) {
                            __label__ = 141;
                            break $S_71;
                        }
                        __label__ = 80;
                        }
                    for(;;) switch (__label__) {
                        case 80 :
                        // NORMAL
                            $S_80 : {
                            // NORMAL
                                var var78 = local_3_INT; // type is INT value type is INT
                                var var81 = (thisRef.targetLengths.data.length - 1); // type is INT value type is INT
                                if ((var78 != var81)) {
                                    __label__ = 95;
                                    break $S_80;
                                }
                                __label__ = 91;
                                }
                            $M_91_95 : for(;;) switch (__label__) {
                                case 95 :
                                // NORMAL
                                    var84 = (local_3_INT + 1); // type is INT value type is INT
                                    break $M_91_95;
                                case 91 :
                                // NORMAL
                                    var84 = 0; // type is INT value type is INT
                                    break $M_91_95;
                            }
                            local_4_INT = var84; // type is INT value type is INT
                            var var88 = thisRef.bodies.data[local_3_INT]; // type is REFERENCE value type is REFERENCE
                            var var89 = var88.ojcVec2getWorldCenter(var88); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@431b9363
                            var var92 = thisRef.bodies.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                            var var93 = var92.ojcVec2getWorldCenter(var92); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@ebf8642
                            var var94 = var89.ojcVec2subojcVec2(var89,var93); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@374bd570
                            var var95 = var94.FLOATlength(var94); // type is FLOAT value type is FLOAT
                            var local_5_FLOAT = var95; // type is FLOAT value type is FLOAT
                            var var98 = thisRef.targetLengths; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@61c37db
                            var var99 = local_3_INT; // type is INT value type is INT
                            var var100 = local_5_FLOAT; // type is FLOAT value type is FLOAT
                            var98.data[var99] = var100;
                            local_3_INT = (local_3_INT + 1); // type is INT value type is INT
                            __label__ = 71;
                            continue $L_71;
                        case 141 :
                        // NORMAL
                            $S_141 : {
                            // NORMAL
                                var var14 = thisRef.FLOATgetBodyArea(thisRef); // type is FLOAT value type is FLOAT
                                thisRef.targetVolume = var14;
                                var var15 = def.joints; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@19033cf0
                                if (var15 == null ) {
                                    __label__ = 183;
                                    break $S_141;
                                }
                                __label__ = 156;
                                }
                            $M_156_183 : for(;;) switch (__label__) {
                                case 183 :
                                // NORMAL
                                    $S_183 : {
                                    // NORMAL
                                        var var20 = def.joints; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6b7c3404
                                        if (var20 != null ) {
                                            __label__ = 334;
                                            break $S_183;
                                        }
                                        __label__ = 190;
                                        }
                                    $M_334_190 : for(;;) switch (__label__) {
                                        case 190 :
                                        // NORMAL
                                            $S_190 : {
                                            // NORMAL
                                                var var24 = new ojdjDistanceJointDef.Create(); // type is REFERENCE value type is REFERENCE
                                                ojdjDistanceJointDef.VOIDinit(var24);
                                                local_3_REFERENCE = var24; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2e10f37b
                                                var var28 = bytecoder.newArray(thisRef.bodies.data.length,null); // type is REFERENCE value type is REFERENCE
                                                thisRef.distanceJoints = var28;
                                                local_4_INT = 0; // type is INT value type is INT
                                                __label__ = 213;
                                                }
                                            $L_213 : for (;;) {
                                                $S_213 : {
                                                // NORMAL
                                                    var var31 = local_4_INT; // type is INT value type is INT
                                                    var var33 = thisRef.targetLengths.data.length; // type is INT value type is INT
                                                    if ((var31 >= var33)) {
                                                        __label__ = 331;
                                                        break $S_213;
                                                    }
                                                    __label__ = 223;
                                                    }
                                                for(;;) switch (__label__) {
                                                    case 331 :
                                                    // NORMAL
                                                        break $M_334_190;
                                                    case 223 :
                                                    // NORMAL
                                                        $S_223 : {
                                                        // NORMAL
                                                            var var42 = local_4_INT; // type is INT value type is INT
                                                            var var45 = (thisRef.targetLengths.data.length - 1); // type is INT value type is INT
                                                            if ((var42 != var45)) {
                                                                __label__ = 239;
                                                                break $S_223;
                                                            }
                                                            __label__ = 235;
                                                            }
                                                        $M_235_239 : for(;;) switch (__label__) {
                                                            case 235 :
                                                            // NORMAL
                                                                var48 = 0; // type is INT value type is INT
                                                                break $M_235_239;
                                                            case 239 :
                                                            // NORMAL
                                                                var48 = (local_4_INT + 1); // type is INT value type is INT
                                                                break $M_235_239;
                                                        }
                                                        var local_5_INT = var48; // type is INT value type is INT
                                                        var var51 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2e10f37b
                                                        var var52 = def.frequencyHz; // type is FLOAT value type is FLOAT
                                                        var51.frequencyHz = var52;
                                                        var var53 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2e10f37b
                                                        var var54 = def.dampingRatio; // type is FLOAT value type is FLOAT
                                                        var53.dampingRatio = var54;
                                                        var var55 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2e10f37b
                                                        var var56 = def.collideConnected; // type is BOOLEAN value type is BOOLEAN
                                                        var55.collideConnected = var56;
                                                        var var57 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2e10f37b
                                                        var var60 = thisRef.bodies.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                                                        var var63 = thisRef.bodies.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                                                        var var66 = thisRef.bodies.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                                                        var var67 = var66.ojcVec2getWorldCenter(var66); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2758c4e
                                                        var var70 = thisRef.bodies.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                                                        var var71 = var70.ojcVec2getWorldCenter(var70); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6530d134
                                                        var57.VOIDinitializeojdBodyojdBodyojcVec2ojcVec2(var57,var60,var63,var67,var71);
                                                        var var72 = thisRef.distanceJoints; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@655485de
                                                        var var73 = local_4_INT; // type is INT value type is INT
                                                        var var76 = thisRef.world.ojdjJointcreateJointojdjJointDef(thisRef.world,local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6f025164
                                                        var72.data[var73] = var76;
                                                        local_4_INT = (local_4_INT + 1); // type is INT value type is INT
                                                        __label__ = 213;
                                                        continue $L_213;
                                                }
                                            }
                                        case 334 :
                                        // NORMAL
                                            var var23 = def.joints.A1jlObjecttoArrayA1jlObject(def.joints,bytecoder.newArray(0,null)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@413bb736
                                            thisRef.distanceJoints = var23;
                                            break $M_334_190;
                                    }
                                    $S_352 : {
                                    // NORMAL
                                        var var36 = bytecoder.newArray(thisRef.bodies.data.length,null); // type is REFERENCE value type is REFERENCE
                                        thisRef.normals = var36;
                                        local_3_INT = 0; // type is INT value type is INT
                                        __label__ = 366;
                                        }
                                    $L_366 : for (;;) {
                                        $S_366 : {
                                        // NORMAL
                                            var var38 = local_3_INT; // type is INT value type is INT
                                            var var40 = thisRef.normals.data.length; // type is INT value type is INT
                                            if ((var38 >= var40)) {
                                                return;
                                            }
                                            }
                                        var var101 = thisRef.normals; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@22617754
                                        var var102 = local_3_INT; // type is INT value type is INT
                                        var var103 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
                                        ojcVec2.VOIDinit(var103);
                                        var101.data[var102] = var103;
                                        local_3_INT = (local_3_INT + 1); // type is INT value type is INT
                                        __label__ = 366;
                                        continue $L_366;
                                    }
                                case 156 :
                                // NORMAL
                                    $S_156 : {
                                    // NORMAL
                                        var var17 = def.joints.INTsize(def.joints); // type is INT value type is INT
                                        var var19 = def.bodies.INTsize(def.bodies); // type is INT value type is INT
                                        if ((var17 == var19)) {
                                            __label__ = 183;
                                            continue $M_156_183;
                                        }
                                        }
                                    var var77 = new jlIllegalArgumentException.Create(); // type is REFERENCE value type is REFERENCE
                                    jlIllegalArgumentException.VOIDinitjlString(var77,bytecoder.stringpool[59]);
                                    throw var77;
                            }
                    }
                }
        }
    },

    FLOATgetBodyArea : function(thisRef) {
        var var18 = null; // type is INT # of inits = 2
        var local_1_FLOAT = null; // type is FLOAT # of inits = 4
        var local_2_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_1_FLOAT = 0.0; // type is FLOAT value type is FLOAT
            local_2_INT = 0; // type is INT value type is INT
            __label__ = 4;
            }
        $L_4 : for (;;) {
            $S_4 : {
            // NORMAL
                var var4 = local_2_INT; // type is INT value type is INT
                var var7 = (thisRef.bodies.data.length - 1); // type is INT value type is INT
                if ((var4 >= var7)) {
                    __label__ = 94;
                    break $S_4;
                }
                __label__ = 15;
                }
            for(;;) switch (__label__) {
                case 15 :
                // NORMAL
                    $S_15 : {
                    // NORMAL
                        var var12 = local_2_INT; // type is INT value type is INT
                        var var15 = (thisRef.bodies.data.length - 1); // type is INT value type is INT
                        if ((var12 != var15)) {
                            __label__ = 30;
                            break $S_15;
                        }
                        __label__ = 26;
                        }
                    $M_26_30 : for(;;) switch (__label__) {
                        case 26 :
                        // NORMAL
                            var18 = 0; // type is INT value type is INT
                            break $M_26_30;
                        case 30 :
                        // NORMAL
                            var18 = (local_2_INT + 1); // type is INT value type is INT
                            break $M_26_30;
                    }
                    var local_3_INT = var18; // type is INT value type is INT
                    var var21 = local_1_FLOAT; // type is FLOAT value type is FLOAT
                    var var24 = thisRef.bodies.data[local_2_INT]; // type is REFERENCE value type is REFERENCE
                    var var25 = var24.ojcVec2getWorldCenter(var24); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@31161f13
                    var var26 = var25.x; // type is FLOAT value type is FLOAT
                    var var29 = thisRef.bodies.data[local_3_INT]; // type is REFERENCE value type is REFERENCE
                    var var30 = var29.ojcVec2getWorldCenter(var29); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@26951c03
                    var var32 = (var26 * var30.y); // type is FLOAT value type is FLOAT
                    var var35 = thisRef.bodies.data[local_3_INT]; // type is REFERENCE value type is REFERENCE
                    var var36 = var35.ojcVec2getWorldCenter(var35); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@19853b58
                    var var37 = var36.x; // type is FLOAT value type is FLOAT
                    var var40 = thisRef.bodies.data[local_2_INT]; // type is REFERENCE value type is REFERENCE
                    var var41 = var40.ojcVec2getWorldCenter(var40); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5ffc41bd
                    local_1_FLOAT = (var21 + (var32 - (var37 * var41.y))); // type is FLOAT value type is FLOAT
                    local_2_INT = (local_2_INT + 1); // type is INT value type is INT
                    __label__ = 4;
                    continue $L_4;
                case 94 :
                // NORMAL
                    local_1_FLOAT = (local_1_FLOAT * 0.5); // type is FLOAT value type is FLOAT
                    return local_1_FLOAT;
            }
        }
    },

    VOIDinitVelocityConstraintsojdSolverData : function(thisRef,step) {
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 2
        var var20 = null; // type is INT # of inits = 2
        var local_6_INT = null; // type is INT # of inits = 1
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_5_INT = null; // type is INT # of inits = 6
        var var29 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_2_REFERENCE = step.velocities; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3d21be0a
            local_3_REFERENCE = step.positions; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@50b85e13
            var var7 = thisRef.pool.A1ojcVec2getVec2ArrayINT(thisRef.pool,thisRef.bodies.data.length); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@be26f46
            local_4_REFERENCE = var7; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@6c5f57f4
            local_5_INT = 0; // type is INT value type is INT
            __label__ = 29;
            }
        $L_29 : for (;;) {
            $S_29 : {
            // NORMAL
                var var11 = local_5_INT; // type is INT value type is INT
                var var13 = thisRef.bodies.data.length; // type is INT value type is INT
                if ((var11 >= var13)) {
                    __label__ = 136;
                    break $S_29;
                }
                __label__ = 39;
                }
            for(;;) switch (__label__) {
                case 39 :
                // NORMAL
                    $S_39 : {
                    // NORMAL
                        var var14 = local_5_INT; // type is INT value type is INT
                        if ((var14 != 0)) {
                            __label__ = 54;
                            break $S_39;
                        }
                        __label__ = 44;
                        }
                    $M_44_54 : for(;;) switch (__label__) {
                        case 54 :
                        // NORMAL
                            var20 = (local_5_INT - 1); // type is INT value type is INT
                            break $M_44_54;
                        case 44 :
                        // NORMAL
                            var20 = (thisRef.bodies.data.length - 1); // type is INT value type is INT
                            break $M_44_54;
                    }
                    $S_58 : {
                    // NORMAL
                        local_6_INT = var20; // type is INT value type is INT
                        var var23 = local_5_INT; // type is INT value type is INT
                        var var26 = (thisRef.bodies.data.length - 1); // type is INT value type is INT
                        if ((var23 != var26)) {
                            __label__ = 76;
                            break $S_58;
                        }
                        __label__ = 72;
                        }
                    $M_72_76 : for(;;) switch (__label__) {
                        case 72 :
                        // NORMAL
                            var29 = 0; // type is INT value type is INT
                            break $M_72_76;
                        case 76 :
                        // NORMAL
                            var29 = (local_5_INT + 1); // type is INT value type is INT
                            break $M_72_76;
                    }
                    var local_7_INT = var29; // type is INT value type is INT
                    var var34 = local_4_REFERENCE.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                    var var35 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@7536f525
                    var var38 = thisRef.bodies.data[local_7_INT]; // type is REFERENCE value type is REFERENCE
                    var var40 = var35.data[var38.m_islandIndex]; // type is REFERENCE value type is REFERENCE
                    var var42 = var34.ojcVec2setojcVec2(var34,var40.c); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@68b57c39
                    var var45 = local_4_REFERENCE.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                    var var46 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@7536f525
                    var var49 = thisRef.bodies.data[local_6_INT]; // type is REFERENCE value type is REFERENCE
                    var var51 = var46.data[var49.m_islandIndex]; // type is REFERENCE value type is REFERENCE
                    var var53 = var45.ojcVec2subLocalojcVec2(var45,var51.c); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@58d44ecb
                    local_5_INT = (local_5_INT + 1); // type is INT value type is INT
                    __label__ = 29;
                    continue $L_29;
                case 136 :
                // NORMAL
                    $S_136 : {
                    // NORMAL
                        var var55 = step.step.warmStarting; // type is BOOLEAN value type is BOOLEAN
                        if ((var55 == 0)) {
                            __label__ = 285;
                            break $S_136;
                        }
                        __label__ = 146;
                        }
                    for(;;) switch (__label__) {
                        case 146 :
                        // NORMAL
                            $S_146 : {
                            // NORMAL
                                var var59 = (thisRef.m_impulse * step.step.dtRatio); // type is FLOAT value type is FLOAT
                                thisRef.m_impulse = var59;
                                local_5_INT = 0; // type is INT value type is INT
                                __label__ = 165;
                                }
                            $L_165 : for (;;) {
                                $S_165 : {
                                // NORMAL
                                    var var61 = local_5_INT; // type is INT value type is INT
                                    var var63 = thisRef.bodies.data.length; // type is INT value type is INT
                                    if ((var61 >= var63)) {
                                        __label__ = 282;
                                        break $S_165;
                                    }
                                    __label__ = 175;
                                    }
                                for(;;) switch (__label__) {
                                    case 175 :
                                    // NORMAL
                                        var var64 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1b51d86a
                                        var var67 = thisRef.bodies.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                                        var var69 = var64.data[var67.m_islandIndex]; // type is REFERENCE value type is REFERENCE
                                        var var70 = var69.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4a8edb04
                                        var var71 = var70.x; // type is FLOAT value type is FLOAT
                                        var var74 = thisRef.bodies.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                                        var var75 = var74.m_invMass; // type is FLOAT value type is FLOAT
                                        var var78 = local_4_REFERENCE.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                                        var var84 = (var71 + (((var75 * var78.y) * 0.5) * thisRef.m_impulse)); // type is FLOAT value type is FLOAT
                                        var70.x = var84;
                                        var var85 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1b51d86a
                                        var var88 = thisRef.bodies.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                                        var var90 = var85.data[var88.m_islandIndex]; // type is REFERENCE value type is REFERENCE
                                        var var91 = var90.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@528e054c
                                        var var92 = var91.y; // type is FLOAT value type is FLOAT
                                        var var95 = thisRef.bodies.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                                        var var96 = var95.m_invMass; // type is FLOAT value type is FLOAT
                                        var var99 = local_4_REFERENCE.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                                        var var106 = (var92 + (((var96 * (-var99.x)) * 0.5) * thisRef.m_impulse)); // type is FLOAT value type is FLOAT
                                        var91.y = var106;
                                        local_5_INT = (local_5_INT + 1); // type is INT value type is INT
                                        __label__ = 165;
                                        continue $L_165;
                                    case 282 :
                                    // NORMAL
                                        return;
                                }
                            }
                        case 285 :
                        // NORMAL
                            thisRef.m_impulse = 0.0;
                            return;
                    }
            }
        }
    },

    VOIDsolveVelocityConstraintsojdSolverData : function(thisRef,step) {
        var local_7_FLOAT = null; // type is FLOAT # of inits = 2
        var local_8_INT = null; // type is INT # of inits = 4
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_7_INT = null; // type is INT # of inits = 3
        var local_3_FLOAT = null; // type is FLOAT # of inits = 3
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 3
        var var81 = null; // type is INT # of inits = 2
        var var89 = null; // type is INT # of inits = 2
        var local_2_FLOAT = null; // type is FLOAT # of inits = 3
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_2_FLOAT = 0.0; // type is FLOAT value type is FLOAT
            local_3_FLOAT = 0.0; // type is FLOAT value type is FLOAT
            local_4_REFERENCE = step.velocities; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@131fac91
            local_5_REFERENCE = step.positions; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@20c15072
            var var11 = thisRef.pool.A1ojcVec2getVec2ArrayINT(thisRef.pool,thisRef.bodies.data.length); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@4167c92f
            local_6_REFERENCE = var11; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@4f75c6c8
            local_7_INT = 0; // type is INT value type is INT
            __label__ = 35;
            }
        $L_35 : for (;;) {
            $S_35 : {
            // NORMAL
                var var15 = local_7_INT; // type is INT value type is INT
                var var17 = thisRef.bodies.data.length; // type is INT value type is INT
                if ((var15 >= var17)) {
                    __label__ = 193;
                    break $S_35;
                }
                __label__ = 45;
                }
            for(;;) switch (__label__) {
                case 45 :
                // NORMAL
                    $S_45 : {
                    // NORMAL
                        var var75 = local_7_INT; // type is INT value type is INT
                        if ((var75 != 0)) {
                            __label__ = 60;
                            break $S_45;
                        }
                        __label__ = 50;
                        }
                    $M_50_60 : for(;;) switch (__label__) {
                        case 50 :
                        // NORMAL
                            var81 = (thisRef.bodies.data.length - 1); // type is INT value type is INT
                            break $M_50_60;
                        case 60 :
                        // NORMAL
                            var81 = (local_7_INT - 1); // type is INT value type is INT
                            break $M_50_60;
                    }
                    $S_64 : {
                    // NORMAL
                        local_8_INT = var81; // type is INT value type is INT
                        var var83 = local_7_INT; // type is INT value type is INT
                        var var86 = (thisRef.bodies.data.length - 1); // type is INT value type is INT
                        if ((var83 != var86)) {
                            __label__ = 82;
                            break $S_64;
                        }
                        __label__ = 78;
                        }
                    $M_82_78 : for(;;) switch (__label__) {
                        case 82 :
                        // NORMAL
                            var89 = (local_7_INT + 1); // type is INT value type is INT
                            break $M_82_78;
                        case 78 :
                        // NORMAL
                            var89 = 0; // type is INT value type is INT
                            break $M_82_78;
                    }
                    var local_9_INT = var89; // type is INT value type is INT
                    var var94 = local_6_REFERENCE.data[local_7_INT]; // type is REFERENCE value type is REFERENCE
                    var var95 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@20a746e
                    var var98 = thisRef.bodies.data[local_9_INT]; // type is REFERENCE value type is REFERENCE
                    var var100 = var95.data[var98.m_islandIndex]; // type is REFERENCE value type is REFERENCE
                    var var102 = var94.ojcVec2setojcVec2(var94,var100.c); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@26dd75f
                    var var105 = local_6_REFERENCE.data[local_7_INT]; // type is REFERENCE value type is REFERENCE
                    var var106 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@20a746e
                    var var109 = thisRef.bodies.data[local_8_INT]; // type is REFERENCE value type is REFERENCE
                    var var111 = var106.data[var109.m_islandIndex]; // type is REFERENCE value type is REFERENCE
                    var var113 = var105.ojcVec2subLocalojcVec2(var105,var111.c); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6c7898a7
                    var var114 = local_3_FLOAT; // type is FLOAT value type is FLOAT
                    var var117 = local_6_REFERENCE.data[local_7_INT]; // type is REFERENCE value type is REFERENCE
                    var var118 = var117.FLOATlengthSquared(var117); // type is FLOAT value type is FLOAT
                    var var121 = thisRef.bodies.data[local_7_INT]; // type is REFERENCE value type is REFERENCE
                    var var122 = var121.FLOATgetMass(var121); // type is FLOAT value type is FLOAT
                    local_3_FLOAT = (var114 + (var118 / var122)); // type is FLOAT value type is FLOAT
                    var var126 = local_2_FLOAT; // type is FLOAT value type is FLOAT
                    var var127 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@73554c9b
                    var var130 = thisRef.bodies.data[local_7_INT]; // type is REFERENCE value type is REFERENCE
                    var var132 = var127.data[var130.m_islandIndex]; // type is REFERENCE value type is REFERENCE
                    var var133 = var132.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4690079a
                    var var136 = local_6_REFERENCE.data[local_7_INT]; // type is REFERENCE value type is REFERENCE
                    var var137 = ojcVec2.FLOATcrossojcVec2ojcVec2(var133,var136); // type is FLOAT value type is FLOAT
                    local_2_FLOAT = (var126 + var137); // type is FLOAT value type is FLOAT
                    local_7_INT = (local_7_INT + 1); // type is INT value type is INT
                    __label__ = 35;
                    continue $L_35;
                case 193 :
                // NORMAL
                    $S_193 : {
                    // NORMAL
                        local_7_FLOAT = ((-2.0 * local_2_FLOAT) / local_3_FLOAT); // type is FLOAT value type is FLOAT
                        var var26 = (thisRef.m_impulse + local_7_FLOAT); // type is FLOAT value type is FLOAT
                        thisRef.m_impulse = var26;
                        local_8_INT = 0; // type is INT value type is INT
                        __label__ = 215;
                        }
                    $L_215 : for (;;) {
                        $S_215 : {
                        // NORMAL
                            var var29 = local_8_INT; // type is INT value type is INT
                            var var31 = thisRef.bodies.data.length; // type is INT value type is INT
                            if ((var29 >= var31)) {
                                return;
                            }
                            }
                        var var32 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@73554c9b
                        var var35 = thisRef.bodies.data[local_8_INT]; // type is REFERENCE value type is REFERENCE
                        var var37 = var32.data[var35.m_islandIndex]; // type is REFERENCE value type is REFERENCE
                        var var38 = var37.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@394190d6
                        var var39 = var38.x; // type is FLOAT value type is FLOAT
                        var var42 = thisRef.bodies.data[local_8_INT]; // type is REFERENCE value type is REFERENCE
                        var var43 = var42.m_invMass; // type is FLOAT value type is FLOAT
                        var var46 = local_6_REFERENCE.data[local_8_INT]; // type is REFERENCE value type is REFERENCE
                        var var52 = (var39 + (((var43 * var46.y) * 0.5) * local_7_FLOAT)); // type is FLOAT value type is FLOAT
                        var38.x = var52;
                        var var53 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@73554c9b
                        var var56 = thisRef.bodies.data[local_8_INT]; // type is REFERENCE value type is REFERENCE
                        var var58 = var53.data[var56.m_islandIndex]; // type is REFERENCE value type is REFERENCE
                        var var59 = var58.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@557a7f8e
                        var var60 = var59.y; // type is FLOAT value type is FLOAT
                        var var63 = thisRef.bodies.data[local_8_INT]; // type is REFERENCE value type is REFERENCE
                        var var64 = var63.m_invMass; // type is FLOAT value type is FLOAT
                        var var67 = local_6_REFERENCE.data[local_8_INT]; // type is REFERENCE value type is REFERENCE
                        var var74 = (var60 + (((var64 * (-var67.x)) * 0.5) * local_7_FLOAT)); // type is FLOAT value type is FLOAT
                        var59.y = var74;
                        local_8_INT = (local_8_INT + 1); // type is INT value type is INT
                        __label__ = 215;
                        continue $L_215;
                    }
            }
        }
    },

    BOOLEANsolvePositionConstraintsojdSolverData : function(thisRef,step) {
        var __label__ = null;
        var var1 = thisRef.BOOLEANconstrainEdgesA1ojdcPosition(thisRef,step.positions); // type is BOOLEAN value type is BOOLEAN
        return var1;
    },

    BOOLEANconstrainEdgesA1ojdcPosition : function(thisRef,positions) {
        var local_3_INT = null; // type is INT # of inits = 3
        var local_6_FLOAT = null; // type is FLOAT # of inits = 1
        var var108 = null; // type is INT # of inits = 2
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_6_INT = null; // type is INT # of inits = 3
        var local_8_INT = null; // type is INT # of inits = 1
        var local_5_FLOAT = null; // type is FLOAT # of inits = 3
        var local_2_FLOAT = null; // type is FLOAT # of inits = 3
        var local_9_FLOAT = null; // type is FLOAT # of inits = 1
        var local_7_INT = null; // type is INT # of inits = 3
        var var13 = null; // type is INT # of inits = 2
        var local_7_FLOAT = null; // type is FLOAT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_2_FLOAT = 0.0; // type is FLOAT value type is FLOAT
            local_3_INT = 0; // type is INT value type is INT
            __label__ = 4;
            }
        $L_4 : for (;;) {
            $S_4 : {
            // NORMAL
                var var4 = local_3_INT; // type is INT value type is INT
                var var6 = thisRef.bodies.data.length; // type is INT value type is INT
                if ((var4 >= var6)) {
                    __label__ = 176;
                    break $S_4;
                }
                __label__ = 13;
                }
            for(;;) switch (__label__) {
                case 13 :
                // NORMAL
                    $S_13 : {
                    // NORMAL
                        var var7 = local_3_INT; // type is INT value type is INT
                        var var10 = (thisRef.bodies.data.length - 1); // type is INT value type is INT
                        if ((var7 != var10)) {
                            __label__ = 28;
                            break $S_13;
                        }
                        __label__ = 24;
                        }
                    $M_28_24 : for(;;) switch (__label__) {
                        case 24 :
                        // NORMAL
                            var13 = 0; // type is INT value type is INT
                            break $M_28_24;
                        case 28 :
                        // NORMAL
                            var13 = (local_3_INT + 1); // type is INT value type is INT
                            break $M_28_24;
                    }
                    $S_31 : {
                    // NORMAL
                        var local_4_INT = var13; // type is INT value type is INT
                        var var18 = thisRef.bodies.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                        var var20 = positions.data[var18.m_islandIndex]; // type is REFERENCE value type is REFERENCE
                        var var22 = var20.c.x; // type is FLOAT value type is FLOAT
                        var var25 = thisRef.bodies.data[local_3_INT]; // type is REFERENCE value type is REFERENCE
                        var var27 = positions.data[var25.m_islandIndex]; // type is REFERENCE value type is REFERENCE
                        local_5_FLOAT = (var22 - var27.c.x); // type is FLOAT value type is FLOAT
                        var var35 = thisRef.bodies.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                        var var37 = positions.data[var35.m_islandIndex]; // type is REFERENCE value type is REFERENCE
                        var var39 = var37.c.y; // type is FLOAT value type is FLOAT
                        var var42 = thisRef.bodies.data[local_3_INT]; // type is REFERENCE value type is REFERENCE
                        var var44 = positions.data[var42.m_islandIndex]; // type is REFERENCE value type is REFERENCE
                        local_6_FLOAT = (var39 - var44.c.y); // type is FLOAT value type is FLOAT
                        var var57 = ojcMathUtils.FLOATsqrtFLOAT(((local_5_FLOAT * local_5_FLOAT) + (local_6_FLOAT * local_6_FLOAT))); // type is FLOAT value type is FLOAT
                        local_7_FLOAT = var57; // type is FLOAT value type is FLOAT
                        var var60 = local_7_FLOAT; // type is FLOAT value type is FLOAT
                        if ((var60 >= 1.1920929E-7)) {
                            __label__ = 136;
                            break $S_31;
                        }
                        __label__ = 133;
                        }
                    $M_136_133 : for(;;) switch (__label__) {
                        case 133 :
                        // NORMAL
                            local_7_FLOAT = 1.0; // type is FLOAT value type is FLOAT
                            __label__ = 136;
                            continue $M_136_133;
                        case 136 :
                        // NORMAL
                            var var65 = thisRef.normals.data[local_3_INT]; // type is REFERENCE value type is REFERENCE
                            var var68 = (local_6_FLOAT / local_7_FLOAT); // type is FLOAT value type is FLOAT
                            var65.x = var68;
                            var var71 = thisRef.normals.data[local_3_INT]; // type is REFERENCE value type is REFERENCE
                            var var75 = ((-local_5_FLOAT) / local_7_FLOAT); // type is FLOAT value type is FLOAT
                            var71.y = var75;
                            local_2_FLOAT = (local_2_FLOAT + local_7_FLOAT); // type is FLOAT value type is FLOAT
                            local_3_INT = (local_3_INT + 1); // type is INT value type is INT
                            __label__ = 4;
                            continue $L_4;
                    }
                case 176 :
                // NORMAL
                    $S_176 : {
                    // NORMAL
                        var var81 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@228019c3
                        local_3_REFERENCE = var81; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3d8314d0
                        var var83 = thisRef.targetVolume; // type is FLOAT value type is FLOAT
                        var var84 = thisRef.FLOATgetSolverAreaA1ojdcPosition(thisRef,positions); // type is FLOAT value type is FLOAT
                        var local_4_FLOAT = (var83 - var84); // type is FLOAT value type is FLOAT
                        local_5_FLOAT = ((0.5 * local_4_FLOAT) / local_2_FLOAT); // type is FLOAT value type is FLOAT
                        local_6_INT = 1; // type is INT value type is INT
                        local_7_INT = 0; // type is INT value type is INT
                        __label__ = 213;
                        }
                    $L_213 : for (;;) {
                        $S_213 : {
                        // NORMAL
                            var var97 = local_7_INT; // type is INT value type is INT
                            var var99 = thisRef.bodies.data.length; // type is INT value type is INT
                            if ((var97 >= var99)) {
                                __label__ = 396;
                                break $S_213;
                            }
                            __label__ = 223;
                            }
                        for(;;) switch (__label__) {
                            case 223 :
                            // NORMAL
                                $S_223 : {
                                // NORMAL
                                    var var102 = local_7_INT; // type is INT value type is INT
                                    var var105 = (thisRef.bodies.data.length - 1); // type is INT value type is INT
                                    if ((var102 != var105)) {
                                        __label__ = 239;
                                        break $S_223;
                                    }
                                    __label__ = 235;
                                    }
                                $M_239_235 : for(;;) switch (__label__) {
                                    case 239 :
                                    // NORMAL
                                        var108 = (local_7_INT + 1); // type is INT value type is INT
                                        break $M_239_235;
                                    case 235 :
                                    // NORMAL
                                        var108 = 0; // type is INT value type is INT
                                        break $M_239_235;
                                }
                                $S_243 : {
                                // NORMAL
                                    local_8_INT = var108; // type is INT value type is INT
                                    var var111 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3d8314d0
                                    var var112 = local_5_FLOAT; // type is FLOAT value type is FLOAT
                                    var var115 = thisRef.normals.data[local_7_INT]; // type is REFERENCE value type is REFERENCE
                                    var var116 = var115.x; // type is FLOAT value type is FLOAT
                                    var var119 = thisRef.normals.data[local_8_INT]; // type is REFERENCE value type is REFERENCE
                                    var var122 = (var112 * (var116 + var119.x)); // type is FLOAT value type is FLOAT
                                    var var123 = local_5_FLOAT; // type is FLOAT value type is FLOAT
                                    var var126 = thisRef.normals.data[local_7_INT]; // type is REFERENCE value type is REFERENCE
                                    var var127 = var126.y; // type is FLOAT value type is FLOAT
                                    var var130 = thisRef.normals.data[local_8_INT]; // type is REFERENCE value type is REFERENCE
                                    var var134 = var111.ojcVec2setFLOATFLOAT(var111,var122,(var123 * (var127 + var130.y))); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@30573179
                                    var var136 = local_3_REFERENCE.FLOATlengthSquared(local_3_REFERENCE); // type is FLOAT value type is FLOAT
                                    local_9_FLOAT = var136; // type is FLOAT value type is FLOAT
                                    var var139 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                                    if ((var139 <= 0.040000003)) {
                                        __label__ = 325;
                                        break $S_243;
                                    }
                                    __label__ = 312;
                                    }
                                $M_312_325 : for(;;) switch (__label__) {
                                    case 312 :
                                    // NORMAL
                                        var var141 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3d8314d0
                                        var var143 = ojcMathUtils.FLOATsqrtFLOAT(local_9_FLOAT); // type is FLOAT value type is FLOAT
                                        var var145 = var141.ojcVec2mulLocalFLOAT(var141,(0.2 / var143)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@36b79d5e
                                        __label__ = 325;
                                        continue $M_312_325;
                                    case 325 :
                                    // NORMAL
                                        $S_325 : {
                                        // NORMAL
                                            var var146 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                                            if ((var146 <= 2.5E-5)) {
                                                __label__ = 336;
                                                break $S_325;
                                            }
                                            __label__ = 333;
                                            }
                                        $M_333_336 : for(;;) switch (__label__) {
                                            case 333 :
                                            // NORMAL
                                                local_6_INT = 0; // type is INT value type is INT
                                                __label__ = 336;
                                                continue $M_333_336;
                                            case 336 :
                                            // NORMAL
                                                var var151 = thisRef.bodies.data[local_8_INT]; // type is REFERENCE value type is REFERENCE
                                                var var153 = positions.data[var151.m_islandIndex]; // type is REFERENCE value type is REFERENCE
                                                var var154 = var153.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2106224c
                                                var var158 = (var154.x + local_3_REFERENCE.x); // type is FLOAT value type is FLOAT
                                                var154.x = var158;
                                                var var161 = thisRef.bodies.data[local_8_INT]; // type is REFERENCE value type is REFERENCE
                                                var var163 = positions.data[var161.m_islandIndex]; // type is REFERENCE value type is REFERENCE
                                                var var164 = var163.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3ea79ae
                                                var var168 = (var164.y + local_3_REFERENCE.y); // type is FLOAT value type is FLOAT
                                                var164.y = var168;
                                                local_7_INT = (local_7_INT + 1); // type is INT value type is INT
                                                __label__ = 213;
                                                continue $L_213;
                                        }
                                }
                            case 396 :
                            // NORMAL
                                thisRef.pool.VOIDpushVec2INT(thisRef.pool,1);
                                return local_6_INT;
                        }
                    }
            }
        }
    },

    FLOATgetSolverAreaA1ojdcPosition : function(thisRef,positions) {
        var local_2_FLOAT = null; // type is FLOAT # of inits = 4
        var local_3_INT = null; // type is INT # of inits = 3
        var var17 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_2_FLOAT = 0.0; // type is FLOAT value type is FLOAT
            local_3_INT = 0; // type is INT value type is INT
            __label__ = 4;
            }
        $L_4 : for (;;) {
            $S_4 : {
            // NORMAL
                var var4 = local_3_INT; // type is INT value type is INT
                var var6 = thisRef.bodies.data.length; // type is INT value type is INT
                if ((var4 >= var6)) {
                    __label__ = 115;
                    break $S_4;
                }
                __label__ = 13;
                }
            for(;;) switch (__label__) {
                case 13 :
                // NORMAL
                    $S_13 : {
                    // NORMAL
                        var var11 = local_3_INT; // type is INT value type is INT
                        var var14 = (thisRef.bodies.data.length - 1); // type is INT value type is INT
                        if ((var11 != var14)) {
                            __label__ = 28;
                            break $S_13;
                        }
                        __label__ = 24;
                        }
                    $M_24_28 : for(;;) switch (__label__) {
                        case 28 :
                        // NORMAL
                            var17 = (local_3_INT + 1); // type is INT value type is INT
                            break $M_24_28;
                        case 24 :
                        // NORMAL
                            var17 = 0; // type is INT value type is INT
                            break $M_24_28;
                    }
                    var local_4_INT = var17; // type is INT value type is INT
                    var var20 = local_2_FLOAT; // type is FLOAT value type is FLOAT
                    var var23 = thisRef.bodies.data[local_3_INT]; // type is REFERENCE value type is REFERENCE
                    var var25 = positions.data[var23.m_islandIndex]; // type is REFERENCE value type is REFERENCE
                    var var27 = var25.c.x; // type is FLOAT value type is FLOAT
                    var var30 = thisRef.bodies.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                    var var32 = positions.data[var30.m_islandIndex]; // type is REFERENCE value type is REFERENCE
                    var var35 = (var27 * var32.c.y); // type is FLOAT value type is FLOAT
                    var var38 = thisRef.bodies.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                    var var40 = positions.data[var38.m_islandIndex]; // type is REFERENCE value type is REFERENCE
                    var var42 = var40.c.x; // type is FLOAT value type is FLOAT
                    var var45 = thisRef.bodies.data[local_3_INT]; // type is REFERENCE value type is REFERENCE
                    var var47 = positions.data[var45.m_islandIndex]; // type is REFERENCE value type is REFERENCE
                    local_2_FLOAT = (var20 + (var35 - (var42 * var47.c.y))); // type is FLOAT value type is FLOAT
                    local_3_INT = (local_3_INT + 1); // type is INT value type is INT
                    __label__ = 4;
                    continue $L_4;
                case 115 :
                // NORMAL
                    local_2_FLOAT = (local_2_FLOAT * 0.5); // type is FLOAT value type is FLOAT
                    return local_2_FLOAT;
            }
        }
    },

    classInitCheck : function() {
        if (!ojdjConstantVolumeJoint.__initialized) {
            ojdjConstantVolumeJoint.__initialized = true;
            var thePrototype = ojdjConstantVolumeJoint.Create.prototype;
            thePrototype.instanceOf = ojdjConstantVolumeJoint.instanceOf;
            thePrototype.ClassgetClass = ojdjConstantVolumeJoint.ClassgetClass;
            thePrototype.FLOATgetSolverAreaA1ojdcPosition = ojdjConstantVolumeJoint.FLOATgetSolverAreaA1ojdcPosition;
            thePrototype.BOOLEANconstrainEdgesA1ojdcPosition = ojdjConstantVolumeJoint.BOOLEANconstrainEdgesA1ojdcPosition;
            thePrototype.BOOLEANsolvePositionConstraintsojdSolverData = ojdjConstantVolumeJoint.BOOLEANsolvePositionConstraintsojdSolverData;
            thePrototype.VOIDsolveVelocityConstraintsojdSolverData = ojdjConstantVolumeJoint.VOIDsolveVelocityConstraintsojdSolverData;
            thePrototype.VOIDinitVelocityConstraintsojdSolverData = ojdjConstantVolumeJoint.VOIDinitVelocityConstraintsojdSolverData;
            thePrototype.FLOATgetBodyArea = ojdjConstantVolumeJoint.FLOATgetBodyArea;
            thePrototype.BOOLEANgetCollideConnected = ojdjJoint.BOOLEANgetCollideConnected;
            thePrototype.ojdBodygetBodyB = ojdjJoint.ojdBodygetBodyB;
            thePrototype.ojdBodygetBodyA = ojdjJoint.ojdBodygetBodyA;
            thePrototype.ojdjJointTypegetType = ojdjJoint.ojdjJointTypegetType;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojdjJoint.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var ojdjConstantVolumeJointDef = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 170,
    __implementedTypes : [146,170,1],

    Create : function() {
        this.type = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.userData = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.bodyA = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.bodyB = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.collideConnected = false; // declared in org.jbox2d.dynamics.joints.JointDef
        this.bodies = null; // declared in org.jbox2d.dynamics.joints.ConstantVolumeJointDef
        this.joints = null; // declared in org.jbox2d.dynamics.joints.ConstantVolumeJointDef
        this.frequencyHz = 0; // declared in org.jbox2d.dynamics.joints.ConstantVolumeJointDef
        this.dampingRatio = 0; // declared in org.jbox2d.dynamics.joints.ConstantVolumeJointDef
    },

    instanceOf : function(aType) {
        return ojdjConstantVolumeJointDef.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdjConstantVolumeJointDef;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        ojdjJointDef.VOIDinit(thisRef);
        var var0 = ojdjJointType.CONSTANT_VOLUME; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6b09c85e
        thisRef.type = var0;
        var var1 = new juArrayList.Create(); // type is REFERENCE value type is REFERENCE
        juArrayList.VOIDinit(var1);
        thisRef.bodies = var1;
        thisRef.joints = null;
        thisRef.collideConnected = 0;
        thisRef.frequencyHz = 0.0;
        thisRef.dampingRatio = 0.0;
        return;
    },

    classInitCheck : function() {
        if (!ojdjConstantVolumeJointDef.__initialized) {
            ojdjConstantVolumeJointDef.__initialized = true;
            var thePrototype = ojdjConstantVolumeJointDef.Create.prototype;
            thePrototype.instanceOf = ojdjConstantVolumeJointDef.instanceOf;
            thePrototype.ClassgetClass = ojdjConstantVolumeJointDef.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojdjJointDef.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var juArrayList = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 171,
    __implementedTypes : [177,23,174,171,176,175,2,172,173,1],
    EMPTY_ELEMENTDATA : null, // declared in java.util.ArrayList
    DEFAULTCAPACITY_EMPTY_ELEMENTDATA : null, // declared in java.util.ArrayList

    Create : function() {
        this.modCount = 0; // declared in java.util.AbstractList
        this.size = 0; // declared in java.util.ArrayList
        this.elementData = null; // declared in java.util.ArrayList
    },

    instanceOf : function(aType) {
        return juArrayList.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return juArrayList;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    A1jlObjectfinishToArrayA1jlObjectjuIterator : function(p0,p1) {
         return juAbstractCollection.A1jlObjectfinishToArrayA1jlObjectjuIterator(p0,p1);
    },

    INThugeCapacityINT : function(p0) {
         return juAbstractCollection.INThugeCapacityINT(p0);
    },

    juListofA1jlObject : function(p0) {
         return juList.juListofA1jlObject(p0);
    },

    VOIDclinit : function() {
        var __label__ = null;
        var var0 = bytecoder.newArray(0,null); // type is REFERENCE value type is REFERENCE
        juArrayList.EMPTY_ELEMENTDATA = var0;
        var var1 = bytecoder.newArray(0,null); // type is REFERENCE value type is REFERENCE
        juArrayList.DEFAULTCAPACITY_EMPTY_ELEMENTDATA = var1;
        return;
    },

    INTsize : function(thisRef) {
        var __label__ = null;
        return thisRef.size;
    },

    A1jlObjecttoArrayA1jlObject : function(thisRef,a) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = a.data.length; // type is INT value type is INT
            var var1 = thisRef.size; // type is INT value type is INT
            if ((var0 >= var1)) {
                __label__ = 25;
                break $S_0;
            }
            __label__ = 9;
            }
        for(;;) switch (__label__) {
            case 9 :
            // NORMAL
                var var10 = juArrays.A1jlObjectcopyOfA1jlObjectINTjlClass(thisRef.elementData,thisRef.size,a.ClassgetClass()); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@7c373488
                return var10;
            case 25 :
            // NORMAL
                $S_25 : {
                // NORMAL
                    jlSystem.VOIDarraycopyjlObjectINTjlObjectINTINT(thisRef.elementData,0,a,0,thisRef.size);
                    var var4 = a.data.length; // type is INT value type is INT
                    var var5 = thisRef.size; // type is INT value type is INT
                    if ((var4 <= var5)) {
                        return a;
                    }
                    }
                var var6 = thisRef.size; // type is INT value type is INT
                a.data[var6] = null;
                return a;
        }
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        juAbstractList.VOIDinit(thisRef);
        var var0 = juArrayList.DEFAULTCAPACITY_EMPTY_ELEMENTDATA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@5d9ac716
        thisRef.elementData = var0;
        return;
    },

    INThashCode : function(thisRef) {
        var __label__ = null;
        var local_1_INT = thisRef.modCount; // type is INT value type is INT
        var var4 = thisRef.INThashCodeRangeINTINT(thisRef,0,thisRef.size); // type is INT value type is INT
        var local_2_INT = var4; // type is INT value type is INT
        thisRef.VOIDcheckForComodificationINT(thisRef,local_1_INT);
        return local_2_INT;
    },

    INThashCodeRangeINTINT : function(thisRef,from,to) {
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 2
        var var13 = null; // type is INT # of inits = 1
        var local_4_INT = null; // type is INT # of inits = 3
        var var17 = null; // type is INT # of inits = 2
        var local_5_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_3_REFERENCE = thisRef.elementData; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@61ddd854
            var var3 = local_3_REFERENCE.data.length; // type is INT value type is INT
            if ((to <= var3)) {
                __label__ = 19;
                break $S_0;
            }
            __label__ = 11;
            }
        for(;;) switch (__label__) {
            case 19 :
            // NORMAL
                $S_19 : {
                // NORMAL
                    local_4_INT = 1; // type is INT value type is INT
                    local_5_INT = from; // type is INT value type is INT
                    __label__ = 25;
                    }
                $L_25 : for (;;) {
                    $S_25 : {
                    // NORMAL
                        var var7 = local_5_INT; // type is INT value type is INT
                        if ((var7 >= to)) {
                            return local_4_INT;
                        }
                        }
                    $S_31 : {
                    // NORMAL
                        var var10 = local_3_REFERENCE.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                        local_6_REFERENCE = var10; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@659ea839
                        var13 = (31 * local_4_INT); // type is INT value type is INT
                        var var14 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@659ea839
                        if (var14 != null ) {
                            __label__ = 51;
                            break $S_31;
                        }
                        __label__ = 47;
                        }
                    $M_47_51 : for(;;) switch (__label__) {
                        case 51 :
                        // NORMAL
                            var var16 = local_6_REFERENCE.INThashCode(local_6_REFERENCE); // type is INT value type is INT
                            var17 = var16; // type is INT value type is INT
                            break $M_47_51;
                        case 47 :
                        // NORMAL
                            var17 = 0; // type is INT value type is INT
                            break $M_47_51;
                    }
                    local_4_INT = (var13 + var17); // type is INT value type is INT
                    local_5_INT = (local_5_INT + 1); // type is INT value type is INT
                    __label__ = 25;
                    continue $L_25;
                }
            case 11 :
            // NORMAL
                var var21 = new juConcurrentModificationException.Create(); // type is REFERENCE value type is REFERENCE
                juConcurrentModificationException.VOIDinit(var21);
                throw var21;
        }
    },

    VOIDcheckForComodificationINT : function(thisRef,expectedModCount) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.modCount; // type is INT value type is INT
            if ((var0 == expectedModCount)) {
                return;
            }
            }
        var var1 = new juConcurrentModificationException.Create(); // type is REFERENCE value type is REFERENCE
        juConcurrentModificationException.VOIDinit(var1);
        throw var1;
    },

    BOOLEANequalsjlObject : function(thisRef,o) {
        var local_2_INT = null; // type is INT # of inits = 1
        var var8 = null; // type is BOOLEAN # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((o != thisRef)) {
                break $S_0;
            }
            return 1;
            }
        $S_7 : {
        // NORMAL
            var var0 = (o == null ? false : o.instanceOf(juList)); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                break $S_7;
            }
            return 0;
            }
        $S_16 : {
        // NORMAL
            local_2_INT = thisRef.modCount; // type is INT value type is INT
            var var4 = o.ClassgetClass(); // type is REFERENCE value type is REFERENCE
            if ((var4 != juArrayList)) {
                __label__ = 41;
                break $S_16;
            }
            __label__ = 30;
            }
        $M_30_41 : for(;;) switch (__label__) {
            case 30 :
            // NORMAL
                var var5 = thisRef.BOOLEANequalsArrayListjuArrayList(thisRef,o); // type is BOOLEAN value type is BOOLEAN
                var8 = var5; // type is BOOLEAN value type is BOOLEAN
                break $M_30_41;
            case 41 :
            // NORMAL
                var var7 = thisRef.BOOLEANequalsRangejuListINTINT(thisRef,o,0,thisRef.size); // type is BOOLEAN value type is BOOLEAN
                var8 = var7; // type is BOOLEAN value type is BOOLEAN
                break $M_30_41;
        }
        var local_3_BOOLEAN = var8; // type is BOOLEAN value type is BOOLEAN
        thisRef.VOIDcheckForComodificationINT(thisRef,local_2_INT);
        return local_3_BOOLEAN;
    },

    BOOLEANequalsArrayListjuArrayList : function(thisRef,other) {
        var local_3_INT = null; // type is INT # of inits = 2
        var local_7_INT = null; // type is INT # of inits = 3
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 2
        var var8 = null; // type is INT # of inits = 2
        var local_4_INT = null; // type is INT # of inits = 3
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_2_INT = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_2_INT = other.modCount; // type is INT value type is INT
            local_3_INT = thisRef.size; // type is INT value type is INT
            var var6 = local_3_INT; // type is INT value type is INT
            var var7 = other.size; // type is INT value type is INT
            if ((var6 != var7)) {
                __label__ = 22;
                break $S_0;
            }
            __label__ = 18;
            }
        $M_18_22 : for(;;) switch (__label__) {
            case 18 :
            // NORMAL
                var8 = 1; // type is INT value type is INT
                break $M_18_22;
            case 22 :
            // NORMAL
                var8 = 0; // type is INT value type is INT
                break $M_18_22;
        }
        $S_23 : {
        // NORMAL
            local_4_INT = var8; // type is INT value type is INT
            if ((var8 == 0)) {
                __label__ = 100;
                break $S_23;
            }
            __label__ = 29;
            }
        $M_100_29 : for(;;) switch (__label__) {
            case 29 :
            // NORMAL
                $S_29 : {
                // NORMAL
                    local_5_REFERENCE = other.elementData; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1b0acb2b
                    local_6_REFERENCE = thisRef.elementData; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@693190cf
                    var var15 = local_3_INT; // type is INT value type is INT
                    var var17 = local_6_REFERENCE.data.length; // type is INT value type is INT
                    if ((var15 > var17)) {
                        __label__ = 55;
                        break $S_29;
                    }
                    __label__ = 48;
                    }
                $M_55_48 : for(;;) switch (__label__) {
                    case 48 :
                    // NORMAL
                        $S_48 : {
                        // NORMAL
                            var var18 = local_3_INT; // type is INT value type is INT
                            var var20 = local_5_REFERENCE.data.length; // type is INT value type is INT
                            if ((var18 <= var20)) {
                                break $S_48;
                            }
                            __label__ = 55;
                            continue $M_55_48;
                            }
                        $S_63 : {
                        // NORMAL
                            local_7_INT = 0; // type is INT value type is INT
                            __label__ = 66;
                            }
                        $L_66 : for (;;) {
                            $S_66 : {
                            // NORMAL
                                var var23 = local_7_INT; // type is INT value type is INT
                                var var24 = local_3_INT; // type is INT value type is INT
                                if ((var23 >= var24)) {
                                    __label__ = 100;
                                    continue $M_100_29;
                                }
                                }
                            $S_72 : {
                            // NORMAL
                                var var27 = local_6_REFERENCE.data[local_7_INT]; // type is REFERENCE value type is REFERENCE
                                var var30 = local_5_REFERENCE.data[local_7_INT]; // type is REFERENCE value type is REFERENCE
                                var var31 = juObjects.BOOLEANequalsjlObjectjlObject(var27,var30); // type is BOOLEAN value type is BOOLEAN
                                if ((var31 != 0)) {
                                    __label__ = 94;
                                    break $S_72;
                                }
                                __label__ = 88;
                                }
                            for(;;) switch (__label__) {
                                case 88 :
                                // NORMAL
                                    local_4_INT = 0; // type is INT value type is INT
                                    __label__ = 100;
                                    continue $M_100_29;
                                case 94 :
                                // NORMAL
                                    local_7_INT = (local_7_INT + 1); // type is INT value type is INT
                                    __label__ = 66;
                                    continue $L_66;
                            }
                        }
                    case 55 :
                    // NORMAL
                        var var35 = new juConcurrentModificationException.Create(); // type is REFERENCE value type is REFERENCE
                        juConcurrentModificationException.VOIDinit(var35);
                        throw var35;
                }
            case 100 :
            // NORMAL
                other.VOIDcheckForComodificationINT(other,local_2_INT);
                return local_4_INT;
        }
    },

    BOOLEANequalsRangejuListINTINT : function(thisRef,other,from,to) {
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_4_REFERENCE = thisRef.elementData; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@77901150
            var var3 = local_4_REFERENCE.data.length; // type is INT value type is INT
            if ((to <= var3)) {
                __label__ = 21;
                break $S_0;
            }
            __label__ = 13;
            }
        for(;;) switch (__label__) {
            case 13 :
            // NORMAL
                var var13 = new juConcurrentModificationException.Create(); // type is REFERENCE value type is REFERENCE
                juConcurrentModificationException.VOIDinit(var13);
                throw var13;
            case 21 :
            // NORMAL
                $S_21 : {
                // NORMAL
                    var var4 = other.juIteratoriterator(other); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@77aef01b
                    local_5_REFERENCE = var4; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@535b0e92
                    __label__ = 29;
                    }
                $L_29 : for (;;) {
                    $S_29 : {
                    // NORMAL
                        if ((from >= to)) {
                            __label__ = 69;
                            break $S_29;
                        }
                        __label__ = 34;
                        }
                    for(;;) switch (__label__) {
                        case 34 :
                        // NORMAL
                            $S_34 : {
                            // NORMAL
                                var var7 = local_5_REFERENCE.BOOLEANhasNext(local_5_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                if ((var7 == 0)) {
                                    return 0;
                                }
                                }
                            $S_44 : {
                            // NORMAL
                                var var9 = local_4_REFERENCE.data[from]; // type is REFERENCE value type is REFERENCE
                                var var11 = local_5_REFERENCE.jlObjectnext(local_5_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@767ccb15
                                var var12 = juObjects.BOOLEANequalsjlObjectjlObject(var9,var11); // type is BOOLEAN value type is BOOLEAN
                                if ((var12 != 0)) {
                                    break $S_44;
                                }
                                return 0;
                                }
                            var local_2_INT = (from + 1); // type is INT value type is INT
                            from = local_2_INT; // type is INT value type is INT
                            __label__ = 29;
                            continue $L_29;
                        case 69 :
                        // NORMAL
                            $S_69 : {
                            // NORMAL
                                var var15 = local_5_REFERENCE.BOOLEANhasNext(local_5_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                if ((var15 != 0)) {
                                    __label__ = 83;
                                    break $S_69;
                                }
                                __label__ = 79;
                                }
                            for(;;) switch (__label__) {
                                case 79 :
                                // NORMAL
                                    var var16 = 1; // type is INT value type is INT
                                    return var16;
                                case 83 :
                                // NORMAL
                                    var var16 = 0; // type is INT value type is INT
                                    return var16;
                            }
                    }
                }
        }
    },

    juIteratoriterator : function(thisRef) {
        var __label__ = null;
        var var0 = new juArrayList$Itr.Create(); // type is REFERENCE value type is REFERENCE
        juArrayList$Itr.VOIDinitjuArrayList(var0,thisRef);
        return var0;
    },

    juListIteratorlistIterator : function(thisRef) {
        var __label__ = null;
        var var0 = new juArrayList$ListItr.Create(); // type is REFERENCE value type is REFERENCE
        juArrayList$ListItr.VOIDinitjuArrayListINT(var0,thisRef,0);
        return var0;
    },

    juListIteratorlistIteratorINT : function(thisRef,index) {
        var __label__ = null;
        thisRef.VOIDrangeCheckForAddINT(thisRef,index);
        var var0 = new juArrayList$ListItr.Create(); // type is REFERENCE value type is REFERENCE
        juArrayList$ListItr.VOIDinitjuArrayListINT(var0,thisRef,index);
        return var0;
    },

    VOIDrangeCheckForAddINT : function(thisRef,index) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.size; // type is INT value type is INT
            if ((index > var0)) {
                __label__ = 12;
                break $S_0;
            }
            __label__ = 8;
            }
        $M_12_8 : for(;;) switch (__label__) {
            case 12 :
            // NORMAL
                var var1 = new jlIndexOutOfBoundsException.Create(); // type is REFERENCE value type is REFERENCE
                var var2 = thisRef.jlStringoutOfBoundsMsgINT(thisRef,index); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2f50c418
                jlIndexOutOfBoundsException.VOIDinitjlString(var1,var2);
                throw var1;
            case 8 :
            // NORMAL
                if ((index >= 0)) {
                    return;
                }
                __label__ = 12;
                continue $M_12_8;
        }
    },

    jlStringoutOfBoundsMsgINT : function(thisRef,index) {
        var __label__ = null;
        var var0 = new jlStringBuilder.Create(); // type is REFERENCE value type is REFERENCE
        jlStringBuilder.VOIDinit(var0);
        var var1 = var0.jlStringBuilderappendjlString(var0,bytecoder.stringpool[60]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@47858c9a
        var var2 = var1.jlStringBuilderappendINT(var1,index); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@128fec7f
        var var3 = var2.jlStringBuilderappendjlString(var2,bytecoder.stringpool[61]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3a5bf680
        var var5 = var3.jlStringBuilderappendINT(var3,thisRef.size); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@8270c7e
        var var6 = var5.jlStringtoString(var5); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@632da0bc
        return var6;
    },

    BOOLEANcontainsjlObject : function(thisRef,o) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.INTindexOfjlObject(thisRef,o); // type is INT value type is INT
            if ((var0 < 0)) {
                __label__ = 12;
                break $S_0;
            }
            __label__ = 8;
            }
        for(;;) switch (__label__) {
            case 12 :
            // NORMAL
                var var1 = 0; // type is INT value type is INT
                return var1;
            case 8 :
            // NORMAL
                var var1 = 1; // type is INT value type is INT
                return var1;
        }
    },

    INTindexOfjlObject : function(thisRef,o) {
        var __label__ = null;
        var var1 = thisRef.INTindexOfRangejlObjectINTINT(thisRef,o,0,thisRef.size); // type is INT value type is INT
        return var1;
    },

    INTindexOfRangejlObjectINTINT : function(thisRef,o,start,end) {
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_5_INT = null; // type is INT # of inits = 6
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_4_REFERENCE = thisRef.elementData; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@4d4d4e0
            if (o != null ) {
                __label__ = 39;
                break $S_0;
            }
            __label__ = 10;
            }
        for(;;) switch (__label__) {
            case 39 :
            // NORMAL
                $S_39 : {
                // NORMAL
                    local_5_INT = start; // type is INT value type is INT
                    __label__ = 42;
                    }
                $L_42 : for (;;) {
                    $S_42 : {
                    // NORMAL
                        var var7 = local_5_INT; // type is INT value type is INT
                        if ((var7 >= end)) {
                            return -1;
                        }
                        }
                    $S_48 : {
                    // NORMAL
                        var var10 = local_4_REFERENCE.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                        var var11 = o.BOOLEANequalsjlObject(o,var10); // type is BOOLEAN value type is BOOLEAN
                        if ((var11 == 0)) {
                            break $S_48;
                        }
                        return local_5_INT;
                        }
                    local_5_INT = (local_5_INT + 1); // type is INT value type is INT
                    __label__ = 42;
                    continue $L_42;
                }
            case 10 :
            // NORMAL
                $S_10 : {
                // NORMAL
                    local_5_INT = start; // type is INT value type is INT
                    __label__ = 13;
                    }
                $L_13 : for (;;) {
                    $S_13 : {
                    // NORMAL
                        var var3 = local_5_INT; // type is INT value type is INT
                        if ((var3 >= end)) {
                            __label__ = 36;
                            break $S_13;
                        }
                        __label__ = 19;
                        }
                    for(;;) switch (__label__) {
                        case 36 :
                        // NORMAL
                            return -1;
                        case 19 :
                        // NORMAL
                            $S_19 : {
                            // NORMAL
                                var var6 = local_4_REFERENCE.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                                if (var6 != null ) {
                                    break $S_19;
                                }
                                return local_5_INT;
                                }
                            local_5_INT = (local_5_INT + 1); // type is INT value type is INT
                            __label__ = 13;
                            continue $L_13;
                    }
                }
        }
    },

    jlObjectgetINT : function(thisRef,index) {
        var __label__ = null;
        var var1 = juObjects.INTcheckIndexINTINT(index,thisRef.size); // type is INT value type is INT
        var var2 = thisRef.jlObjectelementDataINT(thisRef,index); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@54a601c0
        return var2;
    },

    jlObjectelementDataINT : function(thisRef,index) {
        var __label__ = null;
        var var1 = thisRef.elementData.data[index]; // type is REFERENCE value type is REFERENCE
        return var1;
    },

    classInitCheck : function() {
        if (!juArrayList.__initialized) {
            juArrayList.__initialized = true;
            var thePrototype = juArrayList.Create.prototype;
            thePrototype.instanceOf = juArrayList.instanceOf;
            thePrototype.ClassgetClass = juArrayList.ClassgetClass;
            thePrototype.jlObjectelementDataINT = juArrayList.jlObjectelementDataINT;
            thePrototype.jlObjectgetINT = juArrayList.jlObjectgetINT;
            thePrototype.INTindexOfRangejlObjectINTINT = juArrayList.INTindexOfRangejlObjectINTINT;
            thePrototype.INTindexOfjlObject = juArrayList.INTindexOfjlObject;
            thePrototype.BOOLEANcontainsjlObject = juArrayList.BOOLEANcontainsjlObject;
            thePrototype.jlStringoutOfBoundsMsgINT = juArrayList.jlStringoutOfBoundsMsgINT;
            thePrototype.VOIDrangeCheckForAddINT = juArrayList.VOIDrangeCheckForAddINT;
            thePrototype.juListIteratorlistIteratorINT = juArrayList.juListIteratorlistIteratorINT;
            thePrototype.juListIteratorlistIterator = juArrayList.juListIteratorlistIterator;
            thePrototype.juIteratoriterator = juArrayList.juIteratoriterator;
            thePrototype.BOOLEANequalsRangejuListINTINT = juArrayList.BOOLEANequalsRangejuListINTINT;
            thePrototype.BOOLEANequalsArrayListjuArrayList = juArrayList.BOOLEANequalsArrayListjuArrayList;
            thePrototype.BOOLEANequalsjlObject = juArrayList.BOOLEANequalsjlObject;
            thePrototype.VOIDcheckForComodificationINT = juArrayList.VOIDcheckForComodificationINT;
            thePrototype.INThashCodeRangeINTINT = juArrayList.INThashCodeRangeINTINT;
            thePrototype.INThashCode = juArrayList.INThashCode;
            thePrototype.A1jlObjecttoArrayA1jlObject = juArrayList.A1jlObjecttoArrayA1jlObject;
            thePrototype.INTsize = juArrayList.INTsize;
            thePrototype.BOOLEANcontainsAlljuCollection = juAbstractCollection.BOOLEANcontainsAlljuCollection;
            thePrototype.jlStringtoString = juAbstractCollection.jlStringtoString;
            juAbstractList.classInitCheck();
            juRandomAccess.classInitCheck();
            jlCloneable.classInitCheck();
            juCollection.classInitCheck();
            juList.classInitCheck();
            jlIterable.classInitCheck();
            jiSerializable.classInitCheck();
            juAbstractCollection.classInitCheck();
            jlObject.classInitCheck();
            jlrArray.classInitCheck();
            juArrayList.VOIDclinit();
        }
    },

};

var juAbstractList = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 172,
    __implementedTypes : [174,176,175,172,173,1],

    instanceOf : function(aType) {
        return juAbstractList.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return juAbstractList;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    A1jlObjectfinishToArrayA1jlObjectjuIterator : function(p0,p1) {
         return juAbstractCollection.A1jlObjectfinishToArrayA1jlObjectjuIterator(p0,p1);
    },

    INThugeCapacityINT : function(p0) {
         return juAbstractCollection.INThugeCapacityINT(p0);
    },

    juListofA1jlObject : function(p0) {
         return juList.juListofA1jlObject(p0);
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        juAbstractCollection.VOIDinit(thisRef);
        thisRef.modCount = 0;
        return;
    },

    INThashCode : function(thisRef) {
        var local_1_INT = null; // type is INT # of inits = 3
        var var11 = null; // type is INT # of inits = 1
        var var15 = null; // type is INT # of inits = 2
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_1_INT = 1; // type is INT value type is INT
            var var2 = thisRef.juIteratoriterator(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@47c5cfc8
            local_2_REFERENCE = var2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@500b4b86
            __label__ = 7;
            }
        $L_7 : for (;;) {
            $S_7 : {
            // NORMAL
                var var5 = local_2_REFERENCE.BOOLEANhasNext(local_2_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                if ((var5 == 0)) {
                    return local_1_INT;
                }
                }
            $S_16 : {
            // NORMAL
                var var8 = local_2_REFERENCE.jlObjectnext(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@22857cf8
                local_3_REFERENCE = var8; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@76cb8dfc
                var11 = (31 * local_1_INT); // type is INT value type is INT
                var var12 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@76cb8dfc
                if (var12 != null ) {
                    __label__ = 35;
                    break $S_16;
                }
                __label__ = 31;
                }
            $M_31_35 : for(;;) switch (__label__) {
                case 31 :
                // NORMAL
                    var15 = 0; // type is INT value type is INT
                    break $M_31_35;
                case 35 :
                // NORMAL
                    var var14 = local_3_REFERENCE.INThashCode(local_3_REFERENCE); // type is INT value type is INT
                    var15 = var14; // type is INT value type is INT
                    break $M_31_35;
            }
            local_1_INT = (var11 + var15); // type is INT value type is INT
            __label__ = 7;
            continue $L_7;
        }
    },

    juIteratoriterator : function(thisRef) {
        var __label__ = null;
        var var0 = new juAbstractList$Itr.Create(); // type is REFERENCE value type is REFERENCE
        juAbstractList$Itr.VOIDinitjuAbstractList(var0,thisRef);
        return var0;
    },

    BOOLEANequalsjlObject : function(thisRef,o) {
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((o != thisRef)) {
                break $S_0;
            }
            return 1;
            }
        $S_7 : {
        // NORMAL
            var var0 = (o == null ? false : o.instanceOf(juList)); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                break $S_7;
            }
            return 0;
            }
        $S_16 : {
        // NORMAL
            var var1 = thisRef.juListIteratorlistIterator(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5c512488
            local_2_REFERENCE = var1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3d4808a4
            var var3 = o.juListIteratorlistIterator(o); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@496e9b26
            local_3_REFERENCE = var3; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@32bc7dc7
            __label__ = 31;
            }
        $L_31 : for (;;) {
            $S_31 : {
            // NORMAL
                var var6 = local_2_REFERENCE.BOOLEANhasNext(local_2_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                if ((var6 == 0)) {
                    __label__ = 93;
                    break $S_31;
                }
                __label__ = 40;
                }
            $M_93_40 : for(;;) switch (__label__) {
                case 40 :
                // NORMAL
                    $S_40 : {
                    // NORMAL
                        var var8 = local_3_REFERENCE.BOOLEANhasNext(local_3_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                        if ((var8 == 0)) {
                            __label__ = 93;
                            continue $M_93_40;
                        }
                        }
                    $S_49 : {
                    // NORMAL
                        var var15 = local_2_REFERENCE.jlObjectnext(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@587da87b
                        local_4_REFERENCE = var15; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6ce02315
                        var var18 = local_3_REFERENCE.jlObjectnext(local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6f55f30c
                        local_5_REFERENCE = var18; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5fe07952
                        var var20 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6ce02315
                        if (var20 != null ) {
                            __label__ = 78;
                            break $S_49;
                        }
                        __label__ = 70;
                        }
                    $M_78_70 : for(;;) switch (__label__) {
                        case 78 :
                        // NORMAL
                            var var23 = local_4_REFERENCE.BOOLEANequalsjlObject(local_4_REFERENCE,local_5_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                            if ((var23 != 0)) {
                                break $M_78_70;
                            }
                            return 0;
                        case 70 :
                        // NORMAL
                            $S_70 : {
                            // NORMAL
                                var var24 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5fe07952
                                if (var24 != null ) {
                                    return 0;
                                }
                                }
                            break $M_78_70;
                    }
                    __label__ = 31;
                    continue $L_31;
                case 93 :
                // NORMAL
                    $S_93 : {
                    // NORMAL
                        var var10 = local_2_REFERENCE.BOOLEANhasNext(local_2_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                        if ((var10 != 0)) {
                            __label__ = 115;
                            break $S_93;
                        }
                        __label__ = 102;
                        }
                    $M_115_102 : for(;;) switch (__label__) {
                        case 102 :
                        // NORMAL
                            $S_102 : {
                            // NORMAL
                                var var12 = local_3_REFERENCE.BOOLEANhasNext(local_3_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                if ((var12 != 0)) {
                                    __label__ = 115;
                                    continue $M_115_102;
                                }
                                }
                            var var13 = 1; // type is INT value type is INT
                            return var13;
                        case 115 :
                        // NORMAL
                            var var13 = 0; // type is INT value type is INT
                            return var13;
                    }
            }
        }
    },

    juListIteratorlistIterator : function(thisRef) {
        var __label__ = null;
        var var0 = thisRef.juListIteratorlistIteratorINT(thisRef,0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7279f2ec
        return var0;
    },

    juListIteratorlistIteratorINT : function(thisRef,index) {
        var __label__ = null;
        thisRef.VOIDrangeCheckForAddINT(thisRef,index);
        var var0 = new juAbstractList$ListItr.Create(); // type is REFERENCE value type is REFERENCE
        juAbstractList$ListItr.VOIDinitjuAbstractListINT(var0,thisRef,index);
        return var0;
    },

    VOIDrangeCheckForAddINT : function(thisRef,index) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((index < 0)) {
                __label__ = 12;
                break $S_0;
            }
            __label__ = 4;
            }
        $M_4_12 : for(;;) switch (__label__) {
            case 4 :
            // NORMAL
                var var0 = thisRef.INTsize(thisRef); // type is INT value type is INT
                if ((index <= var0)) {
                    return;
                }
                __label__ = 12;
                continue $M_4_12;
            case 12 :
            // NORMAL
                var var1 = new jlIndexOutOfBoundsException.Create(); // type is REFERENCE value type is REFERENCE
                var var2 = thisRef.jlStringoutOfBoundsMsgINT(thisRef,index); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@13346c51
                jlIndexOutOfBoundsException.VOIDinitjlString(var1,var2);
                throw var1;
        }
    },

    jlStringoutOfBoundsMsgINT : function(thisRef,index) {
        var __label__ = null;
        var var0 = new jlStringBuilder.Create(); // type is REFERENCE value type is REFERENCE
        jlStringBuilder.VOIDinit(var0);
        var var1 = var0.jlStringBuilderappendjlString(var0,bytecoder.stringpool[60]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1325987f
        var var2 = var1.jlStringBuilderappendINT(var1,index); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6c0605a9
        var var3 = var2.jlStringBuilderappendjlString(var2,bytecoder.stringpool[61]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@411885cb
        var var4 = thisRef.INTsize(thisRef); // type is INT value type is INT
        var var5 = var3.jlStringBuilderappendINT(var3,var4); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@69732a9d
        var var6 = var5.jlStringtoString(var5); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@56aaa1ac
        return var6;
    },

    INTindexOfjlObject : function(thisRef,o) {
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.juListIteratorlistIterator(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@324cd174
            local_2_REFERENCE = var0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6faf174e
            if (o != null ) {
                __label__ = 34;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_34_9 : for(;;) switch (__label__) {
            case 9 :
            // NORMAL
                for (;;) {
                    $S_9 : {
                    // NORMAL
                        var var5 = local_2_REFERENCE.BOOLEANhasNext(local_2_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                        if ((var5 == 0)) {
                            return -1;
                        }
                        }
                    $S_18 : {
                    // NORMAL
                        var var7 = local_2_REFERENCE.jlObjectnext(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@262cdb83
                        if (var7 != null ) {
                            __label__ = 9;
                            continue $M_34_9;
                        }
                        }
                    var var9 = local_2_REFERENCE.INTpreviousIndex(local_2_REFERENCE); // type is INT value type is INT
                    return var9;
                }
            case 34 :
            // NORMAL
                for (;;) {
                    $S_34 : {
                    // NORMAL
                        var var3 = local_2_REFERENCE.BOOLEANhasNext(local_2_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                        if ((var3 == 0)) {
                            return -1;
                        }
                        }
                    $S_43 : {
                    // NORMAL
                        var var11 = local_2_REFERENCE.jlObjectnext(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7e5b812f
                        var var12 = o.BOOLEANequalsjlObject(o,var11); // type is BOOLEAN value type is BOOLEAN
                        if ((var12 == 0)) {
                            __label__ = 34;
                            continue $M_34_9;
                        }
                        }
                    var var14 = local_2_REFERENCE.INTpreviousIndex(local_2_REFERENCE); // type is INT value type is INT
                    return var14;
                }
        }
    },

    classInitCheck : function() {
        if (!juAbstractList.__initialized) {
            juAbstractList.__initialized = true;
            juAbstractCollection.classInitCheck();
            juCollection.classInitCheck();
            juList.classInitCheck();
            jlIterable.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var juAbstractCollection = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 173,
    __implementedTypes : [174,175,173,1],

    instanceOf : function(aType) {
        return juAbstractCollection.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return juAbstractCollection;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    jlStringtoString : function(thisRef) {
        var var11 = null; // type is REFERENCE # of inits = 1
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_1_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 2
        var var14 = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.juIteratoriterator(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7f9a06cb
            local_1_REFERENCE = var0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@79cdc4ad
            var var3 = local_1_REFERENCE.BOOLEANhasNext(local_1_REFERENCE); // type is BOOLEAN value type is BOOLEAN
            if ((var3 != 0)) {
                break $S_0;
            }
            return bytecoder.stringpool[62];
            }
        $S_17 : {
        // NORMAL
            var var4 = new jlStringBuilder.Create(); // type is REFERENCE value type is REFERENCE
            jlStringBuilder.VOIDinit(var4);
            local_2_REFERENCE = var4; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7f50ff10
            var var7 = local_2_REFERENCE.jlStringBuilderappendCHAR(local_2_REFERENCE,91); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5d912359
            __label__ = 32;
            }
        $L_32 : for (;;) {
            $S_32 : {
            // NORMAL
                var var9 = local_1_REFERENCE.jlObjectnext(local_1_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2e91fb5f
                local_3_REFERENCE = var9; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1b07e853
                var11 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7f50ff10
                var var12 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1b07e853
                if ((var12 != thisRef)) {
                    __label__ = 50;
                    break $S_32;
                }
                __label__ = 45;
                }
            $M_45_50 : for(;;) switch (__label__) {
                case 50 :
                // NORMAL
                    var14 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1b07e853
                    break $M_45_50;
                case 45 :
                // NORMAL
                    var14 = bytecoder.stringpool[63]; // type is REFERENCE value type is REFERENCE
                    break $M_45_50;
            }
            $S_51 : {
            // NORMAL
                var var15 = var11.jlStringBuilderappendjlObject(var11,var14); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4d8c2748
                var var17 = local_1_REFERENCE.BOOLEANhasNext(local_1_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                if ((var17 != 0)) {
                    __label__ = 74;
                    break $S_51;
                }
                __label__ = 64;
                }
            for(;;) switch (__label__) {
                case 64 :
                // NORMAL
                    var var19 = local_2_REFERENCE.jlStringBuilderappendCHAR(local_2_REFERENCE,93); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@620fdc6c
                    var var20 = var19.jlStringtoString(var19); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3650b09f
                    return var20;
                case 74 :
                // NORMAL
                    var var22 = local_2_REFERENCE.jlStringBuilderappendCHAR(local_2_REFERENCE,44); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@17baee09
                    var var23 = var22.jlStringBuilderappendCHAR(var22,32); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3b203dd1
                    __label__ = 32;
                    continue $L_32;
            }
        }
    },

    A1jlObjecttoArrayA1jlObject : function(thisRef,a) {
        var local_2_INT = null; // type is INT # of inits = 1
        var var9 = null; // type is REFERENCE # of inits = 2
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_5_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.INTsize(thisRef); // type is INT value type is INT
            local_2_INT = var0; // type is INT value type is INT
            var var3 = a.data.length; // type is INT value type is INT
            var var4 = local_2_INT; // type is INT value type is INT
            if ((var3 < var4)) {
                __label__ = 15;
                break $S_0;
            }
            __label__ = 11;
            }
        $M_11_15 : for(;;) switch (__label__) {
            case 11 :
            // NORMAL
                var9 = a; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@9b1379b
                break $M_11_15;
            case 15 :
            // NORMAL
                var var6 = a.ClassgetClass().jlClassgetComponentType(a.ClassgetClass()); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@32452a29
                var var8 = bytecoder.newArray(local_2_INT,null); // type is REFERENCE value type is REFERENCE
                var9 = var8; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@371e0107
                break $M_11_15;
        }
        $S_29 : {
        // NORMAL
            local_3_REFERENCE = var9; // type is REFERENCE value type is REFERENCE
            var var11 = thisRef.juIteratoriterator(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@407a3674
            local_4_REFERENCE = var11; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1a4f5fba
            local_5_INT = 0; // type is INT value type is INT
            __label__ = 39;
            }
        $L_39 : for (;;) {
            $S_39 : {
            // NORMAL
                var var15 = local_5_INT; // type is INT value type is INT
                var var17 = local_3_REFERENCE.data.length; // type is INT value type is INT
                if ((var15 >= var17)) {
                    __label__ = 123;
                    break $S_39;
                }
                __label__ = 46;
                }
            for(;;) switch (__label__) {
                case 46 :
                // NORMAL
                    $S_46 : {
                    // NORMAL
                        var var19 = local_4_REFERENCE.BOOLEANhasNext(local_4_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                        if ((var19 != 0)) {
                            __label__ = 106;
                            break $S_46;
                        }
                        __label__ = 56;
                        }
                    for(;;) switch (__label__) {
                        case 106 :
                        // NORMAL
                            var var20 = local_3_REFERENCE; // type is REFERENCE value type is REFERENCE
                            var var21 = local_5_INT; // type is INT value type is INT
                            var var23 = local_4_REFERENCE.jlObjectnext(local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@37b95ffd
                            var20.data[var21] = var23;
                            local_5_INT = (local_5_INT + 1); // type is INT value type is INT
                            __label__ = 39;
                            continue $L_39;
                        case 56 :
                        // NORMAL
                            $S_56 : {
                            // NORMAL
                                var var31 = local_3_REFERENCE; // type is REFERENCE value type is REFERENCE
                                if ((a != var31)) {
                                    __label__ = 69;
                                    break $S_56;
                                }
                                __label__ = 61;
                                }
                            for(;;) switch (__label__) {
                                case 61 :
                                // NORMAL
                                    var var39 = local_3_REFERENCE; // type is REFERENCE value type is REFERENCE
                                    var var40 = local_5_INT; // type is INT value type is INT
                                    var39.data[var40] = null;
                                    return a;
                                case 69 :
                                // NORMAL
                                    $S_69 : {
                                    // NORMAL
                                        var var32 = a.data.length; // type is INT value type is INT
                                        var var33 = local_5_INT; // type is INT value type is INT
                                        if ((var32 >= var33)) {
                                            __label__ = 83;
                                            break $S_69;
                                        }
                                        __label__ = 76;
                                        }
                                    for(;;) switch (__label__) {
                                        case 76 :
                                        // NORMAL
                                            var var43 = juArrays.A1jlObjectcopyOfA1jlObjectINT(local_3_REFERENCE,local_5_INT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@654c8594
                                            return var43;
                                        case 83 :
                                        // NORMAL
                                            $S_83 : {
                                            // NORMAL
                                                jlSystem.VOIDarraycopyjlObjectINTjlObjectINTINT(local_3_REFERENCE,0,a,0,local_5_INT);
                                                var var36 = a.data.length; // type is INT value type is INT
                                                var var37 = local_5_INT; // type is INT value type is INT
                                                if ((var36 <= var37)) {
                                                    return a;
                                                }
                                                }
                                            var var38 = local_5_INT; // type is INT value type is INT
                                            a.data[var38] = null;
                                            return a;
                                    }
                            }
                    }
                case 123 :
                // NORMAL
                    $S_123 : {
                    // NORMAL
                        var var25 = local_4_REFERENCE.BOOLEANhasNext(local_4_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                        if ((var25 == 0)) {
                            __label__ = 142;
                            break $S_123;
                        }
                        __label__ = 133;
                        }
                    for(;;) switch (__label__) {
                        case 142 :
                        // NORMAL
                            var var30 = local_3_REFERENCE; // type is REFERENCE value type is REFERENCE
                            return var30;
                        case 133 :
                        // NORMAL
                            var var29 = juAbstractCollection.A1jlObjectfinishToArrayA1jlObjectjuIterator(local_3_REFERENCE,local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@7e43ff76
                            var var30 = var29; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@2c53a496
                            return var30;
                    }
            }
        }
    },

    A1jlObjectfinishToArrayA1jlObjectjuIterator : function(r,it) {
        var local_2_INT = null; // type is INT # of inits = 3
        var local_4_INT = null; // type is INT # of inits = 2
        var local_3_INT = null; // type is INT # of inits = 1
        var var30 = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_2_INT = r.data.length; // type is INT value type is INT
            __label__ = 3;
            }
        $L_3 : for (;;) {
            $S_3 : {
            // NORMAL
                var var3 = it.BOOLEANhasNext(it); // type is BOOLEAN value type is BOOLEAN
                if ((var3 == 0)) {
                    __label__ = 67;
                    break $S_3;
                }
                __label__ = 12;
                }
            for(;;) switch (__label__) {
                case 67 :
                // NORMAL
                    $S_67 : {
                    // NORMAL
                        var var4 = local_2_INT; // type is INT value type is INT
                        var var5 = r.data.length; // type is INT value type is INT
                        if ((var4 != var5)) {
                            __label__ = 77;
                            break $S_67;
                        }
                        __label__ = 73;
                        }
                    for(;;) switch (__label__) {
                        case 77 :
                        // NORMAL
                            var var7 = juArrays.A1jlObjectcopyOfA1jlObjectINT(r,local_2_INT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@5077dd42
                            var var8 = var7; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1d28edae
                            return var8;
                        case 73 :
                        // NORMAL
                            var var8 = r; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@43b8971c
                            return var8;
                    }
                case 12 :
                // NORMAL
                    $S_12 : {
                    // NORMAL
                        local_3_INT = r.data.length; // type is INT value type is INT
                        var var12 = local_2_INT; // type is INT value type is INT
                        var var13 = local_3_INT; // type is INT value type is INT
                        if ((var12 != var13)) {
                            var30 = r; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@43b8971c
                            __label__ = 52;
                            break $S_12;
                        }
                        __label__ = 20;
                        }
                    $M_20_52 : for(;;) switch (__label__) {
                        case 52 :
                        // NORMAL
                            var var31 = var30; // type is REFERENCE value type is REFERENCE
                            var var32 = local_2_INT; // type is INT value type is INT
                            local_2_INT = (local_2_INT + 1); // type is INT value type is INT
                            var var33 = it.jlObjectnext(it); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@53f9859e
                            var31.data[var32] = var33;
                            r = var30; // type is REFERENCE value type is REFERENCE
                            __label__ = 3;
                            continue $L_3;
                        case 20 :
                        // NORMAL
                            $S_20 : {
                            // NORMAL
                                local_4_INT = ((local_3_INT + (local_3_INT >> 1)) + 1); // type is INT value type is INT
                                var var22 = (local_4_INT - 2147483639); // type is INT value type is INT
                                if ((var22 <= 0)) {
                                    __label__ = 45;
                                    break $S_20;
                                }
                                __label__ = 37;
                                }
                            $M_37_45 : for(;;) switch (__label__) {
                                case 37 :
                                // NORMAL
                                    var var25 = juAbstractCollection.INThugeCapacityINT((local_3_INT + 1)); // type is INT value type is INT
                                    local_4_INT = var25; // type is INT value type is INT
                                    __label__ = 45;
                                    continue $M_37_45;
                                case 45 :
                                // NORMAL
                                    var var28 = juArrays.A1jlObjectcopyOfA1jlObjectINT(r,local_4_INT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@6453b61b
                                    var local_0_REFERENCE = var28; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@136284bf
                                    var30 = local_0_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@136284bf
                                    __label__ = 52;
                                    continue $M_20_52;
                            }
                    }
            }
        }
    },

    INThugeCapacityINT : function(minCapacity) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((minCapacity >= 0)) {
                __label__ = 14;
                break $S_0;
            }
            __label__ = 4;
            }
        for(;;) switch (__label__) {
            case 14 :
            // NORMAL
                $S_14 : {
                // NORMAL
                    if ((minCapacity <= 2147483639)) {
                        __label__ = 25;
                        break $S_14;
                    }
                    __label__ = 20;
                    }
                for(;;) switch (__label__) {
                    case 25 :
                    // NORMAL
                        var var1 = 2147483639; // type is INT value type is INT
                        return var1;
                    case 20 :
                    // NORMAL
                        var var1 = 2147483647; // type is INT value type is INT
                        return var1;
                }
            case 4 :
            // NORMAL
                var var0 = new jlOutOfMemoryError.Create(); // type is REFERENCE value type is REFERENCE
                jlOutOfMemoryError.VOIDinitjlString(var0,bytecoder.stringpool[64]);
                throw var0;
        }
    },

    BOOLEANcontainsAlljuCollection : function(thisRef,c) {
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = c.juIteratoriterator(c); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@79167d6e
            local_2_REFERENCE = var0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@51922498
            __label__ = 7;
            }
        $L_7 : for (;;) {
            $S_7 : {
            // NORMAL
                var var3 = local_2_REFERENCE.BOOLEANhasNext(local_2_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                if ((var3 == 0)) {
                    return 1;
                }
                }
            $S_16 : {
            // NORMAL
                var var5 = local_2_REFERENCE.jlObjectnext(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6dcbe0e4
                var local_3_REFERENCE = var5; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2e97d316
                var var8 = thisRef.BOOLEANcontainsjlObject(thisRef,local_3_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                if ((var8 != 0)) {
                    break $S_16;
                }
                return 0;
                }
            __label__ = 7;
            continue $L_7;
        }
    },

    BOOLEANcontainsjlObject : function(thisRef,o) {
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.juIteratoriterator(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3a8b8471
            local_2_REFERENCE = var0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@68ba2a96
            if (o != null ) {
                __label__ = 29;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_29_9 : for(;;) switch (__label__) {
            case 9 :
            // NORMAL
                for (;;) {
                    $S_9 : {
                    // NORMAL
                        var var8 = local_2_REFERENCE.BOOLEANhasNext(local_2_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                        if ((var8 == 0)) {
                            return 0;
                        }
                        }
                    var var10 = local_2_REFERENCE.jlObjectnext(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3ba3ad6f
                    if (var10 != null ) {
                        __label__ = 9;
                        continue $M_29_9;
                    }
                    return 1;
                }
            case 29 :
            // NORMAL
                for (;;) {
                    $S_29 : {
                    // NORMAL
                        var var3 = local_2_REFERENCE.BOOLEANhasNext(local_2_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                        if ((var3 == 0)) {
                            return 0;
                        }
                        }
                    var var5 = local_2_REFERENCE.jlObjectnext(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@278bea06
                    var var6 = o.BOOLEANequalsjlObject(o,var5); // type is BOOLEAN value type is BOOLEAN
                    if ((var6 == 0)) {
                        __label__ = 29;
                        continue $M_29_9;
                    }
                    return 1;
                }
        }
    },

    classInitCheck : function() {
        if (!juAbstractCollection.__initialized) {
            juAbstractCollection.__initialized = true;
            jlObject.classInitCheck();
            juCollection.classInitCheck();
            jlIterable.classInitCheck();
        }
    },

};

var juCollection = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 174,
    __implementedTypes : [174,175,1],


    classInitCheck : function() {
        if (!juCollection.__initialized) {
            juCollection.__initialized = true;
            jlObject.classInitCheck();
            jlIterable.classInitCheck();
        }
    },

};

var jlIterable = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 175,
    __implementedTypes : [175,1],


    classInitCheck : function() {
        if (!jlIterable.__initialized) {
            jlIterable.__initialized = true;
            jlObject.classInitCheck();
        }
    },

};

var juList = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 176,
    __implementedTypes : [174,176,175,1],


    juListofA1jlObject : function(elements) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = elements.data.length; // type is INT value type is INT
            if (var0 < 0 || var0 > 2) {
             __label__ = 57;
            break $S_0;
            }
            switch(var0 - 0) {
             case 0:
                 __label__ = 28;
            break $S_0;
             case 1:
                 __label__ = 32;
            break $S_0;
             case 2:
                 __label__ = 43;
            break $S_0;
            }
            throw 'Illegal jump target!';
            }
        for(;;) switch (__label__) {
            case 57 :
            // NORMAL
                var var3 = new juImmutableCollections$ListN.Create(); // type is REFERENCE value type is REFERENCE
                juImmutableCollections$ListN.VOIDinitA1jlObject(var3,elements);
                return var3;
            case 32 :
            // NORMAL
                var var1 = new juImmutableCollections$List12.Create(); // type is REFERENCE value type is REFERENCE
                var var2 = elements.data[0]; // type is REFERENCE value type is REFERENCE
                juImmutableCollections$List12.VOIDinitjlObject(var1,var2);
                return var1;
            case 43 :
            // NORMAL
                var var4 = new juImmutableCollections$List12.Create(); // type is REFERENCE value type is REFERENCE
                var var5 = elements.data[0]; // type is REFERENCE value type is REFERENCE
                var var6 = elements.data[1]; // type is REFERENCE value type is REFERENCE
                juImmutableCollections$List12.VOIDinitjlObjectjlObject(var4,var5,var6);
                return var4;
            case 28 :
            // NORMAL
                var var7 = juImmutableCollections.juListemptyList(); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@603806de
                return var7;
        }
    },

    classInitCheck : function() {
        if (!juList.__initialized) {
            juList.__initialized = true;
            jlObject.classInitCheck();
            juCollection.classInitCheck();
            jlIterable.classInitCheck();
        }
    },

};

var juRandomAccess = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 177,
    __implementedTypes : [177,1],


    classInitCheck : function() {
        if (!juRandomAccess.__initialized) {
            juRandomAccess.__initialized = true;
            jlObject.classInitCheck();
        }
    },

};

var jlIllegalArgumentException = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 178,
    __implementedTypes : [61,178,179,180,2,1],

    Create : function() {
    },

    instanceOf : function(aType) {
        return jlIllegalArgumentException.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jlIllegalArgumentException;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitjlString : function(thisRef,s) {
        var __label__ = null;
        jlRuntimeException.VOIDinitjlString(thisRef,s);
        return;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        jlRuntimeException.VOIDinit(thisRef);
        return;
    },

    classInitCheck : function() {
        if (!jlIllegalArgumentException.__initialized) {
            jlIllegalArgumentException.__initialized = true;
            var thePrototype = jlIllegalArgumentException.Create.prototype;
            thePrototype.instanceOf = jlIllegalArgumentException.instanceOf;
            thePrototype.ClassgetClass = jlIllegalArgumentException.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlRuntimeException.classInitCheck();
            jlThrowable.classInitCheck();
            jlException.classInitCheck();
            jiSerializable.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var jlRuntimeException = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 179,
    __implementedTypes : [61,179,180,2,1],

    Create : function() {
    },

    instanceOf : function(aType) {
        return jlRuntimeException.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jlRuntimeException;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitjlString : function(thisRef,message) {
        var __label__ = null;
        jlException.VOIDinitjlString(thisRef,message);
        return;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        jlException.VOIDinit(thisRef);
        return;
    },

    classInitCheck : function() {
        if (!jlRuntimeException.__initialized) {
            jlRuntimeException.__initialized = true;
            var thePrototype = jlRuntimeException.Create.prototype;
            thePrototype.instanceOf = jlRuntimeException.instanceOf;
            thePrototype.ClassgetClass = jlRuntimeException.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlException.classInitCheck();
            jlThrowable.classInitCheck();
            jiSerializable.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var jlException = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 180,
    __implementedTypes : [61,180,2,1],

    Create : function() {
    },

    instanceOf : function(aType) {
        return jlException.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jlException;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitjlString : function(thisRef,message) {
        var __label__ = null;
        jlThrowable.VOIDinitjlString(thisRef,message);
        return;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        jlThrowable.VOIDinit(thisRef);
        return;
    },

    classInitCheck : function() {
        if (!jlException.__initialized) {
            jlException.__initialized = true;
            var thePrototype = jlException.Create.prototype;
            thePrototype.instanceOf = jlException.instanceOf;
            thePrototype.ClassgetClass = jlException.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlThrowable.classInitCheck();
            jiSerializable.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var juArrays = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 181,
    __implementedTypes : [181,1],

    Create : function() {
    },

    instanceOf : function(aType) {
        return juArrays.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return juArrays;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    A1jlObjectcopyOfA1jlObjectINTjlClass : function(original,newLength,aType) {
        var local_5_INT = null; // type is INT # of inits = 3
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_3_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_3_INT = original.data.length; // type is INT value type is INT
            var var3 = local_3_INT; // type is INT value type is INT
            if ((newLength >= var3)) {
                __label__ = 10;
                break $S_0;
            }
            __label__ = 8;
            }
        $M_10_8 : for(;;) switch (__label__) {
            case 8 :
            // NORMAL
                local_3_INT = newLength; // type is INT value type is INT
                __label__ = 10;
                continue $M_10_8;
            case 10 :
            // NORMAL
                $S_10 : {
                // NORMAL
                    local_4_REFERENCE = bytecoder.newArray(newLength,null); // type is REFERENCE value type is REFERENCE
                    local_5_INT = 0; // type is INT value type is INT
                    __label__ = 19;
                    }
                $L_19 : for (;;) {
                    $S_19 : {
                    // NORMAL
                        var var8 = local_5_INT; // type is INT value type is INT
                        var var9 = local_3_INT; // type is INT value type is INT
                        if ((var8 >= var9)) {
                            return local_4_REFERENCE;
                        }
                        }
                    var var11 = local_4_REFERENCE; // type is REFERENCE value type is REFERENCE
                    var var12 = local_5_INT; // type is INT value type is INT
                    var var14 = original.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                    var11.data[var12] = var14;
                    local_5_INT = (local_5_INT + 1); // type is INT value type is INT
                    __label__ = 19;
                    continue $L_19;
                }
        }
    },

    VOIDsortA1jlObjectINTINT : function(aData,aStart,aEnd) {
        var __label__ = null;
        return;
    },

    A1jlObjectcopyOfA1jlObjectINT : function(original,newLength) {
        var __label__ = null;
        var var0 = juArrays.A1jlObjectcopyOfA1jlObjectINTjlClass(original,newLength,null); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@6e5af4a2
        return var0;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    classInitCheck : function() {
        if (!juArrays.__initialized) {
            juArrays.__initialized = true;
            var thePrototype = juArrays.Create.prototype;
            thePrototype.instanceOf = juArrays.instanceOf;
            thePrototype.ClassgetClass = juArrays.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojdjRopeJoint = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 182,
    __implementedTypes : [114,182,1],
    $assertionsDisabled : false, // declared in org.jbox2d.dynamics.joints.Joint

    Create : function() {
        this.pool = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_type = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_prev = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_next = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_bodyA = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_bodyB = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_collideConnected = false; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_islandFlag = false; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_userData = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_edgeA = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_edgeB = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_localAnchorA = null; // declared in org.jbox2d.dynamics.joints.RopeJoint
        this.m_localAnchorB = null; // declared in org.jbox2d.dynamics.joints.RopeJoint
        this.m_u = null; // declared in org.jbox2d.dynamics.joints.RopeJoint
        this.m_rA = null; // declared in org.jbox2d.dynamics.joints.RopeJoint
        this.m_rB = null; // declared in org.jbox2d.dynamics.joints.RopeJoint
        this.m_localCenterA = null; // declared in org.jbox2d.dynamics.joints.RopeJoint
        this.m_localCenterB = null; // declared in org.jbox2d.dynamics.joints.RopeJoint
        this.m_maxLength = 0; // declared in org.jbox2d.dynamics.joints.RopeJoint
        this.m_mass = 0; // declared in org.jbox2d.dynamics.joints.RopeJoint
        this.m_impulse = 0; // declared in org.jbox2d.dynamics.joints.RopeJoint
        this.m_state = null; // declared in org.jbox2d.dynamics.joints.RopeJoint
        this.m_length = 0; // declared in org.jbox2d.dynamics.joints.RopeJoint
        this.m_indexA = 0; // declared in org.jbox2d.dynamics.joints.RopeJoint
        this.m_indexB = 0; // declared in org.jbox2d.dynamics.joints.RopeJoint
        this.m_invMassA = 0; // declared in org.jbox2d.dynamics.joints.RopeJoint
        this.m_invMassB = 0; // declared in org.jbox2d.dynamics.joints.RopeJoint
        this.m_invIA = 0; // declared in org.jbox2d.dynamics.joints.RopeJoint
        this.m_invIB = 0; // declared in org.jbox2d.dynamics.joints.RopeJoint
    },

    instanceOf : function(aType) {
        return ojdjRopeJoint.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdjRopeJoint;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    ojdjJointcreateojdWorldojdjJointDef : function(p0,p1) {
         return ojdjJoint.ojdjJointcreateojdWorldojdjJointDef(p0,p1);
    },

    VOIDinitojpIWorldPoolojdjRopeJointDef : function(thisRef,worldPool,def) {
        var __label__ = null;
        ojdjJoint.VOIDinitojpIWorldPoolojdjJointDef(thisRef,worldPool,def);
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var0);
        thisRef.m_localAnchorA = var0;
        var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var1);
        thisRef.m_localAnchorB = var1;
        var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var2);
        thisRef.m_u = var2;
        var var3 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var3);
        thisRef.m_rA = var3;
        var var4 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var4);
        thisRef.m_rB = var4;
        var var5 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var5);
        thisRef.m_localCenterA = var5;
        var var6 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var6);
        thisRef.m_localCenterB = var6;
        var var9 = thisRef.m_localAnchorA.ojcVec2setojcVec2(thisRef.m_localAnchorA,def.localAnchorA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@22c4ed9c
        var var12 = thisRef.m_localAnchorB.ojcVec2setojcVec2(thisRef.m_localAnchorB,def.localAnchorB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6197b4c
        var var13 = def.maxLength; // type is FLOAT value type is FLOAT
        thisRef.m_maxLength = var13;
        thisRef.m_mass = 0.0;
        thisRef.m_impulse = 0.0;
        var var14 = ojdjLimitState.INACTIVE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@18157ea0
        thisRef.m_state = var14;
        thisRef.m_length = 0.0;
        return;
    },

    VOIDinitVelocityConstraintsojdSolverData : function(thisRef,data) {
        var local_8_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var var153 = null; // type is FLOAT # of inits = 2
        var local_9_FLOAT = null; // type is FLOAT # of inits = 2
        var local_16_FLOAT = null; // type is FLOAT # of inits = 1
        var local_5_FLOAT = null; // type is FLOAT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var1 = thisRef.m_bodyA.m_islandIndex; // type is INT value type is INT
            thisRef.m_indexA = var1;
            var var3 = thisRef.m_bodyB.m_islandIndex; // type is INT value type is INT
            thisRef.m_indexB = var3;
            var var8 = thisRef.m_localCenterA.ojcVec2setojcVec2(thisRef.m_localCenterA,thisRef.m_bodyA.m_sweep.localCenter); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4099d3f4
            var var13 = thisRef.m_localCenterB.ojcVec2setojcVec2(thisRef.m_localCenterB,thisRef.m_bodyB.m_sweep.localCenter); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5958ad86
            var var15 = thisRef.m_bodyA.m_invMass; // type is FLOAT value type is FLOAT
            thisRef.m_invMassA = var15;
            var var17 = thisRef.m_bodyB.m_invMass; // type is FLOAT value type is FLOAT
            thisRef.m_invMassB = var17;
            var var19 = thisRef.m_bodyA.m_invI; // type is FLOAT value type is FLOAT
            thisRef.m_invIA = var19;
            var var21 = thisRef.m_bodyB.m_invI; // type is FLOAT value type is FLOAT
            thisRef.m_invIB = var21;
            var var24 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            var local_2_REFERENCE = var24.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@55ebe46b
            var var29 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            var local_3_FLOAT = var29.a; // type is FLOAT value type is FLOAT
            var var35 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_4_REFERENCE = var35.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@b8f6a5e
            var var40 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_5_FLOAT = var40.w; // type is FLOAT value type is FLOAT
            var var46 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            var local_6_REFERENCE = var46.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5870ea8
            var var51 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            var local_7_FLOAT = var51.a; // type is FLOAT value type is FLOAT
            var var57 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_8_REFERENCE = var57.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@192fb703
            var var62 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_9_FLOAT = var62.w; // type is FLOAT value type is FLOAT
            var var67 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@136dc0f1
            var local_10_REFERENCE = var67; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@63409558
            var var70 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5e0f25d6
            var local_11_REFERENCE = var70; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3afc06bb
            var var73 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@476b335d
            var local_12_REFERENCE = var73; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@20e684bd
            var var77 = local_10_REFERENCE.ojcRotsetFLOAT(local_10_REFERENCE,local_3_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@76034e2
            var var80 = local_11_REFERENCE.ojcRotsetFLOAT(local_11_REFERENCE,local_7_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5df3336b
            var var81 = local_10_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@63409558
            var var84 = local_12_REFERENCE.ojcVec2setojcVec2(local_12_REFERENCE,thisRef.m_localAnchorA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@431c0253
            var var86 = var84.ojcVec2subLocalojcVec2(var84,thisRef.m_localCenterA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@57cbb5e1
            ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var81,var86,thisRef.m_rA);
            var var88 = local_11_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3afc06bb
            var var91 = local_12_REFERENCE.ojcVec2setojcVec2(local_12_REFERENCE,thisRef.m_localAnchorB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@518a4cde
            var var93 = var91.ojcVec2subLocalojcVec2(var91,thisRef.m_localCenterB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@15a645ef
            ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var88,var93,thisRef.m_rB);
            var var97 = thisRef.m_u.ojcVec2setojcVec2(thisRef.m_u,local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@368bd392
            var var99 = var97.ojcVec2addLocalojcVec2(var97,thisRef.m_rB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3c650c1f
            var var101 = var99.ojcVec2subLocalojcVec2(var99,local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3f8a4bf1
            var var103 = var101.ojcVec2subLocalojcVec2(var101,thisRef.m_rA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1824e8d2
            var var105 = thisRef.m_u.FLOATlength(thisRef.m_u); // type is FLOAT value type is FLOAT
            thisRef.m_length = var105;
            var local_13_FLOAT = (thisRef.m_length - thisRef.m_maxLength); // type is FLOAT value type is FLOAT
            var var111 = local_13_FLOAT; // type is FLOAT value type is FLOAT
            if ((var111 <= 0.0)) {
                __label__ = 377;
                break $S_0;
            }
            __label__ = 367;
            }
        $M_377_367 : for(;;) switch (__label__) {
            case 367 :
            // NORMAL
                var var114 = ojdjLimitState.AT_UPPER; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@705baf07
                thisRef.m_state = var114;
                break $M_377_367;
            case 377 :
            // NORMAL
                var var113 = ojdjLimitState.INACTIVE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@64ca40e7
                thisRef.m_state = var113;
                break $M_377_367;
        }
        $S_384 : {
        // NORMAL
            var var115 = thisRef.m_length; // type is FLOAT value type is FLOAT
            if ((var115 <= 0.005)) {
                __label__ = 411;
                break $S_384;
            }
            __label__ = 394;
            }
        for(;;) switch (__label__) {
            case 394 :
            // NORMAL
                $S_394 : {
                // NORMAL
                    var var121 = thisRef.m_u.ojcVec2mulLocalFLOAT(thisRef.m_u,(1.0 / thisRef.m_length)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@9f25a4c
                    }
                $S_429 : {
                // NORMAL
                    var var124 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.m_rA,thisRef.m_u); // type is FLOAT value type is FLOAT
                    var local_14_FLOAT = var124; // type is FLOAT value type is FLOAT
                    var var129 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.m_rB,thisRef.m_u); // type is FLOAT value type is FLOAT
                    var local_15_FLOAT = var129; // type is FLOAT value type is FLOAT
                    local_16_FLOAT = (((thisRef.m_invMassA + ((thisRef.m_invIA * local_14_FLOAT) * local_14_FLOAT)) + thisRef.m_invMassB) + ((thisRef.m_invIB * local_15_FLOAT) * local_15_FLOAT)); // type is FLOAT value type is FLOAT
                    var var149 = local_16_FLOAT; // type is FLOAT value type is FLOAT
                    if ((var149 == 0.0)) {
                        __label__ = 503;
                        break $S_429;
                    }
                    __label__ = 496;
                    }
                $M_503_496 : for(;;) switch (__label__) {
                    case 503 :
                    // NORMAL
                        var153 = 0.0; // type is FLOAT value type is FLOAT
                        break $M_503_496;
                    case 496 :
                    // NORMAL
                        var153 = (1.0 / local_16_FLOAT); // type is FLOAT value type is FLOAT
                        break $M_503_496;
                }
                $S_504 : {
                // NORMAL
                    thisRef.m_mass = var153;
                    var var155 = data.step.warmStarting; // type is BOOLEAN value type is BOOLEAN
                    if ((var155 == 0)) {
                        __label__ = 694;
                        break $S_504;
                    }
                    __label__ = 517;
                    }
                $M_517_694 : for(;;) switch (__label__) {
                    case 694 :
                    // NORMAL
                        thisRef.m_impulse = 0.0;
                        break $M_517_694;
                    case 517 :
                    // NORMAL
                        var var159 = (thisRef.m_impulse * data.step.dtRatio); // type is FLOAT value type is FLOAT
                        thisRef.m_impulse = var159;
                        var local_17_FLOAT = (thisRef.m_impulse * thisRef.m_u.x); // type is FLOAT value type is FLOAT
                        var local_18_FLOAT = (thisRef.m_impulse * thisRef.m_u.y); // type is FLOAT value type is FLOAT
                        var var172 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@71a37e2c
                        var var177 = (var172.x - (thisRef.m_invMassA * local_17_FLOAT)); // type is FLOAT value type is FLOAT
                        var172.x = var177;
                        var var178 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@71a37e2c
                        var var183 = (var178.y - (thisRef.m_invMassA * local_18_FLOAT)); // type is FLOAT value type is FLOAT
                        var178.y = var183;
                        local_5_FLOAT = (local_5_FLOAT - (thisRef.m_invIA * ((thisRef.m_rA.x * local_18_FLOAT) - (thisRef.m_rA.y * local_17_FLOAT)))); // type is FLOAT value type is FLOAT
                        var var198 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@f72516
                        var var203 = (var198.x + (thisRef.m_invMassB * local_17_FLOAT)); // type is FLOAT value type is FLOAT
                        var198.x = var203;
                        var var204 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@f72516
                        var var209 = (var204.y + (thisRef.m_invMassB * local_18_FLOAT)); // type is FLOAT value type is FLOAT
                        var204.y = var209;
                        local_9_FLOAT = (local_9_FLOAT + (thisRef.m_invIB * ((thisRef.m_rB.x * local_18_FLOAT) - (thisRef.m_rB.y * local_17_FLOAT)))); // type is FLOAT value type is FLOAT
                        break $M_517_694;
                }
                thisRef.pool.VOIDpushRotINT(thisRef.pool,2);
                thisRef.pool.VOIDpushVec2INT(thisRef.pool,1);
                var var228 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
                var var229 = local_5_FLOAT; // type is FLOAT value type is FLOAT
                var228.w = var229;
                var var232 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
                var var233 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                var232.w = var233;
                return;
            case 411 :
            // NORMAL
                thisRef.m_u.VOIDsetZero(thisRef.m_u);
                thisRef.m_mass = 0.0;
                thisRef.m_impulse = 0.0;
                return;
        }
    },

    VOIDsolveVelocityConstraintsojdSolverData : function(thisRef,data) {
        var local_3_FLOAT = null; // type is FLOAT # of inits = 2
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_9_FLOAT = null; // type is FLOAT # of inits = 1
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_5_FLOAT = null; // type is FLOAT # of inits = 2
        var local_10_FLOAT = null; // type is FLOAT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var2 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_2_REFERENCE = var2.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@10daa71
            var var7 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_3_FLOAT = var7.w; // type is FLOAT value type is FLOAT
            var var13 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_4_REFERENCE = var13.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@754d6e6e
            var var18 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_5_FLOAT = var18.w; // type is FLOAT value type is FLOAT
            var var23 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6e8ff7f1
            var local_6_REFERENCE = var23; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3c928ef5
            var var26 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@50a0f534
            var local_7_REFERENCE = var26; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4e00df50
            var var29 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5f21891e
            var local_8_REFERENCE = var29; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@776c5129
            ojcVec2.VOIDcrossToOutUnsafeFLOATojcVec2ojcVec2(local_3_FLOAT,thisRef.m_rA,local_6_REFERENCE);
            var var36 = local_6_REFERENCE.ojcVec2addLocalojcVec2(local_6_REFERENCE,local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@203203a5
            ojcVec2.VOIDcrossToOutUnsafeFLOATojcVec2ojcVec2(local_5_FLOAT,thisRef.m_rB,local_7_REFERENCE);
            var var42 = local_7_REFERENCE.ojcVec2addLocalojcVec2(local_7_REFERENCE,local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6800a2ac
            local_9_FLOAT = (thisRef.m_length - thisRef.m_maxLength); // type is FLOAT value type is FLOAT
            var var48 = thisRef.m_u; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3bbaafcb
            var var51 = local_8_REFERENCE.ojcVec2setojcVec2(local_8_REFERENCE,local_7_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2e4a548c
            var var53 = var51.ojcVec2subLocalojcVec2(var51,local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1ed555cb
            var var54 = ojcVec2.FLOATdotojcVec2ojcVec2(var48,var53); // type is FLOAT value type is FLOAT
            local_10_FLOAT = var54; // type is FLOAT value type is FLOAT
            var var57 = local_9_FLOAT; // type is FLOAT value type is FLOAT
            if ((var57 >= 0.0)) {
                __label__ = 177;
                break $S_0;
            }
            __label__ = 162;
            }
        $M_162_177 : for(;;) switch (__label__) {
            case 162 :
            // NORMAL
                local_10_FLOAT = (local_10_FLOAT + (data.step.inv_dt * local_9_FLOAT)); // type is FLOAT value type is FLOAT
                __label__ = 177;
                continue $M_162_177;
            case 177 :
            // NORMAL
                var local_11_FLOAT = ((-thisRef.m_mass) * local_10_FLOAT); // type is FLOAT value type is FLOAT
                var local_12_FLOAT = thisRef.m_impulse; // type is FLOAT value type is FLOAT
                var var78 = ojcMathUtils.FLOATminFLOATFLOAT(0.0,(thisRef.m_impulse + local_11_FLOAT)); // type is FLOAT value type is FLOAT
                thisRef.m_impulse = var78;
                var local_11_FLOAT = (thisRef.m_impulse - local_12_FLOAT); // type is FLOAT value type is FLOAT
                var local_13_FLOAT = (local_11_FLOAT * thisRef.m_u.x); // type is FLOAT value type is FLOAT
                var local_14_FLOAT = (local_11_FLOAT * thisRef.m_u.y); // type is FLOAT value type is FLOAT
                var var95 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2b302c04
                var var100 = (var95.x - (thisRef.m_invMassA * local_13_FLOAT)); // type is FLOAT value type is FLOAT
                var95.x = var100;
                var var101 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2b302c04
                var var106 = (var101.y - (thisRef.m_invMassA * local_14_FLOAT)); // type is FLOAT value type is FLOAT
                var101.y = var106;
                local_3_FLOAT = (local_3_FLOAT - (thisRef.m_invIA * ((thisRef.m_rA.x * local_14_FLOAT) - (thisRef.m_rA.y * local_13_FLOAT)))); // type is FLOAT value type is FLOAT
                var var121 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@56c32337
                var var126 = (var121.x + (thisRef.m_invMassB * local_13_FLOAT)); // type is FLOAT value type is FLOAT
                var121.x = var126;
                var var127 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@56c32337
                var var132 = (var127.y + (thisRef.m_invMassB * local_14_FLOAT)); // type is FLOAT value type is FLOAT
                var127.y = var132;
                local_5_FLOAT = (local_5_FLOAT + (thisRef.m_invIB * ((thisRef.m_rB.x * local_14_FLOAT) - (thisRef.m_rB.y * local_13_FLOAT)))); // type is FLOAT value type is FLOAT
                thisRef.pool.VOIDpushVec2INT(thisRef.pool,3);
                var var150 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
                var var151 = local_3_FLOAT; // type is FLOAT value type is FLOAT
                var150.w = var151;
                var var154 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
                var var155 = local_5_FLOAT; // type is FLOAT value type is FLOAT
                var154.w = var155;
                return;
        }
    },

    BOOLEANsolvePositionConstraintsojdSolverData : function(thisRef,data) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var2 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            var local_2_REFERENCE = var2.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6d86a06b
            var var7 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            var local_3_FLOAT = var7.a; // type is FLOAT value type is FLOAT
            var var13 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            var local_4_REFERENCE = var13.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1855ea63
            var var18 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            var local_5_FLOAT = var18.a; // type is FLOAT value type is FLOAT
            var var23 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@440f5c27
            var local_6_REFERENCE = var23; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@30b127ba
            var var26 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@68ec5c3f
            var local_7_REFERENCE = var26; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5f5db5b3
            var var29 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@618d341b
            var local_8_REFERENCE = var29; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@58b84367
            var var32 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@523ff1eb
            var local_9_REFERENCE = var32; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@607d2632
            var var35 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6858fbca
            var local_10_REFERENCE = var35; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@72e13edd
            var var38 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5ffc39c3
            var local_11_REFERENCE = var38; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@56b9c8b8
            var var42 = local_6_REFERENCE.ojcRotsetFLOAT(local_6_REFERENCE,local_3_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7910ef0e
            var var45 = local_7_REFERENCE.ojcRotsetFLOAT(local_7_REFERENCE,local_5_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2fc2127
            var var46 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@30b127ba
            var var49 = local_11_REFERENCE.ojcVec2setojcVec2(local_11_REFERENCE,thisRef.m_localAnchorA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3c70229a
            var var51 = var49.ojcVec2subLocalojcVec2(var49,thisRef.m_localCenterA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2414d1a4
            ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var46,var51,local_9_REFERENCE);
            var var53 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5f5db5b3
            var var56 = local_11_REFERENCE.ojcVec2setojcVec2(local_11_REFERENCE,thisRef.m_localAnchorB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5a8232b7
            var var58 = var56.ojcVec2subLocalojcVec2(var56,thisRef.m_localCenterB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3914d5d9
            ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var53,var58,local_10_REFERENCE);
            var var62 = local_8_REFERENCE.ojcVec2setojcVec2(local_8_REFERENCE,local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4cd4493
            var var64 = var62.ojcVec2addLocalojcVec2(var62,local_10_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6563c5f
            var var66 = var64.ojcVec2subLocalojcVec2(var64,local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4d0ab1a8
            var var68 = var66.ojcVec2subLocalojcVec2(var66,local_9_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@522f0fcd
            var var70 = local_8_REFERENCE.FLOATnormalize(local_8_REFERENCE); // type is FLOAT value type is FLOAT
            var local_12_FLOAT = var70; // type is FLOAT value type is FLOAT
            var local_13_FLOAT = (local_12_FLOAT - thisRef.m_maxLength); // type is FLOAT value type is FLOAT
            var var79 = ojcMathUtils.FLOATclampFLOATFLOATFLOAT(local_13_FLOAT,0.0,0.2); // type is FLOAT value type is FLOAT
            var local_13_FLOAT = var79; // type is FLOAT value type is FLOAT
            var local_14_FLOAT = ((-thisRef.m_mass) * local_13_FLOAT); // type is FLOAT value type is FLOAT
            var local_15_FLOAT = (local_14_FLOAT * local_8_REFERENCE.x); // type is FLOAT value type is FLOAT
            var local_16_FLOAT = (local_14_FLOAT * local_8_REFERENCE.y); // type is FLOAT value type is FLOAT
            var var99 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3c2830c7
            var var104 = (var99.x - (thisRef.m_invMassA * local_15_FLOAT)); // type is FLOAT value type is FLOAT
            var99.x = var104;
            var var105 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3c2830c7
            var var110 = (var105.y - (thisRef.m_invMassA * local_16_FLOAT)); // type is FLOAT value type is FLOAT
            var105.y = var110;
            var local_3_FLOAT = (local_3_FLOAT - (thisRef.m_invIA * ((local_9_REFERENCE.x * local_16_FLOAT) - (local_9_REFERENCE.y * local_15_FLOAT)))); // type is FLOAT value type is FLOAT
            var var125 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@bab57d9
            var var130 = (var125.x + (thisRef.m_invMassB * local_15_FLOAT)); // type is FLOAT value type is FLOAT
            var125.x = var130;
            var var131 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@bab57d9
            var var136 = (var131.y + (thisRef.m_invMassB * local_16_FLOAT)); // type is FLOAT value type is FLOAT
            var131.y = var136;
            var local_5_FLOAT = (local_5_FLOAT + (thisRef.m_invIB * ((local_10_REFERENCE.x * local_16_FLOAT) - (local_10_REFERENCE.y * local_15_FLOAT)))); // type is FLOAT value type is FLOAT
            thisRef.pool.VOIDpushRotINT(thisRef.pool,2);
            thisRef.pool.VOIDpushVec2INT(thisRef.pool,4);
            var var155 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            var var156 = local_3_FLOAT; // type is FLOAT value type is FLOAT
            var155.a = var156;
            var var159 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            var var160 = local_5_FLOAT; // type is FLOAT value type is FLOAT
            var159.a = var160;
            var var163 = (local_12_FLOAT - thisRef.m_maxLength); // type is FLOAT value type is FLOAT
            if ((var163 >= 0.005)) {
                __label__ = 441;
                break $S_0;
            }
            __label__ = 437;
            }
        for(;;) switch (__label__) {
            case 441 :
            // NORMAL
                var var165 = 0; // type is INT value type is INT
                return var165;
            case 437 :
            // NORMAL
                var var165 = 1; // type is INT value type is INT
                return var165;
        }
    },

    classInitCheck : function() {
        if (!ojdjRopeJoint.__initialized) {
            ojdjRopeJoint.__initialized = true;
            var thePrototype = ojdjRopeJoint.Create.prototype;
            thePrototype.instanceOf = ojdjRopeJoint.instanceOf;
            thePrototype.ClassgetClass = ojdjRopeJoint.ClassgetClass;
            thePrototype.BOOLEANsolvePositionConstraintsojdSolverData = ojdjRopeJoint.BOOLEANsolvePositionConstraintsojdSolverData;
            thePrototype.VOIDsolveVelocityConstraintsojdSolverData = ojdjRopeJoint.VOIDsolveVelocityConstraintsojdSolverData;
            thePrototype.VOIDinitVelocityConstraintsojdSolverData = ojdjRopeJoint.VOIDinitVelocityConstraintsojdSolverData;
            thePrototype.BOOLEANgetCollideConnected = ojdjJoint.BOOLEANgetCollideConnected;
            thePrototype.ojdBodygetBodyB = ojdjJoint.ojdBodygetBodyB;
            thePrototype.ojdBodygetBodyA = ojdjJoint.ojdBodygetBodyA;
            thePrototype.ojdjJointTypegetType = ojdjJoint.ojdjJointTypegetType;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojdjJoint.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var ojdjRopeJointDef = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 183,
    __implementedTypes : [183,146,1],

    Create : function() {
        this.type = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.userData = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.bodyA = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.bodyB = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.collideConnected = false; // declared in org.jbox2d.dynamics.joints.JointDef
        this.localAnchorA = null; // declared in org.jbox2d.dynamics.joints.RopeJointDef
        this.localAnchorB = null; // declared in org.jbox2d.dynamics.joints.RopeJointDef
        this.maxLength = 0; // declared in org.jbox2d.dynamics.joints.RopeJointDef
    },

    instanceOf : function(aType) {
        return ojdjRopeJointDef.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdjRopeJointDef;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        ojdjJointDef.VOIDinit(thisRef);
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var0);
        thisRef.localAnchorA = var0;
        var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var1);
        thisRef.localAnchorB = var1;
        var var2 = ojdjJointType.ROPE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2ff6143f
        thisRef.type = var2;
        var var4 = thisRef.localAnchorA.ojcVec2setFLOATFLOAT(thisRef.localAnchorA,-1.0,0.0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@462207f4
        var var6 = thisRef.localAnchorB.ojcVec2setFLOATFLOAT(thisRef.localAnchorB,1.0,0.0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5f4ed683
        return;
    },

    classInitCheck : function() {
        if (!ojdjRopeJointDef.__initialized) {
            ojdjRopeJointDef.__initialized = true;
            var thePrototype = ojdjRopeJointDef.Create.prototype;
            thePrototype.instanceOf = ojdjRopeJointDef.instanceOf;
            thePrototype.ClassgetClass = ojdjRopeJointDef.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojdjJointDef.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var dmbawWindow = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 184,
    __implementedTypes : [184,185,1],

    instanceOf : function(aType) {
        return dmbawWindow.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return dmbawWindow;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    dmbawWindowwindow : function() {
         return bytecoder.imports.runtime.nativewindow();
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    classInitCheck : function() {
        if (!dmbawWindow.__initialized) {
            dmbawWindow.__initialized = true;
            jlObject.classInitCheck();
            dmbaOpaqueReferenceType.classInitCheck();
        }
    },

};

var dmbaOpaqueReferenceType = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 185,
    __implementedTypes : [185,1],


    classInitCheck : function() {
        if (!dmbaOpaqueReferenceType.__initialized) {
            dmbaOpaqueReferenceType.__initialized = true;
            jlObject.classInitCheck();
        }
    },

};

var dmbawDocument = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 186,
    __implementedTypes : [187,185,186,1],


    classInitCheck : function() {
        if (!dmbawDocument.__initialized) {
            dmbawDocument.__initialized = true;
            jlObject.classInitCheck();
            dmbawElement.classInitCheck();
            dmbaOpaqueReferenceType.classInitCheck();
        }
    },

};

var dmbawElement = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 187,
    __implementedTypes : [187,185,1],


    classInitCheck : function() {
        if (!dmbawElement.__initialized) {
            dmbawElement.__initialized = true;
            jlObject.classInitCheck();
            dmbaOpaqueReferenceType.classInitCheck();
        }
    },

};

var dmbawHTMLCanvasElement = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 188,
    __implementedTypes : [187,188,185,1],


    classInitCheck : function() {
        if (!dmbawHTMLCanvasElement.__initialized) {
            dmbawHTMLCanvasElement.__initialized = true;
            jlObject.classInitCheck();
            dmbawElement.classInitCheck();
            dmbaOpaqueReferenceType.classInitCheck();
        }
    },

};

var dmbawCanvasRenderingContext2D = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 189,
    __implementedTypes : [185,189,1],


    classInitCheck : function() {
        if (!dmbawCanvasRenderingContext2D.__initialized) {
            dmbawCanvasRenderingContext2D.__initialized = true;
            jlObject.classInitCheck();
            dmbaOpaqueReferenceType.classInitCheck();
        }
    },

};

var jlLong = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 190,
    __implementedTypes : [190,16,2,1,11],

    Create : function() {
        this.longValue = 0; // declared in java.lang.Long
    },

    instanceOf : function(aType) {
        return jlLong.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jlLong;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    jlStringtoStringLONG : function(aValue) {
        var __label__ = null;
        var var0 = new jlStringBuilder.Create(); // type is REFERENCE value type is REFERENCE
        jlStringBuilder.VOIDinit(var0);
        var local_2_REFERENCE = var0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@12ab6479
        var var3 = local_2_REFERENCE.jlStringBuilderappendLONG(local_2_REFERENCE,aValue); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@43d0c8b9
        var var5 = local_2_REFERENCE.jlStringtoString(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2e3bd32e
        return var5;
    },

    LONGlongValue : function(thisRef) {
        var __label__ = null;
        return thisRef.longValue;
    },

    INThashCode : function(thisRef) {
        var __label__ = null;
        return Math.floor(thisRef.longValue);
    },

    BOOLEANequalsjlObject : function(thisRef,o) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((thisRef != o)) {
                break $S_0;
            }
            return 1;
            }
        $S_7 : {
        // NORMAL
            if (o == null ) {
                return 0;
            }
            }
        $S_11 : {
        // NORMAL
            var var0 = thisRef.ClassgetClass(); // type is REFERENCE value type is REFERENCE
            var var1 = o.ClassgetClass(); // type is REFERENCE value type is REFERENCE
            if ((var0 == var1)) {
                break $S_11;
            }
            return 0;
            }
        var local_2_REFERENCE = o; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5ced8ee2
        var var3 = thisRef.longValue; // type is LONG value type is LONG
        var var5 = local_2_REFERENCE.LONGlongValue(local_2_REFERENCE); // type is LONG value type is LONG
        if ((var3 == var5)) {
            return 1;
        }
        return 0;
    },

    jlStringtoString : function(thisRef) {
        var __label__ = null;
        var var1 = jlLong.jlStringtoStringLONG(thisRef.longValue); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@690b3795
        return var1;
    },

    classInitCheck : function() {
        if (!jlLong.__initialized) {
            jlLong.__initialized = true;
            var thePrototype = jlLong.Create.prototype;
            thePrototype.instanceOf = jlLong.instanceOf;
            thePrototype.ClassgetClass = jlLong.ClassgetClass;
            thePrototype.jlStringtoString = jlLong.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlLong.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlLong.INThashCode;
            thePrototype.LONGlongValue = jlLong.LONGlongValue;
            jlNumber.classInitCheck();
            jiSerializable.classInitCheck();
            jlObject.classInitCheck();
            jlComparable.classInitCheck();
        }
    },

};

var jlStringBuilder = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 191,
    __implementedTypes : [12,2,192,37,191,1,11],
    FORMAT_SYMBOLS : null, // declared in java.lang.StringBuilder

    Create : function() {
        this.byteData = null; // declared in java.lang.StringBuilder
    },

    instanceOf : function(aType) {
        return jlStringBuilder.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jlStringBuilder;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var __label__ = null;
        var var0 = new jtDecimalFormatSymbols.Create(); // type is REFERENCE value type is REFERENCE
        jtDecimalFormatSymbols.VOIDinit(var0);
        jlStringBuilder.FORMAT_SYMBOLS = var0;
        return;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = bytecoder.newArray(0,0); // type is REFERENCE value type is REFERENCE
        thisRef.byteData = var0;
        return;
    },

    jlStringBuilderappendLONG : function(thisRef,aValue) {
        var local_8_INT = null; // type is INT # of inits = 3
        var local_7_INT = null; // type is INT # of inits = 3
        var var11 = null; // type is LONG # of inits = 3
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_5_INT = null; // type is INT # of inits = 4
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_3_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_3_INT = 0; // type is INT value type is INT
            if ((aValue >= 0)) {
                var11 = aValue; // type is LONG value type is LONG
                __label__ = 13;
                break $S_0;
            }
            __label__ = 8;
            }
        $M_13_8 : for(;;) switch (__label__) {
            case 13 :
            // NORMAL
                $S_13 : {
                // NORMAL
                    local_4_REFERENCE = bytecoder.newArray(20,0); // type is REFERENCE value type is REFERENCE
                    local_5_INT = 0; // type is INT value type is INT
                    __label__ = 22;
                    }
                $L_22 : for (;;) {
                    $S_22 : {
                    // NORMAL
                        var local_6_INT = (Math.floor(var11) % 10); // type is INT value type is INT
                        var var17 = local_4_REFERENCE; // type is REFERENCE value type is REFERENCE
                        var var18 = local_5_INT; // type is INT value type is INT
                        local_5_INT = (local_5_INT + 1); // type is INT value type is INT
                        var var20 = Math.floor(local_6_INT); // type is BYTE value type is BYTE
                        var17.data[var18] = var20;
                        var local_1_LONG = Math.floor((var11 / 10)); // type is LONG value type is LONG
                        var var24 = local_1_LONG; // type is LONG value type is LONG
                        if ((var24 > 0)) {
                            var11 = local_1_LONG; // type is LONG value type is LONG
                            __label__ = 22;
                            continue $L_22;
                        }
                        }
                    $S_52 : {
                    // NORMAL
                        var var26 = local_3_INT; // type is INT value type is INT
                        if ((var26 == 0)) {
                            __label__ = 76;
                            break $S_52;
                        }
                        __label__ = 56;
                        }
                    $M_56_76 : for(;;) switch (__label__) {
                        case 56 :
                        // NORMAL
                            local_6_REFERENCE = bytecoder.newArray((local_5_INT + 1),0); // type is REFERENCE value type is REFERENCE
                            var var31 = local_6_REFERENCE; // type is REFERENCE value type is REFERENCE
                            var31.data[0] = 45;
                            local_7_INT = 1; // type is INT value type is INT
                            break $M_56_76;
                        case 76 :
                        // NORMAL
                            local_6_REFERENCE = bytecoder.newArray(local_5_INT,0); // type is REFERENCE value type is REFERENCE
                            local_7_INT = 0; // type is INT value type is INT
                            break $M_56_76;
                    }
                    $S_85 : {
                    // NORMAL
                        local_8_INT = 0; // type is INT value type is INT
                        __label__ = 88;
                        }
                    $L_88 : for (;;) {
                        $S_88 : {
                        // NORMAL
                            var var39 = local_8_INT; // type is INT value type is INT
                            var var40 = local_5_INT; // type is INT value type is INT
                            if ((var39 >= var40)) {
                                __label__ = 123;
                                break $S_88;
                            }
                            __label__ = 95;
                            }
                        for(;;) switch (__label__) {
                            case 95 :
                            // NORMAL
                                var var42 = local_6_REFERENCE; // type is REFERENCE value type is REFERENCE
                                var var45 = (local_7_INT + local_8_INT); // type is INT value type is INT
                                var var51 = local_4_REFERENCE.data[((local_5_INT - 1) - local_8_INT)]; // type is BYTE value type is BYTE
                                var var53 = Math.floor((48 + var51)); // type is BYTE value type is BYTE
                                var42.data[var45] = var53;
                                local_8_INT = (local_8_INT + 1); // type is INT value type is INT
                                __label__ = 88;
                                continue $L_88;
                            case 123 :
                            // NORMAL
                                thisRef.VOIDinternalAddA1BYTE(thisRef,local_6_REFERENCE);
                                return thisRef;
                        }
                    }
                }
            case 8 :
            // NORMAL
                local_3_INT = 1; // type is INT value type is INT
                var local_1_LONG = (-aValue); // type is LONG value type is LONG
                var11 = local_1_LONG; // type is LONG value type is LONG
                __label__ = 13;
                continue $M_13_8;
        }
    },

    VOIDinternalAddA1BYTE : function(thisRef,aOtherData) {
        var local_3_INT = null; // type is INT # of inits = 5
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_4_INT = null; // type is INT # of inits = 6
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_2_REFERENCE = bytecoder.newArray((thisRef.byteData.data.length + aOtherData.data.length),0); // type is REFERENCE value type is REFERENCE
            local_3_INT = 0; // type is INT value type is INT
            local_4_INT = 0; // type is INT value type is INT
            __label__ = 16;
            }
        $L_16 : for (;;) {
            $S_16 : {
            // NORMAL
                var var10 = local_4_INT; // type is INT value type is INT
                var var12 = thisRef.byteData.data.length; // type is INT value type is INT
                if ((var10 >= var12)) {
                    __label__ = 45;
                    break $S_16;
                }
                __label__ = 26;
                }
            for(;;) switch (__label__) {
                case 45 :
                // NORMAL
                    $S_45 : {
                    // NORMAL
                        local_4_INT = 0; // type is INT value type is INT
                        __label__ = 48;
                        }
                    $L_48 : for (;;) {
                        $S_48 : {
                        // NORMAL
                            var var14 = local_4_INT; // type is INT value type is INT
                            var var15 = aOtherData.data.length; // type is INT value type is INT
                            if ((var14 >= var15)) {
                                __label__ = 71;
                                break $S_48;
                            }
                            __label__ = 55;
                            }
                        for(;;) switch (__label__) {
                            case 71 :
                            // NORMAL
                                var var16 = local_2_REFERENCE; // type is REFERENCE value type is REFERENCE
                                thisRef.byteData = var16;
                                return;
                            case 55 :
                            // NORMAL
                                var var17 = local_2_REFERENCE; // type is REFERENCE value type is REFERENCE
                                var var18 = local_3_INT; // type is INT value type is INT
                                local_3_INT = (local_3_INT + 1); // type is INT value type is INT
                                var var20 = aOtherData.data[local_4_INT]; // type is BYTE value type is BYTE
                                var17.data[var18] = var20;
                                local_4_INT = (local_4_INT + 1); // type is INT value type is INT
                                __label__ = 48;
                                continue $L_48;
                        }
                    }
                case 26 :
                // NORMAL
                    var var21 = local_2_REFERENCE; // type is REFERENCE value type is REFERENCE
                    var var22 = local_3_INT; // type is INT value type is INT
                    local_3_INT = (local_3_INT + 1); // type is INT value type is INT
                    var var25 = thisRef.byteData.data[local_4_INT]; // type is BYTE value type is BYTE
                    var21.data[var22] = var25;
                    local_4_INT = (local_4_INT + 1); // type is INT value type is INT
                    __label__ = 16;
                    continue $L_16;
            }
        }
    },

    jlStringtoString : function(thisRef) {
        var __label__ = null;
        var var0 = new jlString.Create(); // type is REFERENCE value type is REFERENCE
        jlString.VOIDinitA1BYTE(var0,thisRef.byteData);
        return var0;
    },

    jlStringBuilderappendINT : function(thisRef,aValue) {
        var __label__ = null;
        var var1 = thisRef.jlStringBuilderappendLONG(thisRef,Math.floor(aValue)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@26cdb330
        return var1;
    },

    jlStringBuilderappendjlString : function(thisRef,aString) {
        var __label__ = null;
        var var0 = aString.A1BYTEgetBytes(aString); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1a37913c
        var local_2_REFERENCE = var0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1a39d51c
        thisRef.VOIDinternalAddA1BYTE(thisRef,local_2_REFERENCE);
        return thisRef;
    },

    jlStringBuilderappendFLOAT : function(thisRef,aValue) {
        var __label__ = null;
        thisRef.VOIDappendInternalDOUBLELONG(thisRef,aValue,1000000000);
        return thisRef;
    },

    VOIDappendInternalDOUBLELONG : function(thisRef,aValue,aMultiplier) {
        var local_7_LONG = null; // type is LONG # of inits = 2
        var local_9_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_5_LONG = null; // type is LONG # of inits = 2
        var local_10_INT = null; // type is INT # of inits = 4
        var local_12_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((aValue >= 0.0)) {
                __label__ = 30;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_30_6 : for(;;) switch (__label__) {
            case 30 :
            // NORMAL
                local_5_LONG = Math.floor(Math.floor(aValue)); // type is LONG value type is LONG
                local_7_LONG = Math.floor(Math.floor(((aValue % 1.0) * 10000.0))); // type is LONG value type is LONG
                break $M_30_6;
            case 6 :
            // NORMAL
                local_5_LONG = Math.floor(Math.ceil(aValue)); // type is LONG value type is LONG
                local_7_LONG = (-Math.floor(Math.ceil(((aValue % 1.0) * 10000.0)))); // type is LONG value type is LONG
                break $M_30_6;
        }
        $S_50 : {
        // NORMAL
            var var21 = thisRef.jlStringBuilderappendLONG(thisRef,local_5_LONG); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2c01a655
            var var22 = new jlStringBuilder.Create(); // type is REFERENCE value type is REFERENCE
            jlStringBuilder.VOIDinit(var22);
            local_9_REFERENCE = var22; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4ac36998
            var var26 = local_9_REFERENCE.jlStringBuilderappendLONG(local_9_REFERENCE,local_7_LONG); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6a778a6e
            var var28 = local_9_REFERENCE.INTlength(local_9_REFERENCE); // type is INT value type is INT
            local_10_INT = (var28 - 1); // type is INT value type is INT
            __label__ = 83;
            }
        $L_83 : for (;;) {
            $S_83 : {
            // NORMAL
                var var32 = local_10_INT; // type is INT value type is INT
                if ((var32 < 0)) {
                    __label__ = 150;
                    break $S_83;
                }
                __label__ = 88;
                }
            for(;;) switch (__label__) {
                case 88 :
                // NORMAL
                    $S_88 : {
                    // NORMAL
                        var var39 = local_9_REFERENCE.CHARcharAtINT(local_9_REFERENCE,local_10_INT); // type is CHAR value type is CHAR
                        var local_11_CHAR = var39; // type is CHAR value type is CHAR
                        var var42 = local_11_CHAR; // type is CHAR value type is CHAR
                        if ((var42 == 48)) {
                            __label__ = 144;
                            break $S_88;
                        }
                        __label__ = 104;
                        }
                    for(;;) switch (__label__) {
                        case 104 :
                        // NORMAL
                            $S_104 : {
                            // NORMAL
                                var var44 = jlStringBuilder.FORMAT_SYMBOLS.CHARgetDecimalSeparator(jlStringBuilder.FORMAT_SYMBOLS); // type is CHAR value type is CHAR
                                var var45 = thisRef.jlStringBuilderappendCHAR(thisRef,var44); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@24fc7b1
                                local_12_INT = 0; // type is INT value type is INT
                                __label__ = 118;
                                }
                            $L_118 : for (;;) {
                                $S_118 : {
                                // NORMAL
                                    var var48 = local_12_INT; // type is INT value type is INT
                                    var var49 = local_10_INT; // type is INT value type is INT
                                    if ((var48 > var49)) {
                                        return;
                                    }
                                    }
                                var var52 = local_9_REFERENCE.CHARcharAtINT(local_9_REFERENCE,local_12_INT); // type is CHAR value type is CHAR
                                var var53 = thisRef.jlStringBuilderappendCHAR(thisRef,var52); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7c7ec648
                                local_12_INT = (local_12_INT + 1); // type is INT value type is INT
                                __label__ = 118;
                                continue $L_118;
                            }
                        case 144 :
                        // NORMAL
                            local_10_INT = (local_10_INT + -1); // type is INT value type is INT
                            __label__ = 83;
                            continue $L_83;
                    }
                case 150 :
                // NORMAL
                    var var34 = jlStringBuilder.FORMAT_SYMBOLS.CHARgetDecimalSeparator(jlStringBuilder.FORMAT_SYMBOLS); // type is CHAR value type is CHAR
                    var var35 = thisRef.jlStringBuilderappendCHAR(thisRef,var34); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5d6ce49c
                    var var36 = thisRef.jlStringBuilderappendCHAR(thisRef,48); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@b1e21a5
                    return;
            }
        }
    },

    INTlength : function(thisRef) {
        var __label__ = null;
        return thisRef.byteData.data.length;
    },

    CHARcharAtINT : function(thisRef,aIndex) {
        var __label__ = null;
        var var1 = thisRef.byteData.data[aIndex]; // type is BYTE value type is BYTE
        return Math.floor(var1);
    },

    jlStringBuilderappendCHAR : function(thisRef,aValue) {
        var __label__ = null;
        var var0 = bytecoder.newArray(1,0); // type is REFERENCE value type is REFERENCE
        var var1 = Math.floor(aValue); // type is BYTE value type is BYTE
        var0.data[0] = var1;
        thisRef.VOIDinternalAddA1BYTE(thisRef,var0);
        return thisRef;
    },

    jlStringBuilderappendjlObject : function(thisRef,aObject) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if (aObject != null ) {
                __label__ = 15;
                break $S_0;
            }
            __label__ = 4;
            }
        for(;;) switch (__label__) {
            case 4 :
            // NORMAL
                var var4 = bytecoder.stringpool[5].A1BYTEgetBytes(bytecoder.stringpool[5]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@35de25e9
                thisRef.VOIDinternalAddA1BYTE(thisRef,var4);
                return thisRef;
            case 15 :
            // NORMAL
                $S_15 : {
                // NORMAL
                    var var0 = (aObject == null ? false : aObject.instanceOf(jlString)); // type is BOOLEAN value type is BOOLEAN
                    if ((var0 == 0)) {
                        __label__ = 35;
                        break $S_15;
                    }
                    __label__ = 22;
                    }
                for(;;) switch (__label__) {
                    case 22 :
                    // NORMAL
                        var var5 = aObject.A1BYTEgetBytes(aObject); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@628df773
                        thisRef.VOIDinternalAddA1BYTE(thisRef,var5);
                        return thisRef;
                    case 35 :
                    // NORMAL
                        $S_35 : {
                        // NORMAL
                            var var1 = (aObject == null ? false : aObject.instanceOf(jlLong)); // type is BOOLEAN value type is BOOLEAN
                            if ((var1 == 0)) {
                                __label__ = 56;
                                break $S_35;
                            }
                            __label__ = 42;
                            }
                        for(;;) switch (__label__) {
                            case 42 :
                            // NORMAL
                                var var2 = aObject.LONGlongValue(aObject); // type is LONG value type is LONG
                                var var3 = thisRef.jlStringBuilderappendLONG(thisRef,var2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@33734c37
                                return thisRef;
                            case 56 :
                            // NORMAL
                                $S_56 : {
                                // NORMAL
                                    var var6 = (aObject == null ? false : aObject.instanceOf(jlInteger)); // type is BOOLEAN value type is BOOLEAN
                                    if ((var6 == 0)) {
                                        __label__ = 77;
                                        break $S_56;
                                    }
                                    __label__ = 63;
                                    }
                                for(;;) switch (__label__) {
                                    case 63 :
                                    // NORMAL
                                        var var7 = aObject.INTintValue(aObject); // type is INT value type is INT
                                        var var8 = thisRef.jlStringBuilderappendINT(thisRef,var7); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@84dd012
                                        return thisRef;
                                    case 77 :
                                    // NORMAL
                                        $S_77 : {
                                        // NORMAL
                                            var var9 = (aObject == null ? false : aObject.instanceOf(jlFloat)); // type is BOOLEAN value type is BOOLEAN
                                            if ((var9 == 0)) {
                                                __label__ = 98;
                                                break $S_77;
                                            }
                                            __label__ = 84;
                                            }
                                        for(;;) switch (__label__) {
                                            case 84 :
                                            // NORMAL
                                                var var10 = aObject.FLOATfloatValue(aObject); // type is FLOAT value type is FLOAT
                                                var var11 = thisRef.jlStringBuilderappendFLOAT(thisRef,var10); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4cf85d9f
                                                return thisRef;
                                            case 98 :
                                            // NORMAL
                                                $S_98 : {
                                                // NORMAL
                                                    var var12 = (aObject == null ? false : aObject.instanceOf(jlDouble)); // type is BOOLEAN value type is BOOLEAN
                                                    if ((var12 == 0)) {
                                                        __label__ = 119;
                                                        break $S_98;
                                                    }
                                                    __label__ = 105;
                                                    }
                                                for(;;) switch (__label__) {
                                                    case 119 :
                                                    // NORMAL
                                                        var var15 = aObject.jlStringtoString(aObject); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@41c31d1c
                                                        var var16 = var15.A1BYTEgetBytes(var15); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@6878e3e7
                                                        var local_2_REFERENCE = var16; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@e5363ba
                                                        thisRef.VOIDinternalAddA1BYTE(thisRef,local_2_REFERENCE);
                                                        return thisRef;
                                                    case 105 :
                                                    // NORMAL
                                                        var var13 = aObject.DOUBLEdoubleValue(aObject); // type is DOUBLE value type is DOUBLE
                                                        var var14 = thisRef.jlStringBuilderappendDOUBLE(thisRef,var13); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@59bb05a2
                                                        return thisRef;
                                                }
                                        }
                                }
                        }
                }
        }
    },

    jlStringBuilderappendDOUBLE : function(thisRef,aValue) {
        var __label__ = null;
        thisRef.VOIDappendInternalDOUBLELONG(thisRef,aValue,1000000000);
        return thisRef;
    },

    classInitCheck : function() {
        if (!jlStringBuilder.__initialized) {
            jlStringBuilder.__initialized = true;
            var thePrototype = jlStringBuilder.Create.prototype;
            thePrototype.instanceOf = jlStringBuilder.instanceOf;
            thePrototype.ClassgetClass = jlStringBuilder.ClassgetClass;
            thePrototype.jlStringBuilderappendDOUBLE = jlStringBuilder.jlStringBuilderappendDOUBLE;
            thePrototype.jlStringBuilderappendjlObject = jlStringBuilder.jlStringBuilderappendjlObject;
            thePrototype.jlStringBuilderappendCHAR = jlStringBuilder.jlStringBuilderappendCHAR;
            thePrototype.CHARcharAtINT = jlStringBuilder.CHARcharAtINT;
            thePrototype.INTlength = jlStringBuilder.INTlength;
            thePrototype.VOIDappendInternalDOUBLELONG = jlStringBuilder.VOIDappendInternalDOUBLELONG;
            thePrototype.jlStringBuilderappendFLOAT = jlStringBuilder.jlStringBuilderappendFLOAT;
            thePrototype.jlStringBuilderappendjlString = jlStringBuilder.jlStringBuilderappendjlString;
            thePrototype.jlStringBuilderappendINT = jlStringBuilder.jlStringBuilderappendINT;
            thePrototype.jlStringtoString = jlStringBuilder.jlStringtoString;
            thePrototype.VOIDinternalAddA1BYTE = jlStringBuilder.VOIDinternalAddA1BYTE;
            thePrototype.jlStringBuilderappendLONG = jlStringBuilder.jlStringBuilderappendLONG;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlAbstractStringBuilder.classInitCheck();
            jlCharSequence.classInitCheck();
            jiSerializable.classInitCheck();
            jlAppendable.classInitCheck();
            jlObject.classInitCheck();
            jlComparable.classInitCheck();
            jtDecimalFormatSymbols.classInitCheck();
            jlStringBuilder.VOIDclinit();
        }
    },

};

var jlAbstractStringBuilder = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 192,
    __implementedTypes : [12,192,37,1],

    instanceOf : function(aType) {
        return jlAbstractStringBuilder.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jlAbstractStringBuilder;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    classInitCheck : function() {
        if (!jlAbstractStringBuilder.__initialized) {
            jlAbstractStringBuilder.__initialized = true;
            jlObject.classInitCheck();
            jlCharSequence.classInitCheck();
            jlAppendable.classInitCheck();
        }
    },

};

var jtDecimalFormatSymbols = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 193,
    __implementedTypes : [23,2,193,1],
    INSTANCE : null, // declared in java.text.DecimalFormatSymbols

    Create : function() {
    },

    instanceOf : function(aType) {
        return jtDecimalFormatSymbols.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jtDecimalFormatSymbols;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var __label__ = null;
        var var0 = new jtDecimalFormatSymbols.Create(); // type is REFERENCE value type is REFERENCE
        jtDecimalFormatSymbols.VOIDinit(var0);
        jtDecimalFormatSymbols.INSTANCE = var0;
        return;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    CHARgetDecimalSeparator : function(thisRef) {
        var __label__ = null;
        return 46;
    },

    classInitCheck : function() {
        if (!jtDecimalFormatSymbols.__initialized) {
            jtDecimalFormatSymbols.__initialized = true;
            var thePrototype = jtDecimalFormatSymbols.Create.prototype;
            thePrototype.instanceOf = jtDecimalFormatSymbols.instanceOf;
            thePrototype.ClassgetClass = jtDecimalFormatSymbols.ClassgetClass;
            thePrototype.CHARgetDecimalSeparator = jtDecimalFormatSymbols.CHARgetDecimalSeparator;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            jlCloneable.classInitCheck();
            jiSerializable.classInitCheck();
            jtDecimalFormatSymbols.VOIDclinit();
        }
    },

};

var ojcManifold = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 194,
    __implementedTypes : [194,1],

    Create : function() {
        this.pointCount = 0; // declared in org.jbox2d.collision.Manifold
        this.points = null; // declared in org.jbox2d.collision.Manifold
        this.type = null; // declared in org.jbox2d.collision.Manifold
        this.localNormal = null; // declared in org.jbox2d.collision.Manifold
        this.localPoint = null; // declared in org.jbox2d.collision.Manifold
    },

    instanceOf : function(aType) {
        return ojcManifold.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcManifold;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDsetojcManifold : function(thisRef,cp) {
        var local_2_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_2_INT = 0; // type is INT value type is INT
            __label__ = 2;
            }
        $L_2 : for (;;) {
            $S_2 : {
            // NORMAL
                var var2 = local_2_INT; // type is INT value type is INT
                var var3 = cp.pointCount; // type is INT value type is INT
                if ((var2 >= var3)) {
                    __label__ = 31;
                    break $S_2;
                }
                __label__ = 10;
                }
            for(;;) switch (__label__) {
                case 31 :
                // NORMAL
                    var var10 = cp.type; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@55fc6fb
                    thisRef.type = var10;
                    var var13 = thisRef.localNormal.ojcVec2setojcVec2(thisRef.localNormal,cp.localNormal); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6784bc83
                    var var16 = thisRef.localPoint.ojcVec2setojcVec2(thisRef.localPoint,cp.localPoint); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4763b146
                    var var17 = cp.pointCount; // type is INT value type is INT
                    thisRef.pointCount = var17;
                    return;
                case 10 :
                // NORMAL
                    var var6 = thisRef.points.data[local_2_INT]; // type is REFERENCE value type is REFERENCE
                    var var9 = cp.points.data[local_2_INT]; // type is REFERENCE value type is REFERENCE
                    var6.VOIDsetojcManifoldPoint(var6,var9);
                    local_2_INT = (local_2_INT + 1); // type is INT value type is INT
                    __label__ = 2;
                    continue $L_2;
            }
        }
    },

    VOIDinit : function(thisRef) {
        var local_1_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = bytecoder.newArray(2,null); // type is REFERENCE value type is REFERENCE
            thisRef.points = var0;
            local_1_INT = 0; // type is INT value type is INT
            __label__ = 14;
            }
        $L_14 : for (;;) {
            $S_14 : {
            // NORMAL
                var var3 = local_1_INT; // type is INT value type is INT
                if ((var3 >= 2)) {
                    __label__ = 38;
                    break $S_14;
                }
                __label__ = 19;
                }
            for(;;) switch (__label__) {
                case 38 :
                // NORMAL
                    var var4 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
                    ojcVec2.VOIDinit(var4);
                    thisRef.localNormal = var4;
                    var var5 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
                    ojcVec2.VOIDinit(var5);
                    thisRef.localPoint = var5;
                    thisRef.pointCount = 0;
                    return;
                case 19 :
                // NORMAL
                    var var6 = thisRef.points; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@5dea25b7
                    var var7 = local_1_INT; // type is INT value type is INT
                    var var8 = new ojcManifoldPoint.Create(); // type is REFERENCE value type is REFERENCE
                    ojcManifoldPoint.VOIDinit(var8);
                    var6.data[var7] = var8;
                    local_1_INT = (local_1_INT + 1); // type is INT value type is INT
                    __label__ = 14;
                    continue $L_14;
            }
        }
    },

    classInitCheck : function() {
        if (!ojcManifold.__initialized) {
            ojcManifold.__initialized = true;
            var thePrototype = ojcManifold.Create.prototype;
            thePrototype.instanceOf = ojcManifold.instanceOf;
            thePrototype.ClassgetClass = ojcManifold.ClassgetClass;
            thePrototype.VOIDsetojcManifold = ojcManifold.VOIDsetojcManifold;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojcManifoldPoint = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 195,
    __implementedTypes : [195,1],

    Create : function() {
        this.localPoint = null; // declared in org.jbox2d.collision.ManifoldPoint
        this.normalImpulse = 0; // declared in org.jbox2d.collision.ManifoldPoint
        this.tangentImpulse = 0; // declared in org.jbox2d.collision.ManifoldPoint
        this.id = null; // declared in org.jbox2d.collision.ManifoldPoint
    },

    instanceOf : function(aType) {
        return ojcManifoldPoint.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcManifoldPoint;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDsetojcManifoldPoint : function(thisRef,cp) {
        var __label__ = null;
        var var2 = thisRef.localPoint.ojcVec2setojcVec2(thisRef.localPoint,cp.localPoint); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@69ecb5e1
        var var3 = cp.normalImpulse; // type is FLOAT value type is FLOAT
        thisRef.normalImpulse = var3;
        var var4 = cp.tangentImpulse; // type is FLOAT value type is FLOAT
        thisRef.tangentImpulse = var4;
        thisRef.id.VOIDsetojcContactID(thisRef.id,cp.id);
        return;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var0);
        thisRef.localPoint = var0;
        thisRef.tangentImpulse = 0.0;
        thisRef.normalImpulse = 0.0;
        var var1 = new ojcContactID.Create(); // type is REFERENCE value type is REFERENCE
        ojcContactID.VOIDinit(var1);
        thisRef.id = var1;
        return;
    },

    classInitCheck : function() {
        if (!ojcManifoldPoint.__initialized) {
            ojcManifoldPoint.__initialized = true;
            var thePrototype = ojcManifoldPoint.Create.prototype;
            thePrototype.instanceOf = ojcManifoldPoint.instanceOf;
            thePrototype.ClassgetClass = ojcManifoldPoint.ClassgetClass;
            thePrototype.VOIDsetojcManifoldPoint = ojcManifoldPoint.VOIDsetojcManifoldPoint;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojcManifold$ManifoldType = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 196,
    __implementedTypes : [56,2,196,1,11],
    CIRCLES : null, // declared in org.jbox2d.collision.Manifold$ManifoldType
    FACE_A : null, // declared in org.jbox2d.collision.Manifold$ManifoldType
    FACE_B : null, // declared in org.jbox2d.collision.Manifold$ManifoldType
    $VALUES : null, // declared in org.jbox2d.collision.Manifold$ManifoldType

    Create : function() {
        this.name = null; // declared in java.lang.Enum
        this.ordinalNumber = 0; // declared in java.lang.Enum
    },

    instanceOf : function(aType) {
        return ojcManifold$ManifoldType.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcManifold$ManifoldType;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var __label__ = null;
        var var0 = new ojcManifold$ManifoldType.Create(); // type is REFERENCE value type is REFERENCE
        ojcManifold$ManifoldType.VOIDinitjlStringINT(var0,bytecoder.stringpool[65],0);
        ojcManifold$ManifoldType.CIRCLES = var0;
        var var1 = new ojcManifold$ManifoldType.Create(); // type is REFERENCE value type is REFERENCE
        ojcManifold$ManifoldType.VOIDinitjlStringINT(var1,bytecoder.stringpool[66],1);
        ojcManifold$ManifoldType.FACE_A = var1;
        var var2 = new ojcManifold$ManifoldType.Create(); // type is REFERENCE value type is REFERENCE
        ojcManifold$ManifoldType.VOIDinitjlStringINT(var2,bytecoder.stringpool[67],2);
        ojcManifold$ManifoldType.FACE_B = var2;
        var var3 = bytecoder.newArray(3,null); // type is REFERENCE value type is REFERENCE
        var var4 = ojcManifold$ManifoldType.CIRCLES; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@53ee492b
        var3.data[0] = var4;
        var var5 = ojcManifold$ManifoldType.FACE_A; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@48d9550b
        var3.data[1] = var5;
        var var6 = ojcManifold$ManifoldType.FACE_B; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1b60be75
        var3.data[2] = var6;
        ojcManifold$ManifoldType.$VALUES = var3;
        return;
    },

    VOIDinitjlStringINT : function(thisRef,p1,p2) {
        var __label__ = null;
        jlEnum.VOIDinitjlStringINT(thisRef,p1,p2);
        return;
    },

    A1ojcManifold$ManifoldTypevalues : function() {
        var __label__ = null;
        var var1 = ojcManifold$ManifoldType.$VALUES.jlObjectclone(ojcManifold$ManifoldType.$VALUES); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2dd0bf22
        return var1;
    },

    classInitCheck : function() {
        if (!ojcManifold$ManifoldType.__initialized) {
            ojcManifold$ManifoldType.__initialized = true;
            var thePrototype = ojcManifold$ManifoldType.Create.prototype;
            thePrototype.instanceOf = ojcManifold$ManifoldType.instanceOf;
            thePrototype.ClassgetClass = ojcManifold$ManifoldType.ClassgetClass;
            thePrototype.INTordinal = jlEnum.INTordinal;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlEnum.classInitCheck();
            jiSerializable.classInitCheck();
            jlObject.classInitCheck();
            jlComparable.classInitCheck();
            jlrArray.classInitCheck();
            ojcManifold$ManifoldType.VOIDclinit();
        }
    },

};

var ojcsChainShape = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 197,
    __implementedTypes : [197,126,1],
    $assertionsDisabled : false, // declared in org.jbox2d.collision.shapes.ChainShape

    Create : function() {
        this.m_type = null; // declared in org.jbox2d.collision.shapes.Shape
        this.m_radius = 0; // declared in org.jbox2d.collision.shapes.Shape
        this.m_count = 0; // declared in org.jbox2d.collision.shapes.ChainShape
        this.m_vertices = null; // declared in org.jbox2d.collision.shapes.ChainShape
        this.m_prevVertex = null; // declared in org.jbox2d.collision.shapes.ChainShape
        this.m_nextVertex = null; // declared in org.jbox2d.collision.shapes.ChainShape
        this.m_hasPrevVertex = false; // declared in org.jbox2d.collision.shapes.ChainShape
        this.m_hasNextVertex = false; // declared in org.jbox2d.collision.shapes.ChainShape
        this.pool0 = null; // declared in org.jbox2d.collision.shapes.ChainShape
    },

    instanceOf : function(aType) {
        return ojcsChainShape.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcsChainShape;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcsChainShape.BOOLEANdesiredAssertionStatus(ojcsChainShape); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_13_9 : for(;;) switch (__label__) {
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_13_9;
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_13_9;
        }
        ojcsChainShape.$assertionsDisabled = var1;
        return;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        ojcsShape.VOIDinitojcsShapeType(thisRef,ojcsShapeType.CHAIN);
        var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var1);
        thisRef.m_prevVertex = var1;
        var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var2);
        thisRef.m_nextVertex = var2;
        thisRef.m_hasPrevVertex = 0;
        thisRef.m_hasNextVertex = 0;
        var var3 = new ojcsEdgeShape.Create(); // type is REFERENCE value type is REFERENCE
        ojcsEdgeShape.VOIDinit(var3);
        thisRef.pool0 = var3;
        thisRef.m_vertices = null;
        thisRef.m_radius = 0.01;
        thisRef.m_count = 0;
        return;
    },

    ojcsShapeclone : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcsChainShape.Create(); // type is REFERENCE value type is REFERENCE
        ojcsChainShape.VOIDinit(var0);
        var local_1_REFERENCE = var0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@31942b62
        local_1_REFERENCE.VOIDcreateChainA1ojcVec2INT(local_1_REFERENCE,thisRef.m_vertices,thisRef.m_count);
        var var8 = local_1_REFERENCE.m_prevVertex.ojcVec2setojcVec2(local_1_REFERENCE.m_prevVertex,thisRef.m_prevVertex); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@620a8daf
        var var12 = local_1_REFERENCE.m_nextVertex.ojcVec2setojcVec2(local_1_REFERENCE.m_nextVertex,thisRef.m_nextVertex); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4e505b55
        var var13 = local_1_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@31942b62
        var var14 = thisRef.m_hasPrevVertex; // type is BOOLEAN value type is BOOLEAN
        var13.m_hasPrevVertex = var14;
        var var15 = local_1_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@31942b62
        var var16 = thisRef.m_hasNextVertex; // type is BOOLEAN value type is BOOLEAN
        var15.m_hasNextVertex = var16;
        return local_1_REFERENCE;
    },

    VOIDcreateChainA1ojcVec2INT : function(thisRef,vertices,count) {
        var local_3_INT = null; // type is INT # of inits = 6
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcsChainShape.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 28;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_28_6 : for(;;) switch (__label__) {
            case 28 :
            // NORMAL
                $S_28 : {
                // NORMAL
                    var var4 = ojcsChainShape.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                    if ((var4 != 0)) {
                        __label__ = 47;
                        break $S_28;
                    }
                    __label__ = 34;
                    }
                $M_47_34 : for(;;) switch (__label__) {
                    case 47 :
                    // NORMAL
                        $S_47 : {
                        // NORMAL
                            thisRef.m_count = count;
                            var var6 = bytecoder.newArray(thisRef.m_count,null); // type is REFERENCE value type is REFERENCE
                            thisRef.m_vertices = var6;
                            local_3_INT = 1; // type is INT value type is INT
                            __label__ = 65;
                            }
                        $L_65 : for (;;) {
                            $S_65 : {
                            // NORMAL
                                var var9 = local_3_INT; // type is INT value type is INT
                                var var10 = thisRef.m_count; // type is INT value type is INT
                                if ((var9 >= var10)) {
                                    __label__ = 114;
                                    break $S_65;
                                }
                                __label__ = 73;
                                }
                            for(;;) switch (__label__) {
                                case 114 :
                                // NORMAL
                                    $S_114 : {
                                    // NORMAL
                                        local_3_INT = 0; // type is INT value type is INT
                                        __label__ = 116;
                                        }
                                    $L_116 : for (;;) {
                                        $S_116 : {
                                        // NORMAL
                                            var var25 = local_3_INT; // type is INT value type is INT
                                            var var26 = thisRef.m_count; // type is INT value type is INT
                                            if ((var25 >= var26)) {
                                                __label__ = 146;
                                                break $S_116;
                                            }
                                            __label__ = 124;
                                            }
                                        for(;;) switch (__label__) {
                                            case 124 :
                                            // NORMAL
                                                var var27 = thisRef.m_vertices; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@336e5820
                                                var var28 = local_3_INT; // type is INT value type is INT
                                                var var29 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
                                                var var31 = vertices.data[local_3_INT]; // type is REFERENCE value type is REFERENCE
                                                ojcVec2.VOIDinitojcVec2(var29,var31);
                                                var27.data[var28] = var29;
                                                local_3_INT = (local_3_INT + 1); // type is INT value type is INT
                                                __label__ = 116;
                                                continue $L_116;
                                            case 146 :
                                            // NORMAL
                                                thisRef.m_hasPrevVertex = 0;
                                                thisRef.m_hasNextVertex = 0;
                                                return;
                                        }
                                    }
                                case 73 :
                                // NORMAL
                                    $S_73 : {
                                    // NORMAL
                                        var var13 = vertices.data[(local_3_INT - 1)]; // type is REFERENCE value type is REFERENCE
                                        var local_4_REFERENCE = var13; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@8ec4c3b
                                        var var16 = vertices.data[local_3_INT]; // type is REFERENCE value type is REFERENCE
                                        var local_5_REFERENCE = var16; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@a20af6b
                                        var var20 = ojcMathUtils.FLOATdistanceSquaredojcVec2ojcVec2(local_4_REFERENCE,local_5_REFERENCE); // type is FLOAT value type is FLOAT
                                        if ((var20 >= 2.5E-5)) {
                                            __label__ = 108;
                                            break $S_73;
                                        }
                                        __label__ = 98;
                                        }
                                    for(;;) switch (__label__) {
                                        case 108 :
                                        // NORMAL
                                            local_3_INT = (local_3_INT + 1); // type is INT value type is INT
                                            __label__ = 65;
                                            continue $L_65;
                                        case 98 :
                                        // NORMAL
                                            var var22 = new jlRuntimeException.Create(); // type is REFERENCE value type is REFERENCE
                                            jlRuntimeException.VOIDinitjlString(var22,bytecoder.stringpool[68]);
                                            throw var22;
                                    }
                            }
                        }
                    case 34 :
                    // NORMAL
                        $S_34 : {
                        // NORMAL
                            if ((count >= 2)) {
                                __label__ = 47;
                                continue $M_47_34;
                            }
                            }
                        var var23 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                        jlAssertionError.VOIDinit(var23);
                        throw var23;
                }
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    var var1 = thisRef.m_vertices; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@7fcd2f8d
                    if (var1 != null ) {
                        __label__ = 20;
                        break $S_6;
                    }
                    __label__ = 13;
                    }
                $M_20_13 : for(;;) switch (__label__) {
                    case 13 :
                    // NORMAL
                        var var2 = thisRef.m_count; // type is INT value type is INT
                        if ((var2 == 0)) {
                            __label__ = 28;
                            continue $M_28_6;
                        }
                        __label__ = 20;
                        continue $M_20_13;
                    case 20 :
                    // NORMAL
                        var var3 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                        jlAssertionError.VOIDinit(var3);
                        throw var3;
                }
        }
    },

    INTgetChildCount : function(thisRef) {
        var __label__ = null;
        return (thisRef.m_count - 1);
    },

    VOIDcomputeAABBojcAABBojcTransformINT : function(thisRef,aabb,xf,childIndex) {
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 1
        var var104 = null; // type is REFERENCE # of inits = 1
        var local_14_FLOAT = null; // type is FLOAT # of inits = 1
        var local_13_FLOAT = null; // type is FLOAT # of inits = 1
        var local_6_INT = null; // type is INT # of inits = 1
        var var103 = null; // type is FLOAT # of inits = 2
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_7_INT = null; // type is INT # of inits = 2
        var var90 = null; // type is REFERENCE # of inits = 1
        var local_12_FLOAT = null; // type is FLOAT # of inits = 1
        var local_15_FLOAT = null; // type is FLOAT # of inits = 1
        var var96 = null; // type is FLOAT # of inits = 2
        var var117 = null; // type is FLOAT # of inits = 2
        var var110 = null; // type is FLOAT # of inits = 2
        var var111 = null; // type is REFERENCE # of inits = 1
        var var97 = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcsChainShape.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 22;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_6_22 : for(;;) switch (__label__) {
            case 22 :
            // NORMAL
                $S_22 : {
                // NORMAL
                    local_4_REFERENCE = aabb.lowerBound; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@54a06465
                    local_5_REFERENCE = aabb.upperBound; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@265333f2
                    local_6_INT = childIndex; // type is INT value type is INT
                    local_7_INT = (childIndex + 1); // type is INT value type is INT
                    var var11 = local_7_INT; // type is INT value type is INT
                    var var12 = thisRef.m_count; // type is INT value type is INT
                    if ((var11 != var12)) {
                        __label__ = 54;
                        break $S_22;
                    }
                    __label__ = 51;
                    }
                $M_54_51 : for(;;) switch (__label__) {
                    case 51 :
                    // NORMAL
                        local_7_INT = 0; // type is INT value type is INT
                        __label__ = 54;
                        continue $M_54_51;
                    case 54 :
                    // NORMAL
                        $S_54 : {
                        // NORMAL
                            var var16 = thisRef.m_vertices.data[local_6_INT]; // type is REFERENCE value type is REFERENCE
                            var local_8_REFERENCE = var16; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@7609c7da
                            var var20 = thisRef.m_vertices.data[local_7_INT]; // type is REFERENCE value type is REFERENCE
                            var local_9_REFERENCE = var20; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@5a2a0337
                            var local_10_REFERENCE = xf.q; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@d7ed75b
                            var local_11_REFERENCE = xf.p; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@328db9a5
                            local_12_FLOAT = (((local_10_REFERENCE.c * local_8_REFERENCE.x) - (local_10_REFERENCE.s * local_8_REFERENCE.y)) + local_11_REFERENCE.x); // type is FLOAT value type is FLOAT
                            local_13_FLOAT = (((local_10_REFERENCE.s * local_8_REFERENCE.x) + (local_10_REFERENCE.c * local_8_REFERENCE.y)) + local_11_REFERENCE.y); // type is FLOAT value type is FLOAT
                            local_14_FLOAT = (((local_10_REFERENCE.c * local_9_REFERENCE.x) - (local_10_REFERENCE.s * local_9_REFERENCE.y)) + local_11_REFERENCE.x); // type is FLOAT value type is FLOAT
                            local_15_FLOAT = (((local_10_REFERENCE.s * local_9_REFERENCE.x) + (local_10_REFERENCE.c * local_9_REFERENCE.y)) + local_11_REFERENCE.y); // type is FLOAT value type is FLOAT
                            var90 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@44a59555
                            var var91 = local_12_FLOAT; // type is FLOAT value type is FLOAT
                            var var92 = local_14_FLOAT; // type is FLOAT value type is FLOAT
                            if ((var91 >= var92)) {
                                __label__ = 223;
                                break $S_54;
                            }
                            __label__ = 218;
                            }
                        $M_218_223 : for(;;) switch (__label__) {
                            case 223 :
                            // NORMAL
                                var96 = local_14_FLOAT; // type is FLOAT value type is FLOAT
                                break $M_218_223;
                            case 218 :
                            // NORMAL
                                var96 = local_12_FLOAT; // type is FLOAT value type is FLOAT
                                break $M_218_223;
                        }
                        $S_225 : {
                        // NORMAL
                            var90.x = var96;
                            var97 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@44a59555
                            var var98 = local_13_FLOAT; // type is FLOAT value type is FLOAT
                            var var99 = local_15_FLOAT; // type is FLOAT value type is FLOAT
                            if ((var98 >= var99)) {
                                __label__ = 243;
                                break $S_225;
                            }
                            __label__ = 238;
                            }
                        $M_238_243 : for(;;) switch (__label__) {
                            case 243 :
                            // NORMAL
                                var103 = local_15_FLOAT; // type is FLOAT value type is FLOAT
                                break $M_238_243;
                            case 238 :
                            // NORMAL
                                var103 = local_13_FLOAT; // type is FLOAT value type is FLOAT
                                break $M_238_243;
                        }
                        $S_245 : {
                        // NORMAL
                            var97.y = var103;
                            var104 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2dfc6593
                            var var105 = local_12_FLOAT; // type is FLOAT value type is FLOAT
                            var var106 = local_14_FLOAT; // type is FLOAT value type is FLOAT
                            if ((var105 <= var106)) {
                                __label__ = 263;
                                break $S_245;
                            }
                            __label__ = 258;
                            }
                        $M_263_258 : for(;;) switch (__label__) {
                            case 258 :
                            // NORMAL
                                var110 = local_12_FLOAT; // type is FLOAT value type is FLOAT
                                break $M_263_258;
                            case 263 :
                            // NORMAL
                                var110 = local_14_FLOAT; // type is FLOAT value type is FLOAT
                                break $M_263_258;
                        }
                        $S_265 : {
                        // NORMAL
                            var104.x = var110;
                            var111 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2dfc6593
                            var var112 = local_13_FLOAT; // type is FLOAT value type is FLOAT
                            var var113 = local_15_FLOAT; // type is FLOAT value type is FLOAT
                            if ((var112 <= var113)) {
                                __label__ = 283;
                                break $S_265;
                            }
                            __label__ = 278;
                            }
                        $M_278_283 : for(;;) switch (__label__) {
                            case 278 :
                            // NORMAL
                                var117 = local_13_FLOAT; // type is FLOAT value type is FLOAT
                                break $M_278_283;
                            case 283 :
                            // NORMAL
                                var117 = local_15_FLOAT; // type is FLOAT value type is FLOAT
                                break $M_278_283;
                        }
                        var111.y = var117;
                        return;
                }
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    var var1 = thisRef.m_count; // type is INT value type is INT
                    if ((childIndex < var1)) {
                        __label__ = 22;
                        continue $M_6_22;
                    }
                    }
                var var2 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var2);
                throw var2;
        }
    },

    VOIDcomputeMassojcsMassDataFLOAT : function(thisRef,massData,density) {
        var __label__ = null;
        massData.mass = 0.0;
        massData.center.VOIDsetZero(massData.center);
        massData.I = 0.0;
        return;
    },

    VOIDgetChildEdgeojcsEdgeShapeINT : function(thisRef,edge,index) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcsChainShape.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 29;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_6_29 : for(;;) switch (__label__) {
            case 29 :
            // NORMAL
                $S_29 : {
                // NORMAL
                    var var4 = thisRef.m_radius; // type is FLOAT value type is FLOAT
                    edge.m_radius = var4;
                    var var7 = thisRef.m_vertices.data[(index + 0)]; // type is REFERENCE value type is REFERENCE
                    var local_3_REFERENCE = var7; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@7404f7a7
                    var var11 = thisRef.m_vertices.data[(index + 1)]; // type is REFERENCE value type is REFERENCE
                    var local_4_REFERENCE = var11; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@2b00d9ef
                    var var13 = edge.m_vertex1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@41cccdad
                    var var15 = local_3_REFERENCE.x; // type is FLOAT value type is FLOAT
                    var13.x = var15;
                    var var16 = edge.m_vertex1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3b098f35
                    var var18 = local_3_REFERENCE.y; // type is FLOAT value type is FLOAT
                    var16.y = var18;
                    var var19 = edge.m_vertex2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@68e3fe3c
                    var var21 = local_4_REFERENCE.x; // type is FLOAT value type is FLOAT
                    var19.x = var21;
                    var var22 = edge.m_vertex2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@45819d6e
                    var var24 = local_4_REFERENCE.y; // type is FLOAT value type is FLOAT
                    var22.y = var24;
                    if ((index <= 0)) {
                        __label__ = 148;
                        break $S_29;
                    }
                    __label__ = 106;
                    }
                $M_148_106 : for(;;) switch (__label__) {
                    case 148 :
                    // NORMAL
                        var var25 = edge.m_vertex0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@620781d6
                        var var27 = thisRef.m_prevVertex.x; // type is FLOAT value type is FLOAT
                        var25.x = var27;
                        var var28 = edge.m_vertex0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1500ca84
                        var var30 = thisRef.m_prevVertex.y; // type is FLOAT value type is FLOAT
                        var28.y = var30;
                        var var31 = thisRef.m_hasPrevVertex; // type is BOOLEAN value type is BOOLEAN
                        edge.m_hasVertex0 = var31;
                        break $M_148_106;
                    case 106 :
                    // NORMAL
                        var var34 = thisRef.m_vertices.data[(index - 1)]; // type is REFERENCE value type is REFERENCE
                        var local_5_REFERENCE = var34; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@6265d406
                        var var36 = edge.m_vertex0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2bc64fc9
                        var var38 = local_5_REFERENCE.x; // type is FLOAT value type is FLOAT
                        var36.x = var38;
                        var var39 = edge.m_vertex0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@75117256
                        var var41 = local_5_REFERENCE.y; // type is FLOAT value type is FLOAT
                        var39.y = var41;
                        edge.m_hasVertex0 = 1;
                        break $M_148_106;
                }
                $S_184 : {
                // NORMAL
                    var var43 = (thisRef.m_count - 2); // type is INT value type is INT
                    if ((index >= var43)) {
                        __label__ = 236;
                        break $S_184;
                    }
                    __label__ = 194;
                    }
                for(;;) switch (__label__) {
                    case 236 :
                    // NORMAL
                        var var44 = edge.m_vertex3; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@66d6d29a
                        var var46 = thisRef.m_nextVertex.x; // type is FLOAT value type is FLOAT
                        var44.x = var46;
                        var var47 = edge.m_vertex3; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2adfffa2
                        var var49 = thisRef.m_nextVertex.y; // type is FLOAT value type is FLOAT
                        var47.y = var49;
                        var var50 = thisRef.m_hasNextVertex; // type is BOOLEAN value type is BOOLEAN
                        edge.m_hasVertex3 = var50;
                        return;
                    case 194 :
                    // NORMAL
                        var var53 = thisRef.m_vertices.data[(index + 2)]; // type is REFERENCE value type is REFERENCE
                        var local_5_REFERENCE = var53; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@337e5537
                        var var54 = edge.m_vertex3; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4d8302cc
                        var var56 = local_5_REFERENCE.x; // type is FLOAT value type is FLOAT
                        var54.x = var56;
                        var var57 = edge.m_vertex3; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1d115be4
                        var var59 = local_5_REFERENCE.y; // type is FLOAT value type is FLOAT
                        var57.y = var59;
                        edge.m_hasVertex3 = 1;
                        return;
                }
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    if ((0 > index)) {
                        __label__ = 21;
                        break $S_6;
                    }
                    __label__ = 11;
                    }
                $M_21_11 : for(;;) switch (__label__) {
                    case 21 :
                    // NORMAL
                        var var3 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                        jlAssertionError.VOIDinit(var3);
                        throw var3;
                    case 11 :
                    // NORMAL
                        var var2 = (thisRef.m_count - 1); // type is INT value type is INT
                        if ((index < var2)) {
                            __label__ = 29;
                            continue $M_6_29;
                        }
                        __label__ = 21;
                        continue $M_21_11;
                }
        }
    },

    classInitCheck : function() {
        if (!ojcsChainShape.__initialized) {
            ojcsChainShape.__initialized = true;
            var thePrototype = ojcsChainShape.Create.prototype;
            thePrototype.instanceOf = ojcsChainShape.instanceOf;
            thePrototype.ClassgetClass = ojcsChainShape.ClassgetClass;
            thePrototype.VOIDgetChildEdgeojcsEdgeShapeINT = ojcsChainShape.VOIDgetChildEdgeojcsEdgeShapeINT;
            thePrototype.VOIDcomputeMassojcsMassDataFLOAT = ojcsChainShape.VOIDcomputeMassojcsMassDataFLOAT;
            thePrototype.VOIDcomputeAABBojcAABBojcTransformINT = ojcsChainShape.VOIDcomputeAABBojcAABBojcTransformINT;
            thePrototype.INTgetChildCount = ojcsChainShape.INTgetChildCount;
            thePrototype.VOIDcreateChainA1ojcVec2INT = ojcsChainShape.VOIDcreateChainA1ojcVec2INT;
            thePrototype.ojcsShapeclone = ojcsChainShape.ojcsShapeclone;
            thePrototype.FLOATgetRadius = ojcsShape.FLOATgetRadius;
            thePrototype.ojcsShapeTypegetType = ojcsShape.ojcsShapeTypegetType;
            thePrototype.VOIDsetRadiusFLOAT = ojcsShape.VOIDsetRadiusFLOAT;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojcsShape.classInitCheck();
            jlObject.classInitCheck();
            ojcsChainShape.VOIDclinit();
        }
    },

};

var ojcsEdgeShape = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 198,
    __implementedTypes : [198,126,1],

    Create : function() {
        this.m_type = null; // declared in org.jbox2d.collision.shapes.Shape
        this.m_radius = 0; // declared in org.jbox2d.collision.shapes.Shape
        this.m_vertex1 = null; // declared in org.jbox2d.collision.shapes.EdgeShape
        this.m_vertex2 = null; // declared in org.jbox2d.collision.shapes.EdgeShape
        this.m_vertex0 = null; // declared in org.jbox2d.collision.shapes.EdgeShape
        this.m_vertex3 = null; // declared in org.jbox2d.collision.shapes.EdgeShape
        this.m_hasVertex0 = false; // declared in org.jbox2d.collision.shapes.EdgeShape
        this.m_hasVertex3 = false; // declared in org.jbox2d.collision.shapes.EdgeShape
        this.normal = null; // declared in org.jbox2d.collision.shapes.EdgeShape
    },

    instanceOf : function(aType) {
        return ojcsEdgeShape.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcsEdgeShape;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        ojcsShape.VOIDinitojcsShapeType(thisRef,ojcsShapeType.EDGE);
        var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var1);
        thisRef.m_vertex1 = var1;
        var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var2);
        thisRef.m_vertex2 = var2;
        var var3 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var3);
        thisRef.m_vertex0 = var3;
        var var4 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var4);
        thisRef.m_vertex3 = var4;
        thisRef.m_hasVertex0 = 0;
        thisRef.m_hasVertex3 = 0;
        var var5 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var5);
        thisRef.normal = var5;
        thisRef.m_radius = 0.01;
        return;
    },

    ojcsShapeclone : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcsEdgeShape.Create(); // type is REFERENCE value type is REFERENCE
        ojcsEdgeShape.VOIDinit(var0);
        var local_1_REFERENCE = var0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@62e5ad69
        var var2 = local_1_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@62e5ad69
        var var3 = thisRef.m_radius; // type is FLOAT value type is FLOAT
        var2.m_radius = var3;
        var var4 = local_1_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@62e5ad69
        var var5 = thisRef.m_hasVertex0; // type is BOOLEAN value type is BOOLEAN
        var4.m_hasVertex0 = var5;
        var var6 = local_1_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@62e5ad69
        var var7 = thisRef.m_hasVertex3; // type is BOOLEAN value type is BOOLEAN
        var6.m_hasVertex3 = var7;
        var var11 = local_1_REFERENCE.m_vertex0.ojcVec2setojcVec2(local_1_REFERENCE.m_vertex0,thisRef.m_vertex0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@a1af270
        var var15 = local_1_REFERENCE.m_vertex1.ojcVec2setojcVec2(local_1_REFERENCE.m_vertex1,thisRef.m_vertex1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@bc91bc8
        var var19 = local_1_REFERENCE.m_vertex2.ojcVec2setojcVec2(local_1_REFERENCE.m_vertex2,thisRef.m_vertex2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@528f5232
        var var23 = local_1_REFERENCE.m_vertex3.ojcVec2setojcVec2(local_1_REFERENCE.m_vertex3,thisRef.m_vertex3); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1d4e33ef
        return local_1_REFERENCE;
    },

    INTgetChildCount : function(thisRef) {
        var __label__ = null;
        return 1;
    },

    VOIDcomputeAABBojcAABBojcTransformINT : function(thisRef,aabb,xf,childIndex) {
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 1
        var var84 = null; // type is REFERENCE # of inits = 1
        var local_7_FLOAT = null; // type is FLOAT # of inits = 1
        var var76 = null; // type is FLOAT # of inits = 2
        var var70 = null; // type is REFERENCE # of inits = 1
        var var77 = null; // type is REFERENCE # of inits = 1
        var var91 = null; // type is REFERENCE # of inits = 1
        var local_8_FLOAT = null; // type is FLOAT # of inits = 1
        var var97 = null; // type is FLOAT # of inits = 2
        var local_9_FLOAT = null; // type is FLOAT # of inits = 1
        var var90 = null; // type is FLOAT # of inits = 2
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_10_FLOAT = null; // type is FLOAT # of inits = 1
        var var83 = null; // type is FLOAT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_4_REFERENCE = aabb.lowerBound; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6a1cc8ea
            local_5_REFERENCE = aabb.upperBound; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@e96b861
            var local_6_REFERENCE = xf.q; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@46149e67
            local_7_FLOAT = (((local_6_REFERENCE.c * thisRef.m_vertex1.x) - (local_6_REFERENCE.s * thisRef.m_vertex1.y)) + xf.p.x); // type is FLOAT value type is FLOAT
            local_8_FLOAT = (((local_6_REFERENCE.s * thisRef.m_vertex1.x) + (local_6_REFERENCE.c * thisRef.m_vertex1.y)) + xf.p.y); // type is FLOAT value type is FLOAT
            local_9_FLOAT = (((local_6_REFERENCE.c * thisRef.m_vertex2.x) - (local_6_REFERENCE.s * thisRef.m_vertex2.y)) + xf.p.x); // type is FLOAT value type is FLOAT
            local_10_FLOAT = (((local_6_REFERENCE.s * thisRef.m_vertex2.x) + (local_6_REFERENCE.c * thisRef.m_vertex2.y)) + xf.p.y); // type is FLOAT value type is FLOAT
            var70 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2099c21
            var var71 = local_7_FLOAT; // type is FLOAT value type is FLOAT
            var var72 = local_9_FLOAT; // type is FLOAT value type is FLOAT
            if ((var71 >= var72)) {
                __label__ = 181;
                break $S_0;
            }
            __label__ = 176;
            }
        $M_181_176 : for(;;) switch (__label__) {
            case 176 :
            // NORMAL
                var76 = local_7_FLOAT; // type is FLOAT value type is FLOAT
                break $M_181_176;
            case 181 :
            // NORMAL
                var76 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                break $M_181_176;
        }
        $S_183 : {
        // NORMAL
            var70.x = var76;
            var77 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2099c21
            var var78 = local_8_FLOAT; // type is FLOAT value type is FLOAT
            var var79 = local_10_FLOAT; // type is FLOAT value type is FLOAT
            if ((var78 >= var79)) {
                __label__ = 201;
                break $S_183;
            }
            __label__ = 196;
            }
        $M_196_201 : for(;;) switch (__label__) {
            case 196 :
            // NORMAL
                var83 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                break $M_196_201;
            case 201 :
            // NORMAL
                var83 = local_10_FLOAT; // type is FLOAT value type is FLOAT
                break $M_196_201;
        }
        $S_203 : {
        // NORMAL
            var77.y = var83;
            var84 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@64f542cb
            var var85 = local_7_FLOAT; // type is FLOAT value type is FLOAT
            var var86 = local_9_FLOAT; // type is FLOAT value type is FLOAT
            if ((var85 <= var86)) {
                __label__ = 221;
                break $S_203;
            }
            __label__ = 216;
            }
        $M_221_216 : for(;;) switch (__label__) {
            case 221 :
            // NORMAL
                var90 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                break $M_221_216;
            case 216 :
            // NORMAL
                var90 = local_7_FLOAT; // type is FLOAT value type is FLOAT
                break $M_221_216;
        }
        $S_223 : {
        // NORMAL
            var84.x = var90;
            var91 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@64f542cb
            var var92 = local_8_FLOAT; // type is FLOAT value type is FLOAT
            var var93 = local_10_FLOAT; // type is FLOAT value type is FLOAT
            if ((var92 <= var93)) {
                __label__ = 241;
                break $S_223;
            }
            __label__ = 236;
            }
        $M_241_236 : for(;;) switch (__label__) {
            case 236 :
            // NORMAL
                var97 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                break $M_241_236;
            case 241 :
            // NORMAL
                var97 = local_10_FLOAT; // type is FLOAT value type is FLOAT
                break $M_241_236;
        }
        var91.y = var97;
        var var98 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2099c21
        var var101 = (var98.x - thisRef.m_radius); // type is FLOAT value type is FLOAT
        var98.x = var101;
        var var102 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2099c21
        var var105 = (var102.y - thisRef.m_radius); // type is FLOAT value type is FLOAT
        var102.y = var105;
        var var106 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@64f542cb
        var var109 = (var106.x + thisRef.m_radius); // type is FLOAT value type is FLOAT
        var106.x = var109;
        var var110 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@64f542cb
        var var113 = (var110.y + thisRef.m_radius); // type is FLOAT value type is FLOAT
        var110.y = var113;
        return;
    },

    VOIDcomputeMassojcsMassDataFLOAT : function(thisRef,massData,density) {
        var __label__ = null;
        massData.mass = 0.0;
        var var2 = massData.center.ojcVec2setojcVec2(massData.center,thisRef.m_vertex1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@75be3208
        var var4 = var2.ojcVec2addLocalojcVec2(var2,thisRef.m_vertex2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@11785a04
        var var5 = var4.ojcVec2mulLocalFLOAT(var4,0.5); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4aba5bb8
        massData.I = 0.0;
        return;
    },

    classInitCheck : function() {
        if (!ojcsEdgeShape.__initialized) {
            ojcsEdgeShape.__initialized = true;
            var thePrototype = ojcsEdgeShape.Create.prototype;
            thePrototype.instanceOf = ojcsEdgeShape.instanceOf;
            thePrototype.ClassgetClass = ojcsEdgeShape.ClassgetClass;
            thePrototype.VOIDcomputeMassojcsMassDataFLOAT = ojcsEdgeShape.VOIDcomputeMassojcsMassDataFLOAT;
            thePrototype.VOIDcomputeAABBojcAABBojcTransformINT = ojcsEdgeShape.VOIDcomputeAABBojcAABBojcTransformINT;
            thePrototype.INTgetChildCount = ojcsEdgeShape.INTgetChildCount;
            thePrototype.ojcsShapeclone = ojcsEdgeShape.ojcsShapeclone;
            thePrototype.FLOATgetRadius = ojcsShape.FLOATgetRadius;
            thePrototype.ojcsShapeTypegetType = ojcsShape.ojcsShapeTypegetType;
            thePrototype.VOIDsetRadiusFLOAT = ojcsShape.VOIDsetRadiusFLOAT;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojcsShape.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var ojdcVelocity = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 199,
    __implementedTypes : [199,1],

    Create : function() {
        this.v = null; // declared in org.jbox2d.dynamics.contacts.Velocity
        this.w = 0; // declared in org.jbox2d.dynamics.contacts.Velocity
    },

    instanceOf : function(aType) {
        return ojdcVelocity.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdcVelocity;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var0);
        thisRef.v = var0;
        return;
    },

    classInitCheck : function() {
        if (!ojdcVelocity.__initialized) {
            ojdcVelocity.__initialized = true;
            var thePrototype = ojdcVelocity.Create.prototype;
            thePrototype.instanceOf = ojdcVelocity.instanceOf;
            thePrototype.ClassgetClass = ojdcVelocity.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojdcPosition = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 200,
    __implementedTypes : [200,1],

    Create : function() {
        this.c = null; // declared in org.jbox2d.dynamics.contacts.Position
        this.a = 0; // declared in org.jbox2d.dynamics.contacts.Position
    },

    instanceOf : function(aType) {
        return ojdcPosition.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdcPosition;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var0);
        thisRef.c = var0;
        return;
    },

    classInitCheck : function() {
        if (!ojdcPosition.__initialized) {
            ojdcPosition.__initialized = true;
            var thePrototype = ojdcPosition.Create.prototype;
            thePrototype.instanceOf = ojdcPosition.instanceOf;
            thePrototype.ClassgetClass = ojdcPosition.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojcWorldManifold$1 = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 201,
    __implementedTypes : [1,201],
    $SwitchMap$org$jbox2d$collision$Manifold$ManifoldType : null, // declared in org.jbox2d.collision.WorldManifold$1

    Create : function() {
    },

    instanceOf : function(aType) {
        return ojcWorldManifold$1.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcWorldManifold$1;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcManifold$ManifoldType.A1ojcManifold$ManifoldTypevalues(); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@7ff19eb1
            var var2 = bytecoder.newArray(var0.data.length,0); // type is REFERENCE value type is REFERENCE
            ojcWorldManifold$1.$SwitchMap$org$jbox2d$collision$Manifold$ManifoldType = var2;
            }
        try {
            $S_9 : {
            // NORMAL
                var var3 = ojcWorldManifold$1.$SwitchMap$org$jbox2d$collision$Manifold$ManifoldType; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@6b53b216
                var var5 = ojcManifold$ManifoldType.CIRCLES.INTordinal(ojcManifold$ManifoldType.CIRCLES); // type is INT value type is INT
                var3.data[var5] = 1;
                __label__ = 24;
                }
        } catch (e) {
            dmbcExceptionManager.VOIDpushjlThrowable(e);
            if (e.instanceOf(jlNoSuchFieldError)) {
                __label__ = 23;
            } else {
                throw dmbcExceptionManager.jlThrowablepop();
            }
        }
        $M_24_23 : for(;;) switch (__label__) {
            case 23 :
            // EXCEPTION_HANDLER
                var var6 = dmbcExceptionManager.jlThrowablepop(); // type is REFERENCE value type is REFERENCE
                var local_0_REFERENCE = var6; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@371b54f
                __label__ = 24;
                continue $M_24_23;
            case 24 :
            // NORMAL
                try {
                    $S_24 : {
                    // NORMAL
                        var var8 = ojcWorldManifold$1.$SwitchMap$org$jbox2d$collision$Manifold$ManifoldType; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@6806e2cd
                        var var10 = ojcManifold$ManifoldType.FACE_A.INTordinal(ojcManifold$ManifoldType.FACE_A); // type is INT value type is INT
                        var8.data[var10] = 2;
                        __label__ = 39;
                        }
                } catch (e) {
                    dmbcExceptionManager.VOIDpushjlThrowable(e);
                    if (e.instanceOf(jlNoSuchFieldError)) {
                        __label__ = 38;
                    } else {
                        throw dmbcExceptionManager.jlThrowablepop();
                    }
                }
                $M_38_39 : for(;;) switch (__label__) {
                    case 38 :
                    // EXCEPTION_HANDLER
                        var var11 = dmbcExceptionManager.jlThrowablepop(); // type is REFERENCE value type is REFERENCE
                        var local_0_REFERENCE = var11; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1bf1fd6a
                        __label__ = 39;
                        continue $M_38_39;
                    case 39 :
                    // NORMAL
                        try {
                            var var12 = ojcWorldManifold$1.$SwitchMap$org$jbox2d$collision$Manifold$ManifoldType; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@6dc42f00
                            var var14 = ojcManifold$ManifoldType.FACE_B.INTordinal(ojcManifold$ManifoldType.FACE_B); // type is INT value type is INT
                            var12.data[var14] = 3;
                            return;
                        } catch (e) {
                            dmbcExceptionManager.VOIDpushjlThrowable(e);
                            if (e.instanceOf(jlNoSuchFieldError)) {
                                __label__ = 53;
                            } else {
                                throw dmbcExceptionManager.jlThrowablepop();
                            }
                        }
                        var var15 = dmbcExceptionManager.jlThrowablepop(); // type is REFERENCE value type is REFERENCE
                        var local_0_REFERENCE = var15; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6391343a
                        return;
                }
        }
    },

    classInitCheck : function() {
        if (!ojcWorldManifold$1.__initialized) {
            ojcWorldManifold$1.__initialized = true;
            var thePrototype = ojcWorldManifold$1.Create.prototype;
            thePrototype.instanceOf = ojcWorldManifold$1.instanceOf;
            thePrototype.ClassgetClass = ojcWorldManifold$1.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            ojcManifold$ManifoldType.classInitCheck();
            ojcWorldManifold$1.VOIDclinit();
        }
    },

};

var ojdcPositionSolverManifold$1 = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 202,
    __implementedTypes : [202,1],
    $SwitchMap$org$jbox2d$collision$Manifold$ManifoldType : null, // declared in org.jbox2d.dynamics.contacts.PositionSolverManifold$1

    Create : function() {
    },

    instanceOf : function(aType) {
        return ojdcPositionSolverManifold$1.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdcPositionSolverManifold$1;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcManifold$ManifoldType.A1ojcManifold$ManifoldTypevalues(); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@58bd954e
            var var2 = bytecoder.newArray(var0.data.length,0); // type is REFERENCE value type is REFERENCE
            ojdcPositionSolverManifold$1.$SwitchMap$org$jbox2d$collision$Manifold$ManifoldType = var2;
            }
        try {
            $S_9 : {
            // NORMAL
                var var3 = ojdcPositionSolverManifold$1.$SwitchMap$org$jbox2d$collision$Manifold$ManifoldType; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3b6dfab5
                var var5 = ojcManifold$ManifoldType.CIRCLES.INTordinal(ojcManifold$ManifoldType.CIRCLES); // type is INT value type is INT
                var3.data[var5] = 1;
                __label__ = 24;
                }
        } catch (e) {
            dmbcExceptionManager.VOIDpushjlThrowable(e);
            if (e.instanceOf(jlNoSuchFieldError)) {
                __label__ = 23;
            } else {
                throw dmbcExceptionManager.jlThrowablepop();
            }
        }
        $M_24_23 : for(;;) switch (__label__) {
            case 24 :
            // NORMAL
                try {
                    $S_24 : {
                    // NORMAL
                        var var8 = ojdcPositionSolverManifold$1.$SwitchMap$org$jbox2d$collision$Manifold$ManifoldType; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@74d5c180
                        var var10 = ojcManifold$ManifoldType.FACE_A.INTordinal(ojcManifold$ManifoldType.FACE_A); // type is INT value type is INT
                        var8.data[var10] = 2;
                        __label__ = 39;
                        }
                } catch (e) {
                    dmbcExceptionManager.VOIDpushjlThrowable(e);
                    if (e.instanceOf(jlNoSuchFieldError)) {
                        __label__ = 38;
                    } else {
                        throw dmbcExceptionManager.jlThrowablepop();
                    }
                }
                $M_39_38 : for(;;) switch (__label__) {
                    case 38 :
                    // EXCEPTION_HANDLER
                        var var11 = dmbcExceptionManager.jlThrowablepop(); // type is REFERENCE value type is REFERENCE
                        var local_0_REFERENCE = var11; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@102c0ce2
                        __label__ = 39;
                        continue $M_39_38;
                    case 39 :
                    // NORMAL
                        try {
                            var var12 = ojdcPositionSolverManifold$1.$SwitchMap$org$jbox2d$collision$Manifold$ManifoldType; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@248fec4c
                            var var14 = ojcManifold$ManifoldType.FACE_B.INTordinal(ojcManifold$ManifoldType.FACE_B); // type is INT value type is INT
                            var12.data[var14] = 3;
                            return;
                        } catch (e) {
                            dmbcExceptionManager.VOIDpushjlThrowable(e);
                            if (e.instanceOf(jlNoSuchFieldError)) {
                                __label__ = 53;
                            } else {
                                throw dmbcExceptionManager.jlThrowablepop();
                            }
                        }
                        var var15 = dmbcExceptionManager.jlThrowablepop(); // type is REFERENCE value type is REFERENCE
                        var local_0_REFERENCE = var15; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7063023a
                        return;
                }
            case 23 :
            // EXCEPTION_HANDLER
                var var6 = dmbcExceptionManager.jlThrowablepop(); // type is REFERENCE value type is REFERENCE
                var local_0_REFERENCE = var6; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2a601477
                __label__ = 24;
                continue $M_24_23;
        }
    },

    classInitCheck : function() {
        if (!ojdcPositionSolverManifold$1.__initialized) {
            ojdcPositionSolverManifold$1.__initialized = true;
            var thePrototype = ojdcPositionSolverManifold$1.Create.prototype;
            thePrototype.instanceOf = ojdcPositionSolverManifold$1.instanceOf;
            thePrototype.ClassgetClass = ojdcPositionSolverManifold$1.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            ojcManifold$ManifoldType.classInitCheck();
            ojdcPositionSolverManifold$1.VOIDclinit();
        }
    },

};

var ojcTimeOfImpact$TOIOutputState = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 203,
    __implementedTypes : [56,2,203,1,11],
    UNKNOWN : null, // declared in org.jbox2d.collision.TimeOfImpact$TOIOutputState
    FAILED : null, // declared in org.jbox2d.collision.TimeOfImpact$TOIOutputState
    OVERLAPPED : null, // declared in org.jbox2d.collision.TimeOfImpact$TOIOutputState
    TOUCHING : null, // declared in org.jbox2d.collision.TimeOfImpact$TOIOutputState
    SEPARATED : null, // declared in org.jbox2d.collision.TimeOfImpact$TOIOutputState
    $VALUES : null, // declared in org.jbox2d.collision.TimeOfImpact$TOIOutputState

    Create : function() {
        this.name = null; // declared in java.lang.Enum
        this.ordinalNumber = 0; // declared in java.lang.Enum
    },

    instanceOf : function(aType) {
        return ojcTimeOfImpact$TOIOutputState.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcTimeOfImpact$TOIOutputState;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var __label__ = null;
        var var0 = new ojcTimeOfImpact$TOIOutputState.Create(); // type is REFERENCE value type is REFERENCE
        ojcTimeOfImpact$TOIOutputState.VOIDinitjlStringINT(var0,bytecoder.stringpool[42],0);
        ojcTimeOfImpact$TOIOutputState.UNKNOWN = var0;
        var var1 = new ojcTimeOfImpact$TOIOutputState.Create(); // type is REFERENCE value type is REFERENCE
        ojcTimeOfImpact$TOIOutputState.VOIDinitjlStringINT(var1,bytecoder.stringpool[69],1);
        ojcTimeOfImpact$TOIOutputState.FAILED = var1;
        var var2 = new ojcTimeOfImpact$TOIOutputState.Create(); // type is REFERENCE value type is REFERENCE
        ojcTimeOfImpact$TOIOutputState.VOIDinitjlStringINT(var2,bytecoder.stringpool[70],2);
        ojcTimeOfImpact$TOIOutputState.OVERLAPPED = var2;
        var var3 = new ojcTimeOfImpact$TOIOutputState.Create(); // type is REFERENCE value type is REFERENCE
        ojcTimeOfImpact$TOIOutputState.VOIDinitjlStringINT(var3,bytecoder.stringpool[71],3);
        ojcTimeOfImpact$TOIOutputState.TOUCHING = var3;
        var var4 = new ojcTimeOfImpact$TOIOutputState.Create(); // type is REFERENCE value type is REFERENCE
        ojcTimeOfImpact$TOIOutputState.VOIDinitjlStringINT(var4,bytecoder.stringpool[72],4);
        ojcTimeOfImpact$TOIOutputState.SEPARATED = var4;
        var var5 = bytecoder.newArray(5,null); // type is REFERENCE value type is REFERENCE
        var var6 = ojcTimeOfImpact$TOIOutputState.UNKNOWN; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@431efe6e
        var5.data[0] = var6;
        var var7 = ojcTimeOfImpact$TOIOutputState.FAILED; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@43f3f5b6
        var5.data[1] = var7;
        var var8 = ojcTimeOfImpact$TOIOutputState.OVERLAPPED; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2b14be5a
        var5.data[2] = var8;
        var var9 = ojcTimeOfImpact$TOIOutputState.TOUCHING; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7e526ce7
        var5.data[3] = var9;
        var var10 = ojcTimeOfImpact$TOIOutputState.SEPARATED; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4a8b10cd
        var5.data[4] = var10;
        ojcTimeOfImpact$TOIOutputState.$VALUES = var5;
        return;
    },

    VOIDinitjlStringINT : function(thisRef,p1,p2) {
        var __label__ = null;
        jlEnum.VOIDinitjlStringINT(thisRef,p1,p2);
        return;
    },

    classInitCheck : function() {
        if (!ojcTimeOfImpact$TOIOutputState.__initialized) {
            ojcTimeOfImpact$TOIOutputState.__initialized = true;
            var thePrototype = ojcTimeOfImpact$TOIOutputState.Create.prototype;
            thePrototype.instanceOf = ojcTimeOfImpact$TOIOutputState.instanceOf;
            thePrototype.ClassgetClass = ojcTimeOfImpact$TOIOutputState.ClassgetClass;
            thePrototype.INTordinal = jlEnum.INTordinal;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlEnum.classInitCheck();
            jiSerializable.classInitCheck();
            jlObject.classInitCheck();
            jlComparable.classInitCheck();
            jlrArray.classInitCheck();
            ojcTimeOfImpact$TOIOutputState.VOIDclinit();
        }
    },

};

var ojcType = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 204,
    __implementedTypes : [56,2,204,1,11],
    POINTS : null, // declared in org.jbox2d.collision.Type
    FACE_A : null, // declared in org.jbox2d.collision.Type
    FACE_B : null, // declared in org.jbox2d.collision.Type
    $VALUES : null, // declared in org.jbox2d.collision.Type

    Create : function() {
        this.name = null; // declared in java.lang.Enum
        this.ordinalNumber = 0; // declared in java.lang.Enum
    },

    instanceOf : function(aType) {
        return ojcType.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcType;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var __label__ = null;
        var var0 = new ojcType.Create(); // type is REFERENCE value type is REFERENCE
        ojcType.VOIDinitjlStringINT(var0,bytecoder.stringpool[73],0);
        ojcType.POINTS = var0;
        var var1 = new ojcType.Create(); // type is REFERENCE value type is REFERENCE
        ojcType.VOIDinitjlStringINT(var1,bytecoder.stringpool[66],1);
        ojcType.FACE_A = var1;
        var var2 = new ojcType.Create(); // type is REFERENCE value type is REFERENCE
        ojcType.VOIDinitjlStringINT(var2,bytecoder.stringpool[67],2);
        ojcType.FACE_B = var2;
        var var3 = bytecoder.newArray(3,null); // type is REFERENCE value type is REFERENCE
        var var4 = ojcType.POINTS; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6e5b758f
        var3.data[0] = var4;
        var var5 = ojcType.FACE_A; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5f80d52b
        var3.data[1] = var5;
        var var6 = ojcType.FACE_B; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@415c0c2e
        var3.data[2] = var6;
        ojcType.$VALUES = var3;
        return;
    },

    VOIDinitjlStringINT : function(thisRef,p1,p2) {
        var __label__ = null;
        jlEnum.VOIDinitjlStringINT(thisRef,p1,p2);
        return;
    },

    A1ojcTypevalues : function() {
        var __label__ = null;
        var var1 = ojcType.$VALUES.jlObjectclone(ojcType.$VALUES); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6a658486
        return var1;
    },

    classInitCheck : function() {
        if (!ojcType.__initialized) {
            ojcType.__initialized = true;
            var thePrototype = ojcType.Create.prototype;
            thePrototype.instanceOf = ojcType.instanceOf;
            thePrototype.ClassgetClass = ojcType.ClassgetClass;
            thePrototype.INTordinal = jlEnum.INTordinal;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlEnum.classInitCheck();
            jiSerializable.classInitCheck();
            jlObject.classInitCheck();
            jlComparable.classInitCheck();
            jlrArray.classInitCheck();
            ojcType.VOIDclinit();
        }
    },

};

var ojcSeparationFunction$1 = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 205,
    __implementedTypes : [205,1],
    $SwitchMap$org$jbox2d$collision$Type : null, // declared in org.jbox2d.collision.SeparationFunction$1

    Create : function() {
    },

    instanceOf : function(aType) {
        return ojcSeparationFunction$1.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcSeparationFunction$1;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcType.A1ojcTypevalues(); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3388a13c
            var var2 = bytecoder.newArray(var0.data.length,0); // type is REFERENCE value type is REFERENCE
            ojcSeparationFunction$1.$SwitchMap$org$jbox2d$collision$Type = var2;
            }
        try {
            $S_9 : {
            // NORMAL
                var var3 = ojcSeparationFunction$1.$SwitchMap$org$jbox2d$collision$Type; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@67680118
                var var5 = ojcType.POINTS.INTordinal(ojcType.POINTS); // type is INT value type is INT
                var3.data[var5] = 1;
                __label__ = 24;
                }
        } catch (e) {
            dmbcExceptionManager.VOIDpushjlThrowable(e);
            if (e.instanceOf(jlNoSuchFieldError)) {
                __label__ = 23;
            } else {
                throw dmbcExceptionManager.jlThrowablepop();
            }
        }
        $M_23_24 : for(;;) switch (__label__) {
            case 23 :
            // EXCEPTION_HANDLER
                var var6 = dmbcExceptionManager.jlThrowablepop(); // type is REFERENCE value type is REFERENCE
                var local_0_REFERENCE = var6; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@cf70f9d
                __label__ = 24;
                continue $M_23_24;
            case 24 :
            // NORMAL
                try {
                    $S_24 : {
                    // NORMAL
                        var var8 = ojcSeparationFunction$1.$SwitchMap$org$jbox2d$collision$Type; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3e4a874a
                        var var10 = ojcType.FACE_A.INTordinal(ojcType.FACE_A); // type is INT value type is INT
                        var8.data[var10] = 2;
                        __label__ = 39;
                        }
                } catch (e) {
                    dmbcExceptionManager.VOIDpushjlThrowable(e);
                    if (e.instanceOf(jlNoSuchFieldError)) {
                        __label__ = 38;
                    } else {
                        throw dmbcExceptionManager.jlThrowablepop();
                    }
                }
                $M_38_39 : for(;;) switch (__label__) {
                    case 38 :
                    // EXCEPTION_HANDLER
                        var var11 = dmbcExceptionManager.jlThrowablepop(); // type is REFERENCE value type is REFERENCE
                        var local_0_REFERENCE = var11; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@483d50fe
                        __label__ = 39;
                        continue $M_38_39;
                    case 39 :
                    // NORMAL
                        try {
                            var var12 = ojcSeparationFunction$1.$SwitchMap$org$jbox2d$collision$Type; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@6ffaf820
                            var var14 = ojcType.FACE_B.INTordinal(ojcType.FACE_B); // type is INT value type is INT
                            var12.data[var14] = 3;
                            return;
                        } catch (e) {
                            dmbcExceptionManager.VOIDpushjlThrowable(e);
                            if (e.instanceOf(jlNoSuchFieldError)) {
                                __label__ = 53;
                            } else {
                                throw dmbcExceptionManager.jlThrowablepop();
                            }
                        }
                        var var15 = dmbcExceptionManager.jlThrowablepop(); // type is REFERENCE value type is REFERENCE
                        var local_0_REFERENCE = var15; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5bc589a5
                        return;
                }
        }
    },

    classInitCheck : function() {
        if (!ojcSeparationFunction$1.__initialized) {
            ojcSeparationFunction$1.__initialized = true;
            var thePrototype = ojcSeparationFunction$1.Create.prototype;
            thePrototype.instanceOf = ojcSeparationFunction$1.instanceOf;
            thePrototype.ClassgetClass = ojcSeparationFunction$1.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            ojcType.classInitCheck();
            ojcSeparationFunction$1.VOIDclinit();
        }
    },

};

var dmbcjlTMath$FloatExponents = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 206,
    __implementedTypes : [1,206],
    exponents : null, // declared in de.mirkosertic.bytecoder.classlib.java.lang.TMath$FloatExponents
    negativeExponents : null, // declared in de.mirkosertic.bytecoder.classlib.java.lang.TMath$FloatExponents
    negativeExponents2 : null, // declared in de.mirkosertic.bytecoder.classlib.java.lang.TMath$FloatExponents

    Create : function() {
    },

    instanceOf : function(aType) {
        return dmbcjlTMath$FloatExponents.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return dmbcjlTMath$FloatExponents;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var __label__ = null;
        var var0 = bytecoder.newArray(7,0.0); // type is REFERENCE value type is REFERENCE
        var0.data[0] = 2.0;
        var0.data[1] = 4.0;
        var0.data[2] = 16.0;
        var0.data[3] = 256.0;
        var0.data[4] = 65536.0;
        var0.data[5] = 4.2949673E9;
        var0.data[6] = 1.8446744E19;
        dmbcjlTMath$FloatExponents.exponents = var0;
        var var1 = bytecoder.newArray(7,0.0); // type is REFERENCE value type is REFERENCE
        var1.data[0] = 0.5;
        var1.data[1] = 0.25;
        var1.data[2] = 0.0625;
        var1.data[3] = 0.00390625;
        var1.data[4] = 1.5258789E-5;
        var1.data[5] = 2.3283064E-10;
        var1.data[6] = 5.421011E-20;
        dmbcjlTMath$FloatExponents.negativeExponents = var1;
        var var2 = bytecoder.newArray(7,0.0); // type is REFERENCE value type is REFERENCE
        var2.data[0] = 1.0;
        var2.data[1] = 0.5;
        var2.data[2] = 0.125;
        var2.data[3] = 0.0078125;
        var2.data[4] = 3.0517578E-5;
        var2.data[5] = 4.656613E-10;
        var2.data[6] = 1.0842022E-19;
        dmbcjlTMath$FloatExponents.negativeExponents2 = var2;
        return;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    classInitCheck : function() {
        if (!dmbcjlTMath$FloatExponents.__initialized) {
            dmbcjlTMath$FloatExponents.__initialized = true;
            var thePrototype = dmbcjlTMath$FloatExponents.Create.prototype;
            thePrototype.instanceOf = dmbcjlTMath$FloatExponents.instanceOf;
            thePrototype.ClassgetClass = dmbcjlTMath$FloatExponents.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            dmbcjlTMath$FloatExponents.VOIDclinit();
        }
    },

};

var juSet = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 207,
    __implementedTypes : [174,207,175,1],


    classInitCheck : function() {
        if (!juSet.__initialized) {
            juSet.__initialized = true;
            jlObject.classInitCheck();
            juCollection.classInitCheck();
            jlIterable.classInitCheck();
        }
    },

};

var juIterator = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 208,
    __implementedTypes : [208,1],


    classInitCheck : function() {
        if (!juIterator.__initialized) {
            juIterator.__initialized = true;
            jlObject.classInitCheck();
        }
    },

};

var jlClassCastException = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 209,
    __implementedTypes : [209,61,179,180,2,1],

    Create : function() {
    },

    instanceOf : function(aType) {
        return jlClassCastException.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jlClassCastException;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        jlRuntimeException.VOIDinit(thisRef);
        return;
    },

    VOIDinitjlString : function(thisRef,s) {
        var __label__ = null;
        jlRuntimeException.VOIDinitjlString(thisRef,s);
        return;
    },

    classInitCheck : function() {
        if (!jlClassCastException.__initialized) {
            jlClassCastException.__initialized = true;
            var thePrototype = jlClassCastException.Create.prototype;
            thePrototype.instanceOf = jlClassCastException.instanceOf;
            thePrototype.ClassgetClass = jlClassCastException.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlRuntimeException.classInitCheck();
            jlThrowable.classInitCheck();
            jlException.classInitCheck();
            jiSerializable.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var jlNullPointerException = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 210,
    __implementedTypes : [61,179,180,2,1,210],

    Create : function() {
    },

    instanceOf : function(aType) {
        return jlNullPointerException.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jlNullPointerException;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        jlRuntimeException.VOIDinit(thisRef);
        return;
    },

    VOIDinitjlString : function(thisRef,s) {
        var __label__ = null;
        jlRuntimeException.VOIDinitjlString(thisRef,s);
        return;
    },

    classInitCheck : function() {
        if (!jlNullPointerException.__initialized) {
            jlNullPointerException.__initialized = true;
            var thePrototype = jlNullPointerException.Create.prototype;
            thePrototype.instanceOf = jlNullPointerException.instanceOf;
            thePrototype.ClassgetClass = jlNullPointerException.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlRuntimeException.classInitCheck();
            jlThrowable.classInitCheck();
            jlException.classInitCheck();
            jiSerializable.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var jlDouble = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 211,
    __implementedTypes : [211,16,2,1,11],

    Create : function() {
        this.doubleValue = 0; // declared in java.lang.Double
    },

    instanceOf : function(aType) {
        return jlDouble.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jlDouble;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    DOUBLEdoubleValue : function(thisRef) {
        var __label__ = null;
        return thisRef.doubleValue;
    },

    INThashCode : function(thisRef) {
        var __label__ = null;
        return Math.floor(thisRef.doubleValue);
    },

    BOOLEANequalsjlObject : function(thisRef,o) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((thisRef != o)) {
                break $S_0;
            }
            return 1;
            }
        $S_7 : {
        // NORMAL
            if (o == null ) {
                return 0;
            }
            }
        $S_11 : {
        // NORMAL
            var var0 = thisRef.ClassgetClass(); // type is REFERENCE value type is REFERENCE
            var var1 = o.ClassgetClass(); // type is REFERENCE value type is REFERENCE
            if ((var0 == var1)) {
                break $S_11;
            }
            return 0;
            }
        var local_2_REFERENCE = o; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@35dd3dee
        var var4 = local_2_REFERENCE.DOUBLEdoubleValue(local_2_REFERENCE); // type is DOUBLE value type is DOUBLE
        var var6 = jlDouble.INTcompareDOUBLEDOUBLE(var4,thisRef.doubleValue); // type is INT value type is INT
        if ((var6 == 0)) {
            return 1;
        }
        return 0;
    },

    INTcompareDOUBLEDOUBLE : function(d1,d2) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((d1 >= d2)) {
                break $S_0;
            }
            return -1;
            }
        if ((d1 <= d2)) {
            return 0;
        }
        return 1;
    },

    jlStringtoString : function(thisRef) {
        var __label__ = null;
        var var1 = jlDouble.jlStringtoStringDOUBLE(thisRef.doubleValue); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2b3f3573
        return var1;
    },

    jlStringtoStringDOUBLE : function(aValue) {
        var __label__ = null;
        var var0 = new jlStringBuilder.Create(); // type is REFERENCE value type is REFERENCE
        jlStringBuilder.VOIDinit(var0);
        var local_2_REFERENCE = var0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@74b86e
        var var3 = local_2_REFERENCE.jlStringBuilderappendDOUBLE(local_2_REFERENCE,aValue); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@766b2d19
        var var5 = local_2_REFERENCE.jlStringtoString(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@420f1135
        return var5;
    },

    classInitCheck : function() {
        if (!jlDouble.__initialized) {
            jlDouble.__initialized = true;
            var thePrototype = jlDouble.Create.prototype;
            thePrototype.instanceOf = jlDouble.instanceOf;
            thePrototype.ClassgetClass = jlDouble.ClassgetClass;
            thePrototype.jlStringtoString = jlDouble.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlDouble.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlDouble.INThashCode;
            thePrototype.DOUBLEdoubleValue = jlDouble.DOUBLEdoubleValue;
            jlNumber.classInitCheck();
            jiSerializable.classInitCheck();
            jlObject.classInitCheck();
            jlComparable.classInitCheck();
        }
    },

};

var juHashMap$EntrySet = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 212,
    __implementedTypes : [213,174,207,175,173,212,1],

    Create : function() {
        this.this$0 = null; // declared in java.util.HashMap$EntrySet
    },

    instanceOf : function(aType) {
        return juHashMap$EntrySet.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return juHashMap$EntrySet;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    A1jlObjectfinishToArrayA1jlObjectjuIterator : function(p0,p1) {
         return juAbstractCollection.A1jlObjectfinishToArrayA1jlObjectjuIterator(p0,p1);
    },

    INThugeCapacityINT : function(p0) {
         return juAbstractCollection.INThugeCapacityINT(p0);
    },

    VOIDinitjuHashMap : function(thisRef,this$0) {
        var __label__ = null;
        thisRef.this$0 = this$0;
        juAbstractSet.VOIDinit(thisRef);
        return;
    },

    juIteratoriterator : function(thisRef) {
        var __label__ = null;
        var var0 = new juHashMap$EntryIterator.Create(); // type is REFERENCE value type is REFERENCE
        juHashMap$EntryIterator.VOIDinitjuHashMap(var0,thisRef.this$0);
        return var0;
    },

    INTsize : function(thisRef) {
        var __label__ = null;
        return thisRef.this$0.size;
    },

    BOOLEANcontainsjlObject : function(thisRef,o) {
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = (o == null ? false : o.instanceOf(juMap$Entry)); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                break $S_0;
            }
            return 0;
            }
        $S_9 : {
        // NORMAL
            local_2_REFERENCE = o; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@196c1bdb
            var var3 = local_2_REFERENCE.jlObjectgetKey(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4e43ff3c
            var local_3_REFERENCE = var3; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@17837227
            var var5 = thisRef.this$0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@38884c96
            var var7 = juHashMap.INThashjlObject(local_3_REFERENCE); // type is INT value type is INT
            var var9 = var5.juHashMap$NodegetNodeINTjlObject(var5,var7,local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5d5af91
            local_4_REFERENCE = var9; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@30afc56d
            var var11 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@30afc56d
            if (var11 == null ) {
                __label__ = 53;
                break $S_9;
            }
            __label__ = 40;
            }
        $M_40_53 : for(;;) switch (__label__) {
            case 53 :
            // NORMAL
                var var15 = 0; // type is INT value type is INT
                return var15;
            case 40 :
            // NORMAL
                $S_40 : {
                // NORMAL
                    var var14 = local_4_REFERENCE.BOOLEANequalsjlObject(local_4_REFERENCE,local_2_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                    if ((var14 == 0)) {
                        __label__ = 53;
                        continue $M_40_53;
                    }
                    }
                var var15 = 1; // type is INT value type is INT
                return var15;
        }
    },

    classInitCheck : function() {
        if (!juHashMap$EntrySet.__initialized) {
            juHashMap$EntrySet.__initialized = true;
            var thePrototype = juHashMap$EntrySet.Create.prototype;
            thePrototype.instanceOf = juHashMap$EntrySet.instanceOf;
            thePrototype.ClassgetClass = juHashMap$EntrySet.ClassgetClass;
            thePrototype.BOOLEANcontainsjlObject = juHashMap$EntrySet.BOOLEANcontainsjlObject;
            thePrototype.INTsize = juHashMap$EntrySet.INTsize;
            thePrototype.juIteratoriterator = juHashMap$EntrySet.juIteratoriterator;
            thePrototype.BOOLEANequalsjlObject = juAbstractSet.BOOLEANequalsjlObject;
            thePrototype.INThashCode = juAbstractSet.INThashCode;
            thePrototype.BOOLEANcontainsAlljuCollection = juAbstractCollection.BOOLEANcontainsAlljuCollection;
            thePrototype.A1jlObjecttoArrayA1jlObject = juAbstractCollection.A1jlObjecttoArrayA1jlObject;
            thePrototype.jlStringtoString = juAbstractCollection.jlStringtoString;
            juAbstractSet.classInitCheck();
            juCollection.classInitCheck();
            juSet.classInitCheck();
            jlIterable.classInitCheck();
            juAbstractCollection.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var juAbstractSet = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 213,
    __implementedTypes : [213,174,207,175,173,1],

    instanceOf : function(aType) {
        return juAbstractSet.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return juAbstractSet;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    A1jlObjectfinishToArrayA1jlObjectjuIterator : function(p0,p1) {
         return juAbstractCollection.A1jlObjectfinishToArrayA1jlObjectjuIterator(p0,p1);
    },

    INThugeCapacityINT : function(p0) {
         return juAbstractCollection.INThugeCapacityINT(p0);
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        juAbstractCollection.VOIDinit(thisRef);
        return;
    },

    INThashCode : function(thisRef) {
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_1_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_1_INT = 0; // type is INT value type is INT
            var var2 = thisRef.juIteratoriterator(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@59199d79
            local_2_REFERENCE = var2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@237cd3f8
            __label__ = 7;
            }
        $L_7 : for (;;) {
            $S_7 : {
            // NORMAL
                var var5 = local_2_REFERENCE.BOOLEANhasNext(local_2_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                if ((var5 == 0)) {
                    return local_1_INT;
                }
                }
            $S_16 : {
            // NORMAL
                var var7 = local_2_REFERENCE.jlObjectnext(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@19c3fd
                local_3_REFERENCE = var7; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@327b6504
                var var9 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@327b6504
                if (var9 == null ) {
                    __label__ = 34;
                    break $S_16;
                }
                __label__ = 27;
                }
            $M_34_27 : for(;;) switch (__label__) {
                case 27 :
                // NORMAL
                    var var10 = local_1_INT; // type is INT value type is INT
                    var var12 = local_3_REFERENCE.INThashCode(local_3_REFERENCE); // type is INT value type is INT
                    local_1_INT = (var10 + var12); // type is INT value type is INT
                    __label__ = 34;
                    continue $M_34_27;
                case 34 :
                // NORMAL
                    __label__ = 7;
                    continue $L_7;
            }
        }
    },

    BOOLEANequalsjlObject : function(thisRef,o) {
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((o != thisRef)) {
                break $S_0;
            }
            return 1;
            }
        $S_7 : {
        // NORMAL
            var var0 = (o == null ? false : o.instanceOf(juSet)); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                break $S_7;
            }
            return 0;
            }
        $S_16 : {
        // NORMAL
            local_2_REFERENCE = o; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7924955
            var var3 = local_2_REFERENCE.INTsize(local_2_REFERENCE); // type is INT value type is INT
            var var4 = thisRef.INTsize(thisRef); // type is INT value type is INT
            if ((var3 == var4)) {
                break $S_16;
            }
            return 0;
            }
        try {
            var var6 = thisRef.BOOLEANcontainsAlljuCollection(thisRef,local_2_REFERENCE); // type is BOOLEAN value type is BOOLEAN
            return var6;
        } catch (e) {
            dmbcExceptionManager.VOIDpushjlThrowable(e);
            if (e.instanceOf(jlNullPointerException)) {
                __label__ = 42;
            } else {
                throw dmbcExceptionManager.jlThrowablepop();
            }
        }
        var local_0_REFERENCE = thisRef; // type is REFERENCE value type is REFERENCE
        var var8 = dmbcExceptionManager.jlThrowablepop(); // type is REFERENCE value type is REFERENCE
        var local_3_REFERENCE = var8; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7829562
        return 0;
    },

    classInitCheck : function() {
        if (!juAbstractSet.__initialized) {
            juAbstractSet.__initialized = true;
            juAbstractCollection.classInitCheck();
            juCollection.classInitCheck();
            juSet.classInitCheck();
            jlIterable.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var jlUnsupportedOperationException = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 214,
    __implementedTypes : [61,214,179,180,2,1],

    Create : function() {
    },

    instanceOf : function(aType) {
        return jlUnsupportedOperationException.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jlUnsupportedOperationException;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        jlRuntimeException.VOIDinit(thisRef);
        return;
    },

    VOIDinitjlString : function(thisRef,message) {
        var __label__ = null;
        jlRuntimeException.VOIDinitjlString(thisRef,message);
        return;
    },

    classInitCheck : function() {
        if (!jlUnsupportedOperationException.__initialized) {
            jlUnsupportedOperationException.__initialized = true;
            var thePrototype = jlUnsupportedOperationException.Create.prototype;
            thePrototype.instanceOf = jlUnsupportedOperationException.instanceOf;
            thePrototype.ClassgetClass = jlUnsupportedOperationException.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlRuntimeException.classInitCheck();
            jlThrowable.classInitCheck();
            jlException.classInitCheck();
            jiSerializable.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var ojdcPolygonContact = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 215,
    __implementedTypes : [117,215,1],
    $assertionsDisabled : false, // declared in org.jbox2d.dynamics.contacts.PolygonContact

    Create : function() {
        this.m_flags = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_fixtureA = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_fixtureB = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_indexA = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_indexB = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_next = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_prev = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_nodeA = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_nodeB = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_manifold = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.oldManifold = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.pool = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_friction = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_restitution = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_tangentSpeed = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_toiCount = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_toi = 0; // declared in org.jbox2d.dynamics.contacts.Contact
    },

    instanceOf : function(aType) {
        return ojdcPolygonContact.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdcPolygonContact;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    FLOATmixFrictionFLOATFLOAT : function(p0,p1) {
         return ojdcContact.FLOATmixFrictionFLOATFLOAT(p0,p1);
    },

    FLOATmixRestitutionFLOATFLOAT : function(p0,p1) {
         return ojdcContact.FLOATmixRestitutionFLOATFLOAT(p0,p1);
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdcPolygonContact.BOOLEANdesiredAssertionStatus(ojdcPolygonContact); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_13_9 : for(;;) switch (__label__) {
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_13_9;
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_13_9;
        }
        ojdcPolygonContact.$assertionsDisabled = var1;
        return;
    },

    VOIDinitojpIWorldPool : function(thisRef,argPool) {
        var __label__ = null;
        ojdcContact.VOIDinitojpIWorldPool(thisRef,argPool);
        return;
    },

    VOIDevaluateojcManifoldojcTransformojcTransform : function(thisRef,manifold,xfA,xfB) {
        var __label__ = null;
        var var1 = thisRef.pool.ojcCollisiongetCollision(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@45991d4c
        var var3 = thisRef.m_fixtureA.ojcsShapegetShape(thisRef.m_fixtureA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2d7c6dd4
        var var5 = thisRef.m_fixtureB.ojcsShapegetShape(thisRef.m_fixtureB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4e2bc598
        var1.VOIDcollidePolygonsojcManifoldojcsPolygonShapeojcTransformojcsPolygonShapeojcTransform(var1,manifold,var3,xfA,var5,xfB);
        return;
    },

    classInitCheck : function() {
        if (!ojdcPolygonContact.__initialized) {
            ojdcPolygonContact.__initialized = true;
            var thePrototype = ojdcPolygonContact.Create.prototype;
            thePrototype.instanceOf = ojdcPolygonContact.instanceOf;
            thePrototype.ClassgetClass = ojdcPolygonContact.ClassgetClass;
            thePrototype.VOIDevaluateojcManifoldojcTransformojcTransform = ojdcPolygonContact.VOIDevaluateojcManifoldojcTransformojcTransform;
            thePrototype.VOIDinitojdFixtureINTojdFixtureINT = ojdcContact.VOIDinitojdFixtureINTojdFixtureINT;
            thePrototype.VOIDsetEnabledBOOLEAN = ojdcContact.VOIDsetEnabledBOOLEAN;
            thePrototype.ojcManifoldgetManifold = ojdcContact.ojcManifoldgetManifold;
            thePrototype.BOOLEANisEnabled = ojdcContact.BOOLEANisEnabled;
            thePrototype.VOIDupdateojcContactListener = ojdcContact.VOIDupdateojcContactListener;
            thePrototype.BOOLEANisTouching = ojdcContact.BOOLEANisTouching;
            thePrototype.ojdcContactgetNext = ojdcContact.ojdcContactgetNext;
            thePrototype.INTgetChildIndexB = ojdcContact.INTgetChildIndexB;
            thePrototype.INTgetChildIndexA = ojdcContact.INTgetChildIndexA;
            thePrototype.ojdFixturegetFixtureB = ojdcContact.ojdFixturegetFixtureB;
            thePrototype.ojdFixturegetFixtureA = ojdcContact.ojdFixturegetFixtureA;
            thePrototype.VOIDflagForFiltering = ojdcContact.VOIDflagForFiltering;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojdcContact.classInitCheck();
            jlObject.classInitCheck();
            ojdcPolygonContact.VOIDclinit();
        }
    },

};

var ojdcCircleContact = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 216,
    __implementedTypes : [117,216,1],
    $assertionsDisabled : false, // declared in org.jbox2d.dynamics.contacts.CircleContact

    Create : function() {
        this.m_flags = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_fixtureA = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_fixtureB = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_indexA = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_indexB = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_next = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_prev = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_nodeA = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_nodeB = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_manifold = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.oldManifold = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.pool = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_friction = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_restitution = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_tangentSpeed = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_toiCount = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_toi = 0; // declared in org.jbox2d.dynamics.contacts.Contact
    },

    instanceOf : function(aType) {
        return ojdcCircleContact.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdcCircleContact;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    FLOATmixFrictionFLOATFLOAT : function(p0,p1) {
         return ojdcContact.FLOATmixFrictionFLOATFLOAT(p0,p1);
    },

    FLOATmixRestitutionFLOATFLOAT : function(p0,p1) {
         return ojdcContact.FLOATmixRestitutionFLOATFLOAT(p0,p1);
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdcCircleContact.BOOLEANdesiredAssertionStatus(ojdcCircleContact); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_13_9 : for(;;) switch (__label__) {
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_13_9;
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_13_9;
        }
        ojdcCircleContact.$assertionsDisabled = var1;
        return;
    },

    VOIDinitojpIWorldPool : function(thisRef,argPool) {
        var __label__ = null;
        ojdcContact.VOIDinitojpIWorldPool(thisRef,argPool);
        return;
    },

    VOIDevaluateojcManifoldojcTransformojcTransform : function(thisRef,manifold,xfA,xfB) {
        var __label__ = null;
        var var1 = thisRef.pool.ojcCollisiongetCollision(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6502c49f
        var var3 = thisRef.m_fixtureA.ojcsShapegetShape(thisRef.m_fixtureA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1bb5ceb1
        var var5 = thisRef.m_fixtureB.ojcsShapegetShape(thisRef.m_fixtureB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3b65be97
        var1.VOIDcollideCirclesojcManifoldojcsCircleShapeojcTransformojcsCircleShapeojcTransform(var1,manifold,var3,xfA,var5,xfB);
        return;
    },

    classInitCheck : function() {
        if (!ojdcCircleContact.__initialized) {
            ojdcCircleContact.__initialized = true;
            var thePrototype = ojdcCircleContact.Create.prototype;
            thePrototype.instanceOf = ojdcCircleContact.instanceOf;
            thePrototype.ClassgetClass = ojdcCircleContact.ClassgetClass;
            thePrototype.VOIDevaluateojcManifoldojcTransformojcTransform = ojdcCircleContact.VOIDevaluateojcManifoldojcTransformojcTransform;
            thePrototype.VOIDinitojdFixtureINTojdFixtureINT = ojdcContact.VOIDinitojdFixtureINTojdFixtureINT;
            thePrototype.VOIDsetEnabledBOOLEAN = ojdcContact.VOIDsetEnabledBOOLEAN;
            thePrototype.ojcManifoldgetManifold = ojdcContact.ojcManifoldgetManifold;
            thePrototype.BOOLEANisEnabled = ojdcContact.BOOLEANisEnabled;
            thePrototype.VOIDupdateojcContactListener = ojdcContact.VOIDupdateojcContactListener;
            thePrototype.BOOLEANisTouching = ojdcContact.BOOLEANisTouching;
            thePrototype.ojdcContactgetNext = ojdcContact.ojdcContactgetNext;
            thePrototype.INTgetChildIndexB = ojdcContact.INTgetChildIndexB;
            thePrototype.INTgetChildIndexA = ojdcContact.INTgetChildIndexA;
            thePrototype.ojdFixturegetFixtureB = ojdcContact.ojdFixturegetFixtureB;
            thePrototype.ojdFixturegetFixtureA = ojdcContact.ojdFixturegetFixtureA;
            thePrototype.VOIDflagForFiltering = ojdcContact.VOIDflagForFiltering;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojdcContact.classInitCheck();
            jlObject.classInitCheck();
            ojdcCircleContact.VOIDclinit();
        }
    },

};

var ojdcPolygonAndCircleContact = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 217,
    __implementedTypes : [217,117,1],
    $assertionsDisabled : false, // declared in org.jbox2d.dynamics.contacts.PolygonAndCircleContact

    Create : function() {
        this.m_flags = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_fixtureA = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_fixtureB = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_indexA = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_indexB = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_next = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_prev = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_nodeA = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_nodeB = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_manifold = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.oldManifold = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.pool = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_friction = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_restitution = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_tangentSpeed = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_toiCount = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_toi = 0; // declared in org.jbox2d.dynamics.contacts.Contact
    },

    instanceOf : function(aType) {
        return ojdcPolygonAndCircleContact.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdcPolygonAndCircleContact;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    FLOATmixFrictionFLOATFLOAT : function(p0,p1) {
         return ojdcContact.FLOATmixFrictionFLOATFLOAT(p0,p1);
    },

    FLOATmixRestitutionFLOATFLOAT : function(p0,p1) {
         return ojdcContact.FLOATmixRestitutionFLOATFLOAT(p0,p1);
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdcPolygonAndCircleContact.BOOLEANdesiredAssertionStatus(ojdcPolygonAndCircleContact); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_13_9 : for(;;) switch (__label__) {
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_13_9;
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_13_9;
        }
        ojdcPolygonAndCircleContact.$assertionsDisabled = var1;
        return;
    },

    VOIDinitojpIWorldPool : function(thisRef,argPool) {
        var __label__ = null;
        ojdcContact.VOIDinitojpIWorldPool(thisRef,argPool);
        return;
    },

    VOIDevaluateojcManifoldojcTransformojcTransform : function(thisRef,manifold,xfA,xfB) {
        var __label__ = null;
        var var1 = thisRef.pool.ojcCollisiongetCollision(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@84f7174
        var var3 = thisRef.m_fixtureA.ojcsShapegetShape(thisRef.m_fixtureA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6877ebc3
        var var5 = thisRef.m_fixtureB.ojcsShapegetShape(thisRef.m_fixtureB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4a6fbc81
        var1.VOIDcollidePolygonAndCircleojcManifoldojcsPolygonShapeojcTransformojcsCircleShapeojcTransform(var1,manifold,var3,xfA,var5,xfB);
        return;
    },

    classInitCheck : function() {
        if (!ojdcPolygonAndCircleContact.__initialized) {
            ojdcPolygonAndCircleContact.__initialized = true;
            var thePrototype = ojdcPolygonAndCircleContact.Create.prototype;
            thePrototype.instanceOf = ojdcPolygonAndCircleContact.instanceOf;
            thePrototype.ClassgetClass = ojdcPolygonAndCircleContact.ClassgetClass;
            thePrototype.VOIDevaluateojcManifoldojcTransformojcTransform = ojdcPolygonAndCircleContact.VOIDevaluateojcManifoldojcTransformojcTransform;
            thePrototype.VOIDinitojdFixtureINTojdFixtureINT = ojdcContact.VOIDinitojdFixtureINTojdFixtureINT;
            thePrototype.VOIDsetEnabledBOOLEAN = ojdcContact.VOIDsetEnabledBOOLEAN;
            thePrototype.ojcManifoldgetManifold = ojdcContact.ojcManifoldgetManifold;
            thePrototype.BOOLEANisEnabled = ojdcContact.BOOLEANisEnabled;
            thePrototype.VOIDupdateojcContactListener = ojdcContact.VOIDupdateojcContactListener;
            thePrototype.BOOLEANisTouching = ojdcContact.BOOLEANisTouching;
            thePrototype.ojdcContactgetNext = ojdcContact.ojdcContactgetNext;
            thePrototype.INTgetChildIndexB = ojdcContact.INTgetChildIndexB;
            thePrototype.INTgetChildIndexA = ojdcContact.INTgetChildIndexA;
            thePrototype.ojdFixturegetFixtureB = ojdcContact.ojdFixturegetFixtureB;
            thePrototype.ojdFixturegetFixtureA = ojdcContact.ojdFixturegetFixtureA;
            thePrototype.VOIDflagForFiltering = ojdcContact.VOIDflagForFiltering;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojdcContact.classInitCheck();
            jlObject.classInitCheck();
            ojdcPolygonAndCircleContact.VOIDclinit();
        }
    },

};

var ojdcEdgeAndCircleContact = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 218,
    __implementedTypes : [218,117,1],
    $assertionsDisabled : false, // declared in org.jbox2d.dynamics.contacts.EdgeAndCircleContact

    Create : function() {
        this.m_flags = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_fixtureA = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_fixtureB = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_indexA = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_indexB = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_next = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_prev = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_nodeA = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_nodeB = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_manifold = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.oldManifold = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.pool = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_friction = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_restitution = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_tangentSpeed = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_toiCount = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_toi = 0; // declared in org.jbox2d.dynamics.contacts.Contact
    },

    instanceOf : function(aType) {
        return ojdcEdgeAndCircleContact.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdcEdgeAndCircleContact;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    FLOATmixFrictionFLOATFLOAT : function(p0,p1) {
         return ojdcContact.FLOATmixFrictionFLOATFLOAT(p0,p1);
    },

    FLOATmixRestitutionFLOATFLOAT : function(p0,p1) {
         return ojdcContact.FLOATmixRestitutionFLOATFLOAT(p0,p1);
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdcEdgeAndCircleContact.BOOLEANdesiredAssertionStatus(ojdcEdgeAndCircleContact); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_13_9 : for(;;) switch (__label__) {
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_13_9;
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_13_9;
        }
        ojdcEdgeAndCircleContact.$assertionsDisabled = var1;
        return;
    },

    VOIDinitojpIWorldPool : function(thisRef,argPool) {
        var __label__ = null;
        ojdcContact.VOIDinitojpIWorldPool(thisRef,argPool);
        return;
    },

    VOIDevaluateojcManifoldojcTransformojcTransform : function(thisRef,manifold,xfA,xfB) {
        var __label__ = null;
        var var1 = thisRef.pool.ojcCollisiongetCollision(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@32162beb
        var var3 = thisRef.m_fixtureA.ojcsShapegetShape(thisRef.m_fixtureA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1e7d6e0f
        var var5 = thisRef.m_fixtureB.ojcsShapegetShape(thisRef.m_fixtureB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4fea7781
        var1.VOIDcollideEdgeAndCircleojcManifoldojcsEdgeShapeojcTransformojcsCircleShapeojcTransform(var1,manifold,var3,xfA,var5,xfB);
        return;
    },

    VOIDinitojdFixtureINTojdFixtureINT : function(thisRef,fA,indexA,fB,indexB) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            thisRef.VOIDinitojdFixtureINTojdFixtureINT(thisRef,fA,indexA,fB,indexB);
            var var0 = ojdcEdgeAndCircleContact.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 36;
                break $S_0;
            }
            __label__ = 15;
            }
        $M_15_36 : for(;;) switch (__label__) {
            case 15 :
            // NORMAL
                $S_15 : {
                // NORMAL
                    var var2 = thisRef.m_fixtureA.ojcsShapeTypegetType(thisRef.m_fixtureA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7e18598a
                    var var3 = ojcsShapeType.EDGE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@284d4160
                    if ((var2 == var3)) {
                        __label__ = 36;
                        continue $M_15_36;
                    }
                    }
                var var4 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var4);
                throw var4;
            case 36 :
            // NORMAL
                $S_36 : {
                // NORMAL
                    var var5 = ojdcEdgeAndCircleContact.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                    if ((var5 != 0)) {
                        return;
                    }
                    }
                $S_42 : {
                // NORMAL
                    var var7 = thisRef.m_fixtureB.ojcsShapeTypegetType(thisRef.m_fixtureB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6d950ef3
                    var var8 = ojcsShapeType.CIRCLE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@131e95e7
                    if ((var7 == var8)) {
                        return;
                    }
                    }
                var var9 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var9);
                throw var9;
        }
    },

    classInitCheck : function() {
        if (!ojdcEdgeAndCircleContact.__initialized) {
            ojdcEdgeAndCircleContact.__initialized = true;
            var thePrototype = ojdcEdgeAndCircleContact.Create.prototype;
            thePrototype.instanceOf = ojdcEdgeAndCircleContact.instanceOf;
            thePrototype.ClassgetClass = ojdcEdgeAndCircleContact.ClassgetClass;
            thePrototype.VOIDinitojdFixtureINTojdFixtureINT = ojdcEdgeAndCircleContact.VOIDinitojdFixtureINTojdFixtureINT;
            thePrototype.VOIDevaluateojcManifoldojcTransformojcTransform = ojdcEdgeAndCircleContact.VOIDevaluateojcManifoldojcTransformojcTransform;
            thePrototype.VOIDsetEnabledBOOLEAN = ojdcContact.VOIDsetEnabledBOOLEAN;
            thePrototype.ojcManifoldgetManifold = ojdcContact.ojcManifoldgetManifold;
            thePrototype.BOOLEANisEnabled = ojdcContact.BOOLEANisEnabled;
            thePrototype.VOIDupdateojcContactListener = ojdcContact.VOIDupdateojcContactListener;
            thePrototype.BOOLEANisTouching = ojdcContact.BOOLEANisTouching;
            thePrototype.ojdcContactgetNext = ojdcContact.ojdcContactgetNext;
            thePrototype.INTgetChildIndexB = ojdcContact.INTgetChildIndexB;
            thePrototype.INTgetChildIndexA = ojdcContact.INTgetChildIndexA;
            thePrototype.ojdFixturegetFixtureB = ojdcContact.ojdFixturegetFixtureB;
            thePrototype.ojdFixturegetFixtureA = ojdcContact.ojdFixturegetFixtureA;
            thePrototype.VOIDflagForFiltering = ojdcContact.VOIDflagForFiltering;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojdcContact.classInitCheck();
            jlObject.classInitCheck();
            ojdcEdgeAndCircleContact.VOIDclinit();
        }
    },

};

var ojdcEdgeAndPolygonContact = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 219,
    __implementedTypes : [117,219,1],
    $assertionsDisabled : false, // declared in org.jbox2d.dynamics.contacts.EdgeAndPolygonContact

    Create : function() {
        this.m_flags = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_fixtureA = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_fixtureB = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_indexA = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_indexB = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_next = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_prev = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_nodeA = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_nodeB = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_manifold = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.oldManifold = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.pool = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_friction = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_restitution = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_tangentSpeed = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_toiCount = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_toi = 0; // declared in org.jbox2d.dynamics.contacts.Contact
    },

    instanceOf : function(aType) {
        return ojdcEdgeAndPolygonContact.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdcEdgeAndPolygonContact;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    FLOATmixFrictionFLOATFLOAT : function(p0,p1) {
         return ojdcContact.FLOATmixFrictionFLOATFLOAT(p0,p1);
    },

    FLOATmixRestitutionFLOATFLOAT : function(p0,p1) {
         return ojdcContact.FLOATmixRestitutionFLOATFLOAT(p0,p1);
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdcEdgeAndPolygonContact.BOOLEANdesiredAssertionStatus(ojdcEdgeAndPolygonContact); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_9_13 : for(;;) switch (__label__) {
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_9_13;
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_9_13;
        }
        ojdcEdgeAndPolygonContact.$assertionsDisabled = var1;
        return;
    },

    VOIDinitojpIWorldPool : function(thisRef,argPool) {
        var __label__ = null;
        ojdcContact.VOIDinitojpIWorldPool(thisRef,argPool);
        return;
    },

    VOIDevaluateojcManifoldojcTransformojcTransform : function(thisRef,manifold,xfA,xfB) {
        var __label__ = null;
        var var1 = thisRef.pool.ojcCollisiongetCollision(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@18cb33be
        var var3 = thisRef.m_fixtureA.ojcsShapegetShape(thisRef.m_fixtureA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@78d583a4
        var var5 = thisRef.m_fixtureB.ojcsShapegetShape(thisRef.m_fixtureB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@30014cfc
        var1.VOIDcollideEdgeAndPolygonojcManifoldojcsEdgeShapeojcTransformojcsPolygonShapeojcTransform(var1,manifold,var3,xfA,var5,xfB);
        return;
    },

    VOIDinitojdFixtureINTojdFixtureINT : function(thisRef,fA,indexA,fB,indexB) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            thisRef.VOIDinitojdFixtureINTojdFixtureINT(thisRef,fA,indexA,fB,indexB);
            var var0 = ojdcEdgeAndPolygonContact.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 36;
                break $S_0;
            }
            __label__ = 15;
            }
        $M_36_15 : for(;;) switch (__label__) {
            case 15 :
            // NORMAL
                $S_15 : {
                // NORMAL
                    var var2 = thisRef.m_fixtureA.ojcsShapeTypegetType(thisRef.m_fixtureA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@b3933f8
                    var var3 = ojcsShapeType.EDGE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6eb48ce3
                    if ((var2 == var3)) {
                        __label__ = 36;
                        continue $M_36_15;
                    }
                    }
                var var4 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var4);
                throw var4;
            case 36 :
            // NORMAL
                $S_36 : {
                // NORMAL
                    var var5 = ojdcEdgeAndPolygonContact.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                    if ((var5 != 0)) {
                        return;
                    }
                    }
                $S_42 : {
                // NORMAL
                    var var7 = thisRef.m_fixtureB.ojcsShapeTypegetType(thisRef.m_fixtureB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@132ea25
                    var var8 = ojcsShapeType.POLYGON; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@79b9df26
                    if ((var7 == var8)) {
                        return;
                    }
                    }
                var var9 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var9);
                throw var9;
        }
    },

    classInitCheck : function() {
        if (!ojdcEdgeAndPolygonContact.__initialized) {
            ojdcEdgeAndPolygonContact.__initialized = true;
            var thePrototype = ojdcEdgeAndPolygonContact.Create.prototype;
            thePrototype.instanceOf = ojdcEdgeAndPolygonContact.instanceOf;
            thePrototype.ClassgetClass = ojdcEdgeAndPolygonContact.ClassgetClass;
            thePrototype.VOIDinitojdFixtureINTojdFixtureINT = ojdcEdgeAndPolygonContact.VOIDinitojdFixtureINTojdFixtureINT;
            thePrototype.VOIDevaluateojcManifoldojcTransformojcTransform = ojdcEdgeAndPolygonContact.VOIDevaluateojcManifoldojcTransformojcTransform;
            thePrototype.VOIDsetEnabledBOOLEAN = ojdcContact.VOIDsetEnabledBOOLEAN;
            thePrototype.ojcManifoldgetManifold = ojdcContact.ojcManifoldgetManifold;
            thePrototype.BOOLEANisEnabled = ojdcContact.BOOLEANisEnabled;
            thePrototype.VOIDupdateojcContactListener = ojdcContact.VOIDupdateojcContactListener;
            thePrototype.BOOLEANisTouching = ojdcContact.BOOLEANisTouching;
            thePrototype.ojdcContactgetNext = ojdcContact.ojdcContactgetNext;
            thePrototype.INTgetChildIndexB = ojdcContact.INTgetChildIndexB;
            thePrototype.INTgetChildIndexA = ojdcContact.INTgetChildIndexA;
            thePrototype.ojdFixturegetFixtureB = ojdcContact.ojdFixturegetFixtureB;
            thePrototype.ojdFixturegetFixtureA = ojdcContact.ojdFixturegetFixtureA;
            thePrototype.VOIDflagForFiltering = ojdcContact.VOIDflagForFiltering;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojdcContact.classInitCheck();
            jlObject.classInitCheck();
            ojdcEdgeAndPolygonContact.VOIDclinit();
        }
    },

};

var ojdcChainAndCircleContact = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 220,
    __implementedTypes : [220,117,1],
    $assertionsDisabled : false, // declared in org.jbox2d.dynamics.contacts.ChainAndCircleContact

    Create : function() {
        this.m_flags = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_fixtureA = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_fixtureB = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_indexA = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_indexB = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_next = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_prev = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_nodeA = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_nodeB = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_manifold = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.oldManifold = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.pool = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_friction = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_restitution = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_tangentSpeed = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_toiCount = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_toi = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.edge = null; // declared in org.jbox2d.dynamics.contacts.ChainAndCircleContact
    },

    instanceOf : function(aType) {
        return ojdcChainAndCircleContact.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdcChainAndCircleContact;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    FLOATmixFrictionFLOATFLOAT : function(p0,p1) {
         return ojdcContact.FLOATmixFrictionFLOATFLOAT(p0,p1);
    },

    FLOATmixRestitutionFLOATFLOAT : function(p0,p1) {
         return ojdcContact.FLOATmixRestitutionFLOATFLOAT(p0,p1);
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdcChainAndCircleContact.BOOLEANdesiredAssertionStatus(ojdcChainAndCircleContact); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_13_9 : for(;;) switch (__label__) {
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_13_9;
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_13_9;
        }
        ojdcChainAndCircleContact.$assertionsDisabled = var1;
        return;
    },

    VOIDinitojpIWorldPool : function(thisRef,argPool) {
        var __label__ = null;
        ojdcContact.VOIDinitojpIWorldPool(thisRef,argPool);
        var var0 = new ojcsEdgeShape.Create(); // type is REFERENCE value type is REFERENCE
        ojcsEdgeShape.VOIDinit(var0);
        thisRef.edge = var0;
        return;
    },

    VOIDevaluateojcManifoldojcTransformojcTransform : function(thisRef,manifold,xfA,xfB) {
        var __label__ = null;
        var var1 = thisRef.m_fixtureA.ojcsShapegetShape(thisRef.m_fixtureA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@207539b7
        var local_4_REFERENCE = var1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@33b187e4
        local_4_REFERENCE.VOIDgetChildEdgeojcsEdgeShapeINT(local_4_REFERENCE,thisRef.edge,thisRef.m_indexA);
        var var7 = thisRef.pool.ojcCollisiongetCollision(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5d3d790a
        var var8 = thisRef.edge; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@159a3d15
        var var10 = thisRef.m_fixtureB.ojcsShapegetShape(thisRef.m_fixtureB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1cab0690
        var7.VOIDcollideEdgeAndCircleojcManifoldojcsEdgeShapeojcTransformojcsCircleShapeojcTransform(var7,manifold,var8,xfA,var10,xfB);
        return;
    },

    VOIDinitojdFixtureINTojdFixtureINT : function(thisRef,fA,indexA,fB,indexB) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            thisRef.VOIDinitojdFixtureINTojdFixtureINT(thisRef,fA,indexA,fB,indexB);
            var var0 = ojdcChainAndCircleContact.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 36;
                break $S_0;
            }
            __label__ = 15;
            }
        $M_15_36 : for(;;) switch (__label__) {
            case 15 :
            // NORMAL
                $S_15 : {
                // NORMAL
                    var var2 = thisRef.m_fixtureA.ojcsShapeTypegetType(thisRef.m_fixtureA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@531843d5
                    var var3 = ojcsShapeType.CHAIN; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@527e1dd4
                    if ((var2 == var3)) {
                        __label__ = 36;
                        continue $M_15_36;
                    }
                    }
                var var9 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var9);
                throw var9;
            case 36 :
            // NORMAL
                $S_36 : {
                // NORMAL
                    var var4 = ojdcChainAndCircleContact.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                    if ((var4 != 0)) {
                        return;
                    }
                    }
                $S_42 : {
                // NORMAL
                    var var6 = thisRef.m_fixtureB.ojcsShapeTypegetType(thisRef.m_fixtureB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@71e4a12d
                    var var7 = ojcsShapeType.CIRCLE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4e046788
                    if ((var6 == var7)) {
                        return;
                    }
                    }
                var var8 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var8);
                throw var8;
        }
    },

    classInitCheck : function() {
        if (!ojdcChainAndCircleContact.__initialized) {
            ojdcChainAndCircleContact.__initialized = true;
            var thePrototype = ojdcChainAndCircleContact.Create.prototype;
            thePrototype.instanceOf = ojdcChainAndCircleContact.instanceOf;
            thePrototype.ClassgetClass = ojdcChainAndCircleContact.ClassgetClass;
            thePrototype.VOIDinitojdFixtureINTojdFixtureINT = ojdcChainAndCircleContact.VOIDinitojdFixtureINTojdFixtureINT;
            thePrototype.VOIDevaluateojcManifoldojcTransformojcTransform = ojdcChainAndCircleContact.VOIDevaluateojcManifoldojcTransformojcTransform;
            thePrototype.VOIDsetEnabledBOOLEAN = ojdcContact.VOIDsetEnabledBOOLEAN;
            thePrototype.ojcManifoldgetManifold = ojdcContact.ojcManifoldgetManifold;
            thePrototype.BOOLEANisEnabled = ojdcContact.BOOLEANisEnabled;
            thePrototype.VOIDupdateojcContactListener = ojdcContact.VOIDupdateojcContactListener;
            thePrototype.BOOLEANisTouching = ojdcContact.BOOLEANisTouching;
            thePrototype.ojdcContactgetNext = ojdcContact.ojdcContactgetNext;
            thePrototype.INTgetChildIndexB = ojdcContact.INTgetChildIndexB;
            thePrototype.INTgetChildIndexA = ojdcContact.INTgetChildIndexA;
            thePrototype.ojdFixturegetFixtureB = ojdcContact.ojdFixturegetFixtureB;
            thePrototype.ojdFixturegetFixtureA = ojdcContact.ojdFixturegetFixtureA;
            thePrototype.VOIDflagForFiltering = ojdcContact.VOIDflagForFiltering;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojdcContact.classInitCheck();
            jlObject.classInitCheck();
            ojdcChainAndCircleContact.VOIDclinit();
        }
    },

};

var ojdcChainAndPolygonContact = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 221,
    __implementedTypes : [117,221,1],
    $assertionsDisabled : false, // declared in org.jbox2d.dynamics.contacts.ChainAndPolygonContact

    Create : function() {
        this.m_flags = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_fixtureA = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_fixtureB = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_indexA = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_indexB = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_next = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_prev = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_nodeA = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_nodeB = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_manifold = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.oldManifold = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.pool = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_friction = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_restitution = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_tangentSpeed = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_toiCount = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_toi = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.edge = null; // declared in org.jbox2d.dynamics.contacts.ChainAndPolygonContact
    },

    instanceOf : function(aType) {
        return ojdcChainAndPolygonContact.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdcChainAndPolygonContact;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    FLOATmixFrictionFLOATFLOAT : function(p0,p1) {
         return ojdcContact.FLOATmixFrictionFLOATFLOAT(p0,p1);
    },

    FLOATmixRestitutionFLOATFLOAT : function(p0,p1) {
         return ojdcContact.FLOATmixRestitutionFLOATFLOAT(p0,p1);
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdcChainAndPolygonContact.BOOLEANdesiredAssertionStatus(ojdcChainAndPolygonContact); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_13_9 : for(;;) switch (__label__) {
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_13_9;
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_13_9;
        }
        ojdcChainAndPolygonContact.$assertionsDisabled = var1;
        return;
    },

    VOIDinitojpIWorldPool : function(thisRef,argPool) {
        var __label__ = null;
        ojdcContact.VOIDinitojpIWorldPool(thisRef,argPool);
        var var0 = new ojcsEdgeShape.Create(); // type is REFERENCE value type is REFERENCE
        ojcsEdgeShape.VOIDinit(var0);
        thisRef.edge = var0;
        return;
    },

    VOIDevaluateojcManifoldojcTransformojcTransform : function(thisRef,manifold,xfA,xfB) {
        var __label__ = null;
        var var1 = thisRef.m_fixtureA.ojcsShapegetShape(thisRef.m_fixtureA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7129bb60
        var local_4_REFERENCE = var1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6fe7e3b4
        local_4_REFERENCE.VOIDgetChildEdgeojcsEdgeShapeINT(local_4_REFERENCE,thisRef.edge,thisRef.m_indexA);
        var var7 = thisRef.pool.ojcCollisiongetCollision(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@64127faa
        var var8 = thisRef.edge; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@19e7644
        var var10 = thisRef.m_fixtureB.ojcsShapegetShape(thisRef.m_fixtureB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3d502fac
        var7.VOIDcollideEdgeAndPolygonojcManifoldojcsEdgeShapeojcTransformojcsPolygonShapeojcTransform(var7,manifold,var8,xfA,var10,xfB);
        return;
    },

    VOIDinitojdFixtureINTojdFixtureINT : function(thisRef,fA,indexA,fB,indexB) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            thisRef.VOIDinitojdFixtureINTojdFixtureINT(thisRef,fA,indexA,fB,indexB);
            var var0 = ojdcChainAndPolygonContact.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 36;
                break $S_0;
            }
            __label__ = 15;
            }
        $M_15_36 : for(;;) switch (__label__) {
            case 36 :
            // NORMAL
                $S_36 : {
                // NORMAL
                    var var5 = ojdcChainAndPolygonContact.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                    if ((var5 != 0)) {
                        return;
                    }
                    }
                $S_42 : {
                // NORMAL
                    var var7 = thisRef.m_fixtureB.ojcsShapeTypegetType(thisRef.m_fixtureB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@50c3fead
                    var var8 = ojcsShapeType.POLYGON; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@66571c34
                    if ((var7 == var8)) {
                        return;
                    }
                    }
                var var9 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var9);
                throw var9;
            case 15 :
            // NORMAL
                $S_15 : {
                // NORMAL
                    var var2 = thisRef.m_fixtureA.ojcsShapeTypegetType(thisRef.m_fixtureA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2724f366
                    var var3 = ojcsShapeType.CHAIN; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@408d3183
                    if ((var2 == var3)) {
                        __label__ = 36;
                        continue $M_15_36;
                    }
                    }
                var var4 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var4);
                throw var4;
        }
    },

    classInitCheck : function() {
        if (!ojdcChainAndPolygonContact.__initialized) {
            ojdcChainAndPolygonContact.__initialized = true;
            var thePrototype = ojdcChainAndPolygonContact.Create.prototype;
            thePrototype.instanceOf = ojdcChainAndPolygonContact.instanceOf;
            thePrototype.ClassgetClass = ojdcChainAndPolygonContact.ClassgetClass;
            thePrototype.VOIDinitojdFixtureINTojdFixtureINT = ojdcChainAndPolygonContact.VOIDinitojdFixtureINTojdFixtureINT;
            thePrototype.VOIDevaluateojcManifoldojcTransformojcTransform = ojdcChainAndPolygonContact.VOIDevaluateojcManifoldojcTransformojcTransform;
            thePrototype.VOIDsetEnabledBOOLEAN = ojdcContact.VOIDsetEnabledBOOLEAN;
            thePrototype.ojcManifoldgetManifold = ojdcContact.ojcManifoldgetManifold;
            thePrototype.BOOLEANisEnabled = ojdcContact.BOOLEANisEnabled;
            thePrototype.VOIDupdateojcContactListener = ojdcContact.VOIDupdateojcContactListener;
            thePrototype.BOOLEANisTouching = ojdcContact.BOOLEANisTouching;
            thePrototype.ojdcContactgetNext = ojdcContact.ojdcContactgetNext;
            thePrototype.INTgetChildIndexB = ojdcContact.INTgetChildIndexB;
            thePrototype.INTgetChildIndexA = ojdcContact.INTgetChildIndexA;
            thePrototype.ojdFixturegetFixtureB = ojdcContact.ojdFixturegetFixtureB;
            thePrototype.ojdFixturegetFixtureA = ojdcContact.ojdFixturegetFixtureA;
            thePrototype.VOIDflagForFiltering = ojdcContact.VOIDflagForFiltering;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojdcContact.classInitCheck();
            jlObject.classInitCheck();
            ojdcChainAndPolygonContact.VOIDclinit();
        }
    },

};

var ojcQueryCallback = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 222,
    __implementedTypes : [222,1],


    classInitCheck : function() {
        if (!ojcQueryCallback.__initialized) {
            ojcQueryCallback.__initialized = true;
            jlObject.classInitCheck();
        }
    },

};

var juObjects = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 223,
    __implementedTypes : [223,1],

    Create : function() {
    },

    instanceOf : function(aType) {
        return juObjects.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return juObjects;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    INThashCodejlObject : function(o) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if (o == null ) {
                __label__ = 11;
                break $S_0;
            }
            __label__ = 4;
            }
        for(;;) switch (__label__) {
            case 4 :
            // NORMAL
                var var0 = o.INThashCode(o); // type is INT value type is INT
                var var1 = var0; // type is INT value type is INT
                return var1;
            case 11 :
            // NORMAL
                var var1 = 0; // type is INT value type is INT
                return var1;
        }
    },

    BOOLEANequalsjlObjectjlObject : function(a,b) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((a == b)) {
                __label__ = 17;
                break $S_0;
            }
            __label__ = 5;
            }
        $M_17_5 : for(;;) switch (__label__) {
            case 5 :
            // NORMAL
                $S_5 : {
                // NORMAL
                    if (a == null ) {
                        __label__ = 21;
                        break $S_5;
                    }
                    __label__ = 9;
                    }
                $M_21_9 : for(;;) switch (__label__) {
                    case 21 :
                    // NORMAL
                        var var1 = 0; // type is INT value type is INT
                        return var1;
                    case 9 :
                    // NORMAL
                        var var0 = a.BOOLEANequalsjlObject(a,b); // type is BOOLEAN value type is BOOLEAN
                        if ((var0 == 0)) {
                            __label__ = 21;
                            continue $M_21_9;
                        }
                        __label__ = 17;
                        continue $M_17_5;
                }
            case 17 :
            // NORMAL
                var var1 = 1; // type is INT value type is INT
                return var1;
        }
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
        jlAssertionError.VOIDinitjlObject(var0,bytecoder.stringpool[74]);
        throw var0;
    },

    INTcheckIndexINTINT : function(index,length) {
        var __label__ = null;
        var var0 = jiuPreconditions.INTcheckIndexINTINTjufBiFunction(index,length,null); // type is INT value type is INT
        return var0;
    },

    jlObjectrequireNonNulljlObject : function(obj) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if (obj != null ) {
                return obj;
            }
            }
        var var0 = new jlNullPointerException.Create(); // type is REFERENCE value type is REFERENCE
        jlNullPointerException.VOIDinit(var0);
        throw var0;
    },

    classInitCheck : function() {
        if (!juObjects.__initialized) {
            juObjects.__initialized = true;
            var thePrototype = juObjects.Create.prototype;
            thePrototype.instanceOf = juObjects.instanceOf;
            thePrototype.ClassgetClass = juObjects.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var juConcurrentModificationException = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 224,
    __implementedTypes : [224,61,179,180,2,1],

    Create : function() {
    },

    instanceOf : function(aType) {
        return juConcurrentModificationException.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return juConcurrentModificationException;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        jlRuntimeException.VOIDinit(thisRef);
        return;
    },

    VOIDinitjlString : function(thisRef,message) {
        var __label__ = null;
        jlRuntimeException.VOIDinitjlString(thisRef,message);
        return;
    },

    classInitCheck : function() {
        if (!juConcurrentModificationException.__initialized) {
            juConcurrentModificationException.__initialized = true;
            var thePrototype = juConcurrentModificationException.Create.prototype;
            thePrototype.instanceOf = juConcurrentModificationException.instanceOf;
            thePrototype.ClassgetClass = juConcurrentModificationException.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlRuntimeException.classInitCheck();
            jlThrowable.classInitCheck();
            jlException.classInitCheck();
            jiSerializable.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var juArrayList$Itr = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 225,
    __implementedTypes : [208,225,1],

    Create : function() {
        this.this$0 = null; // declared in java.util.ArrayList$Itr
        this.lastRet = 0; // declared in java.util.ArrayList$Itr
        this.expectedModCount = 0; // declared in java.util.ArrayList$Itr
        this.cursor = 0; // declared in java.util.ArrayList$Itr
    },

    instanceOf : function(aType) {
        return juArrayList$Itr.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return juArrayList$Itr;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitjuArrayList : function(thisRef,p1) {
        var __label__ = null;
        thisRef.this$0 = p1;
        thisRef.lastRet = -1;
        var var1 = thisRef.this$0.modCount; // type is INT value type is INT
        thisRef.expectedModCount = var1;
        return;
    },

    BOOLEANhasNext : function(thisRef) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.cursor; // type is INT value type is INT
            var var2 = thisRef.this$0.size; // type is INT value type is INT
            if ((var0 == var2)) {
                __label__ = 18;
                break $S_0;
            }
            __label__ = 14;
            }
        for(;;) switch (__label__) {
            case 14 :
            // NORMAL
                var var3 = 1; // type is INT value type is INT
                return var3;
            case 18 :
            // NORMAL
                var var3 = 0; // type is INT value type is INT
                return var3;
        }
    },

    jlObjectnext : function(thisRef) {
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_1_INT = null; // type is INT # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            thisRef.VOIDcheckForComodification(thisRef);
            local_1_INT = thisRef.cursor; // type is INT value type is INT
            var var3 = local_1_INT; // type is INT value type is INT
            var var5 = thisRef.this$0.size; // type is INT value type is INT
            if ((var3 < var5)) {
                __label__ = 28;
                break $S_0;
            }
            __label__ = 20;
            }
        for(;;) switch (__label__) {
            case 28 :
            // NORMAL
                $S_28 : {
                // NORMAL
                    local_2_REFERENCE = thisRef.this$0.elementData; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@4ec209fc
                    var var9 = local_1_INT; // type is INT value type is INT
                    var var11 = local_2_REFERENCE.data.length; // type is INT value type is INT
                    if ((var9 < var11)) {
                        __label__ = 50;
                        break $S_28;
                    }
                    __label__ = 42;
                    }
                for(;;) switch (__label__) {
                    case 50 :
                    // NORMAL
                        var var13 = (local_1_INT + 1); // type is INT value type is INT
                        thisRef.cursor = var13;
                        var var14 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@281bd348
                        var var15 = local_1_INT; // type is INT value type is INT
                        thisRef.lastRet = var15;
                        var var16 = var14.data[var15]; // type is REFERENCE value type is REFERENCE
                        return var16;
                    case 42 :
                    // NORMAL
                        var var17 = new juConcurrentModificationException.Create(); // type is REFERENCE value type is REFERENCE
                        juConcurrentModificationException.VOIDinit(var17);
                        throw var17;
                }
            case 20 :
            // NORMAL
                var var18 = new juNoSuchElementException.Create(); // type is REFERENCE value type is REFERENCE
                juNoSuchElementException.VOIDinit(var18);
                throw var18;
        }
    },

    VOIDcheckForComodification : function(thisRef) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var1 = thisRef.this$0.modCount; // type is INT value type is INT
            var var2 = thisRef.expectedModCount; // type is INT value type is INT
            if ((var1 == var2)) {
                return;
            }
            }
        var var3 = new juConcurrentModificationException.Create(); // type is REFERENCE value type is REFERENCE
        juConcurrentModificationException.VOIDinit(var3);
        throw var3;
    },

    classInitCheck : function() {
        if (!juArrayList$Itr.__initialized) {
            juArrayList$Itr.__initialized = true;
            var thePrototype = juArrayList$Itr.Create.prototype;
            thePrototype.instanceOf = juArrayList$Itr.instanceOf;
            thePrototype.ClassgetClass = juArrayList$Itr.ClassgetClass;
            thePrototype.VOIDcheckForComodification = juArrayList$Itr.VOIDcheckForComodification;
            thePrototype.jlObjectnext = juArrayList$Itr.jlObjectnext;
            thePrototype.BOOLEANhasNext = juArrayList$Itr.BOOLEANhasNext;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            juIterator.classInitCheck();
        }
    },

};

var juAbstractList$Itr = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 226,
    __implementedTypes : [226,208,1],

    Create : function() {
        this.this$0 = null; // declared in java.util.AbstractList$Itr
        this.cursor = 0; // declared in java.util.AbstractList$Itr
        this.lastRet = 0; // declared in java.util.AbstractList$Itr
        this.expectedModCount = 0; // declared in java.util.AbstractList$Itr
    },

    instanceOf : function(aType) {
        return juAbstractList$Itr.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return juAbstractList$Itr;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitjuAbstractList : function(thisRef,p1) {
        var __label__ = null;
        thisRef.this$0 = p1;
        thisRef.cursor = 0;
        thisRef.lastRet = -1;
        var var1 = thisRef.this$0.modCount; // type is INT value type is INT
        thisRef.expectedModCount = var1;
        return;
    },

    BOOLEANhasNext : function(thisRef) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.cursor; // type is INT value type is INT
            var var2 = thisRef.this$0.INTsize(thisRef.this$0); // type is INT value type is INT
            if ((var0 == var2)) {
                __label__ = 18;
                break $S_0;
            }
            __label__ = 14;
            }
        for(;;) switch (__label__) {
            case 14 :
            // NORMAL
                var var3 = 1; // type is INT value type is INT
                return var3;
            case 18 :
            // NORMAL
                var var3 = 0; // type is INT value type is INT
                return var3;
        }
    },

    jlObjectnext : function(thisRef) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            thisRef.VOIDcheckForComodification(thisRef);
            }
        try {
            var local_1_INT = thisRef.cursor; // type is INT value type is INT
            var var5 = thisRef.this$0.jlObjectgetINT(thisRef.this$0,local_1_INT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@75126a5e
            var local_2_REFERENCE = var5; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1a8cc7e5
            var var7 = local_1_INT; // type is INT value type is INT
            thisRef.lastRet = var7;
            var var9 = (local_1_INT + 1); // type is INT value type is INT
            thisRef.cursor = var9;
            return local_2_REFERENCE;
        } catch (e) {
            dmbcExceptionManager.VOIDpushjlThrowable(e);
            if (e.instanceOf(jlIndexOutOfBoundsException)) {
                __label__ = 32;
            } else {
                throw dmbcExceptionManager.jlThrowablepop();
            }
        }
        var local_0_REFERENCE = thisRef; // type is REFERENCE value type is REFERENCE
        var var12 = dmbcExceptionManager.jlThrowablepop(); // type is REFERENCE value type is REFERENCE
        var local_1_REFERENCE = var12; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@57698b8b
        local_0_REFERENCE.VOIDcheckForComodification(local_0_REFERENCE);
        var var15 = new juNoSuchElementException.Create(); // type is REFERENCE value type is REFERENCE
        juNoSuchElementException.VOIDinit(var15);
        throw var15;
    },

    VOIDcheckForComodification : function(thisRef) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var1 = thisRef.this$0.modCount; // type is INT value type is INT
            var var2 = thisRef.expectedModCount; // type is INT value type is INT
            if ((var1 == var2)) {
                return;
            }
            }
        var var3 = new juConcurrentModificationException.Create(); // type is REFERENCE value type is REFERENCE
        juConcurrentModificationException.VOIDinit(var3);
        throw var3;
    },

    classInitCheck : function() {
        if (!juAbstractList$Itr.__initialized) {
            juAbstractList$Itr.__initialized = true;
            var thePrototype = juAbstractList$Itr.Create.prototype;
            thePrototype.instanceOf = juAbstractList$Itr.instanceOf;
            thePrototype.ClassgetClass = juAbstractList$Itr.ClassgetClass;
            thePrototype.VOIDcheckForComodification = juAbstractList$Itr.VOIDcheckForComodification;
            thePrototype.jlObjectnext = juAbstractList$Itr.jlObjectnext;
            thePrototype.BOOLEANhasNext = juAbstractList$Itr.BOOLEANhasNext;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            juIterator.classInitCheck();
        }
    },

};

var juListIterator = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 227,
    __implementedTypes : [227,208,1],


    classInitCheck : function() {
        if (!juListIterator.__initialized) {
            juListIterator.__initialized = true;
            jlObject.classInitCheck();
            juIterator.classInitCheck();
        }
    },

};

var jlIndexOutOfBoundsException = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 228,
    __implementedTypes : [228,61,179,180,2,1],

    Create : function() {
    },

    instanceOf : function(aType) {
        return jlIndexOutOfBoundsException.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jlIndexOutOfBoundsException;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitjlString : function(thisRef,s) {
        var __label__ = null;
        jlRuntimeException.VOIDinitjlString(thisRef,s);
        return;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        jlRuntimeException.VOIDinit(thisRef);
        return;
    },

    classInitCheck : function() {
        if (!jlIndexOutOfBoundsException.__initialized) {
            jlIndexOutOfBoundsException.__initialized = true;
            var thePrototype = jlIndexOutOfBoundsException.Create.prototype;
            thePrototype.instanceOf = jlIndexOutOfBoundsException.instanceOf;
            thePrototype.ClassgetClass = jlIndexOutOfBoundsException.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlRuntimeException.classInitCheck();
            jlThrowable.classInitCheck();
            jlException.classInitCheck();
            jiSerializable.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var juAbstractList$ListItr = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 229,
    __implementedTypes : [227,226,208,229,1],

    Create : function() {
        this.this$0 = null; // declared in java.util.AbstractList$Itr
        this.cursor = 0; // declared in java.util.AbstractList$Itr
        this.lastRet = 0; // declared in java.util.AbstractList$Itr
        this.expectedModCount = 0; // declared in java.util.AbstractList$Itr
        this.this$0 = null; // declared in java.util.AbstractList$ListItr
    },

    instanceOf : function(aType) {
        return juAbstractList$ListItr.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return juAbstractList$ListItr;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitjuAbstractListINT : function(thisRef,p1,index) {
        var __label__ = null;
        thisRef.this$0 = p1;
        juAbstractList$Itr.VOIDinitjuAbstractList(thisRef,p1);
        thisRef.cursor = index;
        return;
    },

    INTpreviousIndex : function(thisRef) {
        var __label__ = null;
        return (thisRef.cursor - 1);
    },

    classInitCheck : function() {
        if (!juAbstractList$ListItr.__initialized) {
            juAbstractList$ListItr.__initialized = true;
            var thePrototype = juAbstractList$ListItr.Create.prototype;
            thePrototype.instanceOf = juAbstractList$ListItr.instanceOf;
            thePrototype.ClassgetClass = juAbstractList$ListItr.ClassgetClass;
            thePrototype.INTpreviousIndex = juAbstractList$ListItr.INTpreviousIndex;
            thePrototype.VOIDcheckForComodification = juAbstractList$Itr.VOIDcheckForComodification;
            thePrototype.jlObjectnext = juAbstractList$Itr.jlObjectnext;
            thePrototype.BOOLEANhasNext = juAbstractList$Itr.BOOLEANhasNext;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            juAbstractList$Itr.classInitCheck();
            juListIterator.classInitCheck();
            juIterator.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var jlIllegalStateException = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 230,
    __implementedTypes : [61,230,179,180,2,1],

    Create : function() {
    },

    instanceOf : function(aType) {
        return jlIllegalStateException.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jlIllegalStateException;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        jlRuntimeException.VOIDinit(thisRef);
        return;
    },

    VOIDinitjlString : function(thisRef,s) {
        var __label__ = null;
        jlRuntimeException.VOIDinitjlString(thisRef,s);
        return;
    },

    classInitCheck : function() {
        if (!jlIllegalStateException.__initialized) {
            jlIllegalStateException.__initialized = true;
            var thePrototype = jlIllegalStateException.Create.prototype;
            thePrototype.instanceOf = jlIllegalStateException.instanceOf;
            thePrototype.ClassgetClass = jlIllegalStateException.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlRuntimeException.classInitCheck();
            jlThrowable.classInitCheck();
            jlException.classInitCheck();
            jiSerializable.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var jlOutOfMemoryError = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 231,
    __implementedTypes : [231,61,2,60,232,1],

    Create : function() {
    },

    instanceOf : function(aType) {
        return jlOutOfMemoryError.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jlOutOfMemoryError;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitjlString : function(thisRef,s) {
        var __label__ = null;
        jlVirtualMachineError.VOIDinitjlString(thisRef,s);
        return;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        jlVirtualMachineError.VOIDinit(thisRef);
        return;
    },

    classInitCheck : function() {
        if (!jlOutOfMemoryError.__initialized) {
            jlOutOfMemoryError.__initialized = true;
            var thePrototype = jlOutOfMemoryError.Create.prototype;
            thePrototype.instanceOf = jlOutOfMemoryError.instanceOf;
            thePrototype.ClassgetClass = jlOutOfMemoryError.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlVirtualMachineError.classInitCheck();
            jlThrowable.classInitCheck();
            jiSerializable.classInitCheck();
            jlError.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var jlVirtualMachineError = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 232,
    __implementedTypes : [61,2,60,232,1],

    instanceOf : function(aType) {
        return jlVirtualMachineError.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jlVirtualMachineError;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitjlString : function(thisRef,message) {
        var __label__ = null;
        jlError.VOIDinitjlString(thisRef,message);
        return;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        jlError.VOIDinit(thisRef);
        return;
    },

    classInitCheck : function() {
        if (!jlVirtualMachineError.__initialized) {
            jlVirtualMachineError.__initialized = true;
            jlError.classInitCheck();
            jlThrowable.classInitCheck();
            jiSerializable.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var juArrayList$ListItr = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 233,
    __implementedTypes : [227,233,208,225,1],

    Create : function() {
        this.this$0 = null; // declared in java.util.ArrayList$Itr
        this.lastRet = 0; // declared in java.util.ArrayList$Itr
        this.expectedModCount = 0; // declared in java.util.ArrayList$Itr
        this.cursor = 0; // declared in java.util.ArrayList$Itr
        this.this$0 = null; // declared in java.util.ArrayList$ListItr
    },

    instanceOf : function(aType) {
        return juArrayList$ListItr.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return juArrayList$ListItr;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitjuArrayListINT : function(thisRef,p1,index) {
        var __label__ = null;
        thisRef.this$0 = p1;
        juArrayList$Itr.VOIDinitjuArrayList(thisRef,p1);
        thisRef.cursor = index;
        return;
    },

    INTpreviousIndex : function(thisRef) {
        var __label__ = null;
        return (thisRef.cursor - 1);
    },

    classInitCheck : function() {
        if (!juArrayList$ListItr.__initialized) {
            juArrayList$ListItr.__initialized = true;
            var thePrototype = juArrayList$ListItr.Create.prototype;
            thePrototype.instanceOf = juArrayList$ListItr.instanceOf;
            thePrototype.ClassgetClass = juArrayList$ListItr.ClassgetClass;
            thePrototype.INTpreviousIndex = juArrayList$ListItr.INTpreviousIndex;
            thePrototype.VOIDcheckForComodification = juArrayList$Itr.VOIDcheckForComodification;
            thePrototype.jlObjectnext = juArrayList$Itr.jlObjectnext;
            thePrototype.BOOLEANhasNext = juArrayList$Itr.BOOLEANhasNext;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            juArrayList$Itr.classInitCheck();
            juListIterator.classInitCheck();
            juIterator.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var juHashMap$EntryIterator = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 234,
    __implementedTypes : [235,208,234,1],

    Create : function() {
        this.this$0 = null; // declared in java.util.HashMap$HashIterator
        this.expectedModCount = 0; // declared in java.util.HashMap$HashIterator
        this.next = null; // declared in java.util.HashMap$HashIterator
        this.current = null; // declared in java.util.HashMap$HashIterator
        this.index = 0; // declared in java.util.HashMap$HashIterator
        this.this$0 = null; // declared in java.util.HashMap$EntryIterator
    },

    instanceOf : function(aType) {
        return juHashMap$EntryIterator.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return juHashMap$EntryIterator;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitjuHashMap : function(thisRef,this$0) {
        var __label__ = null;
        thisRef.this$0 = this$0;
        juHashMap$HashIterator.VOIDinitjuHashMap(thisRef,this$0);
        return;
    },

    jlObjectnext : function(thisRef) {
        var __label__ = null;
        var var0 = thisRef.juMap$Entrynext(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2c376d89
        return var0;
    },

    juMap$Entrynext : function(thisRef) {
        var __label__ = null;
        var var0 = thisRef.juHashMap$NodenextNode(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@a25cf5e
        return var0;
    },

    classInitCheck : function() {
        if (!juHashMap$EntryIterator.__initialized) {
            juHashMap$EntryIterator.__initialized = true;
            var thePrototype = juHashMap$EntryIterator.Create.prototype;
            thePrototype.instanceOf = juHashMap$EntryIterator.instanceOf;
            thePrototype.ClassgetClass = juHashMap$EntryIterator.ClassgetClass;
            thePrototype.juMap$Entrynext = juHashMap$EntryIterator.juMap$Entrynext;
            thePrototype.jlObjectnext = juHashMap$EntryIterator.jlObjectnext;
            thePrototype.juHashMap$NodenextNode = juHashMap$HashIterator.juHashMap$NodenextNode;
            thePrototype.BOOLEANhasNext = juHashMap$HashIterator.BOOLEANhasNext;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            juHashMap$HashIterator.classInitCheck();
            juIterator.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var juHashMap$HashIterator = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 235,
    __implementedTypes : [235,1],

    instanceOf : function(aType) {
        return juHashMap$HashIterator.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return juHashMap$HashIterator;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitjuHashMap : function(thisRef,this$0) {
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            thisRef.this$0 = this$0;
            var var0 = this$0.modCount; // type is INT value type is INT
            thisRef.expectedModCount = var0;
            local_2_REFERENCE = this$0.table; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@354fe6ab
            thisRef.next = null;
            thisRef.current = null;
            thisRef.index = 0;
            var var3 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3a7a2fb9
            if (var3 == null ) {
                return;
            }
            }
        $S_41 : {
        // NORMAL
            var var4 = this$0.size; // type is INT value type is INT
            if ((var4 <= 0)) {
                return;
            }
            __label__ = 48;
            }
        $L_48 : for (;;) {
            $S_48 : {
            // NORMAL
                var var5 = thisRef.index; // type is INT value type is INT
                var var7 = local_2_REFERENCE.data.length; // type is INT value type is INT
                if ((var5 >= var7)) {
                    return;
                }
                }
            var var8 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3a7a2fb9
            var var9 = thisRef.index; // type is INT value type is INT
            var var10 = (var9 + 1); // type is INT value type is INT
            thisRef.index = var10;
            var var11 = var8.data[var9]; // type is REFERENCE value type is REFERENCE
            thisRef.next = var11;
            if (var11 == null ) {
                __label__ = 48;
                continue $L_48;
            }
            return;
        }
    },

    BOOLEANhasNext : function(thisRef) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7618077a
            if (var0 == null ) {
                __label__ = 11;
                break $S_0;
            }
            __label__ = 7;
            }
        for(;;) switch (__label__) {
            case 7 :
            // NORMAL
                var var1 = 1; // type is INT value type is INT
                return var1;
            case 11 :
            // NORMAL
                var var1 = 0; // type is INT value type is INT
                return var1;
        }
    },

    juHashMap$NodenextNode : function(thisRef) {
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_1_REFERENCE = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_2_REFERENCE = thisRef.next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@71d49616
            var var3 = thisRef.this$0.modCount; // type is INT value type is INT
            var var4 = thisRef.expectedModCount; // type is INT value type is INT
            if ((var3 == var4)) {
                __label__ = 27;
                break $S_0;
            }
            __label__ = 19;
            }
        for(;;) switch (__label__) {
            case 19 :
            // NORMAL
                var var5 = new juConcurrentModificationException.Create(); // type is REFERENCE value type is REFERENCE
                juConcurrentModificationException.VOIDinit(var5);
                throw var5;
            case 27 :
            // NORMAL
                $S_27 : {
                // NORMAL
                    var var6 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@63a25dfc
                    if (var6 != null ) {
                        __label__ = 39;
                        break $S_27;
                    }
                    __label__ = 31;
                    }
                for(;;) switch (__label__) {
                    case 31 :
                    // NORMAL
                        var var20 = new juNoSuchElementException.Create(); // type is REFERENCE value type is REFERENCE
                        juNoSuchElementException.VOIDinit(var20);
                        throw var20;
                    case 39 :
                    // NORMAL
                        $S_39 : {
                        // NORMAL
                            var var7 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@63a25dfc
                            thisRef.current = var7;
                            var var8 = var7.next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@534c5fdb
                            thisRef.next = var8;
                            if (var8 != null ) {
                                return local_2_REFERENCE;
                            }
                            }
                        $S_56 : {
                        // NORMAL
                            var var10 = thisRef.this$0.table; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@5dc7e1d2
                            local_1_REFERENCE = var10; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@6cd1b16a
                            if (var10 == null ) {
                                return local_2_REFERENCE;
                            }
                            __label__ = 68;
                            }
                        $L_68 : for (;;) {
                            $S_68 : {
                            // NORMAL
                                var var12 = thisRef.index; // type is INT value type is INT
                                var var14 = local_1_REFERENCE.data.length; // type is INT value type is INT
                                if ((var12 >= var14)) {
                                    return local_2_REFERENCE;
                                }
                                }
                            var var15 = local_1_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@6cd1b16a
                            var var16 = thisRef.index; // type is INT value type is INT
                            var var17 = (var16 + 1); // type is INT value type is INT
                            thisRef.index = var17;
                            var var18 = var15.data[var16]; // type is REFERENCE value type is REFERENCE
                            thisRef.next = var18;
                            if (var18 == null ) {
                                __label__ = 68;
                                continue $L_68;
                            }
                            return local_2_REFERENCE;
                        }
                }
        }
    },

    classInitCheck : function() {
        if (!juHashMap$HashIterator.__initialized) {
            juHashMap$HashIterator.__initialized = true;
            jlObject.classInitCheck();
        }
    },

};

var ojcContactID$Type = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 236,
    __implementedTypes : [236,56,2,1,11],
    VERTEX : null, // declared in org.jbox2d.collision.ContactID$Type
    FACE : null, // declared in org.jbox2d.collision.ContactID$Type
    $VALUES : null, // declared in org.jbox2d.collision.ContactID$Type

    Create : function() {
        this.name = null; // declared in java.lang.Enum
        this.ordinalNumber = 0; // declared in java.lang.Enum
    },

    instanceOf : function(aType) {
        return ojcContactID$Type.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcContactID$Type;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var __label__ = null;
        var var0 = new ojcContactID$Type.Create(); // type is REFERENCE value type is REFERENCE
        ojcContactID$Type.VOIDinitjlStringINT(var0,bytecoder.stringpool[75],0);
        ojcContactID$Type.VERTEX = var0;
        var var1 = new ojcContactID$Type.Create(); // type is REFERENCE value type is REFERENCE
        ojcContactID$Type.VOIDinitjlStringINT(var1,bytecoder.stringpool[76],1);
        ojcContactID$Type.FACE = var1;
        var var2 = bytecoder.newArray(2,null); // type is REFERENCE value type is REFERENCE
        var var3 = ojcContactID$Type.VERTEX; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3063e5cc
        var2.data[0] = var3;
        var var4 = ojcContactID$Type.FACE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@57291466
        var2.data[1] = var4;
        ojcContactID$Type.$VALUES = var2;
        return;
    },

    VOIDinitjlStringINT : function(thisRef,p1,p2) {
        var __label__ = null;
        jlEnum.VOIDinitjlStringINT(thisRef,p1,p2);
        return;
    },

    classInitCheck : function() {
        if (!ojcContactID$Type.__initialized) {
            ojcContactID$Type.__initialized = true;
            var thePrototype = ojcContactID$Type.Create.prototype;
            thePrototype.instanceOf = ojcContactID$Type.instanceOf;
            thePrototype.ClassgetClass = ojcContactID$Type.ClassgetClass;
            thePrototype.INTordinal = jlEnum.INTordinal;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlEnum.classInitCheck();
            jiSerializable.classInitCheck();
            jlObject.classInitCheck();
            jlComparable.classInitCheck();
            jlrArray.classInitCheck();
            ojcContactID$Type.VOIDclinit();
        }
    },

};

var ojcCollision$EPAxis$Type = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 237,
    __implementedTypes : [237,56,2,1,11],
    UNKNOWN : null, // declared in org.jbox2d.collision.Collision$EPAxis$Type
    EDGE_A : null, // declared in org.jbox2d.collision.Collision$EPAxis$Type
    EDGE_B : null, // declared in org.jbox2d.collision.Collision$EPAxis$Type
    $VALUES : null, // declared in org.jbox2d.collision.Collision$EPAxis$Type

    Create : function() {
        this.name = null; // declared in java.lang.Enum
        this.ordinalNumber = 0; // declared in java.lang.Enum
    },

    instanceOf : function(aType) {
        return ojcCollision$EPAxis$Type.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcCollision$EPAxis$Type;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var __label__ = null;
        var var0 = new ojcCollision$EPAxis$Type.Create(); // type is REFERENCE value type is REFERENCE
        ojcCollision$EPAxis$Type.VOIDinitjlStringINT(var0,bytecoder.stringpool[42],0);
        ojcCollision$EPAxis$Type.UNKNOWN = var0;
        var var1 = new ojcCollision$EPAxis$Type.Create(); // type is REFERENCE value type is REFERENCE
        ojcCollision$EPAxis$Type.VOIDinitjlStringINT(var1,bytecoder.stringpool[77],1);
        ojcCollision$EPAxis$Type.EDGE_A = var1;
        var var2 = new ojcCollision$EPAxis$Type.Create(); // type is REFERENCE value type is REFERENCE
        ojcCollision$EPAxis$Type.VOIDinitjlStringINT(var2,bytecoder.stringpool[78],2);
        ojcCollision$EPAxis$Type.EDGE_B = var2;
        var var3 = bytecoder.newArray(3,null); // type is REFERENCE value type is REFERENCE
        var var4 = ojcCollision$EPAxis$Type.UNKNOWN; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@305e4561
        var3.data[0] = var4;
        var var5 = ojcCollision$EPAxis$Type.EDGE_A; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@60cd016
        var3.data[1] = var5;
        var var6 = ojcCollision$EPAxis$Type.EDGE_B; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5e421682
        var3.data[2] = var6;
        ojcCollision$EPAxis$Type.$VALUES = var3;
        return;
    },

    VOIDinitjlStringINT : function(thisRef,p1,p2) {
        var __label__ = null;
        jlEnum.VOIDinitjlStringINT(thisRef,p1,p2);
        return;
    },

    classInitCheck : function() {
        if (!ojcCollision$EPAxis$Type.__initialized) {
            ojcCollision$EPAxis$Type.__initialized = true;
            var thePrototype = ojcCollision$EPAxis$Type.Create.prototype;
            thePrototype.instanceOf = ojcCollision$EPAxis$Type.instanceOf;
            thePrototype.ClassgetClass = ojcCollision$EPAxis$Type.ClassgetClass;
            thePrototype.INTordinal = jlEnum.INTordinal;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlEnum.classInitCheck();
            jiSerializable.classInitCheck();
            jlObject.classInitCheck();
            jlComparable.classInitCheck();
            jlrArray.classInitCheck();
            ojcCollision$EPAxis$Type.VOIDclinit();
        }
    },

};

var juNoSuchElementException = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 238,
    __implementedTypes : [61,238,179,180,2,1],

    Create : function() {
    },

    instanceOf : function(aType) {
        return juNoSuchElementException.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return juNoSuchElementException;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        jlRuntimeException.VOIDinit(thisRef);
        return;
    },

    VOIDinitjlString : function(thisRef,s) {
        var __label__ = null;
        jlRuntimeException.VOIDinitjlString(thisRef,s);
        return;
    },

    classInitCheck : function() {
        if (!juNoSuchElementException.__initialized) {
            juNoSuchElementException.__initialized = true;
            var thePrototype = juNoSuchElementException.Create.prototype;
            thePrototype.instanceOf = juNoSuchElementException.instanceOf;
            thePrototype.ClassgetClass = juNoSuchElementException.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlRuntimeException.classInitCheck();
            jlThrowable.classInitCheck();
            jlException.classInitCheck();
            jiSerializable.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var jiuPreconditions = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 239,
    __implementedTypes : [239,1],

    Create : function() {
    },

    instanceOf : function(aType) {
        return jiuPreconditions.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jiuPreconditions;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    INTcheckIndexINTINTjufBiFunction : function(index,length,oobef) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((index < 0)) {
                __label__ = 9;
                break $S_0;
            }
            __label__ = 4;
            }
        $M_4_9 : for(;;) switch (__label__) {
            case 4 :
            // NORMAL
                if ((index < length)) {
                    return index;
                }
                __label__ = 9;
                continue $M_4_9;
            case 9 :
            // NORMAL
                var var0 = jiuPreconditions.jlRuntimeExceptionoutOfBoundsCheckIndexjufBiFunctionINTINT(oobef,index,length); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3e968520
                throw var0;
        }
    },

    jlRuntimeExceptionoutOfBoundsCheckIndexjufBiFunctionINTINT : function(oobe,index,length) {
        var __label__ = null;
        var var0 = bytecoder.newArray(2,null); // type is REFERENCE value type is REFERENCE
        var var1 = jlInteger.jlIntegervalueOfINT(index); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@611e539b
        var0.data[0] = var1;
        var var2 = jlInteger.jlIntegervalueOfINT(length); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7e7c15c0
        var0.data[1] = var2;
        var var3 = jiuPreconditions.jlRuntimeExceptionoutOfBoundsjufBiFunctionjlStringA1jlInteger(oobe,bytecoder.stringpool[79],var0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@42fc0774
        return var3;
    },

    jlRuntimeExceptionoutOfBoundsjufBiFunctionjlStringA1jlInteger : function(oobef,checkKind,args) {
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 1
        var var4 = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = juList.juListofA1jlObject(args); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@308da5b7
            local_3_REFERENCE = var0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@58ea47ab
            if (oobef != null ) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_13_9 : for(;;) switch (__label__) {
            case 13 :
            // NORMAL
                var var3 = oobef.jlObjectapplyjlObjectjlObject(oobef,checkKind,local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@732d49e3
                var4 = var3; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2b056879
                break $M_13_9;
            case 9 :
            // NORMAL
                var4 = null; // type is REFERENCE value type is REFERENCE
                break $M_13_9;
        }
        $S_24 : {
        // NORMAL
            local_4_REFERENCE = var4; // type is REFERENCE value type is REFERENCE
            var var6 = local_4_REFERENCE; // type is REFERENCE value type is REFERENCE
            if (var6 != null ) {
                __label__ = 46;
                break $S_24;
            }
            __label__ = 31;
            }
        for(;;) switch (__label__) {
            case 46 :
            // NORMAL
                var var11 = local_4_REFERENCE; // type is REFERENCE value type is REFERENCE
                return var11;
            case 31 :
            // NORMAL
                var var7 = new jlIndexOutOfBoundsException.Create(); // type is REFERENCE value type is REFERENCE
                var var9 = jiuPreconditions.jlStringoutOfBoundsMessagejlStringjuList(checkKind,local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5a142bad
                jlIndexOutOfBoundsException.VOIDinitjlString(var7,var9);
                var var11 = var7; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@58cf0adb
                return var11;
        }
    },

    jlStringoutOfBoundsMessagejlStringjuList : function(checkKind,args) {
        var local_4_INT = null; // type is INT # of inits = 8
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 2
        var var21 = null; // type is REFERENCE # of inits = 2
        var local_2_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if (checkKind != null ) {
                __label__ = 18;
                break $S_0;
            }
            __label__ = 4;
            }
        $M_4_18 : for(;;) switch (__label__) {
            case 18 :
            // NORMAL
                $S_18 : {
                // NORMAL
                    if (checkKind != null ) {
                        __label__ = 36;
                        break $S_18;
                    }
                    __label__ = 22;
                    }
                for(;;) switch (__label__) {
                    case 36 :
                    // NORMAL
                        $S_36 : {
                        // NORMAL
                            if (args != null ) {
                                __label__ = 54;
                                break $S_36;
                            }
                            __label__ = 40;
                            }
                        for(;;) switch (__label__) {
                            case 40 :
                            // NORMAL
                                var var37 = bytecoder.newArray(1,null); // type is REFERENCE value type is REFERENCE
                                var37.data[0] = checkKind;
                                var var38 = jlString.jlStringformatjlStringA1jlObject(bytecoder.stringpool[80],var37); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@274956fb
                                return var38;
                            case 54 :
                            // NORMAL
                                $S_54 : {
                                // NORMAL
                                    local_2_INT = 0; // type is INT value type is INT
                                    local_3_REFERENCE = checkKind; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7a7fce66
                                    local_4_INT = -1; // type is INT value type is INT
                                    var var6 = local_3_REFERENCE.INThashCode(local_3_REFERENCE); // type is INT value type is INT
                                    switch(var6) {
                                     case 1848935233:
                                         __label__ = 130;
                                    break $S_54;
                                     case -538822486:
                                         __label__ = 100;
                                    break $S_54;
                                     case 1844394469:
                                         __label__ = 115;
                                    break $S_54;
                                    }
                                    __label__ = 142;
                                    break $S_54;
                                    }
                                $M_100_115_130_142 : for(;;) switch (__label__) {
                                    case 130 :
                                    // NORMAL
                                        $S_130 : {
                                        // NORMAL
                                            var var11 = local_3_REFERENCE.BOOLEANequalsjlObject(local_3_REFERENCE,bytecoder.stringpool[81]); // type is BOOLEAN value type is BOOLEAN
                                            if ((var11 == 0)) {
                                                __label__ = 142;
                                                continue $M_100_115_130_142;
                                            }
                                            }
                                        local_4_INT = 2; // type is INT value type is INT
                                        __label__ = 142;
                                        continue $M_100_115_130_142;
                                    case 142 :
                                    // NORMAL
                                        $S_142 : {
                                        // NORMAL
                                            var var16 = local_4_INT; // type is INT value type is INT
                                            if (var16 < 0 || var16 > 2) {
                                             __label__ = 182;
                                            break $S_142;
                                            }
                                            switch(var16 - 0) {
                                             case 0:
                                                 __label__ = 172;
                                            break $S_142;
                                             case 1:
                                                 __label__ = 177;
                                            break $S_142;
                                             case 2:
                                                 __label__ = 177;
                                            break $S_142;
                                            }
                                            throw 'Illegal jump target!';
                                            }
                                        $M_182_177_172 : for(;;) switch (__label__) {
                                            case 177 :
                                            // NORMAL
                                                local_2_INT = 3; // type is INT value type is INT
                                                __label__ = 182;
                                                continue $M_182_177_172;
                                            case 182 :
                                            // NORMAL
                                                $S_182 : {
                                                // NORMAL
                                                    var var19 = args.INTsize(args); // type is INT value type is INT
                                                    var var20 = local_2_INT; // type is INT value type is INT
                                                    if ((var19 == var20)) {
                                                        __label__ = 197;
                                                        break $S_182;
                                                    }
                                                    __label__ = 192;
                                                    }
                                                $M_192_197 : for(;;) switch (__label__) {
                                                    case 192 :
                                                    // NORMAL
                                                        var21 = bytecoder.stringpool[0]; // type is REFERENCE value type is REFERENCE
                                                        break $M_192_197;
                                                    case 197 :
                                                    // NORMAL
                                                        var21 = checkKind; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7a7fce66
                                                        break $M_192_197;
                                                }
                                                $S_198 : {
                                                // NORMAL
                                                    local_3_REFERENCE = var21; // type is REFERENCE value type is REFERENCE
                                                    local_4_INT = -1; // type is INT value type is INT
                                                    var var24 = local_3_REFERENCE.INThashCode(local_3_REFERENCE); // type is INT value type is INT
                                                    switch(var24) {
                                                     case 1848935233:
                                                         __label__ = 270;
                                                    break $S_198;
                                                     case -538822486:
                                                         __label__ = 240;
                                                    break $S_198;
                                                     case 1844394469:
                                                         __label__ = 255;
                                                    break $S_198;
                                                    }
                                                    __label__ = 282;
                                                    break $S_198;
                                                    }
                                                $M_240_270_282_255 : for(;;) switch (__label__) {
                                                    case 282 :
                                                    // NORMAL
                                                        $S_282 : {
                                                        // NORMAL
                                                            var var34 = local_4_INT; // type is INT value type is INT
                                                            if (var34 < 0 || var34 > 2) {
                                                             __label__ = 422;
                                                            break $S_282;
                                                            }
                                                            switch(var34 - 0) {
                                                             case 0:
                                                                 __label__ = 312;
                                                            break $S_282;
                                                             case 1:
                                                                 __label__ = 342;
                                                            break $S_282;
                                                             case 2:
                                                                 __label__ = 382;
                                                            break $S_282;
                                                            }
                                                            throw 'Illegal jump target!';
                                                            }
                                                        for(;;) switch (__label__) {
                                                            case 382 :
                                                            // NORMAL
                                                                var var41 = bytecoder.newArray(3,null); // type is REFERENCE value type is REFERENCE
                                                                var var42 = args.jlObjectgetINT(args,0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3ee82c08
                                                                var41.data[0] = var42;
                                                                var var43 = args.jlObjectgetINT(args,1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3faa30a9
                                                                var41.data[1] = var43;
                                                                var var44 = args.jlObjectgetINT(args,2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5b9c1a70
                                                                var41.data[2] = var44;
                                                                var var45 = jlString.jlStringformatjlStringA1jlObject(bytecoder.stringpool[82],var41); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@360f6176
                                                                return var45;
                                                            case 342 :
                                                            // NORMAL
                                                                var var52 = bytecoder.newArray(3,null); // type is REFERENCE value type is REFERENCE
                                                                var var53 = args.jlObjectgetINT(args,0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@497883d3
                                                                var52.data[0] = var53;
                                                                var var54 = args.jlObjectgetINT(args,1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2739cd2d
                                                                var52.data[1] = var54;
                                                                var var55 = args.jlObjectgetINT(args,2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1ccd0c20
                                                                var52.data[2] = var55;
                                                                var var56 = jlString.jlStringformatjlStringA1jlObject(bytecoder.stringpool[83],var52); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5184da1e
                                                                return var56;
                                                            case 422 :
                                                            // NORMAL
                                                                var var35 = bytecoder.newArray(2,null); // type is REFERENCE value type is REFERENCE
                                                                var35.data[0] = checkKind;
                                                                var35.data[1] = args;
                                                                var var36 = jlString.jlStringformatjlStringA1jlObject(bytecoder.stringpool[84],var35); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5cefade6
                                                                return var36;
                                                            case 312 :
                                                            // NORMAL
                                                                var var46 = bytecoder.newArray(2,null); // type is REFERENCE value type is REFERENCE
                                                                var var47 = args.jlObjectgetINT(args,0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@35d653f3
                                                                var46.data[0] = var47;
                                                                var var48 = args.jlObjectgetINT(args,1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@410ef565
                                                                var46.data[1] = var48;
                                                                var var49 = jlString.jlStringformatjlStringA1jlObject(bytecoder.stringpool[85],var46); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@362d8370
                                                                return var49;
                                                        }
                                                    case 270 :
                                                    // NORMAL
                                                        $S_270 : {
                                                        // NORMAL
                                                            var var28 = local_3_REFERENCE.BOOLEANequalsjlObject(local_3_REFERENCE,bytecoder.stringpool[81]); // type is BOOLEAN value type is BOOLEAN
                                                            if ((var28 == 0)) {
                                                                __label__ = 282;
                                                                continue $M_240_270_282_255;
                                                            }
                                                            }
                                                        local_4_INT = 2; // type is INT value type is INT
                                                        __label__ = 282;
                                                        continue $M_240_270_282_255;
                                                    case 240 :
                                                    // NORMAL
                                                        $S_240 : {
                                                        // NORMAL
                                                            var var26 = local_3_REFERENCE.BOOLEANequalsjlObject(local_3_REFERENCE,bytecoder.stringpool[79]); // type is BOOLEAN value type is BOOLEAN
                                                            if ((var26 == 0)) {
                                                                __label__ = 282;
                                                                continue $M_240_270_282_255;
                                                            }
                                                            }
                                                        local_4_INT = 0; // type is INT value type is INT
                                                        __label__ = 282;
                                                        continue $M_240_270_282_255;
                                                    case 255 :
                                                    // NORMAL
                                                        $S_255 : {
                                                        // NORMAL
                                                            var var31 = local_3_REFERENCE.BOOLEANequalsjlObject(local_3_REFERENCE,bytecoder.stringpool[86]); // type is BOOLEAN value type is BOOLEAN
                                                            if ((var31 == 0)) {
                                                                __label__ = 282;
                                                                continue $M_240_270_282_255;
                                                            }
                                                            }
                                                        local_4_INT = 1; // type is INT value type is INT
                                                        __label__ = 282;
                                                        continue $M_240_270_282_255;
                                                }
                                            case 172 :
                                            // NORMAL
                                                local_2_INT = 2; // type is INT value type is INT
                                                __label__ = 182;
                                                continue $M_182_177_172;
                                        }
                                    case 115 :
                                    // NORMAL
                                        $S_115 : {
                                        // NORMAL
                                            var var8 = local_3_REFERENCE.BOOLEANequalsjlObject(local_3_REFERENCE,bytecoder.stringpool[86]); // type is BOOLEAN value type is BOOLEAN
                                            if ((var8 == 0)) {
                                                __label__ = 142;
                                                continue $M_100_115_130_142;
                                            }
                                            }
                                        local_4_INT = 1; // type is INT value type is INT
                                        __label__ = 142;
                                        continue $M_100_115_130_142;
                                    case 100 :
                                    // NORMAL
                                        $S_100 : {
                                        // NORMAL
                                            var var14 = local_3_REFERENCE.BOOLEANequalsjlObject(local_3_REFERENCE,bytecoder.stringpool[79]); // type is BOOLEAN value type is BOOLEAN
                                            if ((var14 == 0)) {
                                                __label__ = 142;
                                                continue $M_100_115_130_142;
                                            }
                                            }
                                        local_4_INT = 0; // type is INT value type is INT
                                        __label__ = 142;
                                        continue $M_100_115_130_142;
                                }
                        }
                    case 22 :
                    // NORMAL
                        var var39 = bytecoder.newArray(1,null); // type is REFERENCE value type is REFERENCE
                        var39.data[0] = args;
                        var var40 = jlString.jlStringformatjlStringA1jlObject(bytecoder.stringpool[80],var39); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@178c98ce
                        return var40;
                }
            case 4 :
            // NORMAL
                $S_4 : {
                // NORMAL
                    if (args != null ) {
                        __label__ = 18;
                        continue $M_4_18;
                    }
                    }
                var var51 = jlString.jlStringformatjlStringA1jlObject(bytecoder.stringpool[87],bytecoder.newArray(0,null)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@10421807
                return var51;
        }
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    classInitCheck : function() {
        if (!jiuPreconditions.__initialized) {
            jiuPreconditions.__initialized = true;
            var thePrototype = jiuPreconditions.Create.prototype;
            thePrototype.instanceOf = jiuPreconditions.instanceOf;
            thePrototype.ClassgetClass = jiuPreconditions.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var jufBiFunction = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 240,
    __implementedTypes : [240,1],


    classInitCheck : function() {
        if (!jufBiFunction.__initialized) {
            jufBiFunction.__initialized = true;
            jlObject.classInitCheck();
        }
    },

};

var juImmutableCollections = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 241,
    __implementedTypes : [241,1],
    SALT : 0, // declared in java.util.ImmutableCollections

    Create : function() {
    },

    instanceOf : function(aType) {
        return juImmutableCollections.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return juImmutableCollections;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var __label__ = null;
        var var0 = jlSystem.LONGnanoTime(); // type is LONG value type is LONG
        var local_0_LONG = var0; // type is LONG value type is LONG
        var var7 = Math.floor(((local_0_LONG >>> 32) ^ local_0_LONG)); // type is INT value type is INT
        juImmutableCollections.SALT = var7;
        return;
    },

    juListemptyList : function() {
        var __label__ = null;
        return juImmutableCollections$ListN.EMPTY_LIST;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    jlUnsupportedOperationExceptionuoe : function() {
        var __label__ = null;
        var var0 = new jlUnsupportedOperationException.Create(); // type is REFERENCE value type is REFERENCE
        jlUnsupportedOperationException.VOIDinit(var0);
        return var0;
    },

    classInitCheck : function() {
        if (!juImmutableCollections.__initialized) {
            juImmutableCollections.__initialized = true;
            var thePrototype = juImmutableCollections.Create.prototype;
            thePrototype.instanceOf = juImmutableCollections.instanceOf;
            thePrototype.ClassgetClass = juImmutableCollections.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            jlSystem.classInitCheck();
            juImmutableCollections.VOIDclinit();
        }
    },

};

var juImmutableCollections$ListN = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 242,
    __implementedTypes : [242,177,243,174,176,244,175,2,173,1],
    EMPTY_LIST : null, // declared in java.util.ImmutableCollections$ListN

    Create : function() {
        this.elements = null; // declared in java.util.ImmutableCollections$ListN
    },

    instanceOf : function(aType) {
        return juImmutableCollections$ListN.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return juImmutableCollections$ListN;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    A1jlObjectfinishToArrayA1jlObjectjuIterator : function(p0,p1) {
         return juAbstractCollection.A1jlObjectfinishToArrayA1jlObjectjuIterator(p0,p1);
    },

    INThugeCapacityINT : function(p0) {
         return juAbstractCollection.INThugeCapacityINT(p0);
    },

    juListofA1jlObject : function(p0) {
         return juList.juListofA1jlObject(p0);
    },

    VOIDclinit : function() {
        var __label__ = null;
        var var0 = new juImmutableCollections$ListN.Create(); // type is REFERENCE value type is REFERENCE
        juImmutableCollections$ListN.VOIDinitA1jlObject(var0,bytecoder.newArray(0,null));
        juImmutableCollections$ListN.EMPTY_LIST = var0;
        return;
    },

    VOIDinitA1jlObject : function(thisRef,input) {
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_3_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            juImmutableCollections$AbstractImmutableList.VOIDinit(thisRef);
            local_2_REFERENCE = bytecoder.newArray(input.data.length,null); // type is REFERENCE value type is REFERENCE
            local_3_INT = 0; // type is INT value type is INT
            __label__ = 12;
            }
        $L_12 : for (;;) {
            $S_12 : {
            // NORMAL
                var var5 = local_3_INT; // type is INT value type is INT
                var var6 = input.data.length; // type is INT value type is INT
                if ((var5 >= var6)) {
                    __label__ = 33;
                    break $S_12;
                }
                __label__ = 18;
                }
            for(;;) switch (__label__) {
                case 33 :
                // NORMAL
                    var var7 = local_2_REFERENCE; // type is REFERENCE value type is REFERENCE
                    thisRef.elements = var7;
                    return;
                case 18 :
                // NORMAL
                    var var8 = local_2_REFERENCE; // type is REFERENCE value type is REFERENCE
                    var var9 = local_3_INT; // type is INT value type is INT
                    var var11 = input.data[local_3_INT]; // type is REFERENCE value type is REFERENCE
                    var var12 = juObjects.jlObjectrequireNonNulljlObject(var11); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@31edb4f4
                    var8.data[var9] = var12;
                    local_3_INT = (local_3_INT + 1); // type is INT value type is INT
                    __label__ = 12;
                    continue $L_12;
            }
        }
    },

    INTsize : function(thisRef) {
        var __label__ = null;
        return thisRef.elements.data.length;
    },

    jlObjectgetINT : function(thisRef,index) {
        var __label__ = null;
        var var1 = thisRef.elements.data[index]; // type is REFERENCE value type is REFERENCE
        return var1;
    },

    classInitCheck : function() {
        if (!juImmutableCollections$ListN.__initialized) {
            juImmutableCollections$ListN.__initialized = true;
            var thePrototype = juImmutableCollections$ListN.Create.prototype;
            thePrototype.instanceOf = juImmutableCollections$ListN.instanceOf;
            thePrototype.ClassgetClass = juImmutableCollections$ListN.ClassgetClass;
            thePrototype.jlObjectgetINT = juImmutableCollections$ListN.jlObjectgetINT;
            thePrototype.INTsize = juImmutableCollections$ListN.INTsize;
            thePrototype.jlIndexOutOfBoundsExceptionoutOfBoundsINT = juImmutableCollections$AbstractImmutableList.jlIndexOutOfBoundsExceptionoutOfBoundsINT;
            thePrototype.juListIteratorlistIteratorINT = juImmutableCollections$AbstractImmutableList.juListIteratorlistIteratorINT;
            thePrototype.juListIteratorlistIterator = juImmutableCollections$AbstractImmutableList.juListIteratorlistIterator;
            thePrototype.INTindexOfjlObject = juImmutableCollections$AbstractImmutableList.INTindexOfjlObject;
            thePrototype.BOOLEANcontainsjlObject = juImmutableCollections$AbstractImmutableList.BOOLEANcontainsjlObject;
            thePrototype.juIteratoriterator = juImmutableCollections$AbstractImmutableList.juIteratoriterator;
            thePrototype.BOOLEANequalsjlObject = juImmutableCollections$AbstractImmutableList.BOOLEANequalsjlObject;
            thePrototype.INThashCode = juImmutableCollections$AbstractImmutableList.INThashCode;
            thePrototype.BOOLEANcontainsAlljuCollection = juAbstractCollection.BOOLEANcontainsAlljuCollection;
            thePrototype.A1jlObjecttoArrayA1jlObject = juAbstractCollection.A1jlObjecttoArrayA1jlObject;
            thePrototype.jlStringtoString = juAbstractCollection.jlStringtoString;
            juImmutableCollections$AbstractImmutableList.classInitCheck();
            juRandomAccess.classInitCheck();
            juCollection.classInitCheck();
            juList.classInitCheck();
            juImmutableCollections$AbstractImmutableCollection.classInitCheck();
            jlIterable.classInitCheck();
            jiSerializable.classInitCheck();
            juAbstractCollection.classInitCheck();
            jlObject.classInitCheck();
            juImmutableCollections$ListN.VOIDclinit();
        }
    },

};

var juImmutableCollections$AbstractImmutableList = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 243,
    __implementedTypes : [177,243,174,176,244,175,173,1],

    instanceOf : function(aType) {
        return juImmutableCollections$AbstractImmutableList.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return juImmutableCollections$AbstractImmutableList;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    A1jlObjectfinishToArrayA1jlObjectjuIterator : function(p0,p1) {
         return juAbstractCollection.A1jlObjectfinishToArrayA1jlObjectjuIterator(p0,p1);
    },

    INThugeCapacityINT : function(p0) {
         return juAbstractCollection.INThugeCapacityINT(p0);
    },

    juListofA1jlObject : function(p0) {
         return juList.juListofA1jlObject(p0);
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        juImmutableCollections$AbstractImmutableCollection.VOIDinit(thisRef);
        return;
    },

    INThashCode : function(thisRef) {
        var local_2_INT = null; // type is INT # of inits = 3
        var local_1_INT = null; // type is INT # of inits = 3
        var local_3_INT = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_1_INT = 1; // type is INT value type is INT
            local_2_INT = 0; // type is INT value type is INT
            var var4 = thisRef.INTsize(thisRef); // type is INT value type is INT
            local_3_INT = var4; // type is INT value type is INT
            __label__ = 9;
            }
        $L_9 : for (;;) {
            $S_9 : {
            // NORMAL
                var var7 = local_2_INT; // type is INT value type is INT
                var var8 = local_3_INT; // type is INT value type is INT
                if ((var7 >= var8)) {
                    return local_1_INT;
                }
                }
            var var10 = (31 * local_1_INT); // type is INT value type is INT
            var var12 = thisRef.jlObjectgetINT(thisRef,local_2_INT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3348a90
            var var13 = var12.INThashCode(var12); // type is INT value type is INT
            local_1_INT = (var10 + var13); // type is INT value type is INT
            local_2_INT = (local_2_INT + 1); // type is INT value type is INT
            __label__ = 9;
            continue $L_9;
        }
    },

    BOOLEANequalsjlObject : function(thisRef,o) {
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_4_INT = null; // type is INT # of inits = 2
        var local_3_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((o != thisRef)) {
                break $S_0;
            }
            return 1;
            }
        $S_7 : {
        // NORMAL
            var var0 = (o == null ? false : o.instanceOf(juList)); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                break $S_7;
            }
            return 0;
            }
        $S_16 : {
        // NORMAL
            var var1 = o.juIteratoriterator(o); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@385b5edb
            local_2_REFERENCE = var1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6d90af91
            local_3_INT = 0; // type is INT value type is INT
            var var5 = thisRef.INTsize(thisRef); // type is INT value type is INT
            local_4_INT = var5; // type is INT value type is INT
            __label__ = 34;
            }
        $L_34 : for (;;) {
            $S_34 : {
            // NORMAL
                var var8 = local_3_INT; // type is INT value type is INT
                var var9 = local_4_INT; // type is INT value type is INT
                if ((var8 >= var9)) {
                    __label__ = 74;
                    break $S_34;
                }
                __label__ = 40;
                }
            for(;;) switch (__label__) {
                case 40 :
                // NORMAL
                    $S_40 : {
                    // NORMAL
                        var var11 = local_2_REFERENCE.BOOLEANhasNext(local_2_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                        if ((var11 == 0)) {
                            return 0;
                        }
                        }
                    $S_49 : {
                    // NORMAL
                        var var13 = thisRef.jlObjectgetINT(thisRef,local_3_INT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@522a019c
                        var var15 = local_2_REFERENCE.jlObjectnext(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4e09c49
                        var var16 = var13.BOOLEANequalsjlObject(var13,var15); // type is BOOLEAN value type is BOOLEAN
                        if ((var16 != 0)) {
                            break $S_49;
                        }
                        return 0;
                        }
                    local_3_INT = (local_3_INT + 1); // type is INT value type is INT
                    __label__ = 34;
                    continue $L_34;
                case 74 :
                // NORMAL
                    $S_74 : {
                    // NORMAL
                        var var18 = local_2_REFERENCE.BOOLEANhasNext(local_2_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                        if ((var18 != 0)) {
                            __label__ = 87;
                            break $S_74;
                        }
                        __label__ = 83;
                        }
                    for(;;) switch (__label__) {
                        case 83 :
                        // NORMAL
                            var var19 = 1; // type is INT value type is INT
                            return var19;
                        case 87 :
                        // NORMAL
                            var var19 = 0; // type is INT value type is INT
                            return var19;
                    }
            }
        }
    },

    juIteratoriterator : function(thisRef) {
        var __label__ = null;
        var var0 = new juImmutableCollections$ListItr.Create(); // type is REFERENCE value type is REFERENCE
        var var1 = thisRef.INTsize(thisRef); // type is INT value type is INT
        juImmutableCollections$ListItr.VOIDinitjuListINT(var0,thisRef,var1);
        return var0;
    },

    BOOLEANcontainsjlObject : function(thisRef,o) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.INTindexOfjlObject(thisRef,o); // type is INT value type is INT
            if ((var0 < 0)) {
                __label__ = 12;
                break $S_0;
            }
            __label__ = 8;
            }
        for(;;) switch (__label__) {
            case 8 :
            // NORMAL
                var var1 = 1; // type is INT value type is INT
                return var1;
            case 12 :
            // NORMAL
                var var1 = 0; // type is INT value type is INT
                return var1;
        }
    },

    INTindexOfjlObject : function(thisRef,o) {
        var local_3_INT = null; // type is INT # of inits = 2
        var local_2_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = juObjects.jlObjectrequireNonNulljlObject(o); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3335fdf0
            local_2_INT = 0; // type is INT value type is INT
            var var3 = thisRef.INTsize(thisRef); // type is INT value type is INT
            local_3_INT = var3; // type is INT value type is INT
            __label__ = 12;
            }
        $L_12 : for (;;) {
            $S_12 : {
            // NORMAL
                var var6 = local_2_INT; // type is INT value type is INT
                var var7 = local_3_INT; // type is INT value type is INT
                if ((var6 >= var7)) {
                    return -1;
                }
                }
            $S_17 : {
            // NORMAL
                var var9 = thisRef.jlObjectgetINT(thisRef,local_2_INT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1dc3a9d6
                var var10 = o.BOOLEANequalsjlObject(o,var9); // type is BOOLEAN value type is BOOLEAN
                if ((var10 == 0)) {
                    break $S_17;
                }
                return local_2_INT;
                }
            local_2_INT = (local_2_INT + 1); // type is INT value type is INT
            __label__ = 12;
            continue $L_12;
        }
    },

    juListIteratorlistIterator : function(thisRef) {
        var __label__ = null;
        var var0 = thisRef.juListIteratorlistIteratorINT(thisRef,0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@20f3b472
        return var0;
    },

    juListIteratorlistIteratorINT : function(thisRef,index) {
        var local_2_INT = null; // type is INT # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.INTsize(thisRef); // type is INT value type is INT
            local_2_INT = var0; // type is INT value type is INT
            if ((index < 0)) {
                __label__ = 14;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_9_14 : for(;;) switch (__label__) {
            case 9 :
            // NORMAL
                $S_9 : {
                // NORMAL
                    var var3 = local_2_INT; // type is INT value type is INT
                    if ((index <= var3)) {
                        break $S_9;
                    }
                    __label__ = 14;
                    continue $M_9_14;
                    }
                var var4 = new juImmutableCollections$ListItr.Create(); // type is REFERENCE value type is REFERENCE
                juImmutableCollections$ListItr.VOIDinitjuListINTINT(var4,thisRef,local_2_INT,index);
                return var4;
            case 14 :
            // NORMAL
                var var6 = thisRef.jlIndexOutOfBoundsExceptionoutOfBoundsINT(thisRef,index); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@673826c1
                throw var6;
        }
    },

    jlIndexOutOfBoundsExceptionoutOfBoundsINT : function(thisRef,index) {
        var __label__ = null;
        var var0 = new jlIndexOutOfBoundsException.Create(); // type is REFERENCE value type is REFERENCE
        var var1 = new jlStringBuilder.Create(); // type is REFERENCE value type is REFERENCE
        jlStringBuilder.VOIDinit(var1);
        var var2 = var1.jlStringBuilderappendjlString(var1,bytecoder.stringpool[60]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7fbbd17c
        var var3 = var2.jlStringBuilderappendINT(var2,index); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@651a790c
        var var4 = var3.jlStringBuilderappendjlString(var3,bytecoder.stringpool[88]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4c62eb60
        var var5 = thisRef.INTsize(thisRef); // type is INT value type is INT
        var var6 = var4.jlStringBuilderappendINT(var4,var5); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@235c855
        var var7 = var6.jlStringtoString(var6); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@23a4d95e
        jlIndexOutOfBoundsException.VOIDinitjlString(var0,var7);
        return var0;
    },

    classInitCheck : function() {
        if (!juImmutableCollections$AbstractImmutableList.__initialized) {
            juImmutableCollections$AbstractImmutableList.__initialized = true;
            juImmutableCollections$AbstractImmutableCollection.classInitCheck();
            juRandomAccess.classInitCheck();
            juCollection.classInitCheck();
            juList.classInitCheck();
            jlIterable.classInitCheck();
            juAbstractCollection.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var juImmutableCollections$AbstractImmutableCollection = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 244,
    __implementedTypes : [174,244,175,173,1],

    instanceOf : function(aType) {
        return juImmutableCollections$AbstractImmutableCollection.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return juImmutableCollections$AbstractImmutableCollection;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    A1jlObjectfinishToArrayA1jlObjectjuIterator : function(p0,p1) {
         return juAbstractCollection.A1jlObjectfinishToArrayA1jlObjectjuIterator(p0,p1);
    },

    INThugeCapacityINT : function(p0) {
         return juAbstractCollection.INThugeCapacityINT(p0);
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        juAbstractCollection.VOIDinit(thisRef);
        return;
    },

    classInitCheck : function() {
        if (!juImmutableCollections$AbstractImmutableCollection.__initialized) {
            juImmutableCollections$AbstractImmutableCollection.__initialized = true;
            juAbstractCollection.classInitCheck();
            juCollection.classInitCheck();
            jlIterable.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var juImmutableCollections$List12 = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 245,
    __implementedTypes : [245,177,243,174,176,244,175,2,173,1],

    Create : function() {
        this.e0 = null; // declared in java.util.ImmutableCollections$List12
        this.e1 = null; // declared in java.util.ImmutableCollections$List12
    },

    instanceOf : function(aType) {
        return juImmutableCollections$List12.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return juImmutableCollections$List12;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    A1jlObjectfinishToArrayA1jlObjectjuIterator : function(p0,p1) {
         return juAbstractCollection.A1jlObjectfinishToArrayA1jlObjectjuIterator(p0,p1);
    },

    INThugeCapacityINT : function(p0) {
         return juAbstractCollection.INThugeCapacityINT(p0);
    },

    juListofA1jlObject : function(p0) {
         return juList.juListofA1jlObject(p0);
    },

    VOIDinitjlObject : function(thisRef,e0) {
        var __label__ = null;
        juImmutableCollections$AbstractImmutableList.VOIDinit(thisRef);
        var var0 = juObjects.jlObjectrequireNonNulljlObject(e0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@755106a3
        thisRef.e0 = var0;
        thisRef.e1 = null;
        return;
    },

    VOIDinitjlObjectjlObject : function(thisRef,e0,e1) {
        var __label__ = null;
        juImmutableCollections$AbstractImmutableList.VOIDinit(thisRef);
        var var0 = juObjects.jlObjectrequireNonNulljlObject(e0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@23fd6ba0
        thisRef.e0 = var0;
        var var1 = juObjects.jlObjectrequireNonNulljlObject(e1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2eef6134
        thisRef.e1 = var1;
        return;
    },

    INTsize : function(thisRef) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.e1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@11faa487
            if (var0 == null ) {
                __label__ = 11;
                break $S_0;
            }
            __label__ = 7;
            }
        for(;;) switch (__label__) {
            case 7 :
            // NORMAL
                var var1 = 2; // type is INT value type is INT
                return var1;
            case 11 :
            // NORMAL
                var var1 = 1; // type is INT value type is INT
                return var1;
        }
    },

    jlObjectgetINT : function(thisRef,index) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((index != 0)) {
                break $S_0;
            }
            return thisRef.e0;
            }
        $S_9 : {
        // NORMAL
            if ((index != 1)) {
                __label__ = 26;
                break $S_9;
            }
            __label__ = 14;
            }
        $M_26_14 : for(;;) switch (__label__) {
            case 26 :
            // NORMAL
                var var1 = thisRef.jlIndexOutOfBoundsExceptionoutOfBoundsINT(thisRef,index); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1a6cc67c
                throw var1;
            case 14 :
            // NORMAL
                var var0 = thisRef.e1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@639163b4
                if (var0 == null ) {
                    __label__ = 26;
                    continue $M_26_14;
                }
                return thisRef.e1;
        }
    },

    classInitCheck : function() {
        if (!juImmutableCollections$List12.__initialized) {
            juImmutableCollections$List12.__initialized = true;
            var thePrototype = juImmutableCollections$List12.Create.prototype;
            thePrototype.instanceOf = juImmutableCollections$List12.instanceOf;
            thePrototype.ClassgetClass = juImmutableCollections$List12.ClassgetClass;
            thePrototype.jlObjectgetINT = juImmutableCollections$List12.jlObjectgetINT;
            thePrototype.INTsize = juImmutableCollections$List12.INTsize;
            thePrototype.jlIndexOutOfBoundsExceptionoutOfBoundsINT = juImmutableCollections$AbstractImmutableList.jlIndexOutOfBoundsExceptionoutOfBoundsINT;
            thePrototype.juListIteratorlistIteratorINT = juImmutableCollections$AbstractImmutableList.juListIteratorlistIteratorINT;
            thePrototype.juListIteratorlistIterator = juImmutableCollections$AbstractImmutableList.juListIteratorlistIterator;
            thePrototype.INTindexOfjlObject = juImmutableCollections$AbstractImmutableList.INTindexOfjlObject;
            thePrototype.BOOLEANcontainsjlObject = juImmutableCollections$AbstractImmutableList.BOOLEANcontainsjlObject;
            thePrototype.juIteratoriterator = juImmutableCollections$AbstractImmutableList.juIteratoriterator;
            thePrototype.BOOLEANequalsjlObject = juImmutableCollections$AbstractImmutableList.BOOLEANequalsjlObject;
            thePrototype.INThashCode = juImmutableCollections$AbstractImmutableList.INThashCode;
            thePrototype.BOOLEANcontainsAlljuCollection = juAbstractCollection.BOOLEANcontainsAlljuCollection;
            thePrototype.A1jlObjecttoArrayA1jlObject = juAbstractCollection.A1jlObjecttoArrayA1jlObject;
            thePrototype.jlStringtoString = juAbstractCollection.jlStringtoString;
            juImmutableCollections$AbstractImmutableList.classInitCheck();
            juRandomAccess.classInitCheck();
            juCollection.classInitCheck();
            juList.classInitCheck();
            juImmutableCollections$AbstractImmutableCollection.classInitCheck();
            jlIterable.classInitCheck();
            jiSerializable.classInitCheck();
            juAbstractCollection.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var juImmutableCollections$ListItr = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 246,
    __implementedTypes : [246,227,208,1],

    Create : function() {
        this.list = null; // declared in java.util.ImmutableCollections$ListItr
        this.size = 0; // declared in java.util.ImmutableCollections$ListItr
        this.cursor = 0; // declared in java.util.ImmutableCollections$ListItr
        this.isListIterator = false; // declared in java.util.ImmutableCollections$ListItr
    },

    instanceOf : function(aType) {
        return juImmutableCollections$ListItr.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return juImmutableCollections$ListItr;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitjuListINT : function(thisRef,list,size) {
        var __label__ = null;
        thisRef.list = list;
        thisRef.size = size;
        thisRef.cursor = 0;
        thisRef.isListIterator = 0;
        return;
    },

    VOIDinitjuListINTINT : function(thisRef,list,size,index) {
        var __label__ = null;
        thisRef.list = list;
        thisRef.size = size;
        thisRef.cursor = index;
        thisRef.isListIterator = 1;
        return;
    },

    BOOLEANhasNext : function(thisRef) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.cursor; // type is INT value type is INT
            var var1 = thisRef.size; // type is INT value type is INT
            if ((var0 == var1)) {
                __label__ = 15;
                break $S_0;
            }
            __label__ = 11;
            }
        for(;;) switch (__label__) {
            case 11 :
            // NORMAL
                var var2 = 1; // type is INT value type is INT
                return var2;
            case 15 :
            // NORMAL
                var var2 = 0; // type is INT value type is INT
                return var2;
        }
    },

    jlObjectnext : function(thisRef) {
        var __label__ = null;
        try {
            var local_1_INT = thisRef.cursor; // type is INT value type is INT
            var var5 = thisRef.list.jlObjectgetINT(thisRef.list,local_1_INT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@74c09e1e
            var local_2_REFERENCE = var5; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@433011dd
            var var8 = (local_1_INT + 1); // type is INT value type is INT
            thisRef.cursor = var8;
            return local_2_REFERENCE;
        } catch (e) {
            dmbcExceptionManager.VOIDpushjlThrowable(e);
            if (e.instanceOf(jlIndexOutOfBoundsException)) {
                __label__ = 25;
            } else {
                throw dmbcExceptionManager.jlThrowablepop();
            }
        }
        var local_0_REFERENCE = thisRef; // type is REFERENCE value type is REFERENCE
        var var11 = dmbcExceptionManager.jlThrowablepop(); // type is REFERENCE value type is REFERENCE
        var local_1_REFERENCE = var11; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@a938ee
        var var13 = new juNoSuchElementException.Create(); // type is REFERENCE value type is REFERENCE
        juNoSuchElementException.VOIDinit(var13);
        throw var13;
    },

    INTpreviousIndex : function(thisRef) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.isListIterator; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                return (thisRef.cursor - 1);
            }
            }
        var var1 = juImmutableCollections.jlUnsupportedOperationExceptionuoe(); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@68fc092a
        throw var1;
    },

    classInitCheck : function() {
        if (!juImmutableCollections$ListItr.__initialized) {
            juImmutableCollections$ListItr.__initialized = true;
            var thePrototype = juImmutableCollections$ListItr.Create.prototype;
            thePrototype.instanceOf = juImmutableCollections$ListItr.instanceOf;
            thePrototype.ClassgetClass = juImmutableCollections$ListItr.ClassgetClass;
            thePrototype.INTpreviousIndex = juImmutableCollections$ListItr.INTpreviousIndex;
            thePrototype.jlObjectnext = juImmutableCollections$ListItr.jlObjectnext;
            thePrototype.BOOLEANhasNext = juImmutableCollections$ListItr.BOOLEANhasNext;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            juListIterator.classInitCheck();
            juIterator.classInitCheck();
        }
    },

};

var dmbcGlobals = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 247,
    __implementedTypes : [247,1],

    Create : function() {
    },

    instanceOf : function(aType) {
        return dmbcGlobals.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return dmbcGlobals;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    classInitCheck : function() {
        if (!dmbcGlobals.__initialized) {
            dmbcGlobals.__initialized = true;
            var thePrototype = dmbcGlobals.Create.prototype;
            thePrototype.instanceOf = dmbcGlobals.instanceOf;
            thePrototype.ClassgetClass = dmbcGlobals.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var dmbcExceptionManager = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 248,
    __implementedTypes : [1,248],
    exceptions : null, // declared in de.mirkosertic.bytecoder.classlib.ExceptionManager

    Create : function() {
    },

    instanceOf : function(aType) {
        return dmbcExceptionManager.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return dmbcExceptionManager;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var __label__ = null;
        var var0 = new juStack.Create(); // type is REFERENCE value type is REFERENCE
        juStack.VOIDinit(var0);
        dmbcExceptionManager.exceptions = var0;
        return;
    },

    VOIDpushjlThrowable : function(t) {
        var __label__ = null;
        var var1 = dmbcExceptionManager.exceptions.jlObjectpushjlObject(dmbcExceptionManager.exceptions,t); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@20509001
        return;
    },

    jlThrowablepop : function() {
        var __label__ = null;
        var var1 = dmbcExceptionManager.exceptions.jlObjectpop(dmbcExceptionManager.exceptions); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@289c0676
        return var1;
    },

    jlThrowablelastExceptionOrNull : function() {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var1 = dmbcExceptionManager.exceptions.BOOLEANisEmpty(dmbcExceptionManager.exceptions); // type is BOOLEAN value type is BOOLEAN
            if ((var1 == 0)) {
                break $S_0;
            }
            return null;
            }
        var var3 = dmbcExceptionManager.exceptions.jlObjectpop(dmbcExceptionManager.exceptions); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7aef756f
        return var3;
    },

    classInitCheck : function() {
        if (!dmbcExceptionManager.__initialized) {
            dmbcExceptionManager.__initialized = true;
            var thePrototype = dmbcExceptionManager.Create.prototype;
            thePrototype.instanceOf = dmbcExceptionManager.instanceOf;
            thePrototype.ClassgetClass = dmbcExceptionManager.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            juStack.classInitCheck();
            dmbcExceptionManager.VOIDclinit();
        }
    },

};

var juStack = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 249,
    __implementedTypes : [177,23,249,174,176,175,2,172,173,250,1],

    Create : function() {
        this.modCount = 0; // declared in java.util.AbstractList
        this.elementData = null; // declared in java.util.Vector
        this.capacityIncrement = 0; // declared in java.util.Vector
        this.elementCount = 0; // declared in java.util.Vector
    },

    instanceOf : function(aType) {
        return juStack.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return juStack;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    A1jlObjectfinishToArrayA1jlObjectjuIterator : function(p0,p1) {
         return juAbstractCollection.A1jlObjectfinishToArrayA1jlObjectjuIterator(p0,p1);
    },

    INThugeCapacityINT : function(p0) {
         return juAbstractCollection.INThugeCapacityINT(p0);
    },

    juListofA1jlObject : function(p0) {
         return juList.juListofA1jlObject(p0);
    },

    INThugeCapacityINT : function(p0) {
         return juVector.INThugeCapacityINT(p0);
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        juVector.VOIDinit(thisRef);
        return;
    },

    jlObjectpushjlObject : function(thisRef,item) {
        var __label__ = null;
        thisRef.VOIDaddElementjlObject(thisRef,item);
        return item;
    },

    jlObjectpop : function(thisRef) {
        var __label__ = null;
        var var0 = thisRef.INTsize(thisRef); // type is INT value type is INT
        var local_2_INT = var0; // type is INT value type is INT
        var var3 = thisRef.jlObjectpeek(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7ddedc4b
        var local_1_REFERENCE = var3; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@79be5535
        thisRef.VOIDremoveElementAtINT(thisRef,(local_2_INT - 1));
        return local_1_REFERENCE;
    },

    jlObjectpeek : function(thisRef) {
        var local_1_INT = null; // type is INT # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.INTsize(thisRef); // type is INT value type is INT
            local_1_INT = var0; // type is INT value type is INT
            var var3 = local_1_INT; // type is INT value type is INT
            if ((var3 != 0)) {
                __label__ = 17;
                break $S_0;
            }
            __label__ = 9;
            }
        for(;;) switch (__label__) {
            case 17 :
            // NORMAL
                var var7 = thisRef.jlObjectelementAtINT(thisRef,(local_1_INT - 1)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6cbd1dce
                return var7;
            case 9 :
            // NORMAL
                var var4 = new juEmptyStackException.Create(); // type is REFERENCE value type is REFERENCE
                juEmptyStackException.VOIDinit(var4);
                throw var4;
        }
    },

    classInitCheck : function() {
        if (!juStack.__initialized) {
            juStack.__initialized = true;
            var thePrototype = juStack.Create.prototype;
            thePrototype.instanceOf = juStack.instanceOf;
            thePrototype.ClassgetClass = juStack.ClassgetClass;
            thePrototype.jlObjectpeek = juStack.jlObjectpeek;
            thePrototype.jlObjectpop = juStack.jlObjectpop;
            thePrototype.jlObjectpushjlObject = juStack.jlObjectpushjlObject;
            thePrototype.BOOLEANisEmpty = juVector.BOOLEANisEmpty;
            thePrototype.VOIDremoveElementAtINT = juVector.VOIDremoveElementAtINT;
            thePrototype.jlObjectelementDataINT = juVector.jlObjectelementDataINT;
            thePrototype.jlObjectelementAtINT = juVector.jlObjectelementAtINT;
            thePrototype.INTsize = juVector.INTsize;
            thePrototype.INTnewCapacityINT = juVector.INTnewCapacityINT;
            thePrototype.A1jlObjectgrowINT = juVector.A1jlObjectgrowINT;
            thePrototype.A1jlObjectgrow = juVector.A1jlObjectgrow;
            thePrototype.VOIDaddjlObjectA1jlObjectINT = juVector.VOIDaddjlObjectA1jlObjectINT;
            thePrototype.VOIDaddElementjlObject = juVector.VOIDaddElementjlObject;
            thePrototype.INTindexOfjlObject = juAbstractList.INTindexOfjlObject;
            thePrototype.jlStringoutOfBoundsMsgINT = juAbstractList.jlStringoutOfBoundsMsgINT;
            thePrototype.VOIDrangeCheckForAddINT = juAbstractList.VOIDrangeCheckForAddINT;
            thePrototype.juListIteratorlistIteratorINT = juAbstractList.juListIteratorlistIteratorINT;
            thePrototype.juListIteratorlistIterator = juAbstractList.juListIteratorlistIterator;
            thePrototype.BOOLEANequalsjlObject = juAbstractList.BOOLEANequalsjlObject;
            thePrototype.juIteratoriterator = juAbstractList.juIteratoriterator;
            thePrototype.INThashCode = juAbstractList.INThashCode;
            thePrototype.BOOLEANcontainsjlObject = juAbstractCollection.BOOLEANcontainsjlObject;
            thePrototype.BOOLEANcontainsAlljuCollection = juAbstractCollection.BOOLEANcontainsAlljuCollection;
            thePrototype.A1jlObjecttoArrayA1jlObject = juAbstractCollection.A1jlObjecttoArrayA1jlObject;
            thePrototype.jlStringtoString = juAbstractCollection.jlStringtoString;
            juVector.classInitCheck();
            juRandomAccess.classInitCheck();
            jlCloneable.classInitCheck();
            juCollection.classInitCheck();
            juList.classInitCheck();
            jlIterable.classInitCheck();
            jiSerializable.classInitCheck();
            juAbstractList.classInitCheck();
            juAbstractCollection.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var juVector = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 250,
    __implementedTypes : [177,23,174,176,175,2,172,173,250,1],

    Create : function() {
        this.modCount = 0; // declared in java.util.AbstractList
        this.elementData = null; // declared in java.util.Vector
        this.capacityIncrement = 0; // declared in java.util.Vector
        this.elementCount = 0; // declared in java.util.Vector
    },

    instanceOf : function(aType) {
        return juVector.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return juVector;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    A1jlObjectfinishToArrayA1jlObjectjuIterator : function(p0,p1) {
         return juAbstractCollection.A1jlObjectfinishToArrayA1jlObjectjuIterator(p0,p1);
    },

    INThugeCapacityINT : function(p0) {
         return juAbstractCollection.INThugeCapacityINT(p0);
    },

    juListofA1jlObject : function(p0) {
         return juList.juListofA1jlObject(p0);
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        juVector.VOIDinitINT(thisRef,10);
        return;
    },

    VOIDinitINT : function(thisRef,initialCapacity) {
        var __label__ = null;
        juVector.VOIDinitINTINT(thisRef,initialCapacity,0);
        return;
    },

    VOIDinitINTINT : function(thisRef,initialCapacity,capacityIncrement) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            juAbstractList.VOIDinit(thisRef);
            if ((initialCapacity >= 0)) {
                __label__ = 35;
                break $S_0;
            }
            __label__ = 8;
            }
        for(;;) switch (__label__) {
            case 35 :
            // NORMAL
                var var5 = bytecoder.newArray(initialCapacity,null); // type is REFERENCE value type is REFERENCE
                thisRef.elementData = var5;
                thisRef.capacityIncrement = capacityIncrement;
                return;
            case 8 :
            // NORMAL
                var var0 = new jlIllegalArgumentException.Create(); // type is REFERENCE value type is REFERENCE
                var var1 = new jlStringBuilder.Create(); // type is REFERENCE value type is REFERENCE
                jlStringBuilder.VOIDinit(var1);
                var var2 = var1.jlStringBuilderappendjlString(var1,bytecoder.stringpool[89]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@15ce1ece
                var var3 = var2.jlStringBuilderappendINT(var2,initialCapacity); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@239b054
                var var4 = var3.jlStringtoString(var3); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@48287706
                jlIllegalArgumentException.VOIDinitjlString(var0,var4);
                throw var0;
        }
    },

    VOIDaddElementjlObject : function(thisRef,obj) {
        var __label__ = null;
        var var1 = (thisRef.modCount + 1); // type is INT value type is INT
        thisRef.modCount = var1;
        thisRef.VOIDaddjlObjectA1jlObjectINT(thisRef,obj,thisRef.elementData,thisRef.elementCount);
        return;
    },

    VOIDaddjlObjectA1jlObjectINT : function(thisRef,e,elementData,s) {
        var var3 = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = elementData.data.length; // type is INT value type is INT
            if ((s != var0)) {
                var3 = elementData; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@6838e6bb
                __label__ = 11;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_11_6 : for(;;) switch (__label__) {
            case 11 :
            // NORMAL
                var var4 = var3; // type is REFERENCE value type is REFERENCE
                var4.data[s] = e;
                var var5 = (s + 1); // type is INT value type is INT
                thisRef.elementCount = var5;
                return;
            case 6 :
            // NORMAL
                var var1 = thisRef.A1jlObjectgrow(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@49dbfbf6
                var local_2_REFERENCE = var1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@42769421
                var3 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@42769421
                __label__ = 11;
                continue $M_11_6;
        }
    },

    A1jlObjectgrow : function(thisRef) {
        var __label__ = null;
        var var2 = thisRef.A1jlObjectgrowINT(thisRef,(thisRef.elementCount + 1)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@65837e5d
        return var2;
    },

    A1jlObjectgrowINT : function(thisRef,minCapacity) {
        var __label__ = null;
        var var0 = thisRef.elementData; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@171a41b
        var var1 = thisRef.INTnewCapacityINT(thisRef,minCapacity); // type is INT value type is INT
        var var2 = juArrays.A1jlObjectcopyOfA1jlObjectINT(var0,var1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@55948eec
        thisRef.elementData = var2;
        return var2;
    },

    INTnewCapacityINT : function(thisRef,minCapacity) {
        var var4 = null; // type is INT # of inits = 1
        var local_2_INT = null; // type is INT # of inits = 1
        var var8 = null; // type is INT # of inits = 2
        var local_3_INT = null; // type is INT # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_2_INT = thisRef.elementData.data.length; // type is INT value type is INT
            var4 = local_2_INT; // type is INT value type is INT
            var var5 = thisRef.capacityIncrement; // type is INT value type is INT
            if ((var5 <= 0)) {
                __label__ = 21;
                break $S_0;
            }
            __label__ = 14;
            }
        $M_21_14 : for(;;) switch (__label__) {
            case 21 :
            // NORMAL
                var8 = local_2_INT; // type is INT value type is INT
                break $M_21_14;
            case 14 :
            // NORMAL
                var8 = thisRef.capacityIncrement; // type is INT value type is INT
                break $M_21_14;
        }
        $S_22 : {
        // NORMAL
            local_3_INT = (var4 + var8); // type is INT value type is INT
            var var13 = (local_3_INT - minCapacity); // type is INT value type is INT
            if ((var13 > 0)) {
                __label__ = 44;
                break $S_22;
            }
            __label__ = 30;
            }
        for(;;) switch (__label__) {
            case 30 :
            // NORMAL
                $S_30 : {
                // NORMAL
                    if ((minCapacity >= 0)) {
                        return minCapacity;
                    }
                    }
                var var14 = new jlOutOfMemoryError.Create(); // type is REFERENCE value type is REFERENCE
                jlOutOfMemoryError.VOIDinit(var14);
                throw var14;
            case 44 :
            // NORMAL
                $S_44 : {
                // NORMAL
                    var var16 = (local_3_INT - 2147483639); // type is INT value type is INT
                    if ((var16 > 0)) {
                        __label__ = 55;
                        break $S_44;
                    }
                    __label__ = 51;
                    }
                for(;;) switch (__label__) {
                    case 51 :
                    // NORMAL
                        var var19 = local_3_INT; // type is INT value type is INT
                        return var19;
                    case 55 :
                    // NORMAL
                        var var17 = juVector.INThugeCapacityINT(minCapacity); // type is INT value type is INT
                        var var19 = var17; // type is INT value type is INT
                        return var19;
                }
        }
    },

    INThugeCapacityINT : function(minCapacity) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((minCapacity >= 0)) {
                __label__ = 12;
                break $S_0;
            }
            __label__ = 4;
            }
        for(;;) switch (__label__) {
            case 12 :
            // NORMAL
                $S_12 : {
                // NORMAL
                    if ((minCapacity <= 2147483639)) {
                        __label__ = 23;
                        break $S_12;
                    }
                    __label__ = 18;
                    }
                for(;;) switch (__label__) {
                    case 18 :
                    // NORMAL
                        var var0 = 2147483647; // type is INT value type is INT
                        return var0;
                    case 23 :
                    // NORMAL
                        var var0 = 2147483639; // type is INT value type is INT
                        return var0;
                }
            case 4 :
            // NORMAL
                var var1 = new jlOutOfMemoryError.Create(); // type is REFERENCE value type is REFERENCE
                jlOutOfMemoryError.VOIDinit(var1);
                throw var1;
        }
    },

    INTsize : function(thisRef) {
        var __label__ = null;
        return thisRef.elementCount;
    },

    jlObjectelementAtINT : function(thisRef,index) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.elementCount; // type is INT value type is INT
            if ((index < var0)) {
                __label__ = 42;
                break $S_0;
            }
            __label__ = 8;
            }
        for(;;) switch (__label__) {
            case 42 :
            // NORMAL
                var var1 = thisRef.jlObjectelementDataINT(thisRef,index); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@21f3ad16
                return var1;
            case 8 :
            // NORMAL
                var var2 = new jlArrayIndexOutOfBoundsException.Create(); // type is REFERENCE value type is REFERENCE
                var var3 = new jlStringBuilder.Create(); // type is REFERENCE value type is REFERENCE
                jlStringBuilder.VOIDinit(var3);
                var var4 = var3.jlStringBuilderappendINT(var3,index); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1bbf824
                var var5 = var4.jlStringBuilderappendjlString(var4,bytecoder.stringpool[90]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@73366292
                var var7 = var5.jlStringBuilderappendINT(var5,thisRef.elementCount); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@58503043
                var var8 = var7.jlStringtoString(var7); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6477ad42
                jlArrayIndexOutOfBoundsException.VOIDinitjlString(var2,var8);
                throw var2;
        }
    },

    jlObjectelementDataINT : function(thisRef,index) {
        var __label__ = null;
        var var1 = thisRef.elementData.data[index]; // type is REFERENCE value type is REFERENCE
        return var1;
    },

    VOIDremoveElementAtINT : function(thisRef,index) {
        var local_2_INT = null; // type is INT # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.elementCount; // type is INT value type is INT
            if ((index < var0)) {
                __label__ = 42;
                break $S_0;
            }
            __label__ = 8;
            }
        for(;;) switch (__label__) {
            case 8 :
            // NORMAL
                var var1 = new jlArrayIndexOutOfBoundsException.Create(); // type is REFERENCE value type is REFERENCE
                var var2 = new jlStringBuilder.Create(); // type is REFERENCE value type is REFERENCE
                jlStringBuilder.VOIDinit(var2);
                var var3 = var2.jlStringBuilderappendINT(var2,index); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@47dbedbd
                var var4 = var3.jlStringBuilderappendjlString(var3,bytecoder.stringpool[90]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7cc326fb
                var var6 = var4.jlStringBuilderappendINT(var4,thisRef.elementCount); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6ac4f942
                var var7 = var6.jlStringtoString(var6); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@fd92a65
                jlArrayIndexOutOfBoundsException.VOIDinitjlString(var1,var7);
                throw var1;
            case 42 :
            // NORMAL
                $S_42 : {
                // NORMAL
                    if ((index >= 0)) {
                        __label__ = 55;
                        break $S_42;
                    }
                    __label__ = 46;
                    }
                for(;;) switch (__label__) {
                    case 46 :
                    // NORMAL
                        var var8 = new jlArrayIndexOutOfBoundsException.Create(); // type is REFERENCE value type is REFERENCE
                        jlArrayIndexOutOfBoundsException.VOIDinitINT(var8,index);
                        throw var8;
                    case 55 :
                    // NORMAL
                        $S_55 : {
                        // NORMAL
                            local_2_INT = ((thisRef.elementCount - index) - 1); // type is INT value type is INT
                            var var14 = local_2_INT; // type is INT value type is INT
                            if ((var14 <= 0)) {
                                __label__ = 84;
                                break $S_55;
                            }
                            __label__ = 68;
                            }
                        $M_68_84 : for(;;) switch (__label__) {
                            case 68 :
                            // NORMAL
                                jlSystem.VOIDarraycopyjlObjectINTjlObjectINTINT(thisRef.elementData,(index + 1),thisRef.elementData,index,local_2_INT);
                                __label__ = 84;
                                continue $M_68_84;
                            case 84 :
                            // NORMAL
                                var var20 = (thisRef.modCount + 1); // type is INT value type is INT
                                thisRef.modCount = var20;
                                var var22 = (thisRef.elementCount - 1); // type is INT value type is INT
                                thisRef.elementCount = var22;
                                var var23 = thisRef.elementData; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@17778826
                                var var24 = thisRef.elementCount; // type is INT value type is INT
                                var23.data[var24] = null;
                                return;
                        }
                }
        }
    },

    BOOLEANisEmpty : function(thisRef) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.elementCount; // type is INT value type is INT
            if ((var0 != 0)) {
                __label__ = 11;
                break $S_0;
            }
            __label__ = 7;
            }
        for(;;) switch (__label__) {
            case 11 :
            // NORMAL
                var var1 = 0; // type is INT value type is INT
                return var1;
            case 7 :
            // NORMAL
                var var1 = 1; // type is INT value type is INT
                return var1;
        }
    },

    classInitCheck : function() {
        if (!juVector.__initialized) {
            juVector.__initialized = true;
            var thePrototype = juVector.Create.prototype;
            thePrototype.instanceOf = juVector.instanceOf;
            thePrototype.ClassgetClass = juVector.ClassgetClass;
            thePrototype.BOOLEANisEmpty = juVector.BOOLEANisEmpty;
            thePrototype.VOIDremoveElementAtINT = juVector.VOIDremoveElementAtINT;
            thePrototype.jlObjectelementDataINT = juVector.jlObjectelementDataINT;
            thePrototype.jlObjectelementAtINT = juVector.jlObjectelementAtINT;
            thePrototype.INTsize = juVector.INTsize;
            thePrototype.INTnewCapacityINT = juVector.INTnewCapacityINT;
            thePrototype.A1jlObjectgrowINT = juVector.A1jlObjectgrowINT;
            thePrototype.A1jlObjectgrow = juVector.A1jlObjectgrow;
            thePrototype.VOIDaddjlObjectA1jlObjectINT = juVector.VOIDaddjlObjectA1jlObjectINT;
            thePrototype.VOIDaddElementjlObject = juVector.VOIDaddElementjlObject;
            thePrototype.INTindexOfjlObject = juAbstractList.INTindexOfjlObject;
            thePrototype.jlStringoutOfBoundsMsgINT = juAbstractList.jlStringoutOfBoundsMsgINT;
            thePrototype.VOIDrangeCheckForAddINT = juAbstractList.VOIDrangeCheckForAddINT;
            thePrototype.juListIteratorlistIteratorINT = juAbstractList.juListIteratorlistIteratorINT;
            thePrototype.juListIteratorlistIterator = juAbstractList.juListIteratorlistIterator;
            thePrototype.BOOLEANequalsjlObject = juAbstractList.BOOLEANequalsjlObject;
            thePrototype.juIteratoriterator = juAbstractList.juIteratoriterator;
            thePrototype.INThashCode = juAbstractList.INThashCode;
            thePrototype.BOOLEANcontainsjlObject = juAbstractCollection.BOOLEANcontainsjlObject;
            thePrototype.BOOLEANcontainsAlljuCollection = juAbstractCollection.BOOLEANcontainsAlljuCollection;
            thePrototype.A1jlObjecttoArrayA1jlObject = juAbstractCollection.A1jlObjecttoArrayA1jlObject;
            thePrototype.jlStringtoString = juAbstractCollection.jlStringtoString;
            juAbstractList.classInitCheck();
            juRandomAccess.classInitCheck();
            jlCloneable.classInitCheck();
            juCollection.classInitCheck();
            juList.classInitCheck();
            jlIterable.classInitCheck();
            jiSerializable.classInitCheck();
            juAbstractCollection.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var juEmptyStackException = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 251,
    __implementedTypes : [61,179,180,2,1,251],

    Create : function() {
    },

    instanceOf : function(aType) {
        return juEmptyStackException.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return juEmptyStackException;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        jlRuntimeException.VOIDinit(thisRef);
        return;
    },

    classInitCheck : function() {
        if (!juEmptyStackException.__initialized) {
            juEmptyStackException.__initialized = true;
            var thePrototype = juEmptyStackException.Create.prototype;
            thePrototype.instanceOf = juEmptyStackException.instanceOf;
            thePrototype.ClassgetClass = juEmptyStackException.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlRuntimeException.classInitCheck();
            jlThrowable.classInitCheck();
            jlException.classInitCheck();
            jiSerializable.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var jlArrayIndexOutOfBoundsException = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 252,
    __implementedTypes : [228,252,61,179,180,2,1],

    Create : function() {
    },

    instanceOf : function(aType) {
        return jlArrayIndexOutOfBoundsException.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jlArrayIndexOutOfBoundsException;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitjlString : function(thisRef,s) {
        var __label__ = null;
        jlIndexOutOfBoundsException.VOIDinitjlString(thisRef,s);
        return;
    },

    VOIDinitINT : function(thisRef,index) {
        var __label__ = null;
        var var0 = new jlStringBuilder.Create(); // type is REFERENCE value type is REFERENCE
        jlStringBuilder.VOIDinit(var0);
        var var1 = var0.jlStringBuilderappendjlString(var0,bytecoder.stringpool[91]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@37afb95
        var var2 = var1.jlStringBuilderappendINT(var1,index); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@24f28361
        var var3 = var2.jlStringtoString(var2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@381b4699
        jlIndexOutOfBoundsException.VOIDinitjlString(thisRef,var3);
        return;
    },

    classInitCheck : function() {
        if (!jlArrayIndexOutOfBoundsException.__initialized) {
            jlArrayIndexOutOfBoundsException.__initialized = true;
            var thePrototype = jlArrayIndexOutOfBoundsException.Create.prototype;
            thePrototype.instanceOf = jlArrayIndexOutOfBoundsException.instanceOf;
            thePrototype.ClassgetClass = jlArrayIndexOutOfBoundsException.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlIndexOutOfBoundsException.classInitCheck();
            jlThrowable.classInitCheck();
            jlRuntimeException.classInitCheck();
            jlException.classInitCheck();
            jiSerializable.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};


bytecoder.bootstrap = function() {
    bytecoder.stringpool[0] = bytecoder.newString([]);
    bytecoder.stringpool[1] = bytecoder.newString([98,101,110,99,104,109,97,114,107,45,99,97,110,118,97,115]);
    bytecoder.stringpool[2] = bytecoder.newString([50,100]);
    bytecoder.stringpool[3] = bytecoder.newString([119,104,105,116,101]);
    bytecoder.stringpool[4] = bytecoder.newString([98,108,97,99,107]);
    bytecoder.stringpool[5] = bytecoder.newString([110,117,108,108]);
    bytecoder.stringpool[6] = bytecoder.newString([83,116,97,114,116,32,111,102,32,99,97,108,99,117,108,97,116,105,111,110]);
    bytecoder.stringpool[7] = bytecoder.newString([69,110,100]);
    bytecoder.stringpool[8] = bytecoder.newString([79,110,101,32,115,116,101,112]);
    bytecoder.stringpool[9] = bytecoder.newString([40]);
    bytecoder.stringpool[10] = bytecoder.newString([44]);
    bytecoder.stringpool[11] = bytecoder.newString([41]);
    bytecoder.stringpool[12] = bytecoder.newString([65,114,114,97,121,32,110,111,116,32,98,117,105,108,116,32,119,105,116,104,32,99,111,114,114,101,99,116,32,108,101,110,103,116,104]);
    bytecoder.stringpool[13] = bytecoder.newString([123,125]);
    bytecoder.stringpool[14] = bytecoder.newString([40,116,104,105,115,32,77,97,112,41]);
    bytecoder.stringpool[15] = bytecoder.newString([69,110,100,32,111,102,32,115,116,97,99,107,32,114,101,97,99,104,101,100,44,32,116,104,101,114,101,32,105,115,32,112,114,111,98,97,98,108,121,32,97,32,108,101,97,107,32,115,111,109,101,119,104,101,114,101]);
    bytecoder.stringpool[16] = bytecoder.newString([66,101,103,105,110,110,105,110,103,32,111,102,32,115,116,97,99,107,32,114,101,97,99,104,101,100,44,32,112,117,115,104,47,112,111,112,115,32,97,114,101,32,117,110,109,97,116,99,104,101,100]);
    bytecoder.stringpool[17] = bytecoder.newString([67,73,82,67,76,69]);
    bytecoder.stringpool[18] = bytecoder.newString([69,68,71,69]);
    bytecoder.stringpool[19] = bytecoder.newString([80,79,76,89,71,79,78]);
    bytecoder.stringpool[20] = bytecoder.newString([67,72,65,73,78]);
    bytecoder.stringpool[21] = bytecoder.newString([88,70,111,114,109,58,10]);
    bytecoder.stringpool[22] = bytecoder.newString([80,111,115,105,116,105,111,110,58,32]);
    bytecoder.stringpool[23] = bytecoder.newString([10]);
    bytecoder.stringpool[24] = bytecoder.newString([82,58,32,10]);
    bytecoder.stringpool[25] = bytecoder.newString([82,111,116,40,115,58]);
    bytecoder.stringpool[26] = bytecoder.newString([44,32,99,58]);
    bytecoder.stringpool[27] = bytecoder.newString([83,119,101,101,112,58,10,108,111,99,97,108,67,101,110,116,101,114,58,32]);
    bytecoder.stringpool[28] = bytecoder.newString([99,48,58,32]);
    bytecoder.stringpool[29] = bytecoder.newString([44,32,99,58,32]);
    bytecoder.stringpool[30] = bytecoder.newString([97,48,58,32]);
    bytecoder.stringpool[31] = bytecoder.newString([44,32,97,58,32]);
    bytecoder.stringpool[32] = bytecoder.newString([65,65,66,66,91]);
    bytecoder.stringpool[33] = bytecoder.newString([32,46,32]);
    bytecoder.stringpool[34] = bytecoder.newString([93]);
    bytecoder.stringpool[35] = bytecoder.newString([65,114,114,97,121,32,110,111,116,32,98,117,105,108,116,32,111,102,32,99,111,114,114,101,99,116,32,108,101,110,103,116,104]);
    bytecoder.stringpool[36] = bytecoder.newString([91]);
    bytecoder.stringpool[37] = bytecoder.newString([93,10]);
    bytecoder.stringpool[38] = bytecoder.newString([83,84,65,84,73,67]);
    bytecoder.stringpool[39] = bytecoder.newString([75,73,78,69,77,65,84,73,67]);
    bytecoder.stringpool[40] = bytecoder.newString([68,89,78,65,77,73,67]);
    bytecoder.stringpool[41] = bytecoder.newString([61]);
    bytecoder.stringpool[42] = bytecoder.newString([85,78,75,78,79,87,78]);
    bytecoder.stringpool[43] = bytecoder.newString([82,69,86,79,76,85,84,69]);
    bytecoder.stringpool[44] = bytecoder.newString([80,82,73,83,77,65,84,73,67]);
    bytecoder.stringpool[45] = bytecoder.newString([68,73,83,84,65,78,67,69]);
    bytecoder.stringpool[46] = bytecoder.newString([80,85,76,76,69,89]);
    bytecoder.stringpool[47] = bytecoder.newString([77,79,85,83,69]);
    bytecoder.stringpool[48] = bytecoder.newString([71,69,65,82]);
    bytecoder.stringpool[49] = bytecoder.newString([87,72,69,69,76]);
    bytecoder.stringpool[50] = bytecoder.newString([87,69,76,68]);
    bytecoder.stringpool[51] = bytecoder.newString([70,82,73,67,84,73,79,78]);
    bytecoder.stringpool[52] = bytecoder.newString([82,79,80,69]);
    bytecoder.stringpool[53] = bytecoder.newString([67,79,78,83,84,65,78,84,95,86,79,76,85,77,69]);
    bytecoder.stringpool[54] = bytecoder.newString([73,78,65,67,84,73,86,69]);
    bytecoder.stringpool[55] = bytecoder.newString([65,84,95,76,79,87,69,82]);
    bytecoder.stringpool[56] = bytecoder.newString([65,84,95,85,80,80,69,82]);
    bytecoder.stringpool[57] = bytecoder.newString([69,81,85,65,76]);
    bytecoder.stringpool[58] = bytecoder.newString([89,111,117,32,99,97,110,110,111,116,32,99,114,101,97,116,101,32,97,32,99,111,110,115,116,97,110,116,32,118,111,108,117,109,101,32,106,111,105,110,116,32,119,105,116,104,32,108,101,115,115,32,116,104,97,110,32,116,104,114,101,101,32,98,111,100,105,101,115,46]);
    bytecoder.stringpool[59] = bytecoder.newString([73,110,99,111,114,114,101,99,116,32,106,111,105,110,116,32,100,101,102,105,110,105,116,105,111,110,46,32,32,74,111,105,110,116,115,32,104,97,118,101,32,116,111,32,99,111,114,114,101,115,112,111,110,100,32,116,111,32,116,104,101,32,98,111,100,105,101,115]);
    bytecoder.stringpool[60] = bytecoder.newString([73,110,100,101,120,58,32]);
    bytecoder.stringpool[61] = bytecoder.newString([44,32,83,105,122,101,58,32]);
    bytecoder.stringpool[62] = bytecoder.newString([91,93]);
    bytecoder.stringpool[63] = bytecoder.newString([40,116,104,105,115,32,67,111,108,108,101,99,116,105,111,110,41]);
    bytecoder.stringpool[64] = bytecoder.newString([82,101,113,117,105,114,101,100,32,97,114,114,97,121,32,115,105,122,101,32,116,111,111,32,108,97,114,103,101]);
    bytecoder.stringpool[65] = bytecoder.newString([67,73,82,67,76,69,83]);
    bytecoder.stringpool[66] = bytecoder.newString([70,65,67,69,95,65]);
    bytecoder.stringpool[67] = bytecoder.newString([70,65,67,69,95,66]);
    bytecoder.stringpool[68] = bytecoder.newString([86,101,114,116,105,99,101,115,32,111,102,32,99,104,97,105,110,32,115,104,97,112,101,32,97,114,101,32,116,111,111,32,99,108,111,115,101,32,116,111,103,101,116,104,101,114]);
    bytecoder.stringpool[69] = bytecoder.newString([70,65,73,76,69,68]);
    bytecoder.stringpool[70] = bytecoder.newString([79,86,69,82,76,65,80,80,69,68]);
    bytecoder.stringpool[71] = bytecoder.newString([84,79,85,67,72,73,78,71]);
    bytecoder.stringpool[72] = bytecoder.newString([83,69,80,65,82,65,84,69,68]);
    bytecoder.stringpool[73] = bytecoder.newString([80,79,73,78,84,83]);
    bytecoder.stringpool[74] = bytecoder.newString([78,111,32,106,97,118,97,46,117,116,105,108,46,79,98,106,101,99,116,115,32,105,110,115,116,97,110,99,101,115,32,102,111,114,32,121,111,117,33]);
    bytecoder.stringpool[75] = bytecoder.newString([86,69,82,84,69,88]);
    bytecoder.stringpool[76] = bytecoder.newString([70,65,67,69]);
    bytecoder.stringpool[77] = bytecoder.newString([69,68,71,69,95,65]);
    bytecoder.stringpool[78] = bytecoder.newString([69,68,71,69,95,66]);
    bytecoder.stringpool[79] = bytecoder.newString([99,104,101,99,107,73,110,100,101,120]);
    bytecoder.stringpool[80] = bytecoder.newString([82,97,110,103,101,32,99,104,101,99,107,32,102,97,105,108,101,100,58,32,37,115]);
    bytecoder.stringpool[81] = bytecoder.newString([99,104,101,99,107,70,114,111,109,73,110,100,101,120,83,105,122,101]);
    bytecoder.stringpool[82] = bytecoder.newString([82,97,110,103,101,32,91,37,100,44,32,37,60,100,32,43,32,37,100,41,32,111,117,116,32,111,102,32,98,111,117,110,100,115,32,102,111,114,32,108,101,110,103,116,104,32,37,100]);
    bytecoder.stringpool[83] = bytecoder.newString([82,97,110,103,101,32,91,37,100,44,32,37,100,41,32,111,117,116,32,111,102,32,98,111,117,110,100,115,32,102,111,114,32,108,101,110,103,116,104,32,37,100]);
    bytecoder.stringpool[84] = bytecoder.newString([82,97,110,103,101,32,99,104,101,99,107,32,102,97,105,108,101,100,58,32,37,115,32,37,115]);
    bytecoder.stringpool[85] = bytecoder.newString([73,110,100,101,120,32,37,100,32,111,117,116,32,111,102,32,98,111,117,110,100,115,32,102,111,114,32,108,101,110,103,116,104,32,37,100]);
    bytecoder.stringpool[86] = bytecoder.newString([99,104,101,99,107,70,114,111,109,84,111,73,110,100,101,120]);
    bytecoder.stringpool[87] = bytecoder.newString([82,97,110,103,101,32,99,104,101,99,107,32,102,97,105,108,101,100]);
    bytecoder.stringpool[88] = bytecoder.newString([32,83,105,122,101,58,32]);
    bytecoder.stringpool[89] = bytecoder.newString([73,108,108,101,103,97,108,32,67,97,112,97,99,105,116,121,58,32]);
    bytecoder.stringpool[90] = bytecoder.newString([32,62,61,32]);
    bytecoder.stringpool[91] = bytecoder.newString([65,114,114,97,121,32,105,110,100,101,120,32,111,117,116,32,111,102,32,114,97,110,103,101,58,32]);
    jlClass.classInitCheck();
    jlObject.classInitCheck();
    dmbcVM$ImplementingCallsite.classInitCheck();
    jliConstantCallSite.classInitCheck();
    jliCallSite.classInitCheck();
    dmbiJBox2DSimulation.classInitCheck();
    bytecoder.exports.main = dmbiJBox2DSimulation.VOIDmainA1jlString;
    bytecoder.exports.proceedSimulation = dmbiJBox2DSimulation.VOIDproceedSimulation;
    jlString.classInitCheck();
    dmbiJBox2DSimulation$Scene.classInitCheck();
    ojdWorld.classInitCheck();
    jlInteger.classInitCheck();
    jlNumber.classInitCheck();
    ojcVec2.classInitCheck();
    ojpnDefaultWorldPool.classInitCheck();
    juHashMap.classInitCheck();
    juAbstractMap.classInitCheck();
    ojpnDefaultWorldPool$1.classInitCheck();
    ojpnMutableStack.classInitCheck();
    ojcSettings.classInitCheck();
    jlMath.classInitCheck();
    jlrArray.classInitCheck();
    jlSystem.classInitCheck();
    jiPrintStream.classInitCheck();
    jiFilterOutputStream.classInitCheck();
    jiOutputStream.classInitCheck();
    dmbcjlTSystem$1.classInitCheck();
    ojpnDefaultWorldPool$2.classInitCheck();
    ojpnDefaultWorldPool$3.classInitCheck();
    ojpnDefaultWorldPool$4.classInitCheck();
    ojpnDefaultWorldPool$5.classInitCheck();
    ojpnDefaultWorldPool$6.classInitCheck();
    ojpnDefaultWorldPool$7.classInitCheck();
    ojpnDefaultWorldPool$8.classInitCheck();
    ojpnOrderedStack.classInitCheck();
    ojpnDefaultWorldPool$9.classInitCheck();
    ojpnDefaultWorldPool$10.classInitCheck();
    ojpnDefaultWorldPool$11.classInitCheck();
    ojpnDefaultWorldPool$12.classInitCheck();
    ojpnDefaultWorldPool$13.classInitCheck();
    ojcDistance.classInitCheck();
    ojcDistance$Simplex.classInitCheck();
    ojcDistance$1.classInitCheck();
    ojcsShapeType.classInitCheck();
    jlEnum.classInitCheck();
    jlNoSuchFieldError.classInitCheck();
    jlIncompatibleClassChangeError.classInitCheck();
    jlLinkageError.classInitCheck();
    jlError.classInitCheck();
    jlThrowable.classInitCheck();
    ojcDistance$SimplexVertex.classInitCheck();
    ojcCollision.classInitCheck();
    ojcDistanceInput.classInitCheck();
    ojcDistance$DistanceProxy.classInitCheck();
    ojcTransform.classInitCheck();
    ojcRot.classInitCheck();
    ojcDistance$SimplexCache.classInitCheck();
    ojcDistanceOutput.classInitCheck();
    ojcCollision$EdgeResults.classInitCheck();
    ojcCollision$1.classInitCheck();
    ojcCollision$ClipVertex.classInitCheck();
    ojcContactID.classInitCheck();
    ojcCollision$EPCollider.classInitCheck();
    ojcCollision$TempPolygon.classInitCheck();
    ojcCollision$ReferenceFace.classInitCheck();
    ojcCollision$EPAxis.classInitCheck();
    ojcTimeOfImpact.classInitCheck();
    ojcSeparationFunction.classInitCheck();
    ojcSweep.classInitCheck();
    ojcbDynamicTree.classInitCheck();
    ojcbDynamicTree$TreeNodeStack.classInitCheck();
    ojcbDynamicTreeNode.classInitCheck();
    ojcAABB.classInitCheck();
    ojcRayCastInput.classInitCheck();
    ojcColor3f.classInitCheck();
    ojdcContactRegister.classInitCheck();
    ojdTimeStep.classInitCheck();
    ojcTimer.classInitCheck();
    ojpaVec2Array.classInitCheck();
    ojdWorldQueryWrapper.classInitCheck();
    ojdWorldRayCastWrapper.classInitCheck();
    ojcRayCastOutput.classInitCheck();
    ojdIsland.classInitCheck();
    ojdcContactSolver.classInitCheck();
    ojcWorldManifold.classInitCheck();
    ojdcPositionSolverManifold.classInitCheck();
    ojdcContactPositionConstraint.classInitCheck();
    ojdcContactVelocityConstraint.classInitCheck();
    ojdcContactVelocityConstraint$VelocityConstraintPoint.classInitCheck();
    ojcMat22.classInitCheck();
    ojdSolverData.classInitCheck();
    ojdcContactSolver$ContactSolverDef.classInitCheck();
    ojcContactImpulse.classInitCheck();
    ojdBody.classInitCheck();
    ojdProfile.classInitCheck();
    ojcTimeOfImpact$TOIInput.classInitCheck();
    ojcTimeOfImpact$TOIOutput.classInitCheck();
    ojcDebugDraw.classInitCheck();
    ojdjJoint.classInitCheck();
    ojdContactManager.classInitCheck();
    ojdcContact.classInitCheck();
    ojcContactFilter.classInitCheck();
    ojcbBroadPhase.classInitCheck();
    ojcbPair.classInitCheck();
    ojdBodyDef.classInitCheck();
    ojdBodyType.classInitCheck();
    jlAssertionError.classInitCheck();
    ojdFixtureDef.classInitCheck();
    ojcsShape.classInitCheck();
    ojdFilter.classInitCheck();
    ojcsMassData.classInitCheck();
    jlFloat.classInitCheck();
    ojcMathUtils.classInitCheck();
    ojcPlatformMathUtils.classInitCheck();
    jlStrictMath.classInitCheck();
    ojdjJointEdge.classInitCheck();
    ojdcContactEdge.classInitCheck();
    ojdFixture.classInitCheck();
    ojcsCircleShape.classInitCheck();
    ojdFixtureProxy.classInitCheck();
    ojcsPolygonShape.classInitCheck();
    ojpaIntArray.classInitCheck();
    juHashMap$Node.classInitCheck();
    juHashMap$TreeNode.classInitCheck();
    juLinkedHashMap$Entry.classInitCheck();
    ojdjRevoluteJointDef.classInitCheck();
    ojdjJointDef.classInitCheck();
    ojdjJointType.classInitCheck();
    ojdjJoint$1.classInitCheck();
    ojdjMouseJoint.classInitCheck();
    ojdjMouseJointDef.classInitCheck();
    ojdjDistanceJoint.classInitCheck();
    ojdjDistanceJointDef.classInitCheck();
    ojdjPrismaticJoint.classInitCheck();
    ojdjPrismaticJointDef.classInitCheck();
    ojcVec3.classInitCheck();
    ojdjLimitState.classInitCheck();
    ojcMat33.classInitCheck();
    ojdjRevoluteJoint.classInitCheck();
    ojdjWeldJoint.classInitCheck();
    ojdjWeldJointDef.classInitCheck();
    ojdjFrictionJoint.classInitCheck();
    ojdjFrictionJointDef.classInitCheck();
    ojdjWheelJoint.classInitCheck();
    ojdjWheelJointDef.classInitCheck();
    ojdjGearJoint.classInitCheck();
    ojdjGearJointDef.classInitCheck();
    ojdjPulleyJoint.classInitCheck();
    ojdjPulleyJointDef.classInitCheck();
    ojdjConstantVolumeJoint.classInitCheck();
    ojdjConstantVolumeJointDef.classInitCheck();
    juArrayList.classInitCheck();
    juAbstractList.classInitCheck();
    juAbstractCollection.classInitCheck();
    jlIllegalArgumentException.classInitCheck();
    jlRuntimeException.classInitCheck();
    jlException.classInitCheck();
    juArrays.classInitCheck();
    ojdjRopeJoint.classInitCheck();
    ojdjRopeJointDef.classInitCheck();
    dmbawWindow.classInitCheck();
    jlLong.classInitCheck();
    jlStringBuilder.classInitCheck();
    jlAbstractStringBuilder.classInitCheck();
    jtDecimalFormatSymbols.classInitCheck();
    ojcManifold.classInitCheck();
    ojcManifoldPoint.classInitCheck();
    ojcManifold$ManifoldType.classInitCheck();
    ojcsChainShape.classInitCheck();
    ojcsEdgeShape.classInitCheck();
    ojdcVelocity.classInitCheck();
    ojdcPosition.classInitCheck();
    ojcWorldManifold$1.classInitCheck();
    ojdcPositionSolverManifold$1.classInitCheck();
    ojcTimeOfImpact$TOIOutputState.classInitCheck();
    ojcType.classInitCheck();
    ojcSeparationFunction$1.classInitCheck();
    dmbcjlTMath$FloatExponents.classInitCheck();
    jlClassCastException.classInitCheck();
    jlNullPointerException.classInitCheck();
    jlDouble.classInitCheck();
    juHashMap$EntrySet.classInitCheck();
    juAbstractSet.classInitCheck();
    jlUnsupportedOperationException.classInitCheck();
    ojdcPolygonContact.classInitCheck();
    ojdcCircleContact.classInitCheck();
    ojdcPolygonAndCircleContact.classInitCheck();
    ojdcEdgeAndCircleContact.classInitCheck();
    ojdcEdgeAndPolygonContact.classInitCheck();
    ojdcChainAndCircleContact.classInitCheck();
    ojdcChainAndPolygonContact.classInitCheck();
    juObjects.classInitCheck();
    juConcurrentModificationException.classInitCheck();
    juArrayList$Itr.classInitCheck();
    juAbstractList$Itr.classInitCheck();
    jlIndexOutOfBoundsException.classInitCheck();
    juAbstractList$ListItr.classInitCheck();
    jlIllegalStateException.classInitCheck();
    jlOutOfMemoryError.classInitCheck();
    jlVirtualMachineError.classInitCheck();
    juArrayList$ListItr.classInitCheck();
    juHashMap$EntryIterator.classInitCheck();
    juHashMap$HashIterator.classInitCheck();
    ojcContactID$Type.classInitCheck();
    ojcCollision$EPAxis$Type.classInitCheck();
    juNoSuchElementException.classInitCheck();
    jiuPreconditions.classInitCheck();
    juImmutableCollections.classInitCheck();
    juImmutableCollections$ListN.classInitCheck();
    juImmutableCollections$AbstractImmutableList.classInitCheck();
    juImmutableCollections$AbstractImmutableCollection.classInitCheck();
    juImmutableCollections$List12.classInitCheck();
    juImmutableCollections$ListItr.classInitCheck();
    dmbcGlobals.classInitCheck();
    dmbcExceptionManager.classInitCheck();
    juStack.classInitCheck();
    juVector.classInitCheck();
    juEmptyStackException.classInitCheck();
    jlArrayIndexOutOfBoundsException.classInitCheck();
}
