'use strict';

var bytecoder = {

     logDebug : function(aValue) { 
         console.log(aValue);
     }, 

     logByteArrayAsString : function(aArray) { 
         var theResult = '';
         for (var i=0;i<aArray.data.length;i++) {
             theResult += String.fromCharCode(aArray.data[i]);
         }
         console.log(theResult);
     }, 

     newString : function(aByteArray) { 
          var theNewString = new jlString.Create();
          var theBytes = new jlrArray.Create();
          theBytes.data = aByteArray;
          jlString.VOIDinitA1BYTE(theNewString, theBytes);
          return theNewString;
     },

     newMultiArray : function(aDimensions, aDefault) {
         var theLength = aDimensions[0];
         var theArray = bytecoder.newArray(theLength, aDefault);
         if (aDimensions.length > 1) {
             var theNewDimensions = aDimensions.slice(0);
             theNewDimensions.shift();
             for (var i=0;i<theLength;i++) {
                 theArray.data[i] = bytecoder.newMultiArray(theNewDimensions, aDefault);
             }
         }
         return theArray;
     },

     newArray : function(aLength, aDefault) {
          var theInstance = new jlrArray.Create();
          theInstance.data = [];
          theInstance.data.length = aLength;
          for (var i=0;i<aLength;i++) {
             theInstance.data[i] = aDefault;
          }
          return theInstance;
     },

     toBytecoderString: function(aJSString) {
         var theLength = aJSString.length;
         var theArray = [];
         for (var i=0;i<theLength;i++) {
             theArray.push(aJSString.charCodeAt(i));
         }
         return bytecoder.newString(theArray);
     },

     toJSString: function(aBytecoderString) {
         var theArray = aBytecoderString.data.data;
         var theResult = '';
         for (var i=0;i<theArray.length;i++) {
             theResult+=String.fromCharCode(theArray[i]);
         }
         return theResult;
     },

     dynamicType : function(aFunction) { 
         return new Proxy({}, {
             get: function(target, name) {
                 return function(inst, _p1, _p2, _p3, _p4, _p5, _p6, _p7, _p8, _p9) {
                    return aFunction(_p1, _p2, _p3, _p4, _p5, _p6, _p7, _p8, _p9);
                 }
             }
         });
     }, 

     resolveStaticCallSiteObject: function(aWhere, aKey, aProducerFunction) {
         var resolvedCallsiteObject = aWhere.__staticCallSites[aKey];
         if (resolvedCallsiteObject == null) {
             resolvedCallsiteObject = aProducerFunction();
             aWhere.__staticCallSites[aKey] = resolvedCallsiteObject;
         }
         return resolvedCallsiteObject;
     },

     imports : {
         system : {
             currentTimeMillis: function() {
                 return Date.now();
             },
             nanoTime: function() {
                 return Date.now() * 1000000;
             },
             writeByteArrayToConsole: function(thisRef, p1) {
                 bytecoder.logByteArrayAsString(p1);
             },
             logDebug: function(thisref, p1) {
                 bytecoder.logDebug(p1);
             },
         },
         printstream : {
             logDebug: function(p1) {
                 bytecoder.logDebug(p1);
             },
         },
         math : {
             ceil: function(p1) {
                 return Math.ceil(p1);
             },
             floor: function(p1) {
                 return Math.floor(p1);
             },
             sin: function(p1) {
                 return Math.sin(p1);
             },
             cos: function(p1) {
                 return Math.cos(p1);
             },
             sqrt: function(p1) {
                 return Math.sqrt(p1);
             },
             round: function(p1) {
                 return Math.round(p1);
             },
             NaN: function(p1) {
                 return NaN;
             },
             atan2: function(p1, p2) {
                 return Math.atan2(p1, p2);
             },
             max: function(p1, p2) {
                 return Math.max(p1, p2);
             },
             random: function() {
                 return Math.random();
             },
             tan: function(p1) {
                 return Math.tan(p1);
             },
             toRadians: function(p1) {
                 return Math.toRadians(p1);
             },
             toDegrees: function(p1) {
                 return Math.toDegrees(p1);
             },
             min: function (p1, p2) {
                 return Math.min(p1, p2);
             },
             add: function(p1, p2) {
                 return p1 + p2;
             },
         },
         strictmath : {
             sin: function(p1) {
                 return Math.sin(p1);
             },
             cos: function(p1) {
                 return Math.cos(p1);
             },
             sqrt: function(p1) {
                 return Math.sqrt(p1);
             },
             round: function(p1) {
                 return Math.round(p1);
             },
             atan2: function(p1, p2) {
                 return Math.atan2(p1, p2);
             },
         },
         runtime : {
             nativewindow: function() {
                 return window;
             },
         },
     },

     exports : {},

     stringpool : [],

};

var jlClass = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 0,
    __implementedTypes : [1,0,3,5,2,4],

    Create : function() {
    },

    instanceOf : function(aType) {
        return jlClass.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jlClass;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    jlStringgetName : function(thisRef) {
        var __label__ = null;
        return bytecoder.stringpool[0];
    },

    jlClassgetComponentType : function(thisRef) {
        var __label__ = null;
        return null;
    },

    classInitCheck : function() {
        if (!jlClass.__initialized) {
            jlClass.__initialized = true;
            var thePrototype = jlClass.Create.prototype;
            thePrototype.instanceOf = jlClass.instanceOf;
            thePrototype.ClassgetClass = jlClass.ClassgetClass;
            thePrototype.jlClassgetComponentType = jlClass.jlClassgetComponentType;
            thePrototype.jlStringgetName = jlClass.jlStringgetName;
            thePrototype.BOOLEANdesiredAssertionStatus = jlClass.BOOLEANdesiredAssertionStatus;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            jlrGenericDeclaration.classInitCheck();
            jlrType.classInitCheck();
            jiSerializable.classInitCheck();
            jlrAnnotatedElement.classInitCheck();
        }
    },

};

var jlObject = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 1,
    __implementedTypes : [1],

    Create : function() {
    },

    instanceOf : function(aType) {
        return jlObject.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jlObject;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    INThashCode : function(thisRef) {
        var __label__ = null;
        return 0;
    },

    BOOLEANequalsjlObject : function(thisRef,aObject) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((thisRef != aObject)) {
                __label__ = 9;
                break $S_0;
            }
            __label__ = 5;
            }
        for(;;) switch (__label__) {
            case 9 :
            // NORMAL
                var var0 = 0; // type is INT value type is INT
                return var0;
            case 5 :
            // NORMAL
                var var0 = 1; // type is INT value type is INT
                return var0;
        }
    },

    jlStringtoString : function(thisRef) {
        var __label__ = null;
        return bytecoder.stringpool[0];
    },

    classInitCheck : function() {
        if (!jlObject.__initialized) {
            jlObject.__initialized = true;
            var thePrototype = jlObject.Create.prototype;
            thePrototype.instanceOf = jlObject.instanceOf;
            thePrototype.ClassgetClass = jlObject.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
        }
    },

};

var jiSerializable = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 2,
    __implementedTypes : [1,2],


    classInitCheck : function() {
        if (!jiSerializable.__initialized) {
            jiSerializable.__initialized = true;
            jlObject.classInitCheck();
        }
    },

};

var jlrGenericDeclaration = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 3,
    __implementedTypes : [1,3,4],


    classInitCheck : function() {
        if (!jlrGenericDeclaration.__initialized) {
            jlrGenericDeclaration.__initialized = true;
            jlObject.classInitCheck();
            jlrAnnotatedElement.classInitCheck();
        }
    },

};

var jlrAnnotatedElement = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 4,
    __implementedTypes : [1,4],


    classInitCheck : function() {
        if (!jlrAnnotatedElement.__initialized) {
            jlrAnnotatedElement.__initialized = true;
            jlObject.classInitCheck();
        }
    },

};

var jlrType = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 5,
    __implementedTypes : [1,5],


    classInitCheck : function() {
        if (!jlrType.__initialized) {
            jlrType.__initialized = true;
            jlObject.classInitCheck();
        }
    },

};

var dmbcGlobals = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 6,
    __implementedTypes : [1,6],

    Create : function() {
    },

    instanceOf : function(aType) {
        return dmbcGlobals.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return dmbcGlobals;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDsummonCallbackdmbaCallbackdmbaOpaqueReferenceType : function(aCallback,aArgument) {
        var __label__ = null;
        aCallback.VOIDrundmbaOpaqueReferenceType(aCallback,aArgument);
        return;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    classInitCheck : function() {
        if (!dmbcGlobals.__initialized) {
            dmbcGlobals.__initialized = true;
            var thePrototype = dmbcGlobals.Create.prototype;
            thePrototype.instanceOf = dmbcGlobals.instanceOf;
            thePrototype.ClassgetClass = dmbcGlobals.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var dmbaCallback = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 7,
    __implementedTypes : [1,7],


    classInitCheck : function() {
        if (!dmbaCallback.__initialized) {
            dmbaCallback.__initialized = true;
            jlObject.classInitCheck();
        }
    },

};

var dmbaOpaqueReferenceType = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 8,
    __implementedTypes : [1,8],


    classInitCheck : function() {
        if (!dmbaOpaqueReferenceType.__initialized) {
            dmbaOpaqueReferenceType.__initialized = true;
            jlObject.classInitCheck();
        }
    },

};

var dmbcVM$ImplementingCallsite = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 9,
    __implementedTypes : [10,1,11,9],

    instanceOf : function(aType) {
        return dmbcVM$ImplementingCallsite.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return dmbcVM$ImplementingCallsite;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    classInitCheck : function() {
        if (!dmbcVM$ImplementingCallsite.__initialized) {
            dmbcVM$ImplementingCallsite.__initialized = true;
            jliConstantCallSite.classInitCheck();
            jlObject.classInitCheck();
            jliCallSite.classInitCheck();
        }
    },

};

var jliConstantCallSite = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 10,
    __implementedTypes : [10,1,11],

    Create : function() {
    },

    instanceOf : function(aType) {
        return jliConstantCallSite.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jliConstantCallSite;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    classInitCheck : function() {
        if (!jliConstantCallSite.__initialized) {
            jliConstantCallSite.__initialized = true;
            var thePrototype = jliConstantCallSite.Create.prototype;
            thePrototype.instanceOf = jliConstantCallSite.instanceOf;
            thePrototype.ClassgetClass = jliConstantCallSite.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jliCallSite.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var jliCallSite = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 11,
    __implementedTypes : [1,11],

    instanceOf : function(aType) {
        return jliCallSite.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jliCallSite;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    classInitCheck : function() {
        if (!jliCallSite.__initialized) {
            jliCallSite.__initialized = true;
            jlObject.classInitCheck();
        }
    },

};

var dmbiJBox2DSimulation = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 12,
    __implementedTypes : [1,12],
    scene : null, // declared in de.mirkosertic.bytecoder.integrationtest.JBox2DSimulation
    window : null, // declared in de.mirkosertic.bytecoder.integrationtest.JBox2DSimulation
    renderingContext2D : null, // declared in de.mirkosertic.bytecoder.integrationtest.JBox2DSimulation
    animationCallback : null, // declared in de.mirkosertic.bytecoder.integrationtest.JBox2DSimulation

    Create : function() {
    },

    instanceOf : function(aType) {
        return dmbiJBox2DSimulation.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return dmbiJBox2DSimulation;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDmainA1jlString : function(args) {
        var __label__ = null;
        var var0 = new dmbiJBox2DSimulation$Scene.Create(); // type is REFERENCE value type is REFERENCE
        dmbiJBox2DSimulation$Scene.VOIDinit(var0);
        dmbiJBox2DSimulation.scene = var0;
        var var1 = bytecoder.imports.runtime.nativewindow(); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@48d9af17
        dmbiJBox2DSimulation.window = var1;
        var var3 = dmbiJBox2DSimulation.window.document; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4882a73a
        var local_1_REFERENCE = var3; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@12d16e3
        var var6 = local_1_REFERENCE.getElementById(bytecoder.toJSString(bytecoder.stringpool[1])); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@58511657
        var local_2_REFERENCE = var6; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@312289b0
        var var9 = local_2_REFERENCE.getContext(bytecoder.toJSString(bytecoder.stringpool[2])); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6420ecf8
        dmbiJBox2DSimulation.renderingContext2D = var9;
        var var10 = new dmbiJBox2DSimulation$1.Create(); // type is REFERENCE value type is REFERENCE
        dmbiJBox2DSimulation$1.VOIDinit(var10);
        dmbiJBox2DSimulation.animationCallback = var10;
        var var12 = local_1_REFERENCE.getElementById(bytecoder.toJSString(bytecoder.stringpool[3])); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1d8f299a
        var local_3_REFERENCE = var12; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3409aa17
        var var14 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3409aa17
        var var15 = new dmbiJBox2DSimulation$2.Create(); // type is REFERENCE value type is REFERENCE
        dmbiJBox2DSimulation$2.VOIDinitdmbawHTMLElement(var15,local_3_REFERENCE);
        var14.addEventListener(bytecoder.toJSString(bytecoder.stringpool[4]),function(event) {var v = var15;v.VOIDrundmbaOpaqueReferenceType(v, event);});
        return;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    VOIDstatsBegin : function() {
         return bytecoder.imports.stats.begin();
    },

    dmbiJBox2DSimulation$Sceneaccess$000 : function() {
        var __label__ = null;
        return dmbiJBox2DSimulation.scene;
    },

    VOIDaccess$100 : function() {
        var __label__ = null;
        dmbiJBox2DSimulation.VOIDrender();
        return;
    },

    VOIDrender : function() {
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 4
        var local_0_REFERENCE = null; // type is REFERENCE # of inits = 4
        var local_6_INT = null; // type is INT # of inits = 3
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            dmbiJBox2DSimulation.renderingContext2D.fillStyle=bytecoder.toJSString(bytecoder.stringpool[5]);
            dmbiJBox2DSimulation.renderingContext2D.strokeStyle=bytecoder.toJSString(bytecoder.stringpool[6]);
            dmbiJBox2DSimulation.renderingContext2D.fillRect(0.0,0.0,600.0,600.0);
            dmbiJBox2DSimulation.renderingContext2D.save();
            dmbiJBox2DSimulation.renderingContext2D.translate(0.0,600.0);
            dmbiJBox2DSimulation.renderingContext2D.scale(1.0,-1.0);
            dmbiJBox2DSimulation.renderingContext2D.scale(100.0,100.0);
            dmbiJBox2DSimulation.renderingContext2D.lineWidth=0.01;
            var var9 = dmbiJBox2DSimulation.scene.ojdWorldgetWorld(dmbiJBox2DSimulation.scene); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@ca9197e
            var var10 = var9.ojdBodygetBodyList(var9); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5f269fc1
            local_0_REFERENCE = var10; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@58dac970
            __label__ = 96;
            }
        $L_96 : for (;;) {
            $S_96 : {
            // NORMAL
                var var12 = local_0_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@58dac970
                if (var12 == null ) {
                    __label__ = 371;
                    break $S_96;
                }
                __label__ = 100;
                }
            for(;;) switch (__label__) {
                case 371 :
                // NORMAL
                    dmbiJBox2DSimulation.renderingContext2D.restore();
                    return;
                case 100 :
                // NORMAL
                    $S_100 : {
                    // NORMAL
                        var var14 = local_0_REFERENCE.ojcVec2getPosition(local_0_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@655d0be4
                        var local_1_REFERENCE = var14; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6f9e9947
                        dmbiJBox2DSimulation.renderingContext2D.save();
                        dmbiJBox2DSimulation.renderingContext2D.translate(local_1_REFERENCE.x,local_1_REFERENCE.y);
                        var var22 = dmbiJBox2DSimulation.renderingContext2D; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@42ddbe2
                        var var24 = local_0_REFERENCE.FLOATgetAngle(local_0_REFERENCE); // type is FLOAT value type is FLOAT
                        var22.rotate(var24);
                        var var26 = local_0_REFERENCE.ojdFixturegetFixtureList(local_0_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7989764f
                        local_2_REFERENCE = var26; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3c382e39
                        __label__ = 146;
                        }
                    $L_146 : for (;;) {
                        $S_146 : {
                        // NORMAL
                            var var28 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3c382e39
                            if (var28 == null ) {
                                __label__ = 355;
                                break $S_146;
                            }
                            __label__ = 150;
                            }
                        for(;;) switch (__label__) {
                            case 150 :
                            // NORMAL
                                $S_150 : {
                                // NORMAL
                                    var var33 = local_2_REFERENCE.ojcsShapegetShape(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6f49abc7
                                    local_3_REFERENCE = var33; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@499defc
                                    var var36 = local_3_REFERENCE.ojcsShapeTypegetType(local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5d18f07
                                    var var37 = ojcsShapeType.CIRCLE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@37d8aafc
                                    if ((var36 != var37)) {
                                        __label__ = 235;
                                        break $S_150;
                                    }
                                    __label__ = 165;
                                    }
                                $M_165_235 : for(;;) switch (__label__) {
                                    case 165 :
                                    // NORMAL
                                        var var38 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@499defc
                                        local_4_REFERENCE = var38; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@499defc
                                        dmbiJBox2DSimulation.renderingContext2D.beginPath();
                                        var var41 = dmbiJBox2DSimulation.renderingContext2D; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@719d676e
                                        var var45 = local_4_REFERENCE.m_p.x; // type is DOUBLE value type is DOUBLE
                                        var var49 = local_4_REFERENCE.m_p.y; // type is DOUBLE value type is DOUBLE
                                        var var51 = local_4_REFERENCE.FLOATgetRadius(local_4_REFERENCE); // type is FLOAT value type is FLOAT
                                        var41.arc(var45,var49,var51,0.0,6.283185307179586,1);
                                        dmbiJBox2DSimulation.renderingContext2D.closePath();
                                        dmbiJBox2DSimulation.renderingContext2D.stroke();
                                        break $M_165_235;
                                    case 235 :
                                    // NORMAL
                                        $S_235 : {
                                        // NORMAL
                                            var var56 = local_3_REFERENCE.ojcsShapeTypegetType(local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5328fd09
                                            var var57 = ojcsShapeType.POLYGON; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5a88e9dc
                                            if ((var56 != var57)) {
                                                break $M_165_235;
                                            }
                                            }
                                        $S_245 : {
                                        // NORMAL
                                            var var58 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@499defc
                                            local_4_REFERENCE = var58; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@499defc
                                            var var60 = local_4_REFERENCE.A1ojcVec2getVertices(local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@32c9934c
                                            local_5_REFERENCE = var60; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@248c2099
                                            dmbiJBox2DSimulation.renderingContext2D.beginPath();
                                            var var63 = dmbiJBox2DSimulation.renderingContext2D; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@261de0a9
                                            var var65 = local_5_REFERENCE.data[0]; // type is REFERENCE value type is REFERENCE
                                            var var66 = var65.x; // type is FLOAT value type is FLOAT
                                            var var68 = local_5_REFERENCE.data[0]; // type is REFERENCE value type is REFERENCE
                                            var63.moveTo(var66,var68.y);
                                            local_6_INT = 1; // type is INT value type is INT
                                            __label__ = 291;
                                            }
                                        $L_291 : for (;;) {
                                            $S_291 : {
                                            // NORMAL
                                                var var72 = local_6_INT; // type is INT value type is INT
                                                var var74 = local_4_REFERENCE.INTgetVertexCount(local_4_REFERENCE); // type is INT value type is INT
                                                if ((var72 >= var74)) {
                                                    __label__ = 331;
                                                    break $S_291;
                                                }
                                                __label__ = 301;
                                                }
                                            for(;;) switch (__label__) {
                                                case 301 :
                                                // NORMAL
                                                    var var80 = dmbiJBox2DSimulation.renderingContext2D; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3bc62bbf
                                                    var var83 = local_5_REFERENCE.data[local_6_INT]; // type is REFERENCE value type is REFERENCE
                                                    var var84 = var83.x; // type is FLOAT value type is FLOAT
                                                    var var87 = local_5_REFERENCE.data[local_6_INT]; // type is REFERENCE value type is REFERENCE
                                                    var80.lineTo(var84,var87.y);
                                                    local_6_INT = (local_6_INT + 1); // type is INT value type is INT
                                                    __label__ = 291;
                                                    continue $L_291;
                                                case 331 :
                                                // NORMAL
                                                    dmbiJBox2DSimulation.renderingContext2D.closePath();
                                                    dmbiJBox2DSimulation.renderingContext2D.stroke();
                                                    break $M_165_235;
                                            }
                                        }
                                }
                                var var78 = local_2_REFERENCE.ojdFixturegetNext(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3a0b9f03
                                local_2_REFERENCE = var78; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@a860795
                                __label__ = 146;
                                continue $L_146;
                            case 355 :
                            // NORMAL
                                dmbiJBox2DSimulation.renderingContext2D.restore();
                                var var31 = local_0_REFERENCE.ojdBodygetNext(local_0_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@442628fd
                                local_0_REFERENCE = var31; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@45acb32d
                                __label__ = 96;
                                continue $L_96;
                        }
                    }
            }
        }
    },

    VOIDstatsEnd : function() {
         return bytecoder.imports.stats.end();
    },

    VOIDlogRuntimeINT : function(p1) {
         return bytecoder.imports.debug.logRuntime(p1);
    },

    dmbawWindowaccess$300 : function() {
        var __label__ = null;
        return dmbiJBox2DSimulation.window;
    },

    dmbaCallbackaccess$200 : function() {
        var __label__ = null;
        return dmbiJBox2DSimulation.animationCallback;
    },

    classInitCheck : function() {
        if (!dmbiJBox2DSimulation.__initialized) {
            dmbiJBox2DSimulation.__initialized = true;
            var thePrototype = dmbiJBox2DSimulation.Create.prototype;
            thePrototype.instanceOf = dmbiJBox2DSimulation.instanceOf;
            thePrototype.ClassgetClass = dmbiJBox2DSimulation.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var jlString = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 13,
    __implementedTypes : [1,14,15,13,2],

    Create : function() {
        this.data = null; // declared in java.lang.String
        this.computedHash = 0; // declared in java.lang.String
    },

    instanceOf : function(aType) {
        return jlString.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jlString;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitA1BYTE : function(thisRef,aData) {
        var __label__ = null;
        thisRef.data = aData;
        return;
    },

    INTcompareTojlString : function(thisRef,o) {
        var __label__ = null;
        return 0;
    },

    jlStringvalueOfjlObject : function(obj) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if (obj != null ) {
                __label__ = 9;
                break $S_0;
            }
            __label__ = 4;
            }
        for(;;) switch (__label__) {
            case 9 :
            // NORMAL
                var var0 = obj.jlStringtoString(obj); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@41be1c7d
                var var1 = var0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7afad0e2
                return var1;
            case 4 :
            // NORMAL
                var var1 = bytecoder.stringpool[7]; // type is REFERENCE value type is REFERENCE
                return var1;
        }
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = bytecoder.newArray(0,0); // type is REFERENCE value type is REFERENCE
        thisRef.data = var0;
        return;
    },

    INThashCode : function(thisRef) {
        var local_1_INT = null; // type is INT # of inits = 3
        var local_2_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_1_INT = thisRef.computedHash; // type is INT value type is INT
            var var3 = local_1_INT; // type is INT value type is INT
            if ((var3 != 0)) {
                return local_1_INT;
            }
            }
        $S_9 : {
        // NORMAL
            var var5 = thisRef.data.data.length; // type is INT value type is INT
            if ((var5 <= 0)) {
                return local_1_INT;
            }
            }
        $S_17 : {
        // NORMAL
            local_2_INT = 0; // type is INT value type is INT
            __label__ = 19;
            }
        $L_19 : for (;;) {
            $S_19 : {
            // NORMAL
                var var8 = local_2_INT; // type is INT value type is INT
                var var10 = thisRef.data.data.length; // type is INT value type is INT
                if ((var8 >= var10)) {
                    __label__ = 46;
                    break $S_19;
                }
                __label__ = 28;
                }
            for(;;) switch (__label__) {
                case 46 :
                // NORMAL
                    var var18 = local_1_INT; // type is INT value type is INT
                    thisRef.computedHash = var18;
                    return local_1_INT;
                case 28 :
                // NORMAL
                    var var12 = (31 * local_1_INT); // type is INT value type is INT
                    var var15 = thisRef.data.data[local_2_INT]; // type is BYTE value type is BYTE
                    local_1_INT = (var12 + var15); // type is INT value type is INT
                    local_2_INT = (local_2_INT + 1); // type is INT value type is INT
                    __label__ = 19;
                    continue $L_19;
            }
        }
    },

    BOOLEANequalsjlObject : function(thisRef,aOtherObject) {
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_4_INT = null; // type is INT # of inits = 3
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((thisRef != aOtherObject)) {
                break $S_0;
            }
            return 1;
            }
        $S_7 : {
        // NORMAL
            var var0 = (aOtherObject == null ? false : aOtherObject.instanceOf(jlString)); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                break $S_7;
            }
            return 0;
            }
        $S_16 : {
        // NORMAL
            local_2_REFERENCE = aOtherObject; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7c6258a5
            var var3 = local_2_REFERENCE.INTlength(local_2_REFERENCE); // type is INT value type is INT
            var var5 = thisRef.data.data.length; // type is INT value type is INT
            if ((var3 == var5)) {
                break $S_16;
            }
            return 0;
            }
        $S_35 : {
        // NORMAL
            var var7 = local_2_REFERENCE.A1BYTEgetBytes(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@38095b28
            local_3_REFERENCE = var7; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@190cee
            local_4_INT = 0; // type is INT value type is INT
            __label__ = 43;
            }
        $L_43 : for (;;) {
            $S_43 : {
            // NORMAL
                var var11 = local_4_INT; // type is INT value type is INT
                var var13 = thisRef.data.data.length; // type is INT value type is INT
                if ((var11 >= var13)) {
                    return 1;
                }
                }
            $S_53 : {
            // NORMAL
                var var16 = thisRef.data.data[local_4_INT]; // type is BYTE value type is BYTE
                var var19 = local_3_REFERENCE.data[local_4_INT]; // type is BYTE value type is BYTE
                if ((var16 == var19)) {
                    break $S_53;
                }
                return 0;
                }
            local_4_INT = (local_4_INT + 1); // type is INT value type is INT
            __label__ = 43;
            continue $L_43;
        }
    },

    INTlength : function(thisRef) {
        var __label__ = null;
        return thisRef.data.data.length;
    },

    A1BYTEgetBytes : function(thisRef) {
        var __label__ = null;
        return thisRef.data;
    },

    jlStringtoString : function(thisRef) {
        var __label__ = null;
        var local_1_REFERENCE = thisRef; // type is REFERENCE value type is REFERENCE
        var var1 = local_1_REFERENCE; // type is REFERENCE value type is REFERENCE
        return var1;
    },

    INTcompareTojlObject : function(thisRef,p1) {
        var __label__ = null;
        var var0 = thisRef.INTcompareTojlString(thisRef,p1); // type is INT value type is INT
        return var0;
    },

    CHARcharAtINT : function(thisRef,aIndex) {
        var __label__ = null;
        var var1 = thisRef.data.data[aIndex]; // type is BYTE value type is BYTE
        return Math.floor(var1);
    },

    jlStringformatjlStringA1jlObject : function(aPattern,aValues) {
        var __label__ = null;
        return aPattern;
    },

    classInitCheck : function() {
        if (!jlString.__initialized) {
            jlString.__initialized = true;
            var thePrototype = jlString.Create.prototype;
            thePrototype.instanceOf = jlString.instanceOf;
            thePrototype.ClassgetClass = jlString.ClassgetClass;
            thePrototype.CHARcharAtINT = jlString.CHARcharAtINT;
            thePrototype.INTcompareTojlObject = jlString.INTcompareTojlObject;
            thePrototype.jlStringtoString = jlString.jlStringtoString;
            thePrototype.A1BYTEgetBytes = jlString.A1BYTEgetBytes;
            thePrototype.INTlength = jlString.INTlength;
            thePrototype.BOOLEANequalsjlObject = jlString.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlString.INThashCode;
            thePrototype.INTcompareTojlString = jlString.INTcompareTojlString;
            jlObject.classInitCheck();
            jlComparable.classInitCheck();
            jlCharSequence.classInitCheck();
            jiSerializable.classInitCheck();
        }
    },

};

var jlComparable = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 14,
    __implementedTypes : [1,14],


    classInitCheck : function() {
        if (!jlComparable.__initialized) {
            jlComparable.__initialized = true;
            jlObject.classInitCheck();
        }
    },

};

var jlCharSequence = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 15,
    __implementedTypes : [1,15],


    classInitCheck : function() {
        if (!jlCharSequence.__initialized) {
            jlCharSequence.__initialized = true;
            jlObject.classInitCheck();
        }
    },

};

var dmbiJBox2DSimulation$Scene = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 16,
    __implementedTypes : [16,1],

    Create : function() {
        this.world = null; // declared in de.mirkosertic.bytecoder.integrationtest.JBox2DSimulation$Scene
        this.axis = null; // declared in de.mirkosertic.bytecoder.integrationtest.JBox2DSimulation$Scene
        this.reel = null; // declared in de.mirkosertic.bytecoder.integrationtest.JBox2DSimulation$Scene
        this.lastCalculated = 0; // declared in de.mirkosertic.bytecoder.integrationtest.JBox2DSimulation$Scene
        this.startTime = 0; // declared in de.mirkosertic.bytecoder.integrationtest.JBox2DSimulation$Scene
    },

    instanceOf : function(aType) {
        return dmbiJBox2DSimulation$Scene.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return dmbiJBox2DSimulation$Scene;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = new ojdWorld.Create(); // type is REFERENCE value type is REFERENCE
        var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinitFLOATFLOAT(var1,0.0,-9.8);
        ojdWorld.VOIDinitojcVec2(var0,var1);
        thisRef.world = var0;
        thisRef.VOIDinitAxis(thisRef);
        thisRef.VOIDinitReel(thisRef);
        thisRef.VOIDjoinReelToAxis(thisRef);
        thisRef.VOIDinitBalls(thisRef);
        var var2 = jlSystem.LONGcurrentTimeMillis(); // type is LONG value type is LONG
        thisRef.lastCalculated = var2;
        var var3 = thisRef.lastCalculated; // type is LONG value type is LONG
        thisRef.startTime = var3;
        return;
    },

    VOIDinitAxis : function(thisRef) {
        var __label__ = null;
        var var0 = new ojdBodyDef.Create(); // type is REFERENCE value type is REFERENCE
        ojdBodyDef.VOIDinit(var0);
        var local_1_REFERENCE = var0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@633ad90f
        var var2 = local_1_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@633ad90f
        var var3 = ojdBodyType.STATIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6a951a2e
        var2.type = var3;
        var var4 = local_1_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@633ad90f
        var var5 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinitFLOATFLOAT(var5,3.0,3.0);
        var4.position = var5;
        var var8 = thisRef.world.ojdBodycreateBodyojdBodyDef(thisRef.world,local_1_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6f76d1be
        thisRef.axis = var8;
        var var9 = new ojcsCircleShape.Create(); // type is REFERENCE value type is REFERENCE
        ojcsCircleShape.VOIDinit(var9);
        var local_2_REFERENCE = var9; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@160887a4
        local_2_REFERENCE.VOIDsetRadiusFLOAT(local_2_REFERENCE,0.02);
        var var14 = local_2_REFERENCE.m_p.ojcVec2setFLOATFLOAT(local_2_REFERENCE.m_p,0.0,0.0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@540ebb21
        var var15 = new ojdFixtureDef.Create(); // type is REFERENCE value type is REFERENCE
        ojdFixtureDef.VOIDinit(var15);
        var local_3_REFERENCE = var15; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@50bd7e31
        var var17 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@50bd7e31
        var var18 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@160887a4
        var17.shape = var18;
        var var21 = thisRef.axis.ojdFixturecreateFixtureojdFixtureDef(thisRef.axis,local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@25ae625
        return;
    },

    VOIDinitReel : function(thisRef) {
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_4_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = new ojdBodyDef.Create(); // type is REFERENCE value type is REFERENCE
            ojdBodyDef.VOIDinit(var0);
            var local_1_REFERENCE = var0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@326c8104
            var var2 = local_1_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@326c8104
            var var3 = ojdBodyType.DYNAMIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@62e97627
            var2.type = var3;
            var var4 = local_1_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@326c8104
            var var5 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinitFLOATFLOAT(var5,3.0,3.0);
            var4.position = var5;
            var var8 = thisRef.world.ojdBodycreateBodyojdBodyDef(thisRef.world,local_1_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4ea4cd59
            thisRef.reel = var8;
            var var9 = new ojdFixtureDef.Create(); // type is REFERENCE value type is REFERENCE
            ojdFixtureDef.VOIDinit(var9);
            local_2_REFERENCE = var9; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5fe42992
            var var11 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5fe42992
            var11.friction = 0.5;
            var var12 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5fe42992
            var12.restitution = 0.4;
            var var13 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5fe42992
            var13.density = 1.0;
            var local_3_INT = 30; // type is INT value type is INT
            local_4_INT = 0; // type is INT value type is INT
            __label__ = 73;
            }
        $L_73 : for (;;) {
            $S_73 : {
            // NORMAL
                var var18 = local_4_INT; // type is INT value type is INT
                if ((var18 >= 30)) {
                    return;
                }
                }
            var var19 = new ojcsPolygonShape.Create(); // type is REFERENCE value type is REFERENCE
            ojcsPolygonShape.VOIDinit(var19);
            var local_5_REFERENCE = var19; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3a688898
            var local_6_DOUBLE = (((local_4_INT / 30.0) * 2.0) * 3.141592653589793); // type is DOUBLE value type is DOUBLE
            var var29 = jlMath.DOUBLEcosDOUBLE(local_6_DOUBLE); // type is DOUBLE value type is DOUBLE
            var local_8_DOUBLE = (2.7 * var29); // type is DOUBLE value type is DOUBLE
            var var34 = jlMath.DOUBLEsinDOUBLE(local_6_DOUBLE); // type is DOUBLE value type is DOUBLE
            var local_10_DOUBLE = (2.7 * var34); // type is DOUBLE value type is DOUBLE
            var local_12_DOUBLE = ((((local_4_INT + 1) / 30.0) * 2.0) * 3.141592653589793); // type is DOUBLE value type is DOUBLE
            var var47 = jlMath.DOUBLEcosDOUBLE(local_12_DOUBLE); // type is DOUBLE value type is DOUBLE
            var local_14_DOUBLE = (2.7 * var47); // type is DOUBLE value type is DOUBLE
            var var52 = jlMath.DOUBLEsinDOUBLE(local_12_DOUBLE); // type is DOUBLE value type is DOUBLE
            var local_16_DOUBLE = (2.7 * var52); // type is DOUBLE value type is DOUBLE
            var local_18_DOUBLE = ((local_6_DOUBLE + local_12_DOUBLE) / 2.0); // type is DOUBLE value type is DOUBLE
            var var63 = jlMath.DOUBLEcosDOUBLE(local_18_DOUBLE); // type is DOUBLE value type is DOUBLE
            var local_20_DOUBLE = (0.01 * var63); // type is DOUBLE value type is DOUBLE
            var var68 = jlMath.DOUBLEsinDOUBLE(local_18_DOUBLE); // type is DOUBLE value type is DOUBLE
            var local_22_DOUBLE = (0.01 * var68); // type is DOUBLE value type is DOUBLE
            var var72 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3a688898
            var var73 = bytecoder.newArray(4,null); // type is REFERENCE value type is REFERENCE
            var var74 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinitFLOATFLOAT(var74,local_8_DOUBLE,local_10_DOUBLE);
            var73.data[0] = var74;
            var var79 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinitFLOATFLOAT(var79,local_14_DOUBLE,local_16_DOUBLE);
            var73.data[1] = var79;
            var var84 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinitFLOATFLOAT(var84,(local_14_DOUBLE - local_20_DOUBLE),(local_16_DOUBLE - local_22_DOUBLE));
            var73.data[2] = var84;
            var var93 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinitFLOATFLOAT(var93,(local_8_DOUBLE - local_20_DOUBLE),(local_10_DOUBLE - local_22_DOUBLE));
            var73.data[3] = var93;
            var72.VOIDsetA1ojcVec2INT(var72,var73,4);
            var var102 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5fe42992
            var var103 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3a688898
            var102.shape = var103;
            var var106 = thisRef.reel.ojdFixturecreateFixtureojdFixtureDef(thisRef.reel,local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@45ab4182
            local_4_INT = (local_4_INT + 1); // type is INT value type is INT
            __label__ = 73;
            continue $L_73;
        }
    },

    VOIDjoinReelToAxis : function(thisRef) {
        var __label__ = null;
        var var0 = new ojdjRevoluteJointDef.Create(); // type is REFERENCE value type is REFERENCE
        ojdjRevoluteJointDef.VOIDinit(var0);
        var local_1_REFERENCE = var0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2974cc34
        var var2 = local_1_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2974cc34
        var var3 = thisRef.axis; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@c85c76f
        var2.bodyA = var3;
        var var4 = local_1_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2974cc34
        var var5 = thisRef.reel; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@32798605
        var4.bodyB = var5;
        var var8 = thisRef.world.ojdjJointcreateJointojdjJointDef(thisRef.world,local_1_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@19b13107
        return;
    },

    VOIDinitBalls : function(thisRef) {
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_6_INT = null; // type is INT # of inits = 3
        var local_5_INT = null; // type is INT # of inits = 4
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var local_1_FLOAT = 0.15; // type is FLOAT value type is FLOAT
            var var2 = new ojdBodyDef.Create(); // type is REFERENCE value type is REFERENCE
            ojdBodyDef.VOIDinit(var2);
            local_2_REFERENCE = var2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@12e638aa
            var var4 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@12e638aa
            var var5 = ojdBodyType.DYNAMIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4685f13b
            var4.type = var5;
            var var6 = new ojdFixtureDef.Create(); // type is REFERENCE value type is REFERENCE
            ojdFixtureDef.VOIDinit(var6);
            local_3_REFERENCE = var6; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3e5c73c3
            var var8 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3e5c73c3
            var8.friction = 0.3;
            var var9 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3e5c73c3
            var9.restitution = 0.3;
            var var10 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3e5c73c3
            var10.density = 0.2;
            var var11 = new ojcsCircleShape.Create(); // type is REFERENCE value type is REFERENCE
            ojcsCircleShape.VOIDinit(var11);
            var local_4_REFERENCE = var11; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6ff422eb
            var var13 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6ff422eb
            var13.m_radius = 0.15;
            var var14 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3e5c73c3
            var var15 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6ff422eb
            var14.shape = var15;
            local_5_INT = 0; // type is INT value type is INT
            __label__ = 69;
            }
        $L_69 : for (;;) {
            $S_69 : {
            // NORMAL
                var var18 = local_5_INT; // type is INT value type is INT
                if ((var18 >= 6)) {
                    return;
                }
                }
            $S_76 : {
            // NORMAL
                local_6_INT = 0; // type is INT value type is INT
                __label__ = 79;
                }
            $L_79 : for (;;) {
                $S_79 : {
                // NORMAL
                    var var21 = local_6_INT; // type is INT value type is INT
                    if ((var21 >= 6)) {
                        __label__ = 278;
                        break $S_79;
                    }
                    __label__ = 86;
                    }
                for(;;) switch (__label__) {
                    case 86 :
                    // NORMAL
                        var local_7_FLOAT = ((local_6_INT + 0.5) * 0.31); // type is FLOAT value type is FLOAT
                        var local_8_FLOAT = ((local_5_INT + 0.5) * 0.31); // type is FLOAT value type is FLOAT
                        var var35 = local_2_REFERENCE.position; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2ddc4d94
                        var var37 = (3.0 + local_7_FLOAT); // type is FLOAT value type is FLOAT
                        var35.x = var37;
                        var var39 = local_2_REFERENCE.position; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2647d2d8
                        var var41 = (3.0 + local_8_FLOAT); // type is FLOAT value type is FLOAT
                        var39.y = var41;
                        var var44 = thisRef.world.ojdBodycreateBodyojdBodyDef(thisRef.world,local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4f22e302
                        var local_9_REFERENCE = var44; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@18f6377
                        var var48 = local_9_REFERENCE.ojdFixturecreateFixtureojdFixtureDef(local_9_REFERENCE,local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4ef02e3f
                        var var50 = local_2_REFERENCE.position; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@56b9e42b
                        var var52 = (3.0 - local_7_FLOAT); // type is FLOAT value type is FLOAT
                        var50.x = var52;
                        var var54 = local_2_REFERENCE.position; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@e5b370d
                        var var56 = (3.0 + local_8_FLOAT); // type is FLOAT value type is FLOAT
                        var54.y = var56;
                        var var59 = thisRef.world.ojdBodycreateBodyojdBodyDef(thisRef.world,local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7435796a
                        var local_9_REFERENCE = var59; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3b7b3005
                        var var62 = local_9_REFERENCE.ojdFixturecreateFixtureojdFixtureDef(local_9_REFERENCE,local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@22fa13fd
                        var var64 = local_2_REFERENCE.position; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@75ceabf0
                        var var66 = (3.0 + local_7_FLOAT); // type is FLOAT value type is FLOAT
                        var64.x = var66;
                        var var68 = local_2_REFERENCE.position; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2a6f620a
                        var var70 = (3.0 - local_8_FLOAT); // type is FLOAT value type is FLOAT
                        var68.y = var70;
                        var var73 = thisRef.world.ojdBodycreateBodyojdBodyDef(thisRef.world,local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4876945a
                        var local_9_REFERENCE = var73; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3ae10352
                        var var76 = local_9_REFERENCE.ojdFixturecreateFixtureojdFixtureDef(local_9_REFERENCE,local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3af0aed5
                        var var78 = local_2_REFERENCE.position; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6b5ee4b3
                        var var80 = (3.0 - local_7_FLOAT); // type is FLOAT value type is FLOAT
                        var78.x = var80;
                        var var82 = local_2_REFERENCE.position; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@177669c6
                        var var84 = (3.0 - local_8_FLOAT); // type is FLOAT value type is FLOAT
                        var82.y = var84;
                        var var87 = thisRef.world.ojdBodycreateBodyojdBodyDef(thisRef.world,local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@253f03e9
                        var local_9_REFERENCE = var87; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1a06979d
                        var var90 = local_9_REFERENCE.ojdFixturecreateFixtureojdFixtureDef(local_9_REFERENCE,local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6619312
                        local_6_INT = (local_6_INT + 1); // type is INT value type is INT
                        __label__ = 79;
                        continue $L_79;
                    case 278 :
                    // NORMAL
                        local_5_INT = (local_5_INT + 1); // type is INT value type is INT
                        __label__ = 69;
                        continue $L_69;
                }
            }
        }
    },

    VOIDcalculate : function(thisRef) {
        var var21 = null; // type is REFERENCE # of inits = 1
        var local_4_LONG = null; // type is LONG # of inits = 2
        var local_3_INT = null; // type is INT # of inits = 3
        var var24 = null; // type is FLOAT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = jlSystem.LONGcurrentTimeMillis(); // type is LONG value type is LONG
            var local_1_LONG = var0; // type is LONG value type is LONG
            local_3_INT = Math.floor((local_1_LONG - thisRef.lastCalculated)); // type is INT value type is INT
            local_4_LONG = (local_1_LONG - thisRef.startTime); // type is LONG value type is LONG
            __label__ = 20;
            }
        $L_20 : for (;;) {
            $S_20 : {
            // NORMAL
                var var14 = local_3_INT; // type is INT value type is INT
                if ((var14 <= 10)) {
                    __label__ = 91;
                    break $S_20;
                }
                __label__ = 26;
                }
            for(;;) switch (__label__) {
                case 26 :
                // NORMAL
                    $S_26 : {
                    // NORMAL
                        var local_6_INT = Math.floor(Math.floor(((local_4_LONG + 5000) / 10000))); // type is INT value type is INT
                        var21 = thisRef.reel; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7226963a
                        var var23 = (local_6_INT % 2); // type is INT value type is INT
                        if ((var23 != 0)) {
                            __label__ = 55;
                            break $S_26;
                        }
                        __label__ = 50;
                        }
                    $M_50_55 : for(;;) switch (__label__) {
                        case 50 :
                        // NORMAL
                            var24 = 8.0; // type is FLOAT value type is FLOAT
                            break $M_50_55;
                        case 55 :
                        // NORMAL
                            var24 = -8.0; // type is FLOAT value type is FLOAT
                            break $M_50_55;
                    }
                    var21.VOIDapplyTorqueFLOAT(var21,var24);
                    thisRef.world.VOIDstepFLOATINTINT(thisRef.world,0.01,20,40);
                    var var27 = (thisRef.lastCalculated + 10); // type is LONG value type is LONG
                    thisRef.lastCalculated = var27;
                    local_3_INT = (local_3_INT + -10); // type is INT value type is INT
                    __label__ = 20;
                    continue $L_20;
                case 91 :
                // NORMAL
                    var var28 = jlSystem.LONGcurrentTimeMillis(); // type is LONG value type is LONG
                    thisRef.lastCalculated = var28;
                    return;
            }
        }
    },

    ojdWorldgetWorld : function(thisRef) {
        var __label__ = null;
        return thisRef.world;
    },

    classInitCheck : function() {
        if (!dmbiJBox2DSimulation$Scene.__initialized) {
            dmbiJBox2DSimulation$Scene.__initialized = true;
            var thePrototype = dmbiJBox2DSimulation$Scene.Create.prototype;
            thePrototype.instanceOf = dmbiJBox2DSimulation$Scene.instanceOf;
            thePrototype.ClassgetClass = dmbiJBox2DSimulation$Scene.ClassgetClass;
            thePrototype.ojdWorldgetWorld = dmbiJBox2DSimulation$Scene.ojdWorldgetWorld;
            thePrototype.VOIDcalculate = dmbiJBox2DSimulation$Scene.VOIDcalculate;
            thePrototype.VOIDinitBalls = dmbiJBox2DSimulation$Scene.VOIDinitBalls;
            thePrototype.VOIDjoinReelToAxis = dmbiJBox2DSimulation$Scene.VOIDjoinReelToAxis;
            thePrototype.VOIDinitReel = dmbiJBox2DSimulation$Scene.VOIDinitReel;
            thePrototype.VOIDinitAxis = dmbiJBox2DSimulation$Scene.VOIDinitAxis;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojdWorld = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 17,
    __implementedTypes : [1,17],
    $assertionsDisabled : false, // declared in org.jbox2d.dynamics.World
    LIQUID_INT : null, // declared in org.jbox2d.dynamics.World

    Create : function() {
        this.activeContacts = 0; // declared in org.jbox2d.dynamics.World
        this.contactPoolCount = 0; // declared in org.jbox2d.dynamics.World
        this.m_gravity = null; // declared in org.jbox2d.dynamics.World
        this.contactStacks = null; // declared in org.jbox2d.dynamics.World
        this.step = null; // declared in org.jbox2d.dynamics.World
        this.stepTimer = null; // declared in org.jbox2d.dynamics.World
        this.tempTimer = null; // declared in org.jbox2d.dynamics.World
        this.color = null; // declared in org.jbox2d.dynamics.World
        this.xf = null; // declared in org.jbox2d.dynamics.World
        this.cA = null; // declared in org.jbox2d.dynamics.World
        this.cB = null; // declared in org.jbox2d.dynamics.World
        this.avs = null; // declared in org.jbox2d.dynamics.World
        this.wqwrapper = null; // declared in org.jbox2d.dynamics.World
        this.wrcwrapper = null; // declared in org.jbox2d.dynamics.World
        this.input = null; // declared in org.jbox2d.dynamics.World
        this.island = null; // declared in org.jbox2d.dynamics.World
        this.stack = null; // declared in org.jbox2d.dynamics.World
        this.islandProfile = null; // declared in org.jbox2d.dynamics.World
        this.broadphaseTimer = null; // declared in org.jbox2d.dynamics.World
        this.toiIsland = null; // declared in org.jbox2d.dynamics.World
        this.toiInput = null; // declared in org.jbox2d.dynamics.World
        this.toiOutput = null; // declared in org.jbox2d.dynamics.World
        this.subStep = null; // declared in org.jbox2d.dynamics.World
        this.tempBodies = null; // declared in org.jbox2d.dynamics.World
        this.backup1 = null; // declared in org.jbox2d.dynamics.World
        this.backup2 = null; // declared in org.jbox2d.dynamics.World
        this.liquidLength = 0; // declared in org.jbox2d.dynamics.World
        this.averageLinearVel = 0; // declared in org.jbox2d.dynamics.World
        this.liquidOffset = null; // declared in org.jbox2d.dynamics.World
        this.circCenterMoved = null; // declared in org.jbox2d.dynamics.World
        this.liquidColor = null; // declared in org.jbox2d.dynamics.World
        this.center = null; // declared in org.jbox2d.dynamics.World
        this.axis = null; // declared in org.jbox2d.dynamics.World
        this.v1 = null; // declared in org.jbox2d.dynamics.World
        this.v2 = null; // declared in org.jbox2d.dynamics.World
        this.tlvertices = null; // declared in org.jbox2d.dynamics.World
        this.pool = null; // declared in org.jbox2d.dynamics.World
        this.m_destructionListener = null; // declared in org.jbox2d.dynamics.World
        this.m_debugDraw = null; // declared in org.jbox2d.dynamics.World
        this.m_bodyList = null; // declared in org.jbox2d.dynamics.World
        this.m_jointList = null; // declared in org.jbox2d.dynamics.World
        this.m_bodyCount = 0; // declared in org.jbox2d.dynamics.World
        this.m_jointCount = 0; // declared in org.jbox2d.dynamics.World
        this.m_warmStarting = false; // declared in org.jbox2d.dynamics.World
        this.m_continuousPhysics = false; // declared in org.jbox2d.dynamics.World
        this.m_subStepping = false; // declared in org.jbox2d.dynamics.World
        this.m_stepComplete = false; // declared in org.jbox2d.dynamics.World
        this.m_allowSleep = false; // declared in org.jbox2d.dynamics.World
        this.m_flags = 0; // declared in org.jbox2d.dynamics.World
        this.m_inv_dt0 = 0; // declared in org.jbox2d.dynamics.World
        this.m_contactManager = null; // declared in org.jbox2d.dynamics.World
        this.m_profile = null; // declared in org.jbox2d.dynamics.World
    },

    instanceOf : function(aType) {
        return ojdWorld.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdWorld;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdWorld.BOOLEANdesiredAssertionStatus(ojdWorld); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_13_9 : for(;;) switch (__label__) {
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_13_9;
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_13_9;
        }
        ojdWorld.$assertionsDisabled = var1;
        var var2 = new jlInteger.Create(); // type is REFERENCE value type is REFERENCE
        jlInteger.VOIDinitINT(var2,1234598372);
        ojdWorld.LIQUID_INT = var2;
        return;
    },

    VOIDinitojcVec2 : function(thisRef,gravity) {
        var __label__ = null;
        var var0 = new ojpnDefaultWorldPool.Create(); // type is REFERENCE value type is REFERENCE
        ojpnDefaultWorldPool.VOIDinitINTINT(var0,100,10);
        ojdWorld.VOIDinitojcVec2ojpIWorldPool(thisRef,gravity,var0);
        return;
    },

    VOIDinitojcVec2ojpIWorldPool : function(thisRef,gravity,pool) {
        var __label__ = null;
        var var0 = new ojcbDynamicTree.Create(); // type is REFERENCE value type is REFERENCE
        ojcbDynamicTree.VOIDinit(var0);
        ojdWorld.VOIDinitojcVec2ojpIWorldPoolojcbBroadPhaseStrategy(thisRef,gravity,pool,var0);
        return;
    },

    VOIDinitojcVec2ojpIWorldPoolojcbBroadPhaseStrategy : function(thisRef,gravity,argPool,broadPhaseStrategy) {
        var __label__ = null;
        thisRef.activeContacts = 0;
        thisRef.contactPoolCount = 0;
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var0);
        thisRef.m_gravity = var0;
        var var1 = ojcsShapeType.A1ojcsShapeTypevalues(); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@23724a7b
        var var2 = var1.data.length; // type is INT value type is INT
        var var3 = ojcsShapeType.A1ojcsShapeTypevalues(); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@cec909f
        var var5 = bytecoder.newMultiArray([var2,var3.data.length],null); // type is REFERENCE value type is REFERENCE
        thisRef.contactStacks = var5;
        var var6 = new ojdTimeStep.Create(); // type is REFERENCE value type is REFERENCE
        ojdTimeStep.VOIDinit(var6);
        thisRef.step = var6;
        var var7 = new ojcTimer.Create(); // type is REFERENCE value type is REFERENCE
        ojcTimer.VOIDinit(var7);
        thisRef.stepTimer = var7;
        var var8 = new ojcTimer.Create(); // type is REFERENCE value type is REFERENCE
        ojcTimer.VOIDinit(var8);
        thisRef.tempTimer = var8;
        var var9 = new ojcColor3f.Create(); // type is REFERENCE value type is REFERENCE
        ojcColor3f.VOIDinit(var9);
        thisRef.color = var9;
        var var10 = new ojcTransform.Create(); // type is REFERENCE value type is REFERENCE
        ojcTransform.VOIDinit(var10);
        thisRef.xf = var10;
        var var11 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var11);
        thisRef.cA = var11;
        var var12 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var12);
        thisRef.cB = var12;
        var var13 = new ojpaVec2Array.Create(); // type is REFERENCE value type is REFERENCE
        ojpaVec2Array.VOIDinit(var13);
        thisRef.avs = var13;
        var var14 = new ojdWorldQueryWrapper.Create(); // type is REFERENCE value type is REFERENCE
        ojdWorldQueryWrapper.VOIDinit(var14);
        thisRef.wqwrapper = var14;
        var var15 = new ojdWorldRayCastWrapper.Create(); // type is REFERENCE value type is REFERENCE
        ojdWorldRayCastWrapper.VOIDinit(var15);
        thisRef.wrcwrapper = var15;
        var var16 = new ojcRayCastInput.Create(); // type is REFERENCE value type is REFERENCE
        ojcRayCastInput.VOIDinit(var16);
        thisRef.input = var16;
        var var17 = new ojdIsland.Create(); // type is REFERENCE value type is REFERENCE
        ojdIsland.VOIDinit(var17);
        thisRef.island = var17;
        var var18 = bytecoder.newArray(10,null); // type is REFERENCE value type is REFERENCE
        thisRef.stack = var18;
        var var19 = new ojdProfile.Create(); // type is REFERENCE value type is REFERENCE
        ojdProfile.VOIDinit(var19);
        thisRef.islandProfile = var19;
        var var20 = new ojcTimer.Create(); // type is REFERENCE value type is REFERENCE
        ojcTimer.VOIDinit(var20);
        thisRef.broadphaseTimer = var20;
        var var21 = new ojdIsland.Create(); // type is REFERENCE value type is REFERENCE
        ojdIsland.VOIDinit(var21);
        thisRef.toiIsland = var21;
        var var22 = new ojcTimeOfImpact$TOIInput.Create(); // type is REFERENCE value type is REFERENCE
        ojcTimeOfImpact$TOIInput.VOIDinit(var22);
        thisRef.toiInput = var22;
        var var23 = new ojcTimeOfImpact$TOIOutput.Create(); // type is REFERENCE value type is REFERENCE
        ojcTimeOfImpact$TOIOutput.VOIDinit(var23);
        thisRef.toiOutput = var23;
        var var24 = new ojdTimeStep.Create(); // type is REFERENCE value type is REFERENCE
        ojdTimeStep.VOIDinit(var24);
        thisRef.subStep = var24;
        var var25 = bytecoder.newArray(2,null); // type is REFERENCE value type is REFERENCE
        thisRef.tempBodies = var25;
        var var26 = new ojcSweep.Create(); // type is REFERENCE value type is REFERENCE
        ojcSweep.VOIDinit(var26);
        thisRef.backup1 = var26;
        var var27 = new ojcSweep.Create(); // type is REFERENCE value type is REFERENCE
        ojcSweep.VOIDinit(var27);
        thisRef.backup2 = var27;
        thisRef.liquidLength = 0.12;
        thisRef.averageLinearVel = -1.0;
        var var28 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var28);
        thisRef.liquidOffset = var28;
        var var29 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var29);
        thisRef.circCenterMoved = var29;
        var var30 = new ojcColor3f.Create(); // type is REFERENCE value type is REFERENCE
        ojcColor3f.VOIDinitFLOATFLOATFLOAT(var30,0.4,0.4,1.0);
        thisRef.liquidColor = var30;
        var var31 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var31);
        thisRef.center = var31;
        var var32 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var32);
        thisRef.axis = var32;
        var var33 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var33);
        thisRef.v1 = var33;
        var var34 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var34);
        thisRef.v2 = var34;
        var var35 = new ojpaVec2Array.Create(); // type is REFERENCE value type is REFERENCE
        ojpaVec2Array.VOIDinit(var35);
        thisRef.tlvertices = var35;
        thisRef.pool = argPool;
        thisRef.m_destructionListener = null;
        thisRef.m_debugDraw = null;
        thisRef.m_bodyList = null;
        thisRef.m_jointList = null;
        thisRef.m_bodyCount = 0;
        thisRef.m_jointCount = 0;
        thisRef.m_warmStarting = 1;
        thisRef.m_continuousPhysics = 1;
        thisRef.m_subStepping = 0;
        thisRef.m_stepComplete = 1;
        thisRef.m_allowSleep = 1;
        var var37 = thisRef.m_gravity.ojcVec2setojcVec2(thisRef.m_gravity,gravity); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2d635fe3
        thisRef.m_flags = 4;
        thisRef.m_inv_dt0 = 0.0;
        var var38 = new ojdContactManager.Create(); // type is REFERENCE value type is REFERENCE
        ojdContactManager.VOIDinitojdWorldojcbBroadPhaseStrategy(var38,thisRef,broadPhaseStrategy);
        thisRef.m_contactManager = var38;
        var var39 = new ojdProfile.Create(); // type is REFERENCE value type is REFERENCE
        ojdProfile.VOIDinit(var39);
        thisRef.m_profile = var39;
        thisRef.VOIDinitializeRegisters(thisRef);
        return;
    },

    VOIDinitializeRegisters : function(thisRef) {
        var __label__ = null;
        var var1 = thisRef.pool.ojpIDynamicStackgetCircleContactStack(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@16a4b249
        thisRef.VOIDaddTypeojpIDynamicStackojcsShapeTypeojcsShapeType(thisRef,var1,ojcsShapeType.CIRCLE,ojcsShapeType.CIRCLE);
        var var5 = thisRef.pool.ojpIDynamicStackgetPolyCircleContactStack(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6e0e8362
        thisRef.VOIDaddTypeojpIDynamicStackojcsShapeTypeojcsShapeType(thisRef,var5,ojcsShapeType.POLYGON,ojcsShapeType.CIRCLE);
        var var9 = thisRef.pool.ojpIDynamicStackgetPolyContactStack(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7c08a200
        thisRef.VOIDaddTypeojpIDynamicStackojcsShapeTypeojcsShapeType(thisRef,var9,ojcsShapeType.POLYGON,ojcsShapeType.POLYGON);
        var var13 = thisRef.pool.ojpIDynamicStackgetEdgeCircleContactStack(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@be3dd30
        thisRef.VOIDaddTypeojpIDynamicStackojcsShapeTypeojcsShapeType(thisRef,var13,ojcsShapeType.EDGE,ojcsShapeType.CIRCLE);
        var var17 = thisRef.pool.ojpIDynamicStackgetEdgePolyContactStack(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@38e610ff
        thisRef.VOIDaddTypeojpIDynamicStackojcsShapeTypeojcsShapeType(thisRef,var17,ojcsShapeType.EDGE,ojcsShapeType.POLYGON);
        var var21 = thisRef.pool.ojpIDynamicStackgetChainCircleContactStack(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@22699112
        thisRef.VOIDaddTypeojpIDynamicStackojcsShapeTypeojcsShapeType(thisRef,var21,ojcsShapeType.CHAIN,ojcsShapeType.CIRCLE);
        var var25 = thisRef.pool.ojpIDynamicStackgetChainPolyContactStack(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1bc83ffd
        thisRef.VOIDaddTypeojpIDynamicStackojcsShapeTypeojcsShapeType(thisRef,var25,ojcsShapeType.CHAIN,ojcsShapeType.POLYGON);
        return;
    },

    VOIDaddTypeojpIDynamicStackojcsShapeTypeojcsShapeType : function(thisRef,creator,type1,type2) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = new ojdcContactRegister.Create(); // type is REFERENCE value type is REFERENCE
            ojdcContactRegister.VOIDinit(var0);
            var local_4_REFERENCE = var0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@136357df
            var var2 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@136357df
            var2.creator = creator;
            var var3 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@136357df
            var3.primary = 1;
            var var4 = thisRef.contactStacks; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3e08ff20
            var var5 = type1.INTordinal(type1); // type is INT value type is INT
            var var6 = var4.data[var5]; // type is REFERENCE value type is REFERENCE
            var var7 = type2.INTordinal(type2); // type is INT value type is INT
            var var8 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@136357df
            var6.data[var7] = var8;
            if ((type1 == type2)) {
                return;
            }
            }
        var var9 = new ojdcContactRegister.Create(); // type is REFERENCE value type is REFERENCE
        ojdcContactRegister.VOIDinit(var9);
        var local_5_REFERENCE = var9; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2ef6547e
        var var11 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2ef6547e
        var11.creator = creator;
        var var12 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2ef6547e
        var12.primary = 0;
        var var13 = thisRef.contactStacks; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@74bb225d
        var var14 = type2.INTordinal(type2); // type is INT value type is INT
        var var15 = var13.data[var14]; // type is REFERENCE value type is REFERENCE
        var var16 = type1.INTordinal(type1); // type is INT value type is INT
        var var17 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2ef6547e
        var15.data[var16] = var17;
        return;
    },

    ojdBodycreateBodyojdBodyDef : function(thisRef,def) {
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdWorld.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 21;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_6_21 : for(;;) switch (__label__) {
            case 21 :
            // NORMAL
                $S_21 : {
                // NORMAL
                    var var3 = thisRef.BOOLEANisLocked(thisRef); // type is BOOLEAN value type is BOOLEAN
                    if ((var3 == 0)) {
                        break $S_21;
                    }
                    return null;
                    }
                $S_30 : {
                // NORMAL
                    var var4 = new ojdBody.Create(); // type is REFERENCE value type is REFERENCE
                    ojdBody.VOIDinitojdBodyDefojdWorld(var4,def,thisRef);
                    local_2_REFERENCE = var4; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@f86fef7
                    var var6 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@f86fef7
                    var6.m_prev = null;
                    var var7 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@f86fef7
                    var var8 = thisRef.m_bodyList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4374c068
                    var7.m_next = var8;
                    var var9 = thisRef.m_bodyList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@25acf26
                    if (var9 == null ) {
                        __label__ = 68;
                        break $S_30;
                    }
                    __label__ = 60;
                    }
                $M_68_60 : for(;;) switch (__label__) {
                    case 68 :
                    // NORMAL
                        var var12 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@f86fef7
                        thisRef.m_bodyList = var12;
                        var var14 = (thisRef.m_bodyCount + 1); // type is INT value type is INT
                        thisRef.m_bodyCount = var14;
                        return local_2_REFERENCE;
                    case 60 :
                    // NORMAL
                        var var10 = thisRef.m_bodyList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@609e9c90
                        var var11 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@f86fef7
                        var10.m_prev = var11;
                        __label__ = 68;
                        continue $M_68_60;
                }
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    var var1 = thisRef.BOOLEANisLocked(thisRef); // type is BOOLEAN value type is BOOLEAN
                    if ((var1 == 0)) {
                        __label__ = 21;
                        continue $M_6_21;
                    }
                    }
                var var2 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var2);
                throw var2;
        }
    },

    BOOLEANisLocked : function(thisRef) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var1 = (thisRef.m_flags & 2); // type is INT value type is INT
            if ((var1 != 2)) {
                __label__ = 14;
                break $S_0;
            }
            __label__ = 10;
            }
        for(;;) switch (__label__) {
            case 10 :
            // NORMAL
                var var2 = 1; // type is INT value type is INT
                return var2;
            case 14 :
            // NORMAL
                var var2 = 0; // type is INT value type is INT
                return var2;
        }
    },

    ojpIWorldPoolgetPool : function(thisRef) {
        var __label__ = null;
        return thisRef.pool;
    },

    ojdjJointcreateJointojdjJointDef : function(thisRef,def) {
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdWorld.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 21;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_21_6 : for(;;) switch (__label__) {
            case 21 :
            // NORMAL
                $S_21 : {
                // NORMAL
                    var var2 = thisRef.BOOLEANisLocked(thisRef); // type is BOOLEAN value type is BOOLEAN
                    if ((var2 == 0)) {
                        break $S_21;
                    }
                    return null;
                    }
                $S_30 : {
                // NORMAL
                    var var3 = ojdjJoint.ojdjJointcreateojdWorldojdjJointDef(thisRef,def); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6ffd5fcf
                    local_2_REFERENCE = var3; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@377eaa18
                    var var5 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@377eaa18
                    var5.m_prev = null;
                    var var6 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@377eaa18
                    var var7 = thisRef.m_jointList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@35a2692
                    var6.m_next = var7;
                    var var8 = thisRef.m_jointList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1e75227b
                    if (var8 == null ) {
                        __label__ = 64;
                        break $S_30;
                    }
                    __label__ = 56;
                    }
                $M_56_64 : for(;;) switch (__label__) {
                    case 56 :
                    // NORMAL
                        var var9 = thisRef.m_jointList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6c11efa7
                        var var10 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@377eaa18
                        var9.m_prev = var10;
                        __label__ = 64;
                        continue $M_56_64;
                    case 64 :
                    // NORMAL
                        $S_64 : {
                        // NORMAL
                            var var11 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@377eaa18
                            thisRef.m_jointList = var11;
                            var var13 = (thisRef.m_jointCount + 1); // type is INT value type is INT
                            thisRef.m_jointCount = var13;
                            var var15 = local_2_REFERENCE.m_edgeA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6997c6cd
                            var var16 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@377eaa18
                            var15.joint = var16;
                            var var18 = local_2_REFERENCE.m_edgeA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3bab03db
                            var var20 = local_2_REFERENCE.ojdBodygetBodyB(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@c7a882f
                            var18.other = var20;
                            var var22 = local_2_REFERENCE.m_edgeA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6ff532d0
                            var22.prev = null;
                            var var24 = local_2_REFERENCE.m_edgeA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3803204d
                            var var26 = local_2_REFERENCE.ojdBodygetBodyA(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5b55594d
                            var var27 = var26.m_jointList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3b699f8
                            var24.next = var27;
                            var var29 = local_2_REFERENCE.ojdBodygetBodyA(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@459358ec
                            var var30 = var29.m_jointList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6433095b
                            if (var30 == null ) {
                                __label__ = 144;
                                break $S_64;
                            }
                            __label__ = 130;
                            }
                        $M_144_130 : for(;;) switch (__label__) {
                            case 144 :
                            // NORMAL
                                $S_144 : {
                                // NORMAL
                                    var var37 = local_2_REFERENCE.ojdBodygetBodyA(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@155daba1
                                    var var39 = local_2_REFERENCE.m_edgeA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@221399ab
                                    var37.m_jointList = var39;
                                    var var41 = local_2_REFERENCE.m_edgeB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7d18e13d
                                    var var42 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@377eaa18
                                    var41.joint = var42;
                                    var var44 = local_2_REFERENCE.m_edgeB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@19d5614
                                    var var46 = local_2_REFERENCE.ojdBodygetBodyA(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@79e5f525
                                    var44.other = var46;
                                    var var48 = local_2_REFERENCE.m_edgeB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4705e573
                                    var48.prev = null;
                                    var var50 = local_2_REFERENCE.m_edgeB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7d2ef5a7
                                    var var52 = local_2_REFERENCE.ojdBodygetBodyB(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@16e821e0
                                    var var53 = var52.m_jointList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@40f2a2c5
                                    var50.next = var53;
                                    var var55 = local_2_REFERENCE.ojdBodygetBodyB(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@28b4e9d5
                                    var var56 = var55.m_jointList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@223db2a9
                                    if (var56 == null ) {
                                        __label__ = 220;
                                        break $S_144;
                                    }
                                    __label__ = 206;
                                    }
                                $M_220_206 : for(;;) switch (__label__) {
                                    case 220 :
                                    // NORMAL
                                        $S_220 : {
                                        // NORMAL
                                            var var63 = local_2_REFERENCE.ojdBodygetBodyB(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@750d602f
                                            var var65 = local_2_REFERENCE.m_edgeB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@20bc00c1
                                            var63.m_jointList = var65;
                                            local_3_REFERENCE = def.bodyA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2f49bf42
                                            local_4_REFERENCE = def.bodyB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@60aee8f8
                                            var var70 = def.collideConnected; // type is BOOLEAN value type is BOOLEAN
                                            if ((var70 != 0)) {
                                                return local_2_REFERENCE;
                                            }
                                            }
                                        $S_249 : {
                                        // NORMAL
                                            var var72 = local_4_REFERENCE.ojdcContactEdgegetContactList(local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7ebcf0da
                                            local_5_REFERENCE = var72; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@384f6829
                                            __label__ = 256;
                                            }
                                        $L_256 : for (;;) {
                                            $S_256 : {
                                            // NORMAL
                                                var var74 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@384f6829
                                                if (var74 == null ) {
                                                    return local_2_REFERENCE;
                                                }
                                                }
                                            $S_261 : {
                                            // NORMAL
                                                var var76 = local_5_REFERENCE.other; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3ec64dc4
                                                var var77 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@63837ca
                                                if ((var76 != var77)) {
                                                    __label__ = 278;
                                                    break $S_261;
                                                }
                                                __label__ = 270;
                                                }
                                            $M_270_278 : for(;;) switch (__label__) {
                                                case 278 :
                                                // NORMAL
                                                    local_5_REFERENCE = local_5_REFERENCE.next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5c1746f1
                                                    __label__ = 256;
                                                    continue $L_256;
                                                case 270 :
                                                // NORMAL
                                                    local_5_REFERENCE.contact.VOIDflagForFiltering(local_5_REFERENCE.contact);
                                                    __label__ = 278;
                                                    continue $M_270_278;
                                            }
                                        }
                                    case 206 :
                                    // NORMAL
                                        var var58 = local_2_REFERENCE.ojdBodygetBodyB(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4be99ca3
                                        var var59 = var58.m_jointList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@524a9f24
                                        var var61 = local_2_REFERENCE.m_edgeB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5e6e50c4
                                        var59.prev = var61;
                                        __label__ = 220;
                                        continue $M_220_206;
                                }
                            case 130 :
                            // NORMAL
                                var var32 = local_2_REFERENCE.ojdBodygetBodyA(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3828a536
                                var var33 = var32.m_jointList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3fa33a14
                                var var35 = local_2_REFERENCE.m_edgeA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3916317b
                                var33.prev = var35;
                                __label__ = 144;
                                continue $M_144_130;
                        }
                }
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    var var1 = thisRef.BOOLEANisLocked(thisRef); // type is BOOLEAN value type is BOOLEAN
                    if ((var1 == 0)) {
                        __label__ = 21;
                        continue $M_21_6;
                    }
                    }
                var var82 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var82);
                throw var82;
        }
    },

    VOIDstepFLOATINTINT : function(thisRef,dt,velocityIterations,positionIterations) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            thisRef.stepTimer.VOIDreset(thisRef.stepTimer);
            var var2 = (thisRef.m_flags & 1); // type is INT value type is INT
            if ((var2 != 1)) {
                __label__ = 35;
                break $S_0;
            }
            __label__ = 17;
            }
        $M_35_17 : for(;;) switch (__label__) {
            case 17 :
            // NORMAL
                thisRef.m_contactManager.VOIDfindNewContacts(thisRef.m_contactManager);
                var var5 = (thisRef.m_flags & -2); // type is INT value type is INT
                thisRef.m_flags = var5;
                __label__ = 35;
                continue $M_35_17;
            case 35 :
            // NORMAL
                $S_35 : {
                // NORMAL
                    var var7 = (thisRef.m_flags | 2); // type is INT value type is INT
                    thisRef.m_flags = var7;
                    var var8 = thisRef.step; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7ea5d9a6
                    var8.dt = dt;
                    var var9 = thisRef.step; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4e7e2821
                    var9.velocityIterations = velocityIterations;
                    var var10 = thisRef.step; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@57fe647e
                    var10.positionIterations = positionIterations;
                    if ((dt <= 0.0)) {
                        __label__ = 88;
                        break $S_35;
                    }
                    __label__ = 75;
                    }
                $M_75_88 : for(;;) switch (__label__) {
                    case 88 :
                    // NORMAL
                        var var14 = thisRef.step; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@332a10d8
                        var14.inv_dt = 0.0;
                        break $M_75_88;
                    case 75 :
                    // NORMAL
                        var var12 = thisRef.step; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@639287f2
                        var var13 = (1.0 / dt); // type is FLOAT value type is FLOAT
                        var12.inv_dt = var13;
                        break $M_75_88;
                }
                $S_96 : {
                // NORMAL
                    var var15 = thisRef.step; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5c929481
                    var var17 = (thisRef.m_inv_dt0 * dt); // type is FLOAT value type is FLOAT
                    var15.dtRatio = var17;
                    var var18 = thisRef.step; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@786bd6f9
                    var var19 = thisRef.m_warmStarting; // type is BOOLEAN value type is BOOLEAN
                    var18.warmStarting = var19;
                    thisRef.tempTimer.VOIDreset(thisRef.tempTimer);
                    thisRef.m_contactManager.VOIDcollide(thisRef.m_contactManager);
                    var var22 = thisRef.m_profile; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1b24a5fc
                    var var24 = thisRef.tempTimer.FLOATgetMilliseconds(thisRef.tempTimer); // type is FLOAT value type is FLOAT
                    var22.collide = var24;
                    var var25 = thisRef.m_stepComplete; // type is BOOLEAN value type is BOOLEAN
                    if ((var25 == 0)) {
                        __label__ = 196;
                        break $S_96;
                    }
                    __label__ = 155;
                    }
                $M_196_155 : for(;;) switch (__label__) {
                    case 155 :
                    // NORMAL
                        $S_155 : {
                        // NORMAL
                            var var27 = thisRef.step.dt; // type is FLOAT value type is FLOAT
                            if ((var27 <= 0.0)) {
                                __label__ = 196;
                                continue $M_196_155;
                            }
                            }
                        thisRef.tempTimer.VOIDreset(thisRef.tempTimer);
                        thisRef.VOIDsolveojdTimeStep(thisRef,thisRef.step);
                        var var31 = thisRef.m_profile; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6c7e0c7d
                        var var33 = thisRef.tempTimer.FLOATgetMilliseconds(thisRef.tempTimer); // type is FLOAT value type is FLOAT
                        var31.solve = var33;
                        __label__ = 196;
                        continue $M_196_155;
                    case 196 :
                    // NORMAL
                        $S_196 : {
                        // NORMAL
                            var var34 = thisRef.m_continuousPhysics; // type is BOOLEAN value type is BOOLEAN
                            if ((var34 == 0)) {
                                __label__ = 244;
                                break $S_196;
                            }
                            __label__ = 203;
                            }
                        $M_244_203 : for(;;) switch (__label__) {
                            case 203 :
                            // NORMAL
                                $S_203 : {
                                // NORMAL
                                    var var36 = thisRef.step.dt; // type is FLOAT value type is FLOAT
                                    if ((var36 <= 0.0)) {
                                        __label__ = 244;
                                        continue $M_244_203;
                                    }
                                    }
                                thisRef.tempTimer.VOIDreset(thisRef.tempTimer);
                                thisRef.VOIDsolveTOIojdTimeStep(thisRef,thisRef.step);
                                var var40 = thisRef.m_profile; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2480abef
                                var var42 = thisRef.tempTimer.FLOATgetMilliseconds(thisRef.tempTimer); // type is FLOAT value type is FLOAT
                                var40.solveTOI = var42;
                                __label__ = 244;
                                continue $M_244_203;
                            case 244 :
                            // NORMAL
                                $S_244 : {
                                // NORMAL
                                    var var44 = thisRef.step.dt; // type is FLOAT value type is FLOAT
                                    if ((var44 <= 0.0)) {
                                        __label__ = 267;
                                        break $S_244;
                                    }
                                    __label__ = 256;
                                    }
                                $M_256_267 : for(;;) switch (__label__) {
                                    case 267 :
                                    // NORMAL
                                        $S_267 : {
                                        // NORMAL
                                            var var49 = (thisRef.m_flags & 4); // type is INT value type is INT
                                            if ((var49 != 4)) {
                                                __label__ = 281;
                                                break $S_267;
                                            }
                                            __label__ = 277;
                                            }
                                        $M_281_277 : for(;;) switch (__label__) {
                                            case 281 :
                                            // NORMAL
                                                var var51 = (thisRef.m_flags & -3); // type is INT value type is INT
                                                thisRef.m_flags = var51;
                                                var var52 = thisRef.m_profile; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@27a7d98
                                                var var54 = thisRef.stepTimer.FLOATgetMilliseconds(thisRef.stepTimer); // type is FLOAT value type is FLOAT
                                                var52.step = var54;
                                                return;
                                            case 277 :
                                            // NORMAL
                                                thisRef.VOIDclearForces(thisRef);
                                                __label__ = 281;
                                                continue $M_281_277;
                                        }
                                    case 256 :
                                    // NORMAL
                                        var var47 = thisRef.step.inv_dt; // type is FLOAT value type is FLOAT
                                        thisRef.m_inv_dt0 = var47;
                                        __label__ = 267;
                                        continue $M_256_267;
                                }
                        }
                }
        }
    },

    VOIDpushContactojdcContact : function(thisRef,contact) {
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = contact.ojdFixturegetFixtureA(contact); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@56508c22
            local_2_REFERENCE = var0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@79c58b73
            var var2 = contact.ojdFixturegetFixtureB(contact); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1286a5cd
            local_3_REFERENCE = var2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3821b520
            var var5 = contact.m_manifold.pointCount; // type is INT value type is INT
            if ((var5 <= 0)) {
                __label__ = 50;
                break $S_0;
            }
            __label__ = 20;
            }
        $M_50_20 : for(;;) switch (__label__) {
            case 50 :
            // NORMAL
                var var15 = local_2_REFERENCE.ojcsShapeTypegetType(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6b3b4328
                var local_4_REFERENCE = var15; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4c50644e
                var var18 = local_3_REFERENCE.ojcsShapeTypegetType(local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1eb3d07a
                var local_5_REFERENCE = var18; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@393cb6ac
                var var20 = thisRef.contactStacks; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@82f90a0
                var var22 = local_4_REFERENCE.INTordinal(local_4_REFERENCE); // type is INT value type is INT
                var var23 = var20.data[var22]; // type is REFERENCE value type is REFERENCE
                var var25 = local_5_REFERENCE.INTordinal(local_5_REFERENCE); // type is INT value type is INT
                var var26 = var23.data[var25]; // type is REFERENCE value type is REFERENCE
                var local_6_REFERENCE = var26.creator; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4712f7ff
                local_6_REFERENCE.VOIDpushjlObject(local_6_REFERENCE,contact);
                return;
            case 20 :
            // NORMAL
                $S_20 : {
                // NORMAL
                    var var7 = local_2_REFERENCE.BOOLEANisSensor(local_2_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                    if ((var7 != 0)) {
                        __label__ = 50;
                        continue $M_50_20;
                    }
                    }
                $S_27 : {
                // NORMAL
                    var var9 = local_3_REFERENCE.BOOLEANisSensor(local_3_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                    if ((var9 != 0)) {
                        __label__ = 50;
                        continue $M_50_20;
                    }
                    }
                var var11 = local_2_REFERENCE.ojdBodygetBody(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@47a2cf67
                var11.VOIDsetAwakeBOOLEAN(var11,1);
                var var13 = local_3_REFERENCE.ojdBodygetBody(local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1bf788e9
                var13.VOIDsetAwakeBOOLEAN(var13,1);
                __label__ = 50;
                continue $M_50_20;
        }
    },

    VOIDsolveojdTimeStep : function(thisRef,step) {
        var local_10_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 7
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 9
        var local_2_INT = null; // type is INT # of inits = 6
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 9
        var local_7_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_9_BOOLEAN = null; // type is BOOLEAN # of inits = 1
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_4_INT = null; // type is INT # of inits = 9
        var local_5_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.m_profile; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@28ab499e
            var0.solveInit = 0.0;
            var var1 = thisRef.m_profile; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5bcd9fd8
            var1.solveVelocity = 0.0;
            var var2 = thisRef.m_profile; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@599e566d
            var2.solvePosition = 0.0;
            thisRef.island.VOIDinitINTINTINTojcContactListener(thisRef.island,thisRef.m_bodyCount,thisRef.m_contactManager.m_contactCount,thisRef.m_jointCount,thisRef.m_contactManager.m_contactListener);
            local_2_REFERENCE = thisRef.m_bodyList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1924b3d3
            __label__ = 58;
            }
        $L_58 : for (;;) {
            $S_58 : {
            // NORMAL
                var var12 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2ecb5711
                if (var12 == null ) {
                    __label__ = 81;
                    break $S_58;
                }
                __label__ = 62;
                }
            for(;;) switch (__label__) {
                case 62 :
                // NORMAL
                    var var179 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2ecb5711
                    var var181 = (var179.m_flags & -2); // type is INT value type is INT
                    var179.m_flags = var181;
                    local_2_REFERENCE = local_2_REFERENCE.m_next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6b31fed0
                    __label__ = 58;
                    continue $L_58;
                case 81 :
                // NORMAL
                    $S_81 : {
                    // NORMAL
                        local_2_REFERENCE = thisRef.m_contactManager.m_contactList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5c359f31
                        __label__ = 89;
                        }
                    $L_89 : for (;;) {
                        $S_89 : {
                        // NORMAL
                            var var15 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2ecb5711
                            if (var15 == null ) {
                                __label__ = 112;
                                break $S_89;
                            }
                            __label__ = 93;
                            }
                        for(;;) switch (__label__) {
                            case 112 :
                            // NORMAL
                                $S_112 : {
                                // NORMAL
                                    local_2_REFERENCE = thisRef.m_jointList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@773387e4
                                    __label__ = 117;
                                    }
                                $L_117 : for (;;) {
                                    $S_117 : {
                                    // NORMAL
                                        var var17 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2ecb5711
                                        if (var17 == null ) {
                                            __label__ = 134;
                                            break $S_117;
                                        }
                                        __label__ = 121;
                                        }
                                    for(;;) switch (__label__) {
                                        case 121 :
                                        // NORMAL
                                            var var122 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2ecb5711
                                            var122.m_islandFlag = 0;
                                            local_2_REFERENCE = local_2_REFERENCE.m_next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4b3518fa
                                            __label__ = 117;
                                            continue $L_117;
                                        case 134 :
                                        // NORMAL
                                            $S_134 : {
                                            // NORMAL
                                                local_2_INT = thisRef.m_bodyCount; // type is INT value type is INT
                                                var var22 = thisRef.stack.data.length; // type is INT value type is INT
                                                var var23 = local_2_INT; // type is INT value type is INT
                                                if ((var22 >= var23)) {
                                                    __label__ = 156;
                                                    break $S_134;
                                                }
                                                __label__ = 148;
                                                }
                                            $M_148_156 : for(;;) switch (__label__) {
                                                case 148 :
                                                // NORMAL
                                                    var var25 = bytecoder.newArray(local_2_INT,null); // type is REFERENCE value type is REFERENCE
                                                    thisRef.stack = var25;
                                                    __label__ = 156;
                                                    continue $M_148_156;
                                                case 156 :
                                                // NORMAL
                                                    $S_156 : {
                                                    // NORMAL
                                                        local_3_REFERENCE = thisRef.m_bodyList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2f16b832
                                                        __label__ = 161;
                                                        }
                                                    $L_161 : for (;;) {
                                                        $S_161 : {
                                                        // NORMAL
                                                            var var28 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@73b35e60
                                                            if (var28 == null ) {
                                                                __label__ = 764;
                                                                break $S_161;
                                                            }
                                                            __label__ = 165;
                                                            }
                                                        for(;;) switch (__label__) {
                                                            case 764 :
                                                            // NORMAL
                                                                $S_764 : {
                                                                // NORMAL
                                                                    thisRef.broadphaseTimer.VOIDreset(thisRef.broadphaseTimer);
                                                                    local_3_REFERENCE = thisRef.m_bodyList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5f2a66f6
                                                                    __label__ = 776;
                                                                    }
                                                                $L_776 : for (;;) {
                                                                    $S_776 : {
                                                                    // NORMAL
                                                                        var var31 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@73b35e60
                                                                        if (var31 == null ) {
                                                                            __label__ = 817;
                                                                            break $S_776;
                                                                        }
                                                                        __label__ = 780;
                                                                        }
                                                                    for(;;) switch (__label__) {
                                                                        case 817 :
                                                                        // NORMAL
                                                                            thisRef.m_contactManager.VOIDfindNewContacts(thisRef.m_contactManager);
                                                                            var var33 = thisRef.m_profile; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@34cdd650
                                                                            var var35 = thisRef.broadphaseTimer.FLOATgetMilliseconds(thisRef.broadphaseTimer); // type is FLOAT value type is FLOAT
                                                                            var33.broadphase = var35;
                                                                            return;
                                                                        case 780 :
                                                                        // NORMAL
                                                                            $S_780 : {
                                                                            // NORMAL
                                                                                var var195 = (local_3_REFERENCE.m_flags & 1); // type is INT value type is INT
                                                                                if ((var195 != 0)) {
                                                                                    __label__ = 792;
                                                                                    break $S_780;
                                                                                }
                                                                                __label__ = 789;
                                                                                }
                                                                            $M_792_789 : for(;;) switch (__label__) {
                                                                                case 792 :
                                                                                // NORMAL
                                                                                    $S_792 : {
                                                                                    // NORMAL
                                                                                        var var197 = local_3_REFERENCE.ojdBodyTypegetType(local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@575ceafb
                                                                                        var var198 = ojdBodyType.STATIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4d111f0a
                                                                                        if ((var197 != var198)) {
                                                                                            __label__ = 805;
                                                                                            break $S_792;
                                                                                        }
                                                                                        __label__ = 802;
                                                                                        }
                                                                                    for(;;) switch (__label__) {
                                                                                        case 805 :
                                                                                        // NORMAL
                                                                                            local_3_REFERENCE.VOIDsynchronizeFixtures(local_3_REFERENCE);
                                                                                            break $M_792_789;
                                                                                        case 802 :
                                                                                        // NORMAL
                                                                                            break $M_792_789;
                                                                                    }
                                                                                case 789 :
                                                                                // NORMAL
                                                                                    break $M_792_789;
                                                                            }
                                                                            var var201 = local_3_REFERENCE.ojdBodygetNext(local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4180cd88
                                                                            local_3_REFERENCE = var201; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@60539fd3
                                                                            __label__ = 776;
                                                                            continue $L_776;
                                                                    }
                                                                }
                                                            case 165 :
                                                            // NORMAL
                                                                $S_165 : {
                                                                // NORMAL
                                                                    var var38 = (local_3_REFERENCE.m_flags & 1); // type is INT value type is INT
                                                                    if ((var38 != 1)) {
                                                                        __label__ = 178;
                                                                        break $S_165;
                                                                    }
                                                                    __label__ = 175;
                                                                    }
                                                                $M_175_178 : for(;;) switch (__label__) {
                                                                    case 175 :
                                                                    // NORMAL
                                                                        break $M_175_178;
                                                                    case 178 :
                                                                    // NORMAL
                                                                        $S_178 : {
                                                                        // NORMAL
                                                                            var var40 = local_3_REFERENCE.BOOLEANisAwake(local_3_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                                                            if ((var40 == 0)) {
                                                                                break $M_175_178;
                                                                            }
                                                                            }
                                                                        $S_185 : {
                                                                        // NORMAL
                                                                            var var42 = local_3_REFERENCE.BOOLEANisActive(local_3_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                                                            if ((var42 != 0)) {
                                                                                __label__ = 195;
                                                                                break $S_185;
                                                                            }
                                                                            __label__ = 192;
                                                                            }
                                                                        for(;;) switch (__label__) {
                                                                            case 192 :
                                                                            // NORMAL
                                                                                break $M_175_178;
                                                                            case 195 :
                                                                            // NORMAL
                                                                                $S_195 : {
                                                                                // NORMAL
                                                                                    var var44 = local_3_REFERENCE.ojdBodyTypegetType(local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1ba5ecbe
                                                                                    var var45 = ojdBodyType.STATIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2b1ed603
                                                                                    if ((var44 != var45)) {
                                                                                        __label__ = 208;
                                                                                        break $S_195;
                                                                                    }
                                                                                    __label__ = 205;
                                                                                    }
                                                                                for(;;) switch (__label__) {
                                                                                    case 208 :
                                                                                    // NORMAL
                                                                                        $S_208 : {
                                                                                        // NORMAL
                                                                                            thisRef.island.VOIDclear(thisRef.island);
                                                                                            local_4_INT = 0; // type is INT value type is INT
                                                                                            var var49 = thisRef.stack; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@6eb26525
                                                                                            var var50 = local_4_INT; // type is INT value type is INT
                                                                                            local_4_INT = (local_4_INT + 1); // type is INT value type is INT
                                                                                            var var51 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@73b35e60
                                                                                            var49.data[var50] = var51;
                                                                                            var var52 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@73b35e60
                                                                                            var var54 = (var52.m_flags | 1); // type is INT value type is INT
                                                                                            var52.m_flags = var54;
                                                                                            __label__ = 239;
                                                                                            }
                                                                                        $L_239 : for (;;) {
                                                                                            $S_239 : {
                                                                                            // NORMAL
                                                                                                var var55 = local_4_INT; // type is INT value type is INT
                                                                                                if ((var55 <= 0)) {
                                                                                                    __label__ = 623;
                                                                                                    break $S_239;
                                                                                                }
                                                                                                __label__ = 244;
                                                                                                }
                                                                                            for(;;) switch (__label__) {
                                                                                                case 244 :
                                                                                                // NORMAL
                                                                                                    $S_244 : {
                                                                                                    // NORMAL
                                                                                                        var var56 = thisRef.stack; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@291919f6
                                                                                                        local_4_INT = (local_4_INT + -1); // type is INT value type is INT
                                                                                                        var var58 = var56.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                                                                                                        local_5_REFERENCE = var58; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@6ef2ed6d
                                                                                                        var var60 = ojdWorld.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                                                                                                        if ((var60 != 0)) {
                                                                                                            __label__ = 279;
                                                                                                            break $S_244;
                                                                                                        }
                                                                                                        __label__ = 262;
                                                                                                        }
                                                                                                    $M_262_279 : for(;;) switch (__label__) {
                                                                                                        case 262 :
                                                                                                        // NORMAL
                                                                                                            $S_262 : {
                                                                                                            // NORMAL
                                                                                                                var var62 = local_5_REFERENCE.BOOLEANisActive(local_5_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                                                                                                if ((var62 == 1)) {
                                                                                                                    __label__ = 279;
                                                                                                                    continue $M_262_279;
                                                                                                                }
                                                                                                                }
                                                                                                            var var178 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                                                                                            jlAssertionError.VOIDinit(var178);
                                                                                                            throw var178;
                                                                                                        case 279 :
                                                                                                        // NORMAL
                                                                                                            $S_279 : {
                                                                                                            // NORMAL
                                                                                                                thisRef.island.VOIDaddojdBody(thisRef.island,local_5_REFERENCE);
                                                                                                                local_5_REFERENCE.VOIDsetAwakeBOOLEAN(local_5_REFERENCE,1);
                                                                                                                var var67 = local_5_REFERENCE.ojdBodyTypegetType(local_5_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1dedd077
                                                                                                                var var68 = ojdBodyType.STATIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@401ea307
                                                                                                                if ((var67 != var68)) {
                                                                                                                    __label__ = 308;
                                                                                                                    break $S_279;
                                                                                                                }
                                                                                                                __label__ = 305;
                                                                                                                }
                                                                                                            for(;;) switch (__label__) {
                                                                                                                case 308 :
                                                                                                                // NORMAL
                                                                                                                    $S_308 : {
                                                                                                                    // NORMAL
                                                                                                                        local_6_REFERENCE = local_5_REFERENCE.m_contactList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3df86d6c
                                                                                                                        __label__ = 315;
                                                                                                                        }
                                                                                                                    $L_315 : for (;;) {
                                                                                                                        $S_315 : {
                                                                                                                        // NORMAL
                                                                                                                            var var72 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7223616d
                                                                                                                            if (var72 == null ) {
                                                                                                                                __label__ = 487;
                                                                                                                                break $S_315;
                                                                                                                            }
                                                                                                                            __label__ = 320;
                                                                                                                            }
                                                                                                                        for(;;) switch (__label__) {
                                                                                                                            case 487 :
                                                                                                                            // NORMAL
                                                                                                                                $S_487 : {
                                                                                                                                // NORMAL
                                                                                                                                    local_6_REFERENCE = local_5_REFERENCE.m_jointList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5c4f058c
                                                                                                                                    __label__ = 494;
                                                                                                                                    }
                                                                                                                                $L_494 : for (;;) {
                                                                                                                                    $S_494 : {
                                                                                                                                    // NORMAL
                                                                                                                                        var var75 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7223616d
                                                                                                                                        if (var75 == null ) {
                                                                                                                                            __label__ = 620;
                                                                                                                                            break $S_494;
                                                                                                                                        }
                                                                                                                                        __label__ = 499;
                                                                                                                                        }
                                                                                                                                    for(;;) switch (__label__) {
                                                                                                                                        case 620 :
                                                                                                                                        // NORMAL
                                                                                                                                            __label__ = 239;
                                                                                                                                            continue $L_239;
                                                                                                                                        case 499 :
                                                                                                                                        // NORMAL
                                                                                                                                            $S_499 : {
                                                                                                                                            // NORMAL
                                                                                                                                                var var78 = local_6_REFERENCE.joint.m_islandFlag; // type is BOOLEAN value type is BOOLEAN
                                                                                                                                                if ((var78 != 1)) {
                                                                                                                                                    __label__ = 514;
                                                                                                                                                    break $S_499;
                                                                                                                                                }
                                                                                                                                                __label__ = 511;
                                                                                                                                                }
                                                                                                                                            $M_514_511 : for(;;) switch (__label__) {
                                                                                                                                                case 511 :
                                                                                                                                                // NORMAL
                                                                                                                                                    break $M_514_511;
                                                                                                                                                case 514 :
                                                                                                                                                // NORMAL
                                                                                                                                                    $S_514 : {
                                                                                                                                                    // NORMAL
                                                                                                                                                        local_7_REFERENCE = local_6_REFERENCE.other; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2fd2181a
                                                                                                                                                        var var83 = local_7_REFERENCE.BOOLEANisActive(local_7_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                                                                                                                                        if ((var83 != 0)) {
                                                                                                                                                            __label__ = 532;
                                                                                                                                                            break $S_514;
                                                                                                                                                        }
                                                                                                                                                        __label__ = 529;
                                                                                                                                                        }
                                                                                                                                                    for(;;) switch (__label__) {
                                                                                                                                                        case 532 :
                                                                                                                                                        // NORMAL
                                                                                                                                                            $S_532 : {
                                                                                                                                                            // NORMAL
                                                                                                                                                                thisRef.island.VOIDaddojdjJoint(thisRef.island,local_6_REFERENCE.joint);
                                                                                                                                                                var var88 = local_6_REFERENCE.joint; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1ae1807c
                                                                                                                                                                var88.m_islandFlag = 1;
                                                                                                                                                                var var91 = (local_7_REFERENCE.m_flags & 1); // type is INT value type is INT
                                                                                                                                                                if ((var91 != 1)) {
                                                                                                                                                                    __label__ = 567;
                                                                                                                                                                    break $S_532;
                                                                                                                                                                }
                                                                                                                                                                __label__ = 564;
                                                                                                                                                                }
                                                                                                                                                            for(;;) switch (__label__) {
                                                                                                                                                                case 567 :
                                                                                                                                                                // NORMAL
                                                                                                                                                                    $S_567 : {
                                                                                                                                                                    // NORMAL
                                                                                                                                                                        var var92 = ojdWorld.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                                                                                                                                                                        if ((var92 != 0)) {
                                                                                                                                                                            __label__ = 587;
                                                                                                                                                                            break $S_567;
                                                                                                                                                                        }
                                                                                                                                                                        __label__ = 573;
                                                                                                                                                                        }
                                                                                                                                                                    $M_573_587 : for(;;) switch (__label__) {
                                                                                                                                                                        case 573 :
                                                                                                                                                                        // NORMAL
                                                                                                                                                                            $S_573 : {
                                                                                                                                                                            // NORMAL
                                                                                                                                                                                var var93 = local_4_INT; // type is INT value type is INT
                                                                                                                                                                                var var94 = local_2_INT; // type is INT value type is INT
                                                                                                                                                                                if ((var93 < var94)) {
                                                                                                                                                                                    __label__ = 587;
                                                                                                                                                                                    continue $M_573_587;
                                                                                                                                                                                }
                                                                                                                                                                                }
                                                                                                                                                                            var var95 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                                                                                                                                                            jlAssertionError.VOIDinit(var95);
                                                                                                                                                                            throw var95;
                                                                                                                                                                        case 587 :
                                                                                                                                                                        // NORMAL
                                                                                                                                                                            var var184 = thisRef.stack; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@640c1d41
                                                                                                                                                                            var var185 = local_4_INT; // type is INT value type is INT
                                                                                                                                                                            local_4_INT = (local_4_INT + 1); // type is INT value type is INT
                                                                                                                                                                            var var186 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@28a6a1b0
                                                                                                                                                                            var184.data[var185] = var186;
                                                                                                                                                                            var var187 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@28a6a1b0
                                                                                                                                                                            var var189 = (var187.m_flags | 1); // type is INT value type is INT
                                                                                                                                                                            var187.m_flags = var189;
                                                                                                                                                                            break $M_514_511;
                                                                                                                                                                    }
                                                                                                                                                                case 564 :
                                                                                                                                                                // NORMAL
                                                                                                                                                                    break $M_514_511;
                                                                                                                                                            }
                                                                                                                                                        case 529 :
                                                                                                                                                        // NORMAL
                                                                                                                                                            break $M_514_511;
                                                                                                                                                    }
                                                                                                                                            }
                                                                                                                                            local_6_REFERENCE = local_6_REFERENCE.next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@40cb1729
                                                                                                                                            __label__ = 494;
                                                                                                                                            continue $L_494;
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            case 320 :
                                                                                                                            // NORMAL
                                                                                                                                $S_320 : {
                                                                                                                                // NORMAL
                                                                                                                                    local_7_REFERENCE = local_6_REFERENCE.contact; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7f66d5e2
                                                                                                                                    var var139 = (local_7_REFERENCE.m_flags & 1); // type is INT value type is INT
                                                                                                                                    if ((var139 != 1)) {
                                                                                                                                        __label__ = 341;
                                                                                                                                        break $S_320;
                                                                                                                                    }
                                                                                                                                    __label__ = 338;
                                                                                                                                    }
                                                                                                                                $M_341_338 : for(;;) switch (__label__) {
                                                                                                                                    case 338 :
                                                                                                                                    // NORMAL
                                                                                                                                        break $M_341_338;
                                                                                                                                    case 341 :
                                                                                                                                    // NORMAL
                                                                                                                                        $S_341 : {
                                                                                                                                        // NORMAL
                                                                                                                                            var var141 = local_7_REFERENCE.BOOLEANisEnabled(local_7_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                                                                                                                            if ((var141 == 0)) {
                                                                                                                                                break $M_341_338;
                                                                                                                                            }
                                                                                                                                            }
                                                                                                                                        $S_349 : {
                                                                                                                                        // NORMAL
                                                                                                                                            var var143 = local_7_REFERENCE.BOOLEANisTouching(local_7_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                                                                                                                            if ((var143 != 0)) {
                                                                                                                                                __label__ = 360;
                                                                                                                                                break $S_349;
                                                                                                                                            }
                                                                                                                                            __label__ = 357;
                                                                                                                                            }
                                                                                                                                        for(;;) switch (__label__) {
                                                                                                                                            case 357 :
                                                                                                                                            // NORMAL
                                                                                                                                                break $M_341_338;
                                                                                                                                            case 360 :
                                                                                                                                            // NORMAL
                                                                                                                                                $S_360 : {
                                                                                                                                                // NORMAL
                                                                                                                                                    var local_8_BOOLEAN = local_7_REFERENCE.m_fixtureA.m_isSensor; // type is BOOLEAN value type is BOOLEAN
                                                                                                                                                    local_9_BOOLEAN = local_7_REFERENCE.m_fixtureB.m_isSensor; // type is BOOLEAN value type is BOOLEAN
                                                                                                                                                    var var154 = local_8_BOOLEAN; // type is BOOLEAN value type is BOOLEAN
                                                                                                                                                    if ((var154 != 0)) {
                                                                                                                                                        break $M_341_338;
                                                                                                                                                    }
                                                                                                                                                    }
                                                                                                                                                $S_385 : {
                                                                                                                                                // NORMAL
                                                                                                                                                    var var155 = local_9_BOOLEAN; // type is BOOLEAN value type is BOOLEAN
                                                                                                                                                    if ((var155 == 0)) {
                                                                                                                                                        __label__ = 393;
                                                                                                                                                        break $S_385;
                                                                                                                                                    }
                                                                                                                                                    __label__ = 390;
                                                                                                                                                    }
                                                                                                                                                for(;;) switch (__label__) {
                                                                                                                                                    case 393 :
                                                                                                                                                    // NORMAL
                                                                                                                                                        $S_393 : {
                                                                                                                                                        // NORMAL
                                                                                                                                                            thisRef.island.VOIDaddojdcContact(thisRef.island,local_7_REFERENCE);
                                                                                                                                                            var var158 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@28a6a1b0
                                                                                                                                                            var var160 = (var158.m_flags | 1); // type is INT value type is INT
                                                                                                                                                            var158.m_flags = var160;
                                                                                                                                                            local_10_REFERENCE = local_6_REFERENCE.other; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@69925812
                                                                                                                                                            var var166 = (local_10_REFERENCE.m_flags & 1); // type is INT value type is INT
                                                                                                                                                            if ((var166 != 1)) {
                                                                                                                                                                __label__ = 434;
                                                                                                                                                                break $S_393;
                                                                                                                                                            }
                                                                                                                                                            __label__ = 431;
                                                                                                                                                            }
                                                                                                                                                        for(;;) switch (__label__) {
                                                                                                                                                            case 431 :
                                                                                                                                                            // NORMAL
                                                                                                                                                                break $M_341_338;
                                                                                                                                                            case 434 :
                                                                                                                                                            // NORMAL
                                                                                                                                                                $S_434 : {
                                                                                                                                                                // NORMAL
                                                                                                                                                                    var var167 = ojdWorld.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                                                                                                                                                                    if ((var167 != 0)) {
                                                                                                                                                                        __label__ = 454;
                                                                                                                                                                        break $S_434;
                                                                                                                                                                    }
                                                                                                                                                                    __label__ = 440;
                                                                                                                                                                    }
                                                                                                                                                                $M_454_440 : for(;;) switch (__label__) {
                                                                                                                                                                    case 454 :
                                                                                                                                                                    // NORMAL
                                                                                                                                                                        var var170 = thisRef.stack; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@6d70a674
                                                                                                                                                                        var var171 = local_4_INT; // type is INT value type is INT
                                                                                                                                                                        local_4_INT = (local_4_INT + 1); // type is INT value type is INT
                                                                                                                                                                        var var172 = local_10_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@51db7b46
                                                                                                                                                                        var170.data[var171] = var172;
                                                                                                                                                                        var var173 = local_10_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@51db7b46
                                                                                                                                                                        var var175 = (var173.m_flags | 1); // type is INT value type is INT
                                                                                                                                                                        var173.m_flags = var175;
                                                                                                                                                                        break $M_341_338;
                                                                                                                                                                    case 440 :
                                                                                                                                                                    // NORMAL
                                                                                                                                                                        $S_440 : {
                                                                                                                                                                        // NORMAL
                                                                                                                                                                            var var168 = local_4_INT; // type is INT value type is INT
                                                                                                                                                                            var var169 = local_2_INT; // type is INT value type is INT
                                                                                                                                                                            if ((var168 < var169)) {
                                                                                                                                                                                __label__ = 454;
                                                                                                                                                                                continue $M_454_440;
                                                                                                                                                                            }
                                                                                                                                                                            }
                                                                                                                                                                        var var192 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                                                                                                                                                        jlAssertionError.VOIDinit(var192);
                                                                                                                                                                        throw var192;
                                                                                                                                                                }
                                                                                                                                                        }
                                                                                                                                                    case 390 :
                                                                                                                                                    // NORMAL
                                                                                                                                                        break $M_341_338;
                                                                                                                                                }
                                                                                                                                        }
                                                                                                                                }
                                                                                                                                local_6_REFERENCE = local_6_REFERENCE.next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@759a86ac
                                                                                                                                __label__ = 315;
                                                                                                                                continue $L_315;
                                                                                                                        }
                                                                                                                    }
                                                                                                                case 305 :
                                                                                                                // NORMAL
                                                                                                                    __label__ = 239;
                                                                                                                    continue $L_239;
                                                                                                            }
                                                                                                    }
                                                                                                case 623 :
                                                                                                // NORMAL
                                                                                                    $S_623 : {
                                                                                                    // NORMAL
                                                                                                        thisRef.island.VOIDsolveojdProfileojdTimeStepojcVec2BOOLEAN(thisRef.island,thisRef.islandProfile,step,thisRef.m_gravity,thisRef.m_allowSleep);
                                                                                                        var var100 = thisRef.m_profile; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3c1a9438
                                                                                                        var var104 = (var100.solveInit + thisRef.islandProfile.solveInit); // type is FLOAT value type is FLOAT
                                                                                                        var100.solveInit = var104;
                                                                                                        var var105 = thisRef.m_profile; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@47b31961
                                                                                                        var var109 = (var105.solveVelocity + thisRef.islandProfile.solveVelocity); // type is FLOAT value type is FLOAT
                                                                                                        var105.solveVelocity = var109;
                                                                                                        var var110 = thisRef.m_profile; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2f1854e5
                                                                                                        var var114 = (var110.solvePosition + thisRef.islandProfile.solvePosition); // type is FLOAT value type is FLOAT
                                                                                                        var110.solvePosition = var114;
                                                                                                        local_5_INT = 0; // type is INT value type is INT
                                                                                                        __label__ = 703;
                                                                                                        }
                                                                                                    $L_703 : for (;;) {
                                                                                                        $S_703 : {
                                                                                                        // NORMAL
                                                                                                            var var117 = local_5_INT; // type is INT value type is INT
                                                                                                            var var119 = thisRef.island.m_bodyCount; // type is INT value type is INT
                                                                                                            if ((var117 >= var119)) {
                                                                                                                break $M_175_178;
                                                                                                            }
                                                                                                            }
                                                                                                        $S_715 : {
                                                                                                        // NORMAL
                                                                                                            var var128 = thisRef.island.m_bodies.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                                                                                                            local_6_REFERENCE = var128; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@39ac028
                                                                                                            var var130 = local_6_REFERENCE.ojdBodyTypegetType(local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@e96084c
                                                                                                            var var131 = ojdBodyType.STATIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6645f6f2
                                                                                                            if ((var130 != var131)) {
                                                                                                                __label__ = 750;
                                                                                                                break $S_715;
                                                                                                            }
                                                                                                            __label__ = 738;
                                                                                                            }
                                                                                                        $M_738_750 : for(;;) switch (__label__) {
                                                                                                            case 738 :
                                                                                                            // NORMAL
                                                                                                                var var132 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7223616d
                                                                                                                var var134 = (var132.m_flags & -2); // type is INT value type is INT
                                                                                                                var132.m_flags = var134;
                                                                                                                __label__ = 750;
                                                                                                                continue $M_738_750;
                                                                                                            case 750 :
                                                                                                            // NORMAL
                                                                                                                local_5_INT = (local_5_INT + 1); // type is INT value type is INT
                                                                                                                __label__ = 703;
                                                                                                                continue $L_703;
                                                                                                        }
                                                                                                    }
                                                                                            }
                                                                                        }
                                                                                    case 205 :
                                                                                    // NORMAL
                                                                                        break $M_175_178;
                                                                                }
                                                                        }
                                                                }
                                                                local_3_REFERENCE = local_3_REFERENCE.m_next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@39e2834a
                                                                __label__ = 161;
                                                                continue $L_161;
                                                        }
                                                    }
                                            }
                                    }
                                }
                            case 93 :
                            // NORMAL
                                var var202 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2ecb5711
                                var var204 = (var202.m_flags & -2); // type is INT value type is INT
                                var202.m_flags = var204;
                                local_2_REFERENCE = local_2_REFERENCE.m_next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@543047ef
                                __label__ = 89;
                                continue $L_89;
                        }
                    }
            }
        }
    },

    VOIDsolveTOIojdTimeStep : function(thisRef,step) {
        var local_9_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_16_INT = null; // type is INT # of inits = 1
        var local_12_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_6_FLOAT = null; // type is FLOAT # of inits = 4
        var var85 = null; // type is INT # of inits = 2
        var local_10_REFERENCE = null; // type is REFERENCE # of inits = 4
        var var62 = null; // type is INT # of inits = 2
        var local_4_FLOAT = null; // type is FLOAT # of inits = 5
        var local_8_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_13_INT = null; // type is INT # of inits = 1
        var local_14_INT = null; // type is INT # of inits = 1
        var local_11_REFERENCE = null; // type is REFERENCE # of inits = 7
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 4
        var var69 = null; // type is INT # of inits = 2
        var local_21_FLOAT = null; // type is FLOAT # of inits = 1
        var local_7_REFERENCE = null; // type is REFERENCE # of inits = 3
        var var78 = null; // type is INT # of inits = 2
        var local_17_FLOAT = null; // type is FLOAT # of inits = 3
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 9
        var local_13_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_15_INT = null; // type is INT # of inits = 1
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 9
        var local_15_BOOLEAN = null; // type is BOOLEAN # of inits = 1
        var local_9_INT = null; // type is INT # of inits = 8
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_2_REFERENCE = thisRef.toiIsland; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5b286b5
            local_2_REFERENCE.VOIDinitINTINTINTojcContactListener(local_2_REFERENCE,64,32,0,thisRef.m_contactManager.m_contactListener);
            var var5 = thisRef.m_stepComplete; // type is BOOLEAN value type is BOOLEAN
            if ((var5 == 0)) {
                __label__ = 105;
                break $S_0;
            }
            __label__ = 28;
            }
        $M_105_28 : for(;;) switch (__label__) {
            case 105 :
            // NORMAL
                for (;;) {
                    $S_105 : {
                    // NORMAL
                        local_3_REFERENCE = null; // type is REFERENCE value type is REFERENCE
                        local_4_FLOAT = 1.0; // type is FLOAT value type is FLOAT
                        local_5_REFERENCE = thisRef.m_contactManager.m_contactList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3e519437
                        __label__ = 119;
                        }
                    $L_119 : for (;;) {
                        $S_119 : {
                        // NORMAL
                            var var17 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@46934727
                            if (var17 == null ) {
                                __label__ = 687;
                                break $S_119;
                            }
                            __label__ = 124;
                            }
                        for(;;) switch (__label__) {
                            case 687 :
                            // NORMAL
                                $S_687 : {
                                // NORMAL
                                    var var190 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@13552b98
                                    if (var190 == null ) {
                                        __label__ = 700;
                                        break $S_687;
                                    }
                                    __label__ = 691;
                                    }
                                $M_691_700 : for(;;) switch (__label__) {
                                    case 700 :
                                    // NORMAL
                                        thisRef.m_stepComplete = 1;
                                        return;
                                    case 691 :
                                    // NORMAL
                                        $S_691 : {
                                        // NORMAL
                                            var var191 = local_4_FLOAT; // type is FLOAT value type is FLOAT
                                            if ((0.9999988 >= var191)) {
                                                break $S_691;
                                            }
                                            __label__ = 700;
                                            continue $M_691_700;
                                            }
                                        $S_708 : {
                                        // NORMAL
                                            var var194 = local_3_REFERENCE.ojdFixturegetFixtureA(local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@252fa9f7
                                            local_5_REFERENCE = var194; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@85e09cb
                                            var var196 = local_3_REFERENCE.ojdFixturegetFixtureB(local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7104c518
                                            var local_6_REFERENCE = var196; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@601272a3
                                            var var199 = local_5_REFERENCE.ojdBodygetBody(local_5_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@52d0a2ba
                                            local_7_REFERENCE = var199; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2570270f
                                            var var201 = local_6_REFERENCE.ojdBodygetBody(local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@ae8d906
                                            local_8_REFERENCE = var201; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4f121aa4
                                            var var205 = thisRef.backup1.ojcSweepsetojcSweep(thisRef.backup1,local_7_REFERENCE.m_sweep); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5d13f146
                                            var var209 = thisRef.backup2.ojcSweepsetojcSweep(thisRef.backup2,local_8_REFERENCE.m_sweep); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2e67072d
                                            local_7_REFERENCE.VOIDadvanceFLOAT(local_7_REFERENCE,local_4_FLOAT);
                                            local_8_REFERENCE.VOIDadvanceFLOAT(local_8_REFERENCE,local_4_FLOAT);
                                            local_3_REFERENCE.VOIDupdateojcContactListener(local_3_REFERENCE,thisRef.m_contactManager.m_contactListener);
                                            var var217 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@13552b98
                                            var var219 = (var217.m_flags & -33); // type is INT value type is INT
                                            var217.m_flags = var219;
                                            var var220 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@13552b98
                                            var var222 = (var220.m_toiCount + 1.0); // type is FLOAT value type is FLOAT
                                            var220.m_toiCount = var222;
                                            var var224 = local_3_REFERENCE.BOOLEANisEnabled(local_3_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                            if ((var224 == 0)) {
                                                __label__ = 820;
                                                break $S_708;
                                            }
                                            __label__ = 813;
                                            }
                                        $M_813_820 : for(;;) switch (__label__) {
                                            case 813 :
                                            // NORMAL
                                                $S_813 : {
                                                // NORMAL
                                                    var var226 = local_3_REFERENCE.BOOLEANisTouching(local_3_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                                    if ((var226 != 0)) {
                                                        break $S_813;
                                                    }
                                                    __label__ = 820;
                                                    continue $M_813_820;
                                                    }
                                                $S_864 : {
                                                // NORMAL
                                                    local_7_REFERENCE.VOIDsetAwakeBOOLEAN(local_7_REFERENCE,1);
                                                    local_8_REFERENCE.VOIDsetAwakeBOOLEAN(local_8_REFERENCE,1);
                                                    local_2_REFERENCE.VOIDclear(local_2_REFERENCE);
                                                    local_2_REFERENCE.VOIDaddojdBody(local_2_REFERENCE,local_7_REFERENCE);
                                                    local_2_REFERENCE.VOIDaddojdBody(local_2_REFERENCE,local_8_REFERENCE);
                                                    local_2_REFERENCE.VOIDaddojdcContact(local_2_REFERENCE,local_3_REFERENCE);
                                                    var var236 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@71ebd9db
                                                    var var238 = (var236.m_flags | 1); // type is INT value type is INT
                                                    var236.m_flags = var238;
                                                    var var239 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@37fa5dc1
                                                    var var241 = (var239.m_flags | 1); // type is INT value type is INT
                                                    var239.m_flags = var241;
                                                    var var242 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@13552b98
                                                    var var244 = (var242.m_flags | 1); // type is INT value type is INT
                                                    var242.m_flags = var244;
                                                    var var245 = thisRef.tempBodies; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@7975b529
                                                    var var246 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@71ebd9db
                                                    var245.data[0] = var246;
                                                    var var247 = thisRef.tempBodies; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@351963e8
                                                    var var248 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@37fa5dc1
                                                    var247.data[1] = var248;
                                                    local_9_INT = 0; // type is INT value type is INT
                                                    __label__ = 948;
                                                    }
                                                $L_948 : for (;;) {
                                                    $S_948 : {
                                                    // NORMAL
                                                        var var251 = local_9_INT; // type is INT value type is INT
                                                        if ((var251 >= 2)) {
                                                            __label__ = 1284;
                                                            break $S_948;
                                                        }
                                                        __label__ = 954;
                                                        }
                                                    for(;;) switch (__label__) {
                                                        case 954 :
                                                        // NORMAL
                                                            $S_954 : {
                                                            // NORMAL
                                                                var var314 = thisRef.tempBodies.data[local_9_INT]; // type is REFERENCE value type is REFERENCE
                                                                local_10_REFERENCE = var314; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@7e9d9c6b
                                                                var var316 = local_10_REFERENCE.m_type; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@77c22dcc
                                                                var var317 = ojdBodyType.DYNAMIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@618a0276
                                                                if ((var316 != var317)) {
                                                                    __label__ = 1278;
                                                                    break $S_954;
                                                                }
                                                                __label__ = 974;
                                                                }
                                                            $M_974_1278 : for(;;) switch (__label__) {
                                                                case 974 :
                                                                // NORMAL
                                                                    $S_974 : {
                                                                    // NORMAL
                                                                        local_11_REFERENCE = local_10_REFERENCE.m_contactList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@35023f93
                                                                        __label__ = 981;
                                                                        }
                                                                    $L_981 : for (;;) {
                                                                        $S_981 : {
                                                                        // NORMAL
                                                                            var var320 = local_11_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5f98e0e3
                                                                            if (var320 == null ) {
                                                                                __label__ = 1278;
                                                                                continue $M_974_1278;
                                                                            }
                                                                            }
                                                                        $S_986 : {
                                                                        // NORMAL
                                                                            var var322 = local_2_REFERENCE.m_bodyCount; // type is INT value type is INT
                                                                            var var324 = local_2_REFERENCE.m_bodyCapacity; // type is INT value type is INT
                                                                            if ((var322 != var324)) {
                                                                                __label__ = 1000;
                                                                                break $S_986;
                                                                            }
                                                                            __label__ = 997;
                                                                            }
                                                                        for(;;) switch (__label__) {
                                                                            case 1000 :
                                                                            // NORMAL
                                                                                $S_1000 : {
                                                                                // NORMAL
                                                                                    var var326 = local_2_REFERENCE.m_contactCount; // type is INT value type is INT
                                                                                    var var328 = local_2_REFERENCE.m_contactCapacity; // type is INT value type is INT
                                                                                    if ((var326 != var328)) {
                                                                                        __label__ = 1014;
                                                                                        break $S_1000;
                                                                                    }
                                                                                    __label__ = 1011;
                                                                                    }
                                                                                for(;;) switch (__label__) {
                                                                                    case 1014 :
                                                                                    // NORMAL
                                                                                        $S_1014 : {
                                                                                        // NORMAL
                                                                                            local_12_REFERENCE = local_11_REFERENCE.contact; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4b7a0cf8
                                                                                            var var339 = (local_12_REFERENCE.m_flags & 1); // type is INT value type is INT
                                                                                            if ((var339 == 0)) {
                                                                                                __label__ = 1034;
                                                                                                break $S_1014;
                                                                                            }
                                                                                            __label__ = 1031;
                                                                                            }
                                                                                        $M_1034_1031 : for(;;) switch (__label__) {
                                                                                            case 1031 :
                                                                                            // NORMAL
                                                                                                break $M_1034_1031;
                                                                                            case 1034 :
                                                                                            // NORMAL
                                                                                                $S_1034 : {
                                                                                                // NORMAL
                                                                                                    local_13_REFERENCE = local_11_REFERENCE.other; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2d30f416
                                                                                                    var var344 = local_13_REFERENCE.m_type; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1c18da74
                                                                                                    var var345 = ojdBodyType.DYNAMIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@384290c3
                                                                                                    if ((var344 != var345)) {
                                                                                                        __label__ = 1071;
                                                                                                        break $S_1034;
                                                                                                    }
                                                                                                    __label__ = 1052;
                                                                                                    }
                                                                                                $M_1052_1071 : for(;;) switch (__label__) {
                                                                                                    case 1071 :
                                                                                                    // NORMAL
                                                                                                        $S_1071 : {
                                                                                                        // NORMAL
                                                                                                            var local_14_BOOLEAN = local_12_REFERENCE.m_fixtureA.m_isSensor; // type is BOOLEAN value type is BOOLEAN
                                                                                                            local_15_BOOLEAN = local_12_REFERENCE.m_fixtureB.m_isSensor; // type is BOOLEAN value type is BOOLEAN
                                                                                                            var var360 = local_14_BOOLEAN; // type is BOOLEAN value type is BOOLEAN
                                                                                                            if ((var360 != 0)) {
                                                                                                                break $M_1034_1031;
                                                                                                            }
                                                                                                            }
                                                                                                        $S_1096 : {
                                                                                                        // NORMAL
                                                                                                            var var361 = local_15_BOOLEAN; // type is BOOLEAN value type is BOOLEAN
                                                                                                            if ((var361 == 0)) {
                                                                                                                __label__ = 1104;
                                                                                                                break $S_1096;
                                                                                                            }
                                                                                                            __label__ = 1101;
                                                                                                            }
                                                                                                        for(;;) switch (__label__) {
                                                                                                            case 1101 :
                                                                                                            // NORMAL
                                                                                                                break $M_1034_1031;
                                                                                                            case 1104 :
                                                                                                            // NORMAL
                                                                                                                $S_1104 : {
                                                                                                                // NORMAL
                                                                                                                    var var365 = thisRef.backup1.ojcSweepsetojcSweep(thisRef.backup1,local_13_REFERENCE.m_sweep); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@234446ff
                                                                                                                    var var368 = (local_13_REFERENCE.m_flags & 1); // type is INT value type is INT
                                                                                                                    if ((var368 != 0)) {
                                                                                                                        __label__ = 1134;
                                                                                                                        break $S_1104;
                                                                                                                    }
                                                                                                                    __label__ = 1127;
                                                                                                                    }
                                                                                                                $M_1127_1134 : for(;;) switch (__label__) {
                                                                                                                    case 1134 :
                                                                                                                    // NORMAL
                                                                                                                        $S_1134 : {
                                                                                                                        // NORMAL
                                                                                                                            local_12_REFERENCE.VOIDupdateojcContactListener(local_12_REFERENCE,thisRef.m_contactManager.m_contactListener);
                                                                                                                            var var375 = local_12_REFERENCE.BOOLEANisEnabled(local_12_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                                                                                                            if ((var375 != 0)) {
                                                                                                                                __label__ = 1175;
                                                                                                                                break $S_1134;
                                                                                                                            }
                                                                                                                            __label__ = 1154;
                                                                                                                            }
                                                                                                                        for(;;) switch (__label__) {
                                                                                                                            case 1175 :
                                                                                                                            // NORMAL
                                                                                                                                $S_1175 : {
                                                                                                                                // NORMAL
                                                                                                                                    var var377 = local_12_REFERENCE.BOOLEANisTouching(local_12_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                                                                                                                    if ((var377 != 0)) {
                                                                                                                                        __label__ = 1204;
                                                                                                                                        break $S_1175;
                                                                                                                                    }
                                                                                                                                    __label__ = 1183;
                                                                                                                                    }
                                                                                                                                for(;;) switch (__label__) {
                                                                                                                                    case 1204 :
                                                                                                                                    // NORMAL
                                                                                                                                        $S_1204 : {
                                                                                                                                        // NORMAL
                                                                                                                                            var var378 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7961769d
                                                                                                                                            var var380 = (var378.m_flags | 1); // type is INT value type is INT
                                                                                                                                            var378.m_flags = var380;
                                                                                                                                            local_2_REFERENCE.VOIDaddojdcContact(local_2_REFERENCE,local_12_REFERENCE);
                                                                                                                                            var var385 = (local_13_REFERENCE.m_flags & 1); // type is INT value type is INT
                                                                                                                                            if ((var385 == 0)) {
                                                                                                                                                __label__ = 1234;
                                                                                                                                                break $S_1204;
                                                                                                                                            }
                                                                                                                                            __label__ = 1231;
                                                                                                                                            }
                                                                                                                                        for(;;) switch (__label__) {
                                                                                                                                            case 1234 :
                                                                                                                                            // NORMAL
                                                                                                                                                $S_1234 : {
                                                                                                                                                // NORMAL
                                                                                                                                                    var var391 = local_13_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6a9621b0
                                                                                                                                                    var var393 = (var391.m_flags | 1); // type is INT value type is INT
                                                                                                                                                    var391.m_flags = var393;
                                                                                                                                                    var var395 = local_13_REFERENCE.m_type; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@97e96c5
                                                                                                                                                    var var396 = ojdBodyType.STATIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@53ef36e4
                                                                                                                                                    if ((var395 == var396)) {
                                                                                                                                                        __label__ = 1262;
                                                                                                                                                        break $S_1234;
                                                                                                                                                    }
                                                                                                                                                    __label__ = 1256;
                                                                                                                                                    }
                                                                                                                                                $M_1256_1262 : for(;;) switch (__label__) {
                                                                                                                                                    case 1262 :
                                                                                                                                                    // NORMAL
                                                                                                                                                        local_2_REFERENCE.VOIDaddojdBody(local_2_REFERENCE,local_13_REFERENCE);
                                                                                                                                                        break $M_1034_1031;
                                                                                                                                                    case 1256 :
                                                                                                                                                    // NORMAL
                                                                                                                                                        local_13_REFERENCE.VOIDsetAwakeBOOLEAN(local_13_REFERENCE,1);
                                                                                                                                                        __label__ = 1262;
                                                                                                                                                        continue $M_1256_1262;
                                                                                                                                                }
                                                                                                                                            case 1231 :
                                                                                                                                            // NORMAL
                                                                                                                                                break $M_1034_1031;
                                                                                                                                        }
                                                                                                                                    case 1183 :
                                                                                                                                    // NORMAL
                                                                                                                                        var var389 = local_13_REFERENCE.m_sweep.ojcSweepsetojcSweep(local_13_REFERENCE.m_sweep,thisRef.backup1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7f0760d2
                                                                                                                                        local_13_REFERENCE.VOIDsynchronizeTransform(local_13_REFERENCE);
                                                                                                                                        break $M_1034_1031;
                                                                                                                                }
                                                                                                                            case 1154 :
                                                                                                                            // NORMAL
                                                                                                                                var var403 = local_13_REFERENCE.m_sweep.ojcSweepsetojcSweep(local_13_REFERENCE.m_sweep,thisRef.backup1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7e75b273
                                                                                                                                local_13_REFERENCE.VOIDsynchronizeTransform(local_13_REFERENCE);
                                                                                                                                break $M_1034_1031;
                                                                                                                        }
                                                                                                                    case 1127 :
                                                                                                                    // NORMAL
                                                                                                                        local_13_REFERENCE.VOIDadvanceFLOAT(local_13_REFERENCE,local_4_FLOAT);
                                                                                                                        __label__ = 1134;
                                                                                                                        continue $M_1127_1134;
                                                                                                                }
                                                                                                        }
                                                                                                    case 1052 :
                                                                                                    // NORMAL
                                                                                                        $S_1052 : {
                                                                                                        // NORMAL
                                                                                                            var var347 = local_10_REFERENCE.BOOLEANisBullet(local_10_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                                                                                            if ((var347 != 0)) {
                                                                                                                __label__ = 1071;
                                                                                                                continue $M_1052_1071;
                                                                                                            }
                                                                                                            }
                                                                                                        $S_1060 : {
                                                                                                        // NORMAL
                                                                                                            var var349 = local_13_REFERENCE.BOOLEANisBullet(local_13_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                                                                                            if ((var349 != 0)) {
                                                                                                                __label__ = 1071;
                                                                                                                continue $M_1052_1071;
                                                                                                            }
                                                                                                            }
                                                                                                        break $M_1034_1031;
                                                                                                }
                                                                                        }
                                                                                        local_11_REFERENCE = local_11_REFERENCE.next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3c0dbc6
                                                                                        __label__ = 981;
                                                                                        continue $L_981;
                                                                                    case 1011 :
                                                                                    // NORMAL
                                                                                        __label__ = 1278;
                                                                                        continue $M_974_1278;
                                                                                }
                                                                            case 997 :
                                                                            // NORMAL
                                                                                __label__ = 1278;
                                                                                continue $M_974_1278;
                                                                        }
                                                                    }
                                                                case 1278 :
                                                                // NORMAL
                                                                    local_9_INT = (local_9_INT + 1); // type is INT value type is INT
                                                                    __label__ = 948;
                                                                    continue $L_948;
                                                            }
                                                        case 1284 :
                                                        // NORMAL
                                                            $S_1284 : {
                                                            // NORMAL
                                                                var var252 = thisRef.subStep; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2932854c
                                                                var var256 = ((1.0 - local_4_FLOAT) * step.dt); // type is FLOAT value type is FLOAT
                                                                var252.dt = var256;
                                                                var var257 = thisRef.subStep; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6df77148
                                                                var var260 = (1.0 / thisRef.subStep.dt); // type is FLOAT value type is FLOAT
                                                                var257.inv_dt = var260;
                                                                var var261 = thisRef.subStep; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3e42a0af
                                                                var261.dtRatio = 1.0;
                                                                var var262 = thisRef.subStep; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3bd9424a
                                                                var262.positionIterations = 20;
                                                                var var263 = thisRef.subStep; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@67cb898
                                                                var var264 = step.velocityIterations; // type is INT value type is INT
                                                                var263.velocityIterations = var264;
                                                                var var265 = thisRef.subStep; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5057e42e
                                                                var265.warmStarting = 0;
                                                                local_2_REFERENCE.VOIDsolveTOIojdTimeStepINTINT(local_2_REFERENCE,thisRef.subStep,local_7_REFERENCE.m_islandIndex,local_8_REFERENCE.m_islandIndex);
                                                                local_9_INT = 0; // type is INT value type is INT
                                                                __label__ = 1373;
                                                                }
                                                            $L_1373 : for (;;) {
                                                                $S_1373 : {
                                                                // NORMAL
                                                                    var var273 = local_9_INT; // type is INT value type is INT
                                                                    var var275 = local_2_REFERENCE.m_bodyCount; // type is INT value type is INT
                                                                    if ((var273 >= var275)) {
                                                                        __label__ = 1465;
                                                                        break $S_1373;
                                                                    }
                                                                    __label__ = 1382;
                                                                    }
                                                                for(;;) switch (__label__) {
                                                                    case 1465 :
                                                                    // NORMAL
                                                                        $S_1465 : {
                                                                        // NORMAL
                                                                            thisRef.m_contactManager.VOIDfindNewContacts(thisRef.m_contactManager);
                                                                            var var277 = thisRef.m_subStepping; // type is BOOLEAN value type is BOOLEAN
                                                                            if ((var277 == 0)) {
                                                                                __label__ = 1487;
                                                                                break $S_1465;
                                                                            }
                                                                            __label__ = 1479;
                                                                            }
                                                                        for(;;) switch (__label__) {
                                                                            case 1479 :
                                                                            // NORMAL
                                                                                thisRef.m_stepComplete = 0;
                                                                                return;
                                                                            case 1487 :
                                                                            // NORMAL
                                                                                __label__ = 105;
                                                                                continue $M_105_28;
                                                                        }
                                                                    case 1382 :
                                                                    // NORMAL
                                                                        $S_1382 : {
                                                                        // NORMAL
                                                                            var var299 = local_2_REFERENCE.m_bodies.data[local_9_INT]; // type is REFERENCE value type is REFERENCE
                                                                            local_10_REFERENCE = var299; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@210575d5
                                                                            var var300 = local_10_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@44f43cdf
                                                                            var var302 = (var300.m_flags & -2); // type is INT value type is INT
                                                                            var300.m_flags = var302;
                                                                            var var304 = local_10_REFERENCE.m_type; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7bbb6153
                                                                            var var305 = ojdBodyType.DYNAMIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@a81b77c
                                                                            if ((var304 == var305)) {
                                                                                __label__ = 1417;
                                                                                break $S_1382;
                                                                            }
                                                                            __label__ = 1414;
                                                                            }
                                                                        $M_1414_1417 : for(;;) switch (__label__) {
                                                                            case 1417 :
                                                                            // NORMAL
                                                                                $S_1417 : {
                                                                                // NORMAL
                                                                                    local_10_REFERENCE.VOIDsynchronizeFixtures(local_10_REFERENCE);
                                                                                    local_11_REFERENCE = local_10_REFERENCE.m_contactList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@695a66cc
                                                                                    __label__ = 1429;
                                                                                    }
                                                                                $L_1429 : for (;;) {
                                                                                    $S_1429 : {
                                                                                    // NORMAL
                                                                                        var var309 = local_11_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5f98e0e3
                                                                                        if (var309 == null ) {
                                                                                            break $M_1414_1417;
                                                                                        }
                                                                                        }
                                                                                    var var330 = local_11_REFERENCE.contact; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@643995d
                                                                                    var var332 = (var330.m_flags & -34); // type is INT value type is INT
                                                                                    var330.m_flags = var332;
                                                                                    local_11_REFERENCE = local_11_REFERENCE.next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2652c13f
                                                                                    __label__ = 1429;
                                                                                    continue $L_1429;
                                                                                }
                                                                            case 1414 :
                                                                            // NORMAL
                                                                                break $M_1414_1417;
                                                                        }
                                                                        local_9_INT = (local_9_INT + 1); // type is INT value type is INT
                                                                        __label__ = 1373;
                                                                        continue $L_1373;
                                                                }
                                                            }
                                                    }
                                                }
                                            case 820 :
                                            // NORMAL
                                                local_3_REFERENCE.VOIDsetEnabledBOOLEAN(local_3_REFERENCE,0);
                                                var var289 = local_7_REFERENCE.m_sweep.ojcSweepsetojcSweep(local_7_REFERENCE.m_sweep,thisRef.backup1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@21efa8de
                                                var var293 = local_8_REFERENCE.m_sweep.ojcSweepsetojcSweep(local_8_REFERENCE.m_sweep,thisRef.backup2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1bb9d629
                                                local_7_REFERENCE.VOIDsynchronizeTransform(local_7_REFERENCE);
                                                local_8_REFERENCE.VOIDsynchronizeTransform(local_8_REFERENCE);
                                                __label__ = 105;
                                                continue $M_105_28;
                                        }
                                }
                            case 124 :
                            // NORMAL
                                $S_124 : {
                                // NORMAL
                                    var var19 = local_5_REFERENCE.BOOLEANisEnabled(local_5_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                    if ((var19 != 0)) {
                                        __label__ = 135;
                                        break $S_124;
                                    }
                                    __label__ = 132;
                                    }
                                $M_135_132 : for(;;) switch (__label__) {
                                    case 132 :
                                    // NORMAL
                                        break $M_135_132;
                                    case 135 :
                                    // NORMAL
                                        $S_135 : {
                                        // NORMAL
                                            var var21 = local_5_REFERENCE.m_toiCount; // type is FLOAT value type is FLOAT
                                            if ((var21 <= 8.0)) {
                                                __label__ = 150;
                                                break $S_135;
                                            }
                                            __label__ = 147;
                                            }
                                        for(;;) switch (__label__) {
                                            case 150 :
                                            // NORMAL
                                                $S_150 : {
                                                // NORMAL
                                                    local_6_FLOAT = 1.0; // type is FLOAT value type is FLOAT
                                                    var var27 = (local_5_REFERENCE.m_flags & 32); // type is INT value type is INT
                                                    if ((var27 == 0)) {
                                                        __label__ = 174;
                                                        break $S_150;
                                                    }
                                                    __label__ = 164;
                                                    }
                                                $M_174_164 : for(;;) switch (__label__) {
                                                    case 164 :
                                                    // NORMAL
                                                        local_6_FLOAT = local_5_REFERENCE.m_toi; // type is FLOAT value type is FLOAT
                                                        break $M_174_164;
                                                    case 174 :
                                                    // NORMAL
                                                        $S_174 : {
                                                        // NORMAL
                                                            var var29 = local_5_REFERENCE.ojdFixturegetFixtureA(local_5_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1aa3d72
                                                            local_7_REFERENCE = var29; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@71ebd9db
                                                            var var32 = local_5_REFERENCE.ojdFixturegetFixtureB(local_5_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@31415f41
                                                            local_8_REFERENCE = var32; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@37fa5dc1
                                                            var var35 = local_7_REFERENCE.BOOLEANisSensor(local_7_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                                            if ((var35 != 0)) {
                                                                break $M_135_132;
                                                            }
                                                            }
                                                        $S_196 : {
                                                        // NORMAL
                                                            var var37 = local_8_REFERENCE.BOOLEANisSensor(local_8_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                                            if ((var37 == 0)) {
                                                                __label__ = 207;
                                                                break $S_196;
                                                            }
                                                            __label__ = 204;
                                                            }
                                                        for(;;) switch (__label__) {
                                                            case 207 :
                                                            // NORMAL
                                                                $S_207 : {
                                                                // NORMAL
                                                                    var var42 = local_7_REFERENCE.ojdBodygetBody(local_7_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6d34b8ef
                                                                    local_9_REFERENCE = var42; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6098279c
                                                                    var var45 = local_8_REFERENCE.ojdBodygetBody(local_8_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@386923fe
                                                                    local_10_REFERENCE = var45; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@44f43cdf
                                                                    local_11_REFERENCE = local_9_REFERENCE.m_type; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6878c82c
                                                                    local_12_REFERENCE = local_10_REFERENCE.m_type; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@53782935
                                                                    var var53 = ojdWorld.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                                                                    if ((var53 != 0)) {
                                                                        __label__ = 265;
                                                                        break $S_207;
                                                                    }
                                                                    __label__ = 241;
                                                                    }
                                                                $M_241_265 : for(;;) switch (__label__) {
                                                                    case 265 :
                                                                    // NORMAL
                                                                        $S_265 : {
                                                                        // NORMAL
                                                                            var var59 = local_9_REFERENCE.BOOLEANisAwake(local_9_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                                                            if ((var59 == 0)) {
                                                                                __label__ = 285;
                                                                                break $S_265;
                                                                            }
                                                                            __label__ = 273;
                                                                            }
                                                                        $M_285_273 : for(;;) switch (__label__) {
                                                                            case 285 :
                                                                            // NORMAL
                                                                                var62 = 0; // type is INT value type is INT
                                                                                break $M_285_273;
                                                                            case 273 :
                                                                            // NORMAL
                                                                                $S_273 : {
                                                                                // NORMAL
                                                                                    var var60 = local_11_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5f98e0e3
                                                                                    var var61 = ojdBodyType.STATIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1b430075
                                                                                    if ((var60 == var61)) {
                                                                                        __label__ = 285;
                                                                                        continue $M_285_273;
                                                                                    }
                                                                                    }
                                                                                var62 = 1; // type is INT value type is INT
                                                                                break $M_285_273;
                                                                        }
                                                                        $S_286 : {
                                                                        // NORMAL
                                                                            local_13_INT = var62; // type is INT value type is INT
                                                                            var var66 = local_10_REFERENCE.BOOLEANisAwake(local_10_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                                                            if ((var66 == 0)) {
                                                                                __label__ = 308;
                                                                                break $S_286;
                                                                            }
                                                                            __label__ = 296;
                                                                            }
                                                                        $M_296_308 : for(;;) switch (__label__) {
                                                                            case 308 :
                                                                            // NORMAL
                                                                                var69 = 0; // type is INT value type is INT
                                                                                break $M_296_308;
                                                                            case 296 :
                                                                            // NORMAL
                                                                                $S_296 : {
                                                                                // NORMAL
                                                                                    var var67 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7961769d
                                                                                    var var68 = ojdBodyType.STATIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6a44a630
                                                                                    if ((var67 == var68)) {
                                                                                        __label__ = 308;
                                                                                        continue $M_296_308;
                                                                                    }
                                                                                    }
                                                                                var69 = 1; // type is INT value type is INT
                                                                                break $M_296_308;
                                                                        }
                                                                        $S_309 : {
                                                                        // NORMAL
                                                                            local_14_INT = var69; // type is INT value type is INT
                                                                            var var72 = local_13_INT; // type is INT value type is INT
                                                                            if ((var72 != 0)) {
                                                                                __label__ = 324;
                                                                                break $S_309;
                                                                            }
                                                                            __label__ = 316;
                                                                            }
                                                                        $M_324_316 : for(;;) switch (__label__) {
                                                                            case 324 :
                                                                            // NORMAL
                                                                                $S_324 : {
                                                                                // NORMAL
                                                                                    var var75 = local_9_REFERENCE.BOOLEANisBullet(local_9_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                                                                    if ((var75 != 0)) {
                                                                                        __label__ = 340;
                                                                                        break $S_324;
                                                                                    }
                                                                                    __label__ = 332;
                                                                                    }
                                                                                $M_340_332 : for(;;) switch (__label__) {
                                                                                    case 332 :
                                                                                    // NORMAL
                                                                                        $S_332 : {
                                                                                        // NORMAL
                                                                                            var var76 = local_11_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5f98e0e3
                                                                                            var var77 = ojdBodyType.DYNAMIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@44d33afc
                                                                                            if ((var76 == var77)) {
                                                                                                break $S_332;
                                                                                            }
                                                                                            __label__ = 340;
                                                                                            continue $M_340_332;
                                                                                            }
                                                                                        var78 = 0; // type is INT value type is INT
                                                                                        break $M_340_332;
                                                                                    case 340 :
                                                                                    // NORMAL
                                                                                        var78 = 1; // type is INT value type is INT
                                                                                        break $M_340_332;
                                                                                }
                                                                                $S_345 : {
                                                                                // NORMAL
                                                                                    local_15_INT = var78; // type is INT value type is INT
                                                                                    var var82 = local_10_REFERENCE.BOOLEANisBullet(local_10_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                                                                    if ((var82 != 0)) {
                                                                                        __label__ = 363;
                                                                                        break $S_345;
                                                                                    }
                                                                                    __label__ = 355;
                                                                                    }
                                                                                $M_355_363 : for(;;) switch (__label__) {
                                                                                    case 355 :
                                                                                    // NORMAL
                                                                                        $S_355 : {
                                                                                        // NORMAL
                                                                                            var var83 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7961769d
                                                                                            var var84 = ojdBodyType.DYNAMIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@56f092d2
                                                                                            if ((var83 == var84)) {
                                                                                                break $S_355;
                                                                                            }
                                                                                            __label__ = 363;
                                                                                            continue $M_355_363;
                                                                                            }
                                                                                        var85 = 0; // type is INT value type is INT
                                                                                        break $M_355_363;
                                                                                    case 363 :
                                                                                    // NORMAL
                                                                                        var85 = 1; // type is INT value type is INT
                                                                                        break $M_355_363;
                                                                                }
                                                                                $S_368 : {
                                                                                // NORMAL
                                                                                    local_16_INT = var85; // type is INT value type is INT
                                                                                    var var88 = local_15_INT; // type is INT value type is INT
                                                                                    if ((var88 != 0)) {
                                                                                        __label__ = 383;
                                                                                        break $S_368;
                                                                                    }
                                                                                    __label__ = 375;
                                                                                    }
                                                                                $M_375_383 : for(;;) switch (__label__) {
                                                                                    case 375 :
                                                                                    // NORMAL
                                                                                        $S_375 : {
                                                                                        // NORMAL
                                                                                            var var89 = local_16_INT; // type is INT value type is INT
                                                                                            if ((var89 != 0)) {
                                                                                                __label__ = 383;
                                                                                                continue $M_375_383;
                                                                                            }
                                                                                            }
                                                                                        break $M_135_132;
                                                                                    case 383 :
                                                                                    // NORMAL
                                                                                        $S_383 : {
                                                                                        // NORMAL
                                                                                            local_17_FLOAT = local_9_REFERENCE.m_sweep.alpha0; // type is FLOAT value type is FLOAT
                                                                                            var var97 = local_9_REFERENCE.m_sweep.alpha0; // type is FLOAT value type is FLOAT
                                                                                            var var100 = local_10_REFERENCE.m_sweep.alpha0; // type is FLOAT value type is FLOAT
                                                                                            if ((var97 >= var100)) {
                                                                                                __label__ = 436;
                                                                                                break $S_383;
                                                                                            }
                                                                                            __label__ = 413;
                                                                                            }
                                                                                        $M_413_436 : for(;;) switch (__label__) {
                                                                                            case 436 :
                                                                                            // NORMAL
                                                                                                $S_436 : {
                                                                                                // NORMAL
                                                                                                    var var111 = local_10_REFERENCE.m_sweep.alpha0; // type is FLOAT value type is FLOAT
                                                                                                    var var114 = local_9_REFERENCE.m_sweep.alpha0; // type is FLOAT value type is FLOAT
                                                                                                    if ((var111 >= var114)) {
                                                                                                        break $M_413_436;
                                                                                                    }
                                                                                                    }
                                                                                                local_17_FLOAT = local_9_REFERENCE.m_sweep.alpha0; // type is FLOAT value type is FLOAT
                                                                                                local_10_REFERENCE.m_sweep.VOIDadvanceFLOAT(local_10_REFERENCE.m_sweep,local_17_FLOAT);
                                                                                                break $M_413_436;
                                                                                            case 413 :
                                                                                            // NORMAL
                                                                                                local_17_FLOAT = local_10_REFERENCE.m_sweep.alpha0; // type is FLOAT value type is FLOAT
                                                                                                local_9_REFERENCE.m_sweep.VOIDadvanceFLOAT(local_9_REFERENCE.m_sweep,local_17_FLOAT);
                                                                                                break $M_413_436;
                                                                                        }
                                                                                        $S_476 : {
                                                                                        // NORMAL
                                                                                            var var123 = ojdWorld.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                                                                                            if ((var123 != 0)) {
                                                                                                __label__ = 497;
                                                                                                break $S_476;
                                                                                            }
                                                                                            __label__ = 482;
                                                                                            }
                                                                                        $M_497_482 : for(;;) switch (__label__) {
                                                                                            case 482 :
                                                                                            // NORMAL
                                                                                                $S_482 : {
                                                                                                // NORMAL
                                                                                                    var var124 = local_17_FLOAT; // type is FLOAT value type is FLOAT
                                                                                                    if ((var124 < 1.0)) {
                                                                                                        __label__ = 497;
                                                                                                        continue $M_497_482;
                                                                                                    }
                                                                                                    }
                                                                                                var var311 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                                                                                jlAssertionError.VOIDinit(var311);
                                                                                                throw var311;
                                                                                            case 497 :
                                                                                            // NORMAL
                                                                                                $S_497 : {
                                                                                                // NORMAL
                                                                                                    var var127 = local_5_REFERENCE.INTgetChildIndexA(local_5_REFERENCE); // type is INT value type is INT
                                                                                                    var local_18_INT = var127; // type is INT value type is INT
                                                                                                    var var131 = local_5_REFERENCE.INTgetChildIndexB(local_5_REFERENCE); // type is INT value type is INT
                                                                                                    var local_19_INT = var131; // type is INT value type is INT
                                                                                                    var local_20_REFERENCE = thisRef.toiInput; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@55b360d1
                                                                                                    var var137 = local_20_REFERENCE.proxyA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1a892971
                                                                                                    var var139 = local_7_REFERENCE.ojcsShapegetShape(local_7_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@47d0e406
                                                                                                    var137.VOIDsetojcsShapeINT(var137,var139,local_18_INT);
                                                                                                    var var142 = local_20_REFERENCE.proxyB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5b1fd7a9
                                                                                                    var var144 = local_8_REFERENCE.ojcsShapegetShape(local_8_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@80eaf1a
                                                                                                    var142.VOIDsetojcsShapeINT(var142,var144,local_19_INT);
                                                                                                    var var150 = local_20_REFERENCE.sweepA.ojcSweepsetojcSweep(local_20_REFERENCE.sweepA,local_9_REFERENCE.m_sweep); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@48be8ac9
                                                                                                    var var155 = local_20_REFERENCE.sweepB.ojcSweepsetojcSweep(local_20_REFERENCE.sweepB,local_10_REFERENCE.m_sweep); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@792a5e0a
                                                                                                    var var156 = local_20_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5cad7c19
                                                                                                    var156.tMax = 1.0;
                                                                                                    var var158 = thisRef.pool.ojcTimeOfImpactgetTimeOfImpact(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@21a66ee9
                                                                                                    var158.VOIDtimeOfImpactojcTimeOfImpact$TOIOutputojcTimeOfImpact$TOIInput(var158,thisRef.toiOutput,local_20_REFERENCE);
                                                                                                    local_21_FLOAT = thisRef.toiOutput.t; // type is FLOAT value type is FLOAT
                                                                                                    var var166 = thisRef.toiOutput.state; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3683876c
                                                                                                    var var167 = ojcTimeOfImpact$TOIOutputState.TOUCHING; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1796811
                                                                                                    if ((var166 != var167)) {
                                                                                                        __label__ = 640;
                                                                                                        break $S_497;
                                                                                                    }
                                                                                                    __label__ = 621;
                                                                                                    }
                                                                                                $M_621_640 : for(;;) switch (__label__) {
                                                                                                    case 621 :
                                                                                                    // NORMAL
                                                                                                        var var174 = ojcMathUtils.FLOATminFLOATFLOAT((local_17_FLOAT + ((1.0 - local_17_FLOAT) * local_21_FLOAT)),1.0); // type is FLOAT value type is FLOAT
                                                                                                        local_6_FLOAT = var174; // type is FLOAT value type is FLOAT
                                                                                                        break $M_621_640;
                                                                                                    case 640 :
                                                                                                    // NORMAL
                                                                                                        local_6_FLOAT = 1.0; // type is FLOAT value type is FLOAT
                                                                                                        break $M_621_640;
                                                                                                }
                                                                                                var var177 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@46934727
                                                                                                var var178 = local_6_FLOAT; // type is FLOAT value type is FLOAT
                                                                                                var177.m_toi = var178;
                                                                                                var var179 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@46934727
                                                                                                var var181 = (var179.m_flags | 32); // type is INT value type is INT
                                                                                                var179.m_flags = var181;
                                                                                                break $M_174_164;
                                                                                        }
                                                                                }
                                                                            case 316 :
                                                                            // NORMAL
                                                                                $S_316 : {
                                                                                // NORMAL
                                                                                    var var73 = local_14_INT; // type is INT value type is INT
                                                                                    if ((var73 != 0)) {
                                                                                        __label__ = 324;
                                                                                        continue $M_324_316;
                                                                                    }
                                                                                    }
                                                                                break $M_135_132;
                                                                        }
                                                                    case 241 :
                                                                    // NORMAL
                                                                        $S_241 : {
                                                                        // NORMAL
                                                                            var var54 = local_11_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5f98e0e3
                                                                            var var55 = ojdBodyType.DYNAMIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1cc119a0
                                                                            if ((var54 == var55)) {
                                                                                __label__ = 265;
                                                                                continue $M_241_265;
                                                                            }
                                                                            }
                                                                        $S_249 : {
                                                                        // NORMAL
                                                                            var var56 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7961769d
                                                                            var var57 = ojdBodyType.DYNAMIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@36d345b3
                                                                            if ((var56 == var57)) {
                                                                                __label__ = 265;
                                                                                continue $M_241_265;
                                                                            }
                                                                            }
                                                                        var var310 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                                                        jlAssertionError.VOIDinit(var310);
                                                                        throw var310;
                                                                }
                                                            case 204 :
                                                            // NORMAL
                                                                break $M_135_132;
                                                        }
                                                }
                                                $S_662 : {
                                                // NORMAL
                                                    var var182 = local_6_FLOAT; // type is FLOAT value type is FLOAT
                                                    var var183 = local_4_FLOAT; // type is FLOAT value type is FLOAT
                                                    if ((var182 >= var183)) {
                                                        break $M_135_132;
                                                    }
                                                    }
                                                local_3_REFERENCE = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@46934727
                                                local_4_FLOAT = local_6_FLOAT; // type is FLOAT value type is FLOAT
                                                break $M_135_132;
                                            case 147 :
                                            // NORMAL
                                                break $M_135_132;
                                        }
                                }
                                local_5_REFERENCE = local_5_REFERENCE.m_next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7c208a98
                                __label__ = 119;
                                continue $L_119;
                        }
                    }
                }
            case 28 :
            // NORMAL
                $S_28 : {
                // NORMAL
                    local_3_REFERENCE = thisRef.m_bodyList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3ba257fa
                    __label__ = 33;
                    }
                $L_33 : for (;;) {
                    $S_33 : {
                    // NORMAL
                        var var8 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@13552b98
                        if (var8 == null ) {
                            __label__ = 64;
                            break $S_33;
                        }
                        __label__ = 37;
                        }
                    for(;;) switch (__label__) {
                        case 64 :
                        // NORMAL
                            $S_64 : {
                            // NORMAL
                                local_3_REFERENCE = thisRef.m_contactManager.m_contactList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2fba4537
                                __label__ = 72;
                                }
                            $L_72 : for (;;) {
                                $S_72 : {
                                // NORMAL
                                    var var11 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@13552b98
                                    if (var11 == null ) {
                                        __label__ = 105;
                                        continue $M_105_28;
                                    }
                                    }
                                var var407 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@13552b98
                                var var409 = (var407.m_flags & -34); // type is INT value type is INT
                                var407.m_flags = var409;
                                var var410 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@13552b98
                                var410.m_toiCount = 0.0;
                                var var411 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@13552b98
                                var411.m_toi = 1.0;
                                local_3_REFERENCE = local_3_REFERENCE.m_next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@36863ae
                                __label__ = 72;
                                continue $L_72;
                            }
                        case 37 :
                        // NORMAL
                            var var278 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@13552b98
                            var var280 = (var278.m_flags & -2); // type is INT value type is INT
                            var278.m_flags = var280;
                            var var282 = local_3_REFERENCE.m_sweep; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7b645d11
                            var282.alpha0 = 0.0;
                            local_3_REFERENCE = local_3_REFERENCE.m_next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5250c800
                            __label__ = 33;
                            continue $L_33;
                    }
                }
        }
    },

    VOIDclearForces : function(thisRef) {
        var local_1_REFERENCE = null; // type is REFERENCE # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_1_REFERENCE = thisRef.m_bodyList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3e2d1ab4
            __label__ = 5;
            }
        $L_5 : for (;;) {
            $S_5 : {
            // NORMAL
                var var2 = local_1_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5fbe28f6
                if (var2 == null ) {
                    return;
                }
                }
            local_1_REFERENCE.m_force.VOIDsetZero(local_1_REFERENCE.m_force);
            var var5 = local_1_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5fbe28f6
            var5.m_torque = 0.0;
            var var7 = local_1_REFERENCE.ojdBodygetNext(local_1_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@32fd66e4
            local_1_REFERENCE = var7; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@28078239
            __label__ = 5;
            continue $L_5;
        }
    },

    ojdBodygetBodyList : function(thisRef) {
        var __label__ = null;
        return thisRef.m_bodyList;
    },

    ojdcContactpopContactojdFixtureINTojdFixtureINT : function(thisRef,fixtureA,indexA,fixtureB,indexB) {
        var local_7_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_8_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = fixtureA.ojcsShapeTypegetType(fixtureA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@beebef7
            var local_5_REFERENCE = var0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4e96d44c
            var var2 = fixtureB.ojcsShapeTypegetType(fixtureB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2c7b94b4
            var local_6_REFERENCE = var2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5ee1924
            var var4 = thisRef.contactStacks; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@7b091668
            var var6 = local_5_REFERENCE.INTordinal(local_5_REFERENCE); // type is INT value type is INT
            var var7 = var4.data[var6]; // type is REFERENCE value type is REFERENCE
            var var9 = local_6_REFERENCE.INTordinal(local_6_REFERENCE); // type is INT value type is INT
            var var10 = var7.data[var9]; // type is REFERENCE value type is REFERENCE
            local_7_REFERENCE = var10; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@139aff05
            local_8_REFERENCE = local_7_REFERENCE.creator; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3c599f1
            var var15 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6b5ddff7
            if (var15 == null ) {
                return null;
            }
            }
        $S_42 : {
        // NORMAL
            var var17 = local_7_REFERENCE.primary; // type is BOOLEAN value type is BOOLEAN
            if ((var17 == 0)) {
                __label__ = 75;
                break $S_42;
            }
            __label__ = 50;
            }
        for(;;) switch (__label__) {
            case 75 :
            // NORMAL
                var var19 = local_8_REFERENCE.jlObjectpop(local_8_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@736b6309
                var local_9_REFERENCE = var19; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6b96379
                local_9_REFERENCE.VOIDinitojdFixtureINTojdFixtureINT(local_9_REFERENCE,fixtureB,indexB,fixtureA,indexA);
                return local_9_REFERENCE;
            case 50 :
            // NORMAL
                var var24 = local_8_REFERENCE.jlObjectpop(local_8_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@35308f90
                var local_9_REFERENCE = var24; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1a9592d6
                local_9_REFERENCE.VOIDinitojdFixtureINTojdFixtureINT(local_9_REFERENCE,fixtureA,indexA,fixtureB,indexB);
                return local_9_REFERENCE;
        }
    },

    classInitCheck : function() {
        if (!ojdWorld.__initialized) {
            ojdWorld.__initialized = true;
            var thePrototype = ojdWorld.Create.prototype;
            thePrototype.instanceOf = ojdWorld.instanceOf;
            thePrototype.ClassgetClass = ojdWorld.ClassgetClass;
            thePrototype.ojdcContactpopContactojdFixtureINTojdFixtureINT = ojdWorld.ojdcContactpopContactojdFixtureINTojdFixtureINT;
            thePrototype.ojdBodygetBodyList = ojdWorld.ojdBodygetBodyList;
            thePrototype.VOIDclearForces = ojdWorld.VOIDclearForces;
            thePrototype.VOIDsolveTOIojdTimeStep = ojdWorld.VOIDsolveTOIojdTimeStep;
            thePrototype.VOIDsolveojdTimeStep = ojdWorld.VOIDsolveojdTimeStep;
            thePrototype.VOIDpushContactojdcContact = ojdWorld.VOIDpushContactojdcContact;
            thePrototype.VOIDstepFLOATINTINT = ojdWorld.VOIDstepFLOATINTINT;
            thePrototype.ojdjJointcreateJointojdjJointDef = ojdWorld.ojdjJointcreateJointojdjJointDef;
            thePrototype.ojpIWorldPoolgetPool = ojdWorld.ojpIWorldPoolgetPool;
            thePrototype.BOOLEANisLocked = ojdWorld.BOOLEANisLocked;
            thePrototype.ojdBodycreateBodyojdBodyDef = ojdWorld.ojdBodycreateBodyojdBodyDef;
            thePrototype.VOIDaddTypeojpIDynamicStackojcsShapeTypeojcsShapeType = ojdWorld.VOIDaddTypeojpIDynamicStackojcsShapeTypeojcsShapeType;
            thePrototype.VOIDinitializeRegisters = ojdWorld.VOIDinitializeRegisters;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            jlInteger.classInitCheck();
            ojdWorld.VOIDclinit();
        }
    },

};

var jlInteger = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 18,
    __implementedTypes : [1,14,18,2,19],
    TYPE : null, // declared in java.lang.Integer

    Create : function() {
        this.integerValue = 0; // declared in java.lang.Integer
    },

    instanceOf : function(aType) {
        return jlInteger.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jlInteger;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var __label__ = null;
        jlInteger.TYPE = jlInteger;
        return;
    },

    VOIDinitINT : function(thisRef,aIntegerValue) {
        var __label__ = null;
        jlNumber.VOIDinit(thisRef);
        thisRef.integerValue = aIntegerValue;
        return;
    },

    jlIntegervalueOfINT : function(aValue) {
        var __label__ = null;
        var var0 = new jlInteger.Create(); // type is REFERENCE value type is REFERENCE
        jlInteger.VOIDinitINT(var0,aValue);
        return var0;
    },

    INThashCode : function(thisRef) {
        var __label__ = null;
        return thisRef.integerValue;
    },

    BOOLEANequalsjlObject : function(thisRef,o) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((thisRef != o)) {
                break $S_0;
            }
            return 1;
            }
        $S_7 : {
        // NORMAL
            var var0 = (o == null ? false : o.instanceOf(jlInteger)); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                break $S_7;
            }
            return 0;
            }
        $S_16 : {
        // NORMAL
            var local_2_REFERENCE = o; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@8f495ed
            var var2 = thisRef.integerValue; // type is INT value type is INT
            var var4 = local_2_REFERENCE.integerValue; // type is INT value type is INT
            if ((var2 != var4)) {
                __label__ = 36;
                break $S_16;
            }
            __label__ = 32;
            }
        for(;;) switch (__label__) {
            case 36 :
            // NORMAL
                var var5 = 0; // type is INT value type is INT
                return var5;
            case 32 :
            // NORMAL
                var var5 = 1; // type is INT value type is INT
                return var5;
        }
    },

    jlStringtoString : function(thisRef) {
        var __label__ = null;
        var var1 = jlInteger.jlStringtoStringINT(thisRef.integerValue); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3d0cea57
        return var1;
    },

    jlStringtoStringINT : function(aValue) {
        var __label__ = null;
        var var0 = new jlStringBuilder.Create(); // type is REFERENCE value type is REFERENCE
        jlStringBuilder.VOIDinit(var0);
        var local_1_REFERENCE = var0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@48819f53
        var var3 = local_1_REFERENCE.jlStringBuilderappendINT(local_1_REFERENCE,aValue); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@67045e3f
        var var5 = local_1_REFERENCE.jlStringtoString(local_1_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@a6612f
        return var5;
    },

    INTintValue : function(thisRef) {
        var __label__ = null;
        return thisRef.integerValue;
    },

    classInitCheck : function() {
        if (!jlInteger.__initialized) {
            jlInteger.__initialized = true;
            var thePrototype = jlInteger.Create.prototype;
            thePrototype.instanceOf = jlInteger.instanceOf;
            thePrototype.ClassgetClass = jlInteger.ClassgetClass;
            thePrototype.INTintValue = jlInteger.INTintValue;
            thePrototype.jlStringtoString = jlInteger.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlInteger.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlInteger.INThashCode;
            jlNumber.classInitCheck();
            jlObject.classInitCheck();
            jlComparable.classInitCheck();
            jiSerializable.classInitCheck();
            jlInteger.VOIDclinit();
        }
    },

};

var jlNumber = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 19,
    __implementedTypes : [1,2,19],

    instanceOf : function(aType) {
        return jlNumber.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jlNumber;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    classInitCheck : function() {
        if (!jlNumber.__initialized) {
            jlNumber.__initialized = true;
            jlObject.classInitCheck();
            jiSerializable.classInitCheck();
        }
    },

};

var ojcVec2 = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 20,
    __implementedTypes : [1,20,2],
    $assertionsDisabled : false, // declared in org.jbox2d.common.Vec2

    Create : function() {
        this.x = 0; // declared in org.jbox2d.common.Vec2
        this.y = 0; // declared in org.jbox2d.common.Vec2
    },

    instanceOf : function(aType) {
        return ojcVec2.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcVec2;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcVec2.BOOLEANdesiredAssertionStatus(ojcVec2); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_9_13 : for(;;) switch (__label__) {
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_9_13;
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_9_13;
        }
        ojcVec2.$assertionsDisabled = var1;
        return;
    },

    VOIDinitFLOATFLOAT : function(thisRef,x,y) {
        var __label__ = null;
        thisRef.x = x;
        thisRef.y = y;
        return;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        ojcVec2.VOIDinitFLOATFLOAT(thisRef,0.0,0.0);
        return;
    },

    ojcVec2setojcVec2 : function(thisRef,v) {
        var __label__ = null;
        var var0 = v.x; // type is FLOAT value type is FLOAT
        thisRef.x = var0;
        var var1 = v.y; // type is FLOAT value type is FLOAT
        thisRef.y = var1;
        return thisRef;
    },

    BOOLEANisValid : function(thisRef) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var1 = jlFloat.BOOLEANisNaNFLOAT(thisRef.x); // type is BOOLEAN value type is BOOLEAN
            if ((var1 != 0)) {
                __label__ = 44;
                break $S_0;
            }
            __label__ = 10;
            }
        $M_10_44 : for(;;) switch (__label__) {
            case 10 :
            // NORMAL
                $S_10 : {
                // NORMAL
                    var var3 = jlFloat.BOOLEANisInfiniteFLOAT(thisRef.x); // type is BOOLEAN value type is BOOLEAN
                    if ((var3 != 0)) {
                        __label__ = 44;
                        continue $M_10_44;
                    }
                    }
                $S_20 : {
                // NORMAL
                    var var5 = jlFloat.BOOLEANisNaNFLOAT(thisRef.y); // type is BOOLEAN value type is BOOLEAN
                    if ((var5 != 0)) {
                        __label__ = 44;
                        continue $M_10_44;
                    }
                    }
                $S_30 : {
                // NORMAL
                    var var7 = jlFloat.BOOLEANisInfiniteFLOAT(thisRef.y); // type is BOOLEAN value type is BOOLEAN
                    if ((var7 != 0)) {
                        __label__ = 44;
                        continue $M_10_44;
                    }
                    }
                var var8 = 1; // type is INT value type is INT
                return var8;
            case 44 :
            // NORMAL
                var var8 = 0; // type is INT value type is INT
                return var8;
        }
    },

    VOIDsetZero : function(thisRef) {
        var __label__ = null;
        thisRef.x = 0.0;
        thisRef.y = 0.0;
        return;
    },

    ojcVec2setFLOATFLOAT : function(thisRef,x,y) {
        var __label__ = null;
        thisRef.x = x;
        thisRef.y = y;
        return thisRef;
    },

    ojcVec2mulLocalFLOAT : function(thisRef,a) {
        var __label__ = null;
        var var1 = (thisRef.x * a); // type is FLOAT value type is FLOAT
        thisRef.x = var1;
        var var3 = (thisRef.y * a); // type is FLOAT value type is FLOAT
        thisRef.y = var3;
        return thisRef;
    },

    ojcVec2addLocalojcVec2 : function(thisRef,v) {
        var __label__ = null;
        var var2 = (thisRef.x + v.x); // type is FLOAT value type is FLOAT
        thisRef.x = var2;
        var var5 = (thisRef.y + v.y); // type is FLOAT value type is FLOAT
        thisRef.y = var5;
        return thisRef;
    },

    FLOATdotojcVec2ojcVec2 : function(a,b) {
        var __label__ = null;
        return ((a.x * b.x) + (a.y * b.y));
    },

    ojcVec2subLocalojcVec2 : function(thisRef,v) {
        var __label__ = null;
        var var2 = (thisRef.x - v.x); // type is FLOAT value type is FLOAT
        thisRef.x = var2;
        var var5 = (thisRef.y - v.y); // type is FLOAT value type is FLOAT
        thisRef.y = var5;
        return thisRef;
    },

    VOIDcrossToOutUnsafeFLOATojcVec2ojcVec2 : function(s,a,out) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcVec2.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 19;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_6_19 : for(;;) switch (__label__) {
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    if ((out != a)) {
                        __label__ = 19;
                        continue $M_6_19;
                    }
                    }
                var var1 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var1);
                throw var1;
            case 19 :
            // NORMAL
                var var4 = ((-s) * a.y); // type is FLOAT value type is FLOAT
                out.x = var4;
                var var6 = (s * a.x); // type is FLOAT value type is FLOAT
                out.y = var6;
                return;
        }
    },

    FLOATcrossojcVec2ojcVec2 : function(a,b) {
        var __label__ = null;
        return ((a.x * b.y) - (a.y * b.x));
    },

    FLOATlengthSquared : function(thisRef) {
        var __label__ = null;
        return ((thisRef.x * thisRef.x) + (thisRef.y * thisRef.y));
    },

    VOIDcrossToOutUnsafeojcVec2FLOATojcVec2 : function(a,s,out) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcVec2.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 19;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_19_6 : for(;;) switch (__label__) {
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    if ((out != a)) {
                        __label__ = 19;
                        continue $M_19_6;
                    }
                    }
                var var6 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var6);
                throw var6;
            case 19 :
            // NORMAL
                var var2 = (s * a.y); // type is FLOAT value type is FLOAT
                out.x = var2;
                var var5 = ((-s) * a.x); // type is FLOAT value type is FLOAT
                out.y = var5;
                return;
        }
    },

    FLOATnormalize : function(thisRef) {
        var local_1_FLOAT = null; // type is FLOAT # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.FLOATlength(thisRef); // type is FLOAT value type is FLOAT
            local_1_FLOAT = var0; // type is FLOAT value type is FLOAT
            var var3 = local_1_FLOAT; // type is FLOAT value type is FLOAT
            if ((var3 >= 1.1920929E-7)) {
                break $S_0;
            }
            return 0.0;
            }
        var local_2_FLOAT = (1.0 / local_1_FLOAT); // type is FLOAT value type is FLOAT
        var var11 = (thisRef.x * local_2_FLOAT); // type is FLOAT value type is FLOAT
        thisRef.x = var11;
        var var14 = (thisRef.y * local_2_FLOAT); // type is FLOAT value type is FLOAT
        thisRef.y = var14;
        return local_1_FLOAT;
    },

    FLOATlength : function(thisRef) {
        var __label__ = null;
        var var7 = ojcMathUtils.FLOATsqrtFLOAT(((thisRef.x * thisRef.x) + (thisRef.y * thisRef.y))); // type is FLOAT value type is FLOAT
        return var7;
    },

    ojcVec2clone : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinitFLOATFLOAT(var0,thisRef.x,thisRef.y);
        return var0;
    },

    VOIDinitojcVec2 : function(thisRef,toCopy) {
        var __label__ = null;
        ojcVec2.VOIDinitFLOATFLOAT(thisRef,toCopy.x,toCopy.y);
        return;
    },

    ojcVec2subojcVec2 : function(thisRef,v) {
        var __label__ = null;
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinitFLOATFLOAT(var0,(thisRef.x - v.x),(thisRef.y - v.y));
        return var0;
    },

    INThashCode : function(thisRef) {
        var __label__ = null;
        var local_1_INT = 31; // type is INT value type is INT
        var local_2_INT = 1; // type is INT value type is INT
        var var5 = (31 * local_2_INT); // type is INT value type is INT
        var var7 = jlFloat.INTfloatToIntBitsFLOAT(thisRef.x); // type is INT value type is INT
        var local_2_INT = (var5 + var7); // type is INT value type is INT
        var var11 = (31 * local_2_INT); // type is INT value type is INT
        var var13 = jlFloat.INTfloatToIntBitsFLOAT(thisRef.y); // type is INT value type is INT
        var local_2_INT = (var11 + var13); // type is INT value type is INT
        return local_2_INT;
    },

    BOOLEANequalsjlObject : function(thisRef,obj) {
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((thisRef != obj)) {
                break $S_0;
            }
            return 1;
            }
        $S_7 : {
        // NORMAL
            if (obj != null ) {
                break $S_7;
            }
            return 0;
            }
        $S_13 : {
        // NORMAL
            var var0 = thisRef.ClassgetClass(); // type is REFERENCE value type is REFERENCE
            var var1 = obj.ClassgetClass(); // type is REFERENCE value type is REFERENCE
            if ((var0 == var1)) {
                break $S_13;
            }
            return 0;
            }
        $S_26 : {
        // NORMAL
            local_2_REFERENCE = obj; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@8228e1c
            var var4 = jlFloat.INTfloatToIntBitsFLOAT(thisRef.x); // type is INT value type is INT
            var var7 = jlFloat.INTfloatToIntBitsFLOAT(local_2_REFERENCE.x); // type is INT value type is INT
            if ((var4 == var7)) {
                break $S_26;
            }
            return 0;
            }
        var var9 = jlFloat.INTfloatToIntBitsFLOAT(thisRef.y); // type is INT value type is INT
        var var12 = jlFloat.INTfloatToIntBitsFLOAT(local_2_REFERENCE.y); // type is INT value type is INT
        if ((var9 == var12)) {
            return 1;
        }
        return 0;
    },

    jlStringtoString : function(thisRef) {
        var __label__ = null;
        var var0 = new jlStringBuilder.Create(); // type is REFERENCE value type is REFERENCE
        jlStringBuilder.VOIDinit(var0);
        var var1 = var0.jlStringBuilderappendjlString(var0,bytecoder.stringpool[8]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@cd9d923
        var var3 = var1.jlStringBuilderappendFLOAT(var1,thisRef.x); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@148285ca
        var var4 = var3.jlStringBuilderappendjlString(var3,bytecoder.stringpool[9]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5f149f8e
        var var6 = var4.jlStringBuilderappendFLOAT(var4,thisRef.y); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@e663dd8
        var var7 = var6.jlStringBuilderappendjlString(var6,bytecoder.stringpool[10]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4c34fdf6
        var var8 = var7.jlStringtoString(var7); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4c989d6f
        return var8;
    },

    ojcVec2negateLocal : function(thisRef) {
        var __label__ = null;
        var var1 = (-thisRef.x); // type is FLOAT value type is FLOAT
        thisRef.x = var1;
        var var3 = (-thisRef.y); // type is FLOAT value type is FLOAT
        thisRef.y = var3;
        return thisRef;
    },

    ojcVec2addLocalFLOATFLOAT : function(thisRef,x,y) {
        var __label__ = null;
        var var1 = (thisRef.x + x); // type is FLOAT value type is FLOAT
        thisRef.x = var1;
        var var3 = (thisRef.y + y); // type is FLOAT value type is FLOAT
        thisRef.y = var3;
        return thisRef;
    },

    classInitCheck : function() {
        if (!ojcVec2.__initialized) {
            ojcVec2.__initialized = true;
            var thePrototype = ojcVec2.Create.prototype;
            thePrototype.instanceOf = ojcVec2.instanceOf;
            thePrototype.ClassgetClass = ojcVec2.ClassgetClass;
            thePrototype.ojcVec2addLocalFLOATFLOAT = ojcVec2.ojcVec2addLocalFLOATFLOAT;
            thePrototype.ojcVec2negateLocal = ojcVec2.ojcVec2negateLocal;
            thePrototype.jlStringtoString = ojcVec2.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = ojcVec2.BOOLEANequalsjlObject;
            thePrototype.INThashCode = ojcVec2.INThashCode;
            thePrototype.ojcVec2subojcVec2 = ojcVec2.ojcVec2subojcVec2;
            thePrototype.ojcVec2clone = ojcVec2.ojcVec2clone;
            thePrototype.FLOATlength = ojcVec2.FLOATlength;
            thePrototype.FLOATnormalize = ojcVec2.FLOATnormalize;
            thePrototype.FLOATlengthSquared = ojcVec2.FLOATlengthSquared;
            thePrototype.ojcVec2subLocalojcVec2 = ojcVec2.ojcVec2subLocalojcVec2;
            thePrototype.ojcVec2addLocalojcVec2 = ojcVec2.ojcVec2addLocalojcVec2;
            thePrototype.ojcVec2mulLocalFLOAT = ojcVec2.ojcVec2mulLocalFLOAT;
            thePrototype.ojcVec2setFLOATFLOAT = ojcVec2.ojcVec2setFLOATFLOAT;
            thePrototype.VOIDsetZero = ojcVec2.VOIDsetZero;
            thePrototype.BOOLEANisValid = ojcVec2.BOOLEANisValid;
            thePrototype.ojcVec2setojcVec2 = ojcVec2.ojcVec2setojcVec2;
            jlObject.classInitCheck();
            jiSerializable.classInitCheck();
            ojcVec2.VOIDclinit();
        }
    },

};

var ojpnDefaultWorldPool = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 21,
    __implementedTypes : [1,21,22],
    $assertionsDisabled : false, // declared in org.jbox2d.pooling.normal.DefaultWorldPool

    Create : function() {
        this.afloats = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool
        this.aints = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool
        this.avecs = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool
        this.world = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool
        this.pcstack = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool
        this.ccstack = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool
        this.cpstack = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool
        this.ecstack = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool
        this.epstack = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool
        this.chcstack = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool
        this.chpstack = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool
        this.vecs = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool
        this.vec3s = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool
        this.mats = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool
        this.aabbs = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool
        this.rots = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool
        this.mat33s = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool
        this.dist = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool
        this.collision = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool
        this.toi = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool
    },

    instanceOf : function(aType) {
        return ojpnDefaultWorldPool.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojpnDefaultWorldPool;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojpnDefaultWorldPool.BOOLEANdesiredAssertionStatus(ojpnDefaultWorldPool); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_13_9 : for(;;) switch (__label__) {
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_13_9;
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_13_9;
        }
        ojpnDefaultWorldPool.$assertionsDisabled = var1;
        return;
    },

    VOIDinitINTINT : function(thisRef,argSize,argContainerSize) {
        var __label__ = null;
        var var0 = new juHashMap.Create(); // type is REFERENCE value type is REFERENCE
        juHashMap.VOIDinit(var0);
        thisRef.afloats = var0;
        var var1 = new juHashMap.Create(); // type is REFERENCE value type is REFERENCE
        juHashMap.VOIDinit(var1);
        thisRef.aints = var1;
        var var2 = new juHashMap.Create(); // type is REFERENCE value type is REFERENCE
        juHashMap.VOIDinit(var2);
        thisRef.avecs = var2;
        thisRef.world = thisRef;
        var var3 = new ojpnDefaultWorldPool$1.Create(); // type is REFERENCE value type is REFERENCE
        ojpnDefaultWorldPool$1.VOIDinitojpnDefaultWorldPoolINT(var3,thisRef,ojcSettings.CONTACT_STACK_INIT_SIZE);
        thisRef.pcstack = var3;
        var var5 = new ojpnDefaultWorldPool$2.Create(); // type is REFERENCE value type is REFERENCE
        ojpnDefaultWorldPool$2.VOIDinitojpnDefaultWorldPoolINT(var5,thisRef,ojcSettings.CONTACT_STACK_INIT_SIZE);
        thisRef.ccstack = var5;
        var var7 = new ojpnDefaultWorldPool$3.Create(); // type is REFERENCE value type is REFERENCE
        ojpnDefaultWorldPool$3.VOIDinitojpnDefaultWorldPoolINT(var7,thisRef,ojcSettings.CONTACT_STACK_INIT_SIZE);
        thisRef.cpstack = var7;
        var var9 = new ojpnDefaultWorldPool$4.Create(); // type is REFERENCE value type is REFERENCE
        ojpnDefaultWorldPool$4.VOIDinitojpnDefaultWorldPoolINT(var9,thisRef,ojcSettings.CONTACT_STACK_INIT_SIZE);
        thisRef.ecstack = var9;
        var var11 = new ojpnDefaultWorldPool$5.Create(); // type is REFERENCE value type is REFERENCE
        ojpnDefaultWorldPool$5.VOIDinitojpnDefaultWorldPoolINT(var11,thisRef,ojcSettings.CONTACT_STACK_INIT_SIZE);
        thisRef.epstack = var11;
        var var13 = new ojpnDefaultWorldPool$6.Create(); // type is REFERENCE value type is REFERENCE
        ojpnDefaultWorldPool$6.VOIDinitojpnDefaultWorldPoolINT(var13,thisRef,ojcSettings.CONTACT_STACK_INIT_SIZE);
        thisRef.chcstack = var13;
        var var15 = new ojpnDefaultWorldPool$7.Create(); // type is REFERENCE value type is REFERENCE
        ojpnDefaultWorldPool$7.VOIDinitojpnDefaultWorldPoolINT(var15,thisRef,ojcSettings.CONTACT_STACK_INIT_SIZE);
        thisRef.chpstack = var15;
        var var17 = new ojpnDefaultWorldPool$8.Create(); // type is REFERENCE value type is REFERENCE
        ojpnDefaultWorldPool$8.VOIDinitojpnDefaultWorldPoolINTINT(var17,thisRef,argSize,argContainerSize);
        thisRef.vecs = var17;
        var var18 = new ojpnDefaultWorldPool$9.Create(); // type is REFERENCE value type is REFERENCE
        ojpnDefaultWorldPool$9.VOIDinitojpnDefaultWorldPoolINTINT(var18,thisRef,argSize,argContainerSize);
        thisRef.vec3s = var18;
        var var19 = new ojpnDefaultWorldPool$10.Create(); // type is REFERENCE value type is REFERENCE
        ojpnDefaultWorldPool$10.VOIDinitojpnDefaultWorldPoolINTINT(var19,thisRef,argSize,argContainerSize);
        thisRef.mats = var19;
        var var20 = new ojpnDefaultWorldPool$11.Create(); // type is REFERENCE value type is REFERENCE
        ojpnDefaultWorldPool$11.VOIDinitojpnDefaultWorldPoolINTINT(var20,thisRef,argSize,argContainerSize);
        thisRef.aabbs = var20;
        var var21 = new ojpnDefaultWorldPool$12.Create(); // type is REFERENCE value type is REFERENCE
        ojpnDefaultWorldPool$12.VOIDinitojpnDefaultWorldPoolINTINT(var21,thisRef,argSize,argContainerSize);
        thisRef.rots = var21;
        var var22 = new ojpnDefaultWorldPool$13.Create(); // type is REFERENCE value type is REFERENCE
        ojpnDefaultWorldPool$13.VOIDinitojpnDefaultWorldPoolINTINT(var22,thisRef,argSize,argContainerSize);
        thisRef.mat33s = var22;
        var var23 = new ojcDistance.Create(); // type is REFERENCE value type is REFERENCE
        ojcDistance.VOIDinit(var23);
        thisRef.dist = var23;
        var var24 = new ojcCollision.Create(); // type is REFERENCE value type is REFERENCE
        ojcCollision.VOIDinitojpIWorldPool(var24,thisRef);
        thisRef.collision = var24;
        var var25 = new ojcTimeOfImpact.Create(); // type is REFERENCE value type is REFERENCE
        ojcTimeOfImpact.VOIDinitojpIWorldPool(var25,thisRef);
        thisRef.toi = var25;
        return;
    },

    ojpIDynamicStackgetCircleContactStack : function(thisRef) {
        var __label__ = null;
        return thisRef.ccstack;
    },

    ojpIDynamicStackgetPolyCircleContactStack : function(thisRef) {
        var __label__ = null;
        return thisRef.cpstack;
    },

    ojpIDynamicStackgetPolyContactStack : function(thisRef) {
        var __label__ = null;
        return thisRef.pcstack;
    },

    ojpIDynamicStackgetEdgeCircleContactStack : function(thisRef) {
        var __label__ = null;
        return thisRef.ecstack;
    },

    ojpIDynamicStackgetEdgePolyContactStack : function(thisRef) {
        var __label__ = null;
        return thisRef.epstack;
    },

    ojpIDynamicStackgetChainCircleContactStack : function(thisRef) {
        var __label__ = null;
        return thisRef.chcstack;
    },

    ojpIDynamicStackgetChainPolyContactStack : function(thisRef) {
        var __label__ = null;
        return thisRef.chpstack;
    },

    ojcVec2popVec2 : function(thisRef) {
        var __label__ = null;
        var var1 = thisRef.vecs.jlObjectpop(thisRef.vecs); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@34a03689
        return var1;
    },

    VOIDpushVec2INT : function(thisRef,argNum) {
        var __label__ = null;
        thisRef.vecs.VOIDpushINT(thisRef.vecs,argNum);
        return;
    },

    ojpIWorldPoolaccess$000ojpnDefaultWorldPool : function(x0) {
        var __label__ = null;
        return x0.world;
    },

    ojcCollisiongetCollision : function(thisRef) {
        var __label__ = null;
        return thisRef.collision;
    },

    ojcDistancegetDistance : function(thisRef) {
        var __label__ = null;
        return thisRef.dist;
    },

    ojcTimeOfImpactgetTimeOfImpact : function(thisRef) {
        var __label__ = null;
        return thisRef.toi;
    },

    ojcRotpopRot : function(thisRef) {
        var __label__ = null;
        var var1 = thisRef.rots.jlObjectpop(thisRef.rots); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7804db0e
        return var1;
    },

    ojcMat22popMat22 : function(thisRef) {
        var __label__ = null;
        var var1 = thisRef.mats.jlObjectpop(thisRef.mats); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3d9944d1
        return var1;
    },

    VOIDpushMat22INT : function(thisRef,argNum) {
        var __label__ = null;
        thisRef.mats.VOIDpushINT(thisRef.mats,argNum);
        return;
    },

    VOIDpushRotINT : function(thisRef,num) {
        var __label__ = null;
        thisRef.rots.VOIDpushINT(thisRef.rots,num);
        return;
    },

    ojcVec3popVec3 : function(thisRef) {
        var __label__ = null;
        var var1 = thisRef.vec3s.jlObjectpop(thisRef.vec3s); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@785b3066
        return var1;
    },

    VOIDpushVec3INT : function(thisRef,argNum) {
        var __label__ = null;
        thisRef.vec3s.VOIDpushINT(thisRef.vec3s,argNum);
        return;
    },

    ojcMat33popMat33 : function(thisRef) {
        var __label__ = null;
        var var1 = thisRef.mat33s.jlObjectpop(thisRef.mat33s); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@48fd32a9
        return var1;
    },

    VOIDpushMat33INT : function(thisRef,argNum) {
        var __label__ = null;
        thisRef.mat33s.VOIDpushINT(thisRef.mat33s,argNum);
        return;
    },

    A1ojcVec2getVec2ArrayINT : function(thisRef,argLength) {
        var local_3_INT = null; // type is INT # of inits = 3
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.avecs; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@38e314b8
            var var1 = jlInteger.jlIntegervalueOfINT(argLength); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5f096266
            var var2 = var0.BOOLEANcontainsKeyjlObject(var0,var1); // type is BOOLEAN value type is BOOLEAN
            if ((var2 != 0)) {
                __label__ = 55;
                break $S_0;
            }
            __label__ = 14;
            }
        $M_14_55 : for(;;) switch (__label__) {
            case 55 :
            // NORMAL
                $S_55 : {
                // NORMAL
                    var var12 = ojpnDefaultWorldPool.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                    if ((var12 != 0)) {
                        __label__ = 90;
                        break $S_55;
                    }
                    __label__ = 61;
                    }
                $M_90_61 : for(;;) switch (__label__) {
                    case 61 :
                    // NORMAL
                        $S_61 : {
                        // NORMAL
                            var var13 = thisRef.avecs; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@13af7c6b
                            var var14 = jlInteger.jlIntegervalueOfINT(argLength); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3bdbe05d
                            var var15 = var13.jlObjectgetjlObject(var13,var14); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1b3d754a
                            var var16 = var15.data.length; // type is INT value type is INT
                            if ((var16 == argLength)) {
                                __label__ = 90;
                                continue $M_90_61;
                            }
                            }
                        var var20 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                        jlAssertionError.VOIDinitjlObject(var20,bytecoder.stringpool[11]);
                        throw var20;
                    case 90 :
                    // NORMAL
                        var var17 = thisRef.avecs; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@f332e19
                        var var18 = jlInteger.jlIntegervalueOfINT(argLength); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@679757b0
                        var var19 = var17.jlObjectgetjlObject(var17,var18); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3aa8a17
                        return var19;
                }
            case 14 :
            // NORMAL
                $S_14 : {
                // NORMAL
                    local_2_REFERENCE = bytecoder.newArray(argLength,null); // type is REFERENCE value type is REFERENCE
                    local_3_INT = 0; // type is INT value type is INT
                    __label__ = 21;
                    }
                $L_21 : for (;;) {
                    $S_21 : {
                    // NORMAL
                        var var7 = local_3_INT; // type is INT value type is INT
                        if ((var7 >= argLength)) {
                            __label__ = 42;
                            break $S_21;
                        }
                        __label__ = 26;
                        }
                    for(;;) switch (__label__) {
                        case 42 :
                        // NORMAL
                            var var8 = thisRef.avecs; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@734d280d
                            var var9 = jlInteger.jlIntegervalueOfINT(argLength); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6518939b
                            var var11 = var8.jlObjectputjlObjectjlObject(var8,var9,local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@38ef725f
                            __label__ = 55;
                            continue $M_14_55;
                        case 26 :
                        // NORMAL
                            var var21 = local_2_REFERENCE; // type is REFERENCE value type is REFERENCE
                            var var22 = local_3_INT; // type is INT value type is INT
                            var var23 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
                            ojcVec2.VOIDinit(var23);
                            var21.data[var22] = var23;
                            local_3_INT = (local_3_INT + 1); // type is INT value type is INT
                            __label__ = 21;
                            continue $L_21;
                    }
                }
        }
    },

    classInitCheck : function() {
        if (!ojpnDefaultWorldPool.__initialized) {
            ojpnDefaultWorldPool.__initialized = true;
            var thePrototype = ojpnDefaultWorldPool.Create.prototype;
            thePrototype.instanceOf = ojpnDefaultWorldPool.instanceOf;
            thePrototype.ClassgetClass = ojpnDefaultWorldPool.ClassgetClass;
            thePrototype.A1ojcVec2getVec2ArrayINT = ojpnDefaultWorldPool.A1ojcVec2getVec2ArrayINT;
            thePrototype.VOIDpushMat33INT = ojpnDefaultWorldPool.VOIDpushMat33INT;
            thePrototype.ojcMat33popMat33 = ojpnDefaultWorldPool.ojcMat33popMat33;
            thePrototype.VOIDpushVec3INT = ojpnDefaultWorldPool.VOIDpushVec3INT;
            thePrototype.ojcVec3popVec3 = ojpnDefaultWorldPool.ojcVec3popVec3;
            thePrototype.VOIDpushRotINT = ojpnDefaultWorldPool.VOIDpushRotINT;
            thePrototype.VOIDpushMat22INT = ojpnDefaultWorldPool.VOIDpushMat22INT;
            thePrototype.ojcMat22popMat22 = ojpnDefaultWorldPool.ojcMat22popMat22;
            thePrototype.ojcRotpopRot = ojpnDefaultWorldPool.ojcRotpopRot;
            thePrototype.ojcTimeOfImpactgetTimeOfImpact = ojpnDefaultWorldPool.ojcTimeOfImpactgetTimeOfImpact;
            thePrototype.ojcDistancegetDistance = ojpnDefaultWorldPool.ojcDistancegetDistance;
            thePrototype.ojcCollisiongetCollision = ojpnDefaultWorldPool.ojcCollisiongetCollision;
            thePrototype.VOIDpushVec2INT = ojpnDefaultWorldPool.VOIDpushVec2INT;
            thePrototype.ojcVec2popVec2 = ojpnDefaultWorldPool.ojcVec2popVec2;
            thePrototype.ojpIDynamicStackgetChainPolyContactStack = ojpnDefaultWorldPool.ojpIDynamicStackgetChainPolyContactStack;
            thePrototype.ojpIDynamicStackgetChainCircleContactStack = ojpnDefaultWorldPool.ojpIDynamicStackgetChainCircleContactStack;
            thePrototype.ojpIDynamicStackgetEdgePolyContactStack = ojpnDefaultWorldPool.ojpIDynamicStackgetEdgePolyContactStack;
            thePrototype.ojpIDynamicStackgetEdgeCircleContactStack = ojpnDefaultWorldPool.ojpIDynamicStackgetEdgeCircleContactStack;
            thePrototype.ojpIDynamicStackgetPolyContactStack = ojpnDefaultWorldPool.ojpIDynamicStackgetPolyContactStack;
            thePrototype.ojpIDynamicStackgetPolyCircleContactStack = ojpnDefaultWorldPool.ojpIDynamicStackgetPolyCircleContactStack;
            thePrototype.ojpIDynamicStackgetCircleContactStack = ojpnDefaultWorldPool.ojpIDynamicStackgetCircleContactStack;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            ojpIWorldPool.classInitCheck();
            ojpnDefaultWorldPool.VOIDclinit();
        }
    },

};

var ojpIWorldPool = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 22,
    __implementedTypes : [1,22],


    classInitCheck : function() {
        if (!ojpIWorldPool.__initialized) {
            ojpIWorldPool.__initialized = true;
            jlObject.classInitCheck();
        }
    },

};

var juHashMap = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 23,
    __implementedTypes : [25,1,23,26,2,24],

    Create : function() {
        this.loadFactor = 0; // declared in java.util.HashMap
        this.table = null; // declared in java.util.HashMap
        this.threshold = 0; // declared in java.util.HashMap
        this.modCount = 0; // declared in java.util.HashMap
        this.size = 0; // declared in java.util.HashMap
        this.entrySet = null; // declared in java.util.HashMap
    },

    instanceOf : function(aType) {
        return juHashMap.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return juHashMap;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        juAbstractMap.VOIDinit(thisRef);
        thisRef.loadFactor = 0.75;
        return;
    },

    BOOLEANcontainsKeyjlObject : function(thisRef,key) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = juHashMap.INThashjlObject(key); // type is INT value type is INT
            var var1 = thisRef.juHashMap$NodegetNodeINTjlObject(thisRef,var0,key); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@737c31df
            if (var1 == null ) {
                __label__ = 16;
                break $S_0;
            }
            __label__ = 12;
            }
        for(;;) switch (__label__) {
            case 16 :
            // NORMAL
                var var2 = 0; // type is INT value type is INT
                return var2;
            case 12 :
            // NORMAL
                var var2 = 1; // type is INT value type is INT
                return var2;
        }
    },

    INThashjlObject : function(key) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if (key != null ) {
                __label__ = 8;
                break $S_0;
            }
            __label__ = 4;
            }
        for(;;) switch (__label__) {
            case 8 :
            // NORMAL
                var var0 = key.INThashCode(key); // type is INT value type is INT
                var local_1_INT = var0; // type is INT value type is INT
                var var6 = (var0 ^ (local_1_INT >>> 16)); // type is INT value type is INT
                return var6;
            case 4 :
            // NORMAL
                var var6 = 0; // type is INT value type is INT
                return var6;
        }
    },

    juHashMap$NodegetNodeINTjlObject : function(thisRef,hash,key) {
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_7_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_6_INT = null; // type is INT # of inits = 1
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.table; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@78311881
            local_3_REFERENCE = var0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@288d8b75
            if (var0 == null ) {
                return null;
            }
            }
        $S_9 : {
        // NORMAL
            var var3 = local_3_REFERENCE.data.length; // type is INT value type is INT
            local_6_INT = var3; // type is INT value type is INT
            if ((var3 <= 0)) {
                return null;
            }
            }
        $S_17 : {
        // NORMAL
            var var10 = local_3_REFERENCE.data[((local_6_INT - 1) & hash)]; // type is REFERENCE value type is REFERENCE
            local_4_REFERENCE = var10; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@193e80ba
            if (var10 == null ) {
                return null;
            }
            }
        $S_31 : {
        // NORMAL
            var var13 = local_4_REFERENCE.hash; // type is INT value type is INT
            if ((var13 != hash)) {
                __label__ = 68;
                break $S_31;
            }
            __label__ = 40;
            }
        $M_40_68 : for(;;) switch (__label__) {
            case 68 :
            // NORMAL
                $S_68 : {
                // NORMAL
                    var var20 = local_4_REFERENCE.next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1aec7f64
                    local_5_REFERENCE = var20; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@491617e0
                    if (var20 == null ) {
                        return null;
                    }
                    }
                $S_79 : {
                // NORMAL
                    var var23 = (local_4_REFERENCE == null ? false : local_4_REFERENCE.instanceOf(juHashMap$TreeNode)); // type is BOOLEAN value type is BOOLEAN
                    if ((var23 == 0)) {
                        __label__ = 98;
                        break $S_79;
                    }
                    __label__ = 87;
                    }
                $M_98_87 : for(;;) switch (__label__) {
                    case 98 :
                    // NORMAL
                        for (;;) {
                            $S_98 : {
                            // NORMAL
                                var var25 = local_5_REFERENCE.hash; // type is INT value type is INT
                                if ((var25 != hash)) {
                                    __label__ = 135;
                                    break $S_98;
                                }
                                __label__ = 107;
                                }
                            $M_107_135 : for(;;) switch (__label__) {
                                case 135 :
                                // NORMAL
                                    var var31 = local_5_REFERENCE.next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@440b419f
                                    local_5_REFERENCE = var31; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@24406528
                                    if (var31 != null ) {
                                        __label__ = 98;
                                        continue $M_98_87;
                                    }
                                    return null;
                                case 107 :
                                // NORMAL
                                    $S_107 : {
                                    // NORMAL
                                        var var27 = local_5_REFERENCE.key; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5a9f967b
                                        local_7_REFERENCE = var27; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@d84f306
                                        if ((var27 == key)) {
                                            return local_5_REFERENCE;
                                        }
                                        }
                                    $S_119 : {
                                    // NORMAL
                                        if (key == null ) {
                                            __label__ = 135;
                                            continue $M_107_135;
                                        }
                                        }
                                    var var29 = key.BOOLEANequalsjlObject(key,local_7_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                    if ((var29 == 0)) {
                                        __label__ = 135;
                                        continue $M_107_135;
                                    }
                                    return local_5_REFERENCE;
                            }
                        }
                    case 87 :
                    // NORMAL
                        var var34 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@193e80ba
                        var var35 = var34.juHashMap$TreeNodegetTreeNodeINTjlObject(var34,hash,key); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@53f425d1
                        return var35;
                }
            case 40 :
            // NORMAL
                $S_40 : {
                // NORMAL
                    var var15 = local_4_REFERENCE.key; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4ded8189
                    local_7_REFERENCE = var15; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@51594a05
                    if ((var15 == key)) {
                        return local_4_REFERENCE;
                    }
                    }
                $S_52 : {
                // NORMAL
                    if (key == null ) {
                        __label__ = 68;
                        continue $M_40_68;
                    }
                    }
                var var18 = key.BOOLEANequalsjlObject(key,local_7_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                if ((var18 == 0)) {
                    __label__ = 68;
                    continue $M_40_68;
                }
                return local_4_REFERENCE;
        }
    },

    jlClasscomparableClassForjlObject : function(x) {
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_8_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_7_INT = null; // type is INT # of inits = 3
        var local_6_INT = null; // type is INT # of inits = 2
        var local_1_REFERENCE = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = (x == null ? false : x.instanceOf(jlComparable)); // type is BOOLEAN value type is BOOLEAN
            if ((var0 == 0)) {
                return null;
            }
            }
        $S_7 : {
        // NORMAL
            var var1 = x.ClassgetClass(); // type is REFERENCE value type is REFERENCE
            local_1_REFERENCE = var1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@32ac047a
            if ((var1 != jlString)) {
                break $S_7;
            }
            return local_1_REFERENCE;
            }
        $S_20 : {
        // NORMAL
            var var5 = local_1_REFERENCE.A1jlrTypegetGenericInterfaces(local_1_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3aab3ac1
            local_2_REFERENCE = var5; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@4421890e
            if (var5 == null ) {
                return null;
            }
            }
        $S_29 : {
        // NORMAL
            local_5_REFERENCE = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@4421890e
            local_6_INT = local_5_REFERENCE.data.length; // type is INT value type is INT
            local_7_INT = 0; // type is INT value type is INT
            __label__ = 40;
            }
        $L_40 : for (;;) {
            $S_40 : {
            // NORMAL
                var var15 = local_7_INT; // type is INT value type is INT
                var var16 = local_6_INT; // type is INT value type is INT
                if ((var15 >= var16)) {
                    return null;
                }
                }
            $S_47 : {
            // NORMAL
                var var19 = local_5_REFERENCE.data[local_7_INT]; // type is REFERENCE value type is REFERENCE
                local_8_REFERENCE = var19; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@317b3ad5
                var var22 = (local_8_REFERENCE == null ? false : local_8_REFERENCE.instanceOf(jlrParameterizedType)); // type is BOOLEAN value type is BOOLEAN
                if ((var22 == 0)) {
                    __label__ = 107;
                    break $S_47;
                }
                __label__ = 62;
                }
            $M_107_62 : for(;;) switch (__label__) {
                case 62 :
                // NORMAL
                    $S_62 : {
                    // NORMAL
                        var var23 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@317b3ad5
                        local_4_REFERENCE = var23; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@317b3ad5
                        var var25 = var23.jlrTypegetRawType(var23); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4831a488
                        if ((var25 != jlComparable)) {
                            __label__ = 107;
                            continue $M_107_62;
                        }
                        }
                    $S_80 : {
                    // NORMAL
                        var var27 = local_4_REFERENCE.A1jlrTypegetActualTypeArguments(local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@320a196
                        local_3_REFERENCE = var27; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@63266754
                        if (var27 == null ) {
                            __label__ = 107;
                            continue $M_107_62;
                        }
                        }
                    $S_92 : {
                    // NORMAL
                        var var30 = local_3_REFERENCE.data.length; // type is INT value type is INT
                        if ((var30 != 1)) {
                            __label__ = 107;
                            continue $M_107_62;
                        }
                        }
                    var var32 = local_3_REFERENCE.data[0]; // type is REFERENCE value type is REFERENCE
                    var var33 = local_1_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@32ac047a
                    if ((var32 != var33)) {
                        __label__ = 107;
                        continue $M_107_62;
                    }
                    return local_1_REFERENCE;
                case 107 :
                // NORMAL
                    local_7_INT = (local_7_INT + 1); // type is INT value type is INT
                    __label__ = 40;
                    continue $L_40;
            }
        }
    },

    INTcompareComparablesjlClassjlObjectjlObject : function(kc,k,x) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if (x == null ) {
                __label__ = 12;
                break $S_0;
            }
            __label__ = 4;
            }
        $M_4_12 : for(;;) switch (__label__) {
            case 12 :
            // NORMAL
                var var2 = 0; // type is INT value type is INT
                return var2;
            case 4 :
            // NORMAL
                $S_4 : {
                // NORMAL
                    var var0 = x.ClassgetClass(); // type is REFERENCE value type is REFERENCE
                    if ((var0 == kc)) {
                        break $S_4;
                    }
                    __label__ = 12;
                    continue $M_4_12;
                    }
                var var1 = k.INTcompareTojlObject(k,x); // type is INT value type is INT
                var var2 = var1; // type is INT value type is INT
                return var2;
        }
    },

    jlObjectputjlObjectjlObject : function(thisRef,key,value) {
        var __label__ = null;
        var var0 = juHashMap.INThashjlObject(key); // type is INT value type is INT
        var var1 = thisRef.jlObjectputValINTjlObjectjlObjectBOOLEANBOOLEAN(thisRef,var0,key,value,0,1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2a5a4894
        return var1;
    },

    jlObjectputValINTjlObjectjlObjectBOOLEANBOOLEAN : function(thisRef,hash,key,value,onlyIfAbsent,evict) {
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_8_INT = null; // type is INT # of inits = 2
        var local_9_INT = null; // type is INT # of inits = 1
        var local_11_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_12_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_10_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_7_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_12_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.table; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@6f68815f
            local_6_REFERENCE = var0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3237a914
            if (var0 == null ) {
                __label__ = 19;
                break $S_0;
            }
            __label__ = 10;
            }
        $M_10_19 : for(;;) switch (__label__) {
            case 19 :
            // NORMAL
                var var6 = thisRef.A1juHashMap$Noderesize(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@7b7b2147
                local_6_REFERENCE = var6; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@52323cd4
                local_8_INT = var6.data.length; // type is INT value type is INT
                break $M_10_19;
            case 10 :
            // NORMAL
                var var3 = local_6_REFERENCE.data.length; // type is INT value type is INT
                local_8_INT = var3; // type is INT value type is INT
                if ((var3 != 0)) {
                    break $M_10_19;
                }
                __label__ = 19;
                continue $M_10_19;
        }
        $S_29 : {
        // NORMAL
            var var9 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3237a914
            var var12 = ((local_8_INT - 1) & hash); // type is INT value type is INT
            local_9_INT = var12; // type is INT value type is INT
            var var15 = var9.data[var12]; // type is REFERENCE value type is REFERENCE
            local_7_REFERENCE = var15; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@304879f3
            if (var15 != null ) {
                __label__ = 63;
                break $S_29;
            }
            __label__ = 47;
            }
        $M_47_63 : for(;;) switch (__label__) {
            case 47 :
            // NORMAL
                var var54 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3237a914
                var var55 = local_9_INT; // type is INT value type is INT
                var var56 = thisRef.juHashMap$NodenewNodeINTjlObjectjlObjectjuHashMap$Node(thisRef,hash,key,value,null); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@db91573
                var54.data[var55] = var56;
                break $M_47_63;
            case 63 :
            // NORMAL
                $S_63 : {
                // NORMAL
                    var var18 = local_7_REFERENCE.hash; // type is INT value type is INT
                    if ((var18 != hash)) {
                        __label__ = 104;
                        break $S_63;
                    }
                    __label__ = 72;
                    }
                $M_72_104 : for(;;) switch (__label__) {
                    case 104 :
                    // NORMAL
                        $S_104 : {
                        // NORMAL
                            var var27 = (local_7_REFERENCE == null ? false : local_7_REFERENCE.instanceOf(juHashMap$TreeNode)); // type is BOOLEAN value type is BOOLEAN
                            if ((var27 == 0)) {
                                __label__ = 131;
                                break $S_104;
                            }
                            __label__ = 112;
                            }
                        for(;;) switch (__label__) {
                            case 131 :
                            // NORMAL
                                $S_131 : {
                                // NORMAL
                                    local_12_INT = 0; // type is INT value type is INT
                                    __label__ = 134;
                                    }
                                $L_134 : for (;;) {
                                    $S_134 : {
                                    // NORMAL
                                        var var34 = local_7_REFERENCE.next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@186f84a4
                                        local_10_REFERENCE = var34; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2717a51a
                                        if (var34 != null ) {
                                            __label__ = 175;
                                            break $S_134;
                                        }
                                        __label__ = 145;
                                        }
                                    for(;;) switch (__label__) {
                                        case 145 :
                                        // NORMAL
                                            $S_145 : {
                                            // NORMAL
                                                var var35 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@304879f3
                                                var var36 = thisRef.juHashMap$NodenewNodeINTjlObjectjlObjectjuHashMap$Node(thisRef,hash,key,value,null); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@33268c8f
                                                var35.next = var36;
                                                var var37 = local_12_INT; // type is INT value type is INT
                                                if ((var37 < 7)) {
                                                    break $M_72_104;
                                                }
                                                }
                                            thisRef.VOIDtreeifyBinA1juHashMap$NodeINT(thisRef,local_6_REFERENCE,hash);
                                            break $M_72_104;
                                        case 175 :
                                        // NORMAL
                                            $S_175 : {
                                            // NORMAL
                                                var var40 = local_10_REFERENCE.hash; // type is INT value type is INT
                                                if ((var40 != hash)) {
                                                    __label__ = 212;
                                                    break $S_175;
                                                }
                                                __label__ = 184;
                                                }
                                            $M_184_212 : for(;;) switch (__label__) {
                                                case 184 :
                                                // NORMAL
                                                    $S_184 : {
                                                    // NORMAL
                                                        var var42 = local_10_REFERENCE.key; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1175f2b5
                                                        local_11_REFERENCE = var42; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@17748332
                                                        if ((var42 == key)) {
                                                            break $M_72_104;
                                                        }
                                                        }
                                                    $S_196 : {
                                                    // NORMAL
                                                        if (key == null ) {
                                                            __label__ = 212;
                                                            continue $M_184_212;
                                                        }
                                                        }
                                                    $S_200 : {
                                                    // NORMAL
                                                        var var44 = key.BOOLEANequalsjlObject(key,local_11_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                                        if ((var44 == 0)) {
                                                            __label__ = 212;
                                                            continue $M_184_212;
                                                        }
                                                        }
                                                    break $M_72_104;
                                                case 212 :
                                                // NORMAL
                                                    local_7_REFERENCE = local_10_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@304879f3
                                                    local_12_INT = (local_12_INT + 1); // type is INT value type is INT
                                                    __label__ = 134;
                                                    continue $L_134;
                                            }
                                    }
                                }
                            case 112 :
                            // NORMAL
                                var var28 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@304879f3
                                var var30 = var28.juHashMap$TreeNodeputTreeValjuHashMapA1juHashMap$NodeINTjlObjectjlObject(var28,thisRef,local_6_REFERENCE,hash,key,value); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@54227f65
                                local_10_REFERENCE = var30; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@54e3d994
                                break $M_72_104;
                        }
                    case 72 :
                    // NORMAL
                        $S_72 : {
                        // NORMAL
                            var var20 = local_7_REFERENCE.key; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@308c8be1
                            local_11_REFERENCE = var20; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1884f63f
                            if ((var20 == key)) {
                                __label__ = 97;
                                break $S_72;
                            }
                            __label__ = 84;
                            }
                        $M_97_84 : for(;;) switch (__label__) {
                            case 97 :
                            // NORMAL
                                local_10_REFERENCE = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@304879f3
                                break $M_72_104;
                            case 84 :
                            // NORMAL
                                $S_84 : {
                                // NORMAL
                                    if (key == null ) {
                                        __label__ = 104;
                                        continue $M_72_104;
                                    }
                                    }
                                var var23 = key.BOOLEANequalsjlObject(key,local_11_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                if ((var23 == 0)) {
                                    __label__ = 104;
                                    continue $M_72_104;
                                }
                                __label__ = 97;
                                continue $M_97_84;
                        }
                }
                $S_222 : {
                // NORMAL
                    var var45 = local_10_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@304879f3
                    if (var45 == null ) {
                        break $M_47_63;
                    }
                    }
                $S_227 : {
                // NORMAL
                    local_12_REFERENCE = local_10_REFERENCE.value; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@37493b8b
                    if ((onlyIfAbsent == 0)) {
                        __label__ = 244;
                        break $S_227;
                    }
                    __label__ = 239;
                    }
                $M_239_244 : for(;;) switch (__label__) {
                    case 239 :
                    // NORMAL
                        var var49 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2b43e7eb
                        if (var49 != null ) {
                            break $M_239_244;
                        }
                        __label__ = 244;
                        continue $M_239_244;
                    case 244 :
                    // NORMAL
                        var var50 = local_10_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@304879f3
                        var50.value = value;
                        break $M_239_244;
                }
                thisRef.VOIDafterNodeAccessjuHashMap$Node(thisRef,local_10_REFERENCE);
                return local_12_REFERENCE;
        }
        $S_259 : {
        // NORMAL
            var var58 = (thisRef.modCount + 1); // type is INT value type is INT
            thisRef.modCount = var58;
            var var60 = (thisRef.size + 1); // type is INT value type is INT
            thisRef.size = var60;
            var var61 = thisRef.threshold; // type is INT value type is INT
            if ((var60 <= var61)) {
                __label__ = 292;
                break $S_259;
            }
            __label__ = 287;
            }
        $M_292_287 : for(;;) switch (__label__) {
            case 287 :
            // NORMAL
                var var62 = thisRef.A1juHashMap$Noderesize(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@997978d
                __label__ = 292;
                continue $M_292_287;
            case 292 :
            // NORMAL
                thisRef.VOIDafterNodeInsertionBOOLEAN(thisRef,evict);
                return null;
        }
    },

    A1juHashMap$Noderesize : function(thisRef) {
        var local_12_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_2_INT = null; // type is INT # of inits = 3
        var local_5_INT = null; // type is INT # of inits = 4
        var local_6_FLOAT = null; // type is FLOAT # of inits = 1
        var local_13_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_9_REFERENCE = null; // type is REFERENCE # of inits = 3
        var var5 = null; // type is INT # of inits = 2
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_1_REFERENCE = null; // type is REFERENCE # of inits = 2
        var var41 = null; // type is INT # of inits = 2
        var local_11_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_7_INT = null; // type is INT # of inits = 4
        var local_3_INT = null; // type is INT # of inits = 1
        var local_4_INT = null; // type is INT # of inits = 4
        var local_8_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_10_REFERENCE = null; // type is REFERENCE # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_1_REFERENCE = thisRef.table; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3201034f
            var var2 = local_1_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@60f1f00
            if (var2 != null ) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_9_13 : for(;;) switch (__label__) {
            case 9 :
            // NORMAL
                var5 = 0; // type is INT value type is INT
                break $M_9_13;
            case 13 :
            // NORMAL
                var5 = local_1_REFERENCE.data.length; // type is INT value type is INT
                break $M_9_13;
        }
        $S_15 : {
        // NORMAL
            local_2_INT = var5; // type is INT value type is INT
            local_3_INT = thisRef.threshold; // type is INT value type is INT
            local_5_INT = 0; // type is INT value type is INT
            var var13 = local_2_INT; // type is INT value type is INT
            if ((var13 <= 0)) {
                __label__ = 67;
                break $S_15;
            }
            __label__ = 28;
            }
        $M_28_67 : for(;;) switch (__label__) {
            case 28 :
            // NORMAL
                $S_28 : {
                // NORMAL
                    var var14 = local_2_INT; // type is INT value type is INT
                    if ((var14 < 1073741824)) {
                        __label__ = 42;
                        break $S_28;
                    }
                    __label__ = 34;
                    }
                for(;;) switch (__label__) {
                    case 42 :
                    // NORMAL
                        $S_42 : {
                        // NORMAL
                            var var17 = (local_2_INT << 1); // type is INT value type is INT
                            local_4_INT = var17; // type is INT value type is INT
                            if ((var17 >= 1073741824)) {
                                break $M_28_67;
                            }
                            }
                        $S_53 : {
                        // NORMAL
                            var var20 = local_2_INT; // type is INT value type is INT
                            if ((var20 < 16)) {
                                break $M_28_67;
                            }
                            }
                        local_5_INT = (local_3_INT << 1); // type is INT value type is INT
                        break $M_28_67;
                    case 34 :
                    // NORMAL
                        thisRef.threshold = 2147483647;
                        return local_1_REFERENCE;
                }
            case 67 :
            // NORMAL
                $S_67 : {
                // NORMAL
                    var var24 = local_3_INT; // type is INT value type is INT
                    if ((var24 <= 0)) {
                        __label__ = 77;
                        break $S_67;
                    }
                    __label__ = 71;
                    }
                for(;;) switch (__label__) {
                    case 71 :
                    // NORMAL
                        local_4_INT = local_3_INT; // type is INT value type is INT
                        break $M_28_67;
                    case 77 :
                    // NORMAL
                        local_4_INT = 16; // type is INT value type is INT
                        local_5_INT = 12; // type is INT value type is INT
                        break $M_28_67;
                }
        }
        $S_85 : {
        // NORMAL
            var var29 = local_5_INT; // type is INT value type is INT
            if ((var29 != 0)) {
                __label__ = 125;
                break $S_85;
            }
            __label__ = 90;
            }
        $M_125_90 : for(;;) switch (__label__) {
            case 125 :
            // NORMAL
                $S_125 : {
                // NORMAL
                    var var43 = local_5_INT; // type is INT value type is INT
                    thisRef.threshold = var43;
                    local_6_REFERENCE = bytecoder.newArray(local_4_INT,null); // type is REFERENCE value type is REFERENCE
                    var var47 = local_6_REFERENCE; // type is REFERENCE value type is REFERENCE
                    thisRef.table = var47;
                    var var48 = local_1_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@60f1f00
                    if (var48 == null ) {
                        return local_6_REFERENCE;
                    }
                    }
                $S_148 : {
                // NORMAL
                    local_7_INT = 0; // type is INT value type is INT
                    __label__ = 151;
                    }
                $L_151 : for (;;) {
                    $S_151 : {
                    // NORMAL
                        var var51 = local_7_INT; // type is INT value type is INT
                        var var52 = local_2_INT; // type is INT value type is INT
                        if ((var51 >= var52)) {
                            return local_6_REFERENCE;
                        }
                        }
                    $S_157 : {
                    // NORMAL
                        var var56 = local_1_REFERENCE.data[local_7_INT]; // type is REFERENCE value type is REFERENCE
                        local_8_REFERENCE = var56; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@bcfa013
                        if (var56 == null ) {
                            __label__ = 347;
                            break $S_157;
                        }
                        __label__ = 167;
                        }
                    $M_167_347 : for(;;) switch (__label__) {
                        case 167 :
                        // NORMAL
                            $S_167 : {
                            // NORMAL
                                var var58 = local_1_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@60f1f00
                                var var59 = local_7_INT; // type is INT value type is INT
                                var58.data[var59] = null;
                                var var61 = local_8_REFERENCE.next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@60f3abfe
                                if (var61 != null ) {
                                    __label__ = 198;
                                    break $S_167;
                                }
                                __label__ = 180;
                                }
                            for(;;) switch (__label__) {
                                case 198 :
                                // NORMAL
                                    $S_198 : {
                                    // NORMAL
                                        var var63 = (local_8_REFERENCE == null ? false : local_8_REFERENCE.instanceOf(juHashMap$TreeNode)); // type is BOOLEAN value type is BOOLEAN
                                        if ((var63 == 0)) {
                                            __label__ = 223;
                                            break $S_198;
                                        }
                                        __label__ = 206;
                                        }
                                    for(;;) switch (__label__) {
                                        case 223 :
                                        // NORMAL
                                            $S_223 : {
                                            // NORMAL
                                                local_9_REFERENCE = null; // type is REFERENCE value type is REFERENCE
                                                local_10_REFERENCE = null; // type is REFERENCE value type is REFERENCE
                                                local_11_REFERENCE = null; // type is REFERENCE value type is REFERENCE
                                                local_12_REFERENCE = null; // type is REFERENCE value type is REFERENCE
                                                __label__ = 235;
                                                }
                                            $L_235 : for (;;) {
                                                $S_235 : {
                                                // NORMAL
                                                    local_13_REFERENCE = local_8_REFERENCE.next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1e3e5741
                                                    var var78 = (local_8_REFERENCE.hash & local_2_INT); // type is INT value type is INT
                                                    if ((var78 != 0)) {
                                                        __label__ = 278;
                                                        break $S_235;
                                                    }
                                                    __label__ = 252;
                                                    }
                                                $M_252_278 : for(;;) switch (__label__) {
                                                    case 252 :
                                                    // NORMAL
                                                        $S_252 : {
                                                        // NORMAL
                                                            var var79 = local_10_REFERENCE; // type is REFERENCE value type is REFERENCE
                                                            if (var79 != null ) {
                                                                __label__ = 264;
                                                                break $S_252;
                                                            }
                                                            __label__ = 257;
                                                            }
                                                        $M_264_257 : for(;;) switch (__label__) {
                                                            case 264 :
                                                            // NORMAL
                                                                var var80 = local_10_REFERENCE; // type is REFERENCE value type is REFERENCE
                                                                var var81 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@bcfa013
                                                                var80.next = var81;
                                                                break $M_264_257;
                                                            case 257 :
                                                            // NORMAL
                                                                local_9_REFERENCE = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@bcfa013
                                                                break $M_264_257;
                                                        }
                                                        local_10_REFERENCE = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@bcfa013
                                                        break $M_252_278;
                                                    case 278 :
                                                    // NORMAL
                                                        $S_278 : {
                                                        // NORMAL
                                                            var var84 = local_12_REFERENCE; // type is REFERENCE value type is REFERENCE
                                                            if (var84 != null ) {
                                                                __label__ = 290;
                                                                break $S_278;
                                                            }
                                                            __label__ = 283;
                                                            }
                                                        $M_290_283 : for(;;) switch (__label__) {
                                                            case 283 :
                                                            // NORMAL
                                                                local_11_REFERENCE = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@bcfa013
                                                                break $M_290_283;
                                                            case 290 :
                                                            // NORMAL
                                                                var var85 = local_12_REFERENCE; // type is REFERENCE value type is REFERENCE
                                                                var var86 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@bcfa013
                                                                var85.next = var86;
                                                                break $M_290_283;
                                                        }
                                                        local_12_REFERENCE = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@bcfa013
                                                        break $M_252_278;
                                                }
                                                $S_301 : {
                                                // NORMAL
                                                    var var89 = local_13_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@24eb1c0b
                                                    local_8_REFERENCE = var89; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@24eb1c0b
                                                    if (var89 != null ) {
                                                        __label__ = 235;
                                                        continue $L_235;
                                                    }
                                                    }
                                                $S_309 : {
                                                // NORMAL
                                                    var var90 = local_10_REFERENCE; // type is REFERENCE value type is REFERENCE
                                                    if (var90 == null ) {
                                                        __label__ = 327;
                                                        break $S_309;
                                                    }
                                                    __label__ = 314;
                                                    }
                                                $M_314_327 : for(;;) switch (__label__) {
                                                    case 314 :
                                                    // NORMAL
                                                        var var91 = local_10_REFERENCE; // type is REFERENCE value type is REFERENCE
                                                        var91.next = null;
                                                        var var92 = local_6_REFERENCE; // type is REFERENCE value type is REFERENCE
                                                        var var93 = local_7_INT; // type is INT value type is INT
                                                        var var94 = local_9_REFERENCE; // type is REFERENCE value type is REFERENCE
                                                        var92.data[var93] = var94;
                                                        __label__ = 327;
                                                        continue $M_314_327;
                                                    case 327 :
                                                    // NORMAL
                                                        $S_327 : {
                                                        // NORMAL
                                                            var var95 = local_12_REFERENCE; // type is REFERENCE value type is REFERENCE
                                                            if (var95 == null ) {
                                                                __label__ = 347;
                                                                continue $M_167_347;
                                                            }
                                                            }
                                                        var var96 = local_12_REFERENCE; // type is REFERENCE value type is REFERENCE
                                                        var96.next = null;
                                                        var var97 = local_6_REFERENCE; // type is REFERENCE value type is REFERENCE
                                                        var var100 = (local_7_INT + local_2_INT); // type is INT value type is INT
                                                        var var101 = local_11_REFERENCE; // type is REFERENCE value type is REFERENCE
                                                        var97.data[var100] = var101;
                                                        __label__ = 347;
                                                        continue $M_167_347;
                                                }
                                            }
                                        case 206 :
                                        // NORMAL
                                            var var64 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@bcfa013
                                            var64.VOIDsplitjuHashMapA1juHashMap$NodeINTINT(var64,thisRef,local_6_REFERENCE,local_7_INT,local_2_INT);
                                            __label__ = 347;
                                            continue $M_167_347;
                                    }
                                case 180 :
                                // NORMAL
                                    var var102 = local_6_REFERENCE; // type is REFERENCE value type is REFERENCE
                                    var var107 = (local_8_REFERENCE.hash & (local_4_INT - 1)); // type is INT value type is INT
                                    var var108 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@bcfa013
                                    var102.data[var107] = var108;
                                    __label__ = 347;
                                    continue $M_167_347;
                            }
                        case 347 :
                        // NORMAL
                            local_7_INT = (local_7_INT + 1); // type is INT value type is INT
                            __label__ = 151;
                            continue $L_151;
                    }
                }
            case 90 :
            // NORMAL
                $S_90 : {
                // NORMAL
                    local_6_FLOAT = (local_4_INT * thisRef.loadFactor); // type is FLOAT value type is FLOAT
                    var var36 = local_4_INT; // type is INT value type is INT
                    if ((var36 >= 1073741824)) {
                        __label__ = 121;
                        break $S_90;
                    }
                    __label__ = 107;
                    }
                $M_107_121 : for(;;) switch (__label__) {
                    case 107 :
                    // NORMAL
                        $S_107 : {
                        // NORMAL
                            var var37 = local_6_FLOAT; // type is FLOAT value type is FLOAT
                            if ((var37 >= 1.07374182E9)) {
                                __label__ = 121;
                                continue $M_107_121;
                            }
                            }
                        var41 = Math.floor(local_6_FLOAT); // type is INT value type is INT
                        break $M_107_121;
                    case 121 :
                    // NORMAL
                        var41 = 2147483647; // type is INT value type is INT
                        break $M_107_121;
                }
                local_5_INT = var41; // type is INT value type is INT
                __label__ = 125;
                continue $M_125_90;
        }
    },

    juHashMap$NodereplacementNodejuHashMap$NodejuHashMap$Node : function(thisRef,p,next) {
        var __label__ = null;
        var var0 = new juHashMap$Node.Create(); // type is REFERENCE value type is REFERENCE
        juHashMap$Node.VOIDinitINTjlObjectjlObjectjuHashMap$Node(var0,p.hash,p.key,p.value,next);
        return var0;
    },

    juHashMap$NodenewNodeINTjlObjectjlObjectjuHashMap$Node : function(thisRef,hash,key,value,next) {
        var __label__ = null;
        var var0 = new juHashMap$Node.Create(); // type is REFERENCE value type is REFERENCE
        juHashMap$Node.VOIDinitINTjlObjectjlObjectjuHashMap$Node(var0,hash,key,value,next);
        return var0;
    },

    juHashMap$TreeNodenewTreeNodeINTjlObjectjlObjectjuHashMap$Node : function(thisRef,hash,key,value,next) {
        var __label__ = null;
        var var0 = new juHashMap$TreeNode.Create(); // type is REFERENCE value type is REFERENCE
        juHashMap$TreeNode.VOIDinitINTjlObjectjlObjectjuHashMap$Node(var0,hash,key,value,next);
        return var0;
    },

    VOIDtreeifyBinA1juHashMap$NodeINT : function(thisRef,tab,hash) {
        var local_3_INT = null; // type is INT # of inits = 1
        var local_8_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_4_INT = null; // type is INT # of inits = 2
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_7_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if (tab == null ) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 4;
            }
        $M_13_4 : for(;;) switch (__label__) {
            case 13 :
            // NORMAL
                var var27 = thisRef.A1juHashMap$Noderesize(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1599cefe
                return;
            case 4 :
            // NORMAL
                $S_4 : {
                // NORMAL
                    var var0 = tab.data.length; // type is INT value type is INT
                    local_3_INT = var0; // type is INT value type is INT
                    if ((var0 >= 64)) {
                        break $S_4;
                    }
                    __label__ = 13;
                    continue $M_13_4;
                    }
                $S_21 : {
                // NORMAL
                    var var5 = ((local_3_INT - 1) & hash); // type is INT value type is INT
                    local_4_INT = var5; // type is INT value type is INT
                    var var8 = tab.data[var5]; // type is REFERENCE value type is REFERENCE
                    local_5_REFERENCE = var8; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@2a8a0d14
                    if (var8 == null ) {
                        return;
                    }
                    }
                $S_37 : {
                // NORMAL
                    local_6_REFERENCE = null; // type is REFERENCE value type is REFERENCE
                    local_7_REFERENCE = null; // type is REFERENCE value type is REFERENCE
                    __label__ = 43;
                    }
                $L_43 : for (;;) {
                    $S_43 : {
                    // NORMAL
                        var var13 = thisRef.juHashMap$TreeNodereplacementTreeNodejuHashMap$NodejuHashMap$Node(thisRef,local_5_REFERENCE,null); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3c8ed2bf
                        local_8_REFERENCE = var13; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3ef54221
                        var var15 = local_7_REFERENCE; // type is REFERENCE value type is REFERENCE
                        if (var15 != null ) {
                            __label__ = 64;
                            break $S_43;
                        }
                        __label__ = 57;
                        }
                    $M_57_64 : for(;;) switch (__label__) {
                        case 64 :
                        // NORMAL
                            var var17 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3ef54221
                            var var18 = local_7_REFERENCE; // type is REFERENCE value type is REFERENCE
                            var17.prev = var18;
                            var var19 = local_7_REFERENCE; // type is REFERENCE value type is REFERENCE
                            var var20 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3ef54221
                            var19.next = var20;
                            break $M_57_64;
                        case 57 :
                        // NORMAL
                            local_6_REFERENCE = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3ef54221
                            break $M_57_64;
                    }
                    $S_78 : {
                    // NORMAL
                        local_7_REFERENCE = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3ef54221
                        var var23 = local_5_REFERENCE.next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@43581145
                        local_5_REFERENCE = var23; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@22f6cd2c
                        if (var23 != null ) {
                            __label__ = 43;
                            continue $L_43;
                        }
                        }
                    $S_93 : {
                    // NORMAL
                        var var24 = local_4_INT; // type is INT value type is INT
                        var var25 = local_6_REFERENCE; // type is REFERENCE value type is REFERENCE
                        tab.data[var24] = var25;
                        if (var25 == null ) {
                            return;
                        }
                        }
                    local_6_REFERENCE.VOIDtreeifyA1juHashMap$Node(local_6_REFERENCE,tab);
                    return;
                }
        }
    },

    juHashMap$TreeNodereplacementTreeNodejuHashMap$NodejuHashMap$Node : function(thisRef,p,next) {
        var __label__ = null;
        var var0 = new juHashMap$TreeNode.Create(); // type is REFERENCE value type is REFERENCE
        juHashMap$TreeNode.VOIDinitINTjlObjectjlObjectjuHashMap$Node(var0,p.hash,p.key,p.value,next);
        return var0;
    },

    VOIDafterNodeAccessjuHashMap$Node : function(thisRef,p) {
        var __label__ = null;
        return;
    },

    VOIDafterNodeInsertionBOOLEAN : function(thisRef,evict) {
        var __label__ = null;
        return;
    },

    jlObjectgetjlObject : function(thisRef,key) {
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = juHashMap.INThashjlObject(key); // type is INT value type is INT
            var var1 = thisRef.juHashMap$NodegetNodeINTjlObject(thisRef,var0,key); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@50242ba3
            local_2_REFERENCE = var1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6b324f41
            if (var1 != null ) {
                __label__ = 18;
                break $S_0;
            }
            __label__ = 14;
            }
        for(;;) switch (__label__) {
            case 18 :
            // NORMAL
                var var5 = local_2_REFERENCE.value; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1e64db93
                return var5;
            case 14 :
            // NORMAL
                var var5 = null; // type is REFERENCE value type is REFERENCE
                return var5;
        }
    },

    juSetentrySet : function(thisRef) {
        var local_1_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.entrySet; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1f693c7e
            local_1_REFERENCE = var0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@26230ef5
            if (var0 != null ) {
                __label__ = 25;
                break $S_0;
            }
            __label__ = 9;
            }
        for(;;) switch (__label__) {
            case 9 :
            // NORMAL
                var var3 = new juHashMap$EntrySet.Create(); // type is REFERENCE value type is REFERENCE
                juHashMap$EntrySet.VOIDinitjuHashMap(var3,thisRef);
                thisRef.entrySet = var3;
                var var4 = var3; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7f5334c3
                return var4;
            case 25 :
            // NORMAL
                var var4 = local_1_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@26230ef5
                return var4;
        }
    },

    INTsize : function(thisRef) {
        var __label__ = null;
        return thisRef.size;
    },

    classInitCheck : function() {
        if (!juHashMap.__initialized) {
            juHashMap.__initialized = true;
            var thePrototype = juHashMap.Create.prototype;
            thePrototype.instanceOf = juHashMap.instanceOf;
            thePrototype.ClassgetClass = juHashMap.ClassgetClass;
            thePrototype.INTsize = juHashMap.INTsize;
            thePrototype.juSetentrySet = juHashMap.juSetentrySet;
            thePrototype.jlObjectgetjlObject = juHashMap.jlObjectgetjlObject;
            thePrototype.VOIDafterNodeInsertionBOOLEAN = juHashMap.VOIDafterNodeInsertionBOOLEAN;
            thePrototype.VOIDafterNodeAccessjuHashMap$Node = juHashMap.VOIDafterNodeAccessjuHashMap$Node;
            thePrototype.juHashMap$TreeNodereplacementTreeNodejuHashMap$NodejuHashMap$Node = juHashMap.juHashMap$TreeNodereplacementTreeNodejuHashMap$NodejuHashMap$Node;
            thePrototype.VOIDtreeifyBinA1juHashMap$NodeINT = juHashMap.VOIDtreeifyBinA1juHashMap$NodeINT;
            thePrototype.juHashMap$TreeNodenewTreeNodeINTjlObjectjlObjectjuHashMap$Node = juHashMap.juHashMap$TreeNodenewTreeNodeINTjlObjectjlObjectjuHashMap$Node;
            thePrototype.juHashMap$NodenewNodeINTjlObjectjlObjectjuHashMap$Node = juHashMap.juHashMap$NodenewNodeINTjlObjectjlObjectjuHashMap$Node;
            thePrototype.juHashMap$NodereplacementNodejuHashMap$NodejuHashMap$Node = juHashMap.juHashMap$NodereplacementNodejuHashMap$NodejuHashMap$Node;
            thePrototype.A1juHashMap$Noderesize = juHashMap.A1juHashMap$Noderesize;
            thePrototype.jlObjectputValINTjlObjectjlObjectBOOLEANBOOLEAN = juHashMap.jlObjectputValINTjlObjectjlObjectBOOLEANBOOLEAN;
            thePrototype.jlObjectputjlObjectjlObject = juHashMap.jlObjectputjlObjectjlObject;
            thePrototype.juHashMap$NodegetNodeINTjlObject = juHashMap.juHashMap$NodegetNodeINTjlObject;
            thePrototype.BOOLEANcontainsKeyjlObject = juHashMap.BOOLEANcontainsKeyjlObject;
            thePrototype.jlStringtoString = juAbstractMap.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = juAbstractMap.BOOLEANequalsjlObject;
            thePrototype.INThashCode = juAbstractMap.INThashCode;
            juAbstractMap.classInitCheck();
            juMap.classInitCheck();
            jlObject.classInitCheck();
            jlCloneable.classInitCheck();
            jiSerializable.classInitCheck();
        }
    },

};

var juAbstractMap = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 24,
    __implementedTypes : [25,1,24],

    instanceOf : function(aType) {
        return juAbstractMap.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return juAbstractMap;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    INThashCode : function(thisRef) {
        var local_1_INT = null; // type is INT # of inits = 3
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_1_INT = 0; // type is INT value type is INT
            var var2 = thisRef.juSetentrySet(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5f65dc64
            var var3 = var2.juIteratoriterator(var2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@61549b3c
            local_2_REFERENCE = var3; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@48804bff
            __label__ = 12;
            }
        $L_12 : for (;;) {
            $S_12 : {
            // NORMAL
                var var6 = local_2_REFERENCE.BOOLEANhasNext(local_2_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                if ((var6 == 0)) {
                    return local_1_INT;
                }
                }
            var var8 = local_2_REFERENCE.jlObjectnext(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1b598a7f
            var local_3_REFERENCE = var8; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6abeff29
            var var10 = local_1_INT; // type is INT value type is INT
            var var12 = local_3_REFERENCE.INThashCode(local_3_REFERENCE); // type is INT value type is INT
            local_1_INT = (var10 + var12); // type is INT value type is INT
            __label__ = 12;
            continue $L_12;
        }
    },

    BOOLEANequalsjlObject : function(thisRef,o) {
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 4
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((o != thisRef)) {
                break $S_0;
            }
            return 1;
            }
        $S_7 : {
        // NORMAL
            var var0 = (o == null ? false : o.instanceOf(juMap)); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                break $S_7;
            }
            return 0;
            }
        $S_16 : {
        // NORMAL
            local_2_REFERENCE = o; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@20174e02
            var var3 = local_2_REFERENCE.INTsize(local_2_REFERENCE); // type is INT value type is INT
            var var4 = thisRef.INTsize(thisRef); // type is INT value type is INT
            if ((var3 == var4)) {
                break $S_16;
            }
            return 0;
            }
        try {
            $S_36 : {
            // NORMAL
                var var5 = thisRef.juSetentrySet(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5f735629
                var var6 = var5.juIteratoriterator(var5); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@46d62671
                local_3_REFERENCE = var6; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@65c0c751
                __label__ = 46;
                }
        } catch (e) {
            dmbcExceptionManager.VOIDpushjlThrowable(e);
            if (e.instanceOf(jlClassCastException)) {
                __label__ = 137;
            } else if (e.instanceOf(jlNullPointerException)) {
                __label__ = 140;
            } else {
                throw dmbcExceptionManager.jlThrowablepop();
            }
        }
        $M_46_140_137 : for(;;) switch (__label__) {
            case 137 :
            // EXCEPTION_HANDLER
                var local_0_REFERENCE = thisRef; // type is REFERENCE value type is REFERENCE
                var var33 = dmbcExceptionManager.jlThrowablepop(); // type is REFERENCE value type is REFERENCE
                local_3_REFERENCE = var33; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@cd904d2
                return 0;
            case 46 :
            // NORMAL
                for (;;) {
                    try {
                        $S_46 : {
                        // NORMAL
                            var var9 = local_3_REFERENCE.BOOLEANhasNext(local_3_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                            if ((var9 == 0)) {
                                __label__ = 134;
                                break $S_46;
                            }
                            __label__ = 55;
                            }
                    } catch (e) {
                        dmbcExceptionManager.VOIDpushjlThrowable(e);
                        if (e.instanceOf(jlClassCastException)) {
                            __label__ = 137;
                            continue $M_46_140_137;
                        } else if (e.instanceOf(jlNullPointerException)) {
                            __label__ = 140;
                            continue $M_46_140_137;
                        } else {
                            throw dmbcExceptionManager.jlThrowablepop();
                        }
                    }
                    for(;;) switch (__label__) {
                        case 55 :
                        // NORMAL
                            try {
                                $S_55 : {
                                // NORMAL
                                    var var11 = local_3_REFERENCE.jlObjectnext(local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@f08bf6c
                                    var local_4_REFERENCE = var11; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4a8f72ba
                                    var var14 = local_4_REFERENCE.jlObjectgetKey(local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3d1d2034
                                    local_5_REFERENCE = var14; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@16242c15
                                    var var17 = local_4_REFERENCE.jlObjectgetValue(local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@165dac9d
                                    local_6_REFERENCE = var17; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@753d9bcf
                                    var var19 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@753d9bcf
                                    if (var19 != null ) {
                                        __label__ = 113;
                                        break $S_55;
                                    }
                                    __label__ = 89;
                                    }
                            } catch (e) {
                                dmbcExceptionManager.VOIDpushjlThrowable(e);
                                if (e.instanceOf(jlNullPointerException)) {
                                    __label__ = 140;
                                    continue $M_46_140_137;
                                } else if (e.instanceOf(jlClassCastException)) {
                                    __label__ = 137;
                                    continue $M_46_140_137;
                                } else {
                                    throw dmbcExceptionManager.jlThrowablepop();
                                }
                            }
                            $M_113_89 : for(;;) switch (__label__) {
                                case 89 :
                                // NORMAL
                                    try {
                                        $S_89 : {
                                        // NORMAL
                                            var var27 = local_2_REFERENCE.jlObjectgetjlObject(local_2_REFERENCE,local_5_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5c6482e5
                                            if (var27 != null ) {
                                                return 0;
                                            }
                                            }
                                    } catch (e) {
                                        dmbcExceptionManager.VOIDpushjlThrowable(e);
                                        if (e.instanceOf(jlNullPointerException)) {
                                            __label__ = 140;
                                            continue $M_46_140_137;
                                        } else if (e.instanceOf(jlClassCastException)) {
                                            __label__ = 137;
                                            continue $M_46_140_137;
                                        } else {
                                            throw dmbcExceptionManager.jlThrowablepop();
                                        }
                                    }
                                    try {
                                        var var30 = local_2_REFERENCE.BOOLEANcontainsKeyjlObject(local_2_REFERENCE,local_5_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                        if ((var30 != 0)) {
                                            break $M_113_89;
                                        }
                                        return 0;
                                    } catch (e) {
                                        dmbcExceptionManager.VOIDpushjlThrowable(e);
                                        if (e.instanceOf(jlNullPointerException)) {
                                            __label__ = 140;
                                            continue $M_46_140_137;
                                        } else if (e.instanceOf(jlClassCastException)) {
                                            __label__ = 137;
                                            continue $M_46_140_137;
                                        } else {
                                            throw dmbcExceptionManager.jlThrowablepop();
                                        }
                                    }
                                case 113 :
                                // NORMAL
                                    try {
                                        var var20 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@753d9bcf
                                        var var23 = local_2_REFERENCE.jlObjectgetjlObject(local_2_REFERENCE,local_5_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6dcf2171
                                        var var24 = var20.BOOLEANequalsjlObject(var20,var23); // type is BOOLEAN value type is BOOLEAN
                                        if ((var24 != 0)) {
                                            break $M_113_89;
                                        }
                                        return 0;
                                    } catch (e) {
                                        dmbcExceptionManager.VOIDpushjlThrowable(e);
                                        if (e.instanceOf(jlClassCastException)) {
                                            __label__ = 137;
                                            continue $M_46_140_137;
                                        } else if (e.instanceOf(jlNullPointerException)) {
                                            __label__ = 140;
                                            continue $M_46_140_137;
                                        } else {
                                            throw dmbcExceptionManager.jlThrowablepop();
                                        }
                                    }
                            }
                            try {
                                __label__ = 46;
                                continue $M_46_140_137;
                            } catch (e) {
                                dmbcExceptionManager.VOIDpushjlThrowable(e);
                                if (e.instanceOf(jlClassCastException)) {
                                    __label__ = 137;
                                    continue $M_46_140_137;
                                } else if (e.instanceOf(jlNullPointerException)) {
                                    __label__ = 140;
                                    continue $M_46_140_137;
                                } else {
                                    throw dmbcExceptionManager.jlThrowablepop();
                                }
                            }
                        case 134 :
                        // NORMAL
                            return 1;
                    }
                }
            case 140 :
            // EXCEPTION_HANDLER
                var local_0_REFERENCE = thisRef; // type is REFERENCE value type is REFERENCE
                var var32 = dmbcExceptionManager.jlThrowablepop(); // type is REFERENCE value type is REFERENCE
                local_3_REFERENCE = var32; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7b96ec4f
                return 0;
        }
    },

    INTsize : function(thisRef) {
        var __label__ = null;
        var var0 = thisRef.juSetentrySet(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2e1e6113
        var var1 = var0.INTsize(var0); // type is INT value type is INT
        return var1;
    },

    jlStringtoString : function(thisRef) {
        var var21 = null; // type is REFERENCE # of inits = 2
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_1_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var var28 = null; // type is REFERENCE # of inits = 2
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 2
        var var18 = null; // type is REFERENCE # of inits = 1
        var var25 = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.juSetentrySet(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@465a6910
            var var1 = var0.juIteratoriterator(var0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5df68273
            local_1_REFERENCE = var1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5915bbb6
            var var4 = local_1_REFERENCE.BOOLEANhasNext(local_1_REFERENCE); // type is BOOLEAN value type is BOOLEAN
            if ((var4 != 0)) {
                break $S_0;
            }
            return bytecoder.stringpool[12];
            }
        $S_22 : {
        // NORMAL
            var var5 = new jlStringBuilder.Create(); // type is REFERENCE value type is REFERENCE
            jlStringBuilder.VOIDinit(var5);
            local_2_REFERENCE = var5; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@523ef4f6
            var var8 = local_2_REFERENCE.jlStringBuilderappendCHAR(local_2_REFERENCE,123); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@276542b0
            __label__ = 37;
            }
        $L_37 : for (;;) {
            $S_37 : {
            // NORMAL
                var var10 = local_1_REFERENCE.jlObjectnext(local_1_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@319a778c
                var local_3_REFERENCE = var10; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@241d8a46
                var var13 = local_3_REFERENCE.jlObjectgetKey(local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4d9161ac
                local_4_REFERENCE = var13; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1a403fc0
                var var16 = local_3_REFERENCE.jlObjectgetValue(local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@40ecca6c
                local_5_REFERENCE = var16; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@66d6d9d4
                var18 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@523ef4f6
                var var19 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1a403fc0
                if ((var19 != thisRef)) {
                    __label__ = 75;
                    break $S_37;
                }
                __label__ = 70;
                }
            $M_75_70 : for(;;) switch (__label__) {
                case 70 :
                // NORMAL
                    var21 = bytecoder.stringpool[13]; // type is REFERENCE value type is REFERENCE
                    break $M_75_70;
                case 75 :
                // NORMAL
                    var21 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1a403fc0
                    break $M_75_70;
            }
            $S_77 : {
            // NORMAL
                var var22 = var18.jlStringBuilderappendjlObject(var18,var21); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2228e3ea
                var var24 = local_2_REFERENCE.jlStringBuilderappendCHAR(local_2_REFERENCE,61); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6a2f1253
                var25 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@523ef4f6
                var var26 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@66d6d9d4
                if ((var26 != thisRef)) {
                    __label__ = 100;
                    break $S_77;
                }
                __label__ = 95;
                }
            $M_95_100 : for(;;) switch (__label__) {
                case 100 :
                // NORMAL
                    var28 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@66d6d9d4
                    break $M_95_100;
                case 95 :
                // NORMAL
                    var28 = bytecoder.stringpool[13]; // type is REFERENCE value type is REFERENCE
                    break $M_95_100;
            }
            $S_102 : {
            // NORMAL
                var var29 = var25.jlStringBuilderappendjlObject(var25,var28); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2cf582bb
                var var31 = local_1_REFERENCE.BOOLEANhasNext(local_1_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                if ((var31 != 0)) {
                    __label__ = 125;
                    break $S_102;
                }
                __label__ = 115;
                }
            for(;;) switch (__label__) {
                case 115 :
                // NORMAL
                    var var33 = local_2_REFERENCE.jlStringBuilderappendCHAR(local_2_REFERENCE,125); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@aec92e3
                    var var34 = var33.jlStringtoString(var33); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6fbe07e7
                    return var34;
                case 125 :
                // NORMAL
                    var var36 = local_2_REFERENCE.jlStringBuilderappendCHAR(local_2_REFERENCE,44); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7d112dc9
                    var var37 = var36.jlStringBuilderappendCHAR(var36,32); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7d71888a
                    __label__ = 37;
                    continue $L_37;
            }
        }
    },

    BOOLEANcontainsKeyjlObject : function(thisRef,key) {
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.juSetentrySet(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@cfd6470
            var var1 = var0.juIteratoriterator(var0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2625ca9d
            local_2_REFERENCE = var1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6e1ea67c
            if (key != null ) {
                __label__ = 47;
                break $S_0;
            }
            __label__ = 14;
            }
        $M_14_47 : for(;;) switch (__label__) {
            case 47 :
            // NORMAL
                for (;;) {
                    $S_47 : {
                    // NORMAL
                        var var11 = local_2_REFERENCE.BOOLEANhasNext(local_2_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                        if ((var11 == 0)) {
                            return 0;
                        }
                        }
                    $S_56 : {
                    // NORMAL
                        var var13 = local_2_REFERENCE.jlObjectnext(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@85f3cd
                        var local_3_REFERENCE = var13; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6bef3587
                        var var15 = local_3_REFERENCE.jlObjectgetKey(local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@c56126e
                        var var16 = key.BOOLEANequalsjlObject(key,var15); // type is BOOLEAN value type is BOOLEAN
                        if ((var16 == 0)) {
                            break $S_56;
                        }
                        return 1;
                        }
                    __label__ = 47;
                    continue $M_14_47;
                }
            case 14 :
            // NORMAL
                for (;;) {
                    $S_14 : {
                    // NORMAL
                        var var4 = local_2_REFERENCE.BOOLEANhasNext(local_2_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                        if ((var4 == 0)) {
                            return 0;
                        }
                        }
                    $S_23 : {
                    // NORMAL
                        var var6 = local_2_REFERENCE.jlObjectnext(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@42f505b
                        var local_3_REFERENCE = var6; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2b9bc088
                        var var9 = local_3_REFERENCE.jlObjectgetKey(local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@394a8b71
                        if (var9 != null ) {
                            break $S_23;
                        }
                        return 1;
                        }
                    __label__ = 14;
                    continue $M_14_47;
                }
        }
    },

    jlObjectputjlObjectjlObject : function(thisRef,key,value) {
        var __label__ = null;
        var var0 = new jlUnsupportedOperationException.Create(); // type is REFERENCE value type is REFERENCE
        jlUnsupportedOperationException.VOIDinit(var0);
        throw var0;
    },

    jlObjectgetjlObject : function(thisRef,key) {
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.juSetentrySet(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2b99d166
            var var1 = var0.juIteratoriterator(var0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2a5c3f1e
            local_2_REFERENCE = var1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@201de159
            if (key != null ) {
                __label__ = 52;
                break $S_0;
            }
            __label__ = 14;
            }
        $M_14_52 : for(;;) switch (__label__) {
            case 14 :
            // NORMAL
                for (;;) {
                    $S_14 : {
                    // NORMAL
                        var var14 = local_2_REFERENCE.BOOLEANhasNext(local_2_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                        if ((var14 == 0)) {
                            return null;
                        }
                        }
                    $S_23 : {
                    // NORMAL
                        var var16 = local_2_REFERENCE.jlObjectnext(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7a1238e1
                        local_3_REFERENCE = var16; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@10f14554
                        var var18 = local_3_REFERENCE.jlObjectgetKey(local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@8682e98
                        if (var18 != null ) {
                            __label__ = 49;
                            break $S_23;
                        }
                        __label__ = 42;
                        }
                    for(;;) switch (__label__) {
                        case 49 :
                        // NORMAL
                            __label__ = 14;
                            continue $M_14_52;
                        case 42 :
                        // NORMAL
                            var var20 = local_3_REFERENCE.jlObjectgetValue(local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6d9fcc12
                            return var20;
                    }
                }
            case 52 :
            // NORMAL
                for (;;) {
                    $S_52 : {
                    // NORMAL
                        var var4 = local_2_REFERENCE.BOOLEANhasNext(local_2_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                        if ((var4 == 0)) {
                            return null;
                        }
                        }
                    $S_61 : {
                    // NORMAL
                        var var6 = local_2_REFERENCE.jlObjectnext(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2670aa70
                        local_3_REFERENCE = var6; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7593a10c
                        var var9 = local_3_REFERENCE.jlObjectgetKey(local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4dce4b6f
                        var var10 = key.BOOLEANequalsjlObject(key,var9); // type is BOOLEAN value type is BOOLEAN
                        if ((var10 == 0)) {
                            __label__ = 91;
                            break $S_61;
                        }
                        __label__ = 84;
                        }
                    for(;;) switch (__label__) {
                        case 91 :
                        // NORMAL
                            __label__ = 52;
                            continue $M_14_52;
                        case 84 :
                        // NORMAL
                            var var12 = local_3_REFERENCE.jlObjectgetValue(local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@41bb0a0
                            return var12;
                    }
                }
        }
    },

    classInitCheck : function() {
        if (!juAbstractMap.__initialized) {
            juAbstractMap.__initialized = true;
            jlObject.classInitCheck();
            juMap.classInitCheck();
        }
    },

};

var juMap = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 25,
    __implementedTypes : [25,1],


    classInitCheck : function() {
        if (!juMap.__initialized) {
            juMap.__initialized = true;
            jlObject.classInitCheck();
        }
    },

};

var jlCloneable = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 26,
    __implementedTypes : [1,26],


    classInitCheck : function() {
        if (!jlCloneable.__initialized) {
            jlCloneable.__initialized = true;
            jlObject.classInitCheck();
        }
    },

};

var ojpnDefaultWorldPool$1 = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 27,
    __implementedTypes : [1,29,27,28],
    $assertionsDisabled : false, // declared in org.jbox2d.pooling.normal.MutableStack

    Create : function() {
        this.index = 0; // declared in org.jbox2d.pooling.normal.MutableStack
        this.stack = null; // declared in org.jbox2d.pooling.normal.MutableStack
        this.size = 0; // declared in org.jbox2d.pooling.normal.MutableStack
        this.this$0 = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool$1
    },

    instanceOf : function(aType) {
        return ojpnDefaultWorldPool$1.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojpnDefaultWorldPool$1;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitojpnDefaultWorldPoolINT : function(thisRef,p1,x0) {
        var __label__ = null;
        thisRef.this$0 = p1;
        ojpnMutableStack.VOIDinitINT(thisRef,x0);
        return;
    },

    jlObjectnewInstance : function(thisRef) {
        var __label__ = null;
        var var0 = thisRef.ojdcContactnewInstance(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@20818bf4
        return var0;
    },

    ojdcContactnewInstance : function(thisRef) {
        var __label__ = null;
        var var0 = new ojdcPolygonContact.Create(); // type is REFERENCE value type is REFERENCE
        var var2 = ojpnDefaultWorldPool.ojpIWorldPoolaccess$000ojpnDefaultWorldPool(thisRef.this$0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4ebd01f3
        ojdcPolygonContact.VOIDinitojpIWorldPool(var0,var2);
        return var0;
    },

    classInitCheck : function() {
        if (!ojpnDefaultWorldPool$1.__initialized) {
            ojpnDefaultWorldPool$1.__initialized = true;
            var thePrototype = ojpnDefaultWorldPool$1.Create.prototype;
            thePrototype.instanceOf = ojpnDefaultWorldPool$1.instanceOf;
            thePrototype.ClassgetClass = ojpnDefaultWorldPool$1.ClassgetClass;
            thePrototype.ojdcContactnewInstance = ojpnDefaultWorldPool$1.ojdcContactnewInstance;
            thePrototype.jlObjectnewInstance = ojpnDefaultWorldPool$1.jlObjectnewInstance;
            thePrototype.jlObjectpop = ojpnMutableStack.jlObjectpop;
            thePrototype.VOIDpushjlObject = ojpnMutableStack.VOIDpushjlObject;
            thePrototype.VOIDextendStackINT = ojpnMutableStack.VOIDextendStackINT;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojpnMutableStack.classInitCheck();
            jlObject.classInitCheck();
            ojpIDynamicStack.classInitCheck();
        }
    },

};

var ojpnMutableStack = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 28,
    __implementedTypes : [1,29,28],
    $assertionsDisabled : false, // declared in org.jbox2d.pooling.normal.MutableStack

    instanceOf : function(aType) {
        return ojpnMutableStack.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojpnMutableStack;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojpnMutableStack.BOOLEANdesiredAssertionStatus(ojpnMutableStack); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_9_13 : for(;;) switch (__label__) {
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_9_13;
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_9_13;
        }
        ojpnMutableStack.$assertionsDisabled = var1;
        return;
    },

    VOIDinitINT : function(thisRef,argInitSize) {
        var __label__ = null;
        thisRef.index = 0;
        thisRef.stack = null;
        thisRef.index = 0;
        thisRef.VOIDextendStackINT(thisRef,argInitSize);
        return;
    },

    VOIDextendStackINT : function(thisRef,argSize) {
        var local_3_INT = null; // type is INT # of inits = 3
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_2_REFERENCE = bytecoder.newArray(argSize,null); // type is REFERENCE value type is REFERENCE
            var var2 = thisRef.stack; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@6c239ddd
            if (var2 == null ) {
                __label__ = 26;
                break $S_0;
            }
            __label__ = 12;
            }
        $M_26_12 : for(;;) switch (__label__) {
            case 26 :
            // NORMAL
                $S_26 : {
                // NORMAL
                    local_3_INT = 0; // type is INT value type is INT
                    __label__ = 28;
                    }
                $L_28 : for (;;) {
                    $S_28 : {
                    // NORMAL
                        var var8 = local_3_INT; // type is INT value type is INT
                        var var10 = local_2_REFERENCE.data.length; // type is INT value type is INT
                        if ((var8 >= var10)) {
                            __label__ = 47;
                            break $S_28;
                        }
                        __label__ = 34;
                        }
                    for(;;) switch (__label__) {
                        case 34 :
                        // NORMAL
                            var var14 = local_2_REFERENCE; // type is REFERENCE value type is REFERENCE
                            var var15 = local_3_INT; // type is INT value type is INT
                            var var16 = thisRef.jlObjectnewInstance(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@53ea6ea3
                            var14.data[var15] = var16;
                            local_3_INT = (local_3_INT + 1); // type is INT value type is INT
                            __label__ = 28;
                            continue $L_28;
                        case 47 :
                        // NORMAL
                            var var11 = local_2_REFERENCE; // type is REFERENCE value type is REFERENCE
                            thisRef.stack = var11;
                            var var13 = local_2_REFERENCE.data.length; // type is INT value type is INT
                            thisRef.size = var13;
                            return;
                    }
                }
            case 12 :
            // NORMAL
                jlSystem.VOIDarraycopyjlObjectINTjlObjectINTINT(thisRef.stack,0,local_2_REFERENCE,0,thisRef.size);
                __label__ = 26;
                continue $M_26_12;
        }
    },

    VOIDpushjlObject : function(thisRef,argObject) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojpnMutableStack.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 21;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_6_21 : for(;;) switch (__label__) {
            case 21 :
            // NORMAL
                var var2 = thisRef.stack; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3f1c6299
                var var4 = (thisRef.index - 1); // type is INT value type is INT
                thisRef.index = var4;
                var2.data[var4] = argObject;
                return;
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    var var1 = thisRef.index; // type is INT value type is INT
                    if ((var1 > 0)) {
                        __label__ = 21;
                        continue $M_6_21;
                    }
                    }
                var var5 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var5);
                throw var5;
        }
    },

    jlObjectpop : function(thisRef) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.index; // type is INT value type is INT
            var var1 = thisRef.size; // type is INT value type is INT
            if ((var0 < var1)) {
                __label__ = 21;
                break $S_0;
            }
            __label__ = 11;
            }
        $M_21_11 : for(;;) switch (__label__) {
            case 21 :
            // NORMAL
                var var4 = thisRef.stack; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@5ebadfa2
                var var5 = thisRef.index; // type is INT value type is INT
                var var6 = (var5 + 1); // type is INT value type is INT
                thisRef.index = var6;
                var var7 = var4.data[var5]; // type is REFERENCE value type is REFERENCE
                return var7;
            case 11 :
            // NORMAL
                thisRef.VOIDextendStackINT(thisRef,(thisRef.size * 2));
                __label__ = 21;
                continue $M_21_11;
        }
    },

    classInitCheck : function() {
        if (!ojpnMutableStack.__initialized) {
            ojpnMutableStack.__initialized = true;
            jlObject.classInitCheck();
            ojpIDynamicStack.classInitCheck();
            ojpnMutableStack.VOIDclinit();
        }
    },

};

var ojpIDynamicStack = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 29,
    __implementedTypes : [1,29],


    classInitCheck : function() {
        if (!ojpIDynamicStack.__initialized) {
            ojpIDynamicStack.__initialized = true;
            jlObject.classInitCheck();
        }
    },

};

var ojcSettings = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 30,
    __implementedTypes : [30,1],
    FAST_ABS : false, // declared in org.jbox2d.common.Settings
    FAST_FLOOR : false, // declared in org.jbox2d.common.Settings
    FAST_CEIL : false, // declared in org.jbox2d.common.Settings
    FAST_ROUND : false, // declared in org.jbox2d.common.Settings
    FAST_ATAN2 : false, // declared in org.jbox2d.common.Settings
    CONTACT_STACK_INIT_SIZE : 0, // declared in org.jbox2d.common.Settings
    SINCOS_LUT_ENABLED : false, // declared in org.jbox2d.common.Settings
    SINCOS_LUT_LENGTH : 0, // declared in org.jbox2d.common.Settings
    SINCOS_LUT_LERP : false, // declared in org.jbox2d.common.Settings
    maxRotationSquared : 0, // declared in org.jbox2d.common.Settings

    Create : function() {
    },

    instanceOf : function(aType) {
        return ojcSettings.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcSettings;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var __label__ = null;
        ojcSettings.FAST_ABS = 1;
        ojcSettings.FAST_FLOOR = 1;
        ojcSettings.FAST_CEIL = 1;
        ojcSettings.FAST_ROUND = 1;
        ojcSettings.FAST_ATAN2 = 1;
        ojcSettings.CONTACT_STACK_INIT_SIZE = 10;
        ojcSettings.SINCOS_LUT_ENABLED = 1;
        var var1 = Math.floor(Math.ceil(57119.86598277577)); // type is INT value type is INT
        ojcSettings.SINCOS_LUT_LENGTH = var1;
        ojcSettings.SINCOS_LUT_LERP = 0;
        ojcSettings.maxRotationSquared = 2.4674013;
        return;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    classInitCheck : function() {
        if (!ojcSettings.__initialized) {
            ojcSettings.__initialized = true;
            var thePrototype = ojcSettings.Create.prototype;
            thePrototype.instanceOf = ojcSettings.instanceOf;
            thePrototype.ClassgetClass = ojcSettings.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            ojcSettings.VOIDclinit();
        }
    },

};

var jlMath = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 31,
    __implementedTypes : [1,31],

    Create : function() {
    },

    instanceOf : function(aType) {
        return jlMath.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jlMath;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    DOUBLEceilDOUBLE : function(p1) {
         return bytecoder.imports.math.ceil(p1);
    },

    DOUBLEsinDOUBLE : function(p1) {
         return bytecoder.imports.math.sin(p1);
    },

    DOUBLEfloorDOUBLE : function(p1) {
         return bytecoder.imports.math.floor(p1);
    },

    DOUBLEcosDOUBLE : function(p1) {
         return bytecoder.imports.math.cos(p1);
    },

    FLOATabsFLOAT : function(a) {
        var __label__ = null;
        if ((a >= 0.0)) {
            return a;
        }
        return (-a);
    },

    INTgetExponentFLOAT : function(f) {
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_0_FLOAT = null; // type is FLOAT # of inits = 6
        var local_6_INT = null; // type is INT # of inits = 6
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_1_INT = null; // type is INT # of inits = 6
        var local_5_INT = null; // type is INT # of inits = 6
        var local_7_INT = null; // type is INT # of inits = 3
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = jlMath.FLOATabsFLOAT(f); // type is FLOAT value type is FLOAT
            local_0_FLOAT = var0; // type is FLOAT value type is FLOAT
            local_1_INT = 0; // type is INT value type is INT
            local_2_REFERENCE = dmbcjlTMath$FloatExponents.exponents; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@34cf1981
            local_3_REFERENCE = dmbcjlTMath$FloatExponents.negativeExponents; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@73be5177
            local_4_REFERENCE = dmbcjlTMath$FloatExponents.negativeExponents2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@546f2383
            var var11 = local_0_FLOAT; // type is FLOAT value type is FLOAT
            if ((var11 <= 1.0)) {
                __label__ = 81;
                break $S_0;
            }
            __label__ = 26;
            }
        for(;;) switch (__label__) {
            case 26 :
            // NORMAL
                $S_26 : {
                // NORMAL
                    local_5_INT = (1 << (local_2_REFERENCE.data.length - 1)); // type is INT value type is INT
                    local_6_INT = (local_2_REFERENCE.data.length - 1); // type is INT value type is INT
                    __label__ = 40;
                    }
                $L_40 : for (;;) {
                    $S_40 : {
                    // NORMAL
                        var var50 = local_6_INT; // type is INT value type is INT
                        if ((var50 < 0)) {
                            __label__ = 78;
                            break $S_40;
                        }
                        __label__ = 45;
                        }
                    for(;;) switch (__label__) {
                        case 45 :
                        // NORMAL
                            $S_45 : {
                            // NORMAL
                                var var70 = local_0_FLOAT; // type is FLOAT value type is FLOAT
                                var var73 = local_2_REFERENCE.data[local_6_INT]; // type is FLOAT value type is FLOAT
                                if ((var70 < var73)) {
                                    __label__ = 66;
                                    break $S_45;
                                }
                                __label__ = 54;
                                }
                            $M_54_66 : for(;;) switch (__label__) {
                                case 66 :
                                // NORMAL
                                    local_5_INT = (local_5_INT >>> 1); // type is INT value type is INT
                                    local_6_INT = (local_6_INT + -1); // type is INT value type is INT
                                    __label__ = 40;
                                    continue $L_40;
                                case 54 :
                                // NORMAL
                                    var var75 = local_0_FLOAT; // type is FLOAT value type is FLOAT
                                    var var78 = local_3_REFERENCE.data[local_6_INT]; // type is FLOAT value type is FLOAT
                                    local_0_FLOAT = (var75 * var78); // type is FLOAT value type is FLOAT
                                    local_1_INT = (local_1_INT | local_5_INT); // type is INT value type is INT
                                    __label__ = 66;
                                    continue $M_54_66;
                            }
                        case 78 :
                        // NORMAL
                            return local_1_INT;
                    }
                }
            case 81 :
            // NORMAL
                $S_81 : {
                // NORMAL
                    var var13 = local_0_FLOAT; // type is FLOAT value type is FLOAT
                    if ((var13 >= 1.0)) {
                        return local_1_INT;
                    }
                    }
                $S_87 : {
                // NORMAL
                    local_5_INT = (1 << (local_3_REFERENCE.data.length - 1)); // type is INT value type is INT
                    local_6_INT = 0; // type is INT value type is INT
                    var var24 = local_0_FLOAT; // type is DOUBLE value type is DOUBLE
                    if ((var24 >= 1.1754943508222875E-38)) {
                        __label__ = 116;
                        break $S_87;
                    }
                    __label__ = 107;
                    }
                $M_107_116 : for(;;) switch (__label__) {
                    case 116 :
                    // NORMAL
                        $S_116 : {
                        // NORMAL
                            local_7_INT = (local_4_REFERENCE.data.length - 1); // type is INT value type is INT
                            __label__ = 123;
                            }
                        $L_123 : for (;;) {
                            $S_123 : {
                            // NORMAL
                                var var35 = local_7_INT; // type is INT value type is INT
                                if ((var35 < 0)) {
                                    __label__ = 162;
                                    break $S_123;
                                }
                                __label__ = 128;
                                }
                            for(;;) switch (__label__) {
                                case 162 :
                                // NORMAL
                                    local_1_INT = (-(local_1_INT + local_6_INT)); // type is INT value type is INT
                                    return local_1_INT;
                                case 128 :
                                // NORMAL
                                    $S_128 : {
                                    // NORMAL
                                        var var52 = local_0_FLOAT; // type is FLOAT value type is FLOAT
                                        var var55 = local_4_REFERENCE.data[local_7_INT]; // type is FLOAT value type is FLOAT
                                        if ((var52 >= var55)) {
                                            __label__ = 150;
                                            break $S_128;
                                        }
                                        __label__ = 138;
                                        }
                                    $M_138_150 : for(;;) switch (__label__) {
                                        case 138 :
                                        // NORMAL
                                            var var57 = local_0_FLOAT; // type is FLOAT value type is FLOAT
                                            var var60 = local_2_REFERENCE.data[local_7_INT]; // type is FLOAT value type is FLOAT
                                            local_0_FLOAT = (var57 * var60); // type is FLOAT value type is FLOAT
                                            local_1_INT = (local_1_INT | local_5_INT); // type is INT value type is INT
                                            __label__ = 150;
                                            continue $M_138_150;
                                        case 150 :
                                        // NORMAL
                                            local_5_INT = (local_5_INT >>> 1); // type is INT value type is INT
                                            local_7_INT = (local_7_INT + -1); // type is INT value type is INT
                                            __label__ = 123;
                                            continue $L_123;
                                    }
                            }
                        }
                    case 107 :
                    // NORMAL
                        local_0_FLOAT = (local_0_FLOAT * 8388608.0); // type is FLOAT value type is FLOAT
                        local_6_INT = 23; // type is INT value type is INT
                        __label__ = 116;
                        continue $M_107_116;
                }
        }
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    classInitCheck : function() {
        if (!jlMath.__initialized) {
            jlMath.__initialized = true;
            var thePrototype = jlMath.Create.prototype;
            thePrototype.instanceOf = jlMath.instanceOf;
            thePrototype.ClassgetClass = jlMath.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var jlrArray = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 32,
    __implementedTypes : [1,32],

    Create : function() {
    },

    instanceOf : function(aType) {
        return jlrArray.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jlrArray;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    jlObjectclone : function(thisRef) {
        var __label__ = null;
        return thisRef;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    jlObjectnewInstancejlClassINT : function(componentType,length) {
        var __label__ = null;
        var var0 = new jlIllegalStateException.Create(); // type is REFERENCE value type is REFERENCE
        jlIllegalStateException.VOIDinit(var0);
        throw var0;
    },

    classInitCheck : function() {
        if (!jlrArray.__initialized) {
            jlrArray.__initialized = true;
            var thePrototype = jlrArray.Create.prototype;
            thePrototype.instanceOf = jlrArray.instanceOf;
            thePrototype.ClassgetClass = jlrArray.ClassgetClass;
            thePrototype.jlObjectclone = jlrArray.jlObjectclone;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var jlSystem = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 33,
    __implementedTypes : [1,33],
    out : null, // declared in java.lang.System

    Create : function() {
    },

    instanceOf : function(aType) {
        return jlSystem.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jlSystem;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var __label__ = null;
        var var0 = new jiPrintStream.Create(); // type is REFERENCE value type is REFERENCE
        var var1 = new dmbcjlTSystem$1.Create(); // type is REFERENCE value type is REFERENCE
        dmbcjlTSystem$1.VOIDinit(var1);
        jiPrintStream.VOIDinitjiOutputStream(var0,var1);
        jlSystem.out = var0;
        return;
    },

    VOIDarraycopyjlObjectINTjlObjectINTINT : function(aSource,aSourcePos,aTarget,aTargetPos,aLength) {
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_7_INT = null; // type is INT # of inits = 3
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_5_REFERENCE = aSource; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@234b38bc
            local_6_REFERENCE = aTarget; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@77498abb
            local_7_INT = 0; // type is INT value type is INT
            __label__ = 15;
            }
        $L_15 : for (;;) {
            $S_15 : {
            // NORMAL
                var var4 = local_7_INT; // type is INT value type is INT
                if ((var4 >= aLength)) {
                    return;
                }
                }
            var var5 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@77498abb
            var var7 = (aTargetPos + local_7_INT); // type is INT value type is INT
            var var11 = local_5_REFERENCE.data[(aSourcePos + local_7_INT)]; // type is REFERENCE value type is REFERENCE
            var5.data[var7] = var11;
            local_7_INT = (local_7_INT + 1); // type is INT value type is INT
            __label__ = 15;
            continue $L_15;
        }
    },

    LONGnanoTime : function() {
         return bytecoder.imports.system.nanoTime();
    },

    INTidentityHashCodejlObject : function(aValue) {
        var __label__ = null;
        var var0 = aValue.INThashCode(aValue); // type is INT value type is INT
        return var0;
    },

    LONGcurrentTimeMillis : function() {
         return bytecoder.imports.system.currentTimeMillis();
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    classInitCheck : function() {
        if (!jlSystem.__initialized) {
            jlSystem.__initialized = true;
            var thePrototype = jlSystem.Create.prototype;
            thePrototype.instanceOf = jlSystem.instanceOf;
            thePrototype.ClassgetClass = jlSystem.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            jiPrintStream.classInitCheck();
            dmbcjlTSystem$1.classInitCheck();
            jlSystem.VOIDclinit();
        }
    },

};

var jiPrintStream = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 34,
    __implementedTypes : [1,39,36,37,40,38,35,34],

    Create : function() {
        this.delegate = null; // declared in java.io.FilterOutputStream
    },

    instanceOf : function(aType) {
        return jiPrintStream.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jiPrintStream;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitjiOutputStream : function(thisRef,aTarget) {
        var __label__ = null;
        jiFilterOutputStream.VOIDinitjiOutputStream(thisRef,aTarget);
        return;
    },

    classInitCheck : function() {
        if (!jiPrintStream.__initialized) {
            jiPrintStream.__initialized = true;
            var thePrototype = jiPrintStream.Create.prototype;
            thePrototype.instanceOf = jiPrintStream.instanceOf;
            thePrototype.ClassgetClass = jiPrintStream.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jiFilterOutputStream.classInitCheck();
            jlObject.classInitCheck();
            jiFlushable.classInitCheck();
            jiOutputStream.classInitCheck();
            jiCloseable.classInitCheck();
            jlAppendable.classInitCheck();
            jlAutoCloseable.classInitCheck();
        }
    },

};

var jiFilterOutputStream = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 35,
    __implementedTypes : [1,39,36,37,35,38],

    Create : function() {
        this.delegate = null; // declared in java.io.FilterOutputStream
    },

    instanceOf : function(aType) {
        return jiFilterOutputStream.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jiFilterOutputStream;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitjiOutputStream : function(thisRef,aDelegate) {
        var __label__ = null;
        jiOutputStream.VOIDinit(thisRef);
        thisRef.delegate = aDelegate;
        return;
    },

    classInitCheck : function() {
        if (!jiFilterOutputStream.__initialized) {
            jiFilterOutputStream.__initialized = true;
            var thePrototype = jiFilterOutputStream.Create.prototype;
            thePrototype.instanceOf = jiFilterOutputStream.instanceOf;
            thePrototype.ClassgetClass = jiFilterOutputStream.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jiOutputStream.classInitCheck();
            jlObject.classInitCheck();
            jiFlushable.classInitCheck();
            jiCloseable.classInitCheck();
            jlAutoCloseable.classInitCheck();
        }
    },

};

var jiOutputStream = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 36,
    __implementedTypes : [1,39,36,37,38],

    instanceOf : function(aType) {
        return jiOutputStream.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jiOutputStream;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    classInitCheck : function() {
        if (!jiOutputStream.__initialized) {
            jiOutputStream.__initialized = true;
            jlObject.classInitCheck();
            jiFlushable.classInitCheck();
            jiCloseable.classInitCheck();
            jlAutoCloseable.classInitCheck();
        }
    },

};

var jiCloseable = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 37,
    __implementedTypes : [1,37,38],


    classInitCheck : function() {
        if (!jiCloseable.__initialized) {
            jiCloseable.__initialized = true;
            jlObject.classInitCheck();
            jlAutoCloseable.classInitCheck();
        }
    },

};

var jlAutoCloseable = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 38,
    __implementedTypes : [1,38],


    classInitCheck : function() {
        if (!jlAutoCloseable.__initialized) {
            jlAutoCloseable.__initialized = true;
            jlObject.classInitCheck();
        }
    },

};

var jiFlushable = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 39,
    __implementedTypes : [1,39],


    classInitCheck : function() {
        if (!jiFlushable.__initialized) {
            jiFlushable.__initialized = true;
            jlObject.classInitCheck();
        }
    },

};

var jlAppendable = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 40,
    __implementedTypes : [1,40],


    classInitCheck : function() {
        if (!jlAppendable.__initialized) {
            jlAppendable.__initialized = true;
            jlObject.classInitCheck();
        }
    },

};

var dmbcjlTSystem$1 = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 41,
    __implementedTypes : [1,39,36,37,38,41],

    Create : function() {
    },

    instanceOf : function(aType) {
        return dmbcjlTSystem$1.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return dmbcjlTSystem$1;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        jiOutputStream.VOIDinit(thisRef);
        return;
    },

    classInitCheck : function() {
        if (!dmbcjlTSystem$1.__initialized) {
            dmbcjlTSystem$1.__initialized = true;
            var thePrototype = dmbcjlTSystem$1.Create.prototype;
            thePrototype.instanceOf = dmbcjlTSystem$1.instanceOf;
            thePrototype.ClassgetClass = dmbcjlTSystem$1.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jiOutputStream.classInitCheck();
            jlObject.classInitCheck();
            jiFlushable.classInitCheck();
            jiCloseable.classInitCheck();
            jlAutoCloseable.classInitCheck();
        }
    },

};

var ojpnDefaultWorldPool$2 = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 42,
    __implementedTypes : [1,29,42,28],
    $assertionsDisabled : false, // declared in org.jbox2d.pooling.normal.MutableStack

    Create : function() {
        this.index = 0; // declared in org.jbox2d.pooling.normal.MutableStack
        this.stack = null; // declared in org.jbox2d.pooling.normal.MutableStack
        this.size = 0; // declared in org.jbox2d.pooling.normal.MutableStack
        this.this$0 = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool$2
    },

    instanceOf : function(aType) {
        return ojpnDefaultWorldPool$2.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojpnDefaultWorldPool$2;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitojpnDefaultWorldPoolINT : function(thisRef,p1,x0) {
        var __label__ = null;
        thisRef.this$0 = p1;
        ojpnMutableStack.VOIDinitINT(thisRef,x0);
        return;
    },

    jlObjectnewInstance : function(thisRef) {
        var __label__ = null;
        var var0 = thisRef.ojdcContactnewInstance(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7cfb9e9c
        return var0;
    },

    ojdcContactnewInstance : function(thisRef) {
        var __label__ = null;
        var var0 = new ojdcCircleContact.Create(); // type is REFERENCE value type is REFERENCE
        var var2 = ojpnDefaultWorldPool.ojpIWorldPoolaccess$000ojpnDefaultWorldPool(thisRef.this$0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@31e133a0
        ojdcCircleContact.VOIDinitojpIWorldPool(var0,var2);
        return var0;
    },

    classInitCheck : function() {
        if (!ojpnDefaultWorldPool$2.__initialized) {
            ojpnDefaultWorldPool$2.__initialized = true;
            var thePrototype = ojpnDefaultWorldPool$2.Create.prototype;
            thePrototype.instanceOf = ojpnDefaultWorldPool$2.instanceOf;
            thePrototype.ClassgetClass = ojpnDefaultWorldPool$2.ClassgetClass;
            thePrototype.ojdcContactnewInstance = ojpnDefaultWorldPool$2.ojdcContactnewInstance;
            thePrototype.jlObjectnewInstance = ojpnDefaultWorldPool$2.jlObjectnewInstance;
            thePrototype.jlObjectpop = ojpnMutableStack.jlObjectpop;
            thePrototype.VOIDpushjlObject = ojpnMutableStack.VOIDpushjlObject;
            thePrototype.VOIDextendStackINT = ojpnMutableStack.VOIDextendStackINT;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojpnMutableStack.classInitCheck();
            jlObject.classInitCheck();
            ojpIDynamicStack.classInitCheck();
        }
    },

};

var ojpnDefaultWorldPool$3 = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 43,
    __implementedTypes : [1,29,43,28],
    $assertionsDisabled : false, // declared in org.jbox2d.pooling.normal.MutableStack

    Create : function() {
        this.index = 0; // declared in org.jbox2d.pooling.normal.MutableStack
        this.stack = null; // declared in org.jbox2d.pooling.normal.MutableStack
        this.size = 0; // declared in org.jbox2d.pooling.normal.MutableStack
        this.this$0 = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool$3
    },

    instanceOf : function(aType) {
        return ojpnDefaultWorldPool$3.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojpnDefaultWorldPool$3;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitojpnDefaultWorldPoolINT : function(thisRef,p1,x0) {
        var __label__ = null;
        thisRef.this$0 = p1;
        ojpnMutableStack.VOIDinitINT(thisRef,x0);
        return;
    },

    jlObjectnewInstance : function(thisRef) {
        var __label__ = null;
        var var0 = thisRef.ojdcContactnewInstance(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@421be437
        return var0;
    },

    ojdcContactnewInstance : function(thisRef) {
        var __label__ = null;
        var var0 = new ojdcPolygonAndCircleContact.Create(); // type is REFERENCE value type is REFERENCE
        var var2 = ojpnDefaultWorldPool.ojpIWorldPoolaccess$000ojpnDefaultWorldPool(thisRef.this$0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@68f2e6b2
        ojdcPolygonAndCircleContact.VOIDinitojpIWorldPool(var0,var2);
        return var0;
    },

    classInitCheck : function() {
        if (!ojpnDefaultWorldPool$3.__initialized) {
            ojpnDefaultWorldPool$3.__initialized = true;
            var thePrototype = ojpnDefaultWorldPool$3.Create.prototype;
            thePrototype.instanceOf = ojpnDefaultWorldPool$3.instanceOf;
            thePrototype.ClassgetClass = ojpnDefaultWorldPool$3.ClassgetClass;
            thePrototype.ojdcContactnewInstance = ojpnDefaultWorldPool$3.ojdcContactnewInstance;
            thePrototype.jlObjectnewInstance = ojpnDefaultWorldPool$3.jlObjectnewInstance;
            thePrototype.jlObjectpop = ojpnMutableStack.jlObjectpop;
            thePrototype.VOIDpushjlObject = ojpnMutableStack.VOIDpushjlObject;
            thePrototype.VOIDextendStackINT = ojpnMutableStack.VOIDextendStackINT;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojpnMutableStack.classInitCheck();
            jlObject.classInitCheck();
            ojpIDynamicStack.classInitCheck();
        }
    },

};

var ojpnDefaultWorldPool$4 = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 44,
    __implementedTypes : [44,1,29,28],
    $assertionsDisabled : false, // declared in org.jbox2d.pooling.normal.MutableStack

    Create : function() {
        this.index = 0; // declared in org.jbox2d.pooling.normal.MutableStack
        this.stack = null; // declared in org.jbox2d.pooling.normal.MutableStack
        this.size = 0; // declared in org.jbox2d.pooling.normal.MutableStack
        this.this$0 = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool$4
    },

    instanceOf : function(aType) {
        return ojpnDefaultWorldPool$4.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojpnDefaultWorldPool$4;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitojpnDefaultWorldPoolINT : function(thisRef,p1,x0) {
        var __label__ = null;
        thisRef.this$0 = p1;
        ojpnMutableStack.VOIDinitINT(thisRef,x0);
        return;
    },

    jlObjectnewInstance : function(thisRef) {
        var __label__ = null;
        var var0 = thisRef.ojdcContactnewInstance(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@79587622
        return var0;
    },

    ojdcContactnewInstance : function(thisRef) {
        var __label__ = null;
        var var0 = new ojdcEdgeAndCircleContact.Create(); // type is REFERENCE value type is REFERENCE
        var var2 = ojpnDefaultWorldPool.ojpIWorldPoolaccess$000ojpnDefaultWorldPool(thisRef.this$0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7126af5d
        ojdcEdgeAndCircleContact.VOIDinitojpIWorldPool(var0,var2);
        return var0;
    },

    classInitCheck : function() {
        if (!ojpnDefaultWorldPool$4.__initialized) {
            ojpnDefaultWorldPool$4.__initialized = true;
            var thePrototype = ojpnDefaultWorldPool$4.Create.prototype;
            thePrototype.instanceOf = ojpnDefaultWorldPool$4.instanceOf;
            thePrototype.ClassgetClass = ojpnDefaultWorldPool$4.ClassgetClass;
            thePrototype.ojdcContactnewInstance = ojpnDefaultWorldPool$4.ojdcContactnewInstance;
            thePrototype.jlObjectnewInstance = ojpnDefaultWorldPool$4.jlObjectnewInstance;
            thePrototype.jlObjectpop = ojpnMutableStack.jlObjectpop;
            thePrototype.VOIDpushjlObject = ojpnMutableStack.VOIDpushjlObject;
            thePrototype.VOIDextendStackINT = ojpnMutableStack.VOIDextendStackINT;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojpnMutableStack.classInitCheck();
            jlObject.classInitCheck();
            ojpIDynamicStack.classInitCheck();
        }
    },

};

var ojpnDefaultWorldPool$5 = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 45,
    __implementedTypes : [1,29,45,28],
    $assertionsDisabled : false, // declared in org.jbox2d.pooling.normal.MutableStack

    Create : function() {
        this.index = 0; // declared in org.jbox2d.pooling.normal.MutableStack
        this.stack = null; // declared in org.jbox2d.pooling.normal.MutableStack
        this.size = 0; // declared in org.jbox2d.pooling.normal.MutableStack
        this.this$0 = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool$5
    },

    instanceOf : function(aType) {
        return ojpnDefaultWorldPool$5.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojpnDefaultWorldPool$5;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitojpnDefaultWorldPoolINT : function(thisRef,p1,x0) {
        var __label__ = null;
        thisRef.this$0 = p1;
        ojpnMutableStack.VOIDinitINT(thisRef,x0);
        return;
    },

    jlObjectnewInstance : function(thisRef) {
        var __label__ = null;
        var var0 = thisRef.ojdcContactnewInstance(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3a7bea8b
        return var0;
    },

    ojdcContactnewInstance : function(thisRef) {
        var __label__ = null;
        var var0 = new ojdcEdgeAndPolygonContact.Create(); // type is REFERENCE value type is REFERENCE
        var var2 = ojpnDefaultWorldPool.ojpIWorldPoolaccess$000ojpnDefaultWorldPool(thisRef.this$0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1b52c8ec
        ojdcEdgeAndPolygonContact.VOIDinitojpIWorldPool(var0,var2);
        return var0;
    },

    classInitCheck : function() {
        if (!ojpnDefaultWorldPool$5.__initialized) {
            ojpnDefaultWorldPool$5.__initialized = true;
            var thePrototype = ojpnDefaultWorldPool$5.Create.prototype;
            thePrototype.instanceOf = ojpnDefaultWorldPool$5.instanceOf;
            thePrototype.ClassgetClass = ojpnDefaultWorldPool$5.ClassgetClass;
            thePrototype.ojdcContactnewInstance = ojpnDefaultWorldPool$5.ojdcContactnewInstance;
            thePrototype.jlObjectnewInstance = ojpnDefaultWorldPool$5.jlObjectnewInstance;
            thePrototype.jlObjectpop = ojpnMutableStack.jlObjectpop;
            thePrototype.VOIDpushjlObject = ojpnMutableStack.VOIDpushjlObject;
            thePrototype.VOIDextendStackINT = ojpnMutableStack.VOIDextendStackINT;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojpnMutableStack.classInitCheck();
            jlObject.classInitCheck();
            ojpIDynamicStack.classInitCheck();
        }
    },

};

var ojpnDefaultWorldPool$6 = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 46,
    __implementedTypes : [1,46,29,28],
    $assertionsDisabled : false, // declared in org.jbox2d.pooling.normal.MutableStack

    Create : function() {
        this.index = 0; // declared in org.jbox2d.pooling.normal.MutableStack
        this.stack = null; // declared in org.jbox2d.pooling.normal.MutableStack
        this.size = 0; // declared in org.jbox2d.pooling.normal.MutableStack
        this.this$0 = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool$6
    },

    instanceOf : function(aType) {
        return ojpnDefaultWorldPool$6.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojpnDefaultWorldPool$6;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitojpnDefaultWorldPoolINT : function(thisRef,p1,x0) {
        var __label__ = null;
        thisRef.this$0 = p1;
        ojpnMutableStack.VOIDinitINT(thisRef,x0);
        return;
    },

    jlObjectnewInstance : function(thisRef) {
        var __label__ = null;
        var var0 = thisRef.ojdcContactnewInstance(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6b4cc1b7
        return var0;
    },

    ojdcContactnewInstance : function(thisRef) {
        var __label__ = null;
        var var0 = new ojdcChainAndCircleContact.Create(); // type is REFERENCE value type is REFERENCE
        var var2 = ojpnDefaultWorldPool.ojpIWorldPoolaccess$000ojpnDefaultWorldPool(thisRef.this$0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@464fa5f2
        ojdcChainAndCircleContact.VOIDinitojpIWorldPool(var0,var2);
        return var0;
    },

    classInitCheck : function() {
        if (!ojpnDefaultWorldPool$6.__initialized) {
            ojpnDefaultWorldPool$6.__initialized = true;
            var thePrototype = ojpnDefaultWorldPool$6.Create.prototype;
            thePrototype.instanceOf = ojpnDefaultWorldPool$6.instanceOf;
            thePrototype.ClassgetClass = ojpnDefaultWorldPool$6.ClassgetClass;
            thePrototype.ojdcContactnewInstance = ojpnDefaultWorldPool$6.ojdcContactnewInstance;
            thePrototype.jlObjectnewInstance = ojpnDefaultWorldPool$6.jlObjectnewInstance;
            thePrototype.jlObjectpop = ojpnMutableStack.jlObjectpop;
            thePrototype.VOIDpushjlObject = ojpnMutableStack.VOIDpushjlObject;
            thePrototype.VOIDextendStackINT = ojpnMutableStack.VOIDextendStackINT;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojpnMutableStack.classInitCheck();
            jlObject.classInitCheck();
            ojpIDynamicStack.classInitCheck();
        }
    },

};

var ojpnDefaultWorldPool$7 = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 47,
    __implementedTypes : [1,29,47,28],
    $assertionsDisabled : false, // declared in org.jbox2d.pooling.normal.MutableStack

    Create : function() {
        this.index = 0; // declared in org.jbox2d.pooling.normal.MutableStack
        this.stack = null; // declared in org.jbox2d.pooling.normal.MutableStack
        this.size = 0; // declared in org.jbox2d.pooling.normal.MutableStack
        this.this$0 = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool$7
    },

    instanceOf : function(aType) {
        return ojpnDefaultWorldPool$7.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojpnDefaultWorldPool$7;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitojpnDefaultWorldPoolINT : function(thisRef,p1,x0) {
        var __label__ = null;
        thisRef.this$0 = p1;
        ojpnMutableStack.VOIDinitINT(thisRef,x0);
        return;
    },

    jlObjectnewInstance : function(thisRef) {
        var __label__ = null;
        var var0 = thisRef.ojdcContactnewInstance(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4861d21c
        return var0;
    },

    ojdcContactnewInstance : function(thisRef) {
        var __label__ = null;
        var var0 = new ojdcChainAndPolygonContact.Create(); // type is REFERENCE value type is REFERENCE
        var var2 = ojpnDefaultWorldPool.ojpIWorldPoolaccess$000ojpnDefaultWorldPool(thisRef.this$0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@56a16a8f
        ojdcChainAndPolygonContact.VOIDinitojpIWorldPool(var0,var2);
        return var0;
    },

    classInitCheck : function() {
        if (!ojpnDefaultWorldPool$7.__initialized) {
            ojpnDefaultWorldPool$7.__initialized = true;
            var thePrototype = ojpnDefaultWorldPool$7.Create.prototype;
            thePrototype.instanceOf = ojpnDefaultWorldPool$7.instanceOf;
            thePrototype.ClassgetClass = ojpnDefaultWorldPool$7.ClassgetClass;
            thePrototype.ojdcContactnewInstance = ojpnDefaultWorldPool$7.ojdcContactnewInstance;
            thePrototype.jlObjectnewInstance = ojpnDefaultWorldPool$7.jlObjectnewInstance;
            thePrototype.jlObjectpop = ojpnMutableStack.jlObjectpop;
            thePrototype.VOIDpushjlObject = ojpnMutableStack.VOIDpushjlObject;
            thePrototype.VOIDextendStackINT = ojpnMutableStack.VOIDextendStackINT;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojpnMutableStack.classInitCheck();
            jlObject.classInitCheck();
            ojpIDynamicStack.classInitCheck();
        }
    },

};

var ojpnDefaultWorldPool$8 = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 48,
    __implementedTypes : [1,49,48],
    $assertionsDisabled : false, // declared in org.jbox2d.pooling.normal.OrderedStack

    Create : function() {
        this.size = 0; // declared in org.jbox2d.pooling.normal.OrderedStack
        this.pool = null; // declared in org.jbox2d.pooling.normal.OrderedStack
        this.index = 0; // declared in org.jbox2d.pooling.normal.OrderedStack
        this.container = null; // declared in org.jbox2d.pooling.normal.OrderedStack
        this.this$0 = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool$8
    },

    instanceOf : function(aType) {
        return ojpnDefaultWorldPool$8.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojpnDefaultWorldPool$8;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitojpnDefaultWorldPoolINTINT : function(thisRef,p1,x0,x1) {
        var __label__ = null;
        thisRef.this$0 = p1;
        ojpnOrderedStack.VOIDinitINTINT(thisRef,x0,x1);
        return;
    },

    jlObjectnewInstance : function(thisRef) {
        var __label__ = null;
        var var0 = thisRef.ojcVec2newInstance(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5e3328e
        return var0;
    },

    ojcVec2newInstance : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var0);
        return var0;
    },

    classInitCheck : function() {
        if (!ojpnDefaultWorldPool$8.__initialized) {
            ojpnDefaultWorldPool$8.__initialized = true;
            var thePrototype = ojpnDefaultWorldPool$8.Create.prototype;
            thePrototype.instanceOf = ojpnDefaultWorldPool$8.instanceOf;
            thePrototype.ClassgetClass = ojpnDefaultWorldPool$8.ClassgetClass;
            thePrototype.ojcVec2newInstance = ojpnDefaultWorldPool$8.ojcVec2newInstance;
            thePrototype.jlObjectnewInstance = ojpnDefaultWorldPool$8.jlObjectnewInstance;
            thePrototype.VOIDpushINT = ojpnOrderedStack.VOIDpushINT;
            thePrototype.jlObjectpop = ojpnOrderedStack.jlObjectpop;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojpnOrderedStack.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var ojpnOrderedStack = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 49,
    __implementedTypes : [1,49],
    $assertionsDisabled : false, // declared in org.jbox2d.pooling.normal.OrderedStack

    instanceOf : function(aType) {
        return ojpnOrderedStack.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojpnOrderedStack;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojpnOrderedStack.BOOLEANdesiredAssertionStatus(ojpnOrderedStack); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_13_9 : for(;;) switch (__label__) {
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_13_9;
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_13_9;
        }
        ojpnOrderedStack.$assertionsDisabled = var1;
        return;
    },

    VOIDinitINTINT : function(thisRef,argStackSize,argContainerSize) {
        var local_3_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            thisRef.size = argStackSize;
            var var0 = bytecoder.newArray(argStackSize,null); // type is REFERENCE value type is REFERENCE
            thisRef.pool = var0;
            local_3_INT = 0; // type is INT value type is INT
            __label__ = 19;
            }
        $L_19 : for (;;) {
            $S_19 : {
            // NORMAL
                var var3 = local_3_INT; // type is INT value type is INT
                if ((var3 >= argStackSize)) {
                    __label__ = 40;
                    break $S_19;
                }
                __label__ = 24;
                }
            for(;;) switch (__label__) {
                case 24 :
                // NORMAL
                    var var5 = thisRef.pool; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@20041e7f
                    var var6 = local_3_INT; // type is INT value type is INT
                    var var7 = thisRef.jlObjectnewInstance(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7b8c68ec
                    var5.data[var6] = var7;
                    local_3_INT = (local_3_INT + 1); // type is INT value type is INT
                    __label__ = 19;
                    continue $L_19;
                case 40 :
                // NORMAL
                    thisRef.index = 0;
                    var var4 = bytecoder.newArray(argContainerSize,null); // type is REFERENCE value type is REFERENCE
                    thisRef.container = var4;
                    return;
            }
        }
    },

    jlObjectpop : function(thisRef) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojpnOrderedStack.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 27;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_27_6 : for(;;) switch (__label__) {
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    var var1 = thisRef.index; // type is INT value type is INT
                    var var2 = thisRef.size; // type is INT value type is INT
                    if ((var1 < var2)) {
                        __label__ = 27;
                        continue $M_27_6;
                    }
                    }
                var var7 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinitjlObject(var7,bytecoder.stringpool[14]);
                throw var7;
            case 27 :
            // NORMAL
                var var3 = thisRef.pool; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@76dfb2a3
                var var4 = thisRef.index; // type is INT value type is INT
                var var5 = (var4 + 1); // type is INT value type is INT
                thisRef.index = var5;
                var var6 = var3.data[var4]; // type is REFERENCE value type is REFERENCE
                return var6;
        }
    },

    VOIDpushINT : function(thisRef,argNum) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var1 = (thisRef.index - argNum); // type is INT value type is INT
            thisRef.index = var1;
            var var2 = ojpnOrderedStack.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var2 != 0)) {
                return;
            }
            }
        $S_16 : {
        // NORMAL
            var var3 = thisRef.index; // type is INT value type is INT
            if ((var3 >= 0)) {
                return;
            }
            }
        var var4 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
        jlAssertionError.VOIDinitjlObject(var4,bytecoder.stringpool[15]);
        throw var4;
    },

    classInitCheck : function() {
        if (!ojpnOrderedStack.__initialized) {
            ojpnOrderedStack.__initialized = true;
            jlObject.classInitCheck();
            ojpnOrderedStack.VOIDclinit();
        }
    },

};

var ojpnDefaultWorldPool$9 = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 50,
    __implementedTypes : [1,50,49],
    $assertionsDisabled : false, // declared in org.jbox2d.pooling.normal.OrderedStack

    Create : function() {
        this.size = 0; // declared in org.jbox2d.pooling.normal.OrderedStack
        this.pool = null; // declared in org.jbox2d.pooling.normal.OrderedStack
        this.index = 0; // declared in org.jbox2d.pooling.normal.OrderedStack
        this.container = null; // declared in org.jbox2d.pooling.normal.OrderedStack
        this.this$0 = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool$9
    },

    instanceOf : function(aType) {
        return ojpnDefaultWorldPool$9.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojpnDefaultWorldPool$9;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitojpnDefaultWorldPoolINTINT : function(thisRef,p1,x0,x1) {
        var __label__ = null;
        thisRef.this$0 = p1;
        ojpnOrderedStack.VOIDinitINTINT(thisRef,x0,x1);
        return;
    },

    jlObjectnewInstance : function(thisRef) {
        var __label__ = null;
        var var0 = thisRef.ojcVec3newInstance(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5e6f1c85
        return var0;
    },

    ojcVec3newInstance : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcVec3.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec3.VOIDinit(var0);
        return var0;
    },

    classInitCheck : function() {
        if (!ojpnDefaultWorldPool$9.__initialized) {
            ojpnDefaultWorldPool$9.__initialized = true;
            var thePrototype = ojpnDefaultWorldPool$9.Create.prototype;
            thePrototype.instanceOf = ojpnDefaultWorldPool$9.instanceOf;
            thePrototype.ClassgetClass = ojpnDefaultWorldPool$9.ClassgetClass;
            thePrototype.ojcVec3newInstance = ojpnDefaultWorldPool$9.ojcVec3newInstance;
            thePrototype.jlObjectnewInstance = ojpnDefaultWorldPool$9.jlObjectnewInstance;
            thePrototype.VOIDpushINT = ojpnOrderedStack.VOIDpushINT;
            thePrototype.jlObjectpop = ojpnOrderedStack.jlObjectpop;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojpnOrderedStack.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var ojpnDefaultWorldPool$10 = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 51,
    __implementedTypes : [1,49,51],
    $assertionsDisabled : false, // declared in org.jbox2d.pooling.normal.OrderedStack

    Create : function() {
        this.size = 0; // declared in org.jbox2d.pooling.normal.OrderedStack
        this.pool = null; // declared in org.jbox2d.pooling.normal.OrderedStack
        this.index = 0; // declared in org.jbox2d.pooling.normal.OrderedStack
        this.container = null; // declared in org.jbox2d.pooling.normal.OrderedStack
        this.this$0 = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool$10
    },

    instanceOf : function(aType) {
        return ojpnDefaultWorldPool$10.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojpnDefaultWorldPool$10;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitojpnDefaultWorldPoolINTINT : function(thisRef,p1,x0,x1) {
        var __label__ = null;
        thisRef.this$0 = p1;
        ojpnOrderedStack.VOIDinitINTINT(thisRef,x0,x1);
        return;
    },

    jlObjectnewInstance : function(thisRef) {
        var __label__ = null;
        var var0 = thisRef.ojcMat22newInstance(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5cfdd154
        return var0;
    },

    ojcMat22newInstance : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcMat22.Create(); // type is REFERENCE value type is REFERENCE
        ojcMat22.VOIDinit(var0);
        return var0;
    },

    classInitCheck : function() {
        if (!ojpnDefaultWorldPool$10.__initialized) {
            ojpnDefaultWorldPool$10.__initialized = true;
            var thePrototype = ojpnDefaultWorldPool$10.Create.prototype;
            thePrototype.instanceOf = ojpnDefaultWorldPool$10.instanceOf;
            thePrototype.ClassgetClass = ojpnDefaultWorldPool$10.ClassgetClass;
            thePrototype.ojcMat22newInstance = ojpnDefaultWorldPool$10.ojcMat22newInstance;
            thePrototype.jlObjectnewInstance = ojpnDefaultWorldPool$10.jlObjectnewInstance;
            thePrototype.VOIDpushINT = ojpnOrderedStack.VOIDpushINT;
            thePrototype.jlObjectpop = ojpnOrderedStack.jlObjectpop;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojpnOrderedStack.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var ojpnDefaultWorldPool$11 = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 52,
    __implementedTypes : [1,52,49],
    $assertionsDisabled : false, // declared in org.jbox2d.pooling.normal.OrderedStack

    Create : function() {
        this.size = 0; // declared in org.jbox2d.pooling.normal.OrderedStack
        this.pool = null; // declared in org.jbox2d.pooling.normal.OrderedStack
        this.index = 0; // declared in org.jbox2d.pooling.normal.OrderedStack
        this.container = null; // declared in org.jbox2d.pooling.normal.OrderedStack
        this.this$0 = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool$11
    },

    instanceOf : function(aType) {
        return ojpnDefaultWorldPool$11.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojpnDefaultWorldPool$11;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitojpnDefaultWorldPoolINTINT : function(thisRef,p1,x0,x1) {
        var __label__ = null;
        thisRef.this$0 = p1;
        ojpnOrderedStack.VOIDinitINTINT(thisRef,x0,x1);
        return;
    },

    jlObjectnewInstance : function(thisRef) {
        var __label__ = null;
        var var0 = thisRef.ojcAABBnewInstance(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1f07a5d8
        return var0;
    },

    ojcAABBnewInstance : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcAABB.Create(); // type is REFERENCE value type is REFERENCE
        ojcAABB.VOIDinit(var0);
        return var0;
    },

    classInitCheck : function() {
        if (!ojpnDefaultWorldPool$11.__initialized) {
            ojpnDefaultWorldPool$11.__initialized = true;
            var thePrototype = ojpnDefaultWorldPool$11.Create.prototype;
            thePrototype.instanceOf = ojpnDefaultWorldPool$11.instanceOf;
            thePrototype.ClassgetClass = ojpnDefaultWorldPool$11.ClassgetClass;
            thePrototype.ojcAABBnewInstance = ojpnDefaultWorldPool$11.ojcAABBnewInstance;
            thePrototype.jlObjectnewInstance = ojpnDefaultWorldPool$11.jlObjectnewInstance;
            thePrototype.VOIDpushINT = ojpnOrderedStack.VOIDpushINT;
            thePrototype.jlObjectpop = ojpnOrderedStack.jlObjectpop;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojpnOrderedStack.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var ojpnDefaultWorldPool$12 = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 53,
    __implementedTypes : [1,53,49],
    $assertionsDisabled : false, // declared in org.jbox2d.pooling.normal.OrderedStack

    Create : function() {
        this.size = 0; // declared in org.jbox2d.pooling.normal.OrderedStack
        this.pool = null; // declared in org.jbox2d.pooling.normal.OrderedStack
        this.index = 0; // declared in org.jbox2d.pooling.normal.OrderedStack
        this.container = null; // declared in org.jbox2d.pooling.normal.OrderedStack
        this.this$0 = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool$12
    },

    instanceOf : function(aType) {
        return ojpnDefaultWorldPool$12.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojpnDefaultWorldPool$12;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitojpnDefaultWorldPoolINTINT : function(thisRef,p1,x0,x1) {
        var __label__ = null;
        thisRef.this$0 = p1;
        ojpnOrderedStack.VOIDinitINTINT(thisRef,x0,x1);
        return;
    },

    jlObjectnewInstance : function(thisRef) {
        var __label__ = null;
        var var0 = thisRef.ojcRotnewInstance(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4ed3c156
        return var0;
    },

    ojcRotnewInstance : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcRot.Create(); // type is REFERENCE value type is REFERENCE
        ojcRot.VOIDinit(var0);
        return var0;
    },

    classInitCheck : function() {
        if (!ojpnDefaultWorldPool$12.__initialized) {
            ojpnDefaultWorldPool$12.__initialized = true;
            var thePrototype = ojpnDefaultWorldPool$12.Create.prototype;
            thePrototype.instanceOf = ojpnDefaultWorldPool$12.instanceOf;
            thePrototype.ClassgetClass = ojpnDefaultWorldPool$12.ClassgetClass;
            thePrototype.ojcRotnewInstance = ojpnDefaultWorldPool$12.ojcRotnewInstance;
            thePrototype.jlObjectnewInstance = ojpnDefaultWorldPool$12.jlObjectnewInstance;
            thePrototype.VOIDpushINT = ojpnOrderedStack.VOIDpushINT;
            thePrototype.jlObjectpop = ojpnOrderedStack.jlObjectpop;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojpnOrderedStack.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var ojpnDefaultWorldPool$13 = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 54,
    __implementedTypes : [1,54,49],
    $assertionsDisabled : false, // declared in org.jbox2d.pooling.normal.OrderedStack

    Create : function() {
        this.size = 0; // declared in org.jbox2d.pooling.normal.OrderedStack
        this.pool = null; // declared in org.jbox2d.pooling.normal.OrderedStack
        this.index = 0; // declared in org.jbox2d.pooling.normal.OrderedStack
        this.container = null; // declared in org.jbox2d.pooling.normal.OrderedStack
        this.this$0 = null; // declared in org.jbox2d.pooling.normal.DefaultWorldPool$13
    },

    instanceOf : function(aType) {
        return ojpnDefaultWorldPool$13.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojpnDefaultWorldPool$13;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitojpnDefaultWorldPoolINTINT : function(thisRef,p1,x0,x1) {
        var __label__ = null;
        thisRef.this$0 = p1;
        ojpnOrderedStack.VOIDinitINTINT(thisRef,x0,x1);
        return;
    },

    jlObjectnewInstance : function(thisRef) {
        var __label__ = null;
        var var0 = thisRef.ojcMat33newInstance(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5bacfa4
        return var0;
    },

    ojcMat33newInstance : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcMat33.Create(); // type is REFERENCE value type is REFERENCE
        ojcMat33.VOIDinit(var0);
        return var0;
    },

    classInitCheck : function() {
        if (!ojpnDefaultWorldPool$13.__initialized) {
            ojpnDefaultWorldPool$13.__initialized = true;
            var thePrototype = ojpnDefaultWorldPool$13.Create.prototype;
            thePrototype.instanceOf = ojpnDefaultWorldPool$13.instanceOf;
            thePrototype.ClassgetClass = ojpnDefaultWorldPool$13.ClassgetClass;
            thePrototype.ojcMat33newInstance = ojpnDefaultWorldPool$13.ojcMat33newInstance;
            thePrototype.jlObjectnewInstance = ojpnDefaultWorldPool$13.jlObjectnewInstance;
            thePrototype.VOIDpushINT = ojpnOrderedStack.VOIDpushINT;
            thePrototype.jlObjectpop = ojpnOrderedStack.jlObjectpop;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojpnOrderedStack.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var ojcDistance = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 55,
    __implementedTypes : [1,55],
    $assertionsDisabled : false, // declared in org.jbox2d.collision.Distance
    GJK_CALLS : 0, // declared in org.jbox2d.collision.Distance
    GJK_ITERS : 0, // declared in org.jbox2d.collision.Distance
    GJK_MAX_ITERS : 0, // declared in org.jbox2d.collision.Distance

    Create : function() {
        this.simplex = null; // declared in org.jbox2d.collision.Distance
        this.saveA = null; // declared in org.jbox2d.collision.Distance
        this.saveB = null; // declared in org.jbox2d.collision.Distance
        this.closestPoint = null; // declared in org.jbox2d.collision.Distance
        this.d = null; // declared in org.jbox2d.collision.Distance
        this.temp = null; // declared in org.jbox2d.collision.Distance
        this.normal = null; // declared in org.jbox2d.collision.Distance
    },

    instanceOf : function(aType) {
        return ojcDistance.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcDistance;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcDistance.BOOLEANdesiredAssertionStatus(ojcDistance); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_9_13 : for(;;) switch (__label__) {
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_9_13;
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_9_13;
        }
        ojcDistance.$assertionsDisabled = var1;
        ojcDistance.GJK_CALLS = 0;
        ojcDistance.GJK_ITERS = 0;
        ojcDistance.GJK_MAX_ITERS = 20;
        return;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcDistance$Simplex.Create(); // type is REFERENCE value type is REFERENCE
        ojcDistance$Simplex.VOIDinitojcDistanceojcDistance$1(var0,thisRef,null);
        thisRef.simplex = var0;
        var var1 = bytecoder.newArray(3,0); // type is REFERENCE value type is REFERENCE
        thisRef.saveA = var1;
        var var2 = bytecoder.newArray(3,0); // type is REFERENCE value type is REFERENCE
        thisRef.saveB = var2;
        var var3 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var3);
        thisRef.closestPoint = var3;
        var var4 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var4);
        thisRef.d = var4;
        var var5 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var5);
        thisRef.temp = var5;
        var var6 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var6);
        thisRef.normal = var6;
        return;
    },

    VOIDdistanceojcDistanceOutputojcDistance$SimplexCacheojcDistanceInput : function(thisRef,output,cache,input) {
        var local_13_INT = null; // type is INT # of inits = 3
        var local_11_FLOAT = null; // type is FLOAT # of inits = 2
        var local_14_FLOAT = null; // type is FLOAT # of inits = 1
        var local_8_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 4
        var local_9_INT = null; // type is INT # of inits = 4
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 4
        var local_10_FLOAT = null; // type is FLOAT # of inits = 4
        var local_14_INT = null; // type is INT # of inits = 3
        var local_7_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_13_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_13_FLOAT = null; // type is FLOAT # of inits = 1
        var local_12_INT = null; // type is INT # of inits = 5
        var local_15_INT = null; // type is INT # of inits = 3
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var1 = (ojcDistance.GJK_CALLS + 1); // type is INT value type is INT
            ojcDistance.GJK_CALLS = var1;
            local_4_REFERENCE = input.proxyA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@78183beb
            local_5_REFERENCE = input.proxyB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@71a349aa
            local_6_REFERENCE = input.transformA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@23bf6a24
            local_7_REFERENCE = input.transformB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2ba717ac
            thisRef.simplex.VOIDreadCacheojcDistance$SimplexCacheojcDistance$DistanceProxyojcTransformojcDistance$DistanceProxyojcTransform(thisRef.simplex,cache,local_4_REFERENCE,local_6_REFERENCE,local_5_REFERENCE,local_7_REFERENCE);
            local_8_REFERENCE = thisRef.simplex.vertices; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@12d9a650
            local_9_INT = 0; // type is INT value type is INT
            thisRef.simplex.VOIDgetClosestPointojcVec2(thisRef.simplex,thisRef.closestPoint);
            var var23 = thisRef.closestPoint.FLOATlengthSquared(thisRef.closestPoint); // type is FLOAT value type is FLOAT
            local_10_FLOAT = var23; // type is FLOAT value type is FLOAT
            local_11_FLOAT = local_10_FLOAT; // type is FLOAT value type is FLOAT
            local_12_INT = 0; // type is INT value type is INT
            __label__ = 87;
            }
        $L_87 : for (;;) {
            $S_87 : {
            // NORMAL
                var var31 = local_12_INT; // type is INT value type is INT
                var var32 = ojcDistance.GJK_MAX_ITERS; // type is INT value type is INT
                if ((var31 >= var32)) {
                    __label__ = 524;
                    break $S_87;
                }
                __label__ = 95;
                }
            $M_524_95 : for(;;) switch (__label__) {
                case 95 :
                // NORMAL
                    $S_95 : {
                    // NORMAL
                        local_9_INT = thisRef.simplex.m_count; // type is INT value type is INT
                        local_13_INT = 0; // type is INT value type is INT
                        __label__ = 107;
                        }
                    $L_107 : for (;;) {
                        $S_107 : {
                        // NORMAL
                            var var38 = local_13_INT; // type is INT value type is INT
                            var var39 = local_9_INT; // type is INT value type is INT
                            if ((var38 >= var39)) {
                                __label__ = 150;
                                break $S_107;
                            }
                            __label__ = 114;
                            }
                        for(;;) switch (__label__) {
                            case 150 :
                            // NORMAL
                                $S_150 : {
                                // NORMAL
                                    var var41 = thisRef.simplex.m_count; // type is INT value type is INT
                                    if (var41 < 1 || var41 > 3) {
                                     __label__ = 207;
                                    break $S_150;
                                    }
                                    switch(var41 - 1) {
                                     case 0:
                                         __label__ = 184;
                                    break $S_150;
                                     case 1:
                                         __label__ = 187;
                                    break $S_150;
                                     case 2:
                                         __label__ = 197;
                                    break $S_150;
                                    }
                                    throw 'Illegal jump target!';
                                    }
                                $M_207_197_187_184 : for(;;) switch (__label__) {
                                    case 184 :
                                    // NORMAL
                                        break $M_207_197_187_184;
                                    case 197 :
                                    // NORMAL
                                        thisRef.simplex.VOIDsolve3(thisRef.simplex);
                                        break $M_207_197_187_184;
                                    case 207 :
                                    // NORMAL
                                        $S_207 : {
                                        // NORMAL
                                            var var42 = ojcDistance.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                                            if ((var42 != 0)) {
                                                break $M_207_197_187_184;
                                            }
                                            }
                                        var var130 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                        jlAssertionError.VOIDinit(var130);
                                        throw var130;
                                    case 187 :
                                    // NORMAL
                                        thisRef.simplex.VOIDsolve2(thisRef.simplex);
                                        break $M_207_197_187_184;
                                }
                                $S_221 : {
                                // NORMAL
                                    var var46 = thisRef.simplex.m_count; // type is INT value type is INT
                                    if ((var46 != 3)) {
                                        __label__ = 235;
                                        break $S_221;
                                    }
                                    __label__ = 232;
                                    }
                                for(;;) switch (__label__) {
                                    case 232 :
                                    // NORMAL
                                        __label__ = 524;
                                        continue $M_524_95;
                                    case 235 :
                                    // NORMAL
                                        $S_235 : {
                                        // NORMAL
                                            thisRef.simplex.VOIDgetClosestPointojcVec2(thisRef.simplex,thisRef.closestPoint);
                                            var var50 = thisRef.closestPoint.FLOATlengthSquared(thisRef.closestPoint); // type is FLOAT value type is FLOAT
                                            local_11_FLOAT = var50; // type is FLOAT value type is FLOAT
                                            var var52 = local_11_FLOAT; // type is FLOAT value type is FLOAT
                                            var var53 = local_10_FLOAT; // type is FLOAT value type is FLOAT
                                            if ((var52 < var53)) {
                                                break $S_235;
                                            }
                                            }
                                        $S_263 : {
                                        // NORMAL
                                            local_10_FLOAT = local_11_FLOAT; // type is FLOAT value type is FLOAT
                                            thisRef.simplex.VOIDgetSearchDirectionojcVec2(thisRef.simplex,thisRef.d);
                                            var var60 = thisRef.d.FLOATlengthSquared(thisRef.d); // type is FLOAT value type is FLOAT
                                            if ((var60 >= 1.4210855E-14)) {
                                                __label__ = 294;
                                                break $S_263;
                                            }
                                            __label__ = 291;
                                            }
                                        for(;;) switch (__label__) {
                                            case 291 :
                                            // NORMAL
                                                __label__ = 524;
                                                continue $M_524_95;
                                            case 294 :
                                            // NORMAL
                                                $S_294 : {
                                                // NORMAL
                                                    var var65 = local_8_REFERENCE.data[thisRef.simplex.m_count]; // type is REFERENCE value type is REFERENCE
                                                    local_13_REFERENCE = var65; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@5de48788
                                                    var var68 = local_6_REFERENCE.q; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@79dc53b8
                                                    var var70 = thisRef.d.ojcVec2negateLocal(thisRef.d); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@216ae8ed
                                                    ojcRot.VOIDmulTransUnsafeojcRotojcVec2ojcVec2(var68,var70,thisRef.temp);
                                                    var var72 = local_13_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@5de48788
                                                    var var75 = local_4_REFERENCE.INTgetSupportojcVec2(local_4_REFERENCE,thisRef.temp); // type is INT value type is INT
                                                    var72.indexA = var75;
                                                    var var76 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3dec4324
                                                    var var80 = local_4_REFERENCE.ojcVec2getVertexINT(local_4_REFERENCE,local_13_REFERENCE.indexA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@32e3911b
                                                    ojcTransform.VOIDmulToOutUnsafeojcTransformojcVec2ojcVec2(var76,var80,local_13_REFERENCE.wA);
                                                    var var84 = local_7_REFERENCE.q; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6dd75a31
                                                    var var86 = thisRef.d.ojcVec2negateLocal(thisRef.d); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@768d95a0
                                                    ojcRot.VOIDmulTransUnsafeojcRotojcVec2ojcVec2(var84,var86,thisRef.temp);
                                                    var var88 = local_13_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@5de48788
                                                    var var91 = local_5_REFERENCE.INTgetSupportojcVec2(local_5_REFERENCE,thisRef.temp); // type is INT value type is INT
                                                    var88.indexB = var91;
                                                    var var92 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@35f6ef34
                                                    var var96 = local_5_REFERENCE.ojcVec2getVertexINT(local_5_REFERENCE,local_13_REFERENCE.indexB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@56261c
                                                    ojcTransform.VOIDmulToOutUnsafeojcTransformojcVec2ojcVec2(var92,var96,local_13_REFERENCE.wB);
                                                    var var103 = local_13_REFERENCE.w.ojcVec2setojcVec2(local_13_REFERENCE.w,local_13_REFERENCE.wB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2e130444
                                                    var var106 = var103.ojcVec2subLocalojcVec2(var103,local_13_REFERENCE.wA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7942d565
                                                    local_12_INT = (local_12_INT + 1); // type is INT value type is INT
                                                    var var108 = (ojcDistance.GJK_ITERS + 1); // type is INT value type is INT
                                                    ojcDistance.GJK_ITERS = var108;
                                                    local_14_INT = 0; // type is INT value type is INT
                                                    local_15_INT = 0; // type is INT value type is INT
                                                    __label__ = 451;
                                                    }
                                                $L_451 : for (;;) {
                                                    $S_451 : {
                                                    // NORMAL
                                                        var var113 = local_15_INT; // type is INT value type is INT
                                                        var var114 = local_9_INT; // type is INT value type is INT
                                                        if ((var113 >= var114)) {
                                                            __label__ = 500;
                                                            break $S_451;
                                                        }
                                                        __label__ = 458;
                                                        }
                                                    $M_500_458 : for(;;) switch (__label__) {
                                                        case 458 :
                                                        // NORMAL
                                                            $S_458 : {
                                                            // NORMAL
                                                                var var116 = local_13_REFERENCE.indexA; // type is INT value type is INT
                                                                var var119 = thisRef.saveA.data[local_15_INT]; // type is INT value type is INT
                                                                if ((var116 != var119)) {
                                                                    __label__ = 494;
                                                                    break $S_458;
                                                                }
                                                                __label__ = 473;
                                                                }
                                                            $M_473_494 : for(;;) switch (__label__) {
                                                                case 494 :
                                                                // NORMAL
                                                                    local_15_INT = (local_15_INT + 1); // type is INT value type is INT
                                                                    __label__ = 451;
                                                                    continue $L_451;
                                                                case 473 :
                                                                // NORMAL
                                                                    $S_473 : {
                                                                    // NORMAL
                                                                        var var121 = local_13_REFERENCE.indexB; // type is INT value type is INT
                                                                        var var124 = thisRef.saveB.data[local_15_INT]; // type is INT value type is INT
                                                                        if ((var121 != var124)) {
                                                                            __label__ = 494;
                                                                            continue $M_473_494;
                                                                        }
                                                                        }
                                                                    local_14_INT = 1; // type is INT value type is INT
                                                                    __label__ = 500;
                                                                    continue $M_500_458;
                                                            }
                                                        case 500 :
                                                        // NORMAL
                                                            $S_500 : {
                                                            // NORMAL
                                                                var var126 = local_14_INT; // type is INT value type is INT
                                                                if ((var126 == 0)) {
                                                                    __label__ = 508;
                                                                    break $S_500;
                                                                }
                                                                __label__ = 505;
                                                                }
                                                            for(;;) switch (__label__) {
                                                                case 505 :
                                                                // NORMAL
                                                                    __label__ = 524;
                                                                    continue $M_524_95;
                                                                case 508 :
                                                                // NORMAL
                                                                    var var127 = thisRef.simplex; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@63f86f78
                                                                    var var129 = (var127.m_count + 1); // type is INT value type is INT
                                                                    var127.m_count = var129;
                                                                    __label__ = 87;
                                                                    continue $L_87;
                                                            }
                                                    }
                                                }
                                        }
                                }
                            case 114 :
                            // NORMAL
                                var var193 = thisRef.saveA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@522fd3dd
                                var var194 = local_13_INT; // type is INT value type is INT
                                var var197 = local_8_REFERENCE.data[local_13_INT]; // type is REFERENCE value type is REFERENCE
                                var var198 = var197.indexA; // type is INT value type is INT
                                var193.data[var194] = var198;
                                var var199 = thisRef.saveB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@64a8ccf8
                                var var200 = local_13_INT; // type is INT value type is INT
                                var var203 = local_8_REFERENCE.data[local_13_INT]; // type is REFERENCE value type is REFERENCE
                                var var204 = var203.indexB; // type is INT value type is INT
                                var199.data[var200] = var204;
                                local_13_INT = (local_13_INT + 1); // type is INT value type is INT
                                __label__ = 107;
                                continue $L_107;
                        }
                    }
                case 524 :
                // NORMAL
                    $S_524 : {
                    // NORMAL
                        var var133 = ojcMathUtils.INTmaxINTINT(ojcDistance.GJK_MAX_ITERS,local_12_INT); // type is INT value type is INT
                        ojcDistance.GJK_MAX_ITERS = var133;
                        thisRef.simplex.VOIDgetWitnessPointsojcVec2ojcVec2(thisRef.simplex,output.pointA,output.pointB);
                        var var139 = ojcMathUtils.FLOATdistanceojcVec2ojcVec2(output.pointA,output.pointB); // type is FLOAT value type is FLOAT
                        output.distance = var139;
                        var var140 = local_12_INT; // type is INT value type is INT
                        output.iterations = var140;
                        thisRef.simplex.VOIDwriteCacheojcDistance$SimplexCache(thisRef.simplex,cache);
                        var var142 = input.useRadii; // type is BOOLEAN value type is BOOLEAN
                        if ((var142 == 0)) {
                            return;
                        }
                        }
                    $S_586 : {
                    // NORMAL
                        local_13_FLOAT = local_4_REFERENCE.m_radius; // type is FLOAT value type is FLOAT
                        local_14_FLOAT = local_5_REFERENCE.m_radius; // type is FLOAT value type is FLOAT
                        var var151 = output.distance; // type is FLOAT value type is FLOAT
                        var var154 = (local_13_FLOAT + local_14_FLOAT); // type is FLOAT value type is FLOAT
                        if ((var151 <= var154)) {
                            __label__ = 725;
                            break $S_586;
                        }
                        __label__ = 613;
                        }
                    $M_613_725 : for(;;) switch (__label__) {
                        case 613 :
                        // NORMAL
                            $S_613 : {
                            // NORMAL
                                var var156 = output.distance; // type is FLOAT value type is FLOAT
                                if ((var156 <= 1.1920929E-7)) {
                                    __label__ = 725;
                                    continue $M_613_725;
                                }
                                }
                            var var162 = (output.distance - (local_13_FLOAT + local_14_FLOAT)); // type is FLOAT value type is FLOAT
                            output.distance = var162;
                            var var165 = thisRef.normal.ojcVec2setojcVec2(thisRef.normal,output.pointB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@b2ec4f5
                            var var167 = var165.ojcVec2subLocalojcVec2(var165,output.pointA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2b8df947
                            var var169 = thisRef.normal.FLOATnormalize(thisRef.normal); // type is FLOAT value type is FLOAT
                            var var172 = thisRef.temp.ojcVec2setojcVec2(thisRef.temp,thisRef.normal); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@71066d0
                            var var174 = var172.ojcVec2mulLocalFLOAT(var172,local_13_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@257db5c6
                            var var177 = output.pointA.ojcVec2addLocalojcVec2(output.pointA,thisRef.temp); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5889d4f0
                            var var180 = thisRef.temp.ojcVec2setojcVec2(thisRef.temp,thisRef.normal); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1c0a4967
                            var var182 = var180.ojcVec2mulLocalFLOAT(var180,local_14_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@18288ad0
                            var var185 = output.pointB.ojcVec2subLocalojcVec2(output.pointB,thisRef.temp); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5033df96
                            return;
                        case 725 :
                        // NORMAL
                            var var188 = output.pointA.ojcVec2addLocalojcVec2(output.pointA,output.pointB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@468bbf34
                            var var189 = var188.ojcVec2mulLocalFLOAT(var188,0.5); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@88487f3
                            var var192 = output.pointB.ojcVec2setojcVec2(output.pointB,output.pointA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@54a6f239
                            output.distance = 0.0;
                            return;
                    }
            }
        }
    },

    classInitCheck : function() {
        if (!ojcDistance.__initialized) {
            ojcDistance.__initialized = true;
            var thePrototype = ojcDistance.Create.prototype;
            thePrototype.instanceOf = ojcDistance.instanceOf;
            thePrototype.ClassgetClass = ojcDistance.ClassgetClass;
            thePrototype.VOIDdistanceojcDistanceOutputojcDistance$SimplexCacheojcDistanceInput = ojcDistance.VOIDdistanceojcDistanceOutputojcDistance$SimplexCacheojcDistanceInput;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            ojcDistance.VOIDclinit();
        }
    },

};

var ojcDistance$Simplex = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 56,
    __implementedTypes : [1,56],
    $assertionsDisabled : false, // declared in org.jbox2d.collision.Distance$Simplex

    Create : function() {
        this.this$0 = null; // declared in org.jbox2d.collision.Distance$Simplex
        this.m_v1 = null; // declared in org.jbox2d.collision.Distance$Simplex
        this.m_v2 = null; // declared in org.jbox2d.collision.Distance$Simplex
        this.m_v3 = null; // declared in org.jbox2d.collision.Distance$Simplex
        this.vertices = null; // declared in org.jbox2d.collision.Distance$Simplex
        this.e12 = null; // declared in org.jbox2d.collision.Distance$Simplex
        this.case2 = null; // declared in org.jbox2d.collision.Distance$Simplex
        this.case22 = null; // declared in org.jbox2d.collision.Distance$Simplex
        this.case3 = null; // declared in org.jbox2d.collision.Distance$Simplex
        this.case33 = null; // declared in org.jbox2d.collision.Distance$Simplex
        this.e13 = null; // declared in org.jbox2d.collision.Distance$Simplex
        this.e23 = null; // declared in org.jbox2d.collision.Distance$Simplex
        this.w1 = null; // declared in org.jbox2d.collision.Distance$Simplex
        this.w2 = null; // declared in org.jbox2d.collision.Distance$Simplex
        this.w3 = null; // declared in org.jbox2d.collision.Distance$Simplex
        this.m_count = 0; // declared in org.jbox2d.collision.Distance$Simplex
    },

    instanceOf : function(aType) {
        return ojcDistance$Simplex.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcDistance$Simplex;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcDistance.BOOLEANdesiredAssertionStatus(ojcDistance); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_13_9 : for(;;) switch (__label__) {
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_13_9;
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_13_9;
        }
        ojcDistance$Simplex.$assertionsDisabled = var1;
        return;
    },

    VOIDinitojcDistanceojcDistance$1 : function(thisRef,x0,x1) {
        var __label__ = null;
        ojcDistance$Simplex.VOIDinitojcDistance(thisRef,x0);
        return;
    },

    VOIDinitojcDistance : function(thisRef,p1) {
        var __label__ = null;
        thisRef.this$0 = p1;
        var var0 = new ojcDistance$SimplexVertex.Create(); // type is REFERENCE value type is REFERENCE
        ojcDistance$SimplexVertex.VOIDinitojcDistanceojcDistance$1(var0,thisRef.this$0,null);
        thisRef.m_v1 = var0;
        var var2 = new ojcDistance$SimplexVertex.Create(); // type is REFERENCE value type is REFERENCE
        ojcDistance$SimplexVertex.VOIDinitojcDistanceojcDistance$1(var2,thisRef.this$0,null);
        thisRef.m_v2 = var2;
        var var4 = new ojcDistance$SimplexVertex.Create(); // type is REFERENCE value type is REFERENCE
        ojcDistance$SimplexVertex.VOIDinitojcDistanceojcDistance$1(var4,thisRef.this$0,null);
        thisRef.m_v3 = var4;
        var var6 = bytecoder.newArray(3,null); // type is REFERENCE value type is REFERENCE
        var var7 = thisRef.m_v1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@464df252
        var6.data[0] = var7;
        var var8 = thisRef.m_v2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@300c6f60
        var6.data[1] = var8;
        var var9 = thisRef.m_v3; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@34a14c0d
        var6.data[2] = var9;
        thisRef.vertices = var6;
        var var10 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var10);
        thisRef.e12 = var10;
        var var11 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var11);
        thisRef.case2 = var11;
        var var12 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var12);
        thisRef.case22 = var12;
        var var13 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var13);
        thisRef.case3 = var13;
        var var14 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var14);
        thisRef.case33 = var14;
        var var15 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var15);
        thisRef.e13 = var15;
        var var16 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var16);
        thisRef.e23 = var16;
        var var17 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var17);
        thisRef.w1 = var17;
        var var18 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var18);
        thisRef.w2 = var18;
        var var19 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var19);
        thisRef.w3 = var19;
        return;
    },

    VOIDreadCacheojcDistance$SimplexCacheojcDistance$DistanceProxyojcTransformojcDistance$DistanceProxyojcTransform : function(thisRef,cache,proxyA,transformA,proxyB,transformB) {
        var local_7_FLOAT = null; // type is FLOAT # of inits = 1
        var local_6_INT = null; // type is INT # of inits = 3
        var local_6_FLOAT = null; // type is FLOAT # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcDistance$Simplex.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 22;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_6_22 : for(;;) switch (__label__) {
            case 22 :
            // NORMAL
                $S_22 : {
                // NORMAL
                    var var2 = cache.count; // type is INT value type is INT
                    thisRef.m_count = var2;
                    local_6_INT = 0; // type is INT value type is INT
                    __label__ = 33;
                    }
                $L_33 : for (;;) {
                    $S_33 : {
                    // NORMAL
                        var var5 = local_6_INT; // type is INT value type is INT
                        var var6 = thisRef.m_count; // type is INT value type is INT
                        if ((var5 >= var6)) {
                            __label__ = 155;
                            break $S_33;
                        }
                        __label__ = 42;
                        }
                    for(;;) switch (__label__) {
                        case 42 :
                        // NORMAL
                            var var50 = thisRef.vertices.data[local_6_INT]; // type is REFERENCE value type is REFERENCE
                            var local_7_REFERENCE = var50; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@2d864c49
                            var var51 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3a1f887b
                            var var54 = cache.indexA.data[local_6_INT]; // type is INT value type is INT
                            var51.indexA = var54;
                            var var55 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3a1f887b
                            var var58 = cache.indexB.data[local_6_INT]; // type is INT value type is INT
                            var55.indexB = var58;
                            var var61 = proxyA.ojcVec2getVertexINT(proxyA,local_7_REFERENCE.indexA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1e0d7b56
                            var local_8_REFERENCE = var61; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@33fb1ec3
                            var var64 = proxyB.ojcVec2getVertexINT(proxyB,local_7_REFERENCE.indexB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2c80e8f1
                            var local_9_REFERENCE = var64; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6a9ae14a
                            ojcTransform.VOIDmulToOutUnsafeojcTransformojcVec2ojcVec2(transformA,local_8_REFERENCE,local_7_REFERENCE.wA);
                            ojcTransform.VOIDmulToOutUnsafeojcTransformojcVec2ojcVec2(transformB,local_9_REFERENCE,local_7_REFERENCE.wB);
                            var var76 = local_7_REFERENCE.w.ojcVec2setojcVec2(local_7_REFERENCE.w,local_7_REFERENCE.wB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1f38f084
                            var var79 = var76.ojcVec2subLocalojcVec2(var76,local_7_REFERENCE.wA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@745ef8a6
                            var var80 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3a1f887b
                            var80.a = 0.0;
                            local_6_INT = (local_6_INT + 1); // type is INT value type is INT
                            __label__ = 33;
                            continue $L_33;
                        case 155 :
                        // NORMAL
                            $S_155 : {
                            // NORMAL
                                var var7 = thisRef.m_count; // type is INT value type is INT
                                if ((var7 <= 1)) {
                                    __label__ = 209;
                                    break $S_155;
                                }
                                __label__ = 163;
                                }
                            $M_209_163 : for(;;) switch (__label__) {
                                case 209 :
                                // NORMAL
                                    $S_209 : {
                                    // NORMAL
                                        var var24 = thisRef.m_count; // type is INT value type is INT
                                        if ((var24 != 0)) {
                                            return;
                                        }
                                        }
                                    var var26 = thisRef.vertices.data[0]; // type is REFERENCE value type is REFERENCE
                                    var local_6_REFERENCE = var26; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@5fb251bc
                                    var var28 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@5fb251bc
                                    var28.indexA = 0;
                                    var var29 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@5fb251bc
                                    var29.indexB = 0;
                                    var var30 = proxyA.ojcVec2getVertexINT(proxyA,0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@629f7bb1
                                    var local_7_REFERENCE = var30; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3a1f887b
                                    var var32 = proxyB.ojcVec2getVertexINT(proxyB,0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3afb0bb6
                                    var local_8_REFERENCE = var32; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@39e35f87
                                    ojcTransform.VOIDmulToOutUnsafeojcTransformojcVec2ojcVec2(transformA,local_7_REFERENCE,local_6_REFERENCE.wA);
                                    ojcTransform.VOIDmulToOutUnsafeojcTransformojcVec2ojcVec2(transformB,local_8_REFERENCE,local_6_REFERENCE.wB);
                                    var var44 = local_6_REFERENCE.w.ojcVec2setojcVec2(local_6_REFERENCE.w,local_6_REFERENCE.wB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7411c6b6
                                    var var47 = var44.ojcVec2subLocalojcVec2(var44,local_6_REFERENCE.wA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6d4a7976
                                    thisRef.m_count = 1;
                                    return;
                                case 163 :
                                // NORMAL
                                    $S_163 : {
                                    // NORMAL
                                        local_6_FLOAT = cache.metric; // type is FLOAT value type is FLOAT
                                        var var11 = thisRef.FLOATgetMetric(thisRef); // type is FLOAT value type is FLOAT
                                        local_7_FLOAT = var11; // type is FLOAT value type is FLOAT
                                        var var14 = local_7_FLOAT; // type is FLOAT value type is FLOAT
                                        var var16 = (0.5 * local_6_FLOAT); // type is FLOAT value type is FLOAT
                                        if ((var14 < var16)) {
                                            __label__ = 204;
                                            break $S_163;
                                        }
                                        __label__ = 186;
                                        }
                                    $M_204_186 : for(;;) switch (__label__) {
                                        case 204 :
                                        // NORMAL
                                            thisRef.m_count = 0;
                                            __label__ = 209;
                                            continue $M_209_163;
                                        case 186 :
                                        // NORMAL
                                            $S_186 : {
                                            // NORMAL
                                                var var19 = (2.0 * local_6_FLOAT); // type is FLOAT value type is FLOAT
                                                var var20 = local_7_FLOAT; // type is FLOAT value type is FLOAT
                                                if ((var19 < var20)) {
                                                    __label__ = 204;
                                                    continue $M_204_186;
                                                }
                                                }
                                            var var22 = local_7_FLOAT; // type is FLOAT value type is FLOAT
                                            if ((var22 >= 1.1920929E-7)) {
                                                __label__ = 209;
                                                continue $M_209_163;
                                            }
                                            __label__ = 204;
                                            continue $M_204_186;
                                    }
                            }
                    }
                }
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    var var1 = cache.count; // type is INT value type is INT
                    if ((var1 <= 3)) {
                        __label__ = 22;
                        continue $M_6_22;
                    }
                    }
                var var81 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var81);
                throw var81;
        }
    },

    FLOATgetMetric : function(thisRef) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.m_count; // type is INT value type is INT
            if (var0 < 0 || var0 > 3) {
             __label__ = 134;
            break $S_0;
            }
            switch(var0 - 0) {
             case 0:
                 __label__ = 36;
            break $S_0;
             case 1:
                 return 0.0;
             case 2:
                 __label__ = 54;
            break $S_0;
             case 3:
                 __label__ = 72;
            break $S_0;
            }
            throw 'Illegal jump target!';
            }
        for(;;) switch (__label__) {
            case 36 :
            // NORMAL
                $S_36 : {
                // NORMAL
                    var var25 = ojcDistance$Simplex.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                    if ((var25 != 0)) {
                        return 0.0;
                    }
                    }
                var var26 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var26);
                throw var26;
            case 72 :
            // NORMAL
                var var4 = thisRef.case3.ojcVec2setojcVec2(thisRef.case3,thisRef.m_v2.w); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5c16010e
                var var7 = var4.ojcVec2subLocalojcVec2(var4,thisRef.m_v1.w); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3275861
                var var11 = thisRef.case33.ojcVec2setojcVec2(thisRef.case33,thisRef.m_v3.w); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@227baad8
                var var14 = var11.ojcVec2subLocalojcVec2(var11,thisRef.m_v1.w); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@796ae58d
                var var17 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.case3,thisRef.case33); // type is FLOAT value type is FLOAT
                return var17;
            case 54 :
            // NORMAL
                var var23 = ojcMathUtils.FLOATdistanceojcVec2ojcVec2(thisRef.m_v1.w,thisRef.m_v2.w); // type is FLOAT value type is FLOAT
                return var23;
            case 134 :
            // NORMAL
                $S_134 : {
                // NORMAL
                    var var18 = ojcDistance$Simplex.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                    if ((var18 != 0)) {
                        return 0.0;
                    }
                    }
                var var24 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var24);
                throw var24;
        }
    },

    VOIDgetClosestPointojcVec2 : function(thisRef,out) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.m_count; // type is INT value type is INT
            if (var0 < 0 || var0 > 3) {
             __label__ = 140;
            break $S_0;
            }
            switch(var0 - 0) {
             case 0:
                 __label__ = 36;
            break $S_0;
             case 1:
                 __label__ = 55;
            break $S_0;
             case 2:
                 __label__ = 68;
            break $S_0;
             case 3:
                 __label__ = 135;
            break $S_0;
            }
            throw 'Illegal jump target!';
            }
        for(;;) switch (__label__) {
            case 140 :
            // NORMAL
                $S_140 : {
                // NORMAL
                    var var4 = ojcDistance$Simplex.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                    if ((var4 != 0)) {
                        __label__ = 154;
                        break $S_140;
                    }
                    __label__ = 146;
                    }
                for(;;) switch (__label__) {
                    case 146 :
                    // NORMAL
                        var var5 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                        jlAssertionError.VOIDinit(var5);
                        throw var5;
                    case 154 :
                    // NORMAL
                        out.VOIDsetZero(out);
                        return;
                }
            case 36 :
            // NORMAL
                $S_36 : {
                // NORMAL
                    var var6 = ojcDistance$Simplex.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                    if ((var6 != 0)) {
                        __label__ = 50;
                        break $S_36;
                    }
                    __label__ = 42;
                    }
                for(;;) switch (__label__) {
                    case 42 :
                    // NORMAL
                        var var7 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                        jlAssertionError.VOIDinit(var7);
                        throw var7;
                    case 50 :
                    // NORMAL
                        out.VOIDsetZero(out);
                        return;
                }
            case 135 :
            // NORMAL
                out.VOIDsetZero(out);
                return;
            case 68 :
            // NORMAL
                var var11 = thisRef.case22.ojcVec2setojcVec2(thisRef.case22,thisRef.m_v2.w); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@46851d1f
                var var14 = var11.ojcVec2mulLocalFLOAT(var11,thisRef.m_v2.a); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1462fffd
                var var18 = thisRef.case2.ojcVec2setojcVec2(thisRef.case2,thisRef.m_v1.w); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@28450969
                var var21 = var18.ojcVec2mulLocalFLOAT(var18,thisRef.m_v1.a); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@73ff10eb
                var var23 = var21.ojcVec2addLocalojcVec2(var21,thisRef.case22); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1d7c866e
                var var25 = out.ojcVec2setojcVec2(out,thisRef.case2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1ee20f2b
                return;
            case 55 :
            // NORMAL
                var var3 = out.ojcVec2setojcVec2(out,thisRef.m_v1.w); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1e6c43df
                return;
        }
    },

    VOIDsolve2 : function(thisRef) {
        var local_4_FLOAT = null; // type is FLOAT # of inits = 1
        var local_3_FLOAT = null; // type is FLOAT # of inits = 1
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var local_1_REFERENCE = thisRef.m_v1.w; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@254fafdc
            local_2_REFERENCE = thisRef.m_v2.w; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4a0abb5d
            var var8 = thisRef.e12.ojcVec2setojcVec2(thisRef.e12,local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@34734da3
            var var10 = var8.ojcVec2subLocalojcVec2(var8,local_1_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@309cd983
            var var13 = ojcVec2.FLOATdotojcVec2ojcVec2(local_1_REFERENCE,thisRef.e12); // type is FLOAT value type is FLOAT
            local_3_FLOAT = (-var13); // type is FLOAT value type is FLOAT
            var var17 = local_3_FLOAT; // type is FLOAT value type is FLOAT
            if ((var17 > 0.0)) {
                __label__ = 59;
                break $S_0;
            }
            __label__ = 45;
            }
        for(;;) switch (__label__) {
            case 59 :
            // NORMAL
                $S_59 : {
                // NORMAL
                    var var22 = ojcVec2.FLOATdotojcVec2ojcVec2(local_2_REFERENCE,thisRef.e12); // type is FLOAT value type is FLOAT
                    local_4_FLOAT = var22; // type is FLOAT value type is FLOAT
                    var var25 = local_4_FLOAT; // type is FLOAT value type is FLOAT
                    if ((var25 > 0.0)) {
                        __label__ = 101;
                        break $S_59;
                    }
                    __label__ = 76;
                    }
                for(;;) switch (__label__) {
                    case 101 :
                    // NORMAL
                        var local_5_FLOAT = (1.0 / (local_4_FLOAT + local_3_FLOAT)); // type is FLOAT value type is FLOAT
                        var var36 = thisRef.m_v1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@68f5a103
                        var var39 = (local_4_FLOAT * local_5_FLOAT); // type is FLOAT value type is FLOAT
                        var36.a = var39;
                        var var40 = thisRef.m_v2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@773a2f13
                        var var43 = (local_3_FLOAT * local_5_FLOAT); // type is FLOAT value type is FLOAT
                        var40.a = var43;
                        thisRef.m_count = 2;
                        return;
                    case 76 :
                    // NORMAL
                        var var27 = thisRef.m_v2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@590a6a02
                        var27.a = 1.0;
                        thisRef.m_count = 1;
                        thisRef.m_v1.VOIDsetojcDistance$SimplexVertex(thisRef.m_v1,thisRef.m_v2);
                        return;
                }
            case 45 :
            // NORMAL
                var var19 = thisRef.m_v1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@f8cf061
                var19.a = 1.0;
                thisRef.m_count = 1;
                return;
        }
    },

    VOIDsolve3 : function(thisRef) {
        var local_16_FLOAT = null; // type is FLOAT # of inits = 1
        var local_12_FLOAT = null; // type is FLOAT # of inits = 1
        var local_11_FLOAT = null; // type is FLOAT # of inits = 1
        var local_4_FLOAT = null; // type is FLOAT # of inits = 1
        var local_8_FLOAT = null; // type is FLOAT # of inits = 1
        var local_7_FLOAT = null; // type is FLOAT # of inits = 1
        var local_15_FLOAT = null; // type is FLOAT # of inits = 1
        var local_14_FLOAT = null; // type is FLOAT # of inits = 1
        var local_3_FLOAT = null; // type is FLOAT # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var3 = thisRef.w1.ojcVec2setojcVec2(thisRef.w1,thisRef.m_v1.w); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7ad5b48d
            var var7 = thisRef.w2.ojcVec2setojcVec2(thisRef.w2,thisRef.m_v2.w); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1d7da856
            var var11 = thisRef.w3.ojcVec2setojcVec2(thisRef.w3,thisRef.m_v3.w); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3abee3fe
            var var14 = thisRef.e12.ojcVec2setojcVec2(thisRef.e12,thisRef.w2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1aadb0cd
            var var16 = var14.ojcVec2subLocalojcVec2(var14,thisRef.w1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4d0b1ec9
            var var19 = ojcVec2.FLOATdotojcVec2ojcVec2(thisRef.w1,thisRef.e12); // type is FLOAT value type is FLOAT
            var local_1_FLOAT = var19; // type is FLOAT value type is FLOAT
            var var24 = ojcVec2.FLOATdotojcVec2ojcVec2(thisRef.w2,thisRef.e12); // type is FLOAT value type is FLOAT
            var local_2_FLOAT = var24; // type is FLOAT value type is FLOAT
            local_3_FLOAT = local_2_FLOAT; // type is FLOAT value type is FLOAT
            local_4_FLOAT = (-local_1_FLOAT); // type is FLOAT value type is FLOAT
            var var36 = thisRef.e13.ojcVec2setojcVec2(thisRef.e13,thisRef.w3); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3dc42026
            var var38 = var36.ojcVec2subLocalojcVec2(var36,thisRef.w1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@70a89573
            var var41 = ojcVec2.FLOATdotojcVec2ojcVec2(thisRef.w1,thisRef.e13); // type is FLOAT value type is FLOAT
            var local_5_FLOAT = var41; // type is FLOAT value type is FLOAT
            var var46 = ojcVec2.FLOATdotojcVec2ojcVec2(thisRef.w3,thisRef.e13); // type is FLOAT value type is FLOAT
            var local_6_FLOAT = var46; // type is FLOAT value type is FLOAT
            local_7_FLOAT = local_6_FLOAT; // type is FLOAT value type is FLOAT
            local_8_FLOAT = (-local_5_FLOAT); // type is FLOAT value type is FLOAT
            var var58 = thisRef.e23.ojcVec2setojcVec2(thisRef.e23,thisRef.w3); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7f47873
            var var60 = var58.ojcVec2subLocalojcVec2(var58,thisRef.w2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@129cc312
            var var63 = ojcVec2.FLOATdotojcVec2ojcVec2(thisRef.w2,thisRef.e23); // type is FLOAT value type is FLOAT
            var local_9_FLOAT = var63; // type is FLOAT value type is FLOAT
            var var68 = ojcVec2.FLOATdotojcVec2ojcVec2(thisRef.w3,thisRef.e23); // type is FLOAT value type is FLOAT
            var local_10_FLOAT = var68; // type is FLOAT value type is FLOAT
            local_11_FLOAT = local_10_FLOAT; // type is FLOAT value type is FLOAT
            local_12_FLOAT = (-local_9_FLOAT); // type is FLOAT value type is FLOAT
            var var80 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.e12,thisRef.e13); // type is FLOAT value type is FLOAT
            var local_13_FLOAT = var80; // type is FLOAT value type is FLOAT
            var var83 = local_13_FLOAT; // type is FLOAT value type is FLOAT
            var var86 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.w2,thisRef.w3); // type is FLOAT value type is FLOAT
            local_14_FLOAT = (var83 * var86); // type is FLOAT value type is FLOAT
            var var90 = local_13_FLOAT; // type is FLOAT value type is FLOAT
            var var93 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.w3,thisRef.w1); // type is FLOAT value type is FLOAT
            local_15_FLOAT = (var90 * var93); // type is FLOAT value type is FLOAT
            var var97 = local_13_FLOAT; // type is FLOAT value type is FLOAT
            var var100 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.w1,thisRef.w2); // type is FLOAT value type is FLOAT
            local_16_FLOAT = (var97 * var100); // type is FLOAT value type is FLOAT
            var var104 = local_4_FLOAT; // type is FLOAT value type is FLOAT
            if ((var104 > 0.0)) {
                __label__ = 291;
                break $S_0;
            }
            __label__ = 270;
            }
        $M_270_291 : for(;;) switch (__label__) {
            case 291 :
            // NORMAL
                $S_291 : {
                // NORMAL
                    var var108 = local_3_FLOAT; // type is FLOAT value type is FLOAT
                    if ((var108 <= 0.0)) {
                        __label__ = 348;
                        break $S_291;
                    }
                    __label__ = 297;
                    }
                $M_348_297 : for(;;) switch (__label__) {
                    case 348 :
                    // NORMAL
                        $S_348 : {
                        // NORMAL
                            var var128 = local_7_FLOAT; // type is FLOAT value type is FLOAT
                            if ((var128 <= 0.0)) {
                                __label__ = 419;
                                break $S_348;
                            }
                            __label__ = 355;
                            }
                        $M_355_419 : for(;;) switch (__label__) {
                            case 419 :
                            // NORMAL
                                $S_419 : {
                                // NORMAL
                                    var var134 = local_3_FLOAT; // type is FLOAT value type is FLOAT
                                    if ((var134 > 0.0)) {
                                        __label__ = 457;
                                        break $S_419;
                                    }
                                    __label__ = 425;
                                    }
                                $M_457_425 : for(;;) switch (__label__) {
                                    case 425 :
                                    // NORMAL
                                        $S_425 : {
                                        // NORMAL
                                            var var136 = local_12_FLOAT; // type is FLOAT value type is FLOAT
                                            if ((var136 > 0.0)) {
                                                __label__ = 457;
                                                continue $M_457_425;
                                            }
                                            }
                                        var var167 = thisRef.m_v2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@e451477
                                        var167.a = 1.0;
                                        thisRef.m_count = 1;
                                        thisRef.m_v1.VOIDsetojcDistance$SimplexVertex(thisRef.m_v1,thisRef.m_v2);
                                        return;
                                    case 457 :
                                    // NORMAL
                                        $S_457 : {
                                        // NORMAL
                                            var var138 = local_7_FLOAT; // type is FLOAT value type is FLOAT
                                            if ((var138 > 0.0)) {
                                                __label__ = 496;
                                                break $S_457;
                                            }
                                            __label__ = 464;
                                            }
                                        $M_464_496 : for(;;) switch (__label__) {
                                            case 464 :
                                            // NORMAL
                                                $S_464 : {
                                                // NORMAL
                                                    var var140 = local_11_FLOAT; // type is FLOAT value type is FLOAT
                                                    if ((var140 > 0.0)) {
                                                        __label__ = 496;
                                                        continue $M_464_496;
                                                    }
                                                    }
                                                var var201 = thisRef.m_v3; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3af21bc1
                                                var201.a = 1.0;
                                                thisRef.m_count = 1;
                                                thisRef.m_v1.VOIDsetojcDistance$SimplexVertex(thisRef.m_v1,thisRef.m_v3);
                                                return;
                                            case 496 :
                                            // NORMAL
                                                $S_496 : {
                                                // NORMAL
                                                    var var142 = local_11_FLOAT; // type is FLOAT value type is FLOAT
                                                    if ((var142 <= 0.0)) {
                                                        __label__ = 567;
                                                        break $S_496;
                                                    }
                                                    __label__ = 503;
                                                    }
                                                $M_567_503 : for(;;) switch (__label__) {
                                                    case 503 :
                                                    // NORMAL
                                                        $S_503 : {
                                                        // NORMAL
                                                            var var144 = local_12_FLOAT; // type is FLOAT value type is FLOAT
                                                            if ((var144 <= 0.0)) {
                                                                __label__ = 567;
                                                                continue $M_567_503;
                                                            }
                                                            }
                                                        $S_510 : {
                                                        // NORMAL
                                                            var var146 = local_14_FLOAT; // type is FLOAT value type is FLOAT
                                                            if ((var146 > 0.0)) {
                                                                __label__ = 567;
                                                                continue $M_567_503;
                                                            }
                                                            }
                                                        var local_17_FLOAT = (1.0 / (local_11_FLOAT + local_12_FLOAT)); // type is FLOAT value type is FLOAT
                                                        var var175 = thisRef.m_v2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1ee1db0c
                                                        var var178 = (local_11_FLOAT * local_17_FLOAT); // type is FLOAT value type is FLOAT
                                                        var175.a = var178;
                                                        var var179 = thisRef.m_v3; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6a911f91
                                                        var var182 = (local_12_FLOAT * local_17_FLOAT); // type is FLOAT value type is FLOAT
                                                        var179.a = var182;
                                                        thisRef.m_count = 2;
                                                        thisRef.m_v1.VOIDsetojcDistance$SimplexVertex(thisRef.m_v1,thisRef.m_v3);
                                                        return;
                                                    case 567 :
                                                    // NORMAL
                                                        var local_17_FLOAT = (1.0 / ((local_14_FLOAT + local_15_FLOAT) + local_16_FLOAT)); // type is FLOAT value type is FLOAT
                                                        var var155 = thisRef.m_v1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4c515818
                                                        var var158 = (local_14_FLOAT * local_17_FLOAT); // type is FLOAT value type is FLOAT
                                                        var155.a = var158;
                                                        var var159 = thisRef.m_v2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@66576e40
                                                        var var162 = (local_15_FLOAT * local_17_FLOAT); // type is FLOAT value type is FLOAT
                                                        var159.a = var162;
                                                        var var163 = thisRef.m_v3; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@76fee03d
                                                        var var166 = (local_16_FLOAT * local_17_FLOAT); // type is FLOAT value type is FLOAT
                                                        var163.a = var166;
                                                        thisRef.m_count = 3;
                                                        return;
                                                }
                                        }
                                }
                            case 355 :
                            // NORMAL
                                $S_355 : {
                                // NORMAL
                                    var var130 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                                    if ((var130 <= 0.0)) {
                                        __label__ = 419;
                                        continue $M_355_419;
                                    }
                                    }
                                $S_362 : {
                                // NORMAL
                                    var var132 = local_15_FLOAT; // type is FLOAT value type is FLOAT
                                    if ((var132 > 0.0)) {
                                        __label__ = 419;
                                        continue $M_355_419;
                                    }
                                    }
                                var local_17_FLOAT = (1.0 / (local_7_FLOAT + local_8_FLOAT)); // type is FLOAT value type is FLOAT
                                var var191 = thisRef.m_v1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@147104e4
                                var var194 = (local_7_FLOAT * local_17_FLOAT); // type is FLOAT value type is FLOAT
                                var191.a = var194;
                                var var195 = thisRef.m_v3; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@52260fea
                                var var198 = (local_8_FLOAT * local_17_FLOAT); // type is FLOAT value type is FLOAT
                                var195.a = var198;
                                thisRef.m_count = 2;
                                thisRef.m_v2.VOIDsetojcDistance$SimplexVertex(thisRef.m_v2,thisRef.m_v3);
                                return;
                        }
                    case 297 :
                    // NORMAL
                        $S_297 : {
                        // NORMAL
                            var var110 = local_4_FLOAT; // type is FLOAT value type is FLOAT
                            if ((var110 <= 0.0)) {
                                __label__ = 348;
                                continue $M_348_297;
                            }
                            }
                        $S_304 : {
                        // NORMAL
                            var var112 = local_16_FLOAT; // type is FLOAT value type is FLOAT
                            if ((var112 > 0.0)) {
                                __label__ = 348;
                                continue $M_348_297;
                            }
                            }
                        var local_17_FLOAT = (1.0 / (local_3_FLOAT + local_4_FLOAT)); // type is FLOAT value type is FLOAT
                        var var120 = thisRef.m_v1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@fde5e80
                        var var123 = (local_3_FLOAT * local_17_FLOAT); // type is FLOAT value type is FLOAT
                        var120.a = var123;
                        var var124 = thisRef.m_v2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@e20a84e
                        var var127 = (local_4_FLOAT * local_17_FLOAT); // type is FLOAT value type is FLOAT
                        var124.a = var127;
                        thisRef.m_count = 2;
                        return;
                }
            case 270 :
            // NORMAL
                $S_270 : {
                // NORMAL
                    var var106 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                    if ((var106 > 0.0)) {
                        __label__ = 291;
                        continue $M_270_291;
                    }
                    }
                var var185 = thisRef.m_v1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@12eadb4a
                var185.a = 1.0;
                thisRef.m_count = 1;
                return;
        }
    },

    VOIDgetSearchDirectionojcVec2 : function(thisRef,out) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.m_count; // type is INT value type is INT
            switch(var0) {
             case 1:
                 __label__ = 32;
            break $S_0;
             case 2:
                 __label__ = 48;
            break $S_0;
            }
            __label__ = 123;
            break $S_0;
            }
        for(;;) switch (__label__) {
            case 48 :
            // NORMAL
                $S_48 : {
                // NORMAL
                    var var10 = thisRef.e12.ojcVec2setojcVec2(thisRef.e12,thisRef.m_v2.w); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4e3f638b
                    var var13 = var10.ojcVec2subLocalojcVec2(var10,thisRef.m_v1.w); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4fceb046
                    var var16 = out.ojcVec2setojcVec2(out,thisRef.m_v1.w); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1a477bcb
                    var var17 = var16.ojcVec2negateLocal(var16); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@23c4b3bf
                    var var19 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.e12,out); // type is FLOAT value type is FLOAT
                    var local_2_FLOAT = var19; // type is FLOAT value type is FLOAT
                    var var22 = local_2_FLOAT; // type is FLOAT value type is FLOAT
                    if ((var22 <= 0.0)) {
                        __label__ = 113;
                        break $S_48;
                    }
                    __label__ = 103;
                    }
                for(;;) switch (__label__) {
                    case 113 :
                    // NORMAL
                        ojcVec2.VOIDcrossToOutUnsafeojcVec2FLOATojcVec2(thisRef.e12,1.0,out);
                        return;
                    case 103 :
                    // NORMAL
                        ojcVec2.VOIDcrossToOutUnsafeFLOATojcVec2ojcVec2(1.0,thisRef.e12,out);
                        return;
                }
            case 32 :
            // NORMAL
                var var4 = out.ojcVec2setojcVec2(out,thisRef.m_v1.w); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1652af77
                var var5 = var4.ojcVec2negateLocal(var4); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2ca4717b
                return;
            case 123 :
            // NORMAL
                $S_123 : {
                // NORMAL
                    var var1 = ojcDistance$Simplex.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                    if ((var1 != 0)) {
                        __label__ = 137;
                        break $S_123;
                    }
                    __label__ = 129;
                    }
                for(;;) switch (__label__) {
                    case 137 :
                    // NORMAL
                        out.VOIDsetZero(out);
                        return;
                    case 129 :
                    // NORMAL
                        var var6 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                        jlAssertionError.VOIDinit(var6);
                        throw var6;
                }
        }
    },

    VOIDgetWitnessPointsojcVec2ojcVec2 : function(thisRef,pA,pB) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.m_count; // type is INT value type is INT
            if (var0 < 0 || var0 > 3) {
             __label__ = 285;
            break $S_0;
            }
            switch(var0 - 0) {
             case 0:
                 __label__ = 36;
            break $S_0;
             case 1:
                 __label__ = 50;
            break $S_0;
             case 2:
                 __label__ = 77;
            break $S_0;
             case 3:
                 __label__ = 188;
            break $S_0;
            }
            throw 'Illegal jump target!';
            }
        for(;;) switch (__label__) {
            case 188 :
            // NORMAL
                var var13 = pA.ojcVec2setojcVec2(pA,thisRef.m_v1.wA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@79c9c535
                var var16 = var13.ojcVec2mulLocalFLOAT(var13,thisRef.m_v1.a); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3022935c
                var var20 = thisRef.case3.ojcVec2setojcVec2(thisRef.case3,thisRef.m_v2.wA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@52419ebd
                var var23 = var20.ojcVec2mulLocalFLOAT(var20,thisRef.m_v2.a); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@26b75a02
                var var27 = thisRef.case33.ojcVec2setojcVec2(thisRef.case33,thisRef.m_v3.wA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1160c38c
                var var30 = var27.ojcVec2mulLocalFLOAT(var27,thisRef.m_v3.a); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@357c1a8f
                var var32 = pA.ojcVec2addLocalojcVec2(pA,thisRef.case3); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6b96deeb
                var var34 = var32.ojcVec2addLocalojcVec2(var32,thisRef.case33); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@77edfed1
                var var35 = pB.ojcVec2setojcVec2(pB,pA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@60062f03
                return;
            case 77 :
            // NORMAL
                var var39 = thisRef.case2.ojcVec2setojcVec2(thisRef.case2,thisRef.m_v1.wA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@357bf9ee
                var var42 = var39.ojcVec2mulLocalFLOAT(var39,thisRef.m_v1.a); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@68c7182c
                var var45 = pA.ojcVec2setojcVec2(pA,thisRef.m_v2.wA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@70c46893
                var var48 = var45.ojcVec2mulLocalFLOAT(var45,thisRef.m_v2.a); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@216b3fbf
                var var50 = var48.ojcVec2addLocalojcVec2(var48,thisRef.case2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4b3506f5
                var var54 = thisRef.case2.ojcVec2setojcVec2(thisRef.case2,thisRef.m_v1.wB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1be361c7
                var var57 = var54.ojcVec2mulLocalFLOAT(var54,thisRef.m_v1.a); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@48b012d8
                var var60 = pB.ojcVec2setojcVec2(pB,thisRef.m_v2.wB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@305e5ab6
                var var63 = var60.ojcVec2mulLocalFLOAT(var60,thisRef.m_v2.a); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@533fe0e6
                var var65 = var63.ojcVec2addLocalojcVec2(var63,thisRef.case2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@53d24e1f
                return;
            case 36 :
            // NORMAL
                $S_36 : {
                // NORMAL
                    var var1 = ojcDistance$Simplex.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                    if ((var1 != 0)) {
                        return;
                    }
                    }
                var var2 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var2);
                throw var2;
            case 50 :
            // NORMAL
                var var7 = pA.ojcVec2setojcVec2(pA,thisRef.m_v1.wA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1bbca06f
                var var10 = pB.ojcVec2setojcVec2(pB,thisRef.m_v1.wB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5975d244
                return;
            case 285 :
            // NORMAL
                $S_285 : {
                // NORMAL
                    var var3 = ojcDistance$Simplex.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                    if ((var3 != 0)) {
                        return;
                    }
                    }
                var var4 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var4);
                throw var4;
        }
    },

    VOIDwriteCacheojcDistance$SimplexCache : function(thisRef,cache) {
        var local_2_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.FLOATgetMetric(thisRef); // type is FLOAT value type is FLOAT
            cache.metric = var0;
            var var1 = thisRef.m_count; // type is INT value type is INT
            cache.count = var1;
            local_2_INT = 0; // type is INT value type is INT
            __label__ = 18;
            }
        $L_18 : for (;;) {
            $S_18 : {
            // NORMAL
                var var4 = local_2_INT; // type is INT value type is INT
                var var5 = thisRef.m_count; // type is INT value type is INT
                if ((var4 >= var5)) {
                    return;
                }
                }
            var var6 = cache.indexA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@26cb03ff
            var var7 = local_2_INT; // type is INT value type is INT
            var var10 = thisRef.vertices.data[local_2_INT]; // type is REFERENCE value type is REFERENCE
            var var11 = var10.indexA; // type is INT value type is INT
            var6.data[var7] = var11;
            var var12 = cache.indexB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@237527f3
            var var13 = local_2_INT; // type is INT value type is INT
            var var16 = thisRef.vertices.data[local_2_INT]; // type is REFERENCE value type is REFERENCE
            var var17 = var16.indexB; // type is INT value type is INT
            var12.data[var13] = var17;
            local_2_INT = (local_2_INT + 1); // type is INT value type is INT
            __label__ = 18;
            continue $L_18;
        }
    },

    classInitCheck : function() {
        if (!ojcDistance$Simplex.__initialized) {
            ojcDistance$Simplex.__initialized = true;
            var thePrototype = ojcDistance$Simplex.Create.prototype;
            thePrototype.instanceOf = ojcDistance$Simplex.instanceOf;
            thePrototype.ClassgetClass = ojcDistance$Simplex.ClassgetClass;
            thePrototype.VOIDwriteCacheojcDistance$SimplexCache = ojcDistance$Simplex.VOIDwriteCacheojcDistance$SimplexCache;
            thePrototype.VOIDgetWitnessPointsojcVec2ojcVec2 = ojcDistance$Simplex.VOIDgetWitnessPointsojcVec2ojcVec2;
            thePrototype.VOIDgetSearchDirectionojcVec2 = ojcDistance$Simplex.VOIDgetSearchDirectionojcVec2;
            thePrototype.VOIDsolve3 = ojcDistance$Simplex.VOIDsolve3;
            thePrototype.VOIDsolve2 = ojcDistance$Simplex.VOIDsolve2;
            thePrototype.VOIDgetClosestPointojcVec2 = ojcDistance$Simplex.VOIDgetClosestPointojcVec2;
            thePrototype.FLOATgetMetric = ojcDistance$Simplex.FLOATgetMetric;
            thePrototype.VOIDreadCacheojcDistance$SimplexCacheojcDistance$DistanceProxyojcTransformojcDistance$DistanceProxyojcTransform = ojcDistance$Simplex.VOIDreadCacheojcDistance$SimplexCacheojcDistance$DistanceProxyojcTransformojcDistance$DistanceProxyojcTransform;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            ojcDistance$Simplex.VOIDclinit();
        }
    },

};

var ojcDistance$1 = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 57,
    __implementedTypes : [1,57],
    $SwitchMap$org$jbox2d$collision$shapes$ShapeType : null, // declared in org.jbox2d.collision.Distance$1

    Create : function() {
    },

    instanceOf : function(aType) {
        return ojcDistance$1.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcDistance$1;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcsShapeType.A1ojcsShapeTypevalues(); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@4c759524
            var var2 = bytecoder.newArray(var0.data.length,0); // type is REFERENCE value type is REFERENCE
            ojcDistance$1.$SwitchMap$org$jbox2d$collision$shapes$ShapeType = var2;
            }
        try {
            $S_9 : {
            // NORMAL
                var var3 = ojcDistance$1.$SwitchMap$org$jbox2d$collision$shapes$ShapeType; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@21b0e3de
                var var5 = ojcsShapeType.CIRCLE.INTordinal(ojcsShapeType.CIRCLE); // type is INT value type is INT
                var3.data[var5] = 1;
                __label__ = 24;
                }
        } catch (e) {
            dmbcExceptionManager.VOIDpushjlThrowable(e);
            if (e.instanceOf(jlNoSuchFieldError)) {
                __label__ = 23;
            } else {
                throw dmbcExceptionManager.jlThrowablepop();
            }
        }
        $M_23_24 : for(;;) switch (__label__) {
            case 23 :
            // EXCEPTION_HANDLER
                var var6 = dmbcExceptionManager.jlThrowablepop(); // type is REFERENCE value type is REFERENCE
                var local_0_REFERENCE = var6; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@12da437f
                __label__ = 24;
                continue $M_23_24;
            case 24 :
            // NORMAL
                try {
                    $S_24 : {
                    // NORMAL
                        var var8 = ojcDistance$1.$SwitchMap$org$jbox2d$collision$shapes$ShapeType; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@6fcb91c8
                        var var10 = ojcsShapeType.POLYGON.INTordinal(ojcsShapeType.POLYGON); // type is INT value type is INT
                        var8.data[var10] = 2;
                        __label__ = 39;
                        }
                } catch (e) {
                    dmbcExceptionManager.VOIDpushjlThrowable(e);
                    if (e.instanceOf(jlNoSuchFieldError)) {
                        __label__ = 38;
                    } else {
                        throw dmbcExceptionManager.jlThrowablepop();
                    }
                }
                $M_38_39 : for(;;) switch (__label__) {
                    case 38 :
                    // EXCEPTION_HANDLER
                        var var11 = dmbcExceptionManager.jlThrowablepop(); // type is REFERENCE value type is REFERENCE
                        var local_0_REFERENCE = var11; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@ff7e5a0
                        __label__ = 39;
                        continue $M_38_39;
                    case 39 :
                    // NORMAL
                        try {
                            $S_39 : {
                            // NORMAL
                                var var12 = ojcDistance$1.$SwitchMap$org$jbox2d$collision$shapes$ShapeType; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@297f5993
                                var var14 = ojcsShapeType.CHAIN.INTordinal(ojcsShapeType.CHAIN); // type is INT value type is INT
                                var12.data[var14] = 3;
                                __label__ = 54;
                                }
                        } catch (e) {
                            dmbcExceptionManager.VOIDpushjlThrowable(e);
                            if (e.instanceOf(jlNoSuchFieldError)) {
                                __label__ = 53;
                            } else {
                                throw dmbcExceptionManager.jlThrowablepop();
                            }
                        }
                        $M_53_54 : for(;;) switch (__label__) {
                            case 54 :
                            // NORMAL
                                try {
                                    var var16 = ojcDistance$1.$SwitchMap$org$jbox2d$collision$shapes$ShapeType; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@69fe2678
                                    var var18 = ojcsShapeType.EDGE.INTordinal(ojcsShapeType.EDGE); // type is INT value type is INT
                                    var16.data[var18] = 4;
                                    return;
                                } catch (e) {
                                    dmbcExceptionManager.VOIDpushjlThrowable(e);
                                    if (e.instanceOf(jlNoSuchFieldError)) {
                                        __label__ = 68;
                                    } else {
                                        throw dmbcExceptionManager.jlThrowablepop();
                                    }
                                }
                                var var19 = dmbcExceptionManager.jlThrowablepop(); // type is REFERENCE value type is REFERENCE
                                var local_0_REFERENCE = var19; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5a08bf5e
                                return;
                            case 53 :
                            // EXCEPTION_HANDLER
                                var var15 = dmbcExceptionManager.jlThrowablepop(); // type is REFERENCE value type is REFERENCE
                                var local_0_REFERENCE = var15; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6a629b5a
                                __label__ = 54;
                                continue $M_53_54;
                        }
                }
        }
    },

    classInitCheck : function() {
        if (!ojcDistance$1.__initialized) {
            ojcDistance$1.__initialized = true;
            var thePrototype = ojcDistance$1.Create.prototype;
            thePrototype.instanceOf = ojcDistance$1.instanceOf;
            thePrototype.ClassgetClass = ojcDistance$1.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            ojcsShapeType.classInitCheck();
            ojcDistance$1.VOIDclinit();
        }
    },

};

var ojcsShapeType = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 58,
    __implementedTypes : [1,14,58,59,2],
    CIRCLE : null, // declared in org.jbox2d.collision.shapes.ShapeType
    EDGE : null, // declared in org.jbox2d.collision.shapes.ShapeType
    POLYGON : null, // declared in org.jbox2d.collision.shapes.ShapeType
    CHAIN : null, // declared in org.jbox2d.collision.shapes.ShapeType
    $VALUES : null, // declared in org.jbox2d.collision.shapes.ShapeType

    Create : function() {
        this.name = null; // declared in java.lang.Enum
        this.ordinalNumber = 0; // declared in java.lang.Enum
    },

    instanceOf : function(aType) {
        return ojcsShapeType.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcsShapeType;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var __label__ = null;
        var var0 = new ojcsShapeType.Create(); // type is REFERENCE value type is REFERENCE
        ojcsShapeType.VOIDinitjlStringINT(var0,bytecoder.stringpool[16],0);
        ojcsShapeType.CIRCLE = var0;
        var var1 = new ojcsShapeType.Create(); // type is REFERENCE value type is REFERENCE
        ojcsShapeType.VOIDinitjlStringINT(var1,bytecoder.stringpool[17],1);
        ojcsShapeType.EDGE = var1;
        var var2 = new ojcsShapeType.Create(); // type is REFERENCE value type is REFERENCE
        ojcsShapeType.VOIDinitjlStringINT(var2,bytecoder.stringpool[18],2);
        ojcsShapeType.POLYGON = var2;
        var var3 = new ojcsShapeType.Create(); // type is REFERENCE value type is REFERENCE
        ojcsShapeType.VOIDinitjlStringINT(var3,bytecoder.stringpool[19],3);
        ojcsShapeType.CHAIN = var3;
        var var4 = bytecoder.newArray(4,null); // type is REFERENCE value type is REFERENCE
        var var5 = ojcsShapeType.CIRCLE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3e3a61c1
        var4.data[0] = var5;
        var var6 = ojcsShapeType.EDGE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@40fc8517
        var4.data[1] = var6;
        var var7 = ojcsShapeType.POLYGON; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6e727988
        var4.data[2] = var7;
        var var8 = ojcsShapeType.CHAIN; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@717decb4
        var4.data[3] = var8;
        ojcsShapeType.$VALUES = var4;
        return;
    },

    VOIDinitjlStringINT : function(thisRef,p1,p2) {
        var __label__ = null;
        jlEnum.VOIDinitjlStringINT(thisRef,p1,p2);
        return;
    },

    A1ojcsShapeTypevalues : function() {
        var __label__ = null;
        var var1 = ojcsShapeType.$VALUES.jlObjectclone(ojcsShapeType.$VALUES); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@587adf32
        return var1;
    },

    classInitCheck : function() {
        if (!ojcsShapeType.__initialized) {
            ojcsShapeType.__initialized = true;
            var thePrototype = ojcsShapeType.Create.prototype;
            thePrototype.instanceOf = ojcsShapeType.instanceOf;
            thePrototype.ClassgetClass = ojcsShapeType.ClassgetClass;
            thePrototype.INTordinal = jlEnum.INTordinal;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlEnum.classInitCheck();
            jlObject.classInitCheck();
            jlComparable.classInitCheck();
            jiSerializable.classInitCheck();
            jlrArray.classInitCheck();
            ojcsShapeType.VOIDclinit();
        }
    },

};

var jlEnum = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 59,
    __implementedTypes : [1,14,59,2],

    instanceOf : function(aType) {
        return jlEnum.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jlEnum;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitjlStringINT : function(thisRef,aName,aOrdinalNumber) {
        var __label__ = null;
        thisRef.name = aName;
        thisRef.ordinalNumber = aOrdinalNumber;
        return;
    },

    INTordinal : function(thisRef) {
        var __label__ = null;
        return thisRef.ordinalNumber;
    },

    classInitCheck : function() {
        if (!jlEnum.__initialized) {
            jlEnum.__initialized = true;
            jlObject.classInitCheck();
            jlComparable.classInitCheck();
            jiSerializable.classInitCheck();
        }
    },

};

var jlNoSuchFieldError = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 60,
    __implementedTypes : [1,64,63,60,62,2,61],

    Create : function() {
    },

    instanceOf : function(aType) {
        return jlNoSuchFieldError.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jlNoSuchFieldError;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        jlIncompatibleClassChangeError.VOIDinit(thisRef);
        return;
    },

    VOIDinitjlString : function(thisRef,s) {
        var __label__ = null;
        jlIncompatibleClassChangeError.VOIDinitjlString(thisRef,s);
        return;
    },

    classInitCheck : function() {
        if (!jlNoSuchFieldError.__initialized) {
            jlNoSuchFieldError.__initialized = true;
            var thePrototype = jlNoSuchFieldError.Create.prototype;
            thePrototype.instanceOf = jlNoSuchFieldError.instanceOf;
            thePrototype.ClassgetClass = jlNoSuchFieldError.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlIncompatibleClassChangeError.classInitCheck();
            jlObject.classInitCheck();
            jlThrowable.classInitCheck();
            jlError.classInitCheck();
            jlLinkageError.classInitCheck();
            jiSerializable.classInitCheck();
        }
    },

};

var jlIncompatibleClassChangeError = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 61,
    __implementedTypes : [1,64,63,62,2,61],

    Create : function() {
    },

    instanceOf : function(aType) {
        return jlIncompatibleClassChangeError.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jlIncompatibleClassChangeError;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        jlLinkageError.VOIDinit(thisRef);
        return;
    },

    VOIDinitjlString : function(thisRef,s) {
        var __label__ = null;
        jlLinkageError.VOIDinitjlString(thisRef,s);
        return;
    },

    classInitCheck : function() {
        if (!jlIncompatibleClassChangeError.__initialized) {
            jlIncompatibleClassChangeError.__initialized = true;
            var thePrototype = jlIncompatibleClassChangeError.Create.prototype;
            thePrototype.instanceOf = jlIncompatibleClassChangeError.instanceOf;
            thePrototype.ClassgetClass = jlIncompatibleClassChangeError.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlLinkageError.classInitCheck();
            jlObject.classInitCheck();
            jlThrowable.classInitCheck();
            jlError.classInitCheck();
            jiSerializable.classInitCheck();
        }
    },

};

var jlLinkageError = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 62,
    __implementedTypes : [1,64,63,62,2],

    Create : function() {
    },

    instanceOf : function(aType) {
        return jlLinkageError.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jlLinkageError;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        jlError.VOIDinit(thisRef);
        return;
    },

    VOIDinitjlString : function(thisRef,s) {
        var __label__ = null;
        jlError.VOIDinitjlString(thisRef,s);
        return;
    },

    classInitCheck : function() {
        if (!jlLinkageError.__initialized) {
            jlLinkageError.__initialized = true;
            var thePrototype = jlLinkageError.Create.prototype;
            thePrototype.instanceOf = jlLinkageError.instanceOf;
            thePrototype.ClassgetClass = jlLinkageError.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlError.classInitCheck();
            jlObject.classInitCheck();
            jlThrowable.classInitCheck();
            jiSerializable.classInitCheck();
        }
    },

};

var jlError = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 63,
    __implementedTypes : [1,64,63,2],

    Create : function() {
    },

    instanceOf : function(aType) {
        return jlError.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jlError;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        jlThrowable.VOIDinit(thisRef);
        return;
    },

    VOIDinitjlString : function(thisRef,message) {
        var __label__ = null;
        jlThrowable.VOIDinitjlString(thisRef,message);
        return;
    },

    classInitCheck : function() {
        if (!jlError.__initialized) {
            jlError.__initialized = true;
            var thePrototype = jlError.Create.prototype;
            thePrototype.instanceOf = jlError.instanceOf;
            thePrototype.ClassgetClass = jlError.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlThrowable.classInitCheck();
            jlObject.classInitCheck();
            jiSerializable.classInitCheck();
        }
    },

};

var jlThrowable = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 64,
    __implementedTypes : [1,64,2],

    Create : function() {
    },

    instanceOf : function(aType) {
        return jlThrowable.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jlThrowable;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    VOIDinitjlString : function(thisRef,aMessage) {
        var __label__ = null;
        return;
    },

    classInitCheck : function() {
        if (!jlThrowable.__initialized) {
            jlThrowable.__initialized = true;
            var thePrototype = jlThrowable.Create.prototype;
            thePrototype.instanceOf = jlThrowable.instanceOf;
            thePrototype.ClassgetClass = jlThrowable.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            jiSerializable.classInitCheck();
        }
    },

};

var ojcDistance$SimplexVertex = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 65,
    __implementedTypes : [1,65],

    Create : function() {
        this.this$0 = null; // declared in org.jbox2d.collision.Distance$SimplexVertex
        this.wA = null; // declared in org.jbox2d.collision.Distance$SimplexVertex
        this.wB = null; // declared in org.jbox2d.collision.Distance$SimplexVertex
        this.w = null; // declared in org.jbox2d.collision.Distance$SimplexVertex
        this.indexA = 0; // declared in org.jbox2d.collision.Distance$SimplexVertex
        this.indexB = 0; // declared in org.jbox2d.collision.Distance$SimplexVertex
        this.a = 0; // declared in org.jbox2d.collision.Distance$SimplexVertex
    },

    instanceOf : function(aType) {
        return ojcDistance$SimplexVertex.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcDistance$SimplexVertex;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitojcDistanceojcDistance$1 : function(thisRef,x0,x1) {
        var __label__ = null;
        ojcDistance$SimplexVertex.VOIDinitojcDistance(thisRef,x0);
        return;
    },

    VOIDinitojcDistance : function(thisRef,p1) {
        var __label__ = null;
        thisRef.this$0 = p1;
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var0);
        thisRef.wA = var0;
        var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var1);
        thisRef.wB = var1;
        var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var2);
        thisRef.w = var2;
        return;
    },

    VOIDsetojcDistance$SimplexVertex : function(thisRef,sv) {
        var __label__ = null;
        var var2 = thisRef.wA.ojcVec2setojcVec2(thisRef.wA,sv.wA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3a564a7c
        var var5 = thisRef.wB.ojcVec2setojcVec2(thisRef.wB,sv.wB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@549298ed
        var var8 = thisRef.w.ojcVec2setojcVec2(thisRef.w,sv.w); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5eef8f
        var var9 = sv.a; // type is FLOAT value type is FLOAT
        thisRef.a = var9;
        var var10 = sv.indexA; // type is INT value type is INT
        thisRef.indexA = var10;
        var var11 = sv.indexB; // type is INT value type is INT
        thisRef.indexB = var11;
        return;
    },

    classInitCheck : function() {
        if (!ojcDistance$SimplexVertex.__initialized) {
            ojcDistance$SimplexVertex.__initialized = true;
            var thePrototype = ojcDistance$SimplexVertex.Create.prototype;
            thePrototype.instanceOf = ojcDistance$SimplexVertex.instanceOf;
            thePrototype.ClassgetClass = ojcDistance$SimplexVertex.ClassgetClass;
            thePrototype.VOIDsetojcDistance$SimplexVertex = ojcDistance$SimplexVertex.VOIDsetojcDistance$SimplexVertex;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojcCollision = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 66,
    __implementedTypes : [1,66],
    $assertionsDisabled : false, // declared in org.jbox2d.collision.Collision
    d : null, // declared in org.jbox2d.collision.Collision

    Create : function() {
        this.input = null; // declared in org.jbox2d.collision.Collision
        this.cache = null; // declared in org.jbox2d.collision.Collision
        this.output = null; // declared in org.jbox2d.collision.Collision
        this.temp = null; // declared in org.jbox2d.collision.Collision
        this.results1 = null; // declared in org.jbox2d.collision.Collision
        this.results2 = null; // declared in org.jbox2d.collision.Collision
        this.incidentEdge = null; // declared in org.jbox2d.collision.Collision
        this.localTangent = null; // declared in org.jbox2d.collision.Collision
        this.localNormal = null; // declared in org.jbox2d.collision.Collision
        this.planePoint = null; // declared in org.jbox2d.collision.Collision
        this.tangent = null; // declared in org.jbox2d.collision.Collision
        this.v11 = null; // declared in org.jbox2d.collision.Collision
        this.v12 = null; // declared in org.jbox2d.collision.Collision
        this.clipPoints1 = null; // declared in org.jbox2d.collision.Collision
        this.clipPoints2 = null; // declared in org.jbox2d.collision.Collision
        this.Q = null; // declared in org.jbox2d.collision.Collision
        this.e = null; // declared in org.jbox2d.collision.Collision
        this.cf = null; // declared in org.jbox2d.collision.Collision
        this.e1 = null; // declared in org.jbox2d.collision.Collision
        this.P = null; // declared in org.jbox2d.collision.Collision
        this.n = null; // declared in org.jbox2d.collision.Collision
        this.collider = null; // declared in org.jbox2d.collision.Collision
        this.pool = null; // declared in org.jbox2d.collision.Collision
    },

    instanceOf : function(aType) {
        return ojcCollision.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcCollision;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcCollision.BOOLEANdesiredAssertionStatus(ojcCollision); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_13_9 : for(;;) switch (__label__) {
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_13_9;
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_13_9;
        }
        ojcCollision.$assertionsDisabled = var1;
        var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var2);
        ojcCollision.d = var2;
        return;
    },

    VOIDinitojpIWorldPool : function(thisRef,argPool) {
        var __label__ = null;
        var var0 = new ojcDistanceInput.Create(); // type is REFERENCE value type is REFERENCE
        ojcDistanceInput.VOIDinit(var0);
        thisRef.input = var0;
        var var1 = new ojcDistance$SimplexCache.Create(); // type is REFERENCE value type is REFERENCE
        ojcDistance$SimplexCache.VOIDinit(var1);
        thisRef.cache = var1;
        var var2 = new ojcDistanceOutput.Create(); // type is REFERENCE value type is REFERENCE
        ojcDistanceOutput.VOIDinit(var2);
        thisRef.output = var2;
        var var3 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var3);
        thisRef.temp = var3;
        var var4 = new ojcCollision$EdgeResults.Create(); // type is REFERENCE value type is REFERENCE
        ojcCollision$EdgeResults.VOIDinitojcCollision$1(var4,null);
        thisRef.results1 = var4;
        var var5 = new ojcCollision$EdgeResults.Create(); // type is REFERENCE value type is REFERENCE
        ojcCollision$EdgeResults.VOIDinitojcCollision$1(var5,null);
        thisRef.results2 = var5;
        var var6 = bytecoder.newArray(2,null); // type is REFERENCE value type is REFERENCE
        thisRef.incidentEdge = var6;
        var var7 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var7);
        thisRef.localTangent = var7;
        var var8 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var8);
        thisRef.localNormal = var8;
        var var9 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var9);
        thisRef.planePoint = var9;
        var var10 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var10);
        thisRef.tangent = var10;
        var var11 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var11);
        thisRef.v11 = var11;
        var var12 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var12);
        thisRef.v12 = var12;
        var var13 = bytecoder.newArray(2,null); // type is REFERENCE value type is REFERENCE
        thisRef.clipPoints1 = var13;
        var var14 = bytecoder.newArray(2,null); // type is REFERENCE value type is REFERENCE
        thisRef.clipPoints2 = var14;
        var var15 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var15);
        thisRef.Q = var15;
        var var16 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var16);
        thisRef.e = var16;
        var var17 = new ojcContactID.Create(); // type is REFERENCE value type is REFERENCE
        ojcContactID.VOIDinit(var17);
        thisRef.cf = var17;
        var var18 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var18);
        thisRef.e1 = var18;
        var var19 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var19);
        thisRef.P = var19;
        var var20 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var20);
        thisRef.n = var20;
        var var21 = new ojcCollision$EPCollider.Create(); // type is REFERENCE value type is REFERENCE
        ojcCollision$EPCollider.VOIDinit(var21);
        thisRef.collider = var21;
        var var22 = thisRef.incidentEdge; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1d19acf4
        var var23 = new ojcCollision$ClipVertex.Create(); // type is REFERENCE value type is REFERENCE
        ojcCollision$ClipVertex.VOIDinit(var23);
        var22.data[0] = var23;
        var var24 = thisRef.incidentEdge; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@2bb43ba6
        var var25 = new ojcCollision$ClipVertex.Create(); // type is REFERENCE value type is REFERENCE
        ojcCollision$ClipVertex.VOIDinit(var25);
        var24.data[1] = var25;
        var var26 = thisRef.clipPoints1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@431135e9
        var var27 = new ojcCollision$ClipVertex.Create(); // type is REFERENCE value type is REFERENCE
        ojcCollision$ClipVertex.VOIDinit(var27);
        var26.data[0] = var27;
        var var28 = thisRef.clipPoints1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@13bf4f73
        var var29 = new ojcCollision$ClipVertex.Create(); // type is REFERENCE value type is REFERENCE
        ojcCollision$ClipVertex.VOIDinit(var29);
        var28.data[1] = var29;
        var var30 = thisRef.clipPoints2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@4ea51796
        var var31 = new ojcCollision$ClipVertex.Create(); // type is REFERENCE value type is REFERENCE
        ojcCollision$ClipVertex.VOIDinit(var31);
        var30.data[0] = var31;
        var var32 = thisRef.clipPoints2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@44c67cef
        var var33 = new ojcCollision$ClipVertex.Create(); // type is REFERENCE value type is REFERENCE
        ojcCollision$ClipVertex.VOIDinit(var33);
        var32.data[1] = var33;
        thisRef.pool = argPool;
        return;
    },

    BOOLEANtestOverlapojcsShapeINTojcsShapeINTojcTransformojcTransform : function(thisRef,shapeA,indexA,shapeB,indexB,xfA,xfB) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            thisRef.input.proxyA.VOIDsetojcsShapeINT(thisRef.input.proxyA,shapeA,indexA);
            thisRef.input.proxyB.VOIDsetojcsShapeINT(thisRef.input.proxyB,shapeB,indexB);
            var var6 = thisRef.input.transformA.ojcTransformsetojcTransform(thisRef.input.transformA,xfA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@145a65b8
            var var9 = thisRef.input.transformB.ojcTransformsetojcTransform(thisRef.input.transformB,xfB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3324155c
            var var10 = thisRef.input; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@b40a6ec
            var10.useRadii = 1;
            var var11 = thisRef.cache; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@10b47484
            var11.count = 0;
            var var13 = thisRef.pool.ojcDistancegetDistance(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5704a48f
            var13.VOIDdistanceojcDistanceOutputojcDistance$SimplexCacheojcDistanceInput(var13,thisRef.output,thisRef.cache,thisRef.input);
            var var18 = thisRef.output.distance; // type is FLOAT value type is FLOAT
            if ((var18 >= 1.1920929E-6)) {
                __label__ = 108;
                break $S_0;
            }
            __label__ = 104;
            }
        for(;;) switch (__label__) {
            case 104 :
            // NORMAL
                var var20 = 1; // type is INT value type is INT
                return var20;
            case 108 :
            // NORMAL
                var var20 = 0; // type is INT value type is INT
                return var20;
        }
    },

    VOIDcollidePolygonsojcManifoldojcsPolygonShapeojcTransformojcsPolygonShapeojcTransform : function(thisRef,manifold,polyA,xfA,polyB,xfB) {
        var local_6_FLOAT = null; // type is FLOAT # of inits = 2
        var local_17_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_21_FLOAT = null; // type is FLOAT # of inits = 2
        var local_22_FLOAT = null; // type is FLOAT # of inits = 2
        var local_10_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_18_INT = null; // type is INT # of inits = 1
        var local_12_INT = null; // type is INT # of inits = 3
        var local_19_INT = null; // type is INT # of inits = 1
        var local_27_INT = null; // type is INT # of inits = 3
        var local_11_INT = null; // type is INT # of inits = 2
        var local_7_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_8_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_26_INT = null; // type is INT # of inits = 3
        var local_9_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_29_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_20_FLOAT = null; // type is FLOAT # of inits = 2
        var local_15_REFERENCE = null; // type is REFERENCE # of inits = 1
        var var66 = null; // type is INT # of inits = 2
        var local_24_FLOAT = null; // type is FLOAT # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            manifold.pointCount = 0;
            local_6_FLOAT = (polyA.m_radius + polyB.m_radius); // type is FLOAT value type is FLOAT
            thisRef.VOIDfindMaxSeparationojcCollision$EdgeResultsojcsPolygonShapeojcTransformojcsPolygonShapeojcTransform(thisRef,thisRef.results1,polyA,xfA,polyB,xfB);
            var var7 = thisRef.results1.separation; // type is FLOAT value type is FLOAT
            var var8 = local_6_FLOAT; // type is FLOAT value type is FLOAT
            if ((var7 <= var8)) {
                break $S_0;
            }
            return;
            }
        $S_45 : {
        // NORMAL
            thisRef.VOIDfindMaxSeparationojcCollision$EdgeResultsojcsPolygonShapeojcTransformojcsPolygonShapeojcTransform(thisRef,thisRef.results2,polyB,xfB,polyA,xfA);
            var var12 = thisRef.results2.separation; // type is FLOAT value type is FLOAT
            var var13 = local_6_FLOAT; // type is FLOAT value type is FLOAT
            if ((var12 <= var13)) {
                break $S_45;
            }
            return;
            }
        $S_73 : {
        // NORMAL
            var local_13_FLOAT = 0.98; // type is FLOAT value type is FLOAT
            var local_14_FLOAT = 0.001; // type is FLOAT value type is FLOAT
            var var20 = thisRef.results2.separation; // type is FLOAT value type is FLOAT
            var var24 = ((0.98 * thisRef.results1.separation) + 0.001); // type is FLOAT value type is FLOAT
            if ((var20 <= var24)) {
                __label__ = 141;
                break $S_73;
            }
            __label__ = 105;
            }
        $M_105_141 : for(;;) switch (__label__) {
            case 141 :
            // NORMAL
                local_7_REFERENCE = polyA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@26db18b7
                local_8_REFERENCE = polyB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@278b1c4d
                local_9_REFERENCE = xfA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6edfcb74
                local_10_REFERENCE = xfB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@694ed281
                local_11_INT = thisRef.results1.edgeIndex; // type is INT value type is INT
                var var40 = ojcManifold$ManifoldType.FACE_A; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1f51041e
                manifold.type = var40;
                local_12_INT = 0; // type is INT value type is INT
                break $M_105_141;
            case 105 :
            // NORMAL
                local_7_REFERENCE = polyB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@278b1c4d
                local_8_REFERENCE = polyA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@26db18b7
                local_9_REFERENCE = xfB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@694ed281
                local_10_REFERENCE = xfA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6edfcb74
                local_11_INT = thisRef.results2.edgeIndex; // type is INT value type is INT
                var var34 = ojcManifold$ManifoldType.FACE_B; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@34add9a6
                manifold.type = var34;
                local_12_INT = 1; // type is INT value type is INT
                break $M_105_141;
        }
        $S_174 : {
        // NORMAL
            local_15_REFERENCE = local_9_REFERENCE.q; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4ed5e78b
            thisRef.VOIDfindIncidentEdgeA1ojcCollision$ClipVertexojcsPolygonShapeojcTransformINTojcsPolygonShapeojcTransform(thisRef,thisRef.incidentEdge,local_7_REFERENCE,local_9_REFERENCE,local_11_INT,local_8_REFERENCE,local_10_REFERENCE);
            var local_16_INT = local_7_REFERENCE.m_count; // type is INT value type is INT
            local_17_REFERENCE = local_7_REFERENCE.m_vertices; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@776dda36
            local_18_INT = local_11_INT; // type is INT value type is INT
            var var62 = (local_11_INT + 1); // type is INT value type is INT
            var var63 = local_16_INT; // type is INT value type is INT
            if ((var62 >= var63)) {
                __label__ = 233;
                break $S_174;
            }
            __label__ = 226;
            }
        $M_233_226 : for(;;) switch (__label__) {
            case 226 :
            // NORMAL
                var66 = (local_11_INT + 1); // type is INT value type is INT
                break $M_233_226;
            case 233 :
            // NORMAL
                var66 = 0; // type is INT value type is INT
                break $M_233_226;
        }
        $S_234 : {
        // NORMAL
            local_19_INT = var66; // type is INT value type is INT
            var var69 = thisRef.v11; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@600b4131
            var var72 = local_17_REFERENCE.data[local_18_INT]; // type is REFERENCE value type is REFERENCE
            var var73 = var69.ojcVec2setojcVec2(var69,var72); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3ab1d47f
            var var74 = thisRef.v12; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5bb9851d
            var var77 = local_17_REFERENCE.data[local_19_INT]; // type is REFERENCE value type is REFERENCE
            var var78 = var74.ojcVec2setojcVec2(var74,var77); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@429c4836
            var var79 = thisRef.localTangent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@78248b9d
            var var84 = (thisRef.v12.x - thisRef.v11.x); // type is FLOAT value type is FLOAT
            var79.x = var84;
            var var85 = thisRef.localTangent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4c82aaca
            var var90 = (thisRef.v12.y - thisRef.v11.y); // type is FLOAT value type is FLOAT
            var85.y = var90;
            var var92 = thisRef.localTangent.FLOATnormalize(thisRef.localTangent); // type is FLOAT value type is FLOAT
            var var93 = thisRef.localNormal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5b045f2a
            var var96 = (1.0 * thisRef.localTangent.y); // type is FLOAT value type is FLOAT
            var93.x = var96;
            var var97 = thisRef.localNormal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7b797184
            var var100 = (-1.0 * thisRef.localTangent.x); // type is FLOAT value type is FLOAT
            var97.y = var100;
            var var101 = thisRef.planePoint; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@27dd7515
            var var107 = ((thisRef.v11.x + thisRef.v12.x) * 0.5); // type is FLOAT value type is FLOAT
            var101.x = var107;
            var var108 = thisRef.planePoint; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7e505fde
            var var114 = ((thisRef.v11.y + thisRef.v12.y) * 0.5); // type is FLOAT value type is FLOAT
            var108.y = var114;
            var var115 = thisRef.tangent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7d4a231
            var var126 = ((local_15_REFERENCE.c * thisRef.localTangent.x) - (local_15_REFERENCE.s * thisRef.localTangent.y)); // type is FLOAT value type is FLOAT
            var115.x = var126;
            var var127 = thisRef.tangent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3711061e
            var var138 = ((local_15_REFERENCE.s * thisRef.localTangent.x) + (local_15_REFERENCE.c * thisRef.localTangent.y)); // type is FLOAT value type is FLOAT
            var127.y = var138;
            local_20_FLOAT = (1.0 * thisRef.tangent.y); // type is FLOAT value type is FLOAT
            local_21_FLOAT = (-1.0 * thisRef.tangent.x); // type is FLOAT value type is FLOAT
            ojcTransform.VOIDmulToOutojcTransformojcVec2ojcVec2(local_9_REFERENCE,thisRef.v11,thisRef.v11);
            ojcTransform.VOIDmulToOutojcTransformojcVec2ojcVec2(local_9_REFERENCE,thisRef.v12,thisRef.v12);
            local_22_FLOAT = ((local_20_FLOAT * thisRef.v11.x) + (local_21_FLOAT * thisRef.v11.y)); // type is FLOAT value type is FLOAT
            var local_23_FLOAT = ((-((thisRef.tangent.x * thisRef.v11.x) + (thisRef.tangent.y * thisRef.v11.y))) + local_6_FLOAT); // type is FLOAT value type is FLOAT
            local_24_FLOAT = (((thisRef.tangent.x * thisRef.v12.x) + (thisRef.tangent.y * thisRef.v12.y)) + local_6_FLOAT); // type is FLOAT value type is FLOAT
            var var198 = thisRef.tangent.ojcVec2negateLocal(thisRef.tangent); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7ba8a834
            var var204 = ojcCollision.INTclipSegmentToLineA1ojcCollision$ClipVertexA1ojcCollision$ClipVertexojcVec2FLOATINT(thisRef.clipPoints1,thisRef.incidentEdge,thisRef.tangent,local_23_FLOAT,local_18_INT); // type is INT value type is INT
            var local_25_INT = var204; // type is INT value type is INT
            var var208 = thisRef.tangent.ojcVec2negateLocal(thisRef.tangent); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7fab630
            var var209 = local_25_INT; // type is INT value type is INT
            if ((var209 >= 2)) {
                break $S_234;
            }
            return;
            }
        $S_654 : {
        // NORMAL
            var var215 = ojcCollision.INTclipSegmentToLineA1ojcCollision$ClipVertexA1ojcCollision$ClipVertexojcVec2FLOATINT(thisRef.clipPoints2,thisRef.clipPoints1,thisRef.tangent,local_24_FLOAT,local_19_INT); // type is INT value type is INT
            var local_25_INT = var215; // type is INT value type is INT
            var var217 = local_25_INT; // type is INT value type is INT
            if ((var217 >= 2)) {
                break $S_654;
            }
            return;
            }
        $S_682 : {
        // NORMAL
            var var220 = manifold.localNormal.ojcVec2setojcVec2(manifold.localNormal,thisRef.localNormal); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@259d59d4
            var var223 = manifold.localPoint.ojcVec2setojcVec2(manifold.localPoint,thisRef.planePoint); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1a039a8f
            local_26_INT = 0; // type is INT value type is INT
            local_27_INT = 0; // type is INT value type is INT
            __label__ = 712;
            }
        $L_712 : for (;;) {
            $S_712 : {
            // NORMAL
                var var228 = local_27_INT; // type is INT value type is INT
                if ((var228 >= 2)) {
                    __label__ = 925;
                    break $S_712;
                }
                __label__ = 718;
                }
            for(;;) switch (__label__) {
                case 718 :
                // NORMAL
                    $S_718 : {
                    // NORMAL
                        var var229 = local_20_FLOAT; // type is FLOAT value type is FLOAT
                        var var232 = thisRef.clipPoints2.data[local_27_INT]; // type is REFERENCE value type is REFERENCE
                        var var235 = (var229 * var232.v.x); // type is FLOAT value type is FLOAT
                        var var236 = local_21_FLOAT; // type is FLOAT value type is FLOAT
                        var var239 = thisRef.clipPoints2.data[local_27_INT]; // type is REFERENCE value type is REFERENCE
                        var local_28_FLOAT = ((var235 + (var236 * var239.v.y)) - local_22_FLOAT); // type is FLOAT value type is FLOAT
                        var var248 = local_28_FLOAT; // type is FLOAT value type is FLOAT
                        var var249 = local_6_FLOAT; // type is FLOAT value type is FLOAT
                        if ((var248 > var249)) {
                            __label__ = 919;
                            break $S_718;
                        }
                        __label__ = 764;
                        }
                    $M_919_764 : for(;;) switch (__label__) {
                        case 919 :
                        // NORMAL
                            local_27_INT = (local_27_INT + 1); // type is INT value type is INT
                            __label__ = 712;
                            continue $L_712;
                        case 764 :
                        // NORMAL
                            $S_764 : {
                            // NORMAL
                                var var253 = manifold.points.data[local_26_INT]; // type is REFERENCE value type is REFERENCE
                                local_29_REFERENCE = var253; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3f3279e6
                                var local_30_REFERENCE = local_29_REFERENCE.localPoint; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@245478f3
                                var var260 = thisRef.clipPoints2.data[local_27_INT]; // type is REFERENCE value type is REFERENCE
                                var local_31_FLOAT = (var260.v.x - local_10_REFERENCE.p.x); // type is FLOAT value type is FLOAT
                                var var271 = thisRef.clipPoints2.data[local_27_INT]; // type is REFERENCE value type is REFERENCE
                                var local_32_FLOAT = (var271.v.y - local_10_REFERENCE.p.y); // type is FLOAT value type is FLOAT
                                var var280 = local_30_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@76cd117f
                                var var291 = ((local_10_REFERENCE.q.c * local_31_FLOAT) + (local_10_REFERENCE.q.s * local_32_FLOAT)); // type is FLOAT value type is FLOAT
                                var280.x = var291;
                                var var292 = local_30_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@76cd117f
                                var var304 = (((-local_10_REFERENCE.q.s) * local_31_FLOAT) + (local_10_REFERENCE.q.c * local_32_FLOAT)); // type is FLOAT value type is FLOAT
                                var292.y = var304;
                                var var306 = local_29_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@39d1b58b
                                var var309 = thisRef.clipPoints2.data[local_27_INT]; // type is REFERENCE value type is REFERENCE
                                var306.VOIDsetojcContactID(var306,var309.id);
                                var var311 = local_12_INT; // type is INT value type is INT
                                if ((var311 == 0)) {
                                    __label__ = 916;
                                    break $S_764;
                                }
                                __label__ = 908;
                                }
                            $M_916_908 : for(;;) switch (__label__) {
                                case 908 :
                                // NORMAL
                                    local_29_REFERENCE.id.VOIDflip(local_29_REFERENCE.id);
                                    __label__ = 916;
                                    continue $M_916_908;
                                case 916 :
                                // NORMAL
                                    local_26_INT = (local_26_INT + 1); // type is INT value type is INT
                                    __label__ = 919;
                                    continue $M_919_764;
                            }
                    }
                case 925 :
                // NORMAL
                    var var314 = local_26_INT; // type is INT value type is INT
                    manifold.pointCount = var314;
                    return;
            }
        }
    },

    VOIDfindMaxSeparationojcCollision$EdgeResultsojcsPolygonShapeojcTransformojcsPolygonShapeojcTransform : function(thisRef,results,poly1,xf1,poly2,xf2) {
        var local_15_FLOAT = null; // type is FLOAT # of inits = 2
        var local_25_FLOAT = null; // type is FLOAT # of inits = 4
        var local_19_FLOAT = null; // type is FLOAT # of inits = 2
        var local_24_INT = null; // type is INT # of inits = 4
        var local_23_FLOAT = null; // type is FLOAT # of inits = 1
        var local_14_FLOAT = null; // type is FLOAT # of inits = 2
        var local_19_INT = null; // type is INT # of inits = 3
        var local_22_INT = null; // type is INT # of inits = 1
        var local_16_INT = null; // type is INT # of inits = 5
        var local_18_FLOAT = null; // type is FLOAT # of inits = 3
        var var199 = null; // type is INT # of inits = 2
        var var192 = null; // type is INT # of inits = 2
        var var120 = null; // type is INT # of inits = 2
        var local_6_INT = null; // type is INT # of inits = 3
        var local_7_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_21_FLOAT = null; // type is FLOAT # of inits = 1
        var local_20_INT = null; // type is INT # of inits = 1
        var local_26_INT = null; // type is INT # of inits = 3
        var local_17_FLOAT = null; // type is FLOAT # of inits = 1
        var var132 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_6_INT = poly1.m_count; // type is INT value type is INT
            local_7_REFERENCE = poly1.m_normals; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@78af77b3
            var local_8_REFERENCE = poly1.m_centroid; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@33c1def1
            var local_9_REFERENCE = poly2.m_centroid; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7e25be88
            var local_10_REFERENCE = xf2.q; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1f995043
            var local_11_REFERENCE = xf1.q; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1c88aeec
            var local_12_FLOAT = (((local_10_REFERENCE.c * local_9_REFERENCE.x) - (local_10_REFERENCE.s * local_9_REFERENCE.y)) + xf2.p.x); // type is FLOAT value type is FLOAT
            var local_13_FLOAT = (((local_10_REFERENCE.s * local_9_REFERENCE.x) + (local_10_REFERENCE.c * local_9_REFERENCE.y)) + xf2.p.y); // type is FLOAT value type is FLOAT
            var local_12_FLOAT = (local_12_FLOAT - (((local_11_REFERENCE.c * local_8_REFERENCE.x) - (local_11_REFERENCE.s * local_8_REFERENCE.y)) + xf1.p.x)); // type is FLOAT value type is FLOAT
            var local_13_FLOAT = (local_13_FLOAT - (((local_11_REFERENCE.s * local_8_REFERENCE.x) + (local_11_REFERENCE.c * local_8_REFERENCE.y)) + xf1.p.y)); // type is FLOAT value type is FLOAT
            local_14_FLOAT = ((local_11_REFERENCE.c * local_12_FLOAT) + (local_11_REFERENCE.s * local_13_FLOAT)); // type is FLOAT value type is FLOAT
            local_15_FLOAT = (((-local_11_REFERENCE.s) * local_12_FLOAT) + (local_11_REFERENCE.c * local_13_FLOAT)); // type is FLOAT value type is FLOAT
            local_16_INT = 0; // type is INT value type is INT
            local_18_FLOAT = -3.4028235E38; // type is FLOAT value type is FLOAT
            local_19_INT = 0; // type is INT value type is INT
            __label__ = 227;
            }
        $L_227 : for (;;) {
            $S_227 : {
            // NORMAL
                var var108 = local_19_INT; // type is INT value type is INT
                var var109 = local_6_INT; // type is INT value type is INT
                if ((var108 >= var109)) {
                    __label__ = 282;
                    break $S_227;
                }
                __label__ = 234;
                }
            for(;;) switch (__label__) {
                case 234 :
                // NORMAL
                    $S_234 : {
                    // NORMAL
                        var var152 = local_7_REFERENCE.data[local_19_INT]; // type is REFERENCE value type is REFERENCE
                        var local_20_REFERENCE = var152; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@2183cdda
                        local_17_FLOAT = ((local_20_REFERENCE.x * local_14_FLOAT) + (local_20_REFERENCE.y * local_15_FLOAT)); // type is FLOAT value type is FLOAT
                        var var165 = local_17_FLOAT; // type is FLOAT value type is FLOAT
                        var var166 = local_18_FLOAT; // type is FLOAT value type is FLOAT
                        if ((var165 <= var166)) {
                            __label__ = 276;
                            break $S_234;
                        }
                        __label__ = 268;
                        }
                    $M_276_268 : for(;;) switch (__label__) {
                        case 276 :
                        // NORMAL
                            local_19_INT = (local_19_INT + 1); // type is INT value type is INT
                            __label__ = 227;
                            continue $L_227;
                        case 268 :
                        // NORMAL
                            local_18_FLOAT = local_17_FLOAT; // type is FLOAT value type is FLOAT
                            local_16_INT = local_19_INT; // type is INT value type is INT
                            __label__ = 276;
                            continue $M_276_268;
                    }
                case 282 :
                // NORMAL
                    $S_282 : {
                    // NORMAL
                        var var111 = thisRef.FLOATedgeSeparationojcsPolygonShapeojcTransformINTojcsPolygonShapeojcTransform(thisRef,poly1,xf1,local_16_INT,poly2,xf2); // type is FLOAT value type is FLOAT
                        local_19_FLOAT = var111; // type is FLOAT value type is FLOAT
                        var var115 = (local_16_INT - 1); // type is INT value type is INT
                        if ((var115 < 0)) {
                            __label__ = 310;
                            break $S_282;
                        }
                        __label__ = 303;
                        }
                    $M_310_303 : for(;;) switch (__label__) {
                        case 310 :
                        // NORMAL
                            var120 = (local_6_INT - 1); // type is INT value type is INT
                            break $M_310_303;
                        case 303 :
                        // NORMAL
                            var120 = (local_16_INT - 1); // type is INT value type is INT
                            break $M_310_303;
                    }
                    $S_314 : {
                    // NORMAL
                        local_20_INT = var120; // type is INT value type is INT
                        var var124 = thisRef.FLOATedgeSeparationojcsPolygonShapeojcTransformINTojcsPolygonShapeojcTransform(thisRef,poly1,xf1,local_20_INT,poly2,xf2); // type is FLOAT value type is FLOAT
                        local_21_FLOAT = var124; // type is FLOAT value type is FLOAT
                        var var128 = (local_16_INT + 1); // type is INT value type is INT
                        var var129 = local_6_INT; // type is INT value type is INT
                        if ((var128 >= var129)) {
                            __label__ = 346;
                            break $S_314;
                        }
                        __label__ = 339;
                        }
                    $M_339_346 : for(;;) switch (__label__) {
                        case 339 :
                        // NORMAL
                            var132 = (local_16_INT + 1); // type is INT value type is INT
                            break $M_339_346;
                        case 346 :
                        // NORMAL
                            var132 = 0; // type is INT value type is INT
                            break $M_339_346;
                    }
                    $S_347 : {
                    // NORMAL
                        local_22_INT = var132; // type is INT value type is INT
                        var var136 = thisRef.FLOATedgeSeparationojcsPolygonShapeojcTransformINTojcsPolygonShapeojcTransform(thisRef,poly1,xf1,local_22_INT,poly2,xf2); // type is FLOAT value type is FLOAT
                        local_23_FLOAT = var136; // type is FLOAT value type is FLOAT
                        var var139 = local_21_FLOAT; // type is FLOAT value type is FLOAT
                        var var140 = local_19_FLOAT; // type is FLOAT value type is FLOAT
                        if ((var139 <= var140)) {
                            __label__ = 393;
                            break $S_347;
                        }
                        __label__ = 371;
                        }
                    $M_393_371 : for(;;) switch (__label__) {
                        case 393 :
                        // NORMAL
                            $S_393 : {
                            // NORMAL
                                var var145 = local_23_FLOAT; // type is FLOAT value type is FLOAT
                                var var146 = local_19_FLOAT; // type is FLOAT value type is FLOAT
                                if ((var145 <= var146)) {
                                    __label__ = 415;
                                    break $S_393;
                                }
                                __label__ = 401;
                                }
                            for(;;) switch (__label__) {
                                case 401 :
                                // NORMAL
                                    local_26_INT = 1; // type is INT value type is INT
                                    local_24_INT = local_22_INT; // type is INT value type is INT
                                    local_25_FLOAT = local_23_FLOAT; // type is FLOAT value type is FLOAT
                                    __label__ = 428;
                                    break $M_393_371;
                                case 415 :
                                // NORMAL
                                    var var148 = local_16_INT; // type is INT value type is INT
                                    results.edgeIndex = var148;
                                    var var149 = local_19_FLOAT; // type is FLOAT value type is FLOAT
                                    results.separation = var149;
                                    return;
                            }
                        case 371 :
                        // NORMAL
                            $S_371 : {
                            // NORMAL
                                var var142 = local_21_FLOAT; // type is FLOAT value type is FLOAT
                                var var143 = local_23_FLOAT; // type is FLOAT value type is FLOAT
                                if ((var142 <= var143)) {
                                    __label__ = 393;
                                    continue $M_393_371;
                                }
                                }
                            local_26_INT = -1; // type is INT value type is INT
                            local_24_INT = local_20_INT; // type is INT value type is INT
                            local_25_FLOAT = local_21_FLOAT; // type is FLOAT value type is FLOAT
                            __label__ = 428;
                            break $M_393_371;
                    }
                    $L_428 : for (;;) {
                        $S_428 : {
                        // NORMAL
                            var var185 = local_26_INT; // type is INT value type is INT
                            if ((var185 != -1)) {
                                __label__ = 457;
                                break $S_428;
                            }
                            __label__ = 434;
                            }
                        $M_434_457 : for(;;) switch (__label__) {
                            case 434 :
                            // NORMAL
                                $S_434 : {
                                // NORMAL
                                    var var187 = (local_24_INT - 1); // type is INT value type is INT
                                    if ((var187 < 0)) {
                                        __label__ = 448;
                                        break $S_434;
                                    }
                                    __label__ = 441;
                                    }
                                $M_441_448 : for(;;) switch (__label__) {
                                    case 441 :
                                    // NORMAL
                                        var192 = (local_24_INT - 1); // type is INT value type is INT
                                        break $M_441_448;
                                    case 448 :
                                    // NORMAL
                                        var192 = (local_6_INT - 1); // type is INT value type is INT
                                        break $M_441_448;
                                }
                                local_16_INT = var192; // type is INT value type is INT
                                break $M_434_457;
                            case 457 :
                            // NORMAL
                                $S_457 : {
                                // NORMAL
                                    var var195 = (local_24_INT + 1); // type is INT value type is INT
                                    var var196 = local_6_INT; // type is INT value type is INT
                                    if ((var195 >= var196)) {
                                        __label__ = 473;
                                        break $S_457;
                                    }
                                    __label__ = 466;
                                    }
                                $M_466_473 : for(;;) switch (__label__) {
                                    case 473 :
                                    // NORMAL
                                        var199 = 0; // type is INT value type is INT
                                        break $M_466_473;
                                    case 466 :
                                    // NORMAL
                                        var199 = (local_24_INT + 1); // type is INT value type is INT
                                        break $M_466_473;
                                }
                                local_16_INT = var199; // type is INT value type is INT
                                break $M_434_457;
                        }
                        $S_476 : {
                        // NORMAL
                            var var202 = thisRef.FLOATedgeSeparationojcsPolygonShapeojcTransformINTojcsPolygonShapeojcTransform(thisRef,poly1,xf1,local_16_INT,poly2,xf2); // type is FLOAT value type is FLOAT
                            local_19_FLOAT = var202; // type is FLOAT value type is FLOAT
                            var var204 = local_19_FLOAT; // type is FLOAT value type is FLOAT
                            var var205 = local_25_FLOAT; // type is FLOAT value type is FLOAT
                            if ((var204 <= var205)) {
                                __label__ = 509;
                                break $S_476;
                            }
                            __label__ = 498;
                            }
                        for(;;) switch (__label__) {
                            case 498 :
                            // NORMAL
                                local_24_INT = local_16_INT; // type is INT value type is INT
                                local_25_FLOAT = local_19_FLOAT; // type is FLOAT value type is FLOAT
                                __label__ = 428;
                                continue $L_428;
                            case 509 :
                            // NORMAL
                                var var207 = local_24_INT; // type is INT value type is INT
                                results.edgeIndex = var207;
                                var var208 = local_25_FLOAT; // type is FLOAT value type is FLOAT
                                results.separation = var208;
                                return;
                        }
                    }
            }
        }
    },

    FLOATedgeSeparationojcsPolygonShapeojcTransformINTojcsPolygonShapeojcTransform : function(thisRef,poly1,xf1,edge1,poly2,xf2) {
        var local_12_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_18_FLOAT = null; // type is FLOAT # of inits = 2
        var local_7_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_6_INT = null; // type is INT # of inits = 1
        var local_16_FLOAT = null; // type is FLOAT # of inits = 2
        var local_9_INT = null; // type is INT # of inits = 2
        var local_10_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_15_FLOAT = null; // type is FLOAT # of inits = 2
        var local_11_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_8_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_19_FLOAT = null; // type is FLOAT # of inits = 2
        var local_20_INT = null; // type is INT # of inits = 3
        var local_21_FLOAT = null; // type is FLOAT # of inits = 3
        var local_22_INT = null; // type is INT # of inits = 3
        var local_24_FLOAT = null; // type is FLOAT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_6_INT = poly1.m_count; // type is INT value type is INT
            local_7_REFERENCE = poly1.m_vertices; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@2cb1b270
            local_8_REFERENCE = poly1.m_normals; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@2f20c95d
            local_9_INT = poly2.m_count; // type is INT value type is INT
            local_10_REFERENCE = poly2.m_vertices; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@de11449
            var var12 = ojcCollision.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var12 != 0)) {
                __label__ = 57;
                break $S_0;
            }
            __label__ = 38;
            }
        $M_57_38 : for(;;) switch (__label__) {
            case 57 :
            // NORMAL
                $S_57 : {
                // NORMAL
                    local_11_REFERENCE = xf1.q; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@323ef9a7
                    local_12_REFERENCE = xf2.q; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@133defa2
                    var local_13_REFERENCE = local_11_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@179ea7a7
                    var var21 = local_8_REFERENCE.data[edge1]; // type is REFERENCE value type is REFERENCE
                    var local_14_REFERENCE = var21; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3afea6b9
                    local_15_FLOAT = ((local_13_REFERENCE.c * local_14_REFERENCE.x) - (local_13_REFERENCE.s * local_14_REFERENCE.y)); // type is FLOAT value type is FLOAT
                    local_16_FLOAT = ((local_13_REFERENCE.s * local_14_REFERENCE.x) + (local_13_REFERENCE.c * local_14_REFERENCE.y)); // type is FLOAT value type is FLOAT
                    var local_17_REFERENCE = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5bf71894
                    local_18_FLOAT = ((local_17_REFERENCE.c * local_15_FLOAT) + (local_17_REFERENCE.s * local_16_FLOAT)); // type is FLOAT value type is FLOAT
                    local_19_FLOAT = (((-local_17_REFERENCE.s) * local_15_FLOAT) + (local_17_REFERENCE.c * local_16_FLOAT)); // type is FLOAT value type is FLOAT
                    local_20_INT = 0; // type is INT value type is INT
                    local_21_FLOAT = 3.4028235E38; // type is FLOAT value type is FLOAT
                    local_22_INT = 0; // type is INT value type is INT
                    __label__ = 183;
                    }
                $L_183 : for (;;) {
                    $S_183 : {
                    // NORMAL
                        var var80 = local_22_INT; // type is INT value type is INT
                        var var81 = local_9_INT; // type is INT value type is INT
                        if ((var80 >= var81)) {
                            __label__ = 238;
                            break $S_183;
                        }
                        __label__ = 190;
                        }
                    for(;;) switch (__label__) {
                        case 190 :
                        // NORMAL
                            $S_190 : {
                            // NORMAL
                                var var170 = local_10_REFERENCE.data[local_22_INT]; // type is REFERENCE value type is REFERENCE
                                var local_23_REFERENCE = var170; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3fb8aef3
                                local_24_FLOAT = ((local_23_REFERENCE.x * local_18_FLOAT) + (local_23_REFERENCE.y * local_19_FLOAT)); // type is FLOAT value type is FLOAT
                                var var182 = local_24_FLOAT; // type is FLOAT value type is FLOAT
                                var var183 = local_21_FLOAT; // type is FLOAT value type is FLOAT
                                if ((var182 >= var183)) {
                                    __label__ = 232;
                                    break $S_190;
                                }
                                __label__ = 224;
                                }
                            $M_224_232 : for(;;) switch (__label__) {
                                case 224 :
                                // NORMAL
                                    local_21_FLOAT = local_24_FLOAT; // type is FLOAT value type is FLOAT
                                    local_20_INT = local_22_INT; // type is INT value type is INT
                                    __label__ = 232;
                                    continue $M_224_232;
                                case 232 :
                                // NORMAL
                                    local_22_INT = (local_22_INT + 1); // type is INT value type is INT
                                    __label__ = 183;
                                    continue $L_183;
                            }
                        case 238 :
                        // NORMAL
                            var var83 = local_7_REFERENCE.data[edge1]; // type is REFERENCE value type is REFERENCE
                            var local_22_REFERENCE = var83; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@7a8e8b62
                            var local_23_FLOAT = (((local_11_REFERENCE.c * local_22_REFERENCE.x) - (local_11_REFERENCE.s * local_22_REFERENCE.y)) + xf1.p.x); // type is FLOAT value type is FLOAT
                            local_24_FLOAT = (((local_11_REFERENCE.s * local_22_REFERENCE.x) + (local_11_REFERENCE.c * local_22_REFERENCE.y)) + xf1.p.y); // type is FLOAT value type is FLOAT
                            var var119 = local_10_REFERENCE.data[local_20_INT]; // type is REFERENCE value type is REFERENCE
                            var local_25_REFERENCE = var119; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@6323b6e
                            var local_26_FLOAT = ((((local_12_REFERENCE.c * local_25_REFERENCE.x) - (local_12_REFERENCE.s * local_25_REFERENCE.y)) + xf2.p.x) - local_23_FLOAT); // type is FLOAT value type is FLOAT
                            var local_27_FLOAT = ((((local_12_REFERENCE.s * local_25_REFERENCE.x) + (local_12_REFERENCE.c * local_25_REFERENCE.y)) + xf2.p.y) - local_24_FLOAT); // type is FLOAT value type is FLOAT
                            var local_28_FLOAT = ((local_26_FLOAT * local_15_FLOAT) + (local_27_FLOAT * local_16_FLOAT)); // type is FLOAT value type is FLOAT
                            return local_28_FLOAT;
                    }
                }
            case 38 :
            // NORMAL
                $S_38 : {
                // NORMAL
                    if ((0 > edge1)) {
                        __label__ = 49;
                        break $S_38;
                    }
                    __label__ = 43;
                    }
                $M_43_49 : for(;;) switch (__label__) {
                    case 49 :
                    // NORMAL
                        var var167 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                        jlAssertionError.VOIDinit(var167);
                        throw var167;
                    case 43 :
                    // NORMAL
                        var var13 = local_6_INT; // type is INT value type is INT
                        if ((edge1 < var13)) {
                            __label__ = 57;
                            continue $M_57_38;
                        }
                        __label__ = 49;
                        continue $M_43_49;
                }
        }
    },

    VOIDfindIncidentEdgeA1ojcCollision$ClipVertexojcsPolygonShapeojcTransformINTojcsPolygonShapeojcTransform : function(thisRef,c,poly1,xf1,edge1,poly2,xf2) {
        var local_22_FLOAT = null; // type is FLOAT # of inits = 3
        var local_8_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_13_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_20_FLOAT = null; // type is FLOAT # of inits = 2
        var local_25_FLOAT = null; // type is FLOAT # of inits = 1
        var local_9_INT = null; // type is INT # of inits = 2
        var local_12_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_23_INT = null; // type is INT # of inits = 4
        var local_7_INT = null; // type is INT # of inits = 1
        var local_15_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_19_FLOAT = null; // type is FLOAT # of inits = 2
        var local_11_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_10_REFERENCE = null; // type is REFERENCE # of inits = 2
        var var90 = null; // type is INT # of inits = 2
        var local_21_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_7_INT = poly1.m_count; // type is INT value type is INT
            local_8_REFERENCE = poly1.m_normals; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3bcf9c5e
            local_9_INT = poly2.m_count; // type is INT value type is INT
            local_10_REFERENCE = poly2.m_vertices; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@53ca65f7
            local_11_REFERENCE = poly2.m_normals; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@29399db8
            var var12 = ojcCollision.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var12 != 0)) {
                __label__ = 60;
                break $S_0;
            }
            __label__ = 39;
            }
        $M_60_39 : for(;;) switch (__label__) {
            case 60 :
            // NORMAL
                $S_60 : {
                // NORMAL
                    var var15 = c.data[0]; // type is REFERENCE value type is REFERENCE
                    local_12_REFERENCE = var15; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@6ac55d3b
                    var var17 = c.data[1]; // type is REFERENCE value type is REFERENCE
                    local_13_REFERENCE = var17; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3cbad166
                    var local_14_REFERENCE = xf1.q; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2e0966ae
                    local_15_REFERENCE = xf2.q; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@69e3325d
                    var var24 = local_8_REFERENCE.data[edge1]; // type is REFERENCE value type is REFERENCE
                    var local_16_REFERENCE = var24; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@6986074b
                    var local_17_FLOAT = ((local_14_REFERENCE.c * local_16_REFERENCE.x) - (local_14_REFERENCE.s * local_16_REFERENCE.y)); // type is FLOAT value type is FLOAT
                    var local_18_FLOAT = ((local_14_REFERENCE.s * local_16_REFERENCE.x) + (local_14_REFERENCE.c * local_16_REFERENCE.y)); // type is FLOAT value type is FLOAT
                    local_19_FLOAT = ((local_15_REFERENCE.c * local_17_FLOAT) + (local_15_REFERENCE.s * local_18_FLOAT)); // type is FLOAT value type is FLOAT
                    local_20_FLOAT = (((-local_15_REFERENCE.s) * local_17_FLOAT) + (local_15_REFERENCE.c * local_18_FLOAT)); // type is FLOAT value type is FLOAT
                    local_21_INT = 0; // type is INT value type is INT
                    local_22_FLOAT = 3.4028235E38; // type is FLOAT value type is FLOAT
                    local_23_INT = 0; // type is INT value type is INT
                    __label__ = 189;
                    }
                $L_189 : for (;;) {
                    $S_189 : {
                    // NORMAL
                        var var81 = local_23_INT; // type is INT value type is INT
                        var var82 = local_9_INT; // type is INT value type is INT
                        if ((var81 >= var82)) {
                            __label__ = 244;
                            break $S_189;
                        }
                        __label__ = 196;
                        }
                    for(;;) switch (__label__) {
                        case 196 :
                        // NORMAL
                            $S_196 : {
                            // NORMAL
                                var var203 = local_11_REFERENCE.data[local_23_INT]; // type is REFERENCE value type is REFERENCE
                                var local_24_REFERENCE = var203; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@c37939e
                                local_25_FLOAT = ((local_19_FLOAT * local_24_REFERENCE.x) + (local_20_FLOAT * local_24_REFERENCE.y)); // type is FLOAT value type is FLOAT
                                var var216 = local_25_FLOAT; // type is FLOAT value type is FLOAT
                                var var217 = local_22_FLOAT; // type is FLOAT value type is FLOAT
                                if ((var216 >= var217)) {
                                    __label__ = 238;
                                    break $S_196;
                                }
                                __label__ = 230;
                                }
                            $M_230_238 : for(;;) switch (__label__) {
                                case 230 :
                                // NORMAL
                                    local_22_FLOAT = local_25_FLOAT; // type is FLOAT value type is FLOAT
                                    local_21_INT = local_23_INT; // type is INT value type is INT
                                    __label__ = 238;
                                    continue $M_230_238;
                                case 238 :
                                // NORMAL
                                    local_23_INT = (local_23_INT + 1); // type is INT value type is INT
                                    __label__ = 189;
                                    continue $L_189;
                            }
                        case 244 :
                        // NORMAL
                            $S_244 : {
                            // NORMAL
                                local_23_INT = local_21_INT; // type is INT value type is INT
                                var var86 = (local_23_INT + 1); // type is INT value type is INT
                                var var87 = local_9_INT; // type is INT value type is INT
                                if ((var86 >= var87)) {
                                    __label__ = 264;
                                    break $S_244;
                                }
                                __label__ = 257;
                                }
                            $M_264_257 : for(;;) switch (__label__) {
                                case 257 :
                                // NORMAL
                                    var90 = (local_23_INT + 1); // type is INT value type is INT
                                    break $M_264_257;
                                case 264 :
                                // NORMAL
                                    var90 = 0; // type is INT value type is INT
                                    break $M_264_257;
                            }
                            var local_24_INT = var90; // type is INT value type is INT
                            var var95 = local_10_REFERENCE.data[local_23_INT]; // type is REFERENCE value type is REFERENCE
                            var local_25_REFERENCE = var95; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@69eea8a0
                            var local_26_REFERENCE = local_12_REFERENCE.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@19ef0e1a
                            var var100 = local_26_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@408aee33
                            var var114 = (((local_15_REFERENCE.c * local_25_REFERENCE.x) - (local_15_REFERENCE.s * local_25_REFERENCE.y)) + xf2.p.x); // type is FLOAT value type is FLOAT
                            var100.x = var114;
                            var var115 = local_26_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@408aee33
                            var var129 = (((local_15_REFERENCE.s * local_25_REFERENCE.x) + (local_15_REFERENCE.c * local_25_REFERENCE.y)) + xf2.p.y); // type is FLOAT value type is FLOAT
                            var115.y = var129;
                            var var131 = local_12_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@70113edf
                            var var132 = Math.floor(edge1); // type is BYTE value type is BYTE
                            var131.indexA = var132;
                            var var134 = local_12_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6ca623d5
                            var var136 = Math.floor(local_23_INT); // type is BYTE value type is BYTE
                            var134.indexB = var136;
                            var var138 = local_12_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@d587f85
                            var var140 = ojcContactID$Type.FACE.INTordinal(ojcContactID$Type.FACE); // type is INT value type is INT
                            var var141 = Math.floor(var140); // type is BYTE value type is BYTE
                            var138.typeA = var141;
                            var var143 = local_12_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1a34e36b
                            var var145 = ojcContactID$Type.VERTEX.INTordinal(ojcContactID$Type.VERTEX); // type is INT value type is INT
                            var var146 = Math.floor(var145); // type is BYTE value type is BYTE
                            var143.typeB = var146;
                            var var149 = local_10_REFERENCE.data[local_24_INT]; // type is REFERENCE value type is REFERENCE
                            var local_27_REFERENCE = var149; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@63aac134
                            var local_28_REFERENCE = local_13_REFERENCE.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3ecffe1f
                            var var154 = local_28_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@70251a14
                            var var168 = (((local_15_REFERENCE.c * local_27_REFERENCE.x) - (local_15_REFERENCE.s * local_27_REFERENCE.y)) + xf2.p.x); // type is FLOAT value type is FLOAT
                            var154.x = var168;
                            var var169 = local_28_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@70251a14
                            var var183 = (((local_15_REFERENCE.s * local_27_REFERENCE.x) + (local_15_REFERENCE.c * local_27_REFERENCE.y)) + xf2.p.y); // type is FLOAT value type is FLOAT
                            var169.y = var183;
                            var var185 = local_13_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4db790c0
                            var var186 = Math.floor(edge1); // type is BYTE value type is BYTE
                            var185.indexA = var186;
                            var var188 = local_13_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@78215b23
                            var var190 = Math.floor(local_24_INT); // type is BYTE value type is BYTE
                            var188.indexB = var190;
                            var var192 = local_13_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@39df6d3e
                            var var194 = ojcContactID$Type.FACE.INTordinal(ojcContactID$Type.FACE); // type is INT value type is INT
                            var var195 = Math.floor(var194); // type is BYTE value type is BYTE
                            var192.typeA = var195;
                            var var197 = local_13_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@61f235ab
                            var var199 = ojcContactID$Type.VERTEX.INTordinal(ojcContactID$Type.VERTEX); // type is INT value type is INT
                            var var200 = Math.floor(var199); // type is BYTE value type is BYTE
                            var197.typeB = var200;
                            return;
                    }
                }
            case 39 :
            // NORMAL
                $S_39 : {
                // NORMAL
                    if ((0 > edge1)) {
                        __label__ = 52;
                        break $S_39;
                    }
                    __label__ = 45;
                    }
                $M_52_45 : for(;;) switch (__label__) {
                    case 52 :
                    // NORMAL
                        var var14 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                        jlAssertionError.VOIDinit(var14);
                        throw var14;
                    case 45 :
                    // NORMAL
                        var var13 = local_7_INT; // type is INT value type is INT
                        if ((edge1 < var13)) {
                            __label__ = 60;
                            continue $M_60_39;
                        }
                        __label__ = 52;
                        continue $M_52_45;
                }
        }
    },

    INTclipSegmentToLineA1ojcCollision$ClipVertexA1ojcCollision$ClipVertexojcVec2FLOATINT : function(vOut,vIn,normal,offset,vertexIndexA) {
        var local_7_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_8_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_11_FLOAT = null; // type is FLOAT # of inits = 1
        var local_9_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_5_INT = null; // type is INT # of inits = 4
        var local_10_FLOAT = null; // type is FLOAT # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_5_INT = 0; // type is INT value type is INT
            var var2 = vIn.data[0]; // type is REFERENCE value type is REFERENCE
            local_6_REFERENCE = var2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@7fc98b4a
            var var4 = vIn.data[1]; // type is REFERENCE value type is REFERENCE
            local_7_REFERENCE = var4; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3412432a
            local_8_REFERENCE = local_6_REFERENCE.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@539e436a
            local_9_REFERENCE = local_7_REFERENCE.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7b53ec13
            var var13 = ojcVec2.FLOATdotojcVec2ojcVec2(normal,local_8_REFERENCE); // type is FLOAT value type is FLOAT
            local_10_FLOAT = (var13 - offset); // type is FLOAT value type is FLOAT
            var var18 = ojcVec2.FLOATdotojcVec2ojcVec2(normal,local_9_REFERENCE); // type is FLOAT value type is FLOAT
            local_11_FLOAT = (var18 - offset); // type is FLOAT value type is FLOAT
            var var22 = local_10_FLOAT; // type is FLOAT value type is FLOAT
            if ((var22 > 0.0)) {
                __label__ = 66;
                break $S_0;
            }
            __label__ = 54;
            }
        $M_66_54 : for(;;) switch (__label__) {
            case 54 :
            // NORMAL
                var var24 = local_5_INT; // type is INT value type is INT
                local_5_INT = (local_5_INT + 1); // type is INT value type is INT
                var var25 = vOut.data[var24]; // type is REFERENCE value type is REFERENCE
                var25.VOIDsetojcCollision$ClipVertex(var25,local_6_REFERENCE);
                __label__ = 66;
                continue $M_66_54;
            case 66 :
            // NORMAL
                $S_66 : {
                // NORMAL
                    var var27 = local_11_FLOAT; // type is FLOAT value type is FLOAT
                    if ((var27 > 0.0)) {
                        __label__ = 85;
                        break $S_66;
                    }
                    __label__ = 73;
                    }
                $M_73_85 : for(;;) switch (__label__) {
                    case 73 :
                    // NORMAL
                        var var29 = local_5_INT; // type is INT value type is INT
                        local_5_INT = (local_5_INT + 1); // type is INT value type is INT
                        var var30 = vOut.data[var29]; // type is REFERENCE value type is REFERENCE
                        var30.VOIDsetojcCollision$ClipVertex(var30,local_7_REFERENCE);
                        __label__ = 85;
                        continue $M_73_85;
                    case 85 :
                    // NORMAL
                        $S_85 : {
                        // NORMAL
                            var var34 = (local_10_FLOAT * local_11_FLOAT); // type is FLOAT value type is FLOAT
                            if ((var34 >= 0.0)) {
                                return local_5_INT;
                            }
                            }
                        var local_12_FLOAT = (local_10_FLOAT / (local_10_FLOAT - local_11_FLOAT)); // type is FLOAT value type is FLOAT
                        var var44 = vOut.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                        var local_13_REFERENCE = var44; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@e6714a6
                        var var47 = local_13_REFERENCE.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@41eb6cf2
                        var var57 = (local_8_REFERENCE.x + (local_12_FLOAT * (local_9_REFERENCE.x - local_8_REFERENCE.x))); // type is FLOAT value type is FLOAT
                        var47.x = var57;
                        var var59 = local_13_REFERENCE.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@604ff2b6
                        var var69 = (local_8_REFERENCE.y + (local_12_FLOAT * (local_9_REFERENCE.y - local_8_REFERENCE.y))); // type is FLOAT value type is FLOAT
                        var59.y = var69;
                        var var71 = local_13_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@498b9d8
                        var var72 = Math.floor(vertexIndexA); // type is BYTE value type is BYTE
                        var71.indexA = var72;
                        var var74 = local_13_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@326c4fc9
                        var var77 = local_6_REFERENCE.id.indexB; // type is BYTE value type is BYTE
                        var74.indexB = var77;
                        var var79 = local_13_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@28fa298a
                        var var81 = ojcContactID$Type.VERTEX.INTordinal(ojcContactID$Type.VERTEX); // type is INT value type is INT
                        var var82 = Math.floor(var81); // type is BYTE value type is BYTE
                        var79.typeA = var82;
                        var var84 = local_13_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@373fa461
                        var var86 = ojcContactID$Type.FACE.INTordinal(ojcContactID$Type.FACE); // type is INT value type is INT
                        var var87 = Math.floor(var86); // type is BYTE value type is BYTE
                        var84.typeB = var87;
                        local_5_INT = (local_5_INT + 1); // type is INT value type is INT
                        return local_5_INT;
                }
        }
    },

    VOIDcollideCirclesojcManifoldojcsCircleShapeojcTransformojcsCircleShapeojcTransform : function(thisRef,manifold,circle1,xfA,circle2,xfB) {
        var local_7_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            manifold.pointCount = 0;
            local_6_REFERENCE = circle1.m_p; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@62e3856e
            local_7_REFERENCE = circle2.m_p; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@68aa1d33
            var local_8_FLOAT = (((xfA.q.c * local_6_REFERENCE.x) - (xfA.q.s * local_6_REFERENCE.y)) + xfA.p.x); // type is FLOAT value type is FLOAT
            var local_9_FLOAT = (((xfA.q.s * local_6_REFERENCE.x) + (xfA.q.c * local_6_REFERENCE.y)) + xfA.p.y); // type is FLOAT value type is FLOAT
            var local_10_FLOAT = (((xfB.q.c * local_7_REFERENCE.x) - (xfB.q.s * local_7_REFERENCE.y)) + xfB.p.x); // type is FLOAT value type is FLOAT
            var local_11_FLOAT = (((xfB.q.s * local_7_REFERENCE.x) + (xfB.q.c * local_7_REFERENCE.y)) + xfB.p.y); // type is FLOAT value type is FLOAT
            var local_12_FLOAT = (local_10_FLOAT - local_8_FLOAT); // type is FLOAT value type is FLOAT
            var local_13_FLOAT = (local_11_FLOAT - local_9_FLOAT); // type is FLOAT value type is FLOAT
            var local_14_FLOAT = ((local_12_FLOAT * local_12_FLOAT) + (local_13_FLOAT * local_13_FLOAT)); // type is FLOAT value type is FLOAT
            var local_15_FLOAT = (circle1.m_radius + circle2.m_radius); // type is FLOAT value type is FLOAT
            var var92 = local_14_FLOAT; // type is FLOAT value type is FLOAT
            var var95 = (local_15_FLOAT * local_15_FLOAT); // type is FLOAT value type is FLOAT
            if ((var92 <= var95)) {
                break $S_0;
            }
            return;
            }
        var var97 = ojcManifold$ManifoldType.CIRCLES; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@32d22892
        manifold.type = var97;
        var var100 = manifold.localPoint.ojcVec2setojcVec2(manifold.localPoint,local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@111591ad
        manifold.localNormal.VOIDsetZero(manifold.localNormal);
        manifold.pointCount = 1;
        var var103 = manifold.points.data[0]; // type is REFERENCE value type is REFERENCE
        var var106 = var103.localPoint.ojcVec2setojcVec2(var103.localPoint,local_7_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6f23be14
        var var108 = manifold.points.data[0]; // type is REFERENCE value type is REFERENCE
        var108.id.VOIDzero(var108.id);
        return;
    },

    VOIDcollidePolygonAndCircleojcManifoldojcsPolygonShapeojcTransformojcsCircleShapeojcTransform : function(thisRef,manifold,polygon,xfA,circle,xfB) {
        var local_36_FLOAT = null; // type is FLOAT # of inits = 3
        var local_15_INT = null; // type is INT # of inits = 3
        var local_20_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_35_FLOAT = null; // type is FLOAT # of inits = 1
        var local_19_FLOAT = null; // type is FLOAT # of inits = 1
        var local_24_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_25_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_13_FLOAT = null; // type is FLOAT # of inits = 2
        var local_22_INT = null; // type is INT # of inits = 4
        var local_21_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_37_FLOAT = null; // type is FLOAT # of inits = 3
        var local_16_FLOAT = null; // type is FLOAT # of inits = 4
        var local_14_FLOAT = null; // type is FLOAT # of inits = 2
        var local_18_INT = null; // type is INT # of inits = 2
        var local_17_FLOAT = null; // type is FLOAT # of inits = 2
        var var100 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            manifold.pointCount = 0;
            local_6_REFERENCE = circle.m_p; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@73ed4136
            var local_7_REFERENCE = xfB.q; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@15a43e2
            var local_8_REFERENCE = xfA.q; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@42f84668
            var local_9_FLOAT = (((local_7_REFERENCE.c * local_6_REFERENCE.x) - (local_7_REFERENCE.s * local_6_REFERENCE.y)) + xfB.p.x); // type is FLOAT value type is FLOAT
            var local_10_FLOAT = (((local_7_REFERENCE.s * local_6_REFERENCE.x) + (local_7_REFERENCE.c * local_6_REFERENCE.y)) + xfB.p.y); // type is FLOAT value type is FLOAT
            var local_11_FLOAT = (local_9_FLOAT - xfA.p.x); // type is FLOAT value type is FLOAT
            var local_12_FLOAT = (local_10_FLOAT - xfA.p.y); // type is FLOAT value type is FLOAT
            local_13_FLOAT = ((local_8_REFERENCE.c * local_11_FLOAT) + (local_8_REFERENCE.s * local_12_FLOAT)); // type is FLOAT value type is FLOAT
            local_14_FLOAT = (((-local_8_REFERENCE.s) * local_11_FLOAT) + (local_8_REFERENCE.c * local_12_FLOAT)); // type is FLOAT value type is FLOAT
            local_15_INT = 0; // type is INT value type is INT
            local_16_FLOAT = -3.4028235E38; // type is FLOAT value type is FLOAT
            local_17_FLOAT = (polygon.m_radius + circle.m_radius); // type is FLOAT value type is FLOAT
            local_18_INT = polygon.m_count; // type is INT value type is INT
            local_20_REFERENCE = polygon.m_vertices; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@7f7702f6
            local_21_REFERENCE = polygon.m_normals; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@660a08df
            local_22_INT = 0; // type is INT value type is INT
            __label__ = 196;
            }
        $L_196 : for (;;) {
            $S_196 : {
            // NORMAL
                var var91 = local_22_INT; // type is INT value type is INT
                var var92 = local_18_INT; // type is INT value type is INT
                if ((var91 >= var92)) {
                    __label__ = 286;
                    break $S_196;
                }
                __label__ = 203;
                }
            for(;;) switch (__label__) {
                case 286 :
                // NORMAL
                    $S_286 : {
                    // NORMAL
                        local_22_INT = local_15_INT; // type is INT value type is INT
                        var var96 = (local_22_INT + 1); // type is INT value type is INT
                        var var97 = local_18_INT; // type is INT value type is INT
                        if ((var96 >= var97)) {
                            __label__ = 306;
                            break $S_286;
                        }
                        __label__ = 299;
                        }
                    $M_299_306 : for(;;) switch (__label__) {
                        case 306 :
                        // NORMAL
                            var100 = 0; // type is INT value type is INT
                            break $M_299_306;
                        case 299 :
                        // NORMAL
                            var100 = (local_22_INT + 1); // type is INT value type is INT
                            break $M_299_306;
                    }
                    $S_307 : {
                    // NORMAL
                        var local_23_INT = var100; // type is INT value type is INT
                        var var105 = local_20_REFERENCE.data[local_22_INT]; // type is REFERENCE value type is REFERENCE
                        local_24_REFERENCE = var105; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@6b76e921
                        var var109 = local_20_REFERENCE.data[local_23_INT]; // type is REFERENCE value type is REFERENCE
                        local_25_REFERENCE = var109; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@5663d3b8
                        var var111 = local_16_FLOAT; // type is FLOAT value type is FLOAT
                        if ((var111 >= 1.1920929E-7)) {
                            __label__ = 459;
                            break $S_307;
                        }
                        __label__ = 331;
                        }
                    for(;;) switch (__label__) {
                        case 331 :
                        // NORMAL
                            manifold.pointCount = 1;
                            var var379 = ojcManifold$ManifoldType.FACE_A; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@351c12af
                            manifold.type = var379;
                            var var382 = local_21_REFERENCE.data[local_15_INT]; // type is REFERENCE value type is REFERENCE
                            var local_26_REFERENCE = var382; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@35d7d962
                            var var384 = manifold.localNormal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@72f00d9c
                            var var386 = local_26_REFERENCE.x; // type is FLOAT value type is FLOAT
                            var384.x = var386;
                            var var387 = manifold.localNormal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@448abfed
                            var var389 = local_26_REFERENCE.y; // type is FLOAT value type is FLOAT
                            var387.y = var389;
                            var var390 = manifold.localPoint; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@11d654b9
                            var var396 = ((local_24_REFERENCE.x + local_25_REFERENCE.x) * 0.5); // type is FLOAT value type is FLOAT
                            var390.x = var396;
                            var var397 = manifold.localPoint; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1a419328
                            var var403 = ((local_24_REFERENCE.y + local_25_REFERENCE.y) * 0.5); // type is FLOAT value type is FLOAT
                            var397.y = var403;
                            var var405 = manifold.points.data[0]; // type is REFERENCE value type is REFERENCE
                            var local_27_REFERENCE = var405; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@682fe111
                            var var408 = local_27_REFERENCE.localPoint; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@794b5e2e
                            var var410 = local_6_REFERENCE.x; // type is FLOAT value type is FLOAT
                            var408.x = var410;
                            var var412 = local_27_REFERENCE.localPoint; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5a1bae22
                            var var414 = local_6_REFERENCE.y; // type is FLOAT value type is FLOAT
                            var412.y = var414;
                            local_27_REFERENCE.id.VOIDzero(local_27_REFERENCE.id);
                            return;
                        case 459 :
                        // NORMAL
                            $S_459 : {
                            // NORMAL
                                var local_26_FLOAT = (local_13_FLOAT - local_24_REFERENCE.x); // type is FLOAT value type is FLOAT
                                var local_27_FLOAT = (local_14_FLOAT - local_24_REFERENCE.y); // type is FLOAT value type is FLOAT
                                var local_28_FLOAT = (local_25_REFERENCE.x - local_24_REFERENCE.x); // type is FLOAT value type is FLOAT
                                var local_29_FLOAT = (local_25_REFERENCE.y - local_24_REFERENCE.y); // type is FLOAT value type is FLOAT
                                var local_30_FLOAT = ((local_26_FLOAT * local_28_FLOAT) + (local_27_FLOAT * local_29_FLOAT)); // type is FLOAT value type is FLOAT
                                var local_31_FLOAT = (local_13_FLOAT - local_25_REFERENCE.x); // type is FLOAT value type is FLOAT
                                var local_32_FLOAT = (local_14_FLOAT - local_25_REFERENCE.y); // type is FLOAT value type is FLOAT
                                var local_33_FLOAT = (local_24_REFERENCE.x - local_25_REFERENCE.x); // type is FLOAT value type is FLOAT
                                var local_34_FLOAT = (local_24_REFERENCE.y - local_25_REFERENCE.y); // type is FLOAT value type is FLOAT
                                local_35_FLOAT = ((local_31_FLOAT * local_33_FLOAT) + (local_32_FLOAT * local_34_FLOAT)); // type is FLOAT value type is FLOAT
                                var var183 = local_30_FLOAT; // type is FLOAT value type is FLOAT
                                if ((var183 > 0.0)) {
                                    __label__ = 715;
                                    break $S_459;
                                }
                                __label__ = 584;
                                }
                            for(;;) switch (__label__) {
                                case 715 :
                                // NORMAL
                                    $S_715 : {
                                    // NORMAL
                                        var var185 = local_35_FLOAT; // type is FLOAT value type is FLOAT
                                        if ((var185 > 0.0)) {
                                            __label__ = 853;
                                            break $S_715;
                                        }
                                        __label__ = 722;
                                        }
                                    for(;;) switch (__label__) {
                                        case 853 :
                                        // NORMAL
                                            $S_853 : {
                                            // NORMAL
                                                local_36_FLOAT = ((local_24_REFERENCE.x + local_25_REFERENCE.x) * 0.5); // type is FLOAT value type is FLOAT
                                                local_37_FLOAT = ((local_24_REFERENCE.y + local_25_REFERENCE.y) * 0.5); // type is FLOAT value type is FLOAT
                                                var local_38_FLOAT = (local_13_FLOAT - local_36_FLOAT); // type is FLOAT value type is FLOAT
                                                var local_39_FLOAT = (local_14_FLOAT - local_37_FLOAT); // type is FLOAT value type is FLOAT
                                                var var215 = local_21_REFERENCE.data[local_22_INT]; // type is REFERENCE value type is REFERENCE
                                                var local_40_REFERENCE = var215; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@4cd5be9a
                                                local_16_FLOAT = ((local_38_FLOAT * local_40_REFERENCE.x) + (local_39_FLOAT * local_40_REFERENCE.y)); // type is FLOAT value type is FLOAT
                                                var var227 = local_16_FLOAT; // type is FLOAT value type is FLOAT
                                                var var228 = local_17_FLOAT; // type is FLOAT value type is FLOAT
                                                if ((var227 <= var228)) {
                                                    break $S_853;
                                                }
                                                return;
                                                }
                                            manifold.pointCount = 1;
                                            var var230 = ojcManifold$ManifoldType.FACE_A; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5b65e978
                                            manifold.type = var230;
                                            var var231 = manifold.localNormal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@787c7614
                                            var var234 = local_21_REFERENCE.data[local_22_INT]; // type is REFERENCE value type is REFERENCE
                                            var var235 = var231.ojcVec2setojcVec2(var231,var234); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7f11bd87
                                            var var236 = manifold.localPoint; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1e51ed91
                                            var var237 = local_36_FLOAT; // type is FLOAT value type is FLOAT
                                            var236.x = var237;
                                            var var238 = manifold.localPoint; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6a0bf90a
                                            var var239 = local_37_FLOAT; // type is FLOAT value type is FLOAT
                                            var238.y = var239;
                                            var var241 = manifold.points.data[0]; // type is REFERENCE value type is REFERENCE
                                            var var244 = var241.localPoint.ojcVec2setojcVec2(var241.localPoint,local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@71dcfe89
                                            var var246 = manifold.points.data[0]; // type is REFERENCE value type is REFERENCE
                                            var246.id.VOIDzero(var246.id);
                                            return;
                                        case 722 :
                                        // NORMAL
                                            $S_722 : {
                                            // NORMAL
                                                local_36_FLOAT = (local_13_FLOAT - local_25_REFERENCE.x); // type is FLOAT value type is FLOAT
                                                local_37_FLOAT = (local_14_FLOAT - local_25_REFERENCE.y); // type is FLOAT value type is FLOAT
                                                var var309 = ((local_36_FLOAT * local_36_FLOAT) + (local_37_FLOAT * local_37_FLOAT)); // type is FLOAT value type is FLOAT
                                                var var312 = (local_17_FLOAT * local_17_FLOAT); // type is FLOAT value type is FLOAT
                                                if ((var309 <= var312)) {
                                                    break $S_722;
                                                }
                                                return;
                                                }
                                            manifold.pointCount = 1;
                                            var var314 = ojcManifold$ManifoldType.FACE_A; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@35398b0
                                            manifold.type = var314;
                                            var var315 = manifold.localNormal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@127fd02e
                                            var var319 = (local_13_FLOAT - local_25_REFERENCE.x); // type is FLOAT value type is FLOAT
                                            var315.x = var319;
                                            var var320 = manifold.localNormal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2709a8c2
                                            var var324 = (local_14_FLOAT - local_25_REFERENCE.y); // type is FLOAT value type is FLOAT
                                            var320.y = var324;
                                            var var326 = manifold.localNormal.FLOATnormalize(manifold.localNormal); // type is FLOAT value type is FLOAT
                                            var var329 = manifold.localPoint.ojcVec2setojcVec2(manifold.localPoint,local_25_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3137321c
                                            var var331 = manifold.points.data[0]; // type is REFERENCE value type is REFERENCE
                                            var var334 = var331.localPoint.ojcVec2setojcVec2(var331.localPoint,local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2ebeba92
                                            var var336 = manifold.points.data[0]; // type is REFERENCE value type is REFERENCE
                                            var336.id.VOIDzero(var336.id);
                                            return;
                                    }
                                case 584 :
                                // NORMAL
                                    $S_584 : {
                                    // NORMAL
                                        local_36_FLOAT = (local_13_FLOAT - local_24_REFERENCE.x); // type is FLOAT value type is FLOAT
                                        local_37_FLOAT = (local_14_FLOAT - local_24_REFERENCE.y); // type is FLOAT value type is FLOAT
                                        var var264 = ((local_36_FLOAT * local_36_FLOAT) + (local_37_FLOAT * local_37_FLOAT)); // type is FLOAT value type is FLOAT
                                        var var267 = (local_17_FLOAT * local_17_FLOAT); // type is FLOAT value type is FLOAT
                                        if ((var264 <= var267)) {
                                            break $S_584;
                                        }
                                        return;
                                        }
                                    manifold.pointCount = 1;
                                    var var269 = ojcManifold$ManifoldType.FACE_A; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@422ce1cb
                                    manifold.type = var269;
                                    var var270 = manifold.localNormal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@28091ef4
                                    var var274 = (local_13_FLOAT - local_24_REFERENCE.x); // type is FLOAT value type is FLOAT
                                    var270.x = var274;
                                    var var275 = manifold.localNormal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@20266e3b
                                    var var279 = (local_14_FLOAT - local_24_REFERENCE.y); // type is FLOAT value type is FLOAT
                                    var275.y = var279;
                                    var var281 = manifold.localNormal.FLOATnormalize(manifold.localNormal); // type is FLOAT value type is FLOAT
                                    var var284 = manifold.localPoint.ojcVec2setojcVec2(manifold.localPoint,local_24_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7b973a87
                                    var var286 = manifold.points.data[0]; // type is REFERENCE value type is REFERENCE
                                    var var289 = var286.localPoint.ojcVec2setojcVec2(var286.localPoint,local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5e90ae87
                                    var var291 = manifold.points.data[0]; // type is REFERENCE value type is REFERENCE
                                    var291.id.VOIDzero(var291.id);
                                    return;
                            }
                    }
                case 203 :
                // NORMAL
                    $S_203 : {
                    // NORMAL
                        var var340 = local_20_REFERENCE.data[local_22_INT]; // type is REFERENCE value type is REFERENCE
                        var local_23_REFERENCE = var340; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3e0ee51f
                        var local_24_FLOAT = (local_13_FLOAT - local_23_REFERENCE.x); // type is FLOAT value type is FLOAT
                        var local_25_FLOAT = (local_14_FLOAT - local_23_REFERENCE.y); // type is FLOAT value type is FLOAT
                        var var356 = local_21_REFERENCE.data[local_22_INT]; // type is REFERENCE value type is REFERENCE
                        var var359 = (var356.x * local_24_FLOAT); // type is FLOAT value type is FLOAT
                        var var362 = local_21_REFERENCE.data[local_22_INT]; // type is REFERENCE value type is REFERENCE
                        local_19_FLOAT = (var359 + (var362.y * local_25_FLOAT)); // type is FLOAT value type is FLOAT
                        var var369 = local_19_FLOAT; // type is FLOAT value type is FLOAT
                        var var370 = local_17_FLOAT; // type is FLOAT value type is FLOAT
                        if ((var369 <= var370)) {
                            break $S_203;
                        }
                        return;
                        }
                    $S_264 : {
                    // NORMAL
                        var var372 = local_19_FLOAT; // type is FLOAT value type is FLOAT
                        var var373 = local_16_FLOAT; // type is FLOAT value type is FLOAT
                        if ((var372 <= var373)) {
                            __label__ = 280;
                            break $S_264;
                        }
                        __label__ = 272;
                        }
                    $M_280_272 : for(;;) switch (__label__) {
                        case 272 :
                        // NORMAL
                            local_16_FLOAT = local_19_FLOAT; // type is FLOAT value type is FLOAT
                            local_15_INT = local_22_INT; // type is INT value type is INT
                            __label__ = 280;
                            continue $M_280_272;
                        case 280 :
                        // NORMAL
                            local_22_INT = (local_22_INT + 1); // type is INT value type is INT
                            __label__ = 196;
                            continue $L_196;
                    }
            }
        }
    },

    VOIDcollideEdgeAndCircleojcManifoldojcsEdgeShapeojcTransformojcsCircleShapeojcTransform : function(thisRef,manifold,edgeA,xfA,circleB,xfB) {
        var local_9_FLOAT = null; // type is FLOAT # of inits = 1
        var local_7_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_11_FLOAT = null; // type is FLOAT # of inits = 1
        var local_11_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_8_FLOAT = null; // type is FLOAT # of inits = 1
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_10_FLOAT = null; // type is FLOAT # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            manifold.pointCount = 0;
            ojcTransform.VOIDmulToOutUnsafeojcTransformojcVec2ojcVec2(xfB,circleB.m_p,thisRef.temp);
            ojcTransform.VOIDmulTransToOutUnsafeojcTransformojcVec2ojcVec2(xfA,thisRef.temp,thisRef.Q);
            local_6_REFERENCE = edgeA.m_vertex1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@b68f2fe
            local_7_REFERENCE = edgeA.m_vertex2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@f1dd741
            var var10 = thisRef.e.ojcVec2setojcVec2(thisRef.e,local_7_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4765f942
            var var12 = var10.ojcVec2subLocalojcVec2(var10,local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6b9e9378
            var var13 = thisRef.e; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@272d73f7
            var var16 = thisRef.temp.ojcVec2setojcVec2(thisRef.temp,local_7_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@46eb1f8c
            var var18 = var16.ojcVec2subLocalojcVec2(var16,thisRef.Q); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2eac41fa
            var var19 = ojcVec2.FLOATdotojcVec2ojcVec2(var13,var18); // type is FLOAT value type is FLOAT
            local_8_FLOAT = var19; // type is FLOAT value type is FLOAT
            var var22 = thisRef.e; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@31b61204
            var var25 = thisRef.temp.ojcVec2setojcVec2(thisRef.temp,thisRef.Q); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7dc86d0e
            var var27 = var25.ojcVec2subLocalojcVec2(var25,local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@63411a44
            var var28 = ojcVec2.FLOATdotojcVec2ojcVec2(var22,var27); // type is FLOAT value type is FLOAT
            local_9_FLOAT = var28; // type is FLOAT value type is FLOAT
            local_10_FLOAT = (edgeA.m_radius + circleB.m_radius); // type is FLOAT value type is FLOAT
            var var36 = thisRef.cf; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2fae2447
            var36.indexB = 0;
            var var37 = thisRef.cf; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2e093584
            var var39 = ojcContactID$Type.VERTEX.INTordinal(ojcContactID$Type.VERTEX); // type is INT value type is INT
            var var40 = Math.floor(var39); // type is BYTE value type is BYTE
            var37.typeB = var40;
            var var41 = local_9_FLOAT; // type is FLOAT value type is FLOAT
            if ((var41 > 0.0)) {
                __label__ = 343;
                break $S_0;
            }
            __label__ = 149;
            }
        for(;;) switch (__label__) {
            case 149 :
            // NORMAL
                $S_149 : {
                // NORMAL
                    local_11_REFERENCE = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7f57deb9
                    var var47 = ojcCollision.d.ojcVec2setojcVec2(ojcCollision.d,thisRef.Q); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@10179d56
                    var var49 = var47.ojcVec2subLocalojcVec2(var47,local_11_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7bef362a
                    var var52 = ojcVec2.FLOATdotojcVec2ojcVec2(ojcCollision.d,ojcCollision.d); // type is FLOAT value type is FLOAT
                    var local_12_FLOAT = var52; // type is FLOAT value type is FLOAT
                    var var55 = local_12_FLOAT; // type is FLOAT value type is FLOAT
                    var var58 = (local_10_FLOAT * local_10_FLOAT); // type is FLOAT value type is FLOAT
                    if ((var55 <= var58)) {
                        break $S_149;
                    }
                    return;
                    }
                $S_192 : {
                // NORMAL
                    var var60 = edgeA.m_hasVertex0; // type is BOOLEAN value type is BOOLEAN
                    if ((var60 == 0)) {
                        __label__ = 257;
                        break $S_192;
                    }
                    __label__ = 199;
                    }
                $M_257_199 : for(;;) switch (__label__) {
                    case 257 :
                    // NORMAL
                        var var81 = thisRef.cf; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@253da90c
                        var81.indexA = 0;
                        var var82 = thisRef.cf; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@427f1d3a
                        var var84 = ojcContactID$Type.VERTEX.INTordinal(ojcContactID$Type.VERTEX); // type is INT value type is INT
                        var var85 = Math.floor(var84); // type is BYTE value type is BYTE
                        var82.typeA = var85;
                        manifold.pointCount = 1;
                        var var86 = ojcManifold$ManifoldType.CIRCLES; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6e2ed50e
                        manifold.type = var86;
                        manifold.localNormal.VOIDsetZero(manifold.localNormal);
                        var var90 = manifold.localPoint.ojcVec2setojcVec2(manifold.localPoint,local_11_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6c72e087
                        var var92 = manifold.points.data[0]; // type is REFERENCE value type is REFERENCE
                        var92.id.VOIDsetojcContactID(var92.id,thisRef.cf);
                        var var96 = manifold.points.data[0]; // type is REFERENCE value type is REFERENCE
                        var var99 = var96.localPoint.ojcVec2setojcVec2(var96.localPoint,circleB.m_p); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@24cf51cc
                        return;
                    case 199 :
                    // NORMAL
                        var local_13_REFERENCE = edgeA.m_vertex0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1e631ea2
                        var local_14_REFERENCE = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7f57deb9
                        var var67 = thisRef.e1.ojcVec2setojcVec2(thisRef.e1,local_14_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6fd2ec5
                        var var69 = var67.ojcVec2subLocalojcVec2(var67,local_13_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7d709045
                        var var70 = thisRef.e1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@23efef16
                        var var73 = thisRef.temp.ojcVec2setojcVec2(thisRef.temp,local_14_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@25ff63c7
                        var var75 = var73.ojcVec2subLocalojcVec2(var73,thisRef.Q); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4a1beabb
                        var var76 = ojcVec2.FLOATdotojcVec2ojcVec2(var70,var75); // type is FLOAT value type is FLOAT
                        var local_15_FLOAT = var76; // type is FLOAT value type is FLOAT
                        var var79 = local_15_FLOAT; // type is FLOAT value type is FLOAT
                        if ((var79 <= 0.0)) {
                            __label__ = 257;
                            continue $M_257_199;
                        }
                        return;
                }
            case 343 :
            // NORMAL
                $S_343 : {
                // NORMAL
                    var var100 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                    if ((var100 > 0.0)) {
                        __label__ = 546;
                        break $S_343;
                    }
                    __label__ = 350;
                    }
                for(;;) switch (__label__) {
                    case 350 :
                    // NORMAL
                        $S_350 : {
                        // NORMAL
                            local_11_REFERENCE = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@177828df
                            var var105 = ojcCollision.d.ojcVec2setojcVec2(ojcCollision.d,thisRef.Q); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3310a905
                            var var107 = var105.ojcVec2subLocalojcVec2(var105,local_11_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6f5b772e
                            var var110 = ojcVec2.FLOATdotojcVec2ojcVec2(ojcCollision.d,ojcCollision.d); // type is FLOAT value type is FLOAT
                            var local_12_FLOAT = var110; // type is FLOAT value type is FLOAT
                            var var112 = local_12_FLOAT; // type is FLOAT value type is FLOAT
                            var var115 = (local_10_FLOAT * local_10_FLOAT); // type is FLOAT value type is FLOAT
                            if ((var112 <= var115)) {
                                break $S_350;
                            }
                            return;
                            }
                        $S_393 : {
                        // NORMAL
                            var var117 = edgeA.m_hasVertex3; // type is BOOLEAN value type is BOOLEAN
                            if ((var117 == 0)) {
                                __label__ = 460;
                                break $S_393;
                            }
                            __label__ = 400;
                            }
                        $M_460_400 : for(;;) switch (__label__) {
                            case 400 :
                            // NORMAL
                                var local_13_REFERENCE = edgeA.m_vertex3; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3164c059
                                var local_14_REFERENCE = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@177828df
                                var local_15_REFERENCE = thisRef.e1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@24bfaafc
                                var var124 = local_15_REFERENCE.ojcVec2setojcVec2(local_15_REFERENCE,local_13_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@12d177ef
                                var var126 = var124.ojcVec2subLocalojcVec2(var124,local_14_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2687909c
                                var var127 = local_15_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3176ea1d
                                var var130 = thisRef.temp.ojcVec2setojcVec2(thisRef.temp,thisRef.Q); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@68474e85
                                var var132 = var130.ojcVec2subLocalojcVec2(var130,local_14_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@71b0326d
                                var var133 = ojcVec2.FLOATdotojcVec2ojcVec2(var127,var132); // type is FLOAT value type is FLOAT
                                var local_16_FLOAT = var133; // type is FLOAT value type is FLOAT
                                var var136 = local_16_FLOAT; // type is FLOAT value type is FLOAT
                                if ((var136 <= 0.0)) {
                                    __label__ = 460;
                                    continue $M_460_400;
                                }
                                return;
                            case 460 :
                            // NORMAL
                                var var147 = thisRef.cf; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6b294fb7
                                var147.indexA = 1;
                                var var148 = thisRef.cf; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6d8976cd
                                var var150 = ojcContactID$Type.VERTEX.INTordinal(ojcContactID$Type.VERTEX); // type is INT value type is INT
                                var var151 = Math.floor(var150); // type is BYTE value type is BYTE
                                var148.typeA = var151;
                                manifold.pointCount = 1;
                                var var152 = ojcManifold$ManifoldType.CIRCLES; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3f682e9f
                                manifold.type = var152;
                                manifold.localNormal.VOIDsetZero(manifold.localNormal);
                                var var156 = manifold.localPoint.ojcVec2setojcVec2(manifold.localPoint,local_11_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4fbb4045
                                var var158 = manifold.points.data[0]; // type is REFERENCE value type is REFERENCE
                                var158.id.VOIDsetojcContactID(var158.id,thisRef.cf);
                                var var162 = manifold.points.data[0]; // type is REFERENCE value type is REFERENCE
                                var var165 = var162.localPoint.ojcVec2setojcVec2(var162.localPoint,circleB.m_p); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6e4eeaf2
                                return;
                        }
                    case 546 :
                    // NORMAL
                        $S_546 : {
                        // NORMAL
                            var var140 = ojcVec2.FLOATdotojcVec2ojcVec2(thisRef.e,thisRef.e); // type is FLOAT value type is FLOAT
                            local_11_FLOAT = var140; // type is FLOAT value type is FLOAT
                            var var143 = ojcCollision.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                            if ((var143 != 0)) {
                                __label__ = 580;
                                break $S_546;
                            }
                            __label__ = 565;
                            }
                        $M_565_580 : for(;;) switch (__label__) {
                            case 580 :
                            // NORMAL
                                $S_580 : {
                                // NORMAL
                                    var var168 = thisRef.P.ojcVec2setojcVec2(thisRef.P,local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4857d6e8
                                    var var170 = var168.ojcVec2mulLocalFLOAT(var168,local_8_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@36b505ab
                                    var var173 = thisRef.temp.ojcVec2setojcVec2(thisRef.temp,local_7_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2399d250
                                    var var175 = var173.ojcVec2mulLocalFLOAT(var173,local_9_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3a19a5ab
                                    var var176 = var170.ojcVec2addLocalojcVec2(var170,var175); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4c8fd496
                                    var var180 = thisRef.P.ojcVec2mulLocalFLOAT(thisRef.P,(1.0 / local_11_FLOAT)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@528918f1
                                    var var183 = ojcCollision.d.ojcVec2setojcVec2(ojcCollision.d,thisRef.Q); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3fef5ba2
                                    var var185 = var183.ojcVec2subLocalojcVec2(var183,thisRef.P); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@482c8509
                                    var var188 = ojcVec2.FLOATdotojcVec2ojcVec2(ojcCollision.d,ojcCollision.d); // type is FLOAT value type is FLOAT
                                    var local_12_FLOAT = var188; // type is FLOAT value type is FLOAT
                                    var var190 = local_12_FLOAT; // type is FLOAT value type is FLOAT
                                    var var193 = (local_10_FLOAT * local_10_FLOAT); // type is FLOAT value type is FLOAT
                                    if ((var190 <= var193)) {
                                        break $S_580;
                                    }
                                    return;
                                    }
                                $S_665 : {
                                // NORMAL
                                    var var195 = thisRef.n; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7a35c3fe
                                    var var198 = (-thisRef.e.y); // type is FLOAT value type is FLOAT
                                    var195.x = var198;
                                    var var199 = thisRef.n; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@60e112d9
                                    var var201 = thisRef.e.x; // type is FLOAT value type is FLOAT
                                    var199.y = var201;
                                    var var202 = thisRef.n; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2516772c
                                    var var205 = thisRef.temp.ojcVec2setojcVec2(thisRef.temp,thisRef.Q); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@93eba4a
                                    var var207 = var205.ojcVec2subLocalojcVec2(var205,local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5dc0a2a0
                                    var var208 = ojcVec2.FLOATdotojcVec2ojcVec2(var202,var207); // type is FLOAT value type is FLOAT
                                    if ((var208 >= 0.0)) {
                                        __label__ = 746;
                                        break $S_665;
                                    }
                                    __label__ = 722;
                                    }
                                $M_722_746 : for(;;) switch (__label__) {
                                    case 746 :
                                    // NORMAL
                                        var var219 = thisRef.n.FLOATnormalize(thisRef.n); // type is FLOAT value type is FLOAT
                                        var var220 = thisRef.cf; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@355f141b
                                        var220.indexA = 0;
                                        var var221 = thisRef.cf; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2366aa8b
                                        var var223 = ojcContactID$Type.FACE.INTordinal(ojcContactID$Type.FACE); // type is INT value type is INT
                                        var var224 = Math.floor(var223); // type is BYTE value type is BYTE
                                        var221.typeA = var224;
                                        manifold.pointCount = 1;
                                        var var225 = ojcManifold$ManifoldType.FACE_A; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5f76b847
                                        manifold.type = var225;
                                        var var228 = manifold.localNormal.ojcVec2setojcVec2(manifold.localNormal,thisRef.n); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@77bc4ab
                                        var var231 = manifold.localPoint.ojcVec2setojcVec2(manifold.localPoint,local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4a49e793
                                        var var233 = manifold.points.data[0]; // type is REFERENCE value type is REFERENCE
                                        var233.id.VOIDsetojcContactID(var233.id,thisRef.cf);
                                        var var237 = manifold.points.data[0]; // type is REFERENCE value type is REFERENCE
                                        var var240 = var237.localPoint.ojcVec2setojcVec2(var237.localPoint,circleB.m_p); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5ced2ea3
                                        return;
                                    case 722 :
                                    // NORMAL
                                        var var217 = thisRef.n.ojcVec2setFLOATFLOAT(thisRef.n,(-thisRef.n.x),(-thisRef.n.y)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@36b301f9
                                        __label__ = 746;
                                        continue $M_722_746;
                                }
                            case 565 :
                            // NORMAL
                                $S_565 : {
                                // NORMAL
                                    var var144 = local_11_FLOAT; // type is FLOAT value type is FLOAT
                                    if ((var144 > 0.0)) {
                                        __label__ = 580;
                                        continue $M_565_580;
                                    }
                                    }
                                var var146 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                jlAssertionError.VOIDinit(var146);
                                throw var146;
                        }
                }
        }
    },

    VOIDcollideEdgeAndPolygonojcManifoldojcsEdgeShapeojcTransformojcsPolygonShapeojcTransform : function(thisRef,manifold,edgeA,xfA,polygonB,xfB) {
        var __label__ = null;
        thisRef.collider.VOIDcollideojcManifoldojcsEdgeShapeojcTransformojcsPolygonShapeojcTransform(thisRef.collider,manifold,edgeA,xfA,polygonB,xfB);
        return;
    },

    classInitCheck : function() {
        if (!ojcCollision.__initialized) {
            ojcCollision.__initialized = true;
            var thePrototype = ojcCollision.Create.prototype;
            thePrototype.instanceOf = ojcCollision.instanceOf;
            thePrototype.ClassgetClass = ojcCollision.ClassgetClass;
            thePrototype.VOIDcollideEdgeAndPolygonojcManifoldojcsEdgeShapeojcTransformojcsPolygonShapeojcTransform = ojcCollision.VOIDcollideEdgeAndPolygonojcManifoldojcsEdgeShapeojcTransformojcsPolygonShapeojcTransform;
            thePrototype.VOIDcollideEdgeAndCircleojcManifoldojcsEdgeShapeojcTransformojcsCircleShapeojcTransform = ojcCollision.VOIDcollideEdgeAndCircleojcManifoldojcsEdgeShapeojcTransformojcsCircleShapeojcTransform;
            thePrototype.VOIDcollidePolygonAndCircleojcManifoldojcsPolygonShapeojcTransformojcsCircleShapeojcTransform = ojcCollision.VOIDcollidePolygonAndCircleojcManifoldojcsPolygonShapeojcTransformojcsCircleShapeojcTransform;
            thePrototype.VOIDcollideCirclesojcManifoldojcsCircleShapeojcTransformojcsCircleShapeojcTransform = ojcCollision.VOIDcollideCirclesojcManifoldojcsCircleShapeojcTransformojcsCircleShapeojcTransform;
            thePrototype.VOIDfindIncidentEdgeA1ojcCollision$ClipVertexojcsPolygonShapeojcTransformINTojcsPolygonShapeojcTransform = ojcCollision.VOIDfindIncidentEdgeA1ojcCollision$ClipVertexojcsPolygonShapeojcTransformINTojcsPolygonShapeojcTransform;
            thePrototype.FLOATedgeSeparationojcsPolygonShapeojcTransformINTojcsPolygonShapeojcTransform = ojcCollision.FLOATedgeSeparationojcsPolygonShapeojcTransformINTojcsPolygonShapeojcTransform;
            thePrototype.VOIDfindMaxSeparationojcCollision$EdgeResultsojcsPolygonShapeojcTransformojcsPolygonShapeojcTransform = ojcCollision.VOIDfindMaxSeparationojcCollision$EdgeResultsojcsPolygonShapeojcTransformojcsPolygonShapeojcTransform;
            thePrototype.VOIDcollidePolygonsojcManifoldojcsPolygonShapeojcTransformojcsPolygonShapeojcTransform = ojcCollision.VOIDcollidePolygonsojcManifoldojcsPolygonShapeojcTransformojcsPolygonShapeojcTransform;
            thePrototype.BOOLEANtestOverlapojcsShapeINTojcsShapeINTojcTransformojcTransform = ojcCollision.BOOLEANtestOverlapojcsShapeINTojcsShapeINTojcTransformojcTransform;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            ojcVec2.classInitCheck();
            ojcCollision.VOIDclinit();
        }
    },

};

var ojcDistanceInput = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 67,
    __implementedTypes : [1,67],

    Create : function() {
        this.proxyA = null; // declared in org.jbox2d.collision.DistanceInput
        this.proxyB = null; // declared in org.jbox2d.collision.DistanceInput
        this.transformA = null; // declared in org.jbox2d.collision.DistanceInput
        this.transformB = null; // declared in org.jbox2d.collision.DistanceInput
        this.useRadii = false; // declared in org.jbox2d.collision.DistanceInput
    },

    instanceOf : function(aType) {
        return ojcDistanceInput.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcDistanceInput;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcDistance$DistanceProxy.Create(); // type is REFERENCE value type is REFERENCE
        ojcDistance$DistanceProxy.VOIDinit(var0);
        thisRef.proxyA = var0;
        var var1 = new ojcDistance$DistanceProxy.Create(); // type is REFERENCE value type is REFERENCE
        ojcDistance$DistanceProxy.VOIDinit(var1);
        thisRef.proxyB = var1;
        var var2 = new ojcTransform.Create(); // type is REFERENCE value type is REFERENCE
        ojcTransform.VOIDinit(var2);
        thisRef.transformA = var2;
        var var3 = new ojcTransform.Create(); // type is REFERENCE value type is REFERENCE
        ojcTransform.VOIDinit(var3);
        thisRef.transformB = var3;
        return;
    },

    classInitCheck : function() {
        if (!ojcDistanceInput.__initialized) {
            ojcDistanceInput.__initialized = true;
            var thePrototype = ojcDistanceInput.Create.prototype;
            thePrototype.instanceOf = ojcDistanceInput.instanceOf;
            thePrototype.ClassgetClass = ojcDistanceInput.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojcDistance$DistanceProxy = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 68,
    __implementedTypes : [1,68],
    $assertionsDisabled : false, // declared in org.jbox2d.collision.Distance$DistanceProxy

    Create : function() {
        this.m_vertices = null; // declared in org.jbox2d.collision.Distance$DistanceProxy
        this.m_buffer = null; // declared in org.jbox2d.collision.Distance$DistanceProxy
        this.m_count = 0; // declared in org.jbox2d.collision.Distance$DistanceProxy
        this.m_radius = 0; // declared in org.jbox2d.collision.Distance$DistanceProxy
    },

    instanceOf : function(aType) {
        return ojcDistance$DistanceProxy.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcDistance$DistanceProxy;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcDistance.BOOLEANdesiredAssertionStatus(ojcDistance); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_9_13 : for(;;) switch (__label__) {
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_9_13;
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_9_13;
        }
        ojcDistance$DistanceProxy.$assertionsDisabled = var1;
        return;
    },

    VOIDinit : function(thisRef) {
        var local_1_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = bytecoder.newArray(8,null); // type is REFERENCE value type is REFERENCE
            thisRef.m_vertices = var0;
            local_1_INT = 0; // type is INT value type is INT
            __label__ = 15;
            }
        $L_15 : for (;;) {
            $S_15 : {
            // NORMAL
                var var3 = local_1_INT; // type is INT value type is INT
                var var5 = thisRef.m_vertices.data.length; // type is INT value type is INT
                if ((var3 >= var5)) {
                    __label__ = 43;
                    break $S_15;
                }
                __label__ = 24;
                }
            for(;;) switch (__label__) {
                case 43 :
                // NORMAL
                    var var9 = bytecoder.newArray(2,null); // type is REFERENCE value type is REFERENCE
                    thisRef.m_buffer = var9;
                    thisRef.m_count = 0;
                    thisRef.m_radius = 0.0;
                    return;
                case 24 :
                // NORMAL
                    var var6 = thisRef.m_vertices; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@551dd41c
                    var var7 = local_1_INT; // type is INT value type is INT
                    var var8 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
                    ojcVec2.VOIDinit(var8);
                    var6.data[var7] = var8;
                    local_1_INT = (local_1_INT + 1); // type is INT value type is INT
                    __label__ = 15;
                    continue $L_15;
            }
        }
    },

    VOIDsetojcsShapeINT : function(thisRef,shape,index) {
        var local_5_INT = null; // type is INT # of inits = 3
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcDistance$1.$SwitchMap$org$jbox2d$collision$shapes$ShapeType; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@ccd0d76
            var var1 = shape.ojcsShapeTypegetType(shape); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3de4bf2
            var var2 = var1.INTordinal(var1); // type is INT value type is INT
            var var3 = var0.data[var2]; // type is INT value type is INT
            if (var3 < 1 || var3 > 4) {
             __label__ = 330;
            break $S_0;
            }
            switch(var3 - 1) {
             case 0:
                 __label__ = 40;
            break $S_0;
             case 1:
                 __label__ = 75;
            break $S_0;
             case 2:
                 __label__ = 139;
            break $S_0;
             case 3:
                 __label__ = 277;
            break $S_0;
            }
            throw 'Illegal jump target!';
            }
        for(;;) switch (__label__) {
            case 139 :
            // NORMAL
                $S_139 : {
                // NORMAL
                    local_5_REFERENCE = shape; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@26310290
                    var var5 = ojcDistance$DistanceProxy.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                    if ((var5 != 0)) {
                        __label__ = 173;
                        break $S_139;
                    }
                    __label__ = 151;
                    }
                $M_173_151 : for(;;) switch (__label__) {
                    case 151 :
                    // NORMAL
                        $S_151 : {
                        // NORMAL
                            if ((0 > index)) {
                                __label__ = 165;
                                break $S_151;
                            }
                            __label__ = 156;
                            }
                        $M_156_165 : for(;;) switch (__label__) {
                            case 156 :
                            // NORMAL
                                var var7 = local_5_REFERENCE.m_count; // type is INT value type is INT
                                if ((index < var7)) {
                                    __label__ = 173;
                                    continue $M_173_151;
                                }
                                __label__ = 165;
                                continue $M_156_165;
                            case 165 :
                            // NORMAL
                                var var75 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                jlAssertionError.VOIDinit(var75);
                                throw var75;
                        }
                    case 173 :
                    // NORMAL
                        $S_173 : {
                        // NORMAL
                            var var8 = thisRef.m_buffer; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@44df3699
                            var var11 = local_5_REFERENCE.m_vertices.data[index]; // type is REFERENCE value type is REFERENCE
                            var8.data[0] = var11;
                            var var12 = (index + 1); // type is INT value type is INT
                            var var14 = local_5_REFERENCE.m_count; // type is INT value type is INT
                            if ((var12 >= var14)) {
                                __label__ = 215;
                                break $S_173;
                            }
                            __label__ = 197;
                            }
                        $M_215_197 : for(;;) switch (__label__) {
                            case 197 :
                            // NORMAL
                                var var19 = thisRef.m_buffer; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@5eca83bd
                                var var23 = local_5_REFERENCE.m_vertices.data[(index + 1)]; // type is REFERENCE value type is REFERENCE
                                var19.data[1] = var23;
                                break $M_215_197;
                            case 215 :
                            // NORMAL
                                var var15 = thisRef.m_buffer; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3a8883af
                                var var18 = local_5_REFERENCE.m_vertices.data[0]; // type is REFERENCE value type is REFERENCE
                                var15.data[1] = var18;
                                break $M_215_197;
                        }
                        var var25 = thisRef.m_vertices.data[0]; // type is REFERENCE value type is REFERENCE
                        var var27 = thisRef.m_buffer.data[0]; // type is REFERENCE value type is REFERENCE
                        var var28 = var25.ojcVec2setojcVec2(var25,var27); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4bf8ded7
                        var var30 = thisRef.m_vertices.data[1]; // type is REFERENCE value type is REFERENCE
                        var var32 = thisRef.m_buffer.data[1]; // type is REFERENCE value type is REFERENCE
                        var var33 = var30.ojcVec2setojcVec2(var30,var32); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@76ae52cf
                        thisRef.m_count = 2;
                        var var35 = local_5_REFERENCE.m_radius; // type is FLOAT value type is FLOAT
                        thisRef.m_radius = var35;
                        return;
                }
            case 330 :
            // NORMAL
                $S_330 : {
                // NORMAL
                    var var66 = ojcDistance$DistanceProxy.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                    if ((var66 != 0)) {
                        return;
                    }
                    }
                var var76 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var76);
                throw var76;
            case 40 :
            // NORMAL
                var local_3_REFERENCE = shape; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@26310290
                var var47 = thisRef.m_vertices.data[0]; // type is REFERENCE value type is REFERENCE
                var var50 = var47.ojcVec2setojcVec2(var47,local_3_REFERENCE.m_p); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7cf3f0cc
                thisRef.m_count = 1;
                var var52 = local_3_REFERENCE.m_radius; // type is FLOAT value type is FLOAT
                thisRef.m_radius = var52;
                return;
            case 277 :
            // NORMAL
                var local_6_REFERENCE = shape; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@26310290
                var var55 = thisRef.m_vertices.data[0]; // type is REFERENCE value type is REFERENCE
                var var58 = var55.ojcVec2setojcVec2(var55,local_6_REFERENCE.m_vertex1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2189106
                var var60 = thisRef.m_vertices.data[1]; // type is REFERENCE value type is REFERENCE
                var var63 = var60.ojcVec2setojcVec2(var60,local_6_REFERENCE.m_vertex2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@f1bf9f4
                thisRef.m_count = 2;
                var var65 = local_6_REFERENCE.m_radius; // type is FLOAT value type is FLOAT
                thisRef.m_radius = var65;
                return;
            case 75 :
            // NORMAL
                $S_75 : {
                // NORMAL
                    local_4_REFERENCE = shape; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@26310290
                    var var38 = local_4_REFERENCE.m_count; // type is INT value type is INT
                    thisRef.m_count = var38;
                    var var40 = local_4_REFERENCE.m_radius; // type is FLOAT value type is FLOAT
                    thisRef.m_radius = var40;
                    local_5_INT = 0; // type is INT value type is INT
                    __label__ = 102;
                    }
                $L_102 : for (;;) {
                    $S_102 : {
                    // NORMAL
                        var var43 = local_5_INT; // type is INT value type is INT
                        var var44 = thisRef.m_count; // type is INT value type is INT
                        if ((var43 >= var44)) {
                            __label__ = 136;
                            break $S_102;
                        }
                        __label__ = 111;
                        }
                    for(;;) switch (__label__) {
                        case 111 :
                        // NORMAL
                            var var69 = thisRef.m_vertices.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                            var var73 = local_4_REFERENCE.m_vertices.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                            var var74 = var69.ojcVec2setojcVec2(var69,var73); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@ba7eaf2
                            local_5_INT = (local_5_INT + 1); // type is INT value type is INT
                            __label__ = 102;
                            continue $L_102;
                        case 136 :
                        // NORMAL
                            return;
                    }
                }
        }
    },

    ojcVec2getVertexINT : function(thisRef,index) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcDistance$DistanceProxy.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 27;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_6_27 : for(;;) switch (__label__) {
            case 27 :
            // NORMAL
                var var4 = thisRef.m_vertices.data[index]; // type is REFERENCE value type is REFERENCE
                return var4;
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    if ((0 > index)) {
                        __label__ = 19;
                        break $S_6;
                    }
                    __label__ = 11;
                    }
                $M_19_11 : for(;;) switch (__label__) {
                    case 11 :
                    // NORMAL
                        var var1 = thisRef.m_count; // type is INT value type is INT
                        if ((index < var1)) {
                            __label__ = 27;
                            continue $M_6_27;
                        }
                        __label__ = 19;
                        continue $M_19_11;
                    case 19 :
                    // NORMAL
                        var var2 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                        jlAssertionError.VOIDinit(var2);
                        throw var2;
                }
        }
    },

    INTgetSupportojcVec2 : function(thisRef,d) {
        var local_3_FLOAT = null; // type is FLOAT # of inits = 3
        var local_2_INT = null; // type is INT # of inits = 3
        var local_5_FLOAT = null; // type is FLOAT # of inits = 1
        var local_4_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_2_INT = 0; // type is INT value type is INT
            var var3 = thisRef.m_vertices.data[0]; // type is REFERENCE value type is REFERENCE
            var var4 = ojcVec2.FLOATdotojcVec2ojcVec2(var3,d); // type is FLOAT value type is FLOAT
            local_3_FLOAT = var4; // type is FLOAT value type is FLOAT
            local_4_INT = 1; // type is INT value type is INT
            __label__ = 16;
            }
        $L_16 : for (;;) {
            $S_16 : {
            // NORMAL
                var var9 = local_4_INT; // type is INT value type is INT
                var var10 = thisRef.m_count; // type is INT value type is INT
                if ((var9 >= var10)) {
                    return local_2_INT;
                }
                }
            $S_25 : {
            // NORMAL
                var var13 = thisRef.m_vertices.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                var var14 = ojcVec2.FLOATdotojcVec2ojcVec2(var13,d); // type is FLOAT value type is FLOAT
                local_5_FLOAT = var14; // type is FLOAT value type is FLOAT
                var var17 = local_5_FLOAT; // type is FLOAT value type is FLOAT
                var var18 = local_3_FLOAT; // type is FLOAT value type is FLOAT
                if ((var17 <= var18)) {
                    __label__ = 51;
                    break $S_25;
                }
                __label__ = 45;
                }
            $M_51_45 : for(;;) switch (__label__) {
                case 51 :
                // NORMAL
                    local_4_INT = (local_4_INT + 1); // type is INT value type is INT
                    __label__ = 16;
                    continue $L_16;
                case 45 :
                // NORMAL
                    local_2_INT = local_4_INT; // type is INT value type is INT
                    local_3_FLOAT = local_5_FLOAT; // type is FLOAT value type is FLOAT
                    __label__ = 51;
                    continue $M_51_45;
            }
        }
    },

    classInitCheck : function() {
        if (!ojcDistance$DistanceProxy.__initialized) {
            ojcDistance$DistanceProxy.__initialized = true;
            var thePrototype = ojcDistance$DistanceProxy.Create.prototype;
            thePrototype.instanceOf = ojcDistance$DistanceProxy.instanceOf;
            thePrototype.ClassgetClass = ojcDistance$DistanceProxy.ClassgetClass;
            thePrototype.INTgetSupportojcVec2 = ojcDistance$DistanceProxy.INTgetSupportojcVec2;
            thePrototype.ojcVec2getVertexINT = ojcDistance$DistanceProxy.ojcVec2getVertexINT;
            thePrototype.VOIDsetojcsShapeINT = ojcDistance$DistanceProxy.VOIDsetojcsShapeINT;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            ojcDistance$DistanceProxy.VOIDclinit();
        }
    },

};

var ojcTransform = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 69,
    __implementedTypes : [1,2,69],
    $assertionsDisabled : false, // declared in org.jbox2d.common.Transform
    pool : null, // declared in org.jbox2d.common.Transform

    Create : function() {
        this.p = null; // declared in org.jbox2d.common.Transform
        this.q = null; // declared in org.jbox2d.common.Transform
    },

    instanceOf : function(aType) {
        return ojcTransform.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcTransform;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcTransform.BOOLEANdesiredAssertionStatus(ojcTransform); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_9_13 : for(;;) switch (__label__) {
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_9_13;
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_9_13;
        }
        ojcTransform.$assertionsDisabled = var1;
        var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var2);
        ojcTransform.pool = var2;
        return;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var0);
        thisRef.p = var0;
        var var1 = new ojcRot.Create(); // type is REFERENCE value type is REFERENCE
        ojcRot.VOIDinit(var1);
        thisRef.q = var1;
        return;
    },

    VOIDmulToOutUnsafeojcTransformojcVec2ojcVec2 : function(T,v,out) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcTransform.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 19;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_19_6 : for(;;) switch (__label__) {
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    if ((v != out)) {
                        __label__ = 19;
                        continue $M_19_6;
                    }
                    }
                var var1 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var1);
                throw var1;
            case 19 :
            // NORMAL
                var var13 = (((T.q.c * v.x) - (T.q.s * v.y)) + T.p.x); // type is FLOAT value type is FLOAT
                out.x = var13;
                var var25 = (((T.q.s * v.x) + (T.q.c * v.y)) + T.p.y); // type is FLOAT value type is FLOAT
                out.y = var25;
                return;
        }
    },

    VOIDmulTransToOutUnsafeojcTransformojcVec2ojcVec2 : function(T,v,out) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcTransform.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 19;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_6_19 : for(;;) switch (__label__) {
            case 19 :
            // NORMAL
                var local_3_FLOAT = (v.x - T.p.x); // type is FLOAT value type is FLOAT
                var local_4_FLOAT = (v.y - T.p.y); // type is FLOAT value type is FLOAT
                var var21 = ((T.q.c * local_3_FLOAT) + (T.q.s * local_4_FLOAT)); // type is FLOAT value type is FLOAT
                out.x = var21;
                var var31 = (((-T.q.s) * local_3_FLOAT) + (T.q.c * local_4_FLOAT)); // type is FLOAT value type is FLOAT
                out.y = var31;
                return;
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    if ((v != out)) {
                        __label__ = 19;
                        continue $M_6_19;
                    }
                    }
                var var32 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var32);
                throw var32;
        }
    },

    VOIDmulTransToOutojcTransformojcVec2ojcVec2 : function(T,v,out) {
        var __label__ = null;
        var local_3_FLOAT = (v.x - T.p.x); // type is FLOAT value type is FLOAT
        var local_4_FLOAT = (v.y - T.p.y); // type is FLOAT value type is FLOAT
        var local_5_FLOAT = (((-T.q.s) * local_3_FLOAT) + (T.q.c * local_4_FLOAT)); // type is FLOAT value type is FLOAT
        var var32 = ((T.q.c * local_3_FLOAT) + (T.q.s * local_4_FLOAT)); // type is FLOAT value type is FLOAT
        out.x = var32;
        var var33 = local_5_FLOAT; // type is FLOAT value type is FLOAT
        out.y = var33;
        return;
    },

    jlStringtoString : function(thisRef) {
        var __label__ = null;
        var local_1_REFERENCE = bytecoder.stringpool[20]; // type is REFERENCE value type is REFERENCE
        var var1 = new jlStringBuilder.Create(); // type is REFERENCE value type is REFERENCE
        jlStringBuilder.VOIDinit(var1);
        var var3 = var1.jlStringBuilderappendjlString(var1,local_1_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@288779af
        var var4 = var3.jlStringBuilderappendjlString(var3,bytecoder.stringpool[21]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@33af7a8b
        var var6 = var4.jlStringBuilderappendjlObject(var4,thisRef.p); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2ac669c6
        var var7 = var6.jlStringBuilderappendjlString(var6,bytecoder.stringpool[22]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@463391d4
        var var8 = var7.jlStringtoString(var7); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@55eac2bc
        var local_1_REFERENCE = var8; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1dd991a8
        var var9 = new jlStringBuilder.Create(); // type is REFERENCE value type is REFERENCE
        jlStringBuilder.VOIDinit(var9);
        var var11 = var9.jlStringBuilderappendjlString(var9,local_1_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@448438c
        var var12 = var11.jlStringBuilderappendjlString(var11,bytecoder.stringpool[23]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5eafcfe0
        var var14 = var12.jlStringBuilderappendjlObject(var12,thisRef.q); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5d5319ab
        var var15 = var14.jlStringBuilderappendjlString(var14,bytecoder.stringpool[22]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@cd69778
        var var16 = var15.jlStringtoString(var15); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4ac4f14d
        var local_1_REFERENCE = var16; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6a34f73a
        return local_1_REFERENCE;
    },

    ojcTransformsetojcTransform : function(thisRef,xf) {
        var __label__ = null;
        var var2 = thisRef.p.ojcVec2setojcVec2(thisRef.p,xf.p); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@374f419f
        var var5 = thisRef.q.ojcRotsetojcRot(thisRef.q,xf.q); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@69436609
        return thisRef;
    },

    VOIDmulToOutojcTransformojcVec2ojcVec2 : function(T,v,out) {
        var __label__ = null;
        var local_3_FLOAT = (((T.q.s * v.x) + (T.q.c * v.y)) + T.p.y); // type is FLOAT value type is FLOAT
        var var25 = (((T.q.c * v.x) - (T.q.s * v.y)) + T.p.x); // type is FLOAT value type is FLOAT
        out.x = var25;
        var var26 = local_3_FLOAT; // type is FLOAT value type is FLOAT
        out.y = var26;
        return;
    },

    VOIDmulTransToOutUnsafeojcTransformojcTransformojcTransform : function(A,B,out) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcTransform.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 19;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_6_19 : for(;;) switch (__label__) {
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    if ((out != A)) {
                        __label__ = 19;
                        continue $M_6_19;
                    }
                    }
                var var3 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var3);
                throw var3;
            case 19 :
            // NORMAL
                $S_19 : {
                // NORMAL
                    var var1 = ojcTransform.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                    if ((var1 != 0)) {
                        __label__ = 38;
                        break $S_19;
                    }
                    __label__ = 25;
                    }
                $M_25_38 : for(;;) switch (__label__) {
                    case 25 :
                    // NORMAL
                        $S_25 : {
                        // NORMAL
                            if ((out != B)) {
                                __label__ = 38;
                                continue $M_25_38;
                            }
                            }
                        var var2 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                        jlAssertionError.VOIDinit(var2);
                        throw var2;
                    case 38 :
                    // NORMAL
                        ojcRot.VOIDmulTransUnsafeojcRotojcRotojcRot(A.q,B.q,out.q);
                        var var9 = ojcTransform.pool.ojcVec2setojcVec2(ojcTransform.pool,B.p); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@592d7511
                        var var11 = var9.ojcVec2subLocalojcVec2(var9,A.p); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7b89d2c2
                        ojcRot.VOIDmulTransUnsafeojcRotojcVec2ojcVec2(A.q,ojcTransform.pool,out.p);
                        return;
                }
        }
    },

    classInitCheck : function() {
        if (!ojcTransform.__initialized) {
            ojcTransform.__initialized = true;
            var thePrototype = ojcTransform.Create.prototype;
            thePrototype.instanceOf = ojcTransform.instanceOf;
            thePrototype.ClassgetClass = ojcTransform.ClassgetClass;
            thePrototype.ojcTransformsetojcTransform = ojcTransform.ojcTransformsetojcTransform;
            thePrototype.jlStringtoString = ojcTransform.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            jiSerializable.classInitCheck();
            ojcVec2.classInitCheck();
            ojcTransform.VOIDclinit();
        }
    },

};

var ojcRot = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 70,
    __implementedTypes : [1,70,2],
    $assertionsDisabled : false, // declared in org.jbox2d.common.Rot

    Create : function() {
        this.s = 0; // declared in org.jbox2d.common.Rot
        this.c = 0; // declared in org.jbox2d.common.Rot
    },

    instanceOf : function(aType) {
        return ojcRot.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcRot;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcRot.BOOLEANdesiredAssertionStatus(ojcRot); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_13_9 : for(;;) switch (__label__) {
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_13_9;
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_13_9;
        }
        ojcRot.$assertionsDisabled = var1;
        return;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = thisRef.ojcRotsetIdentity(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2e7cfc3a
        return;
    },

    ojcRotsetIdentity : function(thisRef) {
        var __label__ = null;
        thisRef.s = 0.0;
        thisRef.c = 1.0;
        return thisRef;
    },

    ojcRotsetFLOAT : function(thisRef,angle) {
        var __label__ = null;
        var var0 = ojcMathUtils.FLOATsinFLOAT(angle); // type is FLOAT value type is FLOAT
        thisRef.s = var0;
        var var1 = ojcMathUtils.FLOATcosFLOAT(angle); // type is FLOAT value type is FLOAT
        thisRef.c = var1;
        return thisRef;
    },

    VOIDmulToOutUnsafeojcRotojcVec2ojcVec2 : function(q,v,out) {
        var __label__ = null;
        var var6 = ((q.c * v.x) - (q.s * v.y)); // type is FLOAT value type is FLOAT
        out.x = var6;
        var var13 = ((q.s * v.x) + (q.c * v.y)); // type is FLOAT value type is FLOAT
        out.y = var13;
        return;
    },

    VOIDmulTransUnsafeojcRotojcVec2ojcVec2 : function(q,v,out) {
        var __label__ = null;
        var var6 = ((q.c * v.x) + (q.s * v.y)); // type is FLOAT value type is FLOAT
        out.x = var6;
        var var14 = (((-q.s) * v.x) + (q.c * v.y)); // type is FLOAT value type is FLOAT
        out.y = var14;
        return;
    },

    jlStringtoString : function(thisRef) {
        var __label__ = null;
        var var0 = new jlStringBuilder.Create(); // type is REFERENCE value type is REFERENCE
        jlStringBuilder.VOIDinit(var0);
        var var1 = var0.jlStringBuilderappendjlString(var0,bytecoder.stringpool[24]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1442c89d
        var var3 = var1.jlStringBuilderappendFLOAT(var1,thisRef.s); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6cef988b
        var var4 = var3.jlStringBuilderappendjlString(var3,bytecoder.stringpool[25]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2dfbb9bd
        var var6 = var4.jlStringBuilderappendFLOAT(var4,thisRef.c); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1d5c3d6d
        var var7 = var6.jlStringBuilderappendjlString(var6,bytecoder.stringpool[10]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1fd8087b
        var var8 = var7.jlStringtoString(var7); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@f63e0cb
        return var8;
    },

    ojcRotsetojcRot : function(thisRef,other) {
        var __label__ = null;
        var var0 = other.s; // type is FLOAT value type is FLOAT
        thisRef.s = var0;
        var var1 = other.c; // type is FLOAT value type is FLOAT
        thisRef.c = var1;
        return thisRef;
    },

    VOIDmulToOutojcRotojcVec2ojcVec2 : function(q,v,out) {
        var __label__ = null;
        var local_3_FLOAT = ((q.s * v.x) + (q.c * v.y)); // type is FLOAT value type is FLOAT
        var var15 = ((q.c * v.x) - (q.s * v.y)); // type is FLOAT value type is FLOAT
        out.x = var15;
        var var16 = local_3_FLOAT; // type is FLOAT value type is FLOAT
        out.y = var16;
        return;
    },

    VOIDmulTransUnsafeojcRotojcRotojcRot : function(q,r,out) {
        var __label__ = null;
        var var6 = ((q.c * r.s) - (q.s * r.c)); // type is FLOAT value type is FLOAT
        out.s = var6;
        var var13 = ((q.c * r.c) + (q.s * r.s)); // type is FLOAT value type is FLOAT
        out.c = var13;
        return;
    },

    classInitCheck : function() {
        if (!ojcRot.__initialized) {
            ojcRot.__initialized = true;
            var thePrototype = ojcRot.Create.prototype;
            thePrototype.instanceOf = ojcRot.instanceOf;
            thePrototype.ClassgetClass = ojcRot.ClassgetClass;
            thePrototype.ojcRotsetojcRot = ojcRot.ojcRotsetojcRot;
            thePrototype.jlStringtoString = ojcRot.jlStringtoString;
            thePrototype.ojcRotsetFLOAT = ojcRot.ojcRotsetFLOAT;
            thePrototype.ojcRotsetIdentity = ojcRot.ojcRotsetIdentity;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            jiSerializable.classInitCheck();
            ojcRot.VOIDclinit();
        }
    },

};

var ojcDistance$SimplexCache = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 71,
    __implementedTypes : [1,71],

    Create : function() {
        this.indexA = null; // declared in org.jbox2d.collision.Distance$SimplexCache
        this.indexB = null; // declared in org.jbox2d.collision.Distance$SimplexCache
        this.metric = 0; // declared in org.jbox2d.collision.Distance$SimplexCache
        this.count = 0; // declared in org.jbox2d.collision.Distance$SimplexCache
    },

    instanceOf : function(aType) {
        return ojcDistance$SimplexCache.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcDistance$SimplexCache;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = bytecoder.newArray(3,0); // type is REFERENCE value type is REFERENCE
        thisRef.indexA = var0;
        var var1 = bytecoder.newArray(3,0); // type is REFERENCE value type is REFERENCE
        thisRef.indexB = var1;
        thisRef.metric = 0.0;
        thisRef.count = 0;
        var var2 = thisRef.indexA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@28fa30c0
        var2.data[0] = 2147483647;
        var var3 = thisRef.indexA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@7dbeceb3
        var3.data[1] = 2147483647;
        var var4 = thisRef.indexA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@5e77a9c7
        var4.data[2] = 2147483647;
        var var5 = thisRef.indexB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@239842f1
        var5.data[0] = 2147483647;
        var var6 = thisRef.indexB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@5a1d1a72
        var6.data[1] = 2147483647;
        var var7 = thisRef.indexB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@51dd8cd4
        var7.data[2] = 2147483647;
        return;
    },

    classInitCheck : function() {
        if (!ojcDistance$SimplexCache.__initialized) {
            ojcDistance$SimplexCache.__initialized = true;
            var thePrototype = ojcDistance$SimplexCache.Create.prototype;
            thePrototype.instanceOf = ojcDistance$SimplexCache.instanceOf;
            thePrototype.ClassgetClass = ojcDistance$SimplexCache.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojcDistanceOutput = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 72,
    __implementedTypes : [1,72],

    Create : function() {
        this.pointA = null; // declared in org.jbox2d.collision.DistanceOutput
        this.pointB = null; // declared in org.jbox2d.collision.DistanceOutput
        this.distance = 0; // declared in org.jbox2d.collision.DistanceOutput
        this.iterations = 0; // declared in org.jbox2d.collision.DistanceOutput
    },

    instanceOf : function(aType) {
        return ojcDistanceOutput.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcDistanceOutput;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var0);
        thisRef.pointA = var0;
        var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var1);
        thisRef.pointB = var1;
        return;
    },

    classInitCheck : function() {
        if (!ojcDistanceOutput.__initialized) {
            ojcDistanceOutput.__initialized = true;
            var thePrototype = ojcDistanceOutput.Create.prototype;
            thePrototype.instanceOf = ojcDistanceOutput.instanceOf;
            thePrototype.ClassgetClass = ojcDistanceOutput.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojcCollision$EdgeResults = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 73,
    __implementedTypes : [1,73],

    Create : function() {
        this.edgeIndex = 0; // declared in org.jbox2d.collision.Collision$EdgeResults
        this.separation = 0; // declared in org.jbox2d.collision.Collision$EdgeResults
    },

    instanceOf : function(aType) {
        return ojcCollision$EdgeResults.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcCollision$EdgeResults;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitojcCollision$1 : function(thisRef,x0) {
        var __label__ = null;
        ojcCollision$EdgeResults.VOIDinit(thisRef);
        return;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    classInitCheck : function() {
        if (!ojcCollision$EdgeResults.__initialized) {
            ojcCollision$EdgeResults.__initialized = true;
            var thePrototype = ojcCollision$EdgeResults.Create.prototype;
            thePrototype.instanceOf = ojcCollision$EdgeResults.instanceOf;
            thePrototype.ClassgetClass = ojcCollision$EdgeResults.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojcCollision$1 = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 74,
    __implementedTypes : [1,74],

    Create : function() {
    },

    instanceOf : function(aType) {
        return ojcCollision$1.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcCollision$1;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    classInitCheck : function() {
        if (!ojcCollision$1.__initialized) {
            ojcCollision$1.__initialized = true;
            var thePrototype = ojcCollision$1.Create.prototype;
            thePrototype.instanceOf = ojcCollision$1.instanceOf;
            thePrototype.ClassgetClass = ojcCollision$1.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojcCollision$ClipVertex = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 75,
    __implementedTypes : [75,1],

    Create : function() {
        this.v = null; // declared in org.jbox2d.collision.Collision$ClipVertex
        this.id = null; // declared in org.jbox2d.collision.Collision$ClipVertex
    },

    instanceOf : function(aType) {
        return ojcCollision$ClipVertex.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcCollision$ClipVertex;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var0);
        thisRef.v = var0;
        var var1 = new ojcContactID.Create(); // type is REFERENCE value type is REFERENCE
        ojcContactID.VOIDinit(var1);
        thisRef.id = var1;
        return;
    },

    VOIDsetojcCollision$ClipVertex : function(thisRef,cv) {
        var __label__ = null;
        var local_2_REFERENCE = cv.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@47af8a2b
        var var2 = thisRef.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7ad3ac3d
        var var4 = local_2_REFERENCE.x; // type is FLOAT value type is FLOAT
        var2.x = var4;
        var var5 = thisRef.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@16d51d74
        var var7 = local_2_REFERENCE.y; // type is FLOAT value type is FLOAT
        var5.y = var7;
        var local_3_REFERENCE = cv.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@71f3120d
        var var10 = thisRef.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4a3620ca
        var var12 = local_3_REFERENCE.indexA; // type is BYTE value type is BYTE
        var10.indexA = var12;
        var var13 = thisRef.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2d63cff5
        var var15 = local_3_REFERENCE.indexB; // type is BYTE value type is BYTE
        var13.indexB = var15;
        var var16 = thisRef.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@13e34990
        var var18 = local_3_REFERENCE.typeA; // type is BYTE value type is BYTE
        var16.typeA = var18;
        var var19 = thisRef.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7ae9429b
        var var21 = local_3_REFERENCE.typeB; // type is BYTE value type is BYTE
        var19.typeB = var21;
        return;
    },

    classInitCheck : function() {
        if (!ojcCollision$ClipVertex.__initialized) {
            ojcCollision$ClipVertex.__initialized = true;
            var thePrototype = ojcCollision$ClipVertex.Create.prototype;
            thePrototype.instanceOf = ojcCollision$ClipVertex.instanceOf;
            thePrototype.ClassgetClass = ojcCollision$ClipVertex.ClassgetClass;
            thePrototype.VOIDsetojcCollision$ClipVertex = ojcCollision$ClipVertex.VOIDsetojcCollision$ClipVertex;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojcContactID = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 76,
    __implementedTypes : [1,14,76],

    Create : function() {
        this.indexA = 0; // declared in org.jbox2d.collision.ContactID
        this.indexB = 0; // declared in org.jbox2d.collision.ContactID
        this.typeA = 0; // declared in org.jbox2d.collision.ContactID
        this.typeB = 0; // declared in org.jbox2d.collision.ContactID
    },

    instanceOf : function(aType) {
        return ojcContactID.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcContactID;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    INTcompareTojlObject : function(thisRef,x0) {
        var __label__ = null;
        var var0 = thisRef.INTcompareToojcContactID(thisRef,x0); // type is INT value type is INT
        return var0;
    },

    INTcompareToojcContactID : function(thisRef,o) {
        var __label__ = null;
        var var0 = thisRef.INTgetKey(thisRef); // type is INT value type is INT
        var var1 = o.INTgetKey(o); // type is INT value type is INT
        return (var0 - var1);
    },

    INTgetKey : function(thisRef) {
        var __label__ = null;
        return ((((thisRef.indexA << 24) | (thisRef.indexB << 16)) | (thisRef.typeA << 8)) | thisRef.typeB);
    },

    VOIDsetojcContactID : function(thisRef,c) {
        var __label__ = null;
        var var0 = c.indexA; // type is BYTE value type is BYTE
        thisRef.indexA = var0;
        var var1 = c.indexB; // type is BYTE value type is BYTE
        thisRef.indexB = var1;
        var var2 = c.typeA; // type is BYTE value type is BYTE
        thisRef.typeA = var2;
        var var3 = c.typeB; // type is BYTE value type is BYTE
        thisRef.typeB = var3;
        return;
    },

    BOOLEANisEqualojcContactID : function(thisRef,cid) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.INTgetKey(thisRef); // type is INT value type is INT
            var var1 = cid.INTgetKey(cid); // type is INT value type is INT
            if ((var0 != var1)) {
                __label__ = 15;
                break $S_0;
            }
            __label__ = 11;
            }
        for(;;) switch (__label__) {
            case 15 :
            // NORMAL
                var var2 = 0; // type is INT value type is INT
                return var2;
            case 11 :
            // NORMAL
                var var2 = 1; // type is INT value type is INT
                return var2;
        }
    },

    VOIDflip : function(thisRef) {
        var __label__ = null;
        var local_1_BYTE = thisRef.indexA; // type is BYTE value type is BYTE
        var var3 = thisRef.indexB; // type is BYTE value type is BYTE
        thisRef.indexA = var3;
        var var4 = local_1_BYTE; // type is BYTE value type is BYTE
        thisRef.indexB = var4;
        var local_1_BYTE = thisRef.typeA; // type is BYTE value type is BYTE
        var var7 = thisRef.typeB; // type is BYTE value type is BYTE
        thisRef.typeA = var7;
        var var8 = local_1_BYTE; // type is BYTE value type is BYTE
        thisRef.typeB = var8;
        return;
    },

    VOIDzero : function(thisRef) {
        var __label__ = null;
        thisRef.indexA = 0;
        thisRef.indexB = 0;
        thisRef.typeA = 0;
        thisRef.typeB = 0;
        return;
    },

    classInitCheck : function() {
        if (!ojcContactID.__initialized) {
            ojcContactID.__initialized = true;
            var thePrototype = ojcContactID.Create.prototype;
            thePrototype.instanceOf = ojcContactID.instanceOf;
            thePrototype.ClassgetClass = ojcContactID.ClassgetClass;
            thePrototype.VOIDzero = ojcContactID.VOIDzero;
            thePrototype.VOIDflip = ojcContactID.VOIDflip;
            thePrototype.BOOLEANisEqualojcContactID = ojcContactID.BOOLEANisEqualojcContactID;
            thePrototype.VOIDsetojcContactID = ojcContactID.VOIDsetojcContactID;
            thePrototype.INTgetKey = ojcContactID.INTgetKey;
            thePrototype.INTcompareToojcContactID = ojcContactID.INTcompareToojcContactID;
            thePrototype.INTcompareTojlObject = ojcContactID.INTcompareTojlObject;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            jlComparable.classInitCheck();
        }
    },

};

var ojcCollision$EPCollider = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 77,
    __implementedTypes : [1,77],

    Create : function() {
        this.m_polygonB = null; // declared in org.jbox2d.collision.Collision$EPCollider
        this.m_xf = null; // declared in org.jbox2d.collision.Collision$EPCollider
        this.m_centroidB = null; // declared in org.jbox2d.collision.Collision$EPCollider
        this.m_v0 = null; // declared in org.jbox2d.collision.Collision$EPCollider
        this.m_v1 = null; // declared in org.jbox2d.collision.Collision$EPCollider
        this.m_v2 = null; // declared in org.jbox2d.collision.Collision$EPCollider
        this.m_v3 = null; // declared in org.jbox2d.collision.Collision$EPCollider
        this.m_normal0 = null; // declared in org.jbox2d.collision.Collision$EPCollider
        this.m_normal1 = null; // declared in org.jbox2d.collision.Collision$EPCollider
        this.m_normal2 = null; // declared in org.jbox2d.collision.Collision$EPCollider
        this.m_normal = null; // declared in org.jbox2d.collision.Collision$EPCollider
        this.m_lowerLimit = null; // declared in org.jbox2d.collision.Collision$EPCollider
        this.m_upperLimit = null; // declared in org.jbox2d.collision.Collision$EPCollider
        this.edge1 = null; // declared in org.jbox2d.collision.Collision$EPCollider
        this.temp = null; // declared in org.jbox2d.collision.Collision$EPCollider
        this.edge0 = null; // declared in org.jbox2d.collision.Collision$EPCollider
        this.edge2 = null; // declared in org.jbox2d.collision.Collision$EPCollider
        this.ie = null; // declared in org.jbox2d.collision.Collision$EPCollider
        this.clipPoints1 = null; // declared in org.jbox2d.collision.Collision$EPCollider
        this.clipPoints2 = null; // declared in org.jbox2d.collision.Collision$EPCollider
        this.rf = null; // declared in org.jbox2d.collision.Collision$EPCollider
        this.edgeAxis = null; // declared in org.jbox2d.collision.Collision$EPCollider
        this.polygonAxis = null; // declared in org.jbox2d.collision.Collision$EPCollider
        this.perp = null; // declared in org.jbox2d.collision.Collision$EPCollider
        this.n = null; // declared in org.jbox2d.collision.Collision$EPCollider
        this.m_front = false; // declared in org.jbox2d.collision.Collision$EPCollider
        this.m_radius = 0; // declared in org.jbox2d.collision.Collision$EPCollider
    },

    instanceOf : function(aType) {
        return ojcCollision$EPCollider.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcCollision$EPCollider;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var local_1_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = new ojcCollision$TempPolygon.Create(); // type is REFERENCE value type is REFERENCE
            ojcCollision$TempPolygon.VOIDinit(var0);
            thisRef.m_polygonB = var0;
            var var1 = new ojcTransform.Create(); // type is REFERENCE value type is REFERENCE
            ojcTransform.VOIDinit(var1);
            thisRef.m_xf = var1;
            var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var2);
            thisRef.m_centroidB = var2;
            var var3 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var3);
            thisRef.m_v0 = var3;
            var var4 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var4);
            thisRef.m_v1 = var4;
            var var5 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var5);
            thisRef.m_v2 = var5;
            var var6 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var6);
            thisRef.m_v3 = var6;
            var var7 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var7);
            thisRef.m_normal0 = var7;
            var var8 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var8);
            thisRef.m_normal1 = var8;
            var var9 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var9);
            thisRef.m_normal2 = var9;
            var var10 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var10);
            thisRef.m_normal = var10;
            var var11 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var11);
            thisRef.m_lowerLimit = var11;
            var var12 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var12);
            thisRef.m_upperLimit = var12;
            var var13 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var13);
            thisRef.edge1 = var13;
            var var14 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var14);
            thisRef.temp = var14;
            var var15 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var15);
            thisRef.edge0 = var15;
            var var16 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var16);
            thisRef.edge2 = var16;
            var var17 = bytecoder.newArray(2,null); // type is REFERENCE value type is REFERENCE
            thisRef.ie = var17;
            var var18 = bytecoder.newArray(2,null); // type is REFERENCE value type is REFERENCE
            thisRef.clipPoints1 = var18;
            var var19 = bytecoder.newArray(2,null); // type is REFERENCE value type is REFERENCE
            thisRef.clipPoints2 = var19;
            var var20 = new ojcCollision$ReferenceFace.Create(); // type is REFERENCE value type is REFERENCE
            ojcCollision$ReferenceFace.VOIDinit(var20);
            thisRef.rf = var20;
            var var21 = new ojcCollision$EPAxis.Create(); // type is REFERENCE value type is REFERENCE
            ojcCollision$EPAxis.VOIDinit(var21);
            thisRef.edgeAxis = var21;
            var var22 = new ojcCollision$EPAxis.Create(); // type is REFERENCE value type is REFERENCE
            ojcCollision$EPAxis.VOIDinit(var22);
            thisRef.polygonAxis = var22;
            var var23 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var23);
            thisRef.perp = var23;
            var var24 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var24);
            thisRef.n = var24;
            local_1_INT = 0; // type is INT value type is INT
            __label__ = 272;
            }
        $L_272 : for (;;) {
            $S_272 : {
            // NORMAL
                var var27 = local_1_INT; // type is INT value type is INT
                if ((var27 >= 2)) {
                    return;
                }
                }
            var var28 = thisRef.ie; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@cd8a812
            var var29 = local_1_INT; // type is INT value type is INT
            var var30 = new ojcCollision$ClipVertex.Create(); // type is REFERENCE value type is REFERENCE
            ojcCollision$ClipVertex.VOIDinit(var30);
            var28.data[var29] = var30;
            var var31 = thisRef.clipPoints1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@19bad3c2
            var var32 = local_1_INT; // type is INT value type is INT
            var var33 = new ojcCollision$ClipVertex.Create(); // type is REFERENCE value type is REFERENCE
            ojcCollision$ClipVertex.VOIDinit(var33);
            var31.data[var32] = var33;
            var var34 = thisRef.clipPoints2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@90bc522
            var var35 = local_1_INT; // type is INT value type is INT
            var var36 = new ojcCollision$ClipVertex.Create(); // type is REFERENCE value type is REFERENCE
            ojcCollision$ClipVertex.VOIDinit(var36);
            var34.data[var35] = var36;
            local_1_INT = (local_1_INT + 1); // type is INT value type is INT
            __label__ = 272;
            continue $L_272;
        }
    },

    VOIDcollideojcManifoldojcsEdgeShapeojcTransformojcsPolygonShapeojcTransform : function(thisRef,manifold,edgeA,xfA,polygonB,xfB) {
        var var703 = null; // type is INT # of inits = 2
        var local_20_INT = null; // type is INT # of inits = 7
        var var64 = null; // type is INT # of inits = 2
        var local_12_INT = null; // type is INT # of inits = 2
        var local_19_INT = null; // type is INT # of inits = 3
        var var141 = null; // type is INT # of inits = 2
        var var655 = null; // type is INT # of inits = 2
        var var319 = null; // type is INT # of inits = 2
        var local_16_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_18_INT = null; // type is INT # of inits = 5
        var var224 = null; // type is INT # of inits = 2
        var local_21_FLOAT = null; // type is FLOAT # of inits = 2
        var var195 = null; // type is INT # of inits = 2
        var local_22_REFERENCE = null; // type is REFERENCE # of inits = 1
        var var111 = null; // type is INT # of inits = 2
        var local_7_BOOLEAN = null; // type is BOOLEAN # of inits = 1
        var local_9_FLOAT = null; // type is FLOAT # of inits = 2
        var local_15_REFERENCE = null; // type is REFERENCE # of inits = 5
        var var251 = null; // type is INT # of inits = 2
        var local_10_FLOAT = null; // type is FLOAT # of inits = 2
        var var167 = null; // type is INT # of inits = 2
        var var646 = null; // type is REFERENCE # of inits = 1
        var var399 = null; // type is INT # of inits = 2
        var var93 = null; // type is INT # of inits = 2
        var var347 = null; // type is INT # of inits = 2
        var local_13_INT = null; // type is INT # of inits = 3
        var local_17_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_6_BOOLEAN = null; // type is BOOLEAN # of inits = 1
        var local_19_FLOAT = null; // type is FLOAT # of inits = 3
        var local_8_FLOAT = null; // type is FLOAT # of inits = 1
        var local_11_INT = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            ojcTransform.VOIDmulTransToOutUnsafeojcTransformojcTransformojcTransform(xfA,xfB,thisRef.m_xf);
            ojcTransform.VOIDmulToOutUnsafeojcTransformojcVec2ojcVec2(thisRef.m_xf,polygonB.m_centroid,thisRef.m_centroidB);
            var var4 = edgeA.m_vertex0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@51538546
            thisRef.m_v0 = var4;
            var var5 = edgeA.m_vertex1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3eaef8aa
            thisRef.m_v1 = var5;
            var var6 = edgeA.m_vertex2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@692224ac
            thisRef.m_v2 = var6;
            var var7 = edgeA.m_vertex3; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5d04d5c
            thisRef.m_v3 = var7;
            local_6_BOOLEAN = edgeA.m_hasVertex0; // type is BOOLEAN value type is BOOLEAN
            local_7_BOOLEAN = edgeA.m_hasVertex3; // type is BOOLEAN value type is BOOLEAN
            var var16 = thisRef.edge1.ojcVec2setojcVec2(thisRef.edge1,thisRef.m_v2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@48649115
            var var18 = var16.ojcVec2subLocalojcVec2(var16,thisRef.m_v1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1c65b1b
            var var20 = thisRef.edge1.FLOATnormalize(thisRef.edge1); // type is FLOAT value type is FLOAT
            var var27 = thisRef.m_normal1.ojcVec2setFLOATFLOAT(thisRef.m_normal1,thisRef.edge1.y,(-thisRef.edge1.x)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@793908cb
            var var28 = thisRef.m_normal1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7e84101d
            var var31 = thisRef.temp.ojcVec2setojcVec2(thisRef.temp,thisRef.m_centroidB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1204cae1
            var var33 = var31.ojcVec2subLocalojcVec2(var31,thisRef.m_v1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@21a95539
            var var34 = ojcVec2.FLOATdotojcVec2ojcVec2(var28,var33); // type is FLOAT value type is FLOAT
            local_8_FLOAT = var34; // type is FLOAT value type is FLOAT
            local_9_FLOAT = 0.0; // type is FLOAT value type is FLOAT
            local_10_FLOAT = 0.0; // type is FLOAT value type is FLOAT
            local_11_INT = 0; // type is INT value type is INT
            local_12_INT = 0; // type is INT value type is INT
            var var45 = local_6_BOOLEAN; // type is BOOLEAN value type is BOOLEAN
            if ((var45 == 0)) {
                __label__ = 264;
                break $S_0;
            }
            __label__ = 164;
            }
        $M_164_264 : for(;;) switch (__label__) {
            case 264 :
            // NORMAL
                $S_264 : {
                // NORMAL
                    var var74 = local_7_BOOLEAN; // type is BOOLEAN value type is BOOLEAN
                    if ((var74 == 0)) {
                        __label__ = 369;
                        break $S_264;
                    }
                    __label__ = 269;
                    }
                $M_269_369 : for(;;) switch (__label__) {
                    case 269 :
                    // NORMAL
                        $S_269 : {
                        // NORMAL
                            var var77 = thisRef.edge2.ojcVec2setojcVec2(thisRef.edge2,thisRef.m_v3); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@10676e97
                            var var79 = var77.ojcVec2subLocalojcVec2(var77,thisRef.m_v2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4e3d907e
                            var var81 = thisRef.edge2.FLOATnormalize(thisRef.edge2); // type is FLOAT value type is FLOAT
                            var var88 = thisRef.m_normal2.ojcVec2setFLOATFLOAT(thisRef.m_normal2,thisRef.edge2.y,(-thisRef.edge2.x)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7a5a089a
                            var var91 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.edge1,thisRef.edge2); // type is FLOAT value type is FLOAT
                            if ((var91 <= 0.0)) {
                                __label__ = 339;
                                break $S_269;
                            }
                            __label__ = 335;
                            }
                        $M_335_339 : for(;;) switch (__label__) {
                            case 339 :
                            // NORMAL
                                var93 = 0; // type is INT value type is INT
                                break $M_335_339;
                            case 335 :
                            // NORMAL
                                var93 = 1; // type is INT value type is INT
                                break $M_335_339;
                        }
                        local_12_INT = var93; // type is INT value type is INT
                        var var95 = thisRef.m_normal2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@11b19a75
                        var var98 = thisRef.temp.ojcVec2setojcVec2(thisRef.temp,thisRef.m_centroidB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3a894d02
                        var var100 = var98.ojcVec2subLocalojcVec2(var98,thisRef.m_v2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1895844d
                        var var101 = ojcVec2.FLOATdotojcVec2ojcVec2(var95,var100); // type is FLOAT value type is FLOAT
                        local_10_FLOAT = var101; // type is FLOAT value type is FLOAT
                        __label__ = 369;
                        continue $M_269_369;
                    case 369 :
                    // NORMAL
                        $S_369 : {
                        // NORMAL
                            var var103 = local_6_BOOLEAN; // type is BOOLEAN value type is BOOLEAN
                            if ((var103 == 0)) {
                                __label__ = 1267;
                                break $S_369;
                            }
                            __label__ = 374;
                            }
                        $M_374_1267 : for(;;) switch (__label__) {
                            case 374 :
                            // NORMAL
                                $S_374 : {
                                // NORMAL
                                    var var104 = local_7_BOOLEAN; // type is BOOLEAN value type is BOOLEAN
                                    if ((var104 == 0)) {
                                        __label__ = 1267;
                                        continue $M_374_1267;
                                    }
                                    }
                                $S_379 : {
                                // NORMAL
                                    var var133 = local_11_INT; // type is INT value type is INT
                                    if ((var133 == 0)) {
                                        __label__ = 606;
                                        break $S_379;
                                    }
                                    __label__ = 384;
                                    }
                                $M_384_606 : for(;;) switch (__label__) {
                                    case 606 :
                                    // NORMAL
                                        $S_606 : {
                                        // NORMAL
                                            var var217 = local_11_INT; // type is INT value type is INT
                                            if ((var217 == 0)) {
                                                __label__ = 828;
                                                break $S_606;
                                            }
                                            __label__ = 611;
                                            }
                                        for(;;) switch (__label__) {
                                            case 828 :
                                            // NORMAL
                                                $S_828 : {
                                                // NORMAL
                                                    var var244 = local_12_INT; // type is INT value type is INT
                                                    if ((var244 == 0)) {
                                                        __label__ = 1050;
                                                        break $S_828;
                                                    }
                                                    __label__ = 833;
                                                    }
                                                for(;;) switch (__label__) {
                                                    case 1050 :
                                                    // NORMAL
                                                        $S_1050 : {
                                                        // NORMAL
                                                            var var341 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                                                            if ((var341 < 0.0)) {
                                                                __label__ = 1076;
                                                                break $S_1050;
                                                            }
                                                            __label__ = 1058;
                                                            }
                                                        $M_1076_1058 : for(;;) switch (__label__) {
                                                            case 1076 :
                                                            // NORMAL
                                                                var347 = 0; // type is INT value type is INT
                                                                break $M_1076_1058;
                                                            case 1058 :
                                                            // NORMAL
                                                                $S_1058 : {
                                                                // NORMAL
                                                                    var var343 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                                                                    if ((var343 < 0.0)) {
                                                                        __label__ = 1076;
                                                                        continue $M_1076_1058;
                                                                    }
                                                                    }
                                                                $S_1065 : {
                                                                // NORMAL
                                                                    var var345 = local_10_FLOAT; // type is FLOAT value type is FLOAT
                                                                    if ((var345 < 0.0)) {
                                                                        __label__ = 1076;
                                                                        continue $M_1076_1058;
                                                                    }
                                                                    }
                                                                var347 = 1; // type is INT value type is INT
                                                                break $M_1076_1058;
                                                        }
                                                        $S_1077 : {
                                                        // NORMAL
                                                            thisRef.m_front = var347;
                                                            var var348 = thisRef.m_front; // type is BOOLEAN value type is BOOLEAN
                                                            if ((var348 == 0)) {
                                                                __label__ = 1174;
                                                                break $S_1077;
                                                            }
                                                            __label__ = 1087;
                                                            }
                                                        for(;;) switch (__label__) {
                                                            case 1087 :
                                                            // NORMAL
                                                                var var421 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3221411d
                                                                var var423 = thisRef.m_normal1.x; // type is FLOAT value type is FLOAT
                                                                var421.x = var423;
                                                                var var424 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2f5e071e
                                                                var var426 = thisRef.m_normal1.y; // type is FLOAT value type is FLOAT
                                                                var424.y = var426;
                                                                var var427 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5f4faeaa
                                                                var var429 = thisRef.m_normal1.x; // type is FLOAT value type is FLOAT
                                                                var427.x = var429;
                                                                var var430 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6b4cfee2
                                                                var var432 = thisRef.m_normal1.y; // type is FLOAT value type is FLOAT
                                                                var430.y = var432;
                                                                var var433 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@53dd633f
                                                                var var435 = thisRef.m_normal1.x; // type is FLOAT value type is FLOAT
                                                                var433.x = var435;
                                                                var var436 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@ce4f8ad
                                                                var var438 = thisRef.m_normal1.y; // type is FLOAT value type is FLOAT
                                                                var436.y = var438;
                                                                break $M_374_1267;
                                                            case 1174 :
                                                            // NORMAL
                                                                var var349 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2efc3d65
                                                                var var352 = (-thisRef.m_normal1.x); // type is FLOAT value type is FLOAT
                                                                var349.x = var352;
                                                                var var353 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@22cb6db6
                                                                var var356 = (-thisRef.m_normal1.y); // type is FLOAT value type is FLOAT
                                                                var353.y = var356;
                                                                var var357 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1ab7264b
                                                                var var360 = (-thisRef.m_normal2.x); // type is FLOAT value type is FLOAT
                                                                var357.x = var360;
                                                                var var361 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@31bd9420
                                                                var var364 = (-thisRef.m_normal2.y); // type is FLOAT value type is FLOAT
                                                                var361.y = var364;
                                                                var var365 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7e659067
                                                                var var368 = (-thisRef.m_normal0.x); // type is FLOAT value type is FLOAT
                                                                var365.x = var368;
                                                                var var369 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@73af4c0
                                                                var var372 = (-thisRef.m_normal0.y); // type is FLOAT value type is FLOAT
                                                                var369.y = var372;
                                                                break $M_374_1267;
                                                        }
                                                    case 833 :
                                                    // NORMAL
                                                        $S_833 : {
                                                        // NORMAL
                                                            var var245 = local_10_FLOAT; // type is FLOAT value type is FLOAT
                                                            if ((var245 >= 0.0)) {
                                                                __label__ = 855;
                                                                break $S_833;
                                                            }
                                                            __label__ = 841;
                                                            }
                                                        $M_841_855 : for(;;) switch (__label__) {
                                                            case 855 :
                                                            // NORMAL
                                                                var251 = 1; // type is INT value type is INT
                                                                break $M_841_855;
                                                            case 841 :
                                                            // NORMAL
                                                                $S_841 : {
                                                                // NORMAL
                                                                    var var247 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                                                                    if ((var247 < 0.0)) {
                                                                        __label__ = 859;
                                                                        break $S_841;
                                                                    }
                                                                    __label__ = 848;
                                                                    }
                                                                $M_859_848 : for(;;) switch (__label__) {
                                                                    case 859 :
                                                                    // NORMAL
                                                                        var251 = 0; // type is INT value type is INT
                                                                        break $M_841_855;
                                                                    case 848 :
                                                                    // NORMAL
                                                                        var var249 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                                                                        if ((var249 < 0.0)) {
                                                                            __label__ = 859;
                                                                            continue $M_859_848;
                                                                        }
                                                                        __label__ = 855;
                                                                        continue $M_841_855;
                                                                }
                                                        }
                                                        $S_860 : {
                                                        // NORMAL
                                                            thisRef.m_front = var251;
                                                            var var252 = thisRef.m_front; // type is BOOLEAN value type is BOOLEAN
                                                            if ((var252 == 0)) {
                                                                __label__ = 957;
                                                                break $S_860;
                                                            }
                                                            __label__ = 870;
                                                            }
                                                        for(;;) switch (__label__) {
                                                            case 957 :
                                                            // NORMAL
                                                                var var253 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@241c0f12
                                                                var var256 = (-thisRef.m_normal1.x); // type is FLOAT value type is FLOAT
                                                                var253.x = var256;
                                                                var var257 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@79dd9325
                                                                var var260 = (-thisRef.m_normal1.y); // type is FLOAT value type is FLOAT
                                                                var257.y = var260;
                                                                var var261 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2be9d2d1
                                                                var var264 = (-thisRef.m_normal1.x); // type is FLOAT value type is FLOAT
                                                                var261.x = var264;
                                                                var var265 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7ba5af98
                                                                var var268 = (-thisRef.m_normal1.y); // type is FLOAT value type is FLOAT
                                                                var265.y = var268;
                                                                var var269 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3f855b61
                                                                var var272 = (-thisRef.m_normal0.x); // type is FLOAT value type is FLOAT
                                                                var269.x = var272;
                                                                var var273 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2a54a30f
                                                                var var276 = (-thisRef.m_normal0.y); // type is FLOAT value type is FLOAT
                                                                var273.y = var276;
                                                                break $M_374_1267;
                                                            case 870 :
                                                            // NORMAL
                                                                var var277 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4fce93ce
                                                                var var279 = thisRef.m_normal1.x; // type is FLOAT value type is FLOAT
                                                                var277.x = var279;
                                                                var var280 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@19412cc0
                                                                var var282 = thisRef.m_normal1.y; // type is FLOAT value type is FLOAT
                                                                var280.y = var282;
                                                                var var283 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@c0a22da
                                                                var var285 = thisRef.m_normal1.x; // type is FLOAT value type is FLOAT
                                                                var283.x = var285;
                                                                var var286 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@349b48f
                                                                var var288 = thisRef.m_normal1.y; // type is FLOAT value type is FLOAT
                                                                var286.y = var288;
                                                                var var289 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@382207cb
                                                                var var291 = thisRef.m_normal2.x; // type is FLOAT value type is FLOAT
                                                                var289.x = var291;
                                                                var var292 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@28150b23
                                                                var var294 = thisRef.m_normal2.y; // type is FLOAT value type is FLOAT
                                                                var292.y = var294;
                                                                break $M_374_1267;
                                                        }
                                                }
                                            case 611 :
                                            // NORMAL
                                                $S_611 : {
                                                // NORMAL
                                                    var var218 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                                                    if ((var218 >= 0.0)) {
                                                        __label__ = 633;
                                                        break $S_611;
                                                    }
                                                    __label__ = 619;
                                                    }
                                                $M_619_633 : for(;;) switch (__label__) {
                                                    case 619 :
                                                    // NORMAL
                                                        $S_619 : {
                                                        // NORMAL
                                                            var var220 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                                                            if ((var220 < 0.0)) {
                                                                __label__ = 637;
                                                                break $S_619;
                                                            }
                                                            __label__ = 626;
                                                            }
                                                        $M_626_637 : for(;;) switch (__label__) {
                                                            case 637 :
                                                            // NORMAL
                                                                var224 = 0; // type is INT value type is INT
                                                                break $M_619_633;
                                                            case 626 :
                                                            // NORMAL
                                                                var var222 = local_10_FLOAT; // type is FLOAT value type is FLOAT
                                                                if ((var222 < 0.0)) {
                                                                    __label__ = 637;
                                                                    continue $M_626_637;
                                                                }
                                                                __label__ = 633;
                                                                continue $M_619_633;
                                                        }
                                                    case 633 :
                                                    // NORMAL
                                                        var224 = 1; // type is INT value type is INT
                                                        break $M_619_633;
                                                }
                                                $S_638 : {
                                                // NORMAL
                                                    thisRef.m_front = var224;
                                                    var var225 = thisRef.m_front; // type is BOOLEAN value type is BOOLEAN
                                                    if ((var225 == 0)) {
                                                        __label__ = 735;
                                                        break $S_638;
                                                    }
                                                    __label__ = 648;
                                                    }
                                                for(;;) switch (__label__) {
                                                    case 735 :
                                                    // NORMAL
                                                        var var439 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7554e009
                                                        var var442 = (-thisRef.m_normal1.x); // type is FLOAT value type is FLOAT
                                                        var439.x = var442;
                                                        var var443 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3bf7cfe0
                                                        var var446 = (-thisRef.m_normal1.y); // type is FLOAT value type is FLOAT
                                                        var443.y = var446;
                                                        var var447 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@13c38b0a
                                                        var var450 = (-thisRef.m_normal2.x); // type is FLOAT value type is FLOAT
                                                        var447.x = var450;
                                                        var var451 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@130fd642
                                                        var var454 = (-thisRef.m_normal2.y); // type is FLOAT value type is FLOAT
                                                        var451.y = var454;
                                                        var var455 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@41893882
                                                        var var458 = (-thisRef.m_normal1.x); // type is FLOAT value type is FLOAT
                                                        var455.x = var458;
                                                        var var459 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4484779c
                                                        var var462 = (-thisRef.m_normal1.y); // type is FLOAT value type is FLOAT
                                                        var459.y = var462;
                                                        break $M_374_1267;
                                                    case 648 :
                                                    // NORMAL
                                                        var var226 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4b102fdd
                                                        var var228 = thisRef.m_normal1.x; // type is FLOAT value type is FLOAT
                                                        var226.x = var228;
                                                        var var229 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@26404d3b
                                                        var var231 = thisRef.m_normal1.y; // type is FLOAT value type is FLOAT
                                                        var229.y = var231;
                                                        var var232 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2e052c59
                                                        var var234 = thisRef.m_normal0.x; // type is FLOAT value type is FLOAT
                                                        var232.x = var234;
                                                        var var235 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@49da8692
                                                        var var237 = thisRef.m_normal0.y; // type is FLOAT value type is FLOAT
                                                        var235.y = var237;
                                                        var var238 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3fe36b3
                                                        var var240 = thisRef.m_normal1.x; // type is FLOAT value type is FLOAT
                                                        var238.x = var240;
                                                        var var241 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@27f39a62
                                                        var var243 = thisRef.m_normal1.y; // type is FLOAT value type is FLOAT
                                                        var241.y = var243;
                                                        break $M_374_1267;
                                                }
                                        }
                                    case 384 :
                                    // NORMAL
                                        $S_384 : {
                                        // NORMAL
                                            var var134 = local_12_INT; // type is INT value type is INT
                                            if ((var134 == 0)) {
                                                __label__ = 606;
                                                continue $M_384_606;
                                            }
                                            }
                                        $S_389 : {
                                        // NORMAL
                                            var var135 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                                            if ((var135 >= 0.0)) {
                                                __label__ = 411;
                                                break $S_389;
                                            }
                                            __label__ = 397;
                                            }
                                        $M_411_397 : for(;;) switch (__label__) {
                                            case 397 :
                                            // NORMAL
                                                $S_397 : {
                                                // NORMAL
                                                    var var137 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                                                    if ((var137 >= 0.0)) {
                                                        __label__ = 411;
                                                        continue $M_411_397;
                                                    }
                                                    }
                                                $S_404 : {
                                                // NORMAL
                                                    var var139 = local_10_FLOAT; // type is FLOAT value type is FLOAT
                                                    if ((var139 < 0.0)) {
                                                        break $S_404;
                                                    }
                                                    __label__ = 411;
                                                    continue $M_411_397;
                                                    }
                                                var141 = 0; // type is INT value type is INT
                                                break $M_411_397;
                                            case 411 :
                                            // NORMAL
                                                var141 = 1; // type is INT value type is INT
                                                break $M_411_397;
                                        }
                                        $S_416 : {
                                        // NORMAL
                                            thisRef.m_front = var141;
                                            var var142 = thisRef.m_front; // type is BOOLEAN value type is BOOLEAN
                                            if ((var142 == 0)) {
                                                __label__ = 513;
                                                break $S_416;
                                            }
                                            __label__ = 426;
                                            }
                                        for(;;) switch (__label__) {
                                            case 513 :
                                            // NORMAL
                                                var var373 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@20930d21
                                                var var376 = (-thisRef.m_normal1.x); // type is FLOAT value type is FLOAT
                                                var373.x = var376;
                                                var var377 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3d60e1b7
                                                var var380 = (-thisRef.m_normal1.y); // type is FLOAT value type is FLOAT
                                                var377.y = var380;
                                                var var381 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4f591306
                                                var var384 = (-thisRef.m_normal1.x); // type is FLOAT value type is FLOAT
                                                var381.x = var384;
                                                var var385 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7442a005
                                                var var388 = (-thisRef.m_normal1.y); // type is FLOAT value type is FLOAT
                                                var385.y = var388;
                                                var var389 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4c8041a9
                                                var var392 = (-thisRef.m_normal1.x); // type is FLOAT value type is FLOAT
                                                var389.x = var392;
                                                var var393 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@76576cd7
                                                var var396 = (-thisRef.m_normal1.y); // type is FLOAT value type is FLOAT
                                                var393.y = var396;
                                                break $M_374_1267;
                                            case 426 :
                                            // NORMAL
                                                var var143 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@71918038
                                                var var145 = thisRef.m_normal1.x; // type is FLOAT value type is FLOAT
                                                var143.x = var145;
                                                var var146 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@10324487
                                                var var148 = thisRef.m_normal1.y; // type is FLOAT value type is FLOAT
                                                var146.y = var148;
                                                var var149 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5e71d221
                                                var var151 = thisRef.m_normal0.x; // type is FLOAT value type is FLOAT
                                                var149.x = var151;
                                                var var152 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@138d3cec
                                                var var154 = thisRef.m_normal0.y; // type is FLOAT value type is FLOAT
                                                var152.y = var154;
                                                var var155 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6ee0fee5
                                                var var157 = thisRef.m_normal2.x; // type is FLOAT value type is FLOAT
                                                var155.x = var157;
                                                var var158 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6cf499c2
                                                var var160 = thisRef.m_normal2.y; // type is FLOAT value type is FLOAT
                                                var158.y = var160;
                                                break $M_374_1267;
                                        }
                                }
                            case 1267 :
                            // NORMAL
                                $S_1267 : {
                                // NORMAL
                                    var var105 = local_6_BOOLEAN; // type is BOOLEAN value type is BOOLEAN
                                    if ((var105 == 0)) {
                                        __label__ = 1697;
                                        break $S_1267;
                                    }
                                    __label__ = 1272;
                                    }
                                for(;;) switch (__label__) {
                                    case 1272 :
                                    // NORMAL
                                        $S_1272 : {
                                        // NORMAL
                                            var var106 = local_11_INT; // type is INT value type is INT
                                            if ((var106 == 0)) {
                                                __label__ = 1487;
                                                break $S_1272;
                                            }
                                            __label__ = 1277;
                                            }
                                        for(;;) switch (__label__) {
                                            case 1487 :
                                            // NORMAL
                                                $S_1487 : {
                                                // NORMAL
                                                    var var315 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                                                    if ((var315 < 0.0)) {
                                                        __label__ = 1506;
                                                        break $S_1487;
                                                    }
                                                    __label__ = 1495;
                                                    }
                                                $M_1506_1495 : for(;;) switch (__label__) {
                                                    case 1495 :
                                                    // NORMAL
                                                        $S_1495 : {
                                                        // NORMAL
                                                            var var317 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                                                            if ((var317 < 0.0)) {
                                                                __label__ = 1506;
                                                                continue $M_1506_1495;
                                                            }
                                                            }
                                                        var319 = 1; // type is INT value type is INT
                                                        break $M_1506_1495;
                                                    case 1506 :
                                                    // NORMAL
                                                        var319 = 0; // type is INT value type is INT
                                                        break $M_1506_1495;
                                                }
                                                $S_1507 : {
                                                // NORMAL
                                                    thisRef.m_front = var319;
                                                    var var320 = thisRef.m_front; // type is BOOLEAN value type is BOOLEAN
                                                    if ((var320 == 0)) {
                                                        __label__ = 1606;
                                                        break $S_1507;
                                                    }
                                                    __label__ = 1517;
                                                    }
                                                for(;;) switch (__label__) {
                                                    case 1517 :
                                                    // NORMAL
                                                        var var321 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3cc4aea7
                                                        var var323 = thisRef.m_normal1.x; // type is FLOAT value type is FLOAT
                                                        var321.x = var323;
                                                        var var324 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@46548f8f
                                                        var var326 = thisRef.m_normal1.y; // type is FLOAT value type is FLOAT
                                                        var324.y = var326;
                                                        var var327 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2f2a4676
                                                        var var329 = thisRef.m_normal1.x; // type is FLOAT value type is FLOAT
                                                        var327.x = var329;
                                                        var var330 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@67d8f0d8
                                                        var var332 = thisRef.m_normal1.y; // type is FLOAT value type is FLOAT
                                                        var330.y = var332;
                                                        var var333 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7ef0cb12
                                                        var var336 = (-thisRef.m_normal1.x); // type is FLOAT value type is FLOAT
                                                        var333.x = var336;
                                                        var var337 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1c3a1bb4
                                                        var var340 = (-thisRef.m_normal1.y); // type is FLOAT value type is FLOAT
                                                        var337.y = var340;
                                                        break $M_374_1267;
                                                    case 1606 :
                                                    // NORMAL
                                                        var var485 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@615ee7b3
                                                        var var488 = (-thisRef.m_normal1.x); // type is FLOAT value type is FLOAT
                                                        var485.x = var488;
                                                        var var489 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@41209570
                                                        var var492 = (-thisRef.m_normal1.y); // type is FLOAT value type is FLOAT
                                                        var489.y = var492;
                                                        var var493 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@39707e1d
                                                        var var495 = thisRef.m_normal1.x; // type is FLOAT value type is FLOAT
                                                        var493.x = var495;
                                                        var var496 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@75db253c
                                                        var var498 = thisRef.m_normal1.y; // type is FLOAT value type is FLOAT
                                                        var496.y = var498;
                                                        var var499 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@63ae374b
                                                        var var502 = (-thisRef.m_normal0.x); // type is FLOAT value type is FLOAT
                                                        var499.x = var502;
                                                        var var503 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@26e0a55b
                                                        var var506 = (-thisRef.m_normal0.y); // type is FLOAT value type is FLOAT
                                                        var503.y = var506;
                                                        break $M_374_1267;
                                                }
                                            case 1277 :
                                            // NORMAL
                                                $S_1277 : {
                                                // NORMAL
                                                    var var107 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                                                    if ((var107 >= 0.0)) {
                                                        __label__ = 1292;
                                                        break $S_1277;
                                                    }
                                                    __label__ = 1285;
                                                    }
                                                $M_1285_1292 : for(;;) switch (__label__) {
                                                    case 1285 :
                                                    // NORMAL
                                                        $S_1285 : {
                                                        // NORMAL
                                                            var var109 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                                                            if ((var109 < 0.0)) {
                                                                break $S_1285;
                                                            }
                                                            __label__ = 1292;
                                                            continue $M_1285_1292;
                                                            }
                                                        var111 = 0; // type is INT value type is INT
                                                        break $M_1285_1292;
                                                    case 1292 :
                                                    // NORMAL
                                                        var111 = 1; // type is INT value type is INT
                                                        break $M_1285_1292;
                                                }
                                                $S_1297 : {
                                                // NORMAL
                                                    thisRef.m_front = var111;
                                                    var var112 = thisRef.m_front; // type is BOOLEAN value type is BOOLEAN
                                                    if ((var112 == 0)) {
                                                        __label__ = 1396;
                                                        break $S_1297;
                                                    }
                                                    __label__ = 1307;
                                                    }
                                                for(;;) switch (__label__) {
                                                    case 1396 :
                                                    // NORMAL
                                                        var var507 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1cdaa70c
                                                        var var510 = (-thisRef.m_normal1.x); // type is FLOAT value type is FLOAT
                                                        var507.x = var510;
                                                        var var511 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3084936e
                                                        var var514 = (-thisRef.m_normal1.y); // type is FLOAT value type is FLOAT
                                                        var511.y = var514;
                                                        var var515 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2282fe5a
                                                        var var517 = thisRef.m_normal1.x; // type is FLOAT value type is FLOAT
                                                        var515.x = var517;
                                                        var var518 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1eb5d2c
                                                        var var520 = thisRef.m_normal1.y; // type is FLOAT value type is FLOAT
                                                        var518.y = var520;
                                                        var var521 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@48c078da
                                                        var var524 = (-thisRef.m_normal1.x); // type is FLOAT value type is FLOAT
                                                        var521.x = var524;
                                                        var var525 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5c4b9d4f
                                                        var var528 = (-thisRef.m_normal1.y); // type is FLOAT value type is FLOAT
                                                        var525.y = var528;
                                                        break $M_374_1267;
                                                    case 1307 :
                                                    // NORMAL
                                                        var var113 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@698ec8b2
                                                        var var115 = thisRef.m_normal1.x; // type is FLOAT value type is FLOAT
                                                        var113.x = var115;
                                                        var var116 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@32d7ea92
                                                        var var118 = thisRef.m_normal1.y; // type is FLOAT value type is FLOAT
                                                        var116.y = var118;
                                                        var var119 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@791a52ba
                                                        var var121 = thisRef.m_normal0.x; // type is FLOAT value type is FLOAT
                                                        var119.x = var121;
                                                        var var122 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@79bb1933
                                                        var var124 = thisRef.m_normal0.y; // type is FLOAT value type is FLOAT
                                                        var122.y = var124;
                                                        var var125 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@66ef85ee
                                                        var var128 = (-thisRef.m_normal1.x); // type is FLOAT value type is FLOAT
                                                        var125.x = var128;
                                                        var var129 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6b6160db
                                                        var var132 = (-thisRef.m_normal1.y); // type is FLOAT value type is FLOAT
                                                        var129.y = var132;
                                                        break $M_374_1267;
                                                }
                                        }
                                    case 1697 :
                                    // NORMAL
                                        $S_1697 : {
                                        // NORMAL
                                            var var161 = local_7_BOOLEAN; // type is BOOLEAN value type is BOOLEAN
                                            if ((var161 == 0)) {
                                                __label__ = 2127;
                                                break $S_1697;
                                            }
                                            __label__ = 1702;
                                            }
                                        for(;;) switch (__label__) {
                                            case 1702 :
                                            // NORMAL
                                                $S_1702 : {
                                                // NORMAL
                                                    var var162 = local_12_INT; // type is INT value type is INT
                                                    if ((var162 == 0)) {
                                                        __label__ = 1917;
                                                        break $S_1702;
                                                    }
                                                    __label__ = 1707;
                                                    }
                                                for(;;) switch (__label__) {
                                                    case 1707 :
                                                    // NORMAL
                                                        $S_1707 : {
                                                        // NORMAL
                                                            var var163 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                                                            if ((var163 >= 0.0)) {
                                                                __label__ = 1722;
                                                                break $S_1707;
                                                            }
                                                            __label__ = 1715;
                                                            }
                                                        $M_1722_1715 : for(;;) switch (__label__) {
                                                            case 1715 :
                                                            // NORMAL
                                                                $S_1715 : {
                                                                // NORMAL
                                                                    var var165 = local_10_FLOAT; // type is FLOAT value type is FLOAT
                                                                    if ((var165 < 0.0)) {
                                                                        break $S_1715;
                                                                    }
                                                                    __label__ = 1722;
                                                                    continue $M_1722_1715;
                                                                    }
                                                                var167 = 0; // type is INT value type is INT
                                                                break $M_1722_1715;
                                                            case 1722 :
                                                            // NORMAL
                                                                var167 = 1; // type is INT value type is INT
                                                                break $M_1722_1715;
                                                        }
                                                        $S_1727 : {
                                                        // NORMAL
                                                            thisRef.m_front = var167;
                                                            var var168 = thisRef.m_front; // type is BOOLEAN value type is BOOLEAN
                                                            if ((var168 == 0)) {
                                                                __label__ = 1826;
                                                                break $S_1727;
                                                            }
                                                            __label__ = 1737;
                                                            }
                                                        for(;;) switch (__label__) {
                                                            case 1826 :
                                                            // NORMAL
                                                                var var169 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4045708f
                                                                var var172 = (-thisRef.m_normal1.x); // type is FLOAT value type is FLOAT
                                                                var169.x = var172;
                                                                var var173 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@61968b35
                                                                var var176 = (-thisRef.m_normal1.y); // type is FLOAT value type is FLOAT
                                                                var173.y = var176;
                                                                var var177 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7bcca21c
                                                                var var180 = (-thisRef.m_normal1.x); // type is FLOAT value type is FLOAT
                                                                var177.x = var180;
                                                                var var181 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1b4b7206
                                                                var var184 = (-thisRef.m_normal1.y); // type is FLOAT value type is FLOAT
                                                                var181.y = var184;
                                                                var var185 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@70e1a8e8
                                                                var var187 = thisRef.m_normal1.x; // type is FLOAT value type is FLOAT
                                                                var185.x = var187;
                                                                var var188 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@257b5ae2
                                                                var var190 = thisRef.m_normal1.y; // type is FLOAT value type is FLOAT
                                                                var188.y = var190;
                                                                break $M_374_1267;
                                                            case 1737 :
                                                            // NORMAL
                                                                var var295 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3bb9d013
                                                                var var297 = thisRef.m_normal1.x; // type is FLOAT value type is FLOAT
                                                                var295.x = var297;
                                                                var var298 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7ba25e20
                                                                var var300 = thisRef.m_normal1.y; // type is FLOAT value type is FLOAT
                                                                var298.y = var300;
                                                                var var301 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6f91f54
                                                                var var304 = (-thisRef.m_normal1.x); // type is FLOAT value type is FLOAT
                                                                var301.x = var304;
                                                                var var305 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@792ae923
                                                                var var308 = (-thisRef.m_normal1.y); // type is FLOAT value type is FLOAT
                                                                var305.y = var308;
                                                                var var309 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@c66875d
                                                                var var311 = thisRef.m_normal2.x; // type is FLOAT value type is FLOAT
                                                                var309.x = var311;
                                                                var var312 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@655c9baf
                                                                var var314 = thisRef.m_normal2.y; // type is FLOAT value type is FLOAT
                                                                var312.y = var314;
                                                                break $M_374_1267;
                                                        }
                                                    case 1917 :
                                                    // NORMAL
                                                        $S_1917 : {
                                                        // NORMAL
                                                            var var191 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                                                            if ((var191 < 0.0)) {
                                                                __label__ = 1936;
                                                                break $S_1917;
                                                            }
                                                            __label__ = 1925;
                                                            }
                                                        $M_1925_1936 : for(;;) switch (__label__) {
                                                            case 1925 :
                                                            // NORMAL
                                                                $S_1925 : {
                                                                // NORMAL
                                                                    var var193 = local_10_FLOAT; // type is FLOAT value type is FLOAT
                                                                    if ((var193 < 0.0)) {
                                                                        __label__ = 1936;
                                                                        continue $M_1925_1936;
                                                                    }
                                                                    }
                                                                var195 = 1; // type is INT value type is INT
                                                                break $M_1925_1936;
                                                            case 1936 :
                                                            // NORMAL
                                                                var195 = 0; // type is INT value type is INT
                                                                break $M_1925_1936;
                                                        }
                                                        $S_1937 : {
                                                        // NORMAL
                                                            thisRef.m_front = var195;
                                                            var var196 = thisRef.m_front; // type is BOOLEAN value type is BOOLEAN
                                                            if ((var196 == 0)) {
                                                                __label__ = 2036;
                                                                break $S_1937;
                                                            }
                                                            __label__ = 1947;
                                                            }
                                                        for(;;) switch (__label__) {
                                                            case 1947 :
                                                            // NORMAL
                                                                var var197 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2b113bef
                                                                var var199 = thisRef.m_normal1.x; // type is FLOAT value type is FLOAT
                                                                var197.x = var199;
                                                                var var200 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5dcbc5f
                                                                var var202 = thisRef.m_normal1.y; // type is FLOAT value type is FLOAT
                                                                var200.y = var202;
                                                                var var203 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3d388fd6
                                                                var var206 = (-thisRef.m_normal1.x); // type is FLOAT value type is FLOAT
                                                                var203.x = var206;
                                                                var var207 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3cb8fa3d
                                                                var var210 = (-thisRef.m_normal1.y); // type is FLOAT value type is FLOAT
                                                                var207.y = var210;
                                                                var var211 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1e546006
                                                                var var213 = thisRef.m_normal1.x; // type is FLOAT value type is FLOAT
                                                                var211.x = var213;
                                                                var var214 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7e8a09d7
                                                                var var216 = thisRef.m_normal1.y; // type is FLOAT value type is FLOAT
                                                                var214.y = var216;
                                                                break $M_374_1267;
                                                            case 2036 :
                                                            // NORMAL
                                                                var var463 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7b57fef
                                                                var var466 = (-thisRef.m_normal1.x); // type is FLOAT value type is FLOAT
                                                                var463.x = var466;
                                                                var var467 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7ca70436
                                                                var var470 = (-thisRef.m_normal1.y); // type is FLOAT value type is FLOAT
                                                                var467.y = var470;
                                                                var var471 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@41ce0ff4
                                                                var var474 = (-thisRef.m_normal2.x); // type is FLOAT value type is FLOAT
                                                                var471.x = var474;
                                                                var var475 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6f2472ab
                                                                var var478 = (-thisRef.m_normal2.y); // type is FLOAT value type is FLOAT
                                                                var475.y = var478;
                                                                var var479 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@43c232a7
                                                                var var481 = thisRef.m_normal1.x; // type is FLOAT value type is FLOAT
                                                                var479.x = var481;
                                                                var var482 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@700185d
                                                                var var484 = thisRef.m_normal1.y; // type is FLOAT value type is FLOAT
                                                                var482.y = var484;
                                                                break $M_374_1267;
                                                        }
                                                }
                                            case 2127 :
                                            // NORMAL
                                                $S_2127 : {
                                                // NORMAL
                                                    var var397 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                                                    if ((var397 < 0.0)) {
                                                        __label__ = 2139;
                                                        break $S_2127;
                                                    }
                                                    __label__ = 2135;
                                                    }
                                                $M_2139_2135 : for(;;) switch (__label__) {
                                                    case 2139 :
                                                    // NORMAL
                                                        var399 = 0; // type is INT value type is INT
                                                        break $M_2139_2135;
                                                    case 2135 :
                                                    // NORMAL
                                                        var399 = 1; // type is INT value type is INT
                                                        break $M_2139_2135;
                                                }
                                                $S_2140 : {
                                                // NORMAL
                                                    thisRef.m_front = var399;
                                                    var var400 = thisRef.m_front; // type is BOOLEAN value type is BOOLEAN
                                                    if ((var400 == 0)) {
                                                        __label__ = 2241;
                                                        break $S_2140;
                                                    }
                                                    __label__ = 2150;
                                                    }
                                                for(;;) switch (__label__) {
                                                    case 2241 :
                                                    // NORMAL
                                                        var var401 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@368016e6
                                                        var var404 = (-thisRef.m_normal1.x); // type is FLOAT value type is FLOAT
                                                        var401.x = var404;
                                                        var var405 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7a7d9bb7
                                                        var var408 = (-thisRef.m_normal1.y); // type is FLOAT value type is FLOAT
                                                        var405.y = var408;
                                                        var var409 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@28f8d955
                                                        var var411 = thisRef.m_normal1.x; // type is FLOAT value type is FLOAT
                                                        var409.x = var411;
                                                        var var412 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2fbdeee7
                                                        var var414 = thisRef.m_normal1.y; // type is FLOAT value type is FLOAT
                                                        var412.y = var414;
                                                        var var415 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@193cead0
                                                        var var417 = thisRef.m_normal1.x; // type is FLOAT value type is FLOAT
                                                        var415.x = var417;
                                                        var var418 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@f8a6a63
                                                        var var420 = thisRef.m_normal1.y; // type is FLOAT value type is FLOAT
                                                        var418.y = var420;
                                                        break $M_374_1267;
                                                    case 2150 :
                                                    // NORMAL
                                                        var var529 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@615628b6
                                                        var var531 = thisRef.m_normal1.x; // type is FLOAT value type is FLOAT
                                                        var529.x = var531;
                                                        var var532 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@21dc28ad
                                                        var var534 = thisRef.m_normal1.y; // type is FLOAT value type is FLOAT
                                                        var532.y = var534;
                                                        var var535 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5f483c2c
                                                        var var538 = (-thisRef.m_normal1.x); // type is FLOAT value type is FLOAT
                                                        var535.x = var538;
                                                        var var539 = thisRef.m_lowerLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3cd9cd4
                                                        var var542 = (-thisRef.m_normal1.y); // type is FLOAT value type is FLOAT
                                                        var539.y = var542;
                                                        var var543 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@538e1783
                                                        var var546 = (-thisRef.m_normal1.x); // type is FLOAT value type is FLOAT
                                                        var543.x = var546;
                                                        var var547 = thisRef.m_upperLimit; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1357c41f
                                                        var var550 = (-thisRef.m_normal1.y); // type is FLOAT value type is FLOAT
                                                        var547.y = var550;
                                                        break $M_374_1267;
                                                }
                                        }
                                }
                        }
                        $S_2327 : {
                        // NORMAL
                            var var551 = thisRef.m_polygonB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@de03305
                            var var552 = polygonB.m_count; // type is INT value type is INT
                            var551.count = var552;
                            local_13_INT = 0; // type is INT value type is INT
                            __label__ = 2342;
                            }
                        $L_2342 : for (;;) {
                            $S_2342 : {
                            // NORMAL
                                var var555 = local_13_INT; // type is INT value type is INT
                                var var556 = polygonB.m_count; // type is INT value type is INT
                                if ((var555 >= var556)) {
                                    __label__ = 2411;
                                    break $S_2342;
                                }
                                __label__ = 2352;
                                }
                            for(;;) switch (__label__) {
                                case 2352 :
                                // NORMAL
                                    var var860 = thisRef.m_xf; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@62a42551
                                    var var863 = polygonB.m_vertices.data[local_13_INT]; // type is REFERENCE value type is REFERENCE
                                    var var867 = thisRef.m_polygonB.vertices.data[local_13_INT]; // type is REFERENCE value type is REFERENCE
                                    ojcTransform.VOIDmulToOutUnsafeojcTransformojcVec2ojcVec2(var860,var863,var867);
                                    var var869 = thisRef.m_xf.q; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@41b51489
                                    var var872 = polygonB.m_normals.data[local_13_INT]; // type is REFERENCE value type is REFERENCE
                                    var var876 = thisRef.m_polygonB.normals.data[local_13_INT]; // type is REFERENCE value type is REFERENCE
                                    ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var869,var872,var876);
                                    local_13_INT = (local_13_INT + 1); // type is INT value type is INT
                                    __label__ = 2342;
                                    continue $L_2342;
                                case 2411 :
                                // NORMAL
                                    $S_2411 : {
                                    // NORMAL
                                        thisRef.m_radius = 0.02;
                                        manifold.pointCount = 0;
                                        thisRef.VOIDcomputeEdgeSeparationojcCollision$EPAxis(thisRef,thisRef.edgeAxis);
                                        var var559 = thisRef.edgeAxis.type; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6c6f579c
                                        var var560 = ojcCollision$EPAxis$Type.UNKNOWN; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@601b290f
                                        if ((var559 != var560)) {
                                            break $S_2411;
                                        }
                                        return;
                                        }
                                    $S_2444 : {
                                    // NORMAL
                                        var var562 = thisRef.edgeAxis.separation; // type is FLOAT value type is FLOAT
                                        var var563 = thisRef.m_radius; // type is FLOAT value type is FLOAT
                                        if ((var562 <= var563)) {
                                            break $S_2444;
                                        }
                                        return;
                                        }
                                    $S_2460 : {
                                    // NORMAL
                                        thisRef.VOIDcomputePolygonSeparationojcCollision$EPAxis(thisRef,thisRef.polygonAxis);
                                        var var567 = thisRef.polygonAxis.type; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@23d616f0
                                        var var568 = ojcCollision$EPAxis$Type.UNKNOWN; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4a2e4f5f
                                        if ((var567 == var568)) {
                                            __label__ = 2497;
                                            break $S_2460;
                                        }
                                        __label__ = 2481;
                                        }
                                    $M_2481_2497 : for(;;) switch (__label__) {
                                        case 2481 :
                                        // NORMAL
                                            var var570 = thisRef.polygonAxis.separation; // type is FLOAT value type is FLOAT
                                            var var571 = thisRef.m_radius; // type is FLOAT value type is FLOAT
                                            if ((var570 <= var571)) {
                                                __label__ = 2497;
                                                continue $M_2481_2497;
                                            }
                                            return;
                                        case 2497 :
                                        // NORMAL
                                            $S_2497 : {
                                            // NORMAL
                                                var local_13_FLOAT = 0.98; // type is FLOAT value type is FLOAT
                                                var local_14_FLOAT = 0.001; // type is FLOAT value type is FLOAT
                                                var var578 = thisRef.polygonAxis.type; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5c6b2231
                                                var var579 = ojcCollision$EPAxis$Type.UNKNOWN; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@65013be2
                                                if ((var578 != var579)) {
                                                    __label__ = 2527;
                                                    break $S_2497;
                                                }
                                                __label__ = 2518;
                                                }
                                            $M_2518_2527 : for(;;) switch (__label__) {
                                                case 2518 :
                                                // NORMAL
                                                    local_15_REFERENCE = thisRef.edgeAxis; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7673d024
                                                    break $M_2518_2527;
                                                case 2527 :
                                                // NORMAL
                                                    $S_2527 : {
                                                    // NORMAL
                                                        var var581 = thisRef.polygonAxis.separation; // type is FLOAT value type is FLOAT
                                                        var var585 = ((0.98 * thisRef.edgeAxis.separation) + 0.001); // type is FLOAT value type is FLOAT
                                                        if ((var581 <= var585)) {
                                                            __label__ = 2560;
                                                            break $S_2527;
                                                        }
                                                        __label__ = 2551;
                                                        }
                                                    for(;;) switch (__label__) {
                                                        case 2560 :
                                                        // NORMAL
                                                            local_15_REFERENCE = thisRef.edgeAxis; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4e1f2d02
                                                            break $M_2518_2527;
                                                        case 2551 :
                                                        // NORMAL
                                                            local_15_REFERENCE = thisRef.polygonAxis; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4be0e45a
                                                            break $M_2518_2527;
                                                    }
                                            }
                                            $S_2566 : {
                                            // NORMAL
                                                var var592 = thisRef.ie.data[0]; // type is REFERENCE value type is REFERENCE
                                                local_16_REFERENCE = var592; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@17628da8
                                                var var595 = thisRef.ie.data[1]; // type is REFERENCE value type is REFERENCE
                                                local_17_REFERENCE = var595; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@7a2960ec
                                                var var598 = local_15_REFERENCE.type; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@27d218ef
                                                var var599 = ojcCollision$EPAxis$Type.EDGE_A; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4f480ec1
                                                if ((var598 != var599)) {
                                                    __label__ = 2981;
                                                    break $S_2566;
                                                }
                                                __label__ = 2593;
                                                }
                                            $M_2981_2593 : for(;;) switch (__label__) {
                                                case 2981 :
                                                // NORMAL
                                                    $S_2981 : {
                                                    // NORMAL
                                                        var var600 = ojcManifold$ManifoldType.FACE_B; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@78085d17
                                                        manifold.type = var600;
                                                        var var604 = local_16_REFERENCE.v.ojcVec2setojcVec2(local_16_REFERENCE.v,thisRef.m_v1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3486b478
                                                        var var606 = local_16_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3a4d767
                                                        var606.indexA = 0;
                                                        var var608 = local_16_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@c15ffd4
                                                        var var611 = Math.floor(local_15_REFERENCE.index); // type is BYTE value type is BYTE
                                                        var608.indexB = var611;
                                                        var var613 = local_16_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@364ffba4
                                                        var var615 = ojcContactID$Type.VERTEX.INTordinal(ojcContactID$Type.VERTEX); // type is INT value type is INT
                                                        var var616 = Math.floor(var615); // type is BYTE value type is BYTE
                                                        var613.typeA = var616;
                                                        var var618 = local_16_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@37ebbc61
                                                        var var620 = ojcContactID$Type.FACE.INTordinal(ojcContactID$Type.FACE); // type is INT value type is INT
                                                        var var621 = Math.floor(var620); // type is BYTE value type is BYTE
                                                        var618.typeB = var621;
                                                        var var625 = local_17_REFERENCE.v.ojcVec2setojcVec2(local_17_REFERENCE.v,thisRef.m_v2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@12514a14
                                                        var var627 = local_17_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3119ecd5
                                                        var627.indexA = 0;
                                                        var var629 = local_17_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7842a389
                                                        var var632 = Math.floor(local_15_REFERENCE.index); // type is BYTE value type is BYTE
                                                        var629.indexB = var632;
                                                        var var634 = local_17_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@12200054
                                                        var var636 = ojcContactID$Type.VERTEX.INTordinal(ojcContactID$Type.VERTEX); // type is INT value type is INT
                                                        var var637 = Math.floor(var636); // type is BYTE value type is BYTE
                                                        var634.typeA = var637;
                                                        var var639 = local_17_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@a39f9ee
                                                        var var641 = ojcContactID$Type.FACE.INTordinal(ojcContactID$Type.FACE); // type is INT value type is INT
                                                        var var642 = Math.floor(var641); // type is BYTE value type is BYTE
                                                        var639.typeB = var642;
                                                        var var643 = thisRef.rf; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@74b8d338
                                                        var var645 = local_15_REFERENCE.index; // type is INT value type is INT
                                                        var643.i1 = var645;
                                                        var646 = thisRef.rf; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@190b68cd
                                                        var var649 = (thisRef.rf.i1 + 1); // type is INT value type is INT
                                                        var var651 = thisRef.m_polygonB.count; // type is INT value type is INT
                                                        if ((var649 >= var651)) {
                                                            __label__ = 3167;
                                                            break $S_2981;
                                                        }
                                                        __label__ = 3155;
                                                        }
                                                    $M_3155_3167 : for(;;) switch (__label__) {
                                                        case 3155 :
                                                        // NORMAL
                                                            var655 = (thisRef.rf.i1 + 1); // type is INT value type is INT
                                                            break $M_3155_3167;
                                                        case 3167 :
                                                        // NORMAL
                                                            var655 = 0; // type is INT value type is INT
                                                            break $M_3155_3167;
                                                    }
                                                    var646.i2 = var655;
                                                    var var657 = thisRef.rf.v1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@bbbf918
                                                    var var662 = thisRef.m_polygonB.vertices.data[thisRef.rf.i1]; // type is REFERENCE value type is REFERENCE
                                                    var var663 = var657.ojcVec2setojcVec2(var657,var662); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4e088708
                                                    var var665 = thisRef.rf.v2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7c9bbce2
                                                    var var670 = thisRef.m_polygonB.vertices.data[thisRef.rf.i2]; // type is REFERENCE value type is REFERENCE
                                                    var var671 = var665.ojcVec2setojcVec2(var665,var670); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3e14eebc
                                                    var var673 = thisRef.rf.normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6ab3a35f
                                                    var var678 = thisRef.m_polygonB.normals.data[thisRef.rf.i1]; // type is REFERENCE value type is REFERENCE
                                                    var var679 = var673.ojcVec2setojcVec2(var673,var678); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@608949c6
                                                    break $M_2981_2593;
                                                case 2593 :
                                                // NORMAL
                                                    $S_2593 : {
                                                    // NORMAL
                                                        var var680 = ojcManifold$ManifoldType.FACE_A; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@41d48599
                                                        manifold.type = var680;
                                                        local_18_INT = 0; // type is INT value type is INT
                                                        var var683 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@582cf211
                                                        var var686 = thisRef.m_polygonB.normals.data[0]; // type is REFERENCE value type is REFERENCE
                                                        var var687 = ojcVec2.FLOATdotojcVec2ojcVec2(var683,var686); // type is FLOAT value type is FLOAT
                                                        local_19_FLOAT = var687; // type is FLOAT value type is FLOAT
                                                        local_20_INT = 1; // type is INT value type is INT
                                                        __label__ = 2624;
                                                        }
                                                    $L_2624 : for (;;) {
                                                        $S_2624 : {
                                                        // NORMAL
                                                            var var692 = local_20_INT; // type is INT value type is INT
                                                            var var694 = thisRef.m_polygonB.count; // type is INT value type is INT
                                                            if ((var692 >= var694)) {
                                                                __label__ = 2677;
                                                                break $S_2624;
                                                            }
                                                            __label__ = 2636;
                                                            }
                                                        for(;;) switch (__label__) {
                                                            case 2636 :
                                                            // NORMAL
                                                                $S_2636 : {
                                                                // NORMAL
                                                                    var var949 = thisRef.m_normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2ff20b10
                                                                    var var953 = thisRef.m_polygonB.normals.data[local_20_INT]; // type is REFERENCE value type is REFERENCE
                                                                    var var954 = ojcVec2.FLOATdotojcVec2ojcVec2(var949,var953); // type is FLOAT value type is FLOAT
                                                                    local_21_FLOAT = var954; // type is FLOAT value type is FLOAT
                                                                    var var956 = local_21_FLOAT; // type is FLOAT value type is FLOAT
                                                                    var var957 = local_19_FLOAT; // type is FLOAT value type is FLOAT
                                                                    if ((var956 >= var957)) {
                                                                        __label__ = 2671;
                                                                        break $S_2636;
                                                                    }
                                                                    __label__ = 2663;
                                                                    }
                                                                $M_2663_2671 : for(;;) switch (__label__) {
                                                                    case 2671 :
                                                                    // NORMAL
                                                                        local_20_INT = (local_20_INT + 1); // type is INT value type is INT
                                                                        __label__ = 2624;
                                                                        continue $L_2624;
                                                                    case 2663 :
                                                                    // NORMAL
                                                                        local_19_FLOAT = local_21_FLOAT; // type is FLOAT value type is FLOAT
                                                                        local_18_INT = local_20_INT; // type is INT value type is INT
                                                                        __label__ = 2671;
                                                                        continue $M_2663_2671;
                                                                }
                                                            case 2677 :
                                                            // NORMAL
                                                                $S_2677 : {
                                                                // NORMAL
                                                                    local_20_INT = local_18_INT; // type is INT value type is INT
                                                                    var var698 = (local_20_INT + 1); // type is INT value type is INT
                                                                    var var700 = thisRef.m_polygonB.count; // type is INT value type is INT
                                                                    if ((var698 >= var700)) {
                                                                        __label__ = 2702;
                                                                        break $S_2677;
                                                                    }
                                                                    __label__ = 2695;
                                                                    }
                                                                $M_2695_2702 : for(;;) switch (__label__) {
                                                                    case 2695 :
                                                                    // NORMAL
                                                                        var703 = (local_20_INT + 1); // type is INT value type is INT
                                                                        break $M_2695_2702;
                                                                    case 2702 :
                                                                    // NORMAL
                                                                        var703 = 0; // type is INT value type is INT
                                                                        break $M_2695_2702;
                                                                }
                                                                $S_2703 : {
                                                                // NORMAL
                                                                    var local_21_INT = var703; // type is INT value type is INT
                                                                    var var707 = local_16_REFERENCE.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@59fb051
                                                                    var var711 = thisRef.m_polygonB.vertices.data[local_20_INT]; // type is REFERENCE value type is REFERENCE
                                                                    var var712 = var707.ojcVec2setojcVec2(var707,var711); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@60021536
                                                                    var var714 = local_16_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5f81cf5d
                                                                    var714.indexA = 0;
                                                                    var var716 = local_16_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6094f536
                                                                    var var718 = Math.floor(local_20_INT); // type is BYTE value type is BYTE
                                                                    var716.indexB = var718;
                                                                    var var720 = local_16_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@18f1dc4d
                                                                    var var722 = ojcContactID$Type.FACE.INTordinal(ojcContactID$Type.FACE); // type is INT value type is INT
                                                                    var var723 = Math.floor(var722); // type is BYTE value type is BYTE
                                                                    var720.typeA = var723;
                                                                    var var725 = local_16_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@68aad1c0
                                                                    var var727 = ojcContactID$Type.VERTEX.INTordinal(ojcContactID$Type.VERTEX); // type is INT value type is INT
                                                                    var var728 = Math.floor(var727); // type is BYTE value type is BYTE
                                                                    var725.typeB = var728;
                                                                    var var730 = local_17_REFERENCE.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@398010af
                                                                    var var734 = thisRef.m_polygonB.vertices.data[local_21_INT]; // type is REFERENCE value type is REFERENCE
                                                                    var var735 = var730.ojcVec2setojcVec2(var730,var734); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7e7a6fec
                                                                    var var737 = local_17_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@68ffd7da
                                                                    var737.indexA = 0;
                                                                    var var739 = local_17_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@56652fd4
                                                                    var var741 = Math.floor(local_21_INT); // type is BYTE value type is BYTE
                                                                    var739.indexB = var741;
                                                                    var var743 = local_17_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6f5958df
                                                                    var var745 = ojcContactID$Type.FACE.INTordinal(ojcContactID$Type.FACE); // type is INT value type is INT
                                                                    var var746 = Math.floor(var745); // type is BYTE value type is BYTE
                                                                    var743.typeA = var746;
                                                                    var var748 = local_17_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@42714fd7
                                                                    var var750 = ojcContactID$Type.VERTEX.INTordinal(ojcContactID$Type.VERTEX); // type is INT value type is INT
                                                                    var var751 = Math.floor(var750); // type is BYTE value type is BYTE
                                                                    var748.typeB = var751;
                                                                    var var752 = thisRef.m_front; // type is BOOLEAN value type is BOOLEAN
                                                                    if ((var752 == 0)) {
                                                                        __label__ = 2914;
                                                                        break $S_2703;
                                                                    }
                                                                    __label__ = 2850;
                                                                    }
                                                                $M_2850_2914 : for(;;) switch (__label__) {
                                                                    case 2914 :
                                                                    // NORMAL
                                                                        var var767 = thisRef.rf; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@54a61144
                                                                        var767.i1 = 1;
                                                                        var var768 = thisRef.rf; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2b428f8b
                                                                        var768.i2 = 0;
                                                                        var var772 = thisRef.rf.v1.ojcVec2setojcVec2(thisRef.rf.v1,thisRef.m_v2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@ef8a59c
                                                                        var var776 = thisRef.rf.v2.ojcVec2setojcVec2(thisRef.rf.v2,thisRef.m_v1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@46bf4c63
                                                                        var var780 = thisRef.rf.normal.ojcVec2setojcVec2(thisRef.rf.normal,thisRef.m_normal1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@22f749c1
                                                                        var var781 = var780.ojcVec2negateLocal(var780); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1d76b4c3
                                                                        break $M_2850_2914;
                                                                    case 2850 :
                                                                    // NORMAL
                                                                        var var753 = thisRef.rf; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@56e926b4
                                                                        var753.i1 = 0;
                                                                        var var754 = thisRef.rf; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6a09a45e
                                                                        var754.i2 = 1;
                                                                        var var758 = thisRef.rf.v1.ojcVec2setojcVec2(thisRef.rf.v1,thisRef.m_v1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@72a8519f
                                                                        var var762 = thisRef.rf.v2.ojcVec2setojcVec2(thisRef.rf.v2,thisRef.m_v2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5ad023a5
                                                                        var var766 = thisRef.rf.normal.ojcVec2setojcVec2(thisRef.rf.normal,thisRef.m_normal1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@451362cd
                                                                        break $M_2850_2914;
                                                                }
                                                                break $M_2981_2593;
                                                        }
                                                    }
                                            }
                                            $S_3249 : {
                                            // NORMAL
                                                var var791 = thisRef.rf.sideNormal1.ojcVec2setFLOATFLOAT(thisRef.rf.sideNormal1,thisRef.rf.normal.y,(-thisRef.rf.normal.x)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@621f0565
                                                var var796 = thisRef.rf.sideNormal2.ojcVec2setojcVec2(thisRef.rf.sideNormal2,thisRef.rf.sideNormal1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@520b9410
                                                var var797 = var796.ojcVec2negateLocal(var796); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@99d48ff
                                                var var798 = thisRef.rf; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@57c6560b
                                                var var803 = ojcVec2.FLOATdotojcVec2ojcVec2(thisRef.rf.sideNormal1,thisRef.rf.v1); // type is FLOAT value type is FLOAT
                                                var798.sideOffset1 = var803;
                                                var var804 = thisRef.rf; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4de855bb
                                                var var809 = ojcVec2.FLOATdotojcVec2ojcVec2(thisRef.rf.sideNormal2,thisRef.rf.v2); // type is FLOAT value type is FLOAT
                                                var804.sideOffset2 = var809;
                                                var var818 = ojcCollision.INTclipSegmentToLineA1ojcCollision$ClipVertexA1ojcCollision$ClipVertexojcVec2FLOATINT(thisRef.clipPoints1,thisRef.ie,thisRef.rf.sideNormal1,thisRef.rf.sideOffset1,thisRef.rf.i1); // type is INT value type is INT
                                                local_18_INT = var818; // type is INT value type is INT
                                                var var820 = local_18_INT; // type is INT value type is INT
                                                if ((var820 >= 2)) {
                                                    break $S_3249;
                                                }
                                                return;
                                                }
                                            $S_3391 : {
                                            // NORMAL
                                                var var829 = ojcCollision.INTclipSegmentToLineA1ojcCollision$ClipVertexA1ojcCollision$ClipVertexojcVec2FLOATINT(thisRef.clipPoints2,thisRef.clipPoints1,thisRef.rf.sideNormal2,thisRef.rf.sideOffset2,thisRef.rf.i2); // type is INT value type is INT
                                                local_18_INT = var829; // type is INT value type is INT
                                                var var831 = local_18_INT; // type is INT value type is INT
                                                if ((var831 >= 2)) {
                                                    break $S_3391;
                                                }
                                                return;
                                                }
                                            $S_3432 : {
                                            // NORMAL
                                                var var833 = local_15_REFERENCE.type; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@43cdf302
                                                var var834 = ojcCollision$EPAxis$Type.EDGE_A; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@20749134
                                                if ((var833 != var834)) {
                                                    __label__ = 3476;
                                                    break $S_3432;
                                                }
                                                __label__ = 3443;
                                                }
                                            $M_3443_3476 : for(;;) switch (__label__) {
                                                case 3443 :
                                                // NORMAL
                                                    var var838 = manifold.localNormal.ojcVec2setojcVec2(manifold.localNormal,thisRef.rf.normal); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@45e7ed3f
                                                    var var842 = manifold.localPoint.ojcVec2setojcVec2(manifold.localPoint,thisRef.rf.v1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4a2d3db5
                                                    break $M_3443_3476;
                                                case 3476 :
                                                // NORMAL
                                                    var var843 = manifold.localNormal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@66548211
                                                    var var847 = polygonB.m_normals.data[thisRef.rf.i1]; // type is REFERENCE value type is REFERENCE
                                                    var var848 = var843.ojcVec2setojcVec2(var843,var847); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@622d42de
                                                    var var849 = manifold.localPoint; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1859c5b1
                                                    var var853 = polygonB.m_vertices.data[thisRef.rf.i1]; // type is REFERENCE value type is REFERENCE
                                                    var var854 = var849.ojcVec2setojcVec2(var849,var853); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3bba939a
                                                    break $M_3443_3476;
                                            }
                                            $S_3518 : {
                                            // NORMAL
                                                local_19_INT = 0; // type is INT value type is INT
                                                local_20_INT = 0; // type is INT value type is INT
                                                __label__ = 3524;
                                                }
                                            $L_3524 : for (;;) {
                                                $S_3524 : {
                                                // NORMAL
                                                    var var858 = local_20_INT; // type is INT value type is INT
                                                    if ((var858 >= 2)) {
                                                        __label__ = 3754;
                                                        break $S_3524;
                                                    }
                                                    __label__ = 3530;
                                                    }
                                                for(;;) switch (__label__) {
                                                    case 3754 :
                                                    // NORMAL
                                                        var var859 = local_19_INT; // type is INT value type is INT
                                                        manifold.pointCount = var859;
                                                        return;
                                                    case 3530 :
                                                    // NORMAL
                                                        $S_3530 : {
                                                        // NORMAL
                                                            var var878 = thisRef.rf.normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@793cdaf6
                                                            var var879 = thisRef.temp; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@718f4cbd
                                                            var var882 = thisRef.clipPoints2.data[local_20_INT]; // type is REFERENCE value type is REFERENCE
                                                            var var884 = var879.ojcVec2setojcVec2(var879,var882.v); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@272d7b70
                                                            var var887 = var884.ojcVec2subLocalojcVec2(var884,thisRef.rf.v1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@48e40a4c
                                                            var var888 = ojcVec2.FLOATdotojcVec2ojcVec2(var878,var887); // type is FLOAT value type is FLOAT
                                                            local_21_FLOAT = var888; // type is FLOAT value type is FLOAT
                                                            var var891 = local_21_FLOAT; // type is FLOAT value type is FLOAT
                                                            var var892 = thisRef.m_radius; // type is FLOAT value type is FLOAT
                                                            if ((var891 > var892)) {
                                                                __label__ = 3748;
                                                                break $S_3530;
                                                            }
                                                            __label__ = 3579;
                                                            }
                                                        $M_3579_3748 : for(;;) switch (__label__) {
                                                            case 3748 :
                                                            // NORMAL
                                                                local_20_INT = (local_20_INT + 1); // type is INT value type is INT
                                                                __label__ = 3524;
                                                                continue $L_3524;
                                                            case 3579 :
                                                            // NORMAL
                                                                $S_3579 : {
                                                                // NORMAL
                                                                    var var896 = manifold.points.data[local_19_INT]; // type is REFERENCE value type is REFERENCE
                                                                    local_22_REFERENCE = var896; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@5272355
                                                                    var var899 = local_15_REFERENCE.type; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@571082cc
                                                                    var var900 = ojcCollision$EPAxis$Type.EDGE_A; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5cf1c637
                                                                    if ((var899 != var900)) {
                                                                        __label__ = 3642;
                                                                        break $S_3579;
                                                                    }
                                                                    __label__ = 3599;
                                                                    }
                                                                $M_3642_3599 : for(;;) switch (__label__) {
                                                                    case 3599 :
                                                                    // NORMAL
                                                                        var var936 = thisRef.m_xf; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@10cbc022
                                                                        var var939 = thisRef.clipPoints2.data[local_20_INT]; // type is REFERENCE value type is REFERENCE
                                                                        ojcTransform.VOIDmulTransToOutUnsafeojcTransformojcVec2ojcVec2(var936,var939.v,local_22_REFERENCE.localPoint);
                                                                        var var944 = local_22_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@78150e1d
                                                                        var var947 = thisRef.clipPoints2.data[local_20_INT]; // type is REFERENCE value type is REFERENCE
                                                                        var944.VOIDsetojcContactID(var944,var947.id);
                                                                        break $M_3642_3599;
                                                                    case 3642 :
                                                                    // NORMAL
                                                                        var var902 = local_22_REFERENCE.localPoint; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2bc0f531
                                                                        var var905 = thisRef.clipPoints2.data[local_20_INT]; // type is REFERENCE value type is REFERENCE
                                                                        var var907 = var902.ojcVec2setojcVec2(var902,var905.v); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@79d24e00
                                                                        var var909 = local_22_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@37d64bc8
                                                                        var var912 = thisRef.clipPoints2.data[local_20_INT]; // type is REFERENCE value type is REFERENCE
                                                                        var var914 = var912.id.typeB; // type is BYTE value type is BYTE
                                                                        var909.typeA = var914;
                                                                        var var916 = local_22_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@67e3cec9
                                                                        var var919 = thisRef.clipPoints2.data[local_20_INT]; // type is REFERENCE value type is REFERENCE
                                                                        var var921 = var919.id.typeA; // type is BYTE value type is BYTE
                                                                        var916.typeB = var921;
                                                                        var var923 = local_22_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4ba6d679
                                                                        var var926 = thisRef.clipPoints2.data[local_20_INT]; // type is REFERENCE value type is REFERENCE
                                                                        var var928 = var926.id.indexB; // type is BYTE value type is BYTE
                                                                        var923.indexA = var928;
                                                                        var var930 = local_22_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@206f3343
                                                                        var var933 = thisRef.clipPoints2.data[local_20_INT]; // type is REFERENCE value type is REFERENCE
                                                                        var var935 = var933.id.indexA; // type is BYTE value type is BYTE
                                                                        var930.indexB = var935;
                                                                        break $M_3642_3599;
                                                                }
                                                                local_19_INT = (local_19_INT + 1); // type is INT value type is INT
                                                                __label__ = 3748;
                                                                continue $M_3579_3748;
                                                        }
                                                }
                                            }
                                    }
                            }
                        }
                }
            case 164 :
            // NORMAL
                $S_164 : {
                // NORMAL
                    var var48 = thisRef.edge0.ojcVec2setojcVec2(thisRef.edge0,thisRef.m_v1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2562b48d
                    var var50 = var48.ojcVec2subLocalojcVec2(var48,thisRef.m_v0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5c8eb36e
                    var var52 = thisRef.edge0.FLOATnormalize(thisRef.edge0); // type is FLOAT value type is FLOAT
                    var var59 = thisRef.m_normal0.ojcVec2setFLOATFLOAT(thisRef.m_normal0,thisRef.edge0.y,(-thisRef.edge0.x)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@21e6a398
                    var var62 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.edge0,thisRef.edge1); // type is FLOAT value type is FLOAT
                    if ((var62 < 0.0)) {
                        __label__ = 234;
                        break $S_164;
                    }
                    __label__ = 230;
                    }
                $M_234_230 : for(;;) switch (__label__) {
                    case 230 :
                    // NORMAL
                        var64 = 1; // type is INT value type is INT
                        break $M_234_230;
                    case 234 :
                    // NORMAL
                        var64 = 0; // type is INT value type is INT
                        break $M_234_230;
                }
                local_11_INT = var64; // type is INT value type is INT
                var var66 = thisRef.m_normal0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@784a69cc
                var var69 = thisRef.temp.ojcVec2setojcVec2(thisRef.temp,thisRef.m_centroidB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@483c6c94
                var var71 = var69.ojcVec2subLocalojcVec2(var69,thisRef.m_v0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6180b33e
                var var72 = ojcVec2.FLOATdotojcVec2ojcVec2(var66,var71); // type is FLOAT value type is FLOAT
                local_9_FLOAT = var72; // type is FLOAT value type is FLOAT
                __label__ = 264;
                continue $M_164_264;
        }
    },

    VOIDcomputeEdgeSeparationojcCollision$EPAxis : function(thisRef,axis) {
        var local_3_FLOAT = null; // type is FLOAT # of inits = 2
        var local_2_FLOAT = null; // type is FLOAT # of inits = 2
        var local_4_INT = null; // type is INT # of inits = 3
        var local_8_FLOAT = null; // type is FLOAT # of inits = 1
        var var2 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcCollision$EPAxis$Type.EDGE_A; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@217b92ad
            axis.type = var0;
            var var1 = thisRef.m_front; // type is BOOLEAN value type is BOOLEAN
            if ((var1 == 0)) {
                __label__ = 19;
                break $S_0;
            }
            __label__ = 15;
            }
        $M_19_15 : for(;;) switch (__label__) {
            case 15 :
            // NORMAL
                var2 = 0; // type is INT value type is INT
                break $M_19_15;
            case 19 :
            // NORMAL
                var2 = 1; // type is INT value type is INT
                break $M_19_15;
        }
        $S_20 : {
        // NORMAL
            axis.index = var2;
            axis.separation = 3.4028235E38;
            local_2_FLOAT = thisRef.m_normal.x; // type is FLOAT value type is FLOAT
            local_3_FLOAT = thisRef.m_normal.y; // type is FLOAT value type is FLOAT
            local_4_INT = 0; // type is INT value type is INT
            __label__ = 48;
            }
        $L_48 : for (;;) {
            $S_48 : {
            // NORMAL
                var var13 = local_4_INT; // type is INT value type is INT
                var var15 = thisRef.m_polygonB.count; // type is INT value type is INT
                if ((var13 >= var15)) {
                    return;
                }
                }
            $S_60 : {
            // NORMAL
                var var19 = thisRef.m_polygonB.vertices.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                var local_5_REFERENCE = var19; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@579210ab
                var local_6_FLOAT = (local_5_REFERENCE.x - thisRef.m_v1.x); // type is FLOAT value type is FLOAT
                var local_7_FLOAT = (local_5_REFERENCE.y - thisRef.m_v1.y); // type is FLOAT value type is FLOAT
                local_8_FLOAT = ((local_2_FLOAT * local_6_FLOAT) + (local_3_FLOAT * local_7_FLOAT)); // type is FLOAT value type is FLOAT
                var var44 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                var var45 = axis.separation; // type is FLOAT value type is FLOAT
                if ((var44 >= var45)) {
                    __label__ = 129;
                    break $S_60;
                }
                __label__ = 123;
                }
            $M_123_129 : for(;;) switch (__label__) {
                case 129 :
                // NORMAL
                    local_4_INT = (local_4_INT + 1); // type is INT value type is INT
                    __label__ = 48;
                    continue $L_48;
                case 123 :
                // NORMAL
                    var var47 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                    axis.separation = var47;
                    __label__ = 129;
                    continue $M_123_129;
            }
        }
    },

    VOIDcomputePolygonSeparationojcCollision$EPAxis : function(thisRef,axis) {
        var local_2_INT = null; // type is INT # of inits = 3
        var local_9_FLOAT = null; // type is FLOAT # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcCollision$EPAxis$Type.UNKNOWN; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4baba0c9
            axis.type = var0;
            axis.index = -1;
            axis.separation = -3.4028235E38;
            var var1 = thisRef.perp; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@620aaa70
            var var4 = (-thisRef.m_normal.y); // type is FLOAT value type is FLOAT
            var1.x = var4;
            var var5 = thisRef.perp; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5b0148a8
            var var7 = thisRef.m_normal.x; // type is FLOAT value type is FLOAT
            var5.y = var7;
            local_2_INT = 0; // type is INT value type is INT
            __label__ = 49;
            }
        $L_49 : for (;;) {
            $S_49 : {
            // NORMAL
                var var10 = local_2_INT; // type is INT value type is INT
                var var12 = thisRef.m_polygonB.count; // type is INT value type is INT
                if ((var10 >= var12)) {
                    return;
                }
                }
            $S_60 : {
            // NORMAL
                var var16 = thisRef.m_polygonB.normals.data[local_2_INT]; // type is REFERENCE value type is REFERENCE
                var local_3_REFERENCE = var16; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@32639b24
                var var21 = thisRef.m_polygonB.vertices.data[local_2_INT]; // type is REFERENCE value type is REFERENCE
                var local_4_REFERENCE = var21; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@2458d849
                var var23 = thisRef.n; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1336bf98
                var var26 = (-local_3_REFERENCE.x); // type is FLOAT value type is FLOAT
                var23.x = var26;
                var var27 = thisRef.n; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4223e15e
                var var30 = (-local_3_REFERENCE.y); // type is FLOAT value type is FLOAT
                var27.y = var30;
                var local_5_FLOAT = (local_4_REFERENCE.x - thisRef.m_v1.x); // type is FLOAT value type is FLOAT
                var local_6_FLOAT = (local_4_REFERENCE.y - thisRef.m_v1.y); // type is FLOAT value type is FLOAT
                var local_7_FLOAT = ((thisRef.n.x * local_5_FLOAT) + (thisRef.n.y * local_6_FLOAT)); // type is FLOAT value type is FLOAT
                var local_5_FLOAT = (local_4_REFERENCE.x - thisRef.m_v2.x); // type is FLOAT value type is FLOAT
                var local_6_FLOAT = (local_4_REFERENCE.y - thisRef.m_v2.y); // type is FLOAT value type is FLOAT
                var local_8_FLOAT = ((thisRef.n.x * local_5_FLOAT) + (thisRef.n.y * local_6_FLOAT)); // type is FLOAT value type is FLOAT
                var var81 = ojcMathUtils.FLOATminFLOATFLOAT(local_7_FLOAT,local_8_FLOAT); // type is FLOAT value type is FLOAT
                local_9_FLOAT = var81; // type is FLOAT value type is FLOAT
                var var84 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                var var85 = thisRef.m_radius; // type is FLOAT value type is FLOAT
                if ((var84 <= var85)) {
                    __label__ = 249;
                    break $S_60;
                }
                __label__ = 230;
                }
            for(;;) switch (__label__) {
                case 249 :
                // NORMAL
                    $S_249 : {
                    // NORMAL
                        var var97 = ((thisRef.n.x * thisRef.perp.x) + (thisRef.n.y * thisRef.perp.y)); // type is FLOAT value type is FLOAT
                        if ((var97 < 0.0)) {
                            __label__ = 319;
                            break $S_249;
                        }
                        __label__ = 285;
                        }
                    $M_319_285 : for(;;) switch (__label__) {
                        case 319 :
                        // NORMAL
                            $S_319 : {
                            // NORMAL
                                var var109 = thisRef.temp.ojcVec2setojcVec2(thisRef.temp,thisRef.n); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6cb7f885
                                var var111 = var109.ojcVec2subLocalojcVec2(var109,thisRef.m_lowerLimit); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@e4fefca
                                var var113 = ojcVec2.FLOATdotojcVec2ojcVec2(var111,thisRef.m_normal); // type is FLOAT value type is FLOAT
                                if ((var113 >= -0.03490659)) {
                                    __label__ = 353;
                                    break $M_319_285;
                                }
                                }
                            __label__ = 381;
                            break $M_319_285;
                        case 285 :
                        // NORMAL
                            $S_285 : {
                            // NORMAL
                                var var101 = thisRef.temp.ojcVec2setojcVec2(thisRef.temp,thisRef.n); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@28a34be4
                                var var103 = var101.ojcVec2subLocalojcVec2(var101,thisRef.m_upperLimit); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@755766bf
                                var var105 = ojcVec2.FLOATdotojcVec2ojcVec2(var103,thisRef.m_normal); // type is FLOAT value type is FLOAT
                                if ((var105 >= -0.03490659)) {
                                    __label__ = 353;
                                    break $M_319_285;
                                }
                                }
                            __label__ = 381;
                            break $M_319_285;
                    }
                    $M_381_353 : for(;;) switch (__label__) {
                        case 353 :
                        // NORMAL
                            $S_353 : {
                            // NORMAL
                                var var115 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                                var var116 = axis.separation; // type is FLOAT value type is FLOAT
                                if ((var115 <= var116)) {
                                    __label__ = 381;
                                    continue $M_381_353;
                                }
                                }
                            var var118 = ojcCollision$EPAxis$Type.EDGE_B; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2677cb40
                            axis.type = var118;
                            var var119 = local_2_INT; // type is INT value type is INT
                            axis.index = var119;
                            var var120 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                            axis.separation = var120;
                            __label__ = 381;
                            continue $M_381_353;
                        case 381 :
                        // NORMAL
                            local_2_INT = (local_2_INT + 1); // type is INT value type is INT
                            __label__ = 49;
                            continue $L_49;
                    }
                case 230 :
                // NORMAL
                    var var121 = ojcCollision$EPAxis$Type.EDGE_B; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@57b741fb
                    axis.type = var121;
                    var var122 = local_2_INT; // type is INT value type is INT
                    axis.index = var122;
                    var var123 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                    axis.separation = var123;
                    return;
            }
        }
    },

    classInitCheck : function() {
        if (!ojcCollision$EPCollider.__initialized) {
            ojcCollision$EPCollider.__initialized = true;
            var thePrototype = ojcCollision$EPCollider.Create.prototype;
            thePrototype.instanceOf = ojcCollision$EPCollider.instanceOf;
            thePrototype.ClassgetClass = ojcCollision$EPCollider.ClassgetClass;
            thePrototype.VOIDcomputePolygonSeparationojcCollision$EPAxis = ojcCollision$EPCollider.VOIDcomputePolygonSeparationojcCollision$EPAxis;
            thePrototype.VOIDcomputeEdgeSeparationojcCollision$EPAxis = ojcCollision$EPCollider.VOIDcomputeEdgeSeparationojcCollision$EPAxis;
            thePrototype.VOIDcollideojcManifoldojcsEdgeShapeojcTransformojcsPolygonShapeojcTransform = ojcCollision$EPCollider.VOIDcollideojcManifoldojcsEdgeShapeojcTransformojcsPolygonShapeojcTransform;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojcCollision$TempPolygon = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 78,
    __implementedTypes : [1,78],

    Create : function() {
        this.vertices = null; // declared in org.jbox2d.collision.Collision$TempPolygon
        this.normals = null; // declared in org.jbox2d.collision.Collision$TempPolygon
        this.count = 0; // declared in org.jbox2d.collision.Collision$TempPolygon
    },

    instanceOf : function(aType) {
        return ojcCollision$TempPolygon.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcCollision$TempPolygon;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var local_1_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = bytecoder.newArray(8,null); // type is REFERENCE value type is REFERENCE
            thisRef.vertices = var0;
            var var1 = bytecoder.newArray(8,null); // type is REFERENCE value type is REFERENCE
            thisRef.normals = var1;
            local_1_INT = 0; // type is INT value type is INT
            __label__ = 24;
            }
        $L_24 : for (;;) {
            $S_24 : {
            // NORMAL
                var var4 = local_1_INT; // type is INT value type is INT
                var var6 = thisRef.vertices.data.length; // type is INT value type is INT
                if ((var4 >= var6)) {
                    return;
                }
                }
            var var7 = thisRef.vertices; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@62457e77
            var var8 = local_1_INT; // type is INT value type is INT
            var var9 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var9);
            var7.data[var8] = var9;
            var var10 = thisRef.normals; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@6362b4c
            var var11 = local_1_INT; // type is INT value type is INT
            var var12 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var12);
            var10.data[var11] = var12;
            local_1_INT = (local_1_INT + 1); // type is INT value type is INT
            __label__ = 24;
            continue $L_24;
        }
    },

    classInitCheck : function() {
        if (!ojcCollision$TempPolygon.__initialized) {
            ojcCollision$TempPolygon.__initialized = true;
            var thePrototype = ojcCollision$TempPolygon.Create.prototype;
            thePrototype.instanceOf = ojcCollision$TempPolygon.instanceOf;
            thePrototype.ClassgetClass = ojcCollision$TempPolygon.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojcCollision$ReferenceFace = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 79,
    __implementedTypes : [1,79],

    Create : function() {
        this.v1 = null; // declared in org.jbox2d.collision.Collision$ReferenceFace
        this.v2 = null; // declared in org.jbox2d.collision.Collision$ReferenceFace
        this.normal = null; // declared in org.jbox2d.collision.Collision$ReferenceFace
        this.sideNormal1 = null; // declared in org.jbox2d.collision.Collision$ReferenceFace
        this.sideNormal2 = null; // declared in org.jbox2d.collision.Collision$ReferenceFace
        this.i1 = 0; // declared in org.jbox2d.collision.Collision$ReferenceFace
        this.i2 = 0; // declared in org.jbox2d.collision.Collision$ReferenceFace
        this.sideOffset1 = 0; // declared in org.jbox2d.collision.Collision$ReferenceFace
        this.sideOffset2 = 0; // declared in org.jbox2d.collision.Collision$ReferenceFace
    },

    instanceOf : function(aType) {
        return ojcCollision$ReferenceFace.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcCollision$ReferenceFace;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var0);
        thisRef.v1 = var0;
        var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var1);
        thisRef.v2 = var1;
        var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var2);
        thisRef.normal = var2;
        var var3 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var3);
        thisRef.sideNormal1 = var3;
        var var4 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var4);
        thisRef.sideNormal2 = var4;
        return;
    },

    classInitCheck : function() {
        if (!ojcCollision$ReferenceFace.__initialized) {
            ojcCollision$ReferenceFace.__initialized = true;
            var thePrototype = ojcCollision$ReferenceFace.Create.prototype;
            thePrototype.instanceOf = ojcCollision$ReferenceFace.instanceOf;
            thePrototype.ClassgetClass = ojcCollision$ReferenceFace.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojcCollision$EPAxis = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 80,
    __implementedTypes : [1,80],

    Create : function() {
        this.type = null; // declared in org.jbox2d.collision.Collision$EPAxis
        this.index = 0; // declared in org.jbox2d.collision.Collision$EPAxis
        this.separation = 0; // declared in org.jbox2d.collision.Collision$EPAxis
    },

    instanceOf : function(aType) {
        return ojcCollision$EPAxis.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcCollision$EPAxis;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    classInitCheck : function() {
        if (!ojcCollision$EPAxis.__initialized) {
            ojcCollision$EPAxis.__initialized = true;
            var thePrototype = ojcCollision$EPAxis.Create.prototype;
            thePrototype.instanceOf = ojcCollision$EPAxis.instanceOf;
            thePrototype.ClassgetClass = ojcCollision$EPAxis.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojcTimeOfImpact = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 81,
    __implementedTypes : [1,81],
    $assertionsDisabled : false, // declared in org.jbox2d.collision.TimeOfImpact
    toiCalls : 0, // declared in org.jbox2d.collision.TimeOfImpact
    toiIters : 0, // declared in org.jbox2d.collision.TimeOfImpact
    toiMaxIters : 0, // declared in org.jbox2d.collision.TimeOfImpact
    toiRootIters : 0, // declared in org.jbox2d.collision.TimeOfImpact
    toiMaxRootIters : 0, // declared in org.jbox2d.collision.TimeOfImpact

    Create : function() {
        this.cache = null; // declared in org.jbox2d.collision.TimeOfImpact
        this.distanceInput = null; // declared in org.jbox2d.collision.TimeOfImpact
        this.xfA = null; // declared in org.jbox2d.collision.TimeOfImpact
        this.xfB = null; // declared in org.jbox2d.collision.TimeOfImpact
        this.distanceOutput = null; // declared in org.jbox2d.collision.TimeOfImpact
        this.fcn = null; // declared in org.jbox2d.collision.TimeOfImpact
        this.indexes = null; // declared in org.jbox2d.collision.TimeOfImpact
        this.sweepA = null; // declared in org.jbox2d.collision.TimeOfImpact
        this.sweepB = null; // declared in org.jbox2d.collision.TimeOfImpact
        this.pool = null; // declared in org.jbox2d.collision.TimeOfImpact
    },

    instanceOf : function(aType) {
        return ojcTimeOfImpact.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcTimeOfImpact;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcTimeOfImpact.BOOLEANdesiredAssertionStatus(ojcTimeOfImpact); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_13_9 : for(;;) switch (__label__) {
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_13_9;
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_13_9;
        }
        ojcTimeOfImpact.$assertionsDisabled = var1;
        ojcTimeOfImpact.toiCalls = 0;
        ojcTimeOfImpact.toiIters = 0;
        ojcTimeOfImpact.toiMaxIters = 0;
        ojcTimeOfImpact.toiRootIters = 0;
        ojcTimeOfImpact.toiMaxRootIters = 0;
        return;
    },

    VOIDinitojpIWorldPool : function(thisRef,argPool) {
        var __label__ = null;
        var var0 = new ojcDistance$SimplexCache.Create(); // type is REFERENCE value type is REFERENCE
        ojcDistance$SimplexCache.VOIDinit(var0);
        thisRef.cache = var0;
        var var1 = new ojcDistanceInput.Create(); // type is REFERENCE value type is REFERENCE
        ojcDistanceInput.VOIDinit(var1);
        thisRef.distanceInput = var1;
        var var2 = new ojcTransform.Create(); // type is REFERENCE value type is REFERENCE
        ojcTransform.VOIDinit(var2);
        thisRef.xfA = var2;
        var var3 = new ojcTransform.Create(); // type is REFERENCE value type is REFERENCE
        ojcTransform.VOIDinit(var3);
        thisRef.xfB = var3;
        var var4 = new ojcDistanceOutput.Create(); // type is REFERENCE value type is REFERENCE
        ojcDistanceOutput.VOIDinit(var4);
        thisRef.distanceOutput = var4;
        var var5 = new ojcSeparationFunction.Create(); // type is REFERENCE value type is REFERENCE
        ojcSeparationFunction.VOIDinit(var5);
        thisRef.fcn = var5;
        var var6 = bytecoder.newArray(2,0); // type is REFERENCE value type is REFERENCE
        thisRef.indexes = var6;
        var var7 = new ojcSweep.Create(); // type is REFERENCE value type is REFERENCE
        ojcSweep.VOIDinit(var7);
        thisRef.sweepA = var7;
        var var8 = new ojcSweep.Create(); // type is REFERENCE value type is REFERENCE
        ojcSweep.VOIDinit(var8);
        thisRef.sweepB = var8;
        thisRef.pool = argPool;
        return;
    },

    VOIDtimeOfImpactojcTimeOfImpact$TOIOutputojcTimeOfImpact$TOIInput : function(thisRef,output,input) {
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_10_INT = null; // type is INT # of inits = 5
        var local_11_INT = null; // type is INT # of inits = 6
        var local_14_FLOAT = null; // type is FLOAT # of inits = 3
        var local_17_FLOAT = null; // type is FLOAT # of inits = 3
        var local_13_INT = null; // type is INT # of inits = 4
        var local_16_INT = null; // type is INT # of inits = 3
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_12_FLOAT = null; // type is FLOAT # of inits = 3
        var local_8_FLOAT = null; // type is FLOAT # of inits = 4
        var local_19_FLOAT = null; // type is FLOAT # of inits = 2
        var local_5_FLOAT = null; // type is FLOAT # of inits = 3
        var local_20_FLOAT = null; // type is FLOAT # of inits = 1
        var local_9_FLOAT = null; // type is FLOAT # of inits = 5
        var local_18_FLOAT = null; // type is FLOAT # of inits = 3
        var local_7_FLOAT = null; // type is FLOAT # of inits = 4
        var local_15_FLOAT = null; // type is FLOAT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var1 = (ojcTimeOfImpact.toiCalls + 1); // type is INT value type is INT
            ojcTimeOfImpact.toiCalls = var1;
            var var2 = ojcTimeOfImpact$TOIOutputState.UNKNOWN; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@69870539
            output.state = var2;
            var var3 = input.tMax; // type is FLOAT value type is FLOAT
            output.t = var3;
            local_3_REFERENCE = input.proxyA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@44547a38
            local_4_REFERENCE = input.proxyB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@364c1fb1
            var var10 = thisRef.sweepA.ojcSweepsetojcSweep(thisRef.sweepA,input.sweepA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@132f4470
            var var13 = thisRef.sweepB.ojcSweepsetojcSweep(thisRef.sweepB,input.sweepB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@42d035e1
            thisRef.sweepA.VOIDnormalize(thisRef.sweepA);
            thisRef.sweepB.VOIDnormalize(thisRef.sweepB);
            local_5_FLOAT = input.tMax; // type is FLOAT value type is FLOAT
            var local_6_FLOAT = (local_3_REFERENCE.m_radius + local_4_REFERENCE.m_radius); // type is FLOAT value type is FLOAT
            var var28 = ojcMathUtils.FLOATmaxFLOATFLOAT(0.005,(local_6_FLOAT - 0.015)); // type is FLOAT value type is FLOAT
            local_7_FLOAT = var28; // type is FLOAT value type is FLOAT
            local_8_FLOAT = 0.00125; // type is FLOAT value type is FLOAT
            var var33 = ojcTimeOfImpact.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var33 != 0)) {
                __label__ = 128;
                break $S_0;
            }
            __label__ = 112;
            }
        $M_112_128 : for(;;) switch (__label__) {
            case 112 :
            // NORMAL
                $S_112 : {
                // NORMAL
                    var var34 = local_7_FLOAT; // type is FLOAT value type is FLOAT
                    var var35 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                    if ((var34 > var35)) {
                        __label__ = 128;
                        continue $M_112_128;
                    }
                    }
                var var209 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var209);
                throw var209;
            case 128 :
            // NORMAL
                $S_128 : {
                // NORMAL
                    local_9_FLOAT = 0.0; // type is FLOAT value type is FLOAT
                    local_10_INT = 0; // type is INT value type is INT
                    var var41 = thisRef.cache; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@25321239
                    var41.count = 0;
                    var var42 = thisRef.distanceInput; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@73d520b9
                    var var43 = input.proxyA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1a30f677
                    var42.proxyA = var43;
                    var var44 = thisRef.distanceInput; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@590cb7ed
                    var var45 = input.proxyB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6c9ac52f
                    var44.proxyB = var45;
                    var var46 = thisRef.distanceInput; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3610f0ed
                    var46.useRadii = 0;
                    __label__ = 172;
                    }
                $L_172 : for (;;) {
                    $S_172 : {
                    // NORMAL
                        thisRef.sweepA.VOIDgetTransformojcTransformFLOAT(thisRef.sweepA,thisRef.xfA,local_9_FLOAT);
                        thisRef.sweepB.VOIDgetTransformojcTransformFLOAT(thisRef.sweepB,thisRef.xfB,local_9_FLOAT);
                        var var53 = thisRef.distanceInput; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2b0e3b16
                        var var54 = thisRef.xfA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@17814245
                        var53.transformA = var54;
                        var var55 = thisRef.distanceInput; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2d885e27
                        var var56 = thisRef.xfB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1cae54e3
                        var55.transformB = var56;
                        var var58 = thisRef.pool.ojcDistancegetDistance(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@46a21aeb
                        var58.VOIDdistanceojcDistanceOutputojcDistance$SimplexCacheojcDistanceInput(var58,thisRef.distanceOutput,thisRef.cache,thisRef.distanceInput);
                        var var63 = thisRef.distanceOutput.distance; // type is FLOAT value type is FLOAT
                        if ((var63 > 0.0)) {
                            __label__ = 271;
                            break $S_172;
                        }
                        __label__ = 256;
                        }
                    $M_256_271 : for(;;) switch (__label__) {
                        case 271 :
                        // NORMAL
                            $S_271 : {
                            // NORMAL
                                var var66 = thisRef.distanceOutput.distance; // type is FLOAT value type is FLOAT
                                var var69 = (local_7_FLOAT + local_8_FLOAT); // type is FLOAT value type is FLOAT
                                if ((var66 >= var69)) {
                                    __label__ = 303;
                                    break $S_271;
                                }
                                __label__ = 287;
                                }
                            for(;;) switch (__label__) {
                                case 287 :
                                // NORMAL
                                    var var200 = ojcTimeOfImpact$TOIOutputState.TOUCHING; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5baceb10
                                    output.state = var200;
                                    var var201 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                                    output.t = var201;
                                    break $M_256_271;
                                case 303 :
                                // NORMAL
                                    $S_303 : {
                                    // NORMAL
                                        var var78 = thisRef.fcn.FLOATinitializeojcDistance$SimplexCacheojcDistance$DistanceProxyojcSweepojcDistance$DistanceProxyojcSweepFLOAT(thisRef.fcn,thisRef.cache,local_3_REFERENCE,thisRef.sweepA,local_4_REFERENCE,thisRef.sweepB,local_9_FLOAT); // type is FLOAT value type is FLOAT
                                        local_11_INT = 0; // type is INT value type is INT
                                        local_12_FLOAT = local_5_FLOAT; // type is FLOAT value type is FLOAT
                                        local_13_INT = 0; // type is INT value type is INT
                                        __label__ = 338;
                                        }
                                    $L_338 : for (;;) {
                                        $S_338 : {
                                        // NORMAL
                                            var var89 = thisRef.fcn.FLOATfindMinSeparationA1INTFLOAT(thisRef.fcn,thisRef.indexes,local_12_FLOAT); // type is FLOAT value type is FLOAT
                                            local_14_FLOAT = var89; // type is FLOAT value type is FLOAT
                                            var var92 = local_14_FLOAT; // type is FLOAT value type is FLOAT
                                            var var95 = (local_7_FLOAT + local_8_FLOAT); // type is FLOAT value type is FLOAT
                                            if ((var92 <= var95)) {
                                                __label__ = 383;
                                                break $S_338;
                                            }
                                            __label__ = 364;
                                            }
                                        $M_364_383 : for(;;) switch (__label__) {
                                            case 383 :
                                            // NORMAL
                                                $S_383 : {
                                                // NORMAL
                                                    var var97 = local_14_FLOAT; // type is FLOAT value type is FLOAT
                                                    var var100 = (local_7_FLOAT - local_8_FLOAT); // type is FLOAT value type is FLOAT
                                                    if ((var97 <= var100)) {
                                                        __label__ = 401;
                                                        break $S_383;
                                                    }
                                                    __label__ = 394;
                                                    }
                                                for(;;) switch (__label__) {
                                                    case 394 :
                                                    // NORMAL
                                                        local_9_FLOAT = local_12_FLOAT; // type is FLOAT value type is FLOAT
                                                        break $M_364_383;
                                                    case 401 :
                                                    // NORMAL
                                                        $S_401 : {
                                                        // NORMAL
                                                            var var107 = thisRef.fcn; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@34baef24
                                                            var var109 = thisRef.indexes.data[0]; // type is INT value type is INT
                                                            var var111 = thisRef.indexes.data[1]; // type is INT value type is INT
                                                            var var113 = var107.FLOATevaluateINTINTFLOAT(var107,var109,var111,local_9_FLOAT); // type is FLOAT value type is FLOAT
                                                            local_15_FLOAT = var113; // type is FLOAT value type is FLOAT
                                                            var var116 = local_15_FLOAT; // type is FLOAT value type is FLOAT
                                                            var var119 = (local_7_FLOAT - local_8_FLOAT); // type is FLOAT value type is FLOAT
                                                            if ((var116 >= var119)) {
                                                                __label__ = 454;
                                                                break $S_401;
                                                            }
                                                            __label__ = 435;
                                                            }
                                                        for(;;) switch (__label__) {
                                                            case 435 :
                                                            // NORMAL
                                                                var var191 = ojcTimeOfImpact$TOIOutputState.FAILED; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5a5dbc1c
                                                                output.state = var191;
                                                                var var192 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                                                                output.t = var192;
                                                                local_11_INT = 1; // type is INT value type is INT
                                                                break $M_364_383;
                                                            case 454 :
                                                            // NORMAL
                                                                $S_454 : {
                                                                // NORMAL
                                                                    var var121 = local_15_FLOAT; // type is FLOAT value type is FLOAT
                                                                    var var124 = (local_7_FLOAT + local_8_FLOAT); // type is FLOAT value type is FLOAT
                                                                    if ((var121 > var124)) {
                                                                        __label__ = 484;
                                                                        break $S_454;
                                                                    }
                                                                    __label__ = 465;
                                                                    }
                                                                for(;;) switch (__label__) {
                                                                    case 484 :
                                                                    // NORMAL
                                                                        $S_484 : {
                                                                        // NORMAL
                                                                            local_16_INT = 0; // type is INT value type is INT
                                                                            local_17_FLOAT = local_9_FLOAT; // type is FLOAT value type is FLOAT
                                                                            local_18_FLOAT = local_12_FLOAT; // type is FLOAT value type is FLOAT
                                                                            __label__ = 495;
                                                                            }
                                                                        $L_495 : for (;;) {
                                                                            $S_495 : {
                                                                            // NORMAL
                                                                                var var135 = (local_16_INT & 1); // type is INT value type is INT
                                                                                if ((var135 != 1)) {
                                                                                    __label__ = 528;
                                                                                    break $S_495;
                                                                                }
                                                                                __label__ = 503;
                                                                                }
                                                                            $M_503_528 : for(;;) switch (__label__) {
                                                                                case 503 :
                                                                                // NORMAL
                                                                                    local_19_FLOAT = (local_17_FLOAT + (((local_7_FLOAT - local_15_FLOAT) * (local_18_FLOAT - local_17_FLOAT)) / (local_14_FLOAT - local_15_FLOAT))); // type is FLOAT value type is FLOAT
                                                                                    break $M_503_528;
                                                                                case 528 :
                                                                                // NORMAL
                                                                                    local_19_FLOAT = (0.5 * (local_17_FLOAT + local_18_FLOAT)); // type is FLOAT value type is FLOAT
                                                                                    break $M_503_528;
                                                                            }
                                                                            $S_538 : {
                                                                            // NORMAL
                                                                                var var156 = thisRef.fcn; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@c7e80fe
                                                                                var var158 = thisRef.indexes.data[0]; // type is INT value type is INT
                                                                                var var160 = thisRef.indexes.data[1]; // type is INT value type is INT
                                                                                var var162 = var156.FLOATevaluateINTINTFLOAT(var156,var158,var160,local_19_FLOAT); // type is FLOAT value type is FLOAT
                                                                                local_20_FLOAT = var162; // type is FLOAT value type is FLOAT
                                                                                var var168 = ojcMathUtils.FLOATabsFLOAT((local_20_FLOAT - local_7_FLOAT)); // type is FLOAT value type is FLOAT
                                                                                var var169 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                                                                                if ((var168 >= var169)) {
                                                                                    __label__ = 582;
                                                                                    break $S_538;
                                                                                }
                                                                                __label__ = 575;
                                                                                }
                                                                            $M_575_582 : for(;;) switch (__label__) {
                                                                                case 575 :
                                                                                // NORMAL
                                                                                    local_12_FLOAT = local_19_FLOAT; // type is FLOAT value type is FLOAT
                                                                                    break $M_575_582;
                                                                                case 582 :
                                                                                // NORMAL
                                                                                    $S_582 : {
                                                                                    // NORMAL
                                                                                        var var173 = local_20_FLOAT; // type is FLOAT value type is FLOAT
                                                                                        var var174 = local_7_FLOAT; // type is FLOAT value type is FLOAT
                                                                                        if ((var173 <= var174)) {
                                                                                            __label__ = 601;
                                                                                            break $S_582;
                                                                                        }
                                                                                        __label__ = 590;
                                                                                        }
                                                                                    $M_590_601 : for(;;) switch (__label__) {
                                                                                        case 590 :
                                                                                        // NORMAL
                                                                                            local_17_FLOAT = local_19_FLOAT; // type is FLOAT value type is FLOAT
                                                                                            local_15_FLOAT = local_20_FLOAT; // type is FLOAT value type is FLOAT
                                                                                            break $M_590_601;
                                                                                        case 601 :
                                                                                        // NORMAL
                                                                                            local_18_FLOAT = local_19_FLOAT; // type is FLOAT value type is FLOAT
                                                                                            local_14_FLOAT = local_20_FLOAT; // type is FLOAT value type is FLOAT
                                                                                            break $M_590_601;
                                                                                    }
                                                                                    $S_609 : {
                                                                                    // NORMAL
                                                                                        local_16_INT = (local_16_INT + 1); // type is INT value type is INT
                                                                                        var var185 = (ojcTimeOfImpact.toiRootIters + 1); // type is INT value type is INT
                                                                                        ojcTimeOfImpact.toiRootIters = var185;
                                                                                        var var186 = local_16_INT; // type is INT value type is INT
                                                                                        if ((var186 != 50)) {
                                                                                            __label__ = 630;
                                                                                            break $S_609;
                                                                                        }
                                                                                        __label__ = 627;
                                                                                        }
                                                                                    for(;;) switch (__label__) {
                                                                                        case 627 :
                                                                                        // NORMAL
                                                                                            break $M_575_582;
                                                                                        case 630 :
                                                                                        // NORMAL
                                                                                            __label__ = 495;
                                                                                            continue $L_495;
                                                                                    }
                                                                            }
                                                                            $S_633 : {
                                                                            // NORMAL
                                                                                var var189 = ojcMathUtils.INTmaxINTINT(ojcTimeOfImpact.toiMaxRootIters,local_16_INT); // type is INT value type is INT
                                                                                ojcTimeOfImpact.toiMaxRootIters = var189;
                                                                                local_13_INT = (local_13_INT + 1); // type is INT value type is INT
                                                                                var var190 = local_13_INT; // type is INT value type is INT
                                                                                if ((var190 != 8)) {
                                                                                    __label__ = 657;
                                                                                    break $S_633;
                                                                                }
                                                                                __label__ = 654;
                                                                                }
                                                                            for(;;) switch (__label__) {
                                                                                case 654 :
                                                                                // NORMAL
                                                                                    break $M_364_383;
                                                                                case 657 :
                                                                                // NORMAL
                                                                                    __label__ = 338;
                                                                                    continue $L_338;
                                                                            }
                                                                        }
                                                                    case 465 :
                                                                    // NORMAL
                                                                        var var194 = ojcTimeOfImpact$TOIOutputState.TOUCHING; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@30361e0a
                                                                        output.state = var194;
                                                                        var var195 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                                                                        output.t = var195;
                                                                        local_11_INT = 1; // type is INT value type is INT
                                                                        break $M_364_383;
                                                                }
                                                        }
                                                }
                                            case 364 :
                                            // NORMAL
                                                var var104 = ojcTimeOfImpact$TOIOutputState.SEPARATED; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@539604e7
                                                output.state = var104;
                                                var var105 = local_5_FLOAT; // type is FLOAT value type is FLOAT
                                                output.t = var105;
                                                local_11_INT = 1; // type is INT value type is INT
                                                break $M_364_383;
                                        }
                                        $S_660 : {
                                        // NORMAL
                                            local_10_INT = (local_10_INT + 1); // type is INT value type is INT
                                            var var198 = (ojcTimeOfImpact.toiIters + 1); // type is INT value type is INT
                                            ojcTimeOfImpact.toiIters = var198;
                                            var var199 = local_11_INT; // type is INT value type is INT
                                            if ((var199 == 0)) {
                                                __label__ = 679;
                                                break $S_660;
                                            }
                                            __label__ = 676;
                                            }
                                        for(;;) switch (__label__) {
                                            case 676 :
                                            // NORMAL
                                                break $M_256_271;
                                            case 679 :
                                            // NORMAL
                                                $S_679 : {
                                                // NORMAL
                                                    var var203 = local_10_INT; // type is INT value type is INT
                                                    if ((var203 != 1000)) {
                                                        __label__ = 703;
                                                        break $S_679;
                                                    }
                                                    __label__ = 687;
                                                    }
                                                for(;;) switch (__label__) {
                                                    case 703 :
                                                    // NORMAL
                                                        __label__ = 172;
                                                        continue $L_172;
                                                    case 687 :
                                                    // NORMAL
                                                        var var204 = ojcTimeOfImpact$TOIOutputState.FAILED; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@649cffd5
                                                        output.state = var204;
                                                        var var205 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                                                        output.t = var205;
                                                        break $M_256_271;
                                                }
                                        }
                                    }
                            }
                        case 256 :
                        // NORMAL
                            var var202 = ojcTimeOfImpact$TOIOutputState.OVERLAPPED; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1c1dfac8
                            output.state = var202;
                            output.t = 0.0;
                            break $M_256_271;
                    }
                    var var208 = ojcMathUtils.INTmaxINTINT(ojcTimeOfImpact.toiMaxIters,local_10_INT); // type is INT value type is INT
                    ojcTimeOfImpact.toiMaxIters = var208;
                    return;
                }
        }
    },

    classInitCheck : function() {
        if (!ojcTimeOfImpact.__initialized) {
            ojcTimeOfImpact.__initialized = true;
            var thePrototype = ojcTimeOfImpact.Create.prototype;
            thePrototype.instanceOf = ojcTimeOfImpact.instanceOf;
            thePrototype.ClassgetClass = ojcTimeOfImpact.ClassgetClass;
            thePrototype.VOIDtimeOfImpactojcTimeOfImpact$TOIOutputojcTimeOfImpact$TOIInput = ojcTimeOfImpact.VOIDtimeOfImpactojcTimeOfImpact$TOIOutputojcTimeOfImpact$TOIInput;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            ojcTimeOfImpact.VOIDclinit();
        }
    },

};

var ojcSeparationFunction = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 82,
    __implementedTypes : [1,82],
    $assertionsDisabled : false, // declared in org.jbox2d.collision.SeparationFunction

    Create : function() {
        this.m_localPoint = null; // declared in org.jbox2d.collision.SeparationFunction
        this.m_axis = null; // declared in org.jbox2d.collision.SeparationFunction
        this.localPointA = null; // declared in org.jbox2d.collision.SeparationFunction
        this.localPointB = null; // declared in org.jbox2d.collision.SeparationFunction
        this.pointA = null; // declared in org.jbox2d.collision.SeparationFunction
        this.pointB = null; // declared in org.jbox2d.collision.SeparationFunction
        this.localPointA1 = null; // declared in org.jbox2d.collision.SeparationFunction
        this.localPointA2 = null; // declared in org.jbox2d.collision.SeparationFunction
        this.normal = null; // declared in org.jbox2d.collision.SeparationFunction
        this.localPointB1 = null; // declared in org.jbox2d.collision.SeparationFunction
        this.localPointB2 = null; // declared in org.jbox2d.collision.SeparationFunction
        this.temp = null; // declared in org.jbox2d.collision.SeparationFunction
        this.xfa = null; // declared in org.jbox2d.collision.SeparationFunction
        this.xfb = null; // declared in org.jbox2d.collision.SeparationFunction
        this.axisA = null; // declared in org.jbox2d.collision.SeparationFunction
        this.axisB = null; // declared in org.jbox2d.collision.SeparationFunction
        this.m_proxyA = null; // declared in org.jbox2d.collision.SeparationFunction
        this.m_proxyB = null; // declared in org.jbox2d.collision.SeparationFunction
        this.m_sweepA = null; // declared in org.jbox2d.collision.SeparationFunction
        this.m_sweepB = null; // declared in org.jbox2d.collision.SeparationFunction
        this.m_type = null; // declared in org.jbox2d.collision.SeparationFunction
    },

    instanceOf : function(aType) {
        return ojcSeparationFunction.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcSeparationFunction;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcSeparationFunction.BOOLEANdesiredAssertionStatus(ojcSeparationFunction); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_9_13 : for(;;) switch (__label__) {
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_9_13;
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_9_13;
        }
        ojcSeparationFunction.$assertionsDisabled = var1;
        return;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var0);
        thisRef.m_localPoint = var0;
        var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var1);
        thisRef.m_axis = var1;
        var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var2);
        thisRef.localPointA = var2;
        var var3 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var3);
        thisRef.localPointB = var3;
        var var4 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var4);
        thisRef.pointA = var4;
        var var5 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var5);
        thisRef.pointB = var5;
        var var6 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var6);
        thisRef.localPointA1 = var6;
        var var7 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var7);
        thisRef.localPointA2 = var7;
        var var8 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var8);
        thisRef.normal = var8;
        var var9 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var9);
        thisRef.localPointB1 = var9;
        var var10 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var10);
        thisRef.localPointB2 = var10;
        var var11 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var11);
        thisRef.temp = var11;
        var var12 = new ojcTransform.Create(); // type is REFERENCE value type is REFERENCE
        ojcTransform.VOIDinit(var12);
        thisRef.xfa = var12;
        var var13 = new ojcTransform.Create(); // type is REFERENCE value type is REFERENCE
        ojcTransform.VOIDinit(var13);
        thisRef.xfb = var13;
        var var14 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var14);
        thisRef.axisA = var14;
        var var15 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var15);
        thisRef.axisB = var15;
        return;
    },

    FLOATinitializeojcDistance$SimplexCacheojcDistance$DistanceProxyojcSweepojcDistance$DistanceProxyojcSweepFLOAT : function(thisRef,cache,proxyA,sweepA,proxyB,sweepB,t1) {
        var local_8_FLOAT = null; // type is FLOAT # of inits = 5
        var local_7_INT = null; // type is INT # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            thisRef.m_proxyA = proxyA;
            thisRef.m_proxyB = proxyB;
            local_7_INT = cache.count; // type is INT value type is INT
            var var3 = ojcSeparationFunction.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var3 != 0)) {
                __label__ = 43;
                break $S_0;
            }
            __label__ = 23;
            }
        $M_23_43 : for(;;) switch (__label__) {
            case 23 :
            // NORMAL
                $S_23 : {
                // NORMAL
                    var var4 = local_7_INT; // type is INT value type is INT
                    if ((0 >= var4)) {
                        __label__ = 35;
                        break $S_23;
                    }
                    __label__ = 29;
                    }
                $M_35_29 : for(;;) switch (__label__) {
                    case 35 :
                    // NORMAL
                        var var40 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                        jlAssertionError.VOIDinit(var40);
                        throw var40;
                    case 29 :
                    // NORMAL
                        var var5 = local_7_INT; // type is INT value type is INT
                        if ((var5 < 3)) {
                            __label__ = 43;
                            continue $M_23_43;
                        }
                        __label__ = 35;
                        continue $M_35_29;
                }
            case 43 :
            // NORMAL
                $S_43 : {
                // NORMAL
                    thisRef.m_sweepA = sweepA;
                    thisRef.m_sweepB = sweepB;
                    thisRef.m_sweepA.VOIDgetTransformojcTransformFLOAT(thisRef.m_sweepA,thisRef.xfa,t1);
                    thisRef.m_sweepB.VOIDgetTransformojcTransformFLOAT(thisRef.m_sweepB,thisRef.xfb,t1);
                    var var10 = local_7_INT; // type is INT value type is INT
                    if ((var10 != 1)) {
                        __label__ = 196;
                        break $S_43;
                    }
                    __label__ = 86;
                    }
                for(;;) switch (__label__) {
                    case 196 :
                    // NORMAL
                        $S_196 : {
                        // NORMAL
                            var var42 = cache.indexA.data[0]; // type is INT value type is INT
                            var var44 = cache.indexA.data[1]; // type is INT value type is INT
                            if ((var42 != var44)) {
                                __label__ = 444;
                                break $S_196;
                            }
                            __label__ = 211;
                            }
                        for(;;) switch (__label__) {
                            case 444 :
                            // NORMAL
                                $S_444 : {
                                // NORMAL
                                    var var45 = ojcType.FACE_A; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@57abbe59
                                    thisRef.m_type = var45;
                                    var var46 = thisRef.localPointA1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@434329da
                                    var var47 = thisRef.m_proxyA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3492a03b
                                    var var49 = cache.indexA.data[0]; // type is INT value type is INT
                                    var var50 = var47.ojcVec2getVertexINT(var47,var49); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@54433bc6
                                    var var51 = var46.ojcVec2setojcVec2(var46,var50); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5e901e61
                                    var var52 = thisRef.localPointA2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@447f190
                                    var var53 = thisRef.m_proxyA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@25f51a5b
                                    var var55 = cache.indexA.data[1]; // type is INT value type is INT
                                    var var56 = var53.ojcVec2getVertexINT(var53,var55); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@68258828
                                    var var57 = var52.ojcVec2setojcVec2(var52,var56); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3618f05b
                                    var var60 = thisRef.temp.ojcVec2setojcVec2(thisRef.temp,thisRef.localPointA2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@de84c79
                                    var var62 = var60.ojcVec2subLocalojcVec2(var60,thisRef.localPointA1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@42a85d
                                    ojcVec2.VOIDcrossToOutUnsafeojcVec2FLOATojcVec2(thisRef.temp,1.0,thisRef.m_axis);
                                    var var66 = thisRef.m_axis.FLOATnormalize(thisRef.m_axis); // type is FLOAT value type is FLOAT
                                    ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(thisRef.xfa.q,thisRef.m_axis,thisRef.normal);
                                    var var73 = thisRef.m_localPoint.ojcVec2setojcVec2(thisRef.m_localPoint,thisRef.localPointA1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@446214b5
                                    var var75 = var73.ojcVec2addLocalojcVec2(var73,thisRef.localPointA2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3509be4a
                                    var var76 = var75.ojcVec2mulLocalFLOAT(var75,0.5); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7acdb716
                                    ojcTransform.VOIDmulToOutUnsafeojcTransformojcVec2ojcVec2(thisRef.xfa,thisRef.m_localPoint,thisRef.pointA);
                                    var var80 = thisRef.localPointB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6f58f852
                                    var var81 = thisRef.m_proxyB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3b4b9eb0
                                    var var83 = cache.indexB.data[0]; // type is INT value type is INT
                                    var var84 = var81.ojcVec2getVertexINT(var81,var83); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@43c88c7d
                                    var var85 = var80.ojcVec2setojcVec2(var80,var84); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@54aaf615
                                    ojcTransform.VOIDmulToOutUnsafeojcTransformojcVec2ojcVec2(thisRef.xfb,thisRef.localPointB,thisRef.pointB);
                                    var var91 = thisRef.temp.ojcVec2setojcVec2(thisRef.temp,thisRef.pointB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7c180eba
                                    var var93 = var91.ojcVec2subLocalojcVec2(var91,thisRef.pointA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1bc1a197
                                    var var96 = ojcVec2.FLOATdotojcVec2ojcVec2(thisRef.temp,thisRef.normal); // type is FLOAT value type is FLOAT
                                    local_8_FLOAT = var96; // type is FLOAT value type is FLOAT
                                    var var98 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                                    if ((var98 >= 0.0)) {
                                        return local_8_FLOAT;
                                    }
                                    }
                                var var101 = thisRef.m_axis.ojcVec2negateLocal(thisRef.m_axis); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1c6d6df6
                                local_8_FLOAT = (-local_8_FLOAT); // type is FLOAT value type is FLOAT
                                return local_8_FLOAT;
                            case 211 :
                            // NORMAL
                                $S_211 : {
                                // NORMAL
                                    var var106 = ojcType.FACE_B; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1f742a30
                                    thisRef.m_type = var106;
                                    var var107 = thisRef.localPointB1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@23a59aba
                                    var var108 = thisRef.m_proxyB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@357e5a40
                                    var var110 = cache.indexB.data[0]; // type is INT value type is INT
                                    var var111 = var108.ojcVec2getVertexINT(var108,var110); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@420b93c4
                                    var var112 = var107.ojcVec2setojcVec2(var107,var111); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7c90041f
                                    var var113 = thisRef.localPointB2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@736f317d
                                    var var114 = thisRef.m_proxyB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3484d90a
                                    var var116 = cache.indexB.data[1]; // type is INT value type is INT
                                    var var117 = var114.ojcVec2getVertexINT(var114,var116); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2a8fe9ed
                                    var var118 = var113.ojcVec2setojcVec2(var113,var117); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@56c3a05f
                                    var var121 = thisRef.temp.ojcVec2setojcVec2(thisRef.temp,thisRef.localPointB2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5cad8723
                                    var var123 = var121.ojcVec2subLocalojcVec2(var121,thisRef.localPointB1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4e734935
                                    ojcVec2.VOIDcrossToOutUnsafeojcVec2FLOATojcVec2(thisRef.temp,1.0,thisRef.m_axis);
                                    var var127 = thisRef.m_axis.FLOATnormalize(thisRef.m_axis); // type is FLOAT value type is FLOAT
                                    ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(thisRef.xfb.q,thisRef.m_axis,thisRef.normal);
                                    var var134 = thisRef.m_localPoint.ojcVec2setojcVec2(thisRef.m_localPoint,thisRef.localPointB1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1be61197
                                    var var136 = var134.ojcVec2addLocalojcVec2(var134,thisRef.localPointB2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@50ec9bec
                                    var var137 = var136.ojcVec2mulLocalFLOAT(var136,0.5); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@60489a4d
                                    ojcTransform.VOIDmulToOutUnsafeojcTransformojcVec2ojcVec2(thisRef.xfb,thisRef.m_localPoint,thisRef.pointB);
                                    var var141 = thisRef.localPointA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@34264d90
                                    var var143 = cache.indexA.data[0]; // type is INT value type is INT
                                    var var144 = proxyA.ojcVec2getVertexINT(proxyA,var143); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1fe7882a
                                    var var145 = var141.ojcVec2setojcVec2(var141,var144); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2be053c1
                                    ojcTransform.VOIDmulToOutUnsafeojcTransformojcVec2ojcVec2(thisRef.xfa,thisRef.localPointA,thisRef.pointA);
                                    var var151 = thisRef.temp.ojcVec2setojcVec2(thisRef.temp,thisRef.pointA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@f5e2e02
                                    var var153 = var151.ojcVec2subLocalojcVec2(var151,thisRef.pointB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@912b8b4
                                    var var156 = ojcVec2.FLOATdotojcVec2ojcVec2(thisRef.temp,thisRef.normal); // type is FLOAT value type is FLOAT
                                    local_8_FLOAT = var156; // type is FLOAT value type is FLOAT
                                    var var158 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                                    if ((var158 >= 0.0)) {
                                        return local_8_FLOAT;
                                    }
                                    }
                                var var161 = thisRef.m_axis.ojcVec2negateLocal(thisRef.m_axis); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2a17d764
                                local_8_FLOAT = (-local_8_FLOAT); // type is FLOAT value type is FLOAT
                                return local_8_FLOAT;
                        }
                    case 86 :
                    // NORMAL
                        var var11 = ojcType.POINTS; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3c0f7bc
                        thisRef.m_type = var11;
                        var var12 = thisRef.localPointA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7d90f7f8
                        var var13 = thisRef.m_proxyA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@615b27e6
                        var var15 = cache.indexA.data[0]; // type is INT value type is INT
                        var var16 = var13.ojcVec2getVertexINT(var13,var15); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7563605e
                        var var17 = var12.ojcVec2setojcVec2(var12,var16); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@719a0459
                        var var18 = thisRef.localPointB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@bcf02a5
                        var var19 = thisRef.m_proxyB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3393602d
                        var var21 = cache.indexB.data[0]; // type is INT value type is INT
                        var var22 = var19.ojcVec2getVertexINT(var19,var21); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5d9c8791
                        var var23 = var18.ojcVec2setojcVec2(var18,var22); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7c05e8b7
                        ojcTransform.VOIDmulToOutUnsafeojcTransformojcVec2ojcVec2(thisRef.xfa,thisRef.localPointA,thisRef.pointA);
                        ojcTransform.VOIDmulToOutUnsafeojcTransformojcVec2ojcVec2(thisRef.xfb,thisRef.localPointB,thisRef.pointB);
                        var var32 = thisRef.m_axis.ojcVec2setojcVec2(thisRef.m_axis,thisRef.pointB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@f2c07b8
                        var var34 = var32.ojcVec2subLocalojcVec2(var32,thisRef.pointA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@27969c78
                        var var36 = thisRef.m_axis.FLOATnormalize(thisRef.m_axis); // type is FLOAT value type is FLOAT
                        local_8_FLOAT = var36; // type is FLOAT value type is FLOAT
                        return local_8_FLOAT;
                }
        }
    },

    FLOATfindMinSeparationA1INTFLOAT : function(thisRef,indexes,t) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            thisRef.m_sweepA.VOIDgetTransformojcTransformFLOAT(thisRef.m_sweepA,thisRef.xfa,t);
            thisRef.m_sweepB.VOIDgetTransformojcTransformFLOAT(thisRef.m_sweepB,thisRef.xfb,t);
            var var4 = ojcSeparationFunction$1.$SwitchMap$org$jbox2d$collision$Type; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3fb9fb04
            var var6 = thisRef.m_type.INTordinal(thisRef.m_type); // type is INT value type is INT
            var var7 = var4.data[var6]; // type is INT value type is INT
            if (var7 < 1 || var7 > 3) {
             __label__ = 490;
            break $S_0;
            }
            switch(var7 - 1) {
             case 0:
                 __label__ = 60;
            break $S_0;
             case 1:
                 __label__ = 222;
            break $S_0;
             case 2:
                 __label__ = 356;
            break $S_0;
            }
            throw 'Illegal jump target!';
            }
        for(;;) switch (__label__) {
            case 490 :
            // NORMAL
                $S_490 : {
                // NORMAL
                    var var41 = ojcSeparationFunction.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                    if ((var41 != 0)) {
                        __label__ = 504;
                        break $S_490;
                    }
                    __label__ = 496;
                    }
                for(;;) switch (__label__) {
                    case 504 :
                    // NORMAL
                        indexes.data[0] = -1;
                        indexes.data[1] = -1;
                        return 0.0;
                    case 496 :
                    // NORMAL
                        var var42 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                        jlAssertionError.VOIDinit(var42);
                        throw var42;
                }
            case 222 :
            // NORMAL
                ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(thisRef.xfa.q,thisRef.m_axis,thisRef.normal);
                ojcTransform.VOIDmulToOutUnsafeojcTransformojcVec2ojcVec2(thisRef.xfa,thisRef.m_localPoint,thisRef.pointA);
                var var91 = thisRef.xfb.q; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7b162d43
                var var93 = thisRef.normal.ojcVec2negateLocal(thisRef.normal); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6b58f3cc
                ojcRot.VOIDmulTransUnsafeojcRotojcVec2ojcVec2(var91,var93,thisRef.axisB);
                var var96 = thisRef.normal.ojcVec2negateLocal(thisRef.normal); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@49f77406
                indexes.data[0] = -1;
                var var99 = thisRef.m_proxyB.INTgetSupportojcVec2(thisRef.m_proxyB,thisRef.axisB); // type is INT value type is INT
                indexes.data[1] = var99;
                var var100 = thisRef.localPointB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3966c7e7
                var var101 = thisRef.m_proxyB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@735099bd
                var var102 = indexes.data[1]; // type is INT value type is INT
                var var103 = var101.ojcVec2getVertexINT(var101,var102); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5fbad288
                var var104 = var100.ojcVec2setojcVec2(var100,var103); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2d1fda3d
                ojcTransform.VOIDmulToOutUnsafeojcTransformojcVec2ojcVec2(thisRef.xfb,thisRef.localPointB,thisRef.pointB);
                var var110 = thisRef.pointB.ojcVec2subLocalojcVec2(thisRef.pointB,thisRef.pointA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@22c97986
                var var112 = ojcVec2.FLOATdotojcVec2ojcVec2(var110,thisRef.normal); // type is FLOAT value type is FLOAT
                var local_3_FLOAT = var112; // type is FLOAT value type is FLOAT
                return local_3_FLOAT;
            case 356 :
            // NORMAL
                ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(thisRef.xfb.q,thisRef.m_axis,thisRef.normal);
                ojcTransform.VOIDmulToOutUnsafeojcTransformojcVec2ojcVec2(thisRef.xfb,thisRef.m_localPoint,thisRef.pointB);
                var var16 = thisRef.xfa.q; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@55238113
                var var18 = thisRef.normal.ojcVec2negateLocal(thisRef.normal); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5c0427ad
                ojcRot.VOIDmulTransUnsafeojcRotojcVec2ojcVec2(var16,var18,thisRef.axisA);
                var var21 = thisRef.normal.ojcVec2negateLocal(thisRef.normal); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@f19c022
                indexes.data[1] = -1;
                var var24 = thisRef.m_proxyA.INTgetSupportojcVec2(thisRef.m_proxyA,thisRef.axisA); // type is INT value type is INT
                indexes.data[0] = var24;
                var var25 = thisRef.localPointA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@66f58d0e
                var var26 = thisRef.m_proxyA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2f17a3da
                var var27 = indexes.data[0]; // type is INT value type is INT
                var var28 = var26.ojcVec2getVertexINT(var26,var27); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@52d3d0da
                var var29 = var25.ojcVec2setojcVec2(var25,var28); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@130a0272
                ojcTransform.VOIDmulToOutUnsafeojcTransformojcVec2ojcVec2(thisRef.xfa,thisRef.localPointA,thisRef.pointA);
                var var35 = thisRef.pointA.ojcVec2subLocalojcVec2(thisRef.pointA,thisRef.pointB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@59dd60e0
                var var37 = ojcVec2.FLOATdotojcVec2ojcVec2(var35,thisRef.normal); // type is FLOAT value type is FLOAT
                var local_3_FLOAT = var37; // type is FLOAT value type is FLOAT
                return local_3_FLOAT;
            case 60 :
            // NORMAL
                ojcRot.VOIDmulTransUnsafeojcRotojcVec2ojcVec2(thisRef.xfa.q,thisRef.m_axis,thisRef.axisA);
                var var48 = thisRef.xfb.q; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4b461172
                var var50 = thisRef.m_axis.ojcVec2negateLocal(thisRef.m_axis); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@75f5dc0
                ojcRot.VOIDmulTransUnsafeojcRotojcVec2ojcVec2(var48,var50,thisRef.axisB);
                var var53 = thisRef.m_axis.ojcVec2negateLocal(thisRef.m_axis); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4405c6cb
                var var56 = thisRef.m_proxyA.INTgetSupportojcVec2(thisRef.m_proxyA,thisRef.axisA); // type is INT value type is INT
                indexes.data[0] = var56;
                var var59 = thisRef.m_proxyB.INTgetSupportojcVec2(thisRef.m_proxyB,thisRef.axisB); // type is INT value type is INT
                indexes.data[1] = var59;
                var var60 = thisRef.localPointA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@766d64cb
                var var61 = thisRef.m_proxyA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@d5b26f5
                var var62 = indexes.data[0]; // type is INT value type is INT
                var var63 = var61.ojcVec2getVertexINT(var61,var62); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7097dbc3
                var var64 = var60.ojcVec2setojcVec2(var60,var63); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1a4e6884
                var var65 = thisRef.localPointB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7181c3a
                var var66 = thisRef.m_proxyB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5320fea2
                var var67 = indexes.data[1]; // type is INT value type is INT
                var var68 = var66.ojcVec2getVertexINT(var66,var67); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1d277ec6
                var var69 = var65.ojcVec2setojcVec2(var65,var68); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@74443fae
                ojcTransform.VOIDmulToOutUnsafeojcTransformojcVec2ojcVec2(thisRef.xfa,thisRef.localPointA,thisRef.pointA);
                ojcTransform.VOIDmulToOutUnsafeojcTransformojcVec2ojcVec2(thisRef.xfb,thisRef.localPointB,thisRef.pointB);
                var var78 = thisRef.pointB.ojcVec2subLocalojcVec2(thisRef.pointB,thisRef.pointA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@337a04d0
                var var80 = ojcVec2.FLOATdotojcVec2ojcVec2(var78,thisRef.m_axis); // type is FLOAT value type is FLOAT
                var local_3_FLOAT = var80; // type is FLOAT value type is FLOAT
                return local_3_FLOAT;
        }
    },

    FLOATevaluateINTINTFLOAT : function(thisRef,indexA,indexB,t) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            thisRef.m_sweepA.VOIDgetTransformojcTransformFLOAT(thisRef.m_sweepA,thisRef.xfa,t);
            thisRef.m_sweepB.VOIDgetTransformojcTransformFLOAT(thisRef.m_sweepB,thisRef.xfb,t);
            var var4 = ojcSeparationFunction$1.$SwitchMap$org$jbox2d$collision$Type; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@15b2b473
            var var6 = thisRef.m_type.INTordinal(thisRef.m_type); // type is INT value type is INT
            var var7 = var4.data[var6]; // type is INT value type is INT
            if (var7 < 1 || var7 > 3) {
             __label__ = 424;
            break $S_0;
            }
            switch(var7 - 1) {
             case 0:
                 __label__ = 60;
            break $S_0;
             case 1:
                 __label__ = 192;
            break $S_0;
             case 2:
                 __label__ = 308;
            break $S_0;
            }
            throw 'Illegal jump target!';
            }
        for(;;) switch (__label__) {
            case 424 :
            // NORMAL
                $S_424 : {
                // NORMAL
                    var var65 = ojcSeparationFunction.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                    if ((var65 != 0)) {
                        return 0.0;
                    }
                    }
                var var66 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var66);
                throw var66;
            case 60 :
            // NORMAL
                ojcRot.VOIDmulTransUnsafeojcRotojcVec2ojcVec2(thisRef.xfa.q,thisRef.m_axis,thisRef.axisA);
                var var72 = thisRef.xfb.q; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4f04f733
                var var74 = thisRef.m_axis.ojcVec2negateLocal(thisRef.m_axis); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@713d79ab
                ojcRot.VOIDmulTransUnsafeojcRotojcVec2ojcVec2(var72,var74,thisRef.axisB);
                var var77 = thisRef.m_axis.ojcVec2negateLocal(thisRef.m_axis); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@78aad30d
                var var78 = thisRef.localPointA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@783bf147
                var var80 = thisRef.m_proxyA.ojcVec2getVertexINT(thisRef.m_proxyA,indexA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@10ee2c1c
                var var81 = var78.ojcVec2setojcVec2(var78,var80); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@a04ff8b
                var var82 = thisRef.localPointB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2498777d
                var var84 = thisRef.m_proxyB.ojcVec2getVertexINT(thisRef.m_proxyB,indexB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@38e1b60
                var var85 = var82.ojcVec2setojcVec2(var82,var84); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@626159c1
                ojcTransform.VOIDmulToOutUnsafeojcTransformojcVec2ojcVec2(thisRef.xfa,thisRef.localPointA,thisRef.pointA);
                ojcTransform.VOIDmulToOutUnsafeojcTransformojcVec2ojcVec2(thisRef.xfb,thisRef.localPointB,thisRef.pointB);
                var var94 = thisRef.pointB.ojcVec2subLocalojcVec2(thisRef.pointB,thisRef.pointA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4fb40aa1
                var var96 = ojcVec2.FLOATdotojcVec2ojcVec2(var94,thisRef.m_axis); // type is FLOAT value type is FLOAT
                var local_4_FLOAT = var96; // type is FLOAT value type is FLOAT
                return local_4_FLOAT;
            case 192 :
            // NORMAL
                ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(thisRef.xfa.q,thisRef.m_axis,thisRef.normal);
                ojcTransform.VOIDmulToOutUnsafeojcTransformojcVec2ojcVec2(thisRef.xfa,thisRef.m_localPoint,thisRef.pointA);
                var var45 = thisRef.xfb.q; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@28f0bfb5
                var var47 = thisRef.normal.ojcVec2negateLocal(thisRef.normal); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5bd6f4d0
                ojcRot.VOIDmulTransUnsafeojcRotojcVec2ojcVec2(var45,var47,thisRef.axisB);
                var var50 = thisRef.normal.ojcVec2negateLocal(thisRef.normal); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3311013a
                var var51 = thisRef.localPointB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5c1fe4fb
                var var53 = thisRef.m_proxyB.ojcVec2getVertexINT(thisRef.m_proxyB,indexB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@71bfe5da
                var var54 = var51.ojcVec2setojcVec2(var51,var53); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1d23ef49
                ojcTransform.VOIDmulToOutUnsafeojcTransformojcVec2ojcVec2(thisRef.xfb,thisRef.localPointB,thisRef.pointB);
                var var60 = thisRef.pointB.ojcVec2subLocalojcVec2(thisRef.pointB,thisRef.pointA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@26803506
                var var62 = ojcVec2.FLOATdotojcVec2ojcVec2(var60,thisRef.normal); // type is FLOAT value type is FLOAT
                var local_4_FLOAT = var62; // type is FLOAT value type is FLOAT
                return local_4_FLOAT;
            case 308 :
            // NORMAL
                ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(thisRef.xfb.q,thisRef.m_axis,thisRef.normal);
                ojcTransform.VOIDmulToOutUnsafeojcTransformojcVec2ojcVec2(thisRef.xfb,thisRef.m_localPoint,thisRef.pointB);
                var var16 = thisRef.xfa.q; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@59b3511
                var var18 = thisRef.normal.ojcVec2negateLocal(thisRef.normal); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@b84914d
                ojcRot.VOIDmulTransUnsafeojcRotojcVec2ojcVec2(var16,var18,thisRef.axisA);
                var var21 = thisRef.normal.ojcVec2negateLocal(thisRef.normal); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@95f7ed3
                var var22 = thisRef.localPointA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2e5052fb
                var var24 = thisRef.m_proxyA.ojcVec2getVertexINT(thisRef.m_proxyA,indexA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@72bfd99d
                var var25 = var22.ojcVec2setojcVec2(var22,var24); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5d1e307e
                ojcTransform.VOIDmulToOutUnsafeojcTransformojcVec2ojcVec2(thisRef.xfa,thisRef.localPointA,thisRef.pointA);
                var var31 = thisRef.pointA.ojcVec2subLocalojcVec2(thisRef.pointA,thisRef.pointB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2f4574e8
                var var33 = ojcVec2.FLOATdotojcVec2ojcVec2(var31,thisRef.normal); // type is FLOAT value type is FLOAT
                var local_4_FLOAT = var33; // type is FLOAT value type is FLOAT
                return local_4_FLOAT;
        }
    },

    classInitCheck : function() {
        if (!ojcSeparationFunction.__initialized) {
            ojcSeparationFunction.__initialized = true;
            var thePrototype = ojcSeparationFunction.Create.prototype;
            thePrototype.instanceOf = ojcSeparationFunction.instanceOf;
            thePrototype.ClassgetClass = ojcSeparationFunction.ClassgetClass;
            thePrototype.FLOATevaluateINTINTFLOAT = ojcSeparationFunction.FLOATevaluateINTINTFLOAT;
            thePrototype.FLOATfindMinSeparationA1INTFLOAT = ojcSeparationFunction.FLOATfindMinSeparationA1INTFLOAT;
            thePrototype.FLOATinitializeojcDistance$SimplexCacheojcDistance$DistanceProxyojcSweepojcDistance$DistanceProxyojcSweepFLOAT = ojcSeparationFunction.FLOATinitializeojcDistance$SimplexCacheojcDistance$DistanceProxyojcSweepojcDistance$DistanceProxyojcSweepFLOAT;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            ojcSeparationFunction.VOIDclinit();
        }
    },

};

var ojcSweep = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 83,
    __implementedTypes : [1,2,83],
    $assertionsDisabled : false, // declared in org.jbox2d.common.Sweep

    Create : function() {
        this.localCenter = null; // declared in org.jbox2d.common.Sweep
        this.c0 = null; // declared in org.jbox2d.common.Sweep
        this.c = null; // declared in org.jbox2d.common.Sweep
        this.a0 = 0; // declared in org.jbox2d.common.Sweep
        this.a = 0; // declared in org.jbox2d.common.Sweep
        this.alpha0 = 0; // declared in org.jbox2d.common.Sweep
    },

    instanceOf : function(aType) {
        return ojcSweep.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcSweep;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcSweep.BOOLEANdesiredAssertionStatus(ojcSweep); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_9_13 : for(;;) switch (__label__) {
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_9_13;
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_9_13;
        }
        ojcSweep.$assertionsDisabled = var1;
        return;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var0);
        thisRef.localCenter = var0;
        var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var1);
        thisRef.c0 = var1;
        var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var2);
        thisRef.c = var2;
        return;
    },

    jlStringtoString : function(thisRef) {
        var __label__ = null;
        var var0 = new jlStringBuilder.Create(); // type is REFERENCE value type is REFERENCE
        jlStringBuilder.VOIDinit(var0);
        var var1 = var0.jlStringBuilderappendjlString(var0,bytecoder.stringpool[26]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5dc1cc90
        var var3 = var1.jlStringBuilderappendjlObject(var1,thisRef.localCenter); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@32d50441
        var var4 = var3.jlStringBuilderappendjlString(var3,bytecoder.stringpool[22]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@54039bab
        var var5 = var4.jlStringtoString(var4); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@25182ac4
        var local_1_REFERENCE = var5; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@76eec7bb
        var var7 = new jlStringBuilder.Create(); // type is REFERENCE value type is REFERENCE
        jlStringBuilder.VOIDinit(var7);
        var var9 = var7.jlStringBuilderappendjlString(var7,local_1_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6c83322b
        var var10 = var9.jlStringBuilderappendjlString(var9,bytecoder.stringpool[27]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@241532d3
        var var12 = var10.jlStringBuilderappendjlObject(var10,thisRef.c0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@40bf629f
        var var13 = var12.jlStringBuilderappendjlString(var12,bytecoder.stringpool[28]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@406ca62c
        var var15 = var13.jlStringBuilderappendjlObject(var13,thisRef.c); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@358bd660
        var var16 = var15.jlStringBuilderappendjlString(var15,bytecoder.stringpool[22]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3805e9a8
        var var17 = var16.jlStringtoString(var16); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@315cfad
        var local_1_REFERENCE = var17; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@266d5425
        var var18 = new jlStringBuilder.Create(); // type is REFERENCE value type is REFERENCE
        jlStringBuilder.VOIDinit(var18);
        var var20 = var18.jlStringBuilderappendjlString(var18,local_1_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4dbebe5e
        var var21 = var20.jlStringBuilderappendjlString(var20,bytecoder.stringpool[29]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5a6146e8
        var var23 = var21.jlStringBuilderappendFLOAT(var21,thisRef.a0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@77a482ae
        var var24 = var23.jlStringBuilderappendjlString(var23,bytecoder.stringpool[30]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3b242c03
        var var26 = var24.jlStringBuilderappendFLOAT(var24,thisRef.a); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3503977
        var var27 = var26.jlStringBuilderappendjlString(var26,bytecoder.stringpool[22]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@535679f3
        var var28 = var27.jlStringtoString(var27); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3420c5
        var local_1_REFERENCE = var28; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1aea50f4
        return local_1_REFERENCE;
    },

    VOIDadvanceFLOAT : function(thisRef,alpha) {
        var __label__ = null;
        var var0 = thisRef.c0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5b250ef7
        var var8 = (((1.0 - alpha) * thisRef.c0.x) + (alpha * thisRef.c.x)); // type is FLOAT value type is FLOAT
        var0.x = var8;
        var var9 = thisRef.c0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2f9bb70c
        var var17 = (((1.0 - alpha) * thisRef.c0.y) + (alpha * thisRef.c.y)); // type is FLOAT value type is FLOAT
        var9.y = var17;
        var var23 = (((1.0 - alpha) * thisRef.a0) + (alpha * thisRef.a)); // type is FLOAT value type is FLOAT
        thisRef.a0 = var23;
        return;
    },

    ojcSweepsetojcSweep : function(thisRef,argCloneFrom) {
        var __label__ = null;
        var var2 = thisRef.localCenter.ojcVec2setojcVec2(thisRef.localCenter,argCloneFrom.localCenter); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@444c2b1f
        var var5 = thisRef.c0.ojcVec2setojcVec2(thisRef.c0,argCloneFrom.c0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@21d96dda
        var var8 = thisRef.c.ojcVec2setojcVec2(thisRef.c,argCloneFrom.c); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@64129ceb
        var var9 = argCloneFrom.a0; // type is FLOAT value type is FLOAT
        thisRef.a0 = var9;
        var var10 = argCloneFrom.a; // type is FLOAT value type is FLOAT
        thisRef.a = var10;
        return thisRef;
    },

    VOIDnormalize : function(thisRef) {
        var __label__ = null;
        var var2 = ojcMathUtils.INTfloorFLOAT((thisRef.a0 / 6.2831855)); // type is INT value type is INT
        var local_1_FLOAT = (6.2831855 * var2); // type is FLOAT value type is FLOAT
        var var9 = (thisRef.a0 - local_1_FLOAT); // type is FLOAT value type is FLOAT
        thisRef.a0 = var9;
        var var12 = (thisRef.a - local_1_FLOAT); // type is FLOAT value type is FLOAT
        thisRef.a = var12;
        return;
    },

    VOIDgetTransformojcTransformFLOAT : function(thisRef,xf,beta) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcSweep.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 18;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_6_18 : for(;;) switch (__label__) {
            case 18 :
            // NORMAL
                var var2 = xf.p; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6a5065b0
                var var10 = (((1.0 - beta) * thisRef.c0.x) + (beta * thisRef.c.x)); // type is FLOAT value type is FLOAT
                var2.x = var10;
                var var11 = xf.p; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3e715ed
                var var19 = (((1.0 - beta) * thisRef.c0.y) + (beta * thisRef.c.y)); // type is FLOAT value type is FLOAT
                var11.y = var19;
                var var27 = xf.q.ojcRotsetFLOAT(xf.q,(((1.0 - beta) * thisRef.a0) + (beta * thisRef.a))); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2a8e6288
                var local_3_REFERENCE = xf.q; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5826fb55
                var var30 = xf.p; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@31327804
                var var43 = (var30.x - ((local_3_REFERENCE.c * thisRef.localCenter.x) - (local_3_REFERENCE.s * thisRef.localCenter.y))); // type is FLOAT value type is FLOAT
                var30.x = var43;
                var var44 = xf.p; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@ac15bb2
                var var57 = (var44.y - ((local_3_REFERENCE.s * thisRef.localCenter.x) + (local_3_REFERENCE.c * thisRef.localCenter.y))); // type is FLOAT value type is FLOAT
                var44.y = var57;
                return;
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    if (xf != null ) {
                        __label__ = 18;
                        continue $M_6_18;
                    }
                    }
                var var1 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var1);
                throw var1;
        }
    },

    classInitCheck : function() {
        if (!ojcSweep.__initialized) {
            ojcSweep.__initialized = true;
            var thePrototype = ojcSweep.Create.prototype;
            thePrototype.instanceOf = ojcSweep.instanceOf;
            thePrototype.ClassgetClass = ojcSweep.ClassgetClass;
            thePrototype.VOIDgetTransformojcTransformFLOAT = ojcSweep.VOIDgetTransformojcTransformFLOAT;
            thePrototype.VOIDnormalize = ojcSweep.VOIDnormalize;
            thePrototype.ojcSweepsetojcSweep = ojcSweep.ojcSweepsetojcSweep;
            thePrototype.VOIDadvanceFLOAT = ojcSweep.VOIDadvanceFLOAT;
            thePrototype.jlStringtoString = ojcSweep.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            jiSerializable.classInitCheck();
            ojcSweep.VOIDclinit();
        }
    },

};

var ojcbDynamicTree = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 84,
    __implementedTypes : [85,1,84],
    $assertionsDisabled : false, // declared in org.jbox2d.collision.broadphase.DynamicTree

    Create : function() {
        this.drawVecs = null; // declared in org.jbox2d.collision.broadphase.DynamicTree
        this.nodeStack = null; // declared in org.jbox2d.collision.broadphase.DynamicTree
        this.r = null; // declared in org.jbox2d.collision.broadphase.DynamicTree
        this.aabb = null; // declared in org.jbox2d.collision.broadphase.DynamicTree
        this.subInput = null; // declared in org.jbox2d.collision.broadphase.DynamicTree
        this.combinedAABB = null; // declared in org.jbox2d.collision.broadphase.DynamicTree
        this.color = null; // declared in org.jbox2d.collision.broadphase.DynamicTree
        this.textVec = null; // declared in org.jbox2d.collision.broadphase.DynamicTree
        this.m_root = null; // declared in org.jbox2d.collision.broadphase.DynamicTree
        this.m_nodeCount = 0; // declared in org.jbox2d.collision.broadphase.DynamicTree
        this.m_nodeCapacity = 0; // declared in org.jbox2d.collision.broadphase.DynamicTree
        this.m_nodes = null; // declared in org.jbox2d.collision.broadphase.DynamicTree
        this.m_freeList = 0; // declared in org.jbox2d.collision.broadphase.DynamicTree
        this.m_insertionCount = 0; // declared in org.jbox2d.collision.broadphase.DynamicTree
    },

    instanceOf : function(aType) {
        return ojcbDynamicTree.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcbDynamicTree;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcbDynamicTree.BOOLEANdesiredAssertionStatus(ojcbDynamicTree); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_9_13 : for(;;) switch (__label__) {
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_9_13;
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_9_13;
        }
        ojcbDynamicTree.$assertionsDisabled = var1;
        return;
    },

    VOIDinit : function(thisRef) {
        var var20 = null; // type is REFERENCE # of inits = 1
        var local_1_INT = null; // type is INT # of inits = 6
        var var28 = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = bytecoder.newArray(4,null); // type is REFERENCE value type is REFERENCE
            thisRef.drawVecs = var0;
            var var1 = new ojcbDynamicTree$TreeNodeStack.Create(); // type is REFERENCE value type is REFERENCE
            ojcbDynamicTree$TreeNodeStack.VOIDinitojcbDynamicTreeINT(var1,thisRef,10);
            thisRef.nodeStack = var1;
            var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var2);
            thisRef.r = var2;
            var var3 = new ojcAABB.Create(); // type is REFERENCE value type is REFERENCE
            ojcAABB.VOIDinit(var3);
            thisRef.aabb = var3;
            var var4 = new ojcRayCastInput.Create(); // type is REFERENCE value type is REFERENCE
            ojcRayCastInput.VOIDinit(var4);
            thisRef.subInput = var4;
            var var5 = new ojcAABB.Create(); // type is REFERENCE value type is REFERENCE
            ojcAABB.VOIDinit(var5);
            thisRef.combinedAABB = var5;
            var var6 = new ojcColor3f.Create(); // type is REFERENCE value type is REFERENCE
            ojcColor3f.VOIDinit(var6);
            thisRef.color = var6;
            var var7 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var7);
            thisRef.textVec = var7;
            thisRef.m_root = null;
            thisRef.m_nodeCount = 0;
            thisRef.m_nodeCapacity = 16;
            var var8 = bytecoder.newArray(16,null); // type is REFERENCE value type is REFERENCE
            thisRef.m_nodes = var8;
            local_1_INT = (thisRef.m_nodeCapacity - 1); // type is INT value type is INT
            __label__ = 124;
            }
        $L_124 : for (;;) {
            $S_124 : {
            // NORMAL
                var var13 = local_1_INT; // type is INT value type is INT
                if ((var13 < 0)) {
                    __label__ = 189;
                    break $S_124;
                }
                __label__ = 128;
                }
            for(;;) switch (__label__) {
                case 189 :
                // NORMAL
                    $S_189 : {
                    // NORMAL
                        thisRef.m_freeList = 0;
                        thisRef.m_insertionCount = 0;
                        local_1_INT = 0; // type is INT value type is INT
                        __label__ = 201;
                        }
                    $L_201 : for (;;) {
                        $S_201 : {
                        // NORMAL
                            var var33 = local_1_INT; // type is INT value type is INT
                            var var35 = thisRef.drawVecs.data.length; // type is INT value type is INT
                            if ((var33 >= var35)) {
                                return;
                            }
                            }
                        var var36 = thisRef.drawVecs; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@23960135
                        var var37 = local_1_INT; // type is INT value type is INT
                        var var38 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
                        ojcVec2.VOIDinit(var38);
                        var36.data[var37] = var38;
                        local_1_INT = (local_1_INT + 1); // type is INT value type is INT
                        __label__ = 201;
                        continue $L_201;
                    }
                case 128 :
                // NORMAL
                    $S_128 : {
                    // NORMAL
                        var var14 = thisRef.m_nodes; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@bd3e91f
                        var var15 = local_1_INT; // type is INT value type is INT
                        var var16 = new ojcbDynamicTreeNode.Create(); // type is REFERENCE value type is REFERENCE
                        ojcbDynamicTreeNode.VOIDinitINT(var16,local_1_INT);
                        var14.data[var15] = var16;
                        var20 = thisRef.m_nodes.data[local_1_INT]; // type is REFERENCE value type is REFERENCE
                        var var21 = local_1_INT; // type is INT value type is INT
                        var var23 = (thisRef.m_nodeCapacity - 1); // type is INT value type is INT
                        if ((var21 != var23)) {
                            __label__ = 162;
                            break $S_128;
                        }
                        __label__ = 158;
                        }
                    $M_158_162 : for(;;) switch (__label__) {
                        case 158 :
                        // NORMAL
                            var28 = null; // type is REFERENCE value type is REFERENCE
                            break $M_158_162;
                        case 162 :
                        // NORMAL
                            var var27 = thisRef.m_nodes.data[(local_1_INT + 1)]; // type is REFERENCE value type is REFERENCE
                            var28 = var27; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3e29c758
                            break $M_158_162;
                    }
                    var20.parent = var28;
                    var var31 = thisRef.m_nodes.data[local_1_INT]; // type is REFERENCE value type is REFERENCE
                    var31.height = -1;
                    local_1_INT = (local_1_INT + -1); // type is INT value type is INT
                    __label__ = 124;
                    continue $L_124;
            }
        }
    },

    INTcreateProxyojcAABBjlObject : function(thisRef,aabb,userData) {
        var __label__ = null;
        var var0 = thisRef.ojcbDynamicTreeNodeallocateNode(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@238aff08
        var local_3_REFERENCE = var0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@399e2a48
        var local_4_INT = local_3_REFERENCE.id; // type is INT value type is INT
        var local_5_REFERENCE = local_3_REFERENCE.aabb; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6f165896
        var var10 = local_5_REFERENCE.lowerBound; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1c1643ee
        var var13 = (aabb.lowerBound.x - 0.1); // type is FLOAT value type is FLOAT
        var10.x = var13;
        var var15 = local_5_REFERENCE.lowerBound; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@68908ddb
        var var18 = (aabb.lowerBound.y - 0.1); // type is FLOAT value type is FLOAT
        var15.y = var18;
        var var20 = local_5_REFERENCE.upperBound; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@209436eb
        var var23 = (aabb.upperBound.x + 0.1); // type is FLOAT value type is FLOAT
        var20.x = var23;
        var var25 = local_5_REFERENCE.upperBound; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7d9b0887
        var var28 = (aabb.upperBound.y + 0.1); // type is FLOAT value type is FLOAT
        var25.y = var28;
        var var29 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@399e2a48
        var29.userData = userData;
        thisRef.VOIDinsertLeafINT(thisRef,local_4_INT);
        return local_4_INT;
    },

    ojcbDynamicTreeNodeallocateNode : function(thisRef) {
        var var52 = null; // type is INT # of inits = 2
        var local_2_INT = null; // type is INT # of inits = 3
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var var35 = null; // type is REFERENCE # of inits = 2
        var var27 = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.m_freeList; // type is INT value type is INT
            if ((var0 != -1)) {
                __label__ = 155;
                break $S_0;
            }
            __label__ = 8;
            }
        $M_8_155 : for(;;) switch (__label__) {
            case 8 :
            // NORMAL
                $S_8 : {
                // NORMAL
                    var var1 = ojcbDynamicTree.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                    if ((var1 != 0)) {
                        __label__ = 33;
                        break $S_8;
                    }
                    __label__ = 14;
                    }
                $M_33_14 : for(;;) switch (__label__) {
                    case 14 :
                    // NORMAL
                        $S_14 : {
                        // NORMAL
                            var var2 = thisRef.m_nodeCount; // type is INT value type is INT
                            var var3 = thisRef.m_nodeCapacity; // type is INT value type is INT
                            if ((var2 == var3)) {
                                __label__ = 33;
                                continue $M_33_14;
                            }
                            }
                        var var4 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                        jlAssertionError.VOIDinit(var4);
                        throw var4;
                    case 33 :
                    // NORMAL
                        $S_33 : {
                        // NORMAL
                            var local_1_REFERENCE = thisRef.m_nodes; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@2b8a5107
                            var var8 = (thisRef.m_nodeCapacity * 2); // type is INT value type is INT
                            thisRef.m_nodeCapacity = var8;
                            var var10 = bytecoder.newArray(thisRef.m_nodeCapacity,null); // type is REFERENCE value type is REFERENCE
                            thisRef.m_nodes = var10;
                            jlSystem.VOIDarraycopyjlObjectINTjlObjectINTINT(local_1_REFERENCE,0,thisRef.m_nodes,0,local_1_REFERENCE.data.length);
                            local_2_INT = (thisRef.m_nodeCapacity - 1); // type is INT value type is INT
                            __label__ = 78;
                            }
                        $L_78 : for (;;) {
                            $S_78 : {
                            // NORMAL
                                var var19 = local_2_INT; // type is INT value type is INT
                                var var20 = thisRef.m_nodeCount; // type is INT value type is INT
                                if ((var19 < var20)) {
                                    __label__ = 147;
                                    break $S_78;
                                }
                                __label__ = 86;
                                }
                            for(;;) switch (__label__) {
                                case 147 :
                                // NORMAL
                                    var var39 = thisRef.m_nodeCount; // type is INT value type is INT
                                    thisRef.m_freeList = var39;
                                    __label__ = 155;
                                    continue $M_8_155;
                                case 86 :
                                // NORMAL
                                    $S_86 : {
                                    // NORMAL
                                        var var21 = thisRef.m_nodes; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1e6e16e2
                                        var var22 = local_2_INT; // type is INT value type is INT
                                        var var23 = new ojcbDynamicTreeNode.Create(); // type is REFERENCE value type is REFERENCE
                                        ojcbDynamicTreeNode.VOIDinitINT(var23,local_2_INT);
                                        var21.data[var22] = var23;
                                        var27 = thisRef.m_nodes.data[local_2_INT]; // type is REFERENCE value type is REFERENCE
                                        var var28 = local_2_INT; // type is INT value type is INT
                                        var var30 = (thisRef.m_nodeCapacity - 1); // type is INT value type is INT
                                        if ((var28 != var30)) {
                                            __label__ = 120;
                                            break $S_86;
                                        }
                                        __label__ = 116;
                                        }
                                    $M_120_116 : for(;;) switch (__label__) {
                                        case 120 :
                                        // NORMAL
                                            var var34 = thisRef.m_nodes.data[(local_2_INT + 1)]; // type is REFERENCE value type is REFERENCE
                                            var35 = var34; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1cd09f0b
                                            break $M_120_116;
                                        case 116 :
                                        // NORMAL
                                            var35 = null; // type is REFERENCE value type is REFERENCE
                                            break $M_120_116;
                                    }
                                    var27.parent = var35;
                                    var var38 = thisRef.m_nodes.data[local_2_INT]; // type is REFERENCE value type is REFERENCE
                                    var38.height = -1;
                                    local_2_INT = (local_2_INT + -1); // type is INT value type is INT
                                    __label__ = 78;
                                    continue $L_78;
                            }
                        }
                }
            case 155 :
            // NORMAL
                $S_155 : {
                // NORMAL
                    var local_1_INT = thisRef.m_freeList; // type is INT value type is INT
                    var var45 = thisRef.m_nodes.data[local_1_INT]; // type is REFERENCE value type is REFERENCE
                    local_2_REFERENCE = var45; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@412eb376
                    var var48 = local_2_REFERENCE.parent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@10e574b4
                    if (var48 == null ) {
                        __label__ = 185;
                        break $S_155;
                    }
                    __label__ = 175;
                    }
                $M_185_175 : for(;;) switch (__label__) {
                    case 175 :
                    // NORMAL
                        var52 = local_2_REFERENCE.parent.id; // type is INT value type is INT
                        break $M_185_175;
                    case 185 :
                    // NORMAL
                        var52 = -1; // type is INT value type is INT
                        break $M_185_175;
                }
                thisRef.m_freeList = var52;
                var var53 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@412eb376
                var53.parent = null;
                var var54 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@412eb376
                var54.child1 = null;
                var var55 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@412eb376
                var55.child2 = null;
                var var56 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@412eb376
                var56.height = 0;
                var var57 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@412eb376
                var57.userData = null;
                var var59 = (thisRef.m_nodeCount + 1); // type is INT value type is INT
                thisRef.m_nodeCount = var59;
                return local_2_REFERENCE;
        }
    },

    VOIDinsertLeafINT : function(thisRef,leaf_index) {
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_7_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 8
        var local_8_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_9_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_10_FLOAT = null; // type is FLOAT # of inits = 1
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_12_FLOAT = null; // type is FLOAT # of inits = 2
        var local_13_FLOAT = null; // type is FLOAT # of inits = 3
        var local_11_FLOAT = null; // type is FLOAT # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var1 = (thisRef.m_insertionCount + 1); // type is INT value type is INT
            thisRef.m_insertionCount = var1;
            var var3 = thisRef.m_nodes.data[leaf_index]; // type is REFERENCE value type is REFERENCE
            local_2_REFERENCE = var3; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@52edd762
            var var5 = thisRef.m_root; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@43cacece
            if (var5 != null ) {
                __label__ = 38;
                break $S_0;
            }
            __label__ = 24;
            }
        for(;;) switch (__label__) {
            case 38 :
            // NORMAL
                $S_38 : {
                // NORMAL
                    local_3_REFERENCE = local_2_REFERENCE.aabb; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1a3e585c
                    local_4_REFERENCE = thisRef.m_root; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3035334a
                    __label__ = 49;
                    }
                $L_49 : for (;;) {
                    $S_49 : {
                    // NORMAL
                        var var12 = local_4_REFERENCE.child1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@78b44d15
                        if (var12 == null ) {
                            __label__ = 319;
                            break $S_49;
                        }
                        __label__ = 57;
                        }
                    $M_57_319 : for(;;) switch (__label__) {
                        case 57 :
                        // NORMAL
                            $S_57 : {
                            // NORMAL
                                local_5_REFERENCE = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@21b9a480
                                local_6_REFERENCE = local_5_REFERENCE.child1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6d9d5073
                                local_7_REFERENCE = local_5_REFERENCE.child2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5091924
                                var var23 = local_5_REFERENCE.aabb.FLOATgetPerimeter(local_5_REFERENCE.aabb); // type is FLOAT value type is FLOAT
                                var local_8_FLOAT = var23; // type is FLOAT value type is FLOAT
                                thisRef.combinedAABB.VOIDcombineojcAABBojcAABB(thisRef.combinedAABB,local_5_REFERENCE.aabb,local_3_REFERENCE);
                                var var31 = thisRef.combinedAABB.FLOATgetPerimeter(thisRef.combinedAABB); // type is FLOAT value type is FLOAT
                                var local_9_FLOAT = var31; // type is FLOAT value type is FLOAT
                                local_10_FLOAT = (2.0 * local_9_FLOAT); // type is FLOAT value type is FLOAT
                                local_11_FLOAT = (2.0 * (local_9_FLOAT - local_8_FLOAT)); // type is FLOAT value type is FLOAT
                                var var45 = local_6_REFERENCE.BOOLEANisLeaf(local_6_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                if ((var45 == 0)) {
                                    __label__ = 158;
                                    break $S_57;
                                }
                                __label__ = 130;
                                }
                            $M_130_158 : for(;;) switch (__label__) {
                                case 158 :
                                // NORMAL
                                    thisRef.combinedAABB.VOIDcombineojcAABBojcAABB(thisRef.combinedAABB,local_3_REFERENCE,local_6_REFERENCE.aabb);
                                    var var62 = local_6_REFERENCE.aabb.FLOATgetPerimeter(local_6_REFERENCE.aabb); // type is FLOAT value type is FLOAT
                                    local_13_FLOAT = var62; // type is FLOAT value type is FLOAT
                                    var var66 = thisRef.combinedAABB.FLOATgetPerimeter(thisRef.combinedAABB); // type is FLOAT value type is FLOAT
                                    var local_14_FLOAT = var66; // type is FLOAT value type is FLOAT
                                    local_12_FLOAT = ((local_14_FLOAT - local_13_FLOAT) + local_11_FLOAT); // type is FLOAT value type is FLOAT
                                    break $M_130_158;
                                case 130 :
                                // NORMAL
                                    thisRef.combinedAABB.VOIDcombineojcAABBojcAABB(thisRef.combinedAABB,local_3_REFERENCE,local_6_REFERENCE.aabb);
                                    var var51 = thisRef.combinedAABB.FLOATgetPerimeter(thisRef.combinedAABB); // type is FLOAT value type is FLOAT
                                    local_12_FLOAT = (var51 + local_11_FLOAT); // type is FLOAT value type is FLOAT
                                    break $M_130_158;
                            }
                            $S_200 : {
                            // NORMAL
                                var var76 = local_7_REFERENCE.BOOLEANisLeaf(local_7_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                if ((var76 == 0)) {
                                    __label__ = 236;
                                    break $S_200;
                                }
                                __label__ = 208;
                                }
                            $M_208_236 : for(;;) switch (__label__) {
                                case 208 :
                                // NORMAL
                                    thisRef.combinedAABB.VOIDcombineojcAABBojcAABB(thisRef.combinedAABB,local_3_REFERENCE,local_7_REFERENCE.aabb);
                                    var var82 = thisRef.combinedAABB.FLOATgetPerimeter(thisRef.combinedAABB); // type is FLOAT value type is FLOAT
                                    local_13_FLOAT = (var82 + local_11_FLOAT); // type is FLOAT value type is FLOAT
                                    break $M_208_236;
                                case 236 :
                                // NORMAL
                                    thisRef.combinedAABB.VOIDcombineojcAABBojcAABB(thisRef.combinedAABB,local_3_REFERENCE,local_7_REFERENCE.aabb);
                                    var var92 = local_7_REFERENCE.aabb.FLOATgetPerimeter(local_7_REFERENCE.aabb); // type is FLOAT value type is FLOAT
                                    var local_14_FLOAT = var92; // type is FLOAT value type is FLOAT
                                    var var95 = thisRef.combinedAABB.FLOATgetPerimeter(thisRef.combinedAABB); // type is FLOAT value type is FLOAT
                                    var local_15_FLOAT = var95; // type is FLOAT value type is FLOAT
                                    local_13_FLOAT = ((local_15_FLOAT - local_14_FLOAT) + local_11_FLOAT); // type is FLOAT value type is FLOAT
                                    break $M_208_236;
                            }
                            $S_278 : {
                            // NORMAL
                                var var104 = local_10_FLOAT; // type is FLOAT value type is FLOAT
                                var var105 = local_12_FLOAT; // type is FLOAT value type is FLOAT
                                if ((var104 >= var105)) {
                                    __label__ = 297;
                                    break $S_278;
                                }
                                __label__ = 286;
                                }
                            $M_286_297 : for(;;) switch (__label__) {
                                case 297 :
                                // NORMAL
                                    $S_297 : {
                                    // NORMAL
                                        var var173 = local_12_FLOAT; // type is FLOAT value type is FLOAT
                                        var var174 = local_13_FLOAT; // type is FLOAT value type is FLOAT
                                        if ((var173 >= var174)) {
                                            __label__ = 312;
                                            break $S_297;
                                        }
                                        __label__ = 305;
                                        }
                                    $M_312_305 : for(;;) switch (__label__) {
                                        case 305 :
                                        // NORMAL
                                            local_4_REFERENCE = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@46d8bc62
                                            break $M_312_305;
                                        case 312 :
                                        // NORMAL
                                            local_4_REFERENCE = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2aa99013
                                            break $M_312_305;
                                    }
                                    __label__ = 49;
                                    continue $L_49;
                                case 286 :
                                // NORMAL
                                    $S_286 : {
                                    // NORMAL
                                        var var107 = local_10_FLOAT; // type is FLOAT value type is FLOAT
                                        var var108 = local_13_FLOAT; // type is FLOAT value type is FLOAT
                                        if ((var107 >= var108)) {
                                            __label__ = 297;
                                            continue $M_286_297;
                                        }
                                        }
                                    __label__ = 319;
                                    continue $M_57_319;
                            }
                        case 319 :
                        // NORMAL
                            $S_319 : {
                            // NORMAL
                                local_5_REFERENCE = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@21b9a480
                                var var114 = thisRef.m_nodes.data[local_5_REFERENCE.id]; // type is REFERENCE value type is REFERENCE
                                local_6_REFERENCE = var114.parent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1c3fd5ac
                                var var116 = thisRef.ojcbDynamicTreeNodeallocateNode(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@46b9ffdb
                                local_7_REFERENCE = var116; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@48217fd5
                                var var117 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2aa99013
                                var var118 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@46d8bc62
                                var117.parent = var118;
                                var var119 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2aa99013
                                var119.userData = null;
                                local_7_REFERENCE.aabb.VOIDcombineojcAABBojcAABB(local_7_REFERENCE.aabb,local_3_REFERENCE,local_5_REFERENCE.aabb);
                                var var125 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2aa99013
                                var var128 = (local_5_REFERENCE.height + 1); // type is INT value type is INT
                                var125.height = var128;
                                var var129 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@46d8bc62
                                if (var129 == null ) {
                                    __label__ = 444;
                                    break $S_319;
                                }
                                __label__ = 388;
                                }
                            $M_388_444 : for(;;) switch (__label__) {
                                case 388 :
                                // NORMAL
                                    $S_388 : {
                                    // NORMAL
                                        var var131 = local_6_REFERENCE.child1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@412031b7
                                        var var132 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@21b9a480
                                        if ((var131 != var132)) {
                                            __label__ = 408;
                                            break $S_388;
                                        }
                                        __label__ = 398;
                                        }
                                    $M_408_398 : for(;;) switch (__label__) {
                                        case 408 :
                                        // NORMAL
                                            var var133 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@46d8bc62
                                            var var134 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2aa99013
                                            var133.child2 = var134;
                                            break $M_408_398;
                                        case 398 :
                                        // NORMAL
                                            var var135 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@46d8bc62
                                            var var136 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2aa99013
                                            var135.child1 = var136;
                                            break $M_408_398;
                                    }
                                    var var137 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2aa99013
                                    var var138 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@21b9a480
                                    var137.child1 = var138;
                                    var var139 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2aa99013
                                    var var140 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@52edd762
                                    var139.child2 = var140;
                                    var var141 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@21b9a480
                                    var var142 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2aa99013
                                    var141.parent = var142;
                                    var var143 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@52edd762
                                    var var144 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2aa99013
                                    var143.parent = var144;
                                    break $M_388_444;
                                case 444 :
                                // NORMAL
                                    var var145 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2aa99013
                                    var var146 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@21b9a480
                                    var145.child1 = var146;
                                    var var147 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2aa99013
                                    var var148 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@52edd762
                                    var147.child2 = var148;
                                    var var149 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@21b9a480
                                    var var150 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2aa99013
                                    var149.parent = var150;
                                    var var151 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@52edd762
                                    var var152 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2aa99013
                                    var151.parent = var152;
                                    var var153 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2aa99013
                                    thisRef.m_root = var153;
                                    break $M_388_444;
                            }
                            $S_476 : {
                            // NORMAL
                                local_4_REFERENCE = local_2_REFERENCE.parent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@cadc08e
                                __label__ = 482;
                                }
                            $L_482 : for (;;) {
                                $S_482 : {
                                // NORMAL
                                    var var156 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@21b9a480
                                    if (var156 == null ) {
                                        return;
                                    }
                                    }
                                $S_487 : {
                                // NORMAL
                                    var var158 = thisRef.ojcbDynamicTreeNodebalanceojcbDynamicTreeNode(thisRef,local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6e5de602
                                    local_4_REFERENCE = var158; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@56aeb5c
                                    local_8_REFERENCE = local_4_REFERENCE.child1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@67138b35
                                    local_9_REFERENCE = local_4_REFERENCE.child2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@27fea3e9
                                    var var165 = ojcbDynamicTree.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                                    if ((var165 != 0)) {
                                        __label__ = 528;
                                        break $S_487;
                                    }
                                    __label__ = 515;
                                    }
                                $M_515_528 : for(;;) switch (__label__) {
                                    case 515 :
                                    // NORMAL
                                        $S_515 : {
                                        // NORMAL
                                            var var166 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4b99f11f
                                            if (var166 != null ) {
                                                __label__ = 528;
                                                continue $M_515_528;
                                            }
                                            }
                                        var var167 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                        jlAssertionError.VOIDinit(var167);
                                        throw var167;
                                    case 528 :
                                    // NORMAL
                                        $S_528 : {
                                        // NORMAL
                                            var var170 = ojcbDynamicTree.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                                            if ((var170 != 0)) {
                                                __label__ = 547;
                                                break $S_528;
                                            }
                                            __label__ = 534;
                                            }
                                        $M_534_547 : for(;;) switch (__label__) {
                                            case 534 :
                                            // NORMAL
                                                $S_534 : {
                                                // NORMAL
                                                    var var171 = local_9_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@54f45dfe
                                                    if (var171 != null ) {
                                                        __label__ = 547;
                                                        continue $M_534_547;
                                                    }
                                                    }
                                                var var172 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                                jlAssertionError.VOIDinit(var172);
                                                throw var172;
                                            case 547 :
                                            // NORMAL
                                                var var178 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@21b9a480
                                                var var183 = ojcMathUtils.INTmaxINTINT(local_8_REFERENCE.height,local_9_REFERENCE.height); // type is INT value type is INT
                                                var var184 = (1 + var183); // type is INT value type is INT
                                                var178.height = var184;
                                                local_4_REFERENCE.aabb.VOIDcombineojcAABBojcAABB(local_4_REFERENCE.aabb,local_8_REFERENCE.aabb,local_9_REFERENCE.aabb);
                                                local_4_REFERENCE = local_4_REFERENCE.parent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4535be28
                                                __label__ = 482;
                                                continue $L_482;
                                        }
                                }
                            }
                    }
                }
            case 24 :
            // NORMAL
                var var168 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@52edd762
                thisRef.m_root = var168;
                var var169 = thisRef.m_root; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@44d92d7a
                var169.parent = null;
                return;
        }
    },

    ojcbDynamicTreeNodebalanceojcbDynamicTreeNode : function(thisRef,iA) {
        var local_11_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_10_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_8_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_9_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_7_INT = null; // type is INT # of inits = 1
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcbDynamicTree.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 18;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_18_6 : for(;;) switch (__label__) {
            case 18 :
            // NORMAL
                $S_18 : {
                // NORMAL
                    local_2_REFERENCE = iA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@250469b2
                    var var3 = local_2_REFERENCE.BOOLEANisLeaf(local_2_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                    if ((var3 != 0)) {
                        return iA;
                    }
                    }
                $S_27 : {
                // NORMAL
                    var var5 = local_2_REFERENCE.height; // type is INT value type is INT
                    if ((var5 >= 2)) {
                        break $S_27;
                    }
                    return iA;
                    }
                $S_37 : {
                // NORMAL
                    local_3_REFERENCE = local_2_REFERENCE.child1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1ab42e5a
                    local_4_REFERENCE = local_2_REFERENCE.child2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3f827457
                    var var12 = ojcbDynamicTree.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                    if ((var12 != 0)) {
                        __label__ = 81;
                        break $S_37;
                    }
                    __label__ = 54;
                    }
                $M_54_81 : for(;;) switch (__label__) {
                    case 81 :
                    // NORMAL
                        $S_81 : {
                        // NORMAL
                            var var18 = ojcbDynamicTree.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                            if ((var18 != 0)) {
                                __label__ = 116;
                                break $S_81;
                            }
                            __label__ = 87;
                            }
                        $M_87_116 : for(;;) switch (__label__) {
                            case 87 :
                            // NORMAL
                                $S_87 : {
                                // NORMAL
                                    var var20 = local_4_REFERENCE.id; // type is INT value type is INT
                                    if ((0 > var20)) {
                                        __label__ = 108;
                                        break $S_87;
                                    }
                                    __label__ = 96;
                                    }
                                $M_96_108 : for(;;) switch (__label__) {
                                    case 108 :
                                    // NORMAL
                                        var var263 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                        jlAssertionError.VOIDinit(var263);
                                        throw var263;
                                    case 96 :
                                    // NORMAL
                                        var var22 = local_4_REFERENCE.id; // type is INT value type is INT
                                        var var23 = thisRef.m_nodeCapacity; // type is INT value type is INT
                                        if ((var22 < var23)) {
                                            __label__ = 116;
                                            continue $M_87_116;
                                        }
                                        __label__ = 108;
                                        continue $M_96_108;
                                }
                            case 116 :
                            // NORMAL
                                $S_116 : {
                                // NORMAL
                                    local_5_REFERENCE = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@639321ac
                                    local_6_REFERENCE = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@75abc84b
                                    local_7_INT = (local_6_REFERENCE.height - local_5_REFERENCE.height); // type is INT value type is INT
                                    var var35 = local_7_INT; // type is INT value type is INT
                                    if ((var35 <= 1)) {
                                        __label__ = 572;
                                        break $S_116;
                                    }
                                    __label__ = 142;
                                    }
                                for(;;) switch (__label__) {
                                    case 572 :
                                    // NORMAL
                                        $S_572 : {
                                        // NORMAL
                                            var var51 = local_7_INT; // type is INT value type is INT
                                            if ((var51 >= -1)) {
                                                return iA;
                                            }
                                            }
                                        $S_578 : {
                                        // NORMAL
                                            local_8_REFERENCE = local_5_REFERENCE.child1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1dc1b738
                                            local_9_REFERENCE = local_5_REFERENCE.child2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1446d26d
                                            local_10_REFERENCE = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3776fb4d
                                            local_11_REFERENCE = local_9_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4bdd8432
                                            var var58 = ojcbDynamicTree.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                                            if ((var58 != 0)) {
                                                __label__ = 635;
                                                break $S_578;
                                            }
                                            __label__ = 606;
                                            }
                                        $M_635_606 : for(;;) switch (__label__) {
                                            case 606 :
                                            // NORMAL
                                                $S_606 : {
                                                // NORMAL
                                                    var var60 = local_8_REFERENCE.id; // type is INT value type is INT
                                                    if ((0 > var60)) {
                                                        __label__ = 627;
                                                        break $S_606;
                                                    }
                                                    __label__ = 615;
                                                    }
                                                $M_615_627 : for(;;) switch (__label__) {
                                                    case 615 :
                                                    // NORMAL
                                                        var var62 = local_8_REFERENCE.id; // type is INT value type is INT
                                                        var var63 = thisRef.m_nodeCapacity; // type is INT value type is INT
                                                        if ((var62 < var63)) {
                                                            __label__ = 635;
                                                            continue $M_635_606;
                                                        }
                                                        __label__ = 627;
                                                        continue $M_615_627;
                                                    case 627 :
                                                    // NORMAL
                                                        var var268 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                                        jlAssertionError.VOIDinit(var268);
                                                        throw var268;
                                                }
                                            case 635 :
                                            // NORMAL
                                                $S_635 : {
                                                // NORMAL
                                                    var var64 = ojcbDynamicTree.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                                                    if ((var64 != 0)) {
                                                        __label__ = 670;
                                                        break $S_635;
                                                    }
                                                    __label__ = 641;
                                                    }
                                                $M_670_641 : for(;;) switch (__label__) {
                                                    case 670 :
                                                    // NORMAL
                                                        $S_670 : {
                                                        // NORMAL
                                                            var var70 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@639321ac
                                                            var70.child1 = iA;
                                                            var var71 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@639321ac
                                                            var var73 = local_2_REFERENCE.parent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2f3be841
                                                            var71.parent = var73;
                                                            var var74 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@250469b2
                                                            var var75 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@639321ac
                                                            var74.parent = var75;
                                                            var var77 = local_5_REFERENCE.parent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@337113d
                                                            if (var77 == null ) {
                                                                __label__ = 760;
                                                                break $S_670;
                                                            }
                                                            __label__ = 698;
                                                            }
                                                        $M_760_698 : for(;;) switch (__label__) {
                                                            case 698 :
                                                            // NORMAL
                                                                $S_698 : {
                                                                // NORMAL
                                                                    var var81 = local_5_REFERENCE.parent.child1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@135f0e14
                                                                    if ((var81 != iA)) {
                                                                        __label__ = 722;
                                                                        break $S_698;
                                                                    }
                                                                    __label__ = 710;
                                                                    }
                                                                for(;;) switch (__label__) {
                                                                    case 722 :
                                                                    // NORMAL
                                                                        $S_722 : {
                                                                        // NORMAL
                                                                            var var85 = ojcbDynamicTree.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                                                                            if ((var85 != 0)) {
                                                                                __label__ = 748;
                                                                                break $S_722;
                                                                            }
                                                                            __label__ = 728;
                                                                            }
                                                                        $M_728_748 : for(;;) switch (__label__) {
                                                                            case 728 :
                                                                            // NORMAL
                                                                                $S_728 : {
                                                                                // NORMAL
                                                                                    var var88 = local_5_REFERENCE.parent.child2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@31a873a8
                                                                                    if ((var88 == iA)) {
                                                                                        __label__ = 748;
                                                                                        continue $M_728_748;
                                                                                    }
                                                                                    }
                                                                                var var159 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                                                                jlAssertionError.VOIDinit(var159);
                                                                                throw var159;
                                                                            case 748 :
                                                                            // NORMAL
                                                                                var var90 = local_5_REFERENCE.parent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@41a1fc3c
                                                                                var var91 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@639321ac
                                                                                var90.child2 = var91;
                                                                                break $M_760_698;
                                                                        }
                                                                    case 710 :
                                                                    // NORMAL
                                                                        var var83 = local_5_REFERENCE.parent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7a24a3cc
                                                                        var var84 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@639321ac
                                                                        var83.child1 = var84;
                                                                        break $M_760_698;
                                                                }
                                                            case 760 :
                                                            // NORMAL
                                                                var var78 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@639321ac
                                                                thisRef.m_root = var78;
                                                                break $M_760_698;
                                                        }
                                                        $S_765 : {
                                                        // NORMAL
                                                            var var93 = local_10_REFERENCE.height; // type is INT value type is INT
                                                            var var95 = local_11_REFERENCE.height; // type is INT value type is INT
                                                            if ((var93 <= var95)) {
                                                                __label__ = 872;
                                                                break $S_765;
                                                            }
                                                            __label__ = 778;
                                                            }
                                                        for(;;) switch (__label__) {
                                                            case 778 :
                                                            // NORMAL
                                                                var var127 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@639321ac
                                                                var var128 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3776fb4d
                                                                var127.child2 = var128;
                                                                var var129 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@250469b2
                                                                var var130 = local_9_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4bdd8432
                                                                var129.child1 = var130;
                                                                var var131 = local_11_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4bdd8432
                                                                var131.parent = iA;
                                                                local_2_REFERENCE.aabb.VOIDcombineojcAABBojcAABB(local_2_REFERENCE.aabb,local_6_REFERENCE.aabb,local_11_REFERENCE.aabb);
                                                                local_5_REFERENCE.aabb.VOIDcombineojcAABBojcAABB(local_5_REFERENCE.aabb,local_2_REFERENCE.aabb,local_10_REFERENCE.aabb);
                                                                var var144 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@250469b2
                                                                var var149 = ojcMathUtils.INTmaxINTINT(local_6_REFERENCE.height,local_11_REFERENCE.height); // type is INT value type is INT
                                                                var var150 = (1 + var149); // type is INT value type is INT
                                                                var144.height = var150;
                                                                var var151 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@639321ac
                                                                var var156 = ojcMathUtils.INTmaxINTINT(local_2_REFERENCE.height,local_10_REFERENCE.height); // type is INT value type is INT
                                                                var var157 = (1 + var156); // type is INT value type is INT
                                                                var151.height = var157;
                                                                return local_3_REFERENCE;
                                                            case 872 :
                                                            // NORMAL
                                                                var var96 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@639321ac
                                                                var var97 = local_9_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4bdd8432
                                                                var96.child2 = var97;
                                                                var var98 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@250469b2
                                                                var var99 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3776fb4d
                                                                var98.child1 = var99;
                                                                var var100 = local_10_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3776fb4d
                                                                var100.parent = iA;
                                                                local_2_REFERENCE.aabb.VOIDcombineojcAABBojcAABB(local_2_REFERENCE.aabb,local_6_REFERENCE.aabb,local_10_REFERENCE.aabb);
                                                                local_5_REFERENCE.aabb.VOIDcombineojcAABBojcAABB(local_5_REFERENCE.aabb,local_2_REFERENCE.aabb,local_11_REFERENCE.aabb);
                                                                var var113 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@250469b2
                                                                var var118 = ojcMathUtils.INTmaxINTINT(local_6_REFERENCE.height,local_10_REFERENCE.height); // type is INT value type is INT
                                                                var var119 = (1 + var118); // type is INT value type is INT
                                                                var113.height = var119;
                                                                var var120 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@639321ac
                                                                var var125 = ojcMathUtils.INTmaxINTINT(local_2_REFERENCE.height,local_11_REFERENCE.height); // type is INT value type is INT
                                                                var var126 = (1 + var125); // type is INT value type is INT
                                                                var120.height = var126;
                                                                return local_3_REFERENCE;
                                                        }
                                                    case 641 :
                                                    // NORMAL
                                                        $S_641 : {
                                                        // NORMAL
                                                            var var66 = local_9_REFERENCE.id; // type is INT value type is INT
                                                            if ((0 > var66)) {
                                                                __label__ = 662;
                                                                break $S_641;
                                                            }
                                                            __label__ = 650;
                                                            }
                                                        $M_662_650 : for(;;) switch (__label__) {
                                                            case 662 :
                                                            // NORMAL
                                                                var var265 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                                                jlAssertionError.VOIDinit(var265);
                                                                throw var265;
                                                            case 650 :
                                                            // NORMAL
                                                                var var68 = local_9_REFERENCE.id; // type is INT value type is INT
                                                                var var69 = thisRef.m_nodeCapacity; // type is INT value type is INT
                                                                if ((var68 < var69)) {
                                                                    __label__ = 670;
                                                                    continue $M_670_641;
                                                                }
                                                                __label__ = 662;
                                                                continue $M_662_650;
                                                        }
                                                }
                                        }
                                    case 142 :
                                    // NORMAL
                                        $S_142 : {
                                        // NORMAL
                                            local_8_REFERENCE = local_6_REFERENCE.child1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@11603d32
                                            local_9_REFERENCE = local_6_REFERENCE.child2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@63a72985
                                            local_10_REFERENCE = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3776fb4d
                                            local_11_REFERENCE = local_9_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4bdd8432
                                            var var46 = ojcbDynamicTree.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                                            if ((var46 != 0)) {
                                                __label__ = 183;
                                                break $S_142;
                                            }
                                            __label__ = 170;
                                            }
                                        $M_170_183 : for(;;) switch (__label__) {
                                            case 183 :
                                            // NORMAL
                                                $S_183 : {
                                                // NORMAL
                                                    var var48 = ojcbDynamicTree.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                                                    if ((var48 != 0)) {
                                                        __label__ = 202;
                                                        break $S_183;
                                                    }
                                                    __label__ = 189;
                                                    }
                                                $M_189_202 : for(;;) switch (__label__) {
                                                    case 189 :
                                                    // NORMAL
                                                        $S_189 : {
                                                        // NORMAL
                                                            var var49 = local_11_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4bdd8432
                                                            if (var49 != null ) {
                                                                __label__ = 202;
                                                                continue $M_189_202;
                                                            }
                                                            }
                                                        var var50 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                                        jlAssertionError.VOIDinit(var50);
                                                        throw var50;
                                                    case 202 :
                                                    // NORMAL
                                                        $S_202 : {
                                                        // NORMAL
                                                            var var161 = ojcbDynamicTree.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                                                            if ((var161 != 0)) {
                                                                __label__ = 237;
                                                                break $S_202;
                                                            }
                                                            __label__ = 208;
                                                            }
                                                        $M_237_208 : for(;;) switch (__label__) {
                                                            case 208 :
                                                            // NORMAL
                                                                $S_208 : {
                                                                // NORMAL
                                                                    var var163 = local_8_REFERENCE.id; // type is INT value type is INT
                                                                    if ((0 > var163)) {
                                                                        __label__ = 229;
                                                                        break $S_208;
                                                                    }
                                                                    __label__ = 217;
                                                                    }
                                                                $M_217_229 : for(;;) switch (__label__) {
                                                                    case 217 :
                                                                    // NORMAL
                                                                        var var165 = local_8_REFERENCE.id; // type is INT value type is INT
                                                                        var var166 = thisRef.m_nodeCapacity; // type is INT value type is INT
                                                                        if ((var165 < var166)) {
                                                                            __label__ = 237;
                                                                            continue $M_237_208;
                                                                        }
                                                                        __label__ = 229;
                                                                        continue $M_217_229;
                                                                    case 229 :
                                                                    // NORMAL
                                                                        var var269 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                                                        jlAssertionError.VOIDinit(var269);
                                                                        throw var269;
                                                                }
                                                            case 237 :
                                                            // NORMAL
                                                                $S_237 : {
                                                                // NORMAL
                                                                    var var167 = ojcbDynamicTree.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                                                                    if ((var167 != 0)) {
                                                                        __label__ = 272;
                                                                        break $S_237;
                                                                    }
                                                                    __label__ = 243;
                                                                    }
                                                                $M_243_272 : for(;;) switch (__label__) {
                                                                    case 272 :
                                                                    // NORMAL
                                                                        $S_272 : {
                                                                        // NORMAL
                                                                            var var174 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@75abc84b
                                                                            var174.child1 = iA;
                                                                            var var175 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@75abc84b
                                                                            var var177 = local_2_REFERENCE.parent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2d2979d1
                                                                            var175.parent = var177;
                                                                            var var178 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@250469b2
                                                                            var var179 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@75abc84b
                                                                            var178.parent = var179;
                                                                            var var181 = local_6_REFERENCE.parent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@72cc957b
                                                                            if (var181 == null ) {
                                                                                __label__ = 365;
                                                                                break $S_272;
                                                                            }
                                                                            __label__ = 301;
                                                                            }
                                                                        $M_301_365 : for(;;) switch (__label__) {
                                                                            case 365 :
                                                                            // NORMAL
                                                                                var var195 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@75abc84b
                                                                                thisRef.m_root = var195;
                                                                                break $M_301_365;
                                                                            case 301 :
                                                                            // NORMAL
                                                                                $S_301 : {
                                                                                // NORMAL
                                                                                    var var184 = local_6_REFERENCE.parent.child1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@62d5bfbd
                                                                                    if ((var184 != iA)) {
                                                                                        __label__ = 326;
                                                                                        break $S_301;
                                                                                    }
                                                                                    __label__ = 313;
                                                                                    }
                                                                                for(;;) switch (__label__) {
                                                                                    case 326 :
                                                                                    // NORMAL
                                                                                        $S_326 : {
                                                                                        // NORMAL
                                                                                            var var185 = ojcbDynamicTree.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                                                                                            if ((var185 != 0)) {
                                                                                                __label__ = 352;
                                                                                                break $S_326;
                                                                                            }
                                                                                            __label__ = 332;
                                                                                            }
                                                                                        $M_352_332 : for(;;) switch (__label__) {
                                                                                            case 352 :
                                                                                            // NORMAL
                                                                                                var var190 = local_6_REFERENCE.parent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@38644963
                                                                                                var var191 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@75abc84b
                                                                                                var190.child2 = var191;
                                                                                                break $M_301_365;
                                                                                            case 332 :
                                                                                            // NORMAL
                                                                                                $S_332 : {
                                                                                                // NORMAL
                                                                                                    var var188 = local_6_REFERENCE.parent.child2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5e65484f
                                                                                                    if ((var188 == iA)) {
                                                                                                        __label__ = 352;
                                                                                                        continue $M_352_332;
                                                                                                    }
                                                                                                    }
                                                                                                var var264 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                                                                                jlAssertionError.VOIDinit(var264);
                                                                                                throw var264;
                                                                                        }
                                                                                    case 313 :
                                                                                    // NORMAL
                                                                                        var var193 = local_6_REFERENCE.parent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@481469b5
                                                                                        var var194 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@75abc84b
                                                                                        var193.child1 = var194;
                                                                                        break $M_301_365;
                                                                                }
                                                                        }
                                                                        $S_371 : {
                                                                        // NORMAL
                                                                            var var197 = local_10_REFERENCE.height; // type is INT value type is INT
                                                                            var var199 = local_11_REFERENCE.height; // type is INT value type is INT
                                                                            if ((var197 <= var199)) {
                                                                                __label__ = 478;
                                                                                break $S_371;
                                                                            }
                                                                            __label__ = 384;
                                                                            }
                                                                        for(;;) switch (__label__) {
                                                                            case 478 :
                                                                            // NORMAL
                                                                                var var231 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@75abc84b
                                                                                var var232 = local_9_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4bdd8432
                                                                                var231.child2 = var232;
                                                                                var var233 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@250469b2
                                                                                var var234 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3776fb4d
                                                                                var233.child2 = var234;
                                                                                var var235 = local_10_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3776fb4d
                                                                                var235.parent = iA;
                                                                                local_2_REFERENCE.aabb.VOIDcombineojcAABBojcAABB(local_2_REFERENCE.aabb,local_5_REFERENCE.aabb,local_10_REFERENCE.aabb);
                                                                                local_6_REFERENCE.aabb.VOIDcombineojcAABBojcAABB(local_6_REFERENCE.aabb,local_2_REFERENCE.aabb,local_11_REFERENCE.aabb);
                                                                                var var248 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@250469b2
                                                                                var var253 = ojcMathUtils.INTmaxINTINT(local_5_REFERENCE.height,local_10_REFERENCE.height); // type is INT value type is INT
                                                                                var var254 = (1 + var253); // type is INT value type is INT
                                                                                var248.height = var254;
                                                                                var var255 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@75abc84b
                                                                                var var260 = ojcMathUtils.INTmaxINTINT(local_2_REFERENCE.height,local_11_REFERENCE.height); // type is INT value type is INT
                                                                                var var261 = (1 + var260); // type is INT value type is INT
                                                                                var255.height = var261;
                                                                                return local_4_REFERENCE;
                                                                            case 384 :
                                                                            // NORMAL
                                                                                var var200 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@75abc84b
                                                                                var var201 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3776fb4d
                                                                                var200.child2 = var201;
                                                                                var var202 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@250469b2
                                                                                var var203 = local_9_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4bdd8432
                                                                                var202.child2 = var203;
                                                                                var var204 = local_11_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4bdd8432
                                                                                var204.parent = iA;
                                                                                local_2_REFERENCE.aabb.VOIDcombineojcAABBojcAABB(local_2_REFERENCE.aabb,local_5_REFERENCE.aabb,local_11_REFERENCE.aabb);
                                                                                local_6_REFERENCE.aabb.VOIDcombineojcAABBojcAABB(local_6_REFERENCE.aabb,local_2_REFERENCE.aabb,local_10_REFERENCE.aabb);
                                                                                var var217 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@250469b2
                                                                                var var222 = ojcMathUtils.INTmaxINTINT(local_5_REFERENCE.height,local_11_REFERENCE.height); // type is INT value type is INT
                                                                                var var223 = (1 + var222); // type is INT value type is INT
                                                                                var217.height = var223;
                                                                                var var224 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@75abc84b
                                                                                var var229 = ojcMathUtils.INTmaxINTINT(local_2_REFERENCE.height,local_10_REFERENCE.height); // type is INT value type is INT
                                                                                var var230 = (1 + var229); // type is INT value type is INT
                                                                                var224.height = var230;
                                                                                return local_4_REFERENCE;
                                                                        }
                                                                    case 243 :
                                                                    // NORMAL
                                                                        $S_243 : {
                                                                        // NORMAL
                                                                            var var169 = local_9_REFERENCE.id; // type is INT value type is INT
                                                                            if ((0 > var169)) {
                                                                                __label__ = 264;
                                                                                break $S_243;
                                                                            }
                                                                            __label__ = 252;
                                                                            }
                                                                        $M_252_264 : for(;;) switch (__label__) {
                                                                            case 252 :
                                                                            // NORMAL
                                                                                var var171 = local_9_REFERENCE.id; // type is INT value type is INT
                                                                                var var172 = thisRef.m_nodeCapacity; // type is INT value type is INT
                                                                                if ((var171 < var172)) {
                                                                                    __label__ = 272;
                                                                                    continue $M_243_272;
                                                                                }
                                                                                __label__ = 264;
                                                                                continue $M_252_264;
                                                                            case 264 :
                                                                            // NORMAL
                                                                                var var173 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                                                                jlAssertionError.VOIDinit(var173);
                                                                                throw var173;
                                                                        }
                                                                }
                                                        }
                                                }
                                            case 170 :
                                            // NORMAL
                                                $S_170 : {
                                                // NORMAL
                                                    var var47 = local_10_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3776fb4d
                                                    if (var47 != null ) {
                                                        __label__ = 183;
                                                        continue $M_170_183;
                                                    }
                                                    }
                                                var var266 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                                jlAssertionError.VOIDinit(var266);
                                                throw var266;
                                        }
                                }
                        }
                    case 54 :
                    // NORMAL
                        $S_54 : {
                        // NORMAL
                            var var14 = local_3_REFERENCE.id; // type is INT value type is INT
                            if ((0 > var14)) {
                                __label__ = 73;
                                break $S_54;
                            }
                            __label__ = 62;
                            }
                        $M_62_73 : for(;;) switch (__label__) {
                            case 62 :
                            // NORMAL
                                var var16 = local_3_REFERENCE.id; // type is INT value type is INT
                                var var17 = thisRef.m_nodeCapacity; // type is INT value type is INT
                                if ((var16 < var17)) {
                                    __label__ = 81;
                                    continue $M_54_81;
                                }
                                __label__ = 73;
                                continue $M_62_73;
                            case 73 :
                            // NORMAL
                                var var160 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                jlAssertionError.VOIDinit(var160);
                                throw var160;
                        }
                }
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    if (iA != null ) {
                        __label__ = 18;
                        continue $M_18_6;
                    }
                    }
                var var267 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var267);
                throw var267;
        }
    },

    ojcAABBgetFatAABBINT : function(thisRef,proxyId) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcbDynamicTree.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 27;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_6_27 : for(;;) switch (__label__) {
            case 27 :
            // NORMAL
                var var3 = thisRef.m_nodes.data[proxyId]; // type is REFERENCE value type is REFERENCE
                return var3.aabb;
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    if ((0 > proxyId)) {
                        __label__ = 19;
                        break $S_6;
                    }
                    __label__ = 11;
                    }
                $M_11_19 : for(;;) switch (__label__) {
                    case 11 :
                    // NORMAL
                        var var1 = thisRef.m_nodeCapacity; // type is INT value type is INT
                        if ((proxyId < var1)) {
                            __label__ = 27;
                            continue $M_6_27;
                        }
                        __label__ = 19;
                        continue $M_11_19;
                    case 19 :
                    // NORMAL
                        var var5 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                        jlAssertionError.VOIDinit(var5);
                        throw var5;
                }
        }
    },

    VOIDqueryojcTreeCallbackojcAABB : function(thisRef,callback,aabb) {
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            thisRef.nodeStack.VOIDreset(thisRef.nodeStack);
            thisRef.nodeStack.VOIDpushojcbDynamicTreeNode(thisRef.nodeStack,thisRef.m_root);
            __label__ = 18;
            }
        $L_18 : for (;;) {
            $S_18 : {
            // NORMAL
                var var4 = thisRef.nodeStack.INTgetCount(thisRef.nodeStack); // type is INT value type is INT
                if ((var4 <= 0)) {
                    return;
                }
                }
            $S_28 : {
            // NORMAL
                var var6 = thisRef.nodeStack.ojcbDynamicTreeNodepop(thisRef.nodeStack); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3f838f15
                local_3_REFERENCE = var6; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@59588f60
                var var8 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@59588f60
                if (var8 != null ) {
                    __label__ = 43;
                    break $S_28;
                }
                __label__ = 40;
                }
            for(;;) switch (__label__) {
                case 40 :
                // NORMAL
                    __label__ = 18;
                    continue $L_18;
                case 43 :
                // NORMAL
                    $S_43 : {
                    // NORMAL
                        var var11 = ojcAABB.BOOLEANtestOverlapojcAABBojcAABB(local_3_REFERENCE.aabb,aabb); // type is BOOLEAN value type is BOOLEAN
                        if ((var11 == 0)) {
                            __label__ = 104;
                            break $S_43;
                        }
                        __label__ = 54;
                        }
                    $M_104_54 : for(;;) switch (__label__) {
                        case 104 :
                        // NORMAL
                            __label__ = 18;
                            continue $L_18;
                        case 54 :
                        // NORMAL
                            $S_54 : {
                            // NORMAL
                                var var13 = local_3_REFERENCE.child1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3437aa1b
                                if (var13 != null ) {
                                    __label__ = 82;
                                    break $S_54;
                                }
                                __label__ = 61;
                                }
                            for(;;) switch (__label__) {
                                case 82 :
                                // NORMAL
                                    thisRef.nodeStack.VOIDpushojcbDynamicTreeNode(thisRef.nodeStack,local_3_REFERENCE.child1);
                                    thisRef.nodeStack.VOIDpushojcbDynamicTreeNode(thisRef.nodeStack,local_3_REFERENCE.child2);
                                    __label__ = 104;
                                    continue $M_104_54;
                                case 61 :
                                // NORMAL
                                    $S_61 : {
                                    // NORMAL
                                        var var16 = callback.BOOLEANtreeCallbackINT(callback,local_3_REFERENCE.id); // type is BOOLEAN value type is BOOLEAN
                                        var local_4_BOOLEAN = var16; // type is BOOLEAN value type is BOOLEAN
                                        var var19 = local_4_BOOLEAN; // type is BOOLEAN value type is BOOLEAN
                                        if ((var19 != 0)) {
                                            break $S_61;
                                        }
                                        return;
                                        }
                                    __label__ = 104;
                                    continue $M_104_54;
                            }
                    }
            }
        }
    },

    jlObjectgetUserDataINT : function(thisRef,proxyId) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcbDynamicTree.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 27;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_27_6 : for(;;) switch (__label__) {
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    if ((0 > proxyId)) {
                        __label__ = 19;
                        break $S_6;
                    }
                    __label__ = 11;
                    }
                $M_19_11 : for(;;) switch (__label__) {
                    case 19 :
                    // NORMAL
                        var var5 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                        jlAssertionError.VOIDinit(var5);
                        throw var5;
                    case 11 :
                    // NORMAL
                        var var1 = thisRef.m_nodeCapacity; // type is INT value type is INT
                        if ((proxyId < var1)) {
                            __label__ = 27;
                            continue $M_27_6;
                        }
                        __label__ = 19;
                        continue $M_19_11;
                }
            case 27 :
            // NORMAL
                var var3 = thisRef.m_nodes.data[proxyId]; // type is REFERENCE value type is REFERENCE
                return var3.userData;
        }
    },

    BOOLEANmoveProxyINTojcAABBojcVec2 : function(thisRef,proxyId,aabb,displacement) {
        var local_8_FLOAT = null; // type is FLOAT # of inits = 1
        var local_7_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_9_FLOAT = null; // type is FLOAT # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcbDynamicTree.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 27;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_6_27 : for(;;) switch (__label__) {
            case 27 :
            // NORMAL
                $S_27 : {
                // NORMAL
                    var var4 = thisRef.m_nodes.data[proxyId]; // type is REFERENCE value type is REFERENCE
                    local_4_REFERENCE = var4; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@da2f802
                    var var6 = ojcbDynamicTree.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                    if ((var6 != 0)) {
                        __label__ = 57;
                        break $S_27;
                    }
                    __label__ = 41;
                    }
                $M_41_57 : for(;;) switch (__label__) {
                    case 41 :
                    // NORMAL
                        $S_41 : {
                        // NORMAL
                            var var8 = local_4_REFERENCE.BOOLEANisLeaf(local_4_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                            if ((var8 != 0)) {
                                __label__ = 57;
                                continue $M_41_57;
                            }
                            }
                        var var9 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                        jlAssertionError.VOIDinit(var9);
                        throw var9;
                    case 57 :
                    // NORMAL
                        $S_57 : {
                        // NORMAL
                            local_5_REFERENCE = local_4_REFERENCE.aabb; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@27a8a9f3
                            var var15 = local_5_REFERENCE.lowerBound.x; // type is FLOAT value type is FLOAT
                            var var17 = aabb.lowerBound.x; // type is FLOAT value type is FLOAT
                            if ((var15 <= var17)) {
                                __label__ = 142;
                                break $S_57;
                            }
                            __label__ = 83;
                            }
                        $M_142_83 : for(;;) switch (__label__) {
                            case 142 :
                            // NORMAL
                                $S_142 : {
                                // NORMAL
                                    thisRef.VOIDremoveLeafojcbDynamicTreeNode(thisRef,local_4_REFERENCE);
                                    local_6_REFERENCE = local_5_REFERENCE.lowerBound; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2dd71e8a
                                    local_7_REFERENCE = local_5_REFERENCE.upperBound; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@56c141d9
                                    var var44 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5b6f2ada
                                    var var47 = (aabb.lowerBound.x - 0.1); // type is FLOAT value type is FLOAT
                                    var44.x = var47;
                                    var var48 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5b6f2ada
                                    var var51 = (aabb.lowerBound.y - 0.1); // type is FLOAT value type is FLOAT
                                    var48.y = var51;
                                    var var52 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4d7eed08
                                    var var55 = (aabb.upperBound.x + 0.1); // type is FLOAT value type is FLOAT
                                    var52.x = var55;
                                    var var56 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4d7eed08
                                    var var59 = (aabb.upperBound.y + 0.1); // type is FLOAT value type is FLOAT
                                    var56.y = var59;
                                    local_8_FLOAT = (displacement.x * 2.0); // type is FLOAT value type is FLOAT
                                    local_9_FLOAT = (displacement.y * 2.0); // type is FLOAT value type is FLOAT
                                    var var68 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                                    if ((var68 >= 0.0)) {
                                        __label__ = 260;
                                        break $S_142;
                                    }
                                    __label__ = 245;
                                    }
                                $M_245_260 : for(;;) switch (__label__) {
                                    case 245 :
                                    // NORMAL
                                        var var70 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5b6f2ada
                                        var var73 = (var70.x + local_8_FLOAT); // type is FLOAT value type is FLOAT
                                        var70.x = var73;
                                        break $M_245_260;
                                    case 260 :
                                    // NORMAL
                                        var var74 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4d7eed08
                                        var var77 = (var74.x + local_8_FLOAT); // type is FLOAT value type is FLOAT
                                        var74.x = var77;
                                        break $M_245_260;
                                }
                                $S_272 : {
                                // NORMAL
                                    var var78 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                                    if ((var78 >= 0.0)) {
                                        __label__ = 294;
                                        break $S_272;
                                    }
                                    __label__ = 279;
                                    }
                                $M_279_294 : for(;;) switch (__label__) {
                                    case 294 :
                                    // NORMAL
                                        var var84 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4d7eed08
                                        var var87 = (var84.y + local_9_FLOAT); // type is FLOAT value type is FLOAT
                                        var84.y = var87;
                                        break $M_279_294;
                                    case 279 :
                                    // NORMAL
                                        var var80 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5b6f2ada
                                        var var83 = (var80.y + local_9_FLOAT); // type is FLOAT value type is FLOAT
                                        var80.y = var83;
                                        break $M_279_294;
                                }
                                thisRef.VOIDinsertLeafINT(thisRef,proxyId);
                                return 1;
                            case 83 :
                            // NORMAL
                                $S_83 : {
                                // NORMAL
                                    var var21 = local_5_REFERENCE.lowerBound.y; // type is FLOAT value type is FLOAT
                                    var var23 = aabb.lowerBound.y; // type is FLOAT value type is FLOAT
                                    if ((var21 <= var23)) {
                                        __label__ = 142;
                                        continue $M_142_83;
                                    }
                                    }
                                $S_102 : {
                                // NORMAL
                                    var var26 = aabb.upperBound.x; // type is FLOAT value type is FLOAT
                                    var var29 = local_5_REFERENCE.upperBound.x; // type is FLOAT value type is FLOAT
                                    if ((var26 <= var29)) {
                                        __label__ = 142;
                                        continue $M_142_83;
                                    }
                                    }
                                var var32 = aabb.upperBound.y; // type is FLOAT value type is FLOAT
                                var var35 = local_5_REFERENCE.upperBound.y; // type is FLOAT value type is FLOAT
                                if ((var32 <= var35)) {
                                    __label__ = 142;
                                    continue $M_142_83;
                                }
                                return 0;
                        }
                }
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    if ((0 > proxyId)) {
                        __label__ = 19;
                        break $S_6;
                    }
                    __label__ = 11;
                    }
                $M_19_11 : for(;;) switch (__label__) {
                    case 19 :
                    // NORMAL
                        var var2 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                        jlAssertionError.VOIDinit(var2);
                        throw var2;
                    case 11 :
                    // NORMAL
                        var var1 = thisRef.m_nodeCapacity; // type is INT value type is INT
                        if ((proxyId < var1)) {
                            __label__ = 27;
                            continue $M_6_27;
                        }
                        __label__ = 19;
                        continue $M_19_11;
                }
        }
    },

    VOIDremoveLeafojcbDynamicTreeNode : function(thisRef,leaf) {
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 4
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.m_root; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6c45e3df
            if ((leaf != var0)) {
                __label__ = 14;
                break $S_0;
            }
            __label__ = 8;
            }
        for(;;) switch (__label__) {
            case 14 :
            // NORMAL
                $S_14 : {
                // NORMAL
                    local_2_REFERENCE = leaf.parent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2d8eccbc
                    local_3_REFERENCE = local_2_REFERENCE.parent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@75d6dc0b
                    var var7 = local_2_REFERENCE.child1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@68858b69
                    if ((var7 != leaf)) {
                        __label__ = 41;
                        break $S_14;
                    }
                    __label__ = 32;
                    }
                $M_32_41 : for(;;) switch (__label__) {
                    case 32 :
                    // NORMAL
                        local_4_REFERENCE = local_2_REFERENCE.child2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2b9dd6bd
                        break $M_32_41;
                    case 41 :
                    // NORMAL
                        local_4_REFERENCE = local_2_REFERENCE.child1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@702d045e
                        break $M_32_41;
                }
                $S_47 : {
                // NORMAL
                    var var13 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@68731c17
                    if (var13 == null ) {
                        __label__ = 166;
                        break $S_47;
                    }
                    __label__ = 51;
                    }
                for(;;) switch (__label__) {
                    case 166 :
                    // NORMAL
                        var var14 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5f789be7
                        thisRef.m_root = var14;
                        var var15 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5f789be7
                        var15.parent = null;
                        thisRef.VOIDfreeNodeojcbDynamicTreeNode(thisRef,local_2_REFERENCE);
                        return;
                    case 51 :
                    // NORMAL
                        $S_51 : {
                        // NORMAL
                            var var18 = local_3_REFERENCE.child1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@33d8a8d4
                            var var19 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@70dd24f
                            if ((var18 != var19)) {
                                __label__ = 68;
                                break $S_51;
                            }
                            __label__ = 59;
                            }
                        $M_59_68 : for(;;) switch (__label__) {
                            case 59 :
                            // NORMAL
                                var var20 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@68731c17
                                var var21 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5f789be7
                                var20.child1 = var21;
                                break $M_59_68;
                            case 68 :
                            // NORMAL
                                var var22 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@68731c17
                                var var23 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5f789be7
                                var22.child2 = var23;
                                break $M_59_68;
                        }
                        $S_74 : {
                        // NORMAL
                            var var24 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5f789be7
                            var var25 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@68731c17
                            var24.parent = var25;
                            thisRef.VOIDfreeNodeojcbDynamicTreeNode(thisRef,local_2_REFERENCE);
                            local_5_REFERENCE = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@68731c17
                            __label__ = 88;
                            }
                        $L_88 : for (;;) {
                            $S_88 : {
                            // NORMAL
                                var var29 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@68731c17
                                if (var29 == null ) {
                                    __label__ = 163;
                                    break $S_88;
                                }
                                __label__ = 93;
                                }
                            for(;;) switch (__label__) {
                                case 93 :
                                // NORMAL
                                    var var31 = thisRef.ojcbDynamicTreeNodebalanceojcbDynamicTreeNode(thisRef,local_5_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@77c2b305
                                    local_5_REFERENCE = var31; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2d76e08
                                    var local_6_REFERENCE = local_5_REFERENCE.child1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@32afbb7e
                                    var local_7_REFERENCE = local_5_REFERENCE.child2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2a385681
                                    local_5_REFERENCE.aabb.VOIDcombineojcAABBojcAABB(local_5_REFERENCE.aabb,local_6_REFERENCE.aabb,local_7_REFERENCE.aabb);
                                    var var44 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@68731c17
                                    var var49 = ojcMathUtils.INTmaxINTINT(local_6_REFERENCE.height,local_7_REFERENCE.height); // type is INT value type is INT
                                    var var50 = (1 + var49); // type is INT value type is INT
                                    var44.height = var50;
                                    local_5_REFERENCE = local_5_REFERENCE.parent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5c50c51a
                                    __label__ = 88;
                                    continue $L_88;
                                case 163 :
                                // NORMAL
                                    return;
                            }
                        }
                }
            case 8 :
            // NORMAL
                thisRef.m_root = null;
                return;
        }
    },

    VOIDfreeNodeojcbDynamicTreeNode : function(thisRef,node) {
        var var7 = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcbDynamicTree.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 18;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_18_6 : for(;;) switch (__label__) {
            case 18 :
            // NORMAL
                $S_18 : {
                // NORMAL
                    var var1 = ojcbDynamicTree.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                    if ((var1 != 0)) {
                        __label__ = 40;
                        break $S_18;
                    }
                    __label__ = 24;
                    }
                $M_24_40 : for(;;) switch (__label__) {
                    case 24 :
                    // NORMAL
                        $S_24 : {
                        // NORMAL
                            var var2 = thisRef.m_nodeCount; // type is INT value type is INT
                            if ((0 < var2)) {
                                __label__ = 40;
                                continue $M_24_40;
                            }
                            }
                        var var11 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                        jlAssertionError.VOIDinit(var11);
                        throw var11;
                    case 40 :
                    // NORMAL
                        $S_40 : {
                        // NORMAL
                            var var3 = thisRef.m_freeList; // type is INT value type is INT
                            if ((var3 == -1)) {
                                __label__ = 61;
                                break $S_40;
                            }
                            __label__ = 49;
                            }
                        $M_61_49 : for(;;) switch (__label__) {
                            case 61 :
                            // NORMAL
                                var7 = null; // type is REFERENCE value type is REFERENCE
                                break $M_61_49;
                            case 49 :
                            // NORMAL
                                var var6 = thisRef.m_nodes.data[thisRef.m_freeList]; // type is REFERENCE value type is REFERENCE
                                var7 = var6; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1c17830a
                                break $M_61_49;
                        }
                        node.parent = var7;
                        node.height = -1;
                        var var8 = node.id; // type is INT value type is INT
                        thisRef.m_freeList = var8;
                        var var10 = (thisRef.m_nodeCount - 1); // type is INT value type is INT
                        thisRef.m_nodeCount = var10;
                        return;
                }
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    if (node != null ) {
                        __label__ = 18;
                        continue $M_18_6;
                    }
                    }
                var var12 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var12);
                throw var12;
        }
    },

    classInitCheck : function() {
        if (!ojcbDynamicTree.__initialized) {
            ojcbDynamicTree.__initialized = true;
            var thePrototype = ojcbDynamicTree.Create.prototype;
            thePrototype.instanceOf = ojcbDynamicTree.instanceOf;
            thePrototype.ClassgetClass = ojcbDynamicTree.ClassgetClass;
            thePrototype.VOIDfreeNodeojcbDynamicTreeNode = ojcbDynamicTree.VOIDfreeNodeojcbDynamicTreeNode;
            thePrototype.VOIDremoveLeafojcbDynamicTreeNode = ojcbDynamicTree.VOIDremoveLeafojcbDynamicTreeNode;
            thePrototype.BOOLEANmoveProxyINTojcAABBojcVec2 = ojcbDynamicTree.BOOLEANmoveProxyINTojcAABBojcVec2;
            thePrototype.jlObjectgetUserDataINT = ojcbDynamicTree.jlObjectgetUserDataINT;
            thePrototype.VOIDqueryojcTreeCallbackojcAABB = ojcbDynamicTree.VOIDqueryojcTreeCallbackojcAABB;
            thePrototype.ojcAABBgetFatAABBINT = ojcbDynamicTree.ojcAABBgetFatAABBINT;
            thePrototype.ojcbDynamicTreeNodebalanceojcbDynamicTreeNode = ojcbDynamicTree.ojcbDynamicTreeNodebalanceojcbDynamicTreeNode;
            thePrototype.VOIDinsertLeafINT = ojcbDynamicTree.VOIDinsertLeafINT;
            thePrototype.ojcbDynamicTreeNodeallocateNode = ojcbDynamicTree.ojcbDynamicTreeNodeallocateNode;
            thePrototype.INTcreateProxyojcAABBjlObject = ojcbDynamicTree.INTcreateProxyojcAABBjlObject;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            ojcbBroadPhaseStrategy.classInitCheck();
            ojcbDynamicTree.VOIDclinit();
        }
    },

};

var ojcbBroadPhaseStrategy = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 85,
    __implementedTypes : [85,1],


    classInitCheck : function() {
        if (!ojcbBroadPhaseStrategy.__initialized) {
            ojcbBroadPhaseStrategy.__initialized = true;
            jlObject.classInitCheck();
        }
    },

};

var ojcbDynamicTree$TreeNodeStack = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 86,
    __implementedTypes : [1,86],
    $assertionsDisabled : false, // declared in org.jbox2d.collision.broadphase.DynamicTree$TreeNodeStack

    Create : function() {
        this.this$0 = null; // declared in org.jbox2d.collision.broadphase.DynamicTree$TreeNodeStack
        this.stack = null; // declared in org.jbox2d.collision.broadphase.DynamicTree$TreeNodeStack
        this.position = 0; // declared in org.jbox2d.collision.broadphase.DynamicTree$TreeNodeStack
        this.size = 0; // declared in org.jbox2d.collision.broadphase.DynamicTree$TreeNodeStack
    },

    instanceOf : function(aType) {
        return ojcbDynamicTree$TreeNodeStack.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcbDynamicTree$TreeNodeStack;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcbDynamicTree.BOOLEANdesiredAssertionStatus(ojcbDynamicTree); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_13_9 : for(;;) switch (__label__) {
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_13_9;
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_13_9;
        }
        ojcbDynamicTree$TreeNodeStack.$assertionsDisabled = var1;
        return;
    },

    VOIDinitojcbDynamicTreeINT : function(thisRef,p1,initialSize) {
        var __label__ = null;
        thisRef.this$0 = p1;
        var var0 = bytecoder.newArray(initialSize,null); // type is REFERENCE value type is REFERENCE
        thisRef.stack = var0;
        thisRef.position = 0;
        thisRef.size = initialSize;
        return;
    },

    VOIDreset : function(thisRef) {
        var __label__ = null;
        thisRef.position = 0;
        return;
    },

    VOIDpushojcbDynamicTreeNode : function(thisRef,i) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.position; // type is INT value type is INT
            var var1 = thisRef.size; // type is INT value type is INT
            if ((var0 != var1)) {
                __label__ = 50;
                break $S_0;
            }
            __label__ = 11;
            }
        $M_11_50 : for(;;) switch (__label__) {
            case 50 :
            // NORMAL
                var var13 = thisRef.stack; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1fd4db34
                var var14 = thisRef.position; // type is INT value type is INT
                var var15 = (var14 + 1); // type is INT value type is INT
                thisRef.position = var15;
                var13.data[var14] = i;
                return;
            case 11 :
            // NORMAL
                var local_2_REFERENCE = thisRef.stack; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@132a35a7
                var var6 = bytecoder.newArray((thisRef.size * 2),null); // type is REFERENCE value type is REFERENCE
                thisRef.stack = var6;
                var var8 = thisRef.stack.data.length; // type is INT value type is INT
                thisRef.size = var8;
                jlSystem.VOIDarraycopyjlObjectINTjlObjectINTINT(local_2_REFERENCE,0,thisRef.stack,0,local_2_REFERENCE.data.length);
                __label__ = 50;
                continue $M_11_50;
        }
    },

    INTgetCount : function(thisRef) {
        var __label__ = null;
        return thisRef.position;
    },

    ojcbDynamicTreeNodepop : function(thisRef) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcbDynamicTree$TreeNodeStack.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 21;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_21_6 : for(;;) switch (__label__) {
            case 21 :
            // NORMAL
                var var3 = thisRef.stack; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@46f86f3e
                var var5 = (thisRef.position - 1); // type is INT value type is INT
                thisRef.position = var5;
                var var6 = var3.data[var5]; // type is REFERENCE value type is REFERENCE
                return var6;
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    var var1 = thisRef.position; // type is INT value type is INT
                    if ((var1 > 0)) {
                        __label__ = 21;
                        continue $M_21_6;
                    }
                    }
                var var2 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var2);
                throw var2;
        }
    },

    classInitCheck : function() {
        if (!ojcbDynamicTree$TreeNodeStack.__initialized) {
            ojcbDynamicTree$TreeNodeStack.__initialized = true;
            var thePrototype = ojcbDynamicTree$TreeNodeStack.Create.prototype;
            thePrototype.instanceOf = ojcbDynamicTree$TreeNodeStack.instanceOf;
            thePrototype.ClassgetClass = ojcbDynamicTree$TreeNodeStack.ClassgetClass;
            thePrototype.ojcbDynamicTreeNodepop = ojcbDynamicTree$TreeNodeStack.ojcbDynamicTreeNodepop;
            thePrototype.INTgetCount = ojcbDynamicTree$TreeNodeStack.INTgetCount;
            thePrototype.VOIDpushojcbDynamicTreeNode = ojcbDynamicTree$TreeNodeStack.VOIDpushojcbDynamicTreeNode;
            thePrototype.VOIDreset = ojcbDynamicTree$TreeNodeStack.VOIDreset;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            ojcbDynamicTree$TreeNodeStack.VOIDclinit();
        }
    },

};

var ojcbDynamicTreeNode = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 87,
    __implementedTypes : [1,87],

    Create : function() {
        this.aabb = null; // declared in org.jbox2d.collision.broadphase.DynamicTreeNode
        this.id = 0; // declared in org.jbox2d.collision.broadphase.DynamicTreeNode
        this.parent = null; // declared in org.jbox2d.collision.broadphase.DynamicTreeNode
        this.height = 0; // declared in org.jbox2d.collision.broadphase.DynamicTreeNode
        this.child1 = null; // declared in org.jbox2d.collision.broadphase.DynamicTreeNode
        this.child2 = null; // declared in org.jbox2d.collision.broadphase.DynamicTreeNode
        this.userData = null; // declared in org.jbox2d.collision.broadphase.DynamicTreeNode
    },

    instanceOf : function(aType) {
        return ojcbDynamicTreeNode.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcbDynamicTreeNode;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitINT : function(thisRef,id) {
        var __label__ = null;
        var var0 = new ojcAABB.Create(); // type is REFERENCE value type is REFERENCE
        ojcAABB.VOIDinit(var0);
        thisRef.aabb = var0;
        thisRef.id = id;
        return;
    },

    BOOLEANisLeaf : function(thisRef) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.child1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@300a6fd2
            if (var0 != null ) {
                __label__ = 11;
                break $S_0;
            }
            __label__ = 7;
            }
        for(;;) switch (__label__) {
            case 7 :
            // NORMAL
                var var1 = 1; // type is INT value type is INT
                return var1;
            case 11 :
            // NORMAL
                var var1 = 0; // type is INT value type is INT
                return var1;
        }
    },

    classInitCheck : function() {
        if (!ojcbDynamicTreeNode.__initialized) {
            ojcbDynamicTreeNode.__initialized = true;
            var thePrototype = ojcbDynamicTreeNode.Create.prototype;
            thePrototype.instanceOf = ojcbDynamicTreeNode.instanceOf;
            thePrototype.ClassgetClass = ojcbDynamicTreeNode.ClassgetClass;
            thePrototype.BOOLEANisLeaf = ojcbDynamicTreeNode.BOOLEANisLeaf;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojcAABB = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 88,
    __implementedTypes : [1,88],

    Create : function() {
        this.lowerBound = null; // declared in org.jbox2d.collision.AABB
        this.upperBound = null; // declared in org.jbox2d.collision.AABB
    },

    instanceOf : function(aType) {
        return ojcAABB.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcAABB;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var0);
        thisRef.lowerBound = var0;
        var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var1);
        thisRef.upperBound = var1;
        return;
    },

    FLOATgetPerimeter : function(thisRef) {
        var __label__ = null;
        return (2.0 * (((thisRef.upperBound.x - thisRef.lowerBound.x) + thisRef.upperBound.y) - thisRef.lowerBound.y));
    },

    VOIDcombineojcAABBojcAABB : function(thisRef,aabb1,aab) {
        var var0 = null; // type is REFERENCE # of inits = 1
        var var10 = null; // type is FLOAT # of inits = 2
        var var32 = null; // type is FLOAT # of inits = 2
        var var21 = null; // type is FLOAT # of inits = 2
        var var33 = null; // type is REFERENCE # of inits = 1
        var var43 = null; // type is FLOAT # of inits = 2
        var var22 = null; // type is REFERENCE # of inits = 1
        var var11 = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var0 = thisRef.lowerBound; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1acd0e8
            var var2 = aabb1.lowerBound.x; // type is FLOAT value type is FLOAT
            var var4 = aab.lowerBound.x; // type is FLOAT value type is FLOAT
            if ((var2 >= var4)) {
                __label__ = 32;
                break $S_0;
            }
            __label__ = 22;
            }
        $M_22_32 : for(;;) switch (__label__) {
            case 22 :
            // NORMAL
                var10 = aabb1.lowerBound.x; // type is FLOAT value type is FLOAT
                break $M_22_32;
            case 32 :
            // NORMAL
                var10 = aab.lowerBound.x; // type is FLOAT value type is FLOAT
                break $M_22_32;
        }
        $S_39 : {
        // NORMAL
            var0.x = var10;
            var11 = thisRef.lowerBound; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5cfc10ef
            var var13 = aabb1.lowerBound.y; // type is FLOAT value type is FLOAT
            var var15 = aab.lowerBound.y; // type is FLOAT value type is FLOAT
            if ((var13 >= var15)) {
                __label__ = 74;
                break $S_39;
            }
            __label__ = 64;
            }
        $M_74_64 : for(;;) switch (__label__) {
            case 64 :
            // NORMAL
                var21 = aabb1.lowerBound.y; // type is FLOAT value type is FLOAT
                break $M_74_64;
            case 74 :
            // NORMAL
                var21 = aab.lowerBound.y; // type is FLOAT value type is FLOAT
                break $M_74_64;
        }
        $S_81 : {
        // NORMAL
            var11.y = var21;
            var22 = thisRef.upperBound; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@38170050
            var var24 = aabb1.upperBound.x; // type is FLOAT value type is FLOAT
            var var26 = aab.upperBound.x; // type is FLOAT value type is FLOAT
            if ((var24 <= var26)) {
                __label__ = 116;
                break $S_81;
            }
            __label__ = 106;
            }
        $M_116_106 : for(;;) switch (__label__) {
            case 116 :
            // NORMAL
                var32 = aab.upperBound.x; // type is FLOAT value type is FLOAT
                break $M_116_106;
            case 106 :
            // NORMAL
                var32 = aabb1.upperBound.x; // type is FLOAT value type is FLOAT
                break $M_116_106;
        }
        $S_123 : {
        // NORMAL
            var22.x = var32;
            var33 = thisRef.upperBound; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@c54c33
            var var35 = aabb1.upperBound.y; // type is FLOAT value type is FLOAT
            var var37 = aab.upperBound.y; // type is FLOAT value type is FLOAT
            if ((var35 <= var37)) {
                __label__ = 158;
                break $S_123;
            }
            __label__ = 148;
            }
        $M_158_148 : for(;;) switch (__label__) {
            case 148 :
            // NORMAL
                var43 = aabb1.upperBound.y; // type is FLOAT value type is FLOAT
                break $M_158_148;
            case 158 :
            // NORMAL
                var43 = aab.upperBound.y; // type is FLOAT value type is FLOAT
                break $M_158_148;
        }
        var33.y = var43;
        return;
    },

    jlStringtoString : function(thisRef) {
        var __label__ = null;
        var var0 = new jlStringBuilder.Create(); // type is REFERENCE value type is REFERENCE
        jlStringBuilder.VOIDinit(var0);
        var var1 = var0.jlStringBuilderappendjlString(var0,bytecoder.stringpool[31]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1b511b91
        var var3 = var1.jlStringBuilderappendjlObject(var1,thisRef.lowerBound); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4a81a429
        var var4 = var3.jlStringBuilderappendjlString(var3,bytecoder.stringpool[32]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1f46598f
        var var6 = var4.jlStringBuilderappendjlObject(var4,thisRef.upperBound); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@21a0bfc5
        var var7 = var6.jlStringBuilderappendjlString(var6,bytecoder.stringpool[33]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@32bea5f3
        var var8 = var7.jlStringtoString(var7); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@75d9ff61
        var local_1_REFERENCE = var8; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@587e5a74
        return local_1_REFERENCE;
    },

    BOOLEANtestOverlapojcAABBojcAABB : function(a,b) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var4 = (b.lowerBound.x - a.upperBound.x); // type is FLOAT value type is FLOAT
            if ((var4 > 0.0)) {
                return 0;
            }
            }
        $S_20 : {
        // NORMAL
            var var10 = (b.lowerBound.y - a.upperBound.y); // type is FLOAT value type is FLOAT
            if ((var10 <= 0.0)) {
                break $S_20;
            }
            return 0;
            }
        $S_42 : {
        // NORMAL
            var var16 = (a.lowerBound.x - b.upperBound.x); // type is FLOAT value type is FLOAT
            if ((var16 > 0.0)) {
                return 0;
            }
            }
        var var22 = (a.lowerBound.y - b.upperBound.y); // type is FLOAT value type is FLOAT
        if ((var22 <= 0.0)) {
            return 1;
        }
        return 0;
    },

    classInitCheck : function() {
        if (!ojcAABB.__initialized) {
            ojcAABB.__initialized = true;
            var thePrototype = ojcAABB.Create.prototype;
            thePrototype.instanceOf = ojcAABB.instanceOf;
            thePrototype.ClassgetClass = ojcAABB.ClassgetClass;
            thePrototype.jlStringtoString = ojcAABB.jlStringtoString;
            thePrototype.VOIDcombineojcAABBojcAABB = ojcAABB.VOIDcombineojcAABBojcAABB;
            thePrototype.FLOATgetPerimeter = ojcAABB.FLOATgetPerimeter;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojcRayCastInput = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 89,
    __implementedTypes : [1,89],

    Create : function() {
        this.p1 = null; // declared in org.jbox2d.collision.RayCastInput
        this.p2 = null; // declared in org.jbox2d.collision.RayCastInput
        this.maxFraction = 0; // declared in org.jbox2d.collision.RayCastInput
    },

    instanceOf : function(aType) {
        return ojcRayCastInput.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcRayCastInput;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var0);
        thisRef.p1 = var0;
        var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var1);
        thisRef.p2 = var1;
        thisRef.maxFraction = 0.0;
        return;
    },

    classInitCheck : function() {
        if (!ojcRayCastInput.__initialized) {
            ojcRayCastInput.__initialized = true;
            var thePrototype = ojcRayCastInput.Create.prototype;
            thePrototype.instanceOf = ojcRayCastInput.instanceOf;
            thePrototype.ClassgetClass = ojcRayCastInput.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojcColor3f = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 90,
    __implementedTypes : [1,90],
    WHITE : null, // declared in org.jbox2d.common.Color3f
    BLACK : null, // declared in org.jbox2d.common.Color3f
    BLUE : null, // declared in org.jbox2d.common.Color3f
    GREEN : null, // declared in org.jbox2d.common.Color3f
    RED : null, // declared in org.jbox2d.common.Color3f

    Create : function() {
        this.x = 0; // declared in org.jbox2d.common.Color3f
        this.y = 0; // declared in org.jbox2d.common.Color3f
        this.z = 0; // declared in org.jbox2d.common.Color3f
    },

    instanceOf : function(aType) {
        return ojcColor3f.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcColor3f;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var __label__ = null;
        var var0 = new ojcColor3f.Create(); // type is REFERENCE value type is REFERENCE
        ojcColor3f.VOIDinitFLOATFLOATFLOAT(var0,1.0,1.0,1.0);
        ojcColor3f.WHITE = var0;
        var var1 = new ojcColor3f.Create(); // type is REFERENCE value type is REFERENCE
        ojcColor3f.VOIDinitFLOATFLOATFLOAT(var1,0.0,0.0,0.0);
        ojcColor3f.BLACK = var1;
        var var2 = new ojcColor3f.Create(); // type is REFERENCE value type is REFERENCE
        ojcColor3f.VOIDinitFLOATFLOATFLOAT(var2,0.0,0.0,1.0);
        ojcColor3f.BLUE = var2;
        var var3 = new ojcColor3f.Create(); // type is REFERENCE value type is REFERENCE
        ojcColor3f.VOIDinitFLOATFLOATFLOAT(var3,0.0,1.0,0.0);
        ojcColor3f.GREEN = var3;
        var var4 = new ojcColor3f.Create(); // type is REFERENCE value type is REFERENCE
        ojcColor3f.VOIDinitFLOATFLOATFLOAT(var4,1.0,0.0,0.0);
        ojcColor3f.RED = var4;
        return;
    },

    VOIDinitFLOATFLOATFLOAT : function(thisRef,r,g,b) {
        var __label__ = null;
        thisRef.x = r;
        thisRef.y = g;
        thisRef.z = b;
        return;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        thisRef.z = 0.0;
        thisRef.y = 0.0;
        thisRef.x = 0.0;
        return;
    },

    classInitCheck : function() {
        if (!ojcColor3f.__initialized) {
            ojcColor3f.__initialized = true;
            var thePrototype = ojcColor3f.Create.prototype;
            thePrototype.instanceOf = ojcColor3f.instanceOf;
            thePrototype.ClassgetClass = ojcColor3f.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            ojcColor3f.VOIDclinit();
        }
    },

};

var ojdcContactRegister = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 91,
    __implementedTypes : [1,91],

    Create : function() {
        this.creator = null; // declared in org.jbox2d.dynamics.contacts.ContactRegister
        this.primary = false; // declared in org.jbox2d.dynamics.contacts.ContactRegister
    },

    instanceOf : function(aType) {
        return ojdcContactRegister.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdcContactRegister;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    classInitCheck : function() {
        if (!ojdcContactRegister.__initialized) {
            ojdcContactRegister.__initialized = true;
            var thePrototype = ojdcContactRegister.Create.prototype;
            thePrototype.instanceOf = ojdcContactRegister.instanceOf;
            thePrototype.ClassgetClass = ojdcContactRegister.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojdTimeStep = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 92,
    __implementedTypes : [1,92],

    Create : function() {
        this.dt = 0; // declared in org.jbox2d.dynamics.TimeStep
        this.velocityIterations = 0; // declared in org.jbox2d.dynamics.TimeStep
        this.positionIterations = 0; // declared in org.jbox2d.dynamics.TimeStep
        this.inv_dt = 0; // declared in org.jbox2d.dynamics.TimeStep
        this.dtRatio = 0; // declared in org.jbox2d.dynamics.TimeStep
        this.warmStarting = false; // declared in org.jbox2d.dynamics.TimeStep
    },

    instanceOf : function(aType) {
        return ojdTimeStep.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdTimeStep;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    classInitCheck : function() {
        if (!ojdTimeStep.__initialized) {
            ojdTimeStep.__initialized = true;
            var thePrototype = ojdTimeStep.Create.prototype;
            thePrototype.instanceOf = ojdTimeStep.instanceOf;
            thePrototype.ClassgetClass = ojdTimeStep.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojcTimer = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 93,
    __implementedTypes : [1,93],

    Create : function() {
        this.resetNanos = 0; // declared in org.jbox2d.common.Timer
    },

    instanceOf : function(aType) {
        return ojcTimer.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcTimer;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        thisRef.VOIDreset(thisRef);
        return;
    },

    VOIDreset : function(thisRef) {
        var __label__ = null;
        var var0 = jlSystem.LONGnanoTime(); // type is LONG value type is LONG
        thisRef.resetNanos = var0;
        return;
    },

    FLOATgetMilliseconds : function(thisRef) {
        var __label__ = null;
        var var0 = jlSystem.LONGnanoTime(); // type is LONG value type is LONG
        return ((Math.floor(((var0 - thisRef.resetNanos) / 1000)) * 1.0) / 1000.0);
    },

    classInitCheck : function() {
        if (!ojcTimer.__initialized) {
            ojcTimer.__initialized = true;
            var thePrototype = ojcTimer.Create.prototype;
            thePrototype.instanceOf = ojcTimer.instanceOf;
            thePrototype.ClassgetClass = ojcTimer.ClassgetClass;
            thePrototype.FLOATgetMilliseconds = ojcTimer.FLOATgetMilliseconds;
            thePrototype.VOIDreset = ojcTimer.VOIDreset;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojpaVec2Array = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 94,
    __implementedTypes : [1,94],
    $assertionsDisabled : false, // declared in org.jbox2d.pooling.arrays.Vec2Array

    Create : function() {
        this.map = null; // declared in org.jbox2d.pooling.arrays.Vec2Array
    },

    instanceOf : function(aType) {
        return ojpaVec2Array.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojpaVec2Array;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojpaVec2Array.BOOLEANdesiredAssertionStatus(ojpaVec2Array); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_13_9 : for(;;) switch (__label__) {
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_13_9;
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_13_9;
        }
        ojpaVec2Array.$assertionsDisabled = var1;
        return;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = new juHashMap.Create(); // type is REFERENCE value type is REFERENCE
        juHashMap.VOIDinit(var0);
        thisRef.map = var0;
        return;
    },

    A1ojcVec2getINT : function(thisRef,argLength) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojpaVec2Array.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 18;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_18_6 : for(;;) switch (__label__) {
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    if ((argLength > 0)) {
                        __label__ = 18;
                        continue $M_18_6;
                    }
                    }
                var var1 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var1);
                throw var1;
            case 18 :
            // NORMAL
                $S_18 : {
                // NORMAL
                    var var2 = thisRef.map; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5d57fd4d
                    var var3 = jlInteger.jlIntegervalueOfINT(argLength); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@41080862
                    var var4 = var2.BOOLEANcontainsKeyjlObject(var2,var3); // type is BOOLEAN value type is BOOLEAN
                    if ((var4 != 0)) {
                        __label__ = 49;
                        break $S_18;
                    }
                    __label__ = 32;
                    }
                $M_32_49 : for(;;) switch (__label__) {
                    case 49 :
                    // NORMAL
                        $S_49 : {
                        // NORMAL
                            var var9 = ojpaVec2Array.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                            if ((var9 != 0)) {
                                __label__ = 84;
                                break $S_49;
                            }
                            __label__ = 55;
                            }
                        $M_84_55 : for(;;) switch (__label__) {
                            case 84 :
                            // NORMAL
                                var var15 = thisRef.map; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3da16eb8
                                var var16 = jlInteger.jlIntegervalueOfINT(argLength); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@87209db
                                var var17 = var15.jlObjectgetjlObject(var15,var16); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6aad200d
                                return var17;
                            case 55 :
                            // NORMAL
                                $S_55 : {
                                // NORMAL
                                    var var10 = thisRef.map; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6b677e22
                                    var var11 = jlInteger.jlIntegervalueOfINT(argLength); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5d051958
                                    var var12 = var10.jlObjectgetjlObject(var10,var11); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@45a1fff2
                                    var var13 = var12.data.length; // type is INT value type is INT
                                    if ((var13 == argLength)) {
                                        __label__ = 84;
                                        continue $M_84_55;
                                    }
                                    }
                                var var14 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                jlAssertionError.VOIDinitjlObject(var14,bytecoder.stringpool[34]);
                                throw var14;
                        }
                    case 32 :
                    // NORMAL
                        var var5 = thisRef.map; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@460f0203
                        var var6 = jlInteger.jlIntegervalueOfINT(argLength); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1649e28e
                        var var7 = thisRef.A1ojcVec2getInitializedArrayINT(thisRef,argLength); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@63f3f6c6
                        var var8 = var5.jlObjectputjlObjectjlObject(var5,var6,var7); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2967cb25
                        __label__ = 49;
                        continue $M_32_49;
                }
        }
    },

    A1ojcVec2getInitializedArrayINT : function(thisRef,argLength) {
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_3_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_2_REFERENCE = bytecoder.newArray(argLength,null); // type is REFERENCE value type is REFERENCE
            local_3_INT = 0; // type is INT value type is INT
            __label__ = 7;
            }
        $L_7 : for (;;) {
            $S_7 : {
            // NORMAL
                var var4 = local_3_INT; // type is INT value type is INT
                var var6 = local_2_REFERENCE.data.length; // type is INT value type is INT
                if ((var4 >= var6)) {
                    return local_2_REFERENCE;
                }
                }
            var var7 = local_2_REFERENCE; // type is REFERENCE value type is REFERENCE
            var var8 = local_3_INT; // type is INT value type is INT
            var var9 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var9);
            var7.data[var8] = var9;
            local_3_INT = (local_3_INT + 1); // type is INT value type is INT
            __label__ = 7;
            continue $L_7;
        }
    },

    classInitCheck : function() {
        if (!ojpaVec2Array.__initialized) {
            ojpaVec2Array.__initialized = true;
            var thePrototype = ojpaVec2Array.Create.prototype;
            thePrototype.instanceOf = ojpaVec2Array.instanceOf;
            thePrototype.ClassgetClass = ojpaVec2Array.ClassgetClass;
            thePrototype.A1ojcVec2getInitializedArrayINT = ojpaVec2Array.A1ojcVec2getInitializedArrayINT;
            thePrototype.A1ojcVec2getINT = ojpaVec2Array.A1ojcVec2getINT;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            ojpaVec2Array.VOIDclinit();
        }
    },

};

var ojdWorldQueryWrapper = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 95,
    __implementedTypes : [1,96,95],

    Create : function() {
        this.broadPhase = null; // declared in org.jbox2d.dynamics.WorldQueryWrapper
        this.callback = null; // declared in org.jbox2d.dynamics.WorldQueryWrapper
    },

    instanceOf : function(aType) {
        return ojdWorldQueryWrapper.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdWorldQueryWrapper;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    BOOLEANtreeCallbackINT : function(thisRef,nodeId) {
        var __label__ = null;
        var var1 = thisRef.broadPhase.jlObjectgetUserDataINT(thisRef.broadPhase,nodeId); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@77725eed
        var local_2_REFERENCE = var1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@37159a03
        var var6 = thisRef.callback.BOOLEANreportFixtureojdFixture(thisRef.callback,local_2_REFERENCE.fixture); // type is BOOLEAN value type is BOOLEAN
        return var6;
    },

    classInitCheck : function() {
        if (!ojdWorldQueryWrapper.__initialized) {
            ojdWorldQueryWrapper.__initialized = true;
            var thePrototype = ojdWorldQueryWrapper.Create.prototype;
            thePrototype.instanceOf = ojdWorldQueryWrapper.instanceOf;
            thePrototype.ClassgetClass = ojdWorldQueryWrapper.ClassgetClass;
            thePrototype.BOOLEANtreeCallbackINT = ojdWorldQueryWrapper.BOOLEANtreeCallbackINT;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            ojcTreeCallback.classInitCheck();
        }
    },

};

var ojcTreeCallback = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 96,
    __implementedTypes : [1,96],


    classInitCheck : function() {
        if (!ojcTreeCallback.__initialized) {
            ojcTreeCallback.__initialized = true;
            jlObject.classInitCheck();
        }
    },

};

var ojdWorldRayCastWrapper = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 97,
    __implementedTypes : [1,97,98],

    Create : function() {
        this.output = null; // declared in org.jbox2d.dynamics.WorldRayCastWrapper
        this.temp = null; // declared in org.jbox2d.dynamics.WorldRayCastWrapper
        this.point = null; // declared in org.jbox2d.dynamics.WorldRayCastWrapper
    },

    instanceOf : function(aType) {
        return ojdWorldRayCastWrapper.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdWorldRayCastWrapper;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcRayCastOutput.Create(); // type is REFERENCE value type is REFERENCE
        ojcRayCastOutput.VOIDinit(var0);
        thisRef.output = var0;
        var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var1);
        thisRef.temp = var1;
        var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var2);
        thisRef.point = var2;
        return;
    },

    classInitCheck : function() {
        if (!ojdWorldRayCastWrapper.__initialized) {
            ojdWorldRayCastWrapper.__initialized = true;
            var thePrototype = ojdWorldRayCastWrapper.Create.prototype;
            thePrototype.instanceOf = ojdWorldRayCastWrapper.instanceOf;
            thePrototype.ClassgetClass = ojdWorldRayCastWrapper.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            ojcTreeRayCastCallback.classInitCheck();
        }
    },

};

var ojcTreeRayCastCallback = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 98,
    __implementedTypes : [1,98],


    classInitCheck : function() {
        if (!ojcTreeRayCastCallback.__initialized) {
            ojcTreeRayCastCallback.__initialized = true;
            jlObject.classInitCheck();
        }
    },

};

var ojcRayCastOutput = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 99,
    __implementedTypes : [1,99],

    Create : function() {
        this.normal = null; // declared in org.jbox2d.collision.RayCastOutput
        this.fraction = 0; // declared in org.jbox2d.collision.RayCastOutput
    },

    instanceOf : function(aType) {
        return ojcRayCastOutput.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcRayCastOutput;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var0);
        thisRef.normal = var0;
        thisRef.fraction = 0.0;
        return;
    },

    classInitCheck : function() {
        if (!ojcRayCastOutput.__initialized) {
            ojcRayCastOutput.__initialized = true;
            var thePrototype = ojcRayCastOutput.Create.prototype;
            thePrototype.instanceOf = ojcRayCastOutput.instanceOf;
            thePrototype.ClassgetClass = ojcRayCastOutput.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojdIsland = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 100,
    __implementedTypes : [1,100],
    $assertionsDisabled : false, // declared in org.jbox2d.dynamics.Island

    Create : function() {
        this.contactSolver = null; // declared in org.jbox2d.dynamics.Island
        this.timer = null; // declared in org.jbox2d.dynamics.Island
        this.solverData = null; // declared in org.jbox2d.dynamics.Island
        this.solverDef = null; // declared in org.jbox2d.dynamics.Island
        this.toiContactSolver = null; // declared in org.jbox2d.dynamics.Island
        this.toiSolverDef = null; // declared in org.jbox2d.dynamics.Island
        this.impulse = null; // declared in org.jbox2d.dynamics.Island
        this.m_bodyCapacity = 0; // declared in org.jbox2d.dynamics.Island
        this.m_contactCapacity = 0; // declared in org.jbox2d.dynamics.Island
        this.m_jointCapacity = 0; // declared in org.jbox2d.dynamics.Island
        this.m_bodyCount = 0; // declared in org.jbox2d.dynamics.Island
        this.m_contactCount = 0; // declared in org.jbox2d.dynamics.Island
        this.m_jointCount = 0; // declared in org.jbox2d.dynamics.Island
        this.m_listener = null; // declared in org.jbox2d.dynamics.Island
        this.m_bodies = null; // declared in org.jbox2d.dynamics.Island
        this.m_joints = null; // declared in org.jbox2d.dynamics.Island
        this.m_contacts = null; // declared in org.jbox2d.dynamics.Island
        this.m_velocities = null; // declared in org.jbox2d.dynamics.Island
        this.m_positions = null; // declared in org.jbox2d.dynamics.Island
    },

    instanceOf : function(aType) {
        return ojdIsland.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdIsland;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdIsland.BOOLEANdesiredAssertionStatus(ojdIsland); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_13_9 : for(;;) switch (__label__) {
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_13_9;
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_13_9;
        }
        ojdIsland.$assertionsDisabled = var1;
        return;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = new ojdcContactSolver.Create(); // type is REFERENCE value type is REFERENCE
        ojdcContactSolver.VOIDinit(var0);
        thisRef.contactSolver = var0;
        var var1 = new ojcTimer.Create(); // type is REFERENCE value type is REFERENCE
        ojcTimer.VOIDinit(var1);
        thisRef.timer = var1;
        var var2 = new ojdSolverData.Create(); // type is REFERENCE value type is REFERENCE
        ojdSolverData.VOIDinit(var2);
        thisRef.solverData = var2;
        var var3 = new ojdcContactSolver$ContactSolverDef.Create(); // type is REFERENCE value type is REFERENCE
        ojdcContactSolver$ContactSolverDef.VOIDinit(var3);
        thisRef.solverDef = var3;
        var var4 = new ojdcContactSolver.Create(); // type is REFERENCE value type is REFERENCE
        ojdcContactSolver.VOIDinit(var4);
        thisRef.toiContactSolver = var4;
        var var5 = new ojdcContactSolver$ContactSolverDef.Create(); // type is REFERENCE value type is REFERENCE
        ojdcContactSolver$ContactSolverDef.VOIDinit(var5);
        thisRef.toiSolverDef = var5;
        var var6 = new ojcContactImpulse.Create(); // type is REFERENCE value type is REFERENCE
        ojcContactImpulse.VOIDinit(var6);
        thisRef.impulse = var6;
        return;
    },

    VOIDinitINTINTINTojcContactListener : function(thisRef,bodyCapacity,contactCapacity,jointCapacity,listener) {
        var var47 = null; // type is REFERENCE # of inits = 2
        var local_6_INT = null; // type is INT # of inits = 6
        var var25 = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            thisRef.m_bodyCapacity = bodyCapacity;
            thisRef.m_contactCapacity = contactCapacity;
            thisRef.m_jointCapacity = jointCapacity;
            thisRef.m_bodyCount = 0;
            thisRef.m_contactCount = 0;
            thisRef.m_jointCount = 0;
            thisRef.m_listener = listener;
            var var0 = thisRef.m_bodies; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@110b925d
            if (var0 == null ) {
                __label__ = 55;
                break $S_0;
            }
            __label__ = 43;
            }
        $M_43_55 : for(;;) switch (__label__) {
            case 55 :
            // NORMAL
                var var5 = bytecoder.newArray(thisRef.m_bodyCapacity,null); // type is REFERENCE value type is REFERENCE
                thisRef.m_bodies = var5;
                break $M_43_55;
            case 43 :
            // NORMAL
                var var1 = thisRef.m_bodyCapacity; // type is INT value type is INT
                var var3 = thisRef.m_bodies.data.length; // type is INT value type is INT
                if ((var1 <= var3)) {
                    break $M_43_55;
                }
                __label__ = 55;
                continue $M_43_55;
        }
        $S_66 : {
        // NORMAL
            var var6 = thisRef.m_joints; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1c64799b
            if (var6 == null ) {
                __label__ = 85;
                break $S_66;
            }
            __label__ = 73;
            }
        $M_85_73 : for(;;) switch (__label__) {
            case 73 :
            // NORMAL
                var var7 = thisRef.m_jointCapacity; // type is INT value type is INT
                var var9 = thisRef.m_joints.data.length; // type is INT value type is INT
                if ((var7 <= var9)) {
                    break $M_85_73;
                }
                __label__ = 85;
                continue $M_85_73;
            case 85 :
            // NORMAL
                var var11 = bytecoder.newArray(thisRef.m_jointCapacity,null); // type is REFERENCE value type is REFERENCE
                thisRef.m_joints = var11;
                break $M_85_73;
        }
        $S_96 : {
        // NORMAL
            var var12 = thisRef.m_contacts; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3c4dba40
            if (var12 == null ) {
                __label__ = 115;
                break $S_96;
            }
            __label__ = 103;
            }
        $M_115_103 : for(;;) switch (__label__) {
            case 103 :
            // NORMAL
                var var13 = thisRef.m_contactCapacity; // type is INT value type is INT
                var var15 = thisRef.m_contacts.data.length; // type is INT value type is INT
                if ((var13 <= var15)) {
                    break $M_115_103;
                }
                __label__ = 115;
                continue $M_115_103;
            case 115 :
            // NORMAL
                var var17 = bytecoder.newArray(thisRef.m_contactCapacity,null); // type is REFERENCE value type is REFERENCE
                thisRef.m_contacts = var17;
                break $M_115_103;
        }
        $S_126 : {
        // NORMAL
            var var18 = thisRef.m_velocities; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@7d884688
            if (var18 == null ) {
                __label__ = 145;
                break $S_126;
            }
            __label__ = 133;
            }
        $M_145_133 : for(;;) switch (__label__) {
            case 145 :
            // NORMAL
                $S_145 : {
                // NORMAL
                    var var22 = thisRef.m_velocities; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@305caa1e
                    if (var22 != null ) {
                        __label__ = 159;
                        break $S_145;
                    }
                    __label__ = 152;
                    }
                $M_159_152 : for(;;) switch (__label__) {
                    case 159 :
                    // NORMAL
                        var25 = thisRef.m_velocities; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@f4ba52f
                        break $M_159_152;
                    case 152 :
                    // NORMAL
                        var25 = bytecoder.newArray(0,null); // type is REFERENCE value type is REFERENCE
                        break $M_159_152;
                }
                $S_163 : {
                // NORMAL
                    var local_5_REFERENCE = var25; // type is REFERENCE value type is REFERENCE
                    var var28 = bytecoder.newArray(thisRef.m_bodyCapacity,null); // type is REFERENCE value type is REFERENCE
                    thisRef.m_velocities = var28;
                    jlSystem.VOIDarraycopyjlObjectINTjlObjectINTINT(local_5_REFERENCE,0,thisRef.m_velocities,0,local_5_REFERENCE.data.length);
                    local_6_INT = local_5_REFERENCE.data.length; // type is INT value type is INT
                    __label__ = 195;
                    }
                $L_195 : for (;;) {
                    $S_195 : {
                    // NORMAL
                        var var37 = local_6_INT; // type is INT value type is INT
                        var var39 = thisRef.m_velocities.data.length; // type is INT value type is INT
                        if ((var37 >= var39)) {
                            break $M_145_133;
                        }
                        }
                    var var63 = thisRef.m_velocities; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@5e85913c
                    var var64 = local_6_INT; // type is INT value type is INT
                    var var65 = new ojdcVelocity.Create(); // type is REFERENCE value type is REFERENCE
                    ojdcVelocity.VOIDinit(var65);
                    var63.data[var64] = var65;
                    local_6_INT = (local_6_INT + 1); // type is INT value type is INT
                    __label__ = 195;
                    continue $L_195;
                }
            case 133 :
            // NORMAL
                var var19 = thisRef.m_bodyCapacity; // type is INT value type is INT
                var var21 = thisRef.m_velocities.data.length; // type is INT value type is INT
                if ((var19 <= var21)) {
                    break $M_145_133;
                }
                __label__ = 145;
                continue $M_145_133;
        }
        $S_225 : {
        // NORMAL
            var var40 = thisRef.m_positions; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@34df7a06
            if (var40 == null ) {
                __label__ = 244;
                break $S_225;
            }
            __label__ = 232;
            }
        $M_232_244 : for(;;) switch (__label__) {
            case 232 :
            // NORMAL
                var var41 = thisRef.m_bodyCapacity; // type is INT value type is INT
                var var43 = thisRef.m_positions.data.length; // type is INT value type is INT
                if ((var41 <= var43)) {
                    return;
                }
                __label__ = 244;
                continue $M_232_244;
            case 244 :
            // NORMAL
                $S_244 : {
                // NORMAL
                    var var44 = thisRef.m_positions; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@666fc36f
                    if (var44 != null ) {
                        __label__ = 258;
                        break $S_244;
                    }
                    __label__ = 251;
                    }
                $M_258_251 : for(;;) switch (__label__) {
                    case 258 :
                    // NORMAL
                        var47 = thisRef.m_positions; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1491a2ef
                        break $M_258_251;
                    case 251 :
                    // NORMAL
                        var47 = bytecoder.newArray(0,null); // type is REFERENCE value type is REFERENCE
                        break $M_258_251;
                }
                $S_262 : {
                // NORMAL
                    var local_5_REFERENCE = var47; // type is REFERENCE value type is REFERENCE
                    var var49 = bytecoder.newArray(thisRef.m_bodyCapacity,null); // type is REFERENCE value type is REFERENCE
                    thisRef.m_positions = var49;
                    jlSystem.VOIDarraycopyjlObjectINTjlObjectINTINT(local_5_REFERENCE,0,thisRef.m_positions,0,local_5_REFERENCE.data.length);
                    local_6_INT = local_5_REFERENCE.data.length; // type is INT value type is INT
                    __label__ = 294;
                    }
                $L_294 : for (;;) {
                    $S_294 : {
                    // NORMAL
                        var var57 = local_6_INT; // type is INT value type is INT
                        var var59 = thisRef.m_positions.data.length; // type is INT value type is INT
                        if ((var57 >= var59)) {
                            return;
                        }
                        }
                    var var60 = thisRef.m_positions; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@44c4053f
                    var var61 = local_6_INT; // type is INT value type is INT
                    var var62 = new ojdcPosition.Create(); // type is REFERENCE value type is REFERENCE
                    ojdcPosition.VOIDinit(var62);
                    var60.data[var61] = var62;
                    local_6_INT = (local_6_INT + 1); // type is INT value type is INT
                    __label__ = 294;
                    continue $L_294;
                }
        }
    },

    VOIDclear : function(thisRef) {
        var __label__ = null;
        thisRef.m_bodyCount = 0;
        thisRef.m_contactCount = 0;
        thisRef.m_jointCount = 0;
        return;
    },

    VOIDaddojdBody : function(thisRef,body) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdIsland.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 25;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_25_6 : for(;;) switch (__label__) {
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    var var1 = thisRef.m_bodyCount; // type is INT value type is INT
                    var var2 = thisRef.m_bodyCapacity; // type is INT value type is INT
                    if ((var1 < var2)) {
                        __label__ = 25;
                        continue $M_25_6;
                    }
                    }
                var var8 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var8);
                throw var8;
            case 25 :
            // NORMAL
                var var3 = thisRef.m_bodyCount; // type is INT value type is INT
                body.m_islandIndex = var3;
                var var4 = thisRef.m_bodies; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@762d8228
                var var5 = thisRef.m_bodyCount; // type is INT value type is INT
                var4.data[var5] = body;
                var var7 = (thisRef.m_bodyCount + 1); // type is INT value type is INT
                thisRef.m_bodyCount = var7;
                return;
        }
    },

    VOIDaddojdcContact : function(thisRef,contact) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdIsland.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 25;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_25_6 : for(;;) switch (__label__) {
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    var var1 = thisRef.m_contactCount; // type is INT value type is INT
                    var var2 = thisRef.m_contactCapacity; // type is INT value type is INT
                    if ((var1 < var2)) {
                        __label__ = 25;
                        continue $M_25_6;
                    }
                    }
                var var3 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var3);
                throw var3;
            case 25 :
            // NORMAL
                var var4 = thisRef.m_contacts; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@11de0eb
                var var5 = thisRef.m_contactCount; // type is INT value type is INT
                var var6 = (var5 + 1); // type is INT value type is INT
                thisRef.m_contactCount = var6;
                var4.data[var5] = contact;
                return;
        }
    },

    VOIDaddojdjJoint : function(thisRef,joint) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdIsland.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 25;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_25_6 : for(;;) switch (__label__) {
            case 25 :
            // NORMAL
                var var3 = thisRef.m_joints; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@7cbb9e52
                var var4 = thisRef.m_jointCount; // type is INT value type is INT
                var var5 = (var4 + 1); // type is INT value type is INT
                thisRef.m_jointCount = var5;
                var3.data[var4] = joint;
                return;
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    var var1 = thisRef.m_jointCount; // type is INT value type is INT
                    var var2 = thisRef.m_jointCapacity; // type is INT value type is INT
                    if ((var1 < var2)) {
                        __label__ = 25;
                        continue $M_25_6;
                    }
                    }
                var var6 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var6);
                throw var6;
        }
    },

    VOIDsolveojdProfileojdTimeStepojcVec2BOOLEAN : function(thisRef,profile,step,gravity,allowSleep) {
        var local_7_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_11_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_5_FLOAT = null; // type is FLOAT # of inits = 9
        var local_7_INT = null; // type is INT # of inits = 10
        var local_8_FLOAT = null; // type is FLOAT # of inits = 3
        var local_11_BOOLEAN = null; // type is BOOLEAN # of inits = 1
        var local_9_FLOAT = null; // type is FLOAT # of inits = 2
        var local_12_FLOAT = null; // type is FLOAT # of inits = 2
        var local_10_FLOAT = null; // type is FLOAT # of inits = 2
        var local_13_FLOAT = null; // type is FLOAT # of inits = 2
        var local_8_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_9_INT = null; // type is INT # of inits = 3
        var local_10_INT = null; // type is INT # of inits = 9
        var local_11_FLOAT = null; // type is FLOAT # of inits = 4
        var local_8_BOOLEAN = null; // type is BOOLEAN # of inits = 2
        var var71 = null; // type is INT # of inits = 2
        var local_7_FLOAT = null; // type is FLOAT # of inits = 4
        var local_10_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_6_INT = null; // type is INT # of inits = 18
        var local_9_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_5_FLOAT = step.dt; // type is FLOAT value type is FLOAT
            local_6_INT = 0; // type is INT value type is INT
            __label__ = 9;
            }
        $L_9 : for (;;) {
            $S_9 : {
            // NORMAL
                var var5 = local_6_INT; // type is INT value type is INT
                var var6 = thisRef.m_bodyCount; // type is INT value type is INT
                if ((var5 >= var6)) {
                    __label__ = 366;
                    break $S_9;
                }
                __label__ = 18;
                }
            for(;;) switch (__label__) {
                case 18 :
                // NORMAL
                    $S_18 : {
                    // NORMAL
                        var var100 = thisRef.m_bodies.data[local_6_INT]; // type is REFERENCE value type is REFERENCE
                        local_7_REFERENCE = var100; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@97178e1
                        local_8_REFERENCE = local_7_REFERENCE.m_sweep.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@51c5facc
                        local_9_FLOAT = local_7_REFERENCE.m_sweep.a; // type is FLOAT value type is FLOAT
                        local_10_REFERENCE = local_7_REFERENCE.m_linearVelocity; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@752797f4
                        local_11_FLOAT = local_7_REFERENCE.m_angularVelocity; // type is FLOAT value type is FLOAT
                        var var123 = local_7_REFERENCE.m_sweep.c0.ojcVec2setojcVec2(local_7_REFERENCE.m_sweep.c0,local_7_REFERENCE.m_sweep.c); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7587b393
                        var var125 = local_7_REFERENCE.m_sweep; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@552dc8b7
                        var var128 = local_7_REFERENCE.m_sweep.a; // type is FLOAT value type is FLOAT
                        var125.a0 = var128;
                        var var130 = local_7_REFERENCE.m_type; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2bc05b44
                        var var131 = ojdBodyType.DYNAMIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6211f1ff
                        if ((var130 != var131)) {
                            __label__ = 264;
                            break $S_18;
                        }
                        __label__ = 108;
                        }
                    $M_264_108 : for(;;) switch (__label__) {
                        case 108 :
                        // NORMAL
                            var var132 = local_10_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2338ae92
                            var var147 = (var132.x + (local_5_FLOAT * ((local_7_REFERENCE.m_gravityScale * gravity.x) + (local_7_REFERENCE.m_invMass * local_7_REFERENCE.m_force.x)))); // type is FLOAT value type is FLOAT
                            var132.x = var147;
                            var var148 = local_10_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2338ae92
                            var var163 = (var148.y + (local_5_FLOAT * ((local_7_REFERENCE.m_gravityScale * gravity.y) + (local_7_REFERENCE.m_invMass * local_7_REFERENCE.m_force.y)))); // type is FLOAT value type is FLOAT
                            var148.y = var163;
                            local_11_FLOAT = (local_11_FLOAT + ((local_5_FLOAT * local_7_REFERENCE.m_invI) * local_7_REFERENCE.m_torque)); // type is FLOAT value type is FLOAT
                            var var179 = ojcMathUtils.FLOATclampFLOATFLOATFLOAT((1.0 - (local_5_FLOAT * local_7_REFERENCE.m_linearDamping)),0.0,1.0); // type is FLOAT value type is FLOAT
                            local_12_FLOAT = var179; // type is FLOAT value type is FLOAT
                            var var182 = local_10_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2338ae92
                            var var185 = (var182.x * local_12_FLOAT); // type is FLOAT value type is FLOAT
                            var182.x = var185;
                            var var186 = local_10_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2338ae92
                            var var189 = (var186.y * local_12_FLOAT); // type is FLOAT value type is FLOAT
                            var186.y = var189;
                            var var190 = local_11_FLOAT; // type is FLOAT value type is FLOAT
                            var var196 = ojcMathUtils.FLOATclampFLOATFLOATFLOAT((1.0 - (local_5_FLOAT * local_7_REFERENCE.m_angularDamping)),0.0,1.0); // type is FLOAT value type is FLOAT
                            local_11_FLOAT = (var190 * var196); // type is FLOAT value type is FLOAT
                            __label__ = 264;
                            continue $M_264_108;
                        case 264 :
                        // NORMAL
                            var var201 = thisRef.m_positions.data[local_6_INT]; // type is REFERENCE value type is REFERENCE
                            var var202 = var201.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2a42cd05
                            var var204 = local_8_REFERENCE.x; // type is FLOAT value type is FLOAT
                            var202.x = var204;
                            var var207 = thisRef.m_positions.data[local_6_INT]; // type is REFERENCE value type is REFERENCE
                            var var208 = var207.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1191d08a
                            var var210 = local_8_REFERENCE.y; // type is FLOAT value type is FLOAT
                            var208.y = var210;
                            var var213 = thisRef.m_positions.data[local_6_INT]; // type is REFERENCE value type is REFERENCE
                            var var214 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                            var213.a = var214;
                            var var217 = thisRef.m_velocities.data[local_6_INT]; // type is REFERENCE value type is REFERENCE
                            var var218 = var217.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@38a2a387
                            var var220 = local_10_REFERENCE.x; // type is FLOAT value type is FLOAT
                            var218.x = var220;
                            var var223 = thisRef.m_velocities.data[local_6_INT]; // type is REFERENCE value type is REFERENCE
                            var var224 = var223.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@55d12365
                            var var226 = local_10_REFERENCE.y; // type is FLOAT value type is FLOAT
                            var224.y = var226;
                            var var229 = thisRef.m_velocities.data[local_6_INT]; // type is REFERENCE value type is REFERENCE
                            var var230 = local_11_FLOAT; // type is FLOAT value type is FLOAT
                            var229.w = var230;
                            local_6_INT = (local_6_INT + 1); // type is INT value type is INT
                            __label__ = 9;
                            continue $L_9;
                    }
                case 366 :
                // NORMAL
                    $S_366 : {
                    // NORMAL
                        thisRef.timer.VOIDreset(thisRef.timer);
                        var var8 = thisRef.solverData; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@69c7e63f
                        var8.step = step;
                        var var9 = thisRef.solverData; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@76cd7e0d
                        var var10 = thisRef.m_positions; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@5bde55c8
                        var9.positions = var10;
                        var var11 = thisRef.solverData; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7c88fdd
                        var var12 = thisRef.m_velocities; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@51686705
                        var11.velocities = var12;
                        var var13 = thisRef.solverDef; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4c484633
                        var13.step = step;
                        var var14 = thisRef.solverDef; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@65112a67
                        var var15 = thisRef.m_contacts; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@26e4f77f
                        var14.contacts = var15;
                        var var16 = thisRef.solverDef; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@34a6ece9
                        var var17 = thisRef.m_contactCount; // type is INT value type is INT
                        var16.count = var17;
                        var var18 = thisRef.solverDef; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3ad14d90
                        var var19 = thisRef.m_positions; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@567f1abf
                        var18.positions = var19;
                        var var20 = thisRef.solverDef; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@57215000
                        var var21 = thisRef.m_velocities; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@54e32fa9
                        var20.velocities = var21;
                        thisRef.contactSolver.VOIDinitojdcContactSolver$ContactSolverDef(thisRef.contactSolver,thisRef.solverDef);
                        thisRef.contactSolver.VOIDinitializeVelocityConstraints(thisRef.contactSolver);
                        var var25 = step.warmStarting; // type is BOOLEAN value type is BOOLEAN
                        if ((var25 == 0)) {
                            __label__ = 487;
                            break $S_366;
                        }
                        __label__ = 480;
                        }
                    $M_487_480 : for(;;) switch (__label__) {
                        case 480 :
                        // NORMAL
                            thisRef.contactSolver.VOIDwarmStart(thisRef.contactSolver);
                            __label__ = 487;
                            continue $M_487_480;
                        case 487 :
                        // NORMAL
                            $S_487 : {
                            // NORMAL
                                local_6_INT = 0; // type is INT value type is INT
                                __label__ = 490;
                                }
                            $L_490 : for (;;) {
                                $S_490 : {
                                // NORMAL
                                    var var28 = local_6_INT; // type is INT value type is INT
                                    var var29 = thisRef.m_jointCount; // type is INT value type is INT
                                    if ((var28 >= var29)) {
                                        __label__ = 519;
                                        break $S_490;
                                    }
                                    __label__ = 499;
                                    }
                                for(;;) switch (__label__) {
                                    case 499 :
                                    // NORMAL
                                        var var282 = thisRef.m_joints.data[local_6_INT]; // type is REFERENCE value type is REFERENCE
                                        var282.VOIDinitVelocityConstraintsojdSolverData(var282,thisRef.solverData);
                                        local_6_INT = (local_6_INT + 1); // type is INT value type is INT
                                        __label__ = 490;
                                        continue $L_490;
                                    case 519 :
                                    // NORMAL
                                        $S_519 : {
                                        // NORMAL
                                            var var31 = thisRef.timer.FLOATgetMilliseconds(thisRef.timer); // type is FLOAT value type is FLOAT
                                            profile.solveInit = var31;
                                            thisRef.timer.VOIDreset(thisRef.timer);
                                            local_6_INT = 0; // type is INT value type is INT
                                            __label__ = 540;
                                            }
                                        $L_540 : for (;;) {
                                            $S_540 : {
                                            // NORMAL
                                                var var34 = local_6_INT; // type is INT value type is INT
                                                var var35 = step.velocityIterations; // type is INT value type is INT
                                                if ((var34 >= var35)) {
                                                    __label__ = 594;
                                                    break $S_540;
                                                }
                                                __label__ = 549;
                                                }
                                            for(;;) switch (__label__) {
                                                case 594 :
                                                // NORMAL
                                                    $S_594 : {
                                                    // NORMAL
                                                        thisRef.contactSolver.VOIDstoreImpulses(thisRef.contactSolver);
                                                        var var43 = thisRef.timer.FLOATgetMilliseconds(thisRef.timer); // type is FLOAT value type is FLOAT
                                                        profile.solveVelocity = var43;
                                                        local_6_INT = 0; // type is INT value type is INT
                                                        __label__ = 615;
                                                        }
                                                    $L_615 : for (;;) {
                                                        $S_615 : {
                                                        // NORMAL
                                                            var var45 = local_6_INT; // type is INT value type is INT
                                                            var var46 = thisRef.m_bodyCount; // type is INT value type is INT
                                                            if ((var45 >= var46)) {
                                                                __label__ = 863;
                                                                break $S_615;
                                                            }
                                                            __label__ = 624;
                                                            }
                                                        for(;;) switch (__label__) {
                                                            case 863 :
                                                            // NORMAL
                                                                $S_863 : {
                                                                // NORMAL
                                                                    thisRef.timer.VOIDreset(thisRef.timer);
                                                                    local_6_INT = 0; // type is INT value type is INT
                                                                    local_7_INT = 0; // type is INT value type is INT
                                                                    __label__ = 876;
                                                                    }
                                                                $L_876 : for (;;) {
                                                                    $S_876 : {
                                                                    // NORMAL
                                                                        var var50 = local_7_INT; // type is INT value type is INT
                                                                        var var51 = step.positionIterations; // type is INT value type is INT
                                                                        if ((var50 >= var51)) {
                                                                            __label__ = 970;
                                                                            break $S_876;
                                                                        }
                                                                        __label__ = 885;
                                                                        }
                                                                    $M_970_885 : for(;;) switch (__label__) {
                                                                        case 970 :
                                                                        // NORMAL
                                                                            $S_970 : {
                                                                            // NORMAL
                                                                                local_7_INT = 0; // type is INT value type is INT
                                                                                __label__ = 973;
                                                                                }
                                                                            $L_973 : for (;;) {
                                                                                $S_973 : {
                                                                                // NORMAL
                                                                                    var var77 = local_7_INT; // type is INT value type is INT
                                                                                    var var78 = thisRef.m_bodyCount; // type is INT value type is INT
                                                                                    if ((var77 >= var78)) {
                                                                                        __label__ = 1125;
                                                                                        break $S_973;
                                                                                    }
                                                                                    __label__ = 982;
                                                                                    }
                                                                                for(;;) switch (__label__) {
                                                                                    case 1125 :
                                                                                    // NORMAL
                                                                                        $S_1125 : {
                                                                                        // NORMAL
                                                                                            var var80 = thisRef.timer.FLOATgetMilliseconds(thisRef.timer); // type is FLOAT value type is FLOAT
                                                                                            profile.solvePosition = var80;
                                                                                            thisRef.VOIDreportA1ojdcContactVelocityConstraint(thisRef,thisRef.contactSolver.m_velocityConstraints);
                                                                                            if ((allowSleep == 0)) {
                                                                                                return;
                                                                                            }
                                                                                            }
                                                                                        $S_1152 : {
                                                                                        // NORMAL
                                                                                            local_7_FLOAT = 3.4028235E38; // type is FLOAT value type is FLOAT
                                                                                            local_8_FLOAT = 1.0E-4; // type is FLOAT value type is FLOAT
                                                                                            local_9_FLOAT = 0.0012184699; // type is FLOAT value type is FLOAT
                                                                                            local_10_INT = 0; // type is INT value type is INT
                                                                                            __label__ = 1167;
                                                                                            }
                                                                                        $L_1167 : for (;;) {
                                                                                            $S_1167 : {
                                                                                            // NORMAL
                                                                                                var var90 = local_10_INT; // type is INT value type is INT
                                                                                                var var91 = thisRef.m_bodyCount; // type is INT value type is INT
                                                                                                if ((var90 >= var91)) {
                                                                                                    __label__ = 1287;
                                                                                                    break $S_1167;
                                                                                                }
                                                                                                __label__ = 1176;
                                                                                                }
                                                                                            for(;;) switch (__label__) {
                                                                                                case 1287 :
                                                                                                // NORMAL
                                                                                                    $S_1287 : {
                                                                                                    // NORMAL
                                                                                                        var var92 = local_7_FLOAT; // type is FLOAT value type is FLOAT
                                                                                                        if ((var92 < 0.5)) {
                                                                                                            return;
                                                                                                        }
                                                                                                        }
                                                                                                    $S_1295 : {
                                                                                                    // NORMAL
                                                                                                        var var94 = local_6_INT; // type is INT value type is INT
                                                                                                        if ((var94 == 0)) {
                                                                                                            return;
                                                                                                        }
                                                                                                        }
                                                                                                    $S_1300 : {
                                                                                                    // NORMAL
                                                                                                        local_10_INT = 0; // type is INT value type is INT
                                                                                                        __label__ = 1303;
                                                                                                        }
                                                                                                    $L_1303 : for (;;) {
                                                                                                        $S_1303 : {
                                                                                                        // NORMAL
                                                                                                            var var96 = local_10_INT; // type is INT value type is INT
                                                                                                            var var97 = thisRef.m_bodyCount; // type is INT value type is INT
                                                                                                            if ((var96 >= var97)) {
                                                                                                                return;
                                                                                                            }
                                                                                                            }
                                                                                                        var var389 = thisRef.m_bodies.data[local_10_INT]; // type is REFERENCE value type is REFERENCE
                                                                                                        local_11_REFERENCE = var389; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3334009a
                                                                                                        local_11_REFERENCE.VOIDsetAwakeBOOLEAN(local_11_REFERENCE,0);
                                                                                                        local_10_INT = (local_10_INT + 1); // type is INT value type is INT
                                                                                                        __label__ = 1303;
                                                                                                        continue $L_1303;
                                                                                                    }
                                                                                                case 1176 :
                                                                                                // NORMAL
                                                                                                    $S_1176 : {
                                                                                                    // NORMAL
                                                                                                        var var394 = thisRef.m_bodies.data[local_10_INT]; // type is REFERENCE value type is REFERENCE
                                                                                                        local_11_REFERENCE = var394; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@22352efe
                                                                                                        var var396 = local_11_REFERENCE.ojdBodyTypegetType(local_11_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@64ee4568
                                                                                                        var var397 = ojdBodyType.STATIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4a6a01a8
                                                                                                        if ((var396 != var397)) {
                                                                                                            __label__ = 1199;
                                                                                                            break $S_1176;
                                                                                                        }
                                                                                                        __label__ = 1196;
                                                                                                        }
                                                                                                    $M_1196_1199 : for(;;) switch (__label__) {
                                                                                                        case 1196 :
                                                                                                        // NORMAL
                                                                                                            break $M_1196_1199;
                                                                                                        case 1199 :
                                                                                                        // NORMAL
                                                                                                            $S_1199 : {
                                                                                                            // NORMAL
                                                                                                                var var400 = (local_11_REFERENCE.m_flags & 4); // type is INT value type is INT
                                                                                                                if ((var400 == 0)) {
                                                                                                                    __label__ = 1245;
                                                                                                                    break $S_1199;
                                                                                                                }
                                                                                                                __label__ = 1209;
                                                                                                                }
                                                                                                            $M_1209_1245 : for(;;) switch (__label__) {
                                                                                                                case 1209 :
                                                                                                                // NORMAL
                                                                                                                    $S_1209 : {
                                                                                                                    // NORMAL
                                                                                                                        var var405 = (local_11_REFERENCE.m_angularVelocity * local_11_REFERENCE.m_angularVelocity); // type is FLOAT value type is FLOAT
                                                                                                                        if ((var405 > 0.0012184699)) {
                                                                                                                            __label__ = 1245;
                                                                                                                            continue $M_1209_1245;
                                                                                                                        }
                                                                                                                        }
                                                                                                                    $S_1226 : {
                                                                                                                    // NORMAL
                                                                                                                        var var411 = ojcVec2.FLOATdotojcVec2ojcVec2(local_11_REFERENCE.m_linearVelocity,local_11_REFERENCE.m_linearVelocity); // type is FLOAT value type is FLOAT
                                                                                                                        if ((var411 <= 1.0E-4)) {
                                                                                                                            break $S_1226;
                                                                                                                        }
                                                                                                                        __label__ = 1245;
                                                                                                                        continue $M_1209_1245;
                                                                                                                        }
                                                                                                                    var var413 = local_11_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3334009a
                                                                                                                    var var416 = (var413.m_sleepTime + local_5_FLOAT); // type is FLOAT value type is FLOAT
                                                                                                                    var413.m_sleepTime = var416;
                                                                                                                    var var420 = ojcMathUtils.FLOATminFLOATFLOAT(local_7_FLOAT,local_11_REFERENCE.m_sleepTime); // type is FLOAT value type is FLOAT
                                                                                                                    local_7_FLOAT = var420; // type is FLOAT value type is FLOAT
                                                                                                                    break $M_1196_1199;
                                                                                                                case 1245 :
                                                                                                                // NORMAL
                                                                                                                    var var422 = local_11_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3334009a
                                                                                                                    var422.m_sleepTime = 0.0;
                                                                                                                    local_7_FLOAT = 0.0; // type is FLOAT value type is FLOAT
                                                                                                                    break $M_1196_1199;
                                                                                                            }
                                                                                                    }
                                                                                                    local_10_INT = (local_10_INT + 1); // type is INT value type is INT
                                                                                                    __label__ = 1167;
                                                                                                    continue $L_1167;
                                                                                            }
                                                                                        }
                                                                                    case 982 :
                                                                                    // NORMAL
                                                                                        var var237 = thisRef.m_bodies.data[local_7_INT]; // type is REFERENCE value type is REFERENCE
                                                                                        local_8_REFERENCE = var237; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@758d1b12
                                                                                        var var240 = local_8_REFERENCE.m_sweep.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1716f9b5
                                                                                        var var243 = thisRef.m_positions.data[local_7_INT]; // type is REFERENCE value type is REFERENCE
                                                                                        var var245 = var243.c.x; // type is FLOAT value type is FLOAT
                                                                                        var240.x = var245;
                                                                                        var var248 = local_8_REFERENCE.m_sweep.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5a451299
                                                                                        var var251 = thisRef.m_positions.data[local_7_INT]; // type is REFERENCE value type is REFERENCE
                                                                                        var var253 = var251.c.y; // type is FLOAT value type is FLOAT
                                                                                        var248.y = var253;
                                                                                        var var255 = local_8_REFERENCE.m_sweep; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4c96d9bc
                                                                                        var var258 = thisRef.m_positions.data[local_7_INT]; // type is REFERENCE value type is REFERENCE
                                                                                        var var259 = var258.a; // type is FLOAT value type is FLOAT
                                                                                        var255.a = var259;
                                                                                        var var261 = local_8_REFERENCE.m_linearVelocity; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@56ebf6c7
                                                                                        var var264 = thisRef.m_velocities.data[local_7_INT]; // type is REFERENCE value type is REFERENCE
                                                                                        var var266 = var264.v.x; // type is FLOAT value type is FLOAT
                                                                                        var261.x = var266;
                                                                                        var var268 = local_8_REFERENCE.m_linearVelocity; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@761076fe
                                                                                        var var271 = thisRef.m_velocities.data[local_7_INT]; // type is REFERENCE value type is REFERENCE
                                                                                        var var273 = var271.v.y; // type is FLOAT value type is FLOAT
                                                                                        var268.y = var273;
                                                                                        var var274 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7c89a231
                                                                                        var var277 = thisRef.m_velocities.data[local_7_INT]; // type is REFERENCE value type is REFERENCE
                                                                                        var var278 = var277.w; // type is FLOAT value type is FLOAT
                                                                                        var274.m_angularVelocity = var278;
                                                                                        local_8_REFERENCE.VOIDsynchronizeTransform(local_8_REFERENCE);
                                                                                        local_7_INT = (local_7_INT + 1); // type is INT value type is INT
                                                                                        __label__ = 973;
                                                                                        continue $L_973;
                                                                                }
                                                                            }
                                                                        case 885 :
                                                                        // NORMAL
                                                                            $S_885 : {
                                                                            // NORMAL
                                                                                var var53 = thisRef.contactSolver.BOOLEANsolvePositionConstraints(thisRef.contactSolver); // type is BOOLEAN value type is BOOLEAN
                                                                                local_8_BOOLEAN = var53; // type is BOOLEAN value type is BOOLEAN
                                                                                local_9_INT = 1; // type is INT value type is INT
                                                                                local_10_INT = 0; // type is INT value type is INT
                                                                                __label__ = 900;
                                                                                }
                                                                            $L_900 : for (;;) {
                                                                                $S_900 : {
                                                                                // NORMAL
                                                                                    var var60 = local_10_INT; // type is INT value type is INT
                                                                                    var var61 = thisRef.m_jointCount; // type is INT value type is INT
                                                                                    if ((var60 >= var61)) {
                                                                                        __label__ = 948;
                                                                                        break $S_900;
                                                                                    }
                                                                                    __label__ = 909;
                                                                                    }
                                                                                for(;;) switch (__label__) {
                                                                                    case 948 :
                                                                                    // NORMAL
                                                                                        $S_948 : {
                                                                                        // NORMAL
                                                                                            var var73 = local_8_BOOLEAN; // type is BOOLEAN value type is BOOLEAN
                                                                                            if ((var73 == 0)) {
                                                                                                __label__ = 964;
                                                                                                break $S_948;
                                                                                            }
                                                                                            __label__ = 953;
                                                                                            }
                                                                                        $M_964_953 : for(;;) switch (__label__) {
                                                                                            case 964 :
                                                                                            // NORMAL
                                                                                                local_7_INT = (local_7_INT + 1); // type is INT value type is INT
                                                                                                __label__ = 876;
                                                                                                continue $L_876;
                                                                                            case 953 :
                                                                                            // NORMAL
                                                                                                $S_953 : {
                                                                                                // NORMAL
                                                                                                    var var74 = local_9_INT; // type is INT value type is INT
                                                                                                    if ((var74 == 0)) {
                                                                                                        __label__ = 964;
                                                                                                        continue $M_964_953;
                                                                                                    }
                                                                                                    }
                                                                                                local_6_INT = 1; // type is INT value type is INT
                                                                                                __label__ = 970;
                                                                                                continue $M_970_885;
                                                                                        }
                                                                                    case 909 :
                                                                                    // NORMAL
                                                                                        $S_909 : {
                                                                                        // NORMAL
                                                                                            var var64 = thisRef.m_joints.data[local_10_INT]; // type is REFERENCE value type is REFERENCE
                                                                                            var var66 = var64.BOOLEANsolvePositionConstraintsojdSolverData(var64,thisRef.solverData); // type is BOOLEAN value type is BOOLEAN
                                                                                            local_11_BOOLEAN = var66; // type is BOOLEAN value type is BOOLEAN
                                                                                            var var69 = local_9_INT; // type is INT value type is INT
                                                                                            if ((var69 == 0)) {
                                                                                                __label__ = 939;
                                                                                                break $S_909;
                                                                                            }
                                                                                            __label__ = 930;
                                                                                            }
                                                                                        $M_930_939 : for(;;) switch (__label__) {
                                                                                            case 939 :
                                                                                            // NORMAL
                                                                                                var71 = 0; // type is INT value type is INT
                                                                                                break $M_930_939;
                                                                                            case 930 :
                                                                                            // NORMAL
                                                                                                $S_930 : {
                                                                                                // NORMAL
                                                                                                    var var70 = local_11_BOOLEAN; // type is BOOLEAN value type is BOOLEAN
                                                                                                    if ((var70 == 0)) {
                                                                                                        __label__ = 939;
                                                                                                        continue $M_930_939;
                                                                                                    }
                                                                                                    }
                                                                                                var71 = 1; // type is INT value type is INT
                                                                                                break $M_930_939;
                                                                                        }
                                                                                        local_9_INT = var71; // type is INT value type is INT
                                                                                        local_10_INT = (local_10_INT + 1); // type is INT value type is INT
                                                                                        __label__ = 900;
                                                                                        continue $L_900;
                                                                                }
                                                                            }
                                                                    }
                                                                }
                                                            case 624 :
                                                            // NORMAL
                                                                $S_624 : {
                                                                // NORMAL
                                                                    var var286 = thisRef.m_positions.data[local_6_INT]; // type is REFERENCE value type is REFERENCE
                                                                    local_7_REFERENCE = var286.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4b3737f
                                                                    var var290 = thisRef.m_positions.data[local_6_INT]; // type is REFERENCE value type is REFERENCE
                                                                    local_8_FLOAT = var290.a; // type is FLOAT value type is FLOAT
                                                                    var var295 = thisRef.m_velocities.data[local_6_INT]; // type is REFERENCE value type is REFERENCE
                                                                    local_9_REFERENCE = var295.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7e12116c
                                                                    var var300 = thisRef.m_velocities.data[local_6_INT]; // type is REFERENCE value type is REFERENCE
                                                                    local_10_FLOAT = var300.w; // type is FLOAT value type is FLOAT
                                                                    local_11_FLOAT = (local_9_REFERENCE.x * local_5_FLOAT); // type is FLOAT value type is FLOAT
                                                                    local_12_FLOAT = (local_9_REFERENCE.y * local_5_FLOAT); // type is FLOAT value type is FLOAT
                                                                    var var320 = ((local_11_FLOAT * local_11_FLOAT) + (local_12_FLOAT * local_12_FLOAT)); // type is FLOAT value type is FLOAT
                                                                    if ((var320 <= 4.0)) {
                                                                        __label__ = 751;
                                                                        break $S_624;
                                                                    }
                                                                    __label__ = 709;
                                                                    }
                                                                $M_709_751 : for(;;) switch (__label__) {
                                                                    case 751 :
                                                                    // NORMAL
                                                                        $S_751 : {
                                                                        // NORMAL
                                                                            local_13_FLOAT = (local_5_FLOAT * local_10_FLOAT); // type is FLOAT value type is FLOAT
                                                                            var var347 = (local_13_FLOAT * local_13_FLOAT); // type is FLOAT value type is FLOAT
                                                                            var var348 = ojcSettings.maxRotationSquared; // type is FLOAT value type is FLOAT
                                                                            if ((var347 <= var348)) {
                                                                                __label__ = 787;
                                                                                break $S_751;
                                                                            }
                                                                            __label__ = 770;
                                                                            }
                                                                        $M_770_787 : for(;;) switch (__label__) {
                                                                            case 787 :
                                                                            // NORMAL
                                                                                var var359 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@97178e1
                                                                                var var365 = (var359.x + (local_5_FLOAT * local_9_REFERENCE.x)); // type is FLOAT value type is FLOAT
                                                                                var359.x = var365;
                                                                                var var366 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@97178e1
                                                                                var var372 = (var366.y + (local_5_FLOAT * local_9_REFERENCE.y)); // type is FLOAT value type is FLOAT
                                                                                var366.y = var372;
                                                                                local_8_FLOAT = (local_8_FLOAT + (local_5_FLOAT * local_10_FLOAT)); // type is FLOAT value type is FLOAT
                                                                                var var381 = thisRef.m_positions.data[local_6_INT]; // type is REFERENCE value type is REFERENCE
                                                                                var var382 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                                                                                var381.a = var382;
                                                                                var var385 = thisRef.m_velocities.data[local_6_INT]; // type is REFERENCE value type is REFERENCE
                                                                                var var386 = local_10_FLOAT; // type is FLOAT value type is FLOAT
                                                                                var385.w = var386;
                                                                                local_6_INT = (local_6_INT + 1); // type is INT value type is INT
                                                                                __label__ = 615;
                                                                                continue $L_615;
                                                                            case 770 :
                                                                            // NORMAL
                                                                                var var351 = ojcMathUtils.FLOATabsFLOAT(local_13_FLOAT); // type is FLOAT value type is FLOAT
                                                                                var local_14_FLOAT = (1.5707964 / var351); // type is FLOAT value type is FLOAT
                                                                                local_10_FLOAT = (local_10_FLOAT * local_14_FLOAT); // type is FLOAT value type is FLOAT
                                                                                __label__ = 787;
                                                                                continue $M_770_787;
                                                                        }
                                                                    case 709 :
                                                                    // NORMAL
                                                                        var var329 = ojcMathUtils.FLOATsqrtFLOAT(((local_11_FLOAT * local_11_FLOAT) + (local_12_FLOAT * local_12_FLOAT))); // type is FLOAT value type is FLOAT
                                                                        local_13_FLOAT = (2.0 / var329); // type is FLOAT value type is FLOAT
                                                                        var var333 = local_9_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3f764f30
                                                                        var var336 = (var333.x * local_13_FLOAT); // type is FLOAT value type is FLOAT
                                                                        var333.x = var336;
                                                                        var var337 = local_9_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3f764f30
                                                                        var var340 = (var337.y * local_13_FLOAT); // type is FLOAT value type is FLOAT
                                                                        var337.y = var340;
                                                                        __label__ = 751;
                                                                        continue $M_709_751;
                                                                }
                                                        }
                                                    }
                                                case 549 :
                                                // NORMAL
                                                    $S_549 : {
                                                    // NORMAL
                                                        local_7_INT = 0; // type is INT value type is INT
                                                        __label__ = 552;
                                                        }
                                                    $L_552 : for (;;) {
                                                        $S_552 : {
                                                        // NORMAL
                                                            var var38 = local_7_INT; // type is INT value type is INT
                                                            var var39 = thisRef.m_jointCount; // type is INT value type is INT
                                                            if ((var38 >= var39)) {
                                                                __label__ = 581;
                                                                break $S_552;
                                                            }
                                                            __label__ = 561;
                                                            }
                                                        for(;;) switch (__label__) {
                                                            case 581 :
                                                            // NORMAL
                                                                thisRef.contactSolver.VOIDsolveVelocityConstraints(thisRef.contactSolver);
                                                                local_6_INT = (local_6_INT + 1); // type is INT value type is INT
                                                                __label__ = 540;
                                                                continue $L_540;
                                                            case 561 :
                                                            // NORMAL
                                                                var var233 = thisRef.m_joints.data[local_7_INT]; // type is REFERENCE value type is REFERENCE
                                                                var233.VOIDsolveVelocityConstraintsojdSolverData(var233,thisRef.solverData);
                                                                local_7_INT = (local_7_INT + 1); // type is INT value type is INT
                                                                __label__ = 552;
                                                                continue $L_552;
                                                        }
                                                    }
                                            }
                                        }
                                }
                            }
                    }
            }
        }
    },

    VOIDreportA1ojdcContactVelocityConstraint : function(thisRef,constraints) {
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_2_INT = null; // type is INT # of inits = 4
        var local_5_INT = null; // type is INT # of inits = 3
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.m_listener; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4b45dc08
            if (var0 != null ) {
                break $S_0;
            }
            return;
            }
        $S_8 : {
        // NORMAL
            local_2_INT = 0; // type is INT value type is INT
            __label__ = 10;
            }
        $L_10 : for (;;) {
            $S_10 : {
            // NORMAL
                var var3 = local_2_INT; // type is INT value type is INT
                var var4 = thisRef.m_contactCount; // type is INT value type is INT
                if ((var3 >= var4)) {
                    return;
                }
                }
            $S_18 : {
            // NORMAL
                var var7 = thisRef.m_contacts.data[local_2_INT]; // type is REFERENCE value type is REFERENCE
                local_3_REFERENCE = var7; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@28e2eeca
                var var10 = constraints.data[local_2_INT]; // type is REFERENCE value type is REFERENCE
                local_4_REFERENCE = var10; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@36b438cf
                var var12 = thisRef.impulse; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@703fc853
                var var14 = local_4_REFERENCE.pointCount; // type is INT value type is INT
                var12.count = var14;
                local_5_INT = 0; // type is INT value type is INT
                __label__ = 45;
                }
            $L_45 : for (;;) {
                $S_45 : {
                // NORMAL
                    var var17 = local_5_INT; // type is INT value type is INT
                    var var19 = local_4_REFERENCE.pointCount; // type is INT value type is INT
                    if ((var17 >= var19)) {
                        __label__ = 103;
                        break $S_45;
                    }
                    __label__ = 55;
                    }
                for(;;) switch (__label__) {
                    case 55 :
                    // NORMAL
                        var var24 = thisRef.impulse.normalImpulses; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@630408e3
                        var var25 = local_5_INT; // type is INT value type is INT
                        var var29 = local_4_REFERENCE.points.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                        var var30 = var29.normalImpulse; // type is FLOAT value type is FLOAT
                        var24.data[var25] = var30;
                        var var32 = thisRef.impulse.tangentImpulses; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@b0a61fa
                        var var33 = local_5_INT; // type is INT value type is INT
                        var var37 = local_4_REFERENCE.points.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                        var var38 = var37.tangentImpulse; // type is FLOAT value type is FLOAT
                        var32.data[var33] = var38;
                        local_5_INT = (local_5_INT + 1); // type is INT value type is INT
                        __label__ = 45;
                        continue $L_45;
                    case 103 :
                    // NORMAL
                        thisRef.m_listener.VOIDpostSolveojdcContactojcContactImpulse(thisRef.m_listener,local_3_REFERENCE,thisRef.impulse);
                        local_2_INT = (local_2_INT + 1); // type is INT value type is INT
                        __label__ = 10;
                        continue $L_10;
                }
            }
        }
    },

    VOIDsolveTOIojdTimeStepINTINT : function(thisRef,subStep,toiIndexA,toiIndexB) {
        var local_9_FLOAT = null; // type is FLOAT # of inits = 2
        var local_8_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_7_FLOAT = null; // type is FLOAT # of inits = 2
        var local_11_FLOAT = null; // type is FLOAT # of inits = 1
        var local_5_INT = null; // type is INT # of inits = 3
        var local_4_INT = null; // type is INT # of inits = 9
        var local_12_FLOAT = null; // type is FLOAT # of inits = 2
        var local_4_FLOAT = null; // type is FLOAT # of inits = 2
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_10_FLOAT = null; // type is FLOAT # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdIsland.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 22;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_22_6 : for(;;) switch (__label__) {
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    var var1 = thisRef.m_bodyCount; // type is INT value type is INT
                    if ((toiIndexA < var1)) {
                        __label__ = 22;
                        continue $M_22_6;
                    }
                    }
                var var229 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var229);
                throw var229;
            case 22 :
            // NORMAL
                $S_22 : {
                // NORMAL
                    var var2 = ojdIsland.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                    if ((var2 != 0)) {
                        __label__ = 44;
                        break $S_22;
                    }
                    __label__ = 28;
                    }
                $M_44_28 : for(;;) switch (__label__) {
                    case 28 :
                    // NORMAL
                        $S_28 : {
                        // NORMAL
                            var var3 = thisRef.m_bodyCount; // type is INT value type is INT
                            if ((toiIndexB < var3)) {
                                __label__ = 44;
                                continue $M_44_28;
                            }
                            }
                        var var230 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                        jlAssertionError.VOIDinit(var230);
                        throw var230;
                    case 44 :
                    // NORMAL
                        $S_44 : {
                        // NORMAL
                            local_4_INT = 0; // type is INT value type is INT
                            __label__ = 47;
                            }
                        $L_47 : for (;;) {
                            $S_47 : {
                            // NORMAL
                                var var6 = local_4_INT; // type is INT value type is INT
                                var var7 = thisRef.m_bodyCount; // type is INT value type is INT
                                if ((var6 >= var7)) {
                                    __label__ = 215;
                                    break $S_47;
                                }
                                __label__ = 56;
                                }
                            for(;;) switch (__label__) {
                                case 56 :
                                // NORMAL
                                    var var235 = thisRef.m_positions.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                                    var var236 = var235.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@425eb919
                                    var var239 = thisRef.m_bodies.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                                    var var242 = var239.m_sweep.c.x; // type is FLOAT value type is FLOAT
                                    var236.x = var242;
                                    var var245 = thisRef.m_positions.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                                    var var246 = var245.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@49eabe8
                                    var var249 = thisRef.m_bodies.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                                    var var252 = var249.m_sweep.c.y; // type is FLOAT value type is FLOAT
                                    var246.y = var252;
                                    var var255 = thisRef.m_positions.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                                    var var258 = thisRef.m_bodies.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                                    var var260 = var258.m_sweep.a; // type is FLOAT value type is FLOAT
                                    var255.a = var260;
                                    var var263 = thisRef.m_velocities.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                                    var var264 = var263.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6af2f40e
                                    var var267 = thisRef.m_bodies.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                                    var var269 = var267.m_linearVelocity.x; // type is FLOAT value type is FLOAT
                                    var264.x = var269;
                                    var var272 = thisRef.m_velocities.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                                    var var273 = var272.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@72def80b
                                    var var276 = thisRef.m_bodies.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                                    var var278 = var276.m_linearVelocity.y; // type is FLOAT value type is FLOAT
                                    var273.y = var278;
                                    var var281 = thisRef.m_velocities.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                                    var var284 = thisRef.m_bodies.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                                    var var285 = var284.m_angularVelocity; // type is FLOAT value type is FLOAT
                                    var281.w = var285;
                                    local_4_INT = (local_4_INT + 1); // type is INT value type is INT
                                    __label__ = 47;
                                    continue $L_47;
                                case 215 :
                                // NORMAL
                                    $S_215 : {
                                    // NORMAL
                                        var var8 = thisRef.toiSolverDef; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@457f0138
                                        var var9 = thisRef.m_contacts; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@344f3394
                                        var8.contacts = var9;
                                        var var10 = thisRef.toiSolverDef; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4960e397
                                        var var11 = thisRef.m_contactCount; // type is INT value type is INT
                                        var10.count = var11;
                                        var var12 = thisRef.toiSolverDef; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4c7b5410
                                        var12.step = subStep;
                                        var var13 = thisRef.toiSolverDef; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7130ea66
                                        var var14 = thisRef.m_positions; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3caea447
                                        var13.positions = var14;
                                        var var15 = thisRef.toiSolverDef; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@729c841e
                                        var var16 = thisRef.m_velocities; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@64d18589
                                        var15.velocities = var16;
                                        thisRef.toiContactSolver.VOIDinitojdcContactSolver$ContactSolverDef(thisRef.toiContactSolver,thisRef.toiSolverDef);
                                        local_4_INT = 0; // type is INT value type is INT
                                        __label__ = 281;
                                        }
                                    $L_281 : for (;;) {
                                        $S_281 : {
                                        // NORMAL
                                            var var20 = local_4_INT; // type is INT value type is INT
                                            var var21 = subStep.positionIterations; // type is INT value type is INT
                                            if ((var20 >= var21)) {
                                                __label__ = 315;
                                                break $S_281;
                                            }
                                            __label__ = 290;
                                            }
                                        $M_315_290 : for(;;) switch (__label__) {
                                            case 315 :
                                            // NORMAL
                                                $S_315 : {
                                                // NORMAL
                                                    var var28 = thisRef.m_bodies.data[toiIndexA]; // type is REFERENCE value type is REFERENCE
                                                    var var30 = var28.m_sweep.c0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@124420af
                                                    var var32 = thisRef.m_positions.data[toiIndexA]; // type is REFERENCE value type is REFERENCE
                                                    var var34 = var32.c.x; // type is FLOAT value type is FLOAT
                                                    var30.x = var34;
                                                    var var36 = thisRef.m_bodies.data[toiIndexA]; // type is REFERENCE value type is REFERENCE
                                                    var var38 = var36.m_sweep.c0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5b81323c
                                                    var var40 = thisRef.m_positions.data[toiIndexA]; // type is REFERENCE value type is REFERENCE
                                                    var var42 = var40.c.y; // type is FLOAT value type is FLOAT
                                                    var38.y = var42;
                                                    var var44 = thisRef.m_bodies.data[toiIndexA]; // type is REFERENCE value type is REFERENCE
                                                    var var45 = var44.m_sweep; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4dabf126
                                                    var var47 = thisRef.m_positions.data[toiIndexA]; // type is REFERENCE value type is REFERENCE
                                                    var var48 = var47.a; // type is FLOAT value type is FLOAT
                                                    var45.a0 = var48;
                                                    var var50 = thisRef.m_bodies.data[toiIndexB]; // type is REFERENCE value type is REFERENCE
                                                    var var52 = var50.m_sweep.c0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@253ed8d7
                                                    var var54 = thisRef.m_positions.data[toiIndexB]; // type is REFERENCE value type is REFERENCE
                                                    var var56 = var52.ojcVec2setojcVec2(var52,var54.c); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@164cd587
                                                    var var58 = thisRef.m_bodies.data[toiIndexB]; // type is REFERENCE value type is REFERENCE
                                                    var var59 = var58.m_sweep; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@440e05a0
                                                    var var61 = thisRef.m_positions.data[toiIndexB]; // type is REFERENCE value type is REFERENCE
                                                    var var62 = var61.a; // type is FLOAT value type is FLOAT
                                                    var59.a0 = var62;
                                                    thisRef.toiContactSolver.VOIDinitializeVelocityConstraints(thisRef.toiContactSolver);
                                                    local_4_INT = 0; // type is INT value type is INT
                                                    __label__ = 446;
                                                    }
                                                $L_446 : for (;;) {
                                                    $S_446 : {
                                                    // NORMAL
                                                        var var65 = local_4_INT; // type is INT value type is INT
                                                        var var66 = subStep.velocityIterations; // type is INT value type is INT
                                                        if ((var65 >= var66)) {
                                                            __label__ = 468;
                                                            break $S_446;
                                                        }
                                                        __label__ = 455;
                                                        }
                                                    for(;;) switch (__label__) {
                                                        case 455 :
                                                        // NORMAL
                                                            thisRef.toiContactSolver.VOIDsolveVelocityConstraints(thisRef.toiContactSolver);
                                                            local_4_INT = (local_4_INT + 1); // type is INT value type is INT
                                                            __label__ = 446;
                                                            continue $L_446;
                                                        case 468 :
                                                        // NORMAL
                                                            $S_468 : {
                                                            // NORMAL
                                                                local_4_FLOAT = subStep.dt; // type is FLOAT value type is FLOAT
                                                                local_5_INT = 0; // type is INT value type is INT
                                                                __label__ = 477;
                                                                }
                                                            $L_477 : for (;;) {
                                                                $S_477 : {
                                                                // NORMAL
                                                                    var var73 = local_5_INT; // type is INT value type is INT
                                                                    var var74 = thisRef.m_bodyCount; // type is INT value type is INT
                                                                    if ((var73 >= var74)) {
                                                                        __label__ = 870;
                                                                        break $S_477;
                                                                    }
                                                                    __label__ = 486;
                                                                    }
                                                                for(;;) switch (__label__) {
                                                                    case 870 :
                                                                    // NORMAL
                                                                        thisRef.VOIDreportA1ojdcContactVelocityConstraint(thisRef,thisRef.toiContactSolver.m_velocityConstraints);
                                                                        return;
                                                                    case 486 :
                                                                    // NORMAL
                                                                        $S_486 : {
                                                                        // NORMAL
                                                                            var var77 = thisRef.m_positions.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                                                                            local_6_REFERENCE = var77.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@56befec6
                                                                            var var82 = thisRef.m_positions.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                                                                            local_7_FLOAT = var82.a; // type is FLOAT value type is FLOAT
                                                                            var var88 = thisRef.m_velocities.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                                                                            local_8_REFERENCE = var88.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5156ca6
                                                                            var var93 = thisRef.m_velocities.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                                                                            local_9_FLOAT = var93.w; // type is FLOAT value type is FLOAT
                                                                            local_10_FLOAT = (local_8_REFERENCE.x * local_4_FLOAT); // type is FLOAT value type is FLOAT
                                                                            local_11_FLOAT = (local_8_REFERENCE.y * local_4_FLOAT); // type is FLOAT value type is FLOAT
                                                                            var var115 = ((local_10_FLOAT * local_10_FLOAT) + (local_11_FLOAT * local_11_FLOAT)); // type is FLOAT value type is FLOAT
                                                                            if ((var115 <= 4.0)) {
                                                                                __label__ = 597;
                                                                                break $S_486;
                                                                            }
                                                                            __label__ = 571;
                                                                            }
                                                                        $M_597_571 : for(;;) switch (__label__) {
                                                                            case 597 :
                                                                            // NORMAL
                                                                                $S_597 : {
                                                                                // NORMAL
                                                                                    local_12_FLOAT = (local_4_FLOAT * local_9_FLOAT); // type is FLOAT value type is FLOAT
                                                                                    var var137 = (local_12_FLOAT * local_12_FLOAT); // type is FLOAT value type is FLOAT
                                                                                    var var138 = ojcSettings.maxRotationSquared; // type is FLOAT value type is FLOAT
                                                                                    if ((var137 <= var138)) {
                                                                                        __label__ = 633;
                                                                                        break $S_597;
                                                                                    }
                                                                                    __label__ = 616;
                                                                                    }
                                                                                $M_633_616 : for(;;) switch (__label__) {
                                                                                    case 633 :
                                                                                    // NORMAL
                                                                                        var var149 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@53725e18
                                                                                        var var155 = (var149.x + (local_8_REFERENCE.x * local_4_FLOAT)); // type is FLOAT value type is FLOAT
                                                                                        var149.x = var155;
                                                                                        var var156 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@53725e18
                                                                                        var var162 = (var156.y + (local_8_REFERENCE.y * local_4_FLOAT)); // type is FLOAT value type is FLOAT
                                                                                        var156.y = var162;
                                                                                        local_7_FLOAT = (local_7_FLOAT + (local_4_FLOAT * local_9_FLOAT)); // type is FLOAT value type is FLOAT
                                                                                        var var171 = thisRef.m_positions.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                                                                                        var var172 = var171.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7505616e
                                                                                        var var174 = local_6_REFERENCE.x; // type is FLOAT value type is FLOAT
                                                                                        var172.x = var174;
                                                                                        var var177 = thisRef.m_positions.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                                                                                        var var178 = var177.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4192596b
                                                                                        var var180 = local_6_REFERENCE.y; // type is FLOAT value type is FLOAT
                                                                                        var178.y = var180;
                                                                                        var var183 = thisRef.m_positions.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                                                                                        var var184 = local_7_FLOAT; // type is FLOAT value type is FLOAT
                                                                                        var183.a = var184;
                                                                                        var var187 = thisRef.m_velocities.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                                                                                        var var188 = var187.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@607bd751
                                                                                        var var190 = local_8_REFERENCE.x; // type is FLOAT value type is FLOAT
                                                                                        var188.x = var190;
                                                                                        var var193 = thisRef.m_velocities.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                                                                                        var var194 = var193.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4ea5e7a4
                                                                                        var var196 = local_8_REFERENCE.y; // type is FLOAT value type is FLOAT
                                                                                        var194.y = var196;
                                                                                        var var199 = thisRef.m_velocities.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                                                                                        var var200 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                                                                                        var199.w = var200;
                                                                                        var var203 = thisRef.m_bodies.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                                                                                        var local_13_REFERENCE = var203; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1075f10f
                                                                                        var var207 = local_13_REFERENCE.m_sweep.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@43ffbb6b
                                                                                        var var209 = local_6_REFERENCE.x; // type is FLOAT value type is FLOAT
                                                                                        var207.x = var209;
                                                                                        var var212 = local_13_REFERENCE.m_sweep.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7d002d1a
                                                                                        var var214 = local_6_REFERENCE.y; // type is FLOAT value type is FLOAT
                                                                                        var212.y = var214;
                                                                                        var var216 = local_13_REFERENCE.m_sweep; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1cf97dd9
                                                                                        var var217 = local_7_FLOAT; // type is FLOAT value type is FLOAT
                                                                                        var216.a = var217;
                                                                                        var var219 = local_13_REFERENCE.m_linearVelocity; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@233b0ac0
                                                                                        var var221 = local_8_REFERENCE.x; // type is FLOAT value type is FLOAT
                                                                                        var219.x = var221;
                                                                                        var var223 = local_13_REFERENCE.m_linearVelocity; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1da1c92f
                                                                                        var var225 = local_8_REFERENCE.y; // type is FLOAT value type is FLOAT
                                                                                        var223.y = var225;
                                                                                        var var226 = local_13_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1075f10f
                                                                                        var var227 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                                                                                        var226.m_angularVelocity = var227;
                                                                                        local_13_REFERENCE.VOIDsynchronizeTransform(local_13_REFERENCE);
                                                                                        local_5_INT = (local_5_INT + 1); // type is INT value type is INT
                                                                                        __label__ = 477;
                                                                                        continue $L_477;
                                                                                    case 616 :
                                                                                    // NORMAL
                                                                                        var var141 = ojcMathUtils.FLOATabsFLOAT(local_12_FLOAT); // type is FLOAT value type is FLOAT
                                                                                        var local_13_FLOAT = (1.5707964 / var141); // type is FLOAT value type is FLOAT
                                                                                        local_9_FLOAT = (local_9_FLOAT * local_13_FLOAT); // type is FLOAT value type is FLOAT
                                                                                        __label__ = 633;
                                                                                        continue $M_633_616;
                                                                                }
                                                                            case 571 :
                                                                            // NORMAL
                                                                                var var124 = ojcMathUtils.FLOATsqrtFLOAT(((local_10_FLOAT * local_10_FLOAT) + (local_11_FLOAT * local_11_FLOAT))); // type is FLOAT value type is FLOAT
                                                                                local_12_FLOAT = (2.0 / var124); // type is FLOAT value type is FLOAT
                                                                                var var130 = local_8_REFERENCE.ojcVec2mulLocalFLOAT(local_8_REFERENCE,local_12_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@61b54f7c
                                                                                __label__ = 597;
                                                                                continue $M_597_571;
                                                                        }
                                                                }
                                                            }
                                                    }
                                                }
                                            case 290 :
                                            // NORMAL
                                                $S_290 : {
                                                // NORMAL
                                                    var var23 = thisRef.toiContactSolver.BOOLEANsolveTOIPositionConstraintsINTINT(thisRef.toiContactSolver,toiIndexA,toiIndexB); // type is BOOLEAN value type is BOOLEAN
                                                    var local_5_BOOLEAN = var23; // type is BOOLEAN value type is BOOLEAN
                                                    var var26 = local_5_BOOLEAN; // type is BOOLEAN value type is BOOLEAN
                                                    if ((var26 == 0)) {
                                                        __label__ = 309;
                                                        break $S_290;
                                                    }
                                                    __label__ = 306;
                                                    }
                                                for(;;) switch (__label__) {
                                                    case 309 :
                                                    // NORMAL
                                                        local_4_INT = (local_4_INT + 1); // type is INT value type is INT
                                                        __label__ = 281;
                                                        continue $L_281;
                                                    case 306 :
                                                    // NORMAL
                                                        __label__ = 315;
                                                        continue $M_315_290;
                                                }
                                        }
                                    }
                            }
                        }
                }
        }
    },

    classInitCheck : function() {
        if (!ojdIsland.__initialized) {
            ojdIsland.__initialized = true;
            var thePrototype = ojdIsland.Create.prototype;
            thePrototype.instanceOf = ojdIsland.instanceOf;
            thePrototype.ClassgetClass = ojdIsland.ClassgetClass;
            thePrototype.VOIDsolveTOIojdTimeStepINTINT = ojdIsland.VOIDsolveTOIojdTimeStepINTINT;
            thePrototype.VOIDreportA1ojdcContactVelocityConstraint = ojdIsland.VOIDreportA1ojdcContactVelocityConstraint;
            thePrototype.VOIDsolveojdProfileojdTimeStepojcVec2BOOLEAN = ojdIsland.VOIDsolveojdProfileojdTimeStepojcVec2BOOLEAN;
            thePrototype.VOIDaddojdjJoint = ojdIsland.VOIDaddojdjJoint;
            thePrototype.VOIDaddojdcContact = ojdIsland.VOIDaddojdcContact;
            thePrototype.VOIDaddojdBody = ojdIsland.VOIDaddojdBody;
            thePrototype.VOIDclear = ojdIsland.VOIDclear;
            thePrototype.VOIDinitINTINTINTojcContactListener = ojdIsland.VOIDinitINTINTINTojcContactListener;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            ojdIsland.VOIDclinit();
        }
    },

};

var ojdcContactSolver = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 101,
    __implementedTypes : [1,101],
    $assertionsDisabled : false, // declared in org.jbox2d.dynamics.contacts.ContactSolver

    Create : function() {
        this.tangent = null; // declared in org.jbox2d.dynamics.contacts.ContactSolver
        this.temp1 = null; // declared in org.jbox2d.dynamics.contacts.ContactSolver
        this.temp2 = null; // declared in org.jbox2d.dynamics.contacts.ContactSolver
        this.P = null; // declared in org.jbox2d.dynamics.contacts.ContactSolver
        this.temp = null; // declared in org.jbox2d.dynamics.contacts.ContactSolver
        this.xfA = null; // declared in org.jbox2d.dynamics.contacts.ContactSolver
        this.xfB = null; // declared in org.jbox2d.dynamics.contacts.ContactSolver
        this.worldManifold = null; // declared in org.jbox2d.dynamics.contacts.ContactSolver
        this.a = null; // declared in org.jbox2d.dynamics.contacts.ContactSolver
        this.b = null; // declared in org.jbox2d.dynamics.contacts.ContactSolver
        this.dv1 = null; // declared in org.jbox2d.dynamics.contacts.ContactSolver
        this.dv2 = null; // declared in org.jbox2d.dynamics.contacts.ContactSolver
        this.x = null; // declared in org.jbox2d.dynamics.contacts.ContactSolver
        this.d = null; // declared in org.jbox2d.dynamics.contacts.ContactSolver
        this.P1 = null; // declared in org.jbox2d.dynamics.contacts.ContactSolver
        this.P2 = null; // declared in org.jbox2d.dynamics.contacts.ContactSolver
        this.psolver = null; // declared in org.jbox2d.dynamics.contacts.ContactSolver
        this.rA = null; // declared in org.jbox2d.dynamics.contacts.ContactSolver
        this.rB = null; // declared in org.jbox2d.dynamics.contacts.ContactSolver
        this.m_positionConstraints = null; // declared in org.jbox2d.dynamics.contacts.ContactSolver
        this.m_velocityConstraints = null; // declared in org.jbox2d.dynamics.contacts.ContactSolver
        this.m_step = null; // declared in org.jbox2d.dynamics.contacts.ContactSolver
        this.m_count = 0; // declared in org.jbox2d.dynamics.contacts.ContactSolver
        this.m_positions = null; // declared in org.jbox2d.dynamics.contacts.ContactSolver
        this.m_velocities = null; // declared in org.jbox2d.dynamics.contacts.ContactSolver
        this.m_contacts = null; // declared in org.jbox2d.dynamics.contacts.ContactSolver
    },

    instanceOf : function(aType) {
        return ojdcContactSolver.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdcContactSolver;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdcContactSolver.BOOLEANdesiredAssertionStatus(ojdcContactSolver); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_13_9 : for(;;) switch (__label__) {
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_13_9;
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_13_9;
        }
        ojdcContactSolver.$assertionsDisabled = var1;
        return;
    },

    VOIDinit : function(thisRef) {
        var local_1_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var0);
            thisRef.tangent = var0;
            var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var1);
            thisRef.temp1 = var1;
            var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var2);
            thisRef.temp2 = var2;
            var var3 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var3);
            thisRef.P = var3;
            var var4 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var4);
            thisRef.temp = var4;
            var var5 = new ojcTransform.Create(); // type is REFERENCE value type is REFERENCE
            ojcTransform.VOIDinit(var5);
            thisRef.xfA = var5;
            var var6 = new ojcTransform.Create(); // type is REFERENCE value type is REFERENCE
            ojcTransform.VOIDinit(var6);
            thisRef.xfB = var6;
            var var7 = new ojcWorldManifold.Create(); // type is REFERENCE value type is REFERENCE
            ojcWorldManifold.VOIDinit(var7);
            thisRef.worldManifold = var7;
            var var8 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var8);
            thisRef.a = var8;
            var var9 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var9);
            thisRef.b = var9;
            var var10 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var10);
            thisRef.dv1 = var10;
            var var11 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var11);
            thisRef.dv2 = var11;
            var var12 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var12);
            thisRef.x = var12;
            var var13 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var13);
            thisRef.d = var13;
            var var14 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var14);
            thisRef.P1 = var14;
            var var15 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var15);
            thisRef.P2 = var15;
            var var16 = new ojdcPositionSolverManifold.Create(); // type is REFERENCE value type is REFERENCE
            ojdcPositionSolverManifold.VOIDinit(var16);
            thisRef.psolver = var16;
            var var17 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var17);
            thisRef.rA = var17;
            var var18 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var18);
            thisRef.rB = var18;
            var var19 = bytecoder.newArray(256,null); // type is REFERENCE value type is REFERENCE
            thisRef.m_positionConstraints = var19;
            var var20 = bytecoder.newArray(256,null); // type is REFERENCE value type is REFERENCE
            thisRef.m_velocityConstraints = var20;
            local_1_INT = 0; // type is INT value type is INT
            __label__ = 235;
            }
        $L_235 : for (;;) {
            $S_235 : {
            // NORMAL
                var var23 = local_1_INT; // type is INT value type is INT
                if ((var23 >= 256)) {
                    return;
                }
                }
            var var24 = thisRef.m_positionConstraints; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@4474cbfd
            var var25 = local_1_INT; // type is INT value type is INT
            var var26 = new ojdcContactPositionConstraint.Create(); // type is REFERENCE value type is REFERENCE
            ojdcContactPositionConstraint.VOIDinit(var26);
            var24.data[var25] = var26;
            var var27 = thisRef.m_velocityConstraints; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@47950ecc
            var var28 = local_1_INT; // type is INT value type is INT
            var var29 = new ojdcContactVelocityConstraint.Create(); // type is REFERENCE value type is REFERENCE
            ojdcContactVelocityConstraint.VOIDinit(var29);
            var27.data[var28] = var29;
            local_1_INT = (local_1_INT + 1); // type is INT value type is INT
            __label__ = 235;
            continue $L_235;
        }
    },

    VOIDinitojdcContactSolver$ContactSolverDef : function(thisRef,def) {
        var local_3_INT = null; // type is INT # of inits = 6
        var local_15_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_9_FLOAT = null; // type is FLOAT # of inits = 1
        var local_13_INT = null; // type is INT # of inits = 2
        var local_12_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_10_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_11_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_18_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_8_FLOAT = null; // type is FLOAT # of inits = 1
        var local_17_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_16_INT = null; // type is INT # of inits = 3
        var local_2_INT = null; // type is INT # of inits = 4
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_14_REFERENCE = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = def.step; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3712060
            thisRef.m_step = var0;
            var var1 = def.count; // type is INT value type is INT
            thisRef.m_count = var1;
            var var3 = thisRef.m_positionConstraints.data.length; // type is INT value type is INT
            var var4 = thisRef.m_count; // type is INT value type is INT
            if ((var3 >= var4)) {
                __label__ = 94;
                break $S_0;
            }
            __label__ = 28;
            }
        $M_94_28 : for(;;) switch (__label__) {
            case 94 :
            // NORMAL
                $S_94 : {
                // NORMAL
                    var var25 = thisRef.m_velocityConstraints.data.length; // type is INT value type is INT
                    var var26 = thisRef.m_count; // type is INT value type is INT
                    if ((var25 >= var26)) {
                        __label__ = 172;
                        break $S_94;
                    }
                    __label__ = 106;
                    }
                $M_172_106 : for(;;) switch (__label__) {
                    case 172 :
                    // NORMAL
                        $S_172 : {
                        // NORMAL
                            var var44 = def.positions; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@34642bc
                            thisRef.m_positions = var44;
                            var var45 = def.velocities; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@7f956700
                            thisRef.m_velocities = var45;
                            var var46 = def.contacts; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@36369e79
                            thisRef.m_contacts = var46;
                            local_2_INT = 0; // type is INT value type is INT
                            __label__ = 198;
                            }
                        $L_198 : for (;;) {
                            $S_198 : {
                            // NORMAL
                                var var49 = local_2_INT; // type is INT value type is INT
                                var var50 = thisRef.m_count; // type is INT value type is INT
                                if ((var49 >= var50)) {
                                    return;
                                }
                                }
                            $S_206 : {
                            // NORMAL
                                var var53 = thisRef.m_contacts.data[local_2_INT]; // type is REFERENCE value type is REFERENCE
                                local_3_REFERENCE = var53; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@48210ca1
                                var local_4_REFERENCE = local_3_REFERENCE.m_fixtureA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3c4edaff
                                var local_5_REFERENCE = local_3_REFERENCE.m_fixtureB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@d2c3c68
                                var var62 = local_4_REFERENCE.ojcsShapegetShape(local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@59d5e7aa
                                var local_6_REFERENCE = var62; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5b126fbf
                                var var65 = local_5_REFERENCE.ojcsShapegetShape(local_5_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1141cf00
                                var local_7_REFERENCE = var65; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7d627e3c
                                local_8_FLOAT = local_6_REFERENCE.m_radius; // type is FLOAT value type is FLOAT
                                local_9_FLOAT = local_7_REFERENCE.m_radius; // type is FLOAT value type is FLOAT
                                var var76 = local_4_REFERENCE.ojdBodygetBody(local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@bfc3e8d
                                local_10_REFERENCE = var76; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@780a619c
                                var var79 = local_5_REFERENCE.ojdBodygetBody(local_5_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@43dbd7da
                                local_11_REFERENCE = var79; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@47c5d261
                                var var82 = local_3_REFERENCE.ojcManifoldgetManifold(local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5cfd396e
                                local_12_REFERENCE = var82; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6df3954c
                                local_13_INT = local_12_REFERENCE.pointCount; // type is INT value type is INT
                                var var88 = ojdcContactSolver.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                                if ((var88 != 0)) {
                                    __label__ = 299;
                                    break $S_206;
                                }
                                __label__ = 286;
                                }
                            $M_299_286 : for(;;) switch (__label__) {
                                case 299 :
                                // NORMAL
                                    $S_299 : {
                                    // NORMAL
                                        var var96 = thisRef.m_velocityConstraints.data[local_2_INT]; // type is REFERENCE value type is REFERENCE
                                        local_14_REFERENCE = var96; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@65a4ae4
                                        var var98 = local_14_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@65a4ae4
                                        var var100 = local_3_REFERENCE.m_friction; // type is FLOAT value type is FLOAT
                                        var98.friction = var100;
                                        var var101 = local_14_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@65a4ae4
                                        var var103 = local_3_REFERENCE.m_restitution; // type is FLOAT value type is FLOAT
                                        var101.restitution = var103;
                                        var var104 = local_14_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@65a4ae4
                                        var var106 = local_3_REFERENCE.m_tangentSpeed; // type is FLOAT value type is FLOAT
                                        var104.tangentSpeed = var106;
                                        var var107 = local_14_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@65a4ae4
                                        var var109 = local_10_REFERENCE.m_islandIndex; // type is INT value type is INT
                                        var107.indexA = var109;
                                        var var110 = local_14_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@65a4ae4
                                        var var112 = local_11_REFERENCE.m_islandIndex; // type is INT value type is INT
                                        var110.indexB = var112;
                                        var var113 = local_14_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@65a4ae4
                                        var var115 = local_10_REFERENCE.m_invMass; // type is FLOAT value type is FLOAT
                                        var113.invMassA = var115;
                                        var var116 = local_14_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@65a4ae4
                                        var var118 = local_11_REFERENCE.m_invMass; // type is FLOAT value type is FLOAT
                                        var116.invMassB = var118;
                                        var var119 = local_14_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@65a4ae4
                                        var var121 = local_10_REFERENCE.m_invI; // type is FLOAT value type is FLOAT
                                        var119.invIA = var121;
                                        var var122 = local_14_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@65a4ae4
                                        var var124 = local_11_REFERENCE.m_invI; // type is FLOAT value type is FLOAT
                                        var122.invIB = var124;
                                        var var125 = local_14_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@65a4ae4
                                        var var126 = local_2_INT; // type is INT value type is INT
                                        var125.contactIndex = var126;
                                        var var127 = local_14_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@65a4ae4
                                        var var128 = local_13_INT; // type is INT value type is INT
                                        var127.pointCount = var128;
                                        local_14_REFERENCE.K.VOIDsetZero(local_14_REFERENCE.K);
                                        local_14_REFERENCE.normalMass.VOIDsetZero(local_14_REFERENCE.normalMass);
                                        var var135 = thisRef.m_positionConstraints.data[local_2_INT]; // type is REFERENCE value type is REFERENCE
                                        local_15_REFERENCE = var135; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@6fe5d694
                                        var var137 = local_15_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@6fe5d694
                                        var var139 = local_10_REFERENCE.m_islandIndex; // type is INT value type is INT
                                        var137.indexA = var139;
                                        var var140 = local_15_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@6fe5d694
                                        var var142 = local_11_REFERENCE.m_islandIndex; // type is INT value type is INT
                                        var140.indexB = var142;
                                        var var143 = local_15_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@6fe5d694
                                        var var145 = local_10_REFERENCE.m_invMass; // type is FLOAT value type is FLOAT
                                        var143.invMassA = var145;
                                        var var146 = local_15_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@6fe5d694
                                        var var148 = local_11_REFERENCE.m_invMass; // type is FLOAT value type is FLOAT
                                        var146.invMassB = var148;
                                        var var154 = local_15_REFERENCE.localCenterA.ojcVec2setojcVec2(local_15_REFERENCE.localCenterA,local_10_REFERENCE.m_sweep.localCenter); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@32802f53
                                        var var160 = local_15_REFERENCE.localCenterB.ojcVec2setojcVec2(local_15_REFERENCE.localCenterB,local_11_REFERENCE.m_sweep.localCenter); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@58e277d8
                                        var var161 = local_15_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@6fe5d694
                                        var var163 = local_10_REFERENCE.m_invI; // type is FLOAT value type is FLOAT
                                        var161.invIA = var163;
                                        var var164 = local_15_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@6fe5d694
                                        var var166 = local_11_REFERENCE.m_invI; // type is FLOAT value type is FLOAT
                                        var164.invIB = var166;
                                        var var171 = local_15_REFERENCE.localNormal.ojcVec2setojcVec2(local_15_REFERENCE.localNormal,local_12_REFERENCE.localNormal); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@459a1e19
                                        var var176 = local_15_REFERENCE.localPoint.ojcVec2setojcVec2(local_15_REFERENCE.localPoint,local_12_REFERENCE.localPoint); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7099698d
                                        var var177 = local_15_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@6fe5d694
                                        var var178 = local_13_INT; // type is INT value type is INT
                                        var177.pointCount = var178;
                                        var var179 = local_15_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@6fe5d694
                                        var var180 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                                        var179.radiusA = var180;
                                        var var181 = local_15_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@6fe5d694
                                        var var182 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                                        var181.radiusB = var182;
                                        var var183 = local_15_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@6fe5d694
                                        var var185 = local_12_REFERENCE.type; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@43502a7a
                                        var183.type = var185;
                                        local_16_INT = 0; // type is INT value type is INT
                                        __label__ = 587;
                                        }
                                    $L_587 : for (;;) {
                                        $S_587 : {
                                        // NORMAL
                                            var var188 = local_16_INT; // type is INT value type is INT
                                            var var189 = local_13_INT; // type is INT value type is INT
                                            if ((var188 >= var189)) {
                                                __label__ = 753;
                                                break $S_587;
                                            }
                                            __label__ = 594;
                                            }
                                        for(;;) switch (__label__) {
                                            case 594 :
                                            // NORMAL
                                                $S_594 : {
                                                // NORMAL
                                                    var var193 = local_12_REFERENCE.points.data[local_16_INT]; // type is REFERENCE value type is REFERENCE
                                                    local_17_REFERENCE = var193; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1e4d77d1
                                                    var var198 = local_14_REFERENCE.points.data[local_16_INT]; // type is REFERENCE value type is REFERENCE
                                                    local_18_REFERENCE = var198; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@debb12f
                                                    var var201 = thisRef.m_step.warmStarting; // type is BOOLEAN value type is BOOLEAN
                                                    if ((var201 == 0)) {
                                                        __label__ = 663;
                                                        break $S_594;
                                                    }
                                                    __label__ = 624;
                                                    }
                                                $M_624_663 : for(;;) switch (__label__) {
                                                    case 663 :
                                                    // NORMAL
                                                        var var214 = local_18_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@debb12f
                                                        var214.normalImpulse = 0.0;
                                                        var var215 = local_18_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@debb12f
                                                        var215.tangentImpulse = 0.0;
                                                        break $M_624_663;
                                                    case 624 :
                                                    // NORMAL
                                                        var var202 = local_18_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@debb12f
                                                        var var207 = (thisRef.m_step.dtRatio * local_17_REFERENCE.normalImpulse); // type is FLOAT value type is FLOAT
                                                        var202.normalImpulse = var207;
                                                        var var208 = local_18_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@debb12f
                                                        var var213 = (thisRef.m_step.dtRatio * local_17_REFERENCE.tangentImpulse); // type is FLOAT value type is FLOAT
                                                        var208.tangentImpulse = var213;
                                                        break $M_624_663;
                                                }
                                                local_18_REFERENCE.rA.VOIDsetZero(local_18_REFERENCE.rA);
                                                local_18_REFERENCE.rB.VOIDsetZero(local_18_REFERENCE.rB);
                                                var var220 = local_18_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@debb12f
                                                var220.normalMass = 0.0;
                                                var var221 = local_18_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@debb12f
                                                var221.tangentMass = 0.0;
                                                var var222 = local_18_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@debb12f
                                                var222.velocityBias = 0.0;
                                                var var226 = local_15_REFERENCE.localPoints.data[local_16_INT]; // type is REFERENCE value type is REFERENCE
                                                var var229 = local_17_REFERENCE.localPoint.x; // type is FLOAT value type is FLOAT
                                                var226.x = var229;
                                                var var233 = local_15_REFERENCE.localPoints.data[local_16_INT]; // type is REFERENCE value type is REFERENCE
                                                var var236 = local_17_REFERENCE.localPoint.y; // type is FLOAT value type is FLOAT
                                                var233.y = var236;
                                                local_16_INT = (local_16_INT + 1); // type is INT value type is INT
                                                __label__ = 587;
                                                continue $L_587;
                                            case 753 :
                                            // NORMAL
                                                local_2_INT = (local_2_INT + 1); // type is INT value type is INT
                                                __label__ = 198;
                                                continue $L_198;
                                        }
                                    }
                                case 286 :
                                // NORMAL
                                    $S_286 : {
                                    // NORMAL
                                        var var89 = local_13_INT; // type is INT value type is INT
                                        if ((var89 > 0)) {
                                            __label__ = 299;
                                            continue $M_299_286;
                                        }
                                        }
                                    var var90 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                    jlAssertionError.VOIDinit(var90);
                                    throw var90;
                            }
                        }
                    case 106 :
                    // NORMAL
                        $S_106 : {
                        // NORMAL
                            var local_2_REFERENCE = thisRef.m_velocityConstraints; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@847c97f
                            var var32 = ojcMathUtils.INTmaxINTINT((local_2_REFERENCE.data.length * 2),thisRef.m_count); // type is INT value type is INT
                            var var33 = bytecoder.newArray(var32,null); // type is REFERENCE value type is REFERENCE
                            thisRef.m_velocityConstraints = var33;
                            jlSystem.VOIDarraycopyjlObjectINTjlObjectINTINT(local_2_REFERENCE,0,thisRef.m_velocityConstraints,0,local_2_REFERENCE.data.length);
                            local_3_INT = local_2_REFERENCE.data.length; // type is INT value type is INT
                            __label__ = 144;
                            }
                        $L_144 : for (;;) {
                            $S_144 : {
                            // NORMAL
                                var var41 = local_3_INT; // type is INT value type is INT
                                var var43 = thisRef.m_velocityConstraints.data.length; // type is INT value type is INT
                                if ((var41 >= var43)) {
                                    __label__ = 172;
                                    continue $M_172_106;
                                }
                                }
                            var var237 = thisRef.m_velocityConstraints; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1db874b8
                            var var238 = local_3_INT; // type is INT value type is INT
                            var var239 = new ojdcContactVelocityConstraint.Create(); // type is REFERENCE value type is REFERENCE
                            ojdcContactVelocityConstraint.VOIDinit(var239);
                            var237.data[var238] = var239;
                            local_3_INT = (local_3_INT + 1); // type is INT value type is INT
                            __label__ = 144;
                            continue $L_144;
                        }
                }
            case 28 :
            // NORMAL
                $S_28 : {
                // NORMAL
                    var local_2_REFERENCE = thisRef.m_positionConstraints; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@26d6b383
                    var var11 = ojcMathUtils.INTmaxINTINT((local_2_REFERENCE.data.length * 2),thisRef.m_count); // type is INT value type is INT
                    var var12 = bytecoder.newArray(var11,null); // type is REFERENCE value type is REFERENCE
                    thisRef.m_positionConstraints = var12;
                    jlSystem.VOIDarraycopyjlObjectINTjlObjectINTINT(local_2_REFERENCE,0,thisRef.m_positionConstraints,0,local_2_REFERENCE.data.length);
                    local_3_INT = local_2_REFERENCE.data.length; // type is INT value type is INT
                    __label__ = 66;
                    }
                $L_66 : for (;;) {
                    $S_66 : {
                    // NORMAL
                        var var21 = local_3_INT; // type is INT value type is INT
                        var var23 = thisRef.m_positionConstraints.data.length; // type is INT value type is INT
                        if ((var21 >= var23)) {
                            __label__ = 94;
                            continue $M_94_28;
                        }
                        }
                    var var91 = thisRef.m_positionConstraints; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@64174ed9
                    var var92 = local_3_INT; // type is INT value type is INT
                    var var93 = new ojdcContactPositionConstraint.Create(); // type is REFERENCE value type is REFERENCE
                    ojdcContactPositionConstraint.VOIDinit(var93);
                    var91.data[var92] = var93;
                    local_3_INT = (local_3_INT + 1); // type is INT value type is INT
                    __label__ = 66;
                    continue $L_66;
                }
        }
    },

    VOIDinitializeVelocityConstraints : function(thisRef) {
        var local_36_FLOAT = null; // type is FLOAT # of inits = 1
        var local_32_FLOAT = null; // type is FLOAT # of inits = 2
        var local_14_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_24_INT = null; // type is INT # of inits = 3
        var local_17_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_18_FLOAT = null; // type is FLOAT # of inits = 2
        var local_30_FLOAT = null; // type is FLOAT # of inits = 2
        var local_12_FLOAT = null; // type is FLOAT # of inits = 2
        var var343 = null; // type is FLOAT # of inits = 2
        var local_15_REFERENCE = null; // type is REFERENCE # of inits = 2
        var var338 = null; // type is REFERENCE # of inits = 1
        var local_33_FLOAT = null; // type is FLOAT # of inits = 1
        var local_9_FLOAT = null; // type is FLOAT # of inits = 2
        var local_21_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_25_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_13_REFERENCE = null; // type is REFERENCE # of inits = 1
        var var277 = null; // type is REFERENCE # of inits = 1
        var local_19_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_20_FLOAT = null; // type is FLOAT # of inits = 1
        var var282 = null; // type is FLOAT # of inits = 2
        var local_4_FLOAT = null; // type is FLOAT # of inits = 1
        var local_1_INT = null; // type is INT # of inits = 4
        var local_10_FLOAT = null; // type is FLOAT # of inits = 2
        var local_16_FLOAT = null; // type is FLOAT # of inits = 1
        var local_23_INT = null; // type is INT # of inits = 2
        var local_22_FLOAT = null; // type is FLOAT # of inits = 2
        var local_5_FLOAT = null; // type is FLOAT # of inits = 1
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_28_FLOAT = null; // type is FLOAT # of inits = 2
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_31_FLOAT = null; // type is FLOAT # of inits = 2
        var local_11_FLOAT = null; // type is FLOAT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_1_INT = 0; // type is INT value type is INT
            __label__ = 2;
            }
        $L_2 : for (;;) {
            $S_2 : {
            // NORMAL
                var var2 = local_1_INT; // type is INT value type is INT
                var var3 = thisRef.m_count; // type is INT value type is INT
                if ((var2 >= var3)) {
                    return;
                }
                }
            $S_10 : {
            // NORMAL
                var var6 = thisRef.m_velocityConstraints.data[local_1_INT]; // type is REFERENCE value type is REFERENCE
                local_2_REFERENCE = var6; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3ab7e1a3
                var var10 = thisRef.m_positionConstraints.data[local_1_INT]; // type is REFERENCE value type is REFERENCE
                var local_3_REFERENCE = var10; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@51e8b67c
                local_4_FLOAT = local_3_REFERENCE.radiusA; // type is FLOAT value type is FLOAT
                local_5_FLOAT = local_3_REFERENCE.radiusB; // type is FLOAT value type is FLOAT
                var var23 = thisRef.m_contacts.data[local_2_REFERENCE.contactIndex]; // type is REFERENCE value type is REFERENCE
                var var24 = var23.ojcManifoldgetManifold(var23); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@746bd01
                local_6_REFERENCE = var24; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2c798fc2
                var local_7_INT = local_2_REFERENCE.indexA; // type is INT value type is INT
                var local_8_INT = local_2_REFERENCE.indexB; // type is INT value type is INT
                local_9_FLOAT = local_2_REFERENCE.invMassA; // type is FLOAT value type is FLOAT
                local_10_FLOAT = local_2_REFERENCE.invMassB; // type is FLOAT value type is FLOAT
                local_11_FLOAT = local_2_REFERENCE.invIA; // type is FLOAT value type is FLOAT
                local_12_FLOAT = local_2_REFERENCE.invIB; // type is FLOAT value type is FLOAT
                local_13_REFERENCE = local_3_REFERENCE.localCenterA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4d6f3d43
                local_14_REFERENCE = local_3_REFERENCE.localCenterB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6396e46c
                var var58 = thisRef.m_positions.data[local_7_INT]; // type is REFERENCE value type is REFERENCE
                local_15_REFERENCE = var58.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7759e534
                var var63 = thisRef.m_positions.data[local_7_INT]; // type is REFERENCE value type is REFERENCE
                local_16_FLOAT = var63.a; // type is FLOAT value type is FLOAT
                var var69 = thisRef.m_velocities.data[local_7_INT]; // type is REFERENCE value type is REFERENCE
                local_17_REFERENCE = var69.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@45c5e06b
                var var74 = thisRef.m_velocities.data[local_7_INT]; // type is REFERENCE value type is REFERENCE
                local_18_FLOAT = var74.w; // type is FLOAT value type is FLOAT
                var var80 = thisRef.m_positions.data[local_8_INT]; // type is REFERENCE value type is REFERENCE
                local_19_REFERENCE = var80.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@71f458b5
                var var85 = thisRef.m_positions.data[local_8_INT]; // type is REFERENCE value type is REFERENCE
                local_20_FLOAT = var85.a; // type is FLOAT value type is FLOAT
                var var91 = thisRef.m_velocities.data[local_8_INT]; // type is REFERENCE value type is REFERENCE
                local_21_REFERENCE = var91.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@25956763
                var var96 = thisRef.m_velocities.data[local_8_INT]; // type is REFERENCE value type is REFERENCE
                local_22_FLOAT = var96.w; // type is FLOAT value type is FLOAT
                var var100 = ojdcContactSolver.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                if ((var100 != 0)) {
                    __label__ = 216;
                    break $S_10;
                }
                __label__ = 200;
                }
            $M_200_216 : for(;;) switch (__label__) {
                case 216 :
                // NORMAL
                    $S_216 : {
                    // NORMAL
                        var var107 = thisRef.xfA.q.ojcRotsetFLOAT(thisRef.xfA.q,local_16_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1ddd46a0
                        var var111 = thisRef.xfB.q.ojcRotsetFLOAT(thisRef.xfB.q,local_20_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@77f12bc8
                        var var113 = thisRef.xfA.p; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2413e473
                        var var129 = (local_15_REFERENCE.x - ((thisRef.xfA.q.c * local_13_REFERENCE.x) - (thisRef.xfA.q.s * local_13_REFERENCE.y))); // type is FLOAT value type is FLOAT
                        var113.x = var129;
                        var var131 = thisRef.xfA.p; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2ab321ed
                        var var147 = (local_15_REFERENCE.y - ((thisRef.xfA.q.s * local_13_REFERENCE.x) + (thisRef.xfA.q.c * local_13_REFERENCE.y))); // type is FLOAT value type is FLOAT
                        var131.y = var147;
                        var var149 = thisRef.xfB.p; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5d2c9a5d
                        var var165 = (local_19_REFERENCE.x - ((thisRef.xfB.q.c * local_14_REFERENCE.x) - (thisRef.xfB.q.s * local_14_REFERENCE.y))); // type is FLOAT value type is FLOAT
                        var149.x = var165;
                        var var167 = thisRef.xfB.p; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@237d455b
                        var var183 = (local_19_REFERENCE.y - ((thisRef.xfB.q.s * local_14_REFERENCE.x) + (thisRef.xfB.q.c * local_14_REFERENCE.y))); // type is FLOAT value type is FLOAT
                        var167.y = var183;
                        thisRef.worldManifold.VOIDinitializeojcManifoldojcTransformFLOATojcTransformFLOAT(thisRef.worldManifold,local_6_REFERENCE,thisRef.xfA,local_4_FLOAT,thisRef.xfB,local_5_FLOAT);
                        var var194 = local_2_REFERENCE.normal.ojcVec2setojcVec2(local_2_REFERENCE.normal,thisRef.worldManifold.normal); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@18760d3b
                        local_23_INT = local_2_REFERENCE.pointCount; // type is INT value type is INT
                        local_24_INT = 0; // type is INT value type is INT
                        __label__ = 483;
                        }
                    $L_483 : for (;;) {
                        $S_483 : {
                        // NORMAL
                            var var201 = local_24_INT; // type is INT value type is INT
                            var var202 = local_23_INT; // type is INT value type is INT
                            if ((var201 >= var202)) {
                                __label__ = 912;
                                break $S_483;
                            }
                            __label__ = 490;
                            }
                        for(;;) switch (__label__) {
                            case 490 :
                            // NORMAL
                                $S_490 : {
                                // NORMAL
                                    var var206 = local_2_REFERENCE.points.data[local_24_INT]; // type is REFERENCE value type is REFERENCE
                                    local_25_REFERENCE = var206; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@7592f51d
                                    var var209 = local_25_REFERENCE.rA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2bf9fb91
                                    var var213 = thisRef.worldManifold.points.data[local_24_INT]; // type is REFERENCE value type is REFERENCE
                                    var var214 = var209.ojcVec2setojcVec2(var209,var213); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@12be72c1
                                    var var216 = var214.ojcVec2subLocalojcVec2(var214,local_15_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5b20aa50
                                    var var218 = local_25_REFERENCE.rB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@73976bda
                                    var var222 = thisRef.worldManifold.points.data[local_24_INT]; // type is REFERENCE value type is REFERENCE
                                    var var223 = var218.ojcVec2setojcVec2(var218,var222); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1756234a
                                    var var225 = var223.ojcVec2subLocalojcVec2(var223,local_19_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@761f731b
                                    var local_26_FLOAT = ((local_25_REFERENCE.rA.x * local_2_REFERENCE.normal.y) - (local_25_REFERENCE.rA.y * local_2_REFERENCE.normal.x)); // type is FLOAT value type is FLOAT
                                    var local_27_FLOAT = ((local_25_REFERENCE.rB.x * local_2_REFERENCE.normal.y) - (local_25_REFERENCE.rB.y * local_2_REFERENCE.normal.x)); // type is FLOAT value type is FLOAT
                                    local_28_FLOAT = (((local_9_FLOAT + local_10_FLOAT) + ((local_11_FLOAT * local_26_FLOAT) * local_26_FLOAT)) + ((local_12_FLOAT * local_27_FLOAT) * local_27_FLOAT)); // type is FLOAT value type is FLOAT
                                    var277 = local_25_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@7592f51d
                                    var var278 = local_28_FLOAT; // type is FLOAT value type is FLOAT
                                    if ((var278 <= 0.0)) {
                                        __label__ = 658;
                                        break $S_490;
                                    }
                                    __label__ = 651;
                                    }
                                $M_658_651 : for(;;) switch (__label__) {
                                    case 658 :
                                    // NORMAL
                                        var282 = 0.0; // type is FLOAT value type is FLOAT
                                        break $M_658_651;
                                    case 651 :
                                    // NORMAL
                                        var282 = (1.0 / local_28_FLOAT); // type is FLOAT value type is FLOAT
                                        break $M_658_651;
                                }
                                $S_659 : {
                                // NORMAL
                                    var277.normalMass = var282;
                                    var local_29_FLOAT = (1.0 * local_2_REFERENCE.normal.y); // type is FLOAT value type is FLOAT
                                    local_30_FLOAT = (-1.0 * local_2_REFERENCE.normal.x); // type is FLOAT value type is FLOAT
                                    local_31_FLOAT = ((local_25_REFERENCE.rA.x * local_30_FLOAT) - (local_25_REFERENCE.rA.y * local_29_FLOAT)); // type is FLOAT value type is FLOAT
                                    local_32_FLOAT = ((local_25_REFERENCE.rB.x * local_30_FLOAT) - (local_25_REFERENCE.rB.y * local_29_FLOAT)); // type is FLOAT value type is FLOAT
                                    local_33_FLOAT = (((local_9_FLOAT + local_10_FLOAT) + ((local_11_FLOAT * local_31_FLOAT) * local_31_FLOAT)) + ((local_12_FLOAT * local_32_FLOAT) * local_32_FLOAT)); // type is FLOAT value type is FLOAT
                                    var338 = local_25_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@7592f51d
                                    var var339 = local_33_FLOAT; // type is FLOAT value type is FLOAT
                                    if ((var339 <= 0.0)) {
                                        __label__ = 776;
                                        break $S_659;
                                    }
                                    __label__ = 769;
                                    }
                                $M_776_769 : for(;;) switch (__label__) {
                                    case 776 :
                                    // NORMAL
                                        var343 = 0.0; // type is FLOAT value type is FLOAT
                                        break $M_776_769;
                                    case 769 :
                                    // NORMAL
                                        var343 = (1.0 / local_33_FLOAT); // type is FLOAT value type is FLOAT
                                        break $M_776_769;
                                }
                                $S_777 : {
                                // NORMAL
                                    var338.tangentMass = var343;
                                    var var344 = local_25_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@7592f51d
                                    var344.velocityBias = 0.0;
                                    var local_34_FLOAT = (((local_21_REFERENCE.x + ((-local_22_FLOAT) * local_25_REFERENCE.rB.y)) - local_17_REFERENCE.x) - ((-local_18_FLOAT) * local_25_REFERENCE.rA.y)); // type is FLOAT value type is FLOAT
                                    var local_35_FLOAT = (((local_21_REFERENCE.y + (local_22_FLOAT * local_25_REFERENCE.rB.x)) - local_17_REFERENCE.y) - (local_18_FLOAT * local_25_REFERENCE.rA.x)); // type is FLOAT value type is FLOAT
                                    local_36_FLOAT = ((local_2_REFERENCE.normal.x * local_34_FLOAT) + (local_2_REFERENCE.normal.y * local_35_FLOAT)); // type is FLOAT value type is FLOAT
                                    var var398 = local_36_FLOAT; // type is FLOAT value type is FLOAT
                                    if ((var398 >= -1.0)) {
                                        __label__ = 906;
                                        break $S_777;
                                    }
                                    __label__ = 893;
                                    }
                                $M_906_893 : for(;;) switch (__label__) {
                                    case 893 :
                                    // NORMAL
                                        var var400 = local_25_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@7592f51d
                                        var var405 = ((-local_2_REFERENCE.restitution) * local_36_FLOAT); // type is FLOAT value type is FLOAT
                                        var400.velocityBias = var405;
                                        __label__ = 906;
                                        continue $M_906_893;
                                    case 906 :
                                    // NORMAL
                                        local_24_INT = (local_24_INT + 1); // type is INT value type is INT
                                        __label__ = 483;
                                        continue $L_483;
                                }
                            case 912 :
                            // NORMAL
                                $S_912 : {
                                // NORMAL
                                    var var407 = local_2_REFERENCE.pointCount; // type is INT value type is INT
                                    if ((var407 != 2)) {
                                        __label__ = 1139;
                                        break $S_912;
                                    }
                                    __label__ = 920;
                                    }
                                $M_920_1139 : for(;;) switch (__label__) {
                                    case 1139 :
                                    // NORMAL
                                        local_1_INT = (local_1_INT + 1); // type is INT value type is INT
                                        __label__ = 2;
                                        continue $L_2;
                                    case 920 :
                                    // NORMAL
                                        $S_920 : {
                                        // NORMAL
                                            var var410 = local_2_REFERENCE.points.data[0]; // type is REFERENCE value type is REFERENCE
                                            var local_24_REFERENCE = var410; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@283325a2
                                            var var414 = local_2_REFERENCE.points.data[1]; // type is REFERENCE value type is REFERENCE
                                            local_25_REFERENCE = var414; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@489de2e7
                                            var var419 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_24_REFERENCE.rA,local_2_REFERENCE.normal); // type is FLOAT value type is FLOAT
                                            var local_26_FLOAT = var419; // type is FLOAT value type is FLOAT
                                            var var425 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_24_REFERENCE.rB,local_2_REFERENCE.normal); // type is FLOAT value type is FLOAT
                                            var local_27_FLOAT = var425; // type is FLOAT value type is FLOAT
                                            var var431 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_25_REFERENCE.rA,local_2_REFERENCE.normal); // type is FLOAT value type is FLOAT
                                            local_28_FLOAT = var431; // type is FLOAT value type is FLOAT
                                            var var437 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_25_REFERENCE.rB,local_2_REFERENCE.normal); // type is FLOAT value type is FLOAT
                                            var local_29_FLOAT = var437; // type is FLOAT value type is FLOAT
                                            local_30_FLOAT = (((local_9_FLOAT + local_10_FLOAT) + ((local_11_FLOAT * local_26_FLOAT) * local_26_FLOAT)) + ((local_12_FLOAT * local_27_FLOAT) * local_27_FLOAT)); // type is FLOAT value type is FLOAT
                                            local_31_FLOAT = (((local_9_FLOAT + local_10_FLOAT) + ((local_11_FLOAT * local_28_FLOAT) * local_28_FLOAT)) + ((local_12_FLOAT * local_29_FLOAT) * local_29_FLOAT)); // type is FLOAT value type is FLOAT
                                            local_32_FLOAT = (((local_9_FLOAT + local_10_FLOAT) + ((local_11_FLOAT * local_26_FLOAT) * local_28_FLOAT)) + ((local_12_FLOAT * local_27_FLOAT) * local_29_FLOAT)); // type is FLOAT value type is FLOAT
                                            var var489 = (local_30_FLOAT * local_30_FLOAT); // type is FLOAT value type is FLOAT
                                            var var497 = (100.0 * ((local_30_FLOAT * local_31_FLOAT) - (local_32_FLOAT * local_32_FLOAT))); // type is FLOAT value type is FLOAT
                                            if ((var489 >= var497)) {
                                                __label__ = 1134;
                                                break $S_920;
                                            }
                                            __label__ = 1090;
                                            }
                                        for(;;) switch (__label__) {
                                            case 1134 :
                                            // NORMAL
                                                var var515 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3ab7e1a3
                                                var515.pointCount = 1;
                                                __label__ = 1139;
                                                continue $M_920_1139;
                                            case 1090 :
                                            // NORMAL
                                                var var504 = local_2_REFERENCE.K.ex.ojcVec2setFLOATFLOAT(local_2_REFERENCE.K.ex,local_30_FLOAT,local_32_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@60b252c5
                                                var var510 = local_2_REFERENCE.K.ey.ojcVec2setFLOATFLOAT(local_2_REFERENCE.K.ey,local_32_FLOAT,local_31_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@465861ea
                                                local_2_REFERENCE.K.VOIDinvertToOutojcMat22(local_2_REFERENCE.K,local_2_REFERENCE.normalMass);
                                                __label__ = 1139;
                                                continue $M_920_1139;
                                        }
                                }
                        }
                    }
                case 200 :
                // NORMAL
                    $S_200 : {
                    // NORMAL
                        var var102 = local_6_REFERENCE.pointCount; // type is INT value type is INT
                        if ((var102 > 0)) {
                            __label__ = 216;
                            continue $M_200_216;
                        }
                        }
                    var var103 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                    jlAssertionError.VOIDinit(var103);
                    throw var103;
            }
        }
    },

    VOIDwarmStart : function(thisRef) {
        var local_16_FLOAT = null; // type is FLOAT # of inits = 2
        var local_13_FLOAT = null; // type is FLOAT # of inits = 3
        var local_7_FLOAT = null; // type is FLOAT # of inits = 2
        var local_15_FLOAT = null; // type is FLOAT # of inits = 2
        var local_3_INT = null; // type is INT # of inits = 2
        var local_8_FLOAT = null; // type is FLOAT # of inits = 2
        var local_5_FLOAT = null; // type is FLOAT # of inits = 2
        var local_14_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_4_INT = null; // type is INT # of inits = 2
        var local_1_INT = null; // type is INT # of inits = 4
        var local_9_INT = null; // type is INT # of inits = 2
        var local_11_FLOAT = null; // type is FLOAT # of inits = 3
        var local_17_INT = null; // type is INT # of inits = 3
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_6_FLOAT = null; // type is FLOAT # of inits = 2
        var local_12_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_10_REFERENCE = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_1_INT = 0; // type is INT value type is INT
            __label__ = 2;
            }
        $L_2 : for (;;) {
            $S_2 : {
            // NORMAL
                var var2 = local_1_INT; // type is INT value type is INT
                var var3 = thisRef.m_count; // type is INT value type is INT
                if ((var2 >= var3)) {
                    return;
                }
                }
            $S_10 : {
            // NORMAL
                var var6 = thisRef.m_velocityConstraints.data[local_1_INT]; // type is REFERENCE value type is REFERENCE
                local_2_REFERENCE = var6; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@e8db7ea
                local_3_INT = local_2_REFERENCE.indexA; // type is INT value type is INT
                local_4_INT = local_2_REFERENCE.indexB; // type is INT value type is INT
                local_5_FLOAT = local_2_REFERENCE.invMassA; // type is FLOAT value type is FLOAT
                local_6_FLOAT = local_2_REFERENCE.invIA; // type is FLOAT value type is FLOAT
                local_7_FLOAT = local_2_REFERENCE.invMassB; // type is FLOAT value type is FLOAT
                local_8_FLOAT = local_2_REFERENCE.invIB; // type is FLOAT value type is FLOAT
                local_9_INT = local_2_REFERENCE.pointCount; // type is INT value type is INT
                var var38 = thisRef.m_velocities.data[local_3_INT]; // type is REFERENCE value type is REFERENCE
                local_10_REFERENCE = var38.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@158d3c50
                var var43 = thisRef.m_velocities.data[local_3_INT]; // type is REFERENCE value type is REFERENCE
                local_11_FLOAT = var43.w; // type is FLOAT value type is FLOAT
                var var49 = thisRef.m_velocities.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                local_12_REFERENCE = var49.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7bd6dcdd
                var var54 = thisRef.m_velocities.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                local_13_FLOAT = var54.w; // type is FLOAT value type is FLOAT
                local_14_REFERENCE = local_2_REFERENCE.normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6a489e15
                local_15_FLOAT = (1.0 * local_14_REFERENCE.y); // type is FLOAT value type is FLOAT
                local_16_FLOAT = (-1.0 * local_14_REFERENCE.x); // type is FLOAT value type is FLOAT
                local_17_INT = 0; // type is INT value type is INT
                __label__ = 132;
                }
            $L_132 : for (;;) {
                $S_132 : {
                // NORMAL
                    var var73 = local_17_INT; // type is INT value type is INT
                    var var74 = local_9_INT; // type is INT value type is INT
                    if ((var73 >= var74)) {
                        __label__ = 320;
                        break $S_132;
                    }
                    __label__ = 139;
                    }
                for(;;) switch (__label__) {
                    case 139 :
                    // NORMAL
                        var var78 = local_2_REFERENCE.points.data[local_17_INT]; // type is REFERENCE value type is REFERENCE
                        var local_18_REFERENCE = var78; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@711ce2e4
                        var local_19_FLOAT = ((local_15_FLOAT * local_18_REFERENCE.tangentImpulse) + (local_14_REFERENCE.x * local_18_REFERENCE.normalImpulse)); // type is FLOAT value type is FLOAT
                        var local_20_FLOAT = ((local_16_FLOAT * local_18_REFERENCE.tangentImpulse) + (local_14_REFERENCE.y * local_18_REFERENCE.normalImpulse)); // type is FLOAT value type is FLOAT
                        local_11_FLOAT = (local_11_FLOAT - (local_6_FLOAT * ((local_18_REFERENCE.rA.x * local_20_FLOAT) - (local_18_REFERENCE.rA.y * local_19_FLOAT)))); // type is FLOAT value type is FLOAT
                        var var120 = local_10_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@28a4e062
                        var var125 = (var120.x - (local_19_FLOAT * local_5_FLOAT)); // type is FLOAT value type is FLOAT
                        var120.x = var125;
                        var var126 = local_10_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@28a4e062
                        var var131 = (var126.y - (local_20_FLOAT * local_5_FLOAT)); // type is FLOAT value type is FLOAT
                        var126.y = var131;
                        local_13_FLOAT = (local_13_FLOAT + (local_8_FLOAT * ((local_18_REFERENCE.rB.x * local_20_FLOAT) - (local_18_REFERENCE.rB.y * local_19_FLOAT)))); // type is FLOAT value type is FLOAT
                        var var148 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@62d8b0e
                        var var153 = (var148.x + (local_19_FLOAT * local_7_FLOAT)); // type is FLOAT value type is FLOAT
                        var148.x = var153;
                        var var154 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@62d8b0e
                        var var159 = (var154.y + (local_20_FLOAT * local_7_FLOAT)); // type is FLOAT value type is FLOAT
                        var154.y = var159;
                        local_17_INT = (local_17_INT + 1); // type is INT value type is INT
                        __label__ = 132;
                        continue $L_132;
                    case 320 :
                    // NORMAL
                        var var162 = thisRef.m_velocities.data[local_3_INT]; // type is REFERENCE value type is REFERENCE
                        var var163 = local_11_FLOAT; // type is FLOAT value type is FLOAT
                        var162.w = var163;
                        var var166 = thisRef.m_velocities.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                        var var167 = local_13_FLOAT; // type is FLOAT value type is FLOAT
                        var166.w = var167;
                        local_1_INT = (local_1_INT + 1); // type is INT value type is INT
                        __label__ = 2;
                        continue $L_2;
                }
            }
        }
    },

    VOIDsolveVelocityConstraints : function(thisRef) {
        var local_17_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_10_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_14_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_8_FLOAT = null; // type is FLOAT # of inits = 2
        var local_11_FLOAT = null; // type is FLOAT # of inits = 8
        var local_19_FLOAT = null; // type is FLOAT # of inits = 6
        var local_16_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_4_INT = null; // type is INT # of inits = 2
        var local_7_FLOAT = null; // type is FLOAT # of inits = 2
        var local_21_FLOAT = null; // type is FLOAT # of inits = 2
        var local_15_FLOAT = null; // type is FLOAT # of inits = 2
        var local_13_FLOAT = null; // type is FLOAT # of inits = 8
        var var839 = null; // type is FLOAT # of inits = 2
        var local_1_INT = null; // type is INT # of inits = 4
        var local_3_INT = null; // type is INT # of inits = 2
        var local_6_FLOAT = null; // type is FLOAT # of inits = 2
        var local_9_INT = null; // type is INT # of inits = 2
        var local_16_INT = null; // type is INT # of inits = 3
        var local_18_FLOAT = null; // type is FLOAT # of inits = 5
        var local_5_FLOAT = null; // type is FLOAT # of inits = 2
        var local_12_REFERENCE = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_1_INT = 0; // type is INT value type is INT
            __label__ = 2;
            }
        $L_2 : for (;;) {
            $S_2 : {
            // NORMAL
                var var2 = local_1_INT; // type is INT value type is INT
                var var3 = thisRef.m_count; // type is INT value type is INT
                if ((var2 >= var3)) {
                    return;
                }
                }
            $S_10 : {
            // NORMAL
                var var6 = thisRef.m_velocityConstraints.data[local_1_INT]; // type is REFERENCE value type is REFERENCE
                local_2_REFERENCE = var6; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@42beca51
                local_3_INT = local_2_REFERENCE.indexA; // type is INT value type is INT
                local_4_INT = local_2_REFERENCE.indexB; // type is INT value type is INT
                local_5_FLOAT = local_2_REFERENCE.invMassA; // type is FLOAT value type is FLOAT
                local_6_FLOAT = local_2_REFERENCE.invMassB; // type is FLOAT value type is FLOAT
                local_7_FLOAT = local_2_REFERENCE.invIA; // type is FLOAT value type is FLOAT
                local_8_FLOAT = local_2_REFERENCE.invIB; // type is FLOAT value type is FLOAT
                local_9_INT = local_2_REFERENCE.pointCount; // type is INT value type is INT
                var var38 = thisRef.m_velocities.data[local_3_INT]; // type is REFERENCE value type is REFERENCE
                local_10_REFERENCE = var38.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6a85530a
                var var43 = thisRef.m_velocities.data[local_3_INT]; // type is REFERENCE value type is REFERENCE
                local_11_FLOAT = var43.w; // type is FLOAT value type is FLOAT
                var var49 = thisRef.m_velocities.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                local_12_REFERENCE = var49.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@37715675
                var var54 = thisRef.m_velocities.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                local_13_FLOAT = var54.w; // type is FLOAT value type is FLOAT
                local_14_REFERENCE = local_2_REFERENCE.normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6da7fd5b
                var var61 = thisRef.tangent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@30e3b7d0
                var var65 = (1.0 * local_2_REFERENCE.normal.y); // type is FLOAT value type is FLOAT
                var61.x = var65;
                var var66 = thisRef.tangent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@70bebfc5
                var var70 = (-1.0 * local_2_REFERENCE.normal.x); // type is FLOAT value type is FLOAT
                var66.y = var70;
                local_15_FLOAT = local_2_REFERENCE.friction; // type is FLOAT value type is FLOAT
                var var75 = ojdcContactSolver.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                if ((var75 != 0)) {
                    __label__ = 175;
                    break $S_10;
                }
                __label__ = 155;
                }
            $M_155_175 : for(;;) switch (__label__) {
                case 155 :
                // NORMAL
                    $S_155 : {
                    // NORMAL
                        var var76 = local_9_INT; // type is INT value type is INT
                        if ((var76 == 1)) {
                            __label__ = 175;
                            continue $M_155_175;
                        }
                        }
                    $S_161 : {
                    // NORMAL
                        var var77 = local_9_INT; // type is INT value type is INT
                        if ((var77 == 2)) {
                            __label__ = 175;
                            continue $M_155_175;
                        }
                        }
                    var var923 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                    jlAssertionError.VOIDinit(var923);
                    throw var923;
                case 175 :
                // NORMAL
                    $S_175 : {
                    // NORMAL
                        local_16_INT = 0; // type is INT value type is INT
                        __label__ = 178;
                        }
                    $L_178 : for (;;) {
                        $S_178 : {
                        // NORMAL
                            var var80 = local_16_INT; // type is INT value type is INT
                            var var81 = local_9_INT; // type is INT value type is INT
                            if ((var80 >= var81)) {
                                __label__ = 506;
                                break $S_178;
                            }
                            __label__ = 185;
                            }
                        for(;;) switch (__label__) {
                            case 185 :
                            // NORMAL
                                var var85 = local_2_REFERENCE.points.data[local_16_INT]; // type is REFERENCE value type is REFERENCE
                                local_17_REFERENCE = var85; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@369c47b3
                                var local_18_REFERENCE = local_17_REFERENCE.rA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4dc19d59
                                local_19_FLOAT = (((((-local_13_FLOAT) * local_17_REFERENCE.rB.y) + local_12_REFERENCE.x) - local_10_REFERENCE.x) + (local_11_FLOAT * local_18_REFERENCE.y)); // type is FLOAT value type is FLOAT
                                var local_20_FLOAT = ((((local_13_FLOAT * local_17_REFERENCE.rB.x) + local_12_REFERENCE.y) - local_10_REFERENCE.y) - (local_11_FLOAT * local_18_REFERENCE.x)); // type is FLOAT value type is FLOAT
                                local_21_FLOAT = (((local_19_FLOAT * thisRef.tangent.x) + (local_20_FLOAT * thisRef.tangent.y)) - local_2_REFERENCE.tangentSpeed); // type is FLOAT value type is FLOAT
                                var local_22_FLOAT = (local_17_REFERENCE.tangentMass * (-local_21_FLOAT)); // type is FLOAT value type is FLOAT
                                var local_23_FLOAT = (local_15_FLOAT * local_17_REFERENCE.normalImpulse); // type is FLOAT value type is FLOAT
                                var var161 = ojcMathUtils.FLOATclampFLOATFLOATFLOAT((local_17_REFERENCE.tangentImpulse + local_22_FLOAT),(-local_23_FLOAT),local_23_FLOAT); // type is FLOAT value type is FLOAT
                                var local_24_FLOAT = var161; // type is FLOAT value type is FLOAT
                                var local_22_FLOAT = (local_24_FLOAT - local_17_REFERENCE.tangentImpulse); // type is FLOAT value type is FLOAT
                                var var169 = local_17_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@369c47b3
                                var var170 = local_24_FLOAT; // type is FLOAT value type is FLOAT
                                var169.tangentImpulse = var170;
                                var local_25_FLOAT = (thisRef.tangent.x * local_22_FLOAT); // type is FLOAT value type is FLOAT
                                var local_26_FLOAT = (thisRef.tangent.y * local_22_FLOAT); // type is FLOAT value type is FLOAT
                                var var183 = local_10_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@27e2a310
                                var var188 = (var183.x - (local_25_FLOAT * local_5_FLOAT)); // type is FLOAT value type is FLOAT
                                var183.x = var188;
                                var var189 = local_10_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@27e2a310
                                var var194 = (var189.y - (local_26_FLOAT * local_5_FLOAT)); // type is FLOAT value type is FLOAT
                                var189.y = var194;
                                local_11_FLOAT = (local_11_FLOAT - (local_7_FLOAT * ((local_17_REFERENCE.rA.x * local_26_FLOAT) - (local_17_REFERENCE.rA.y * local_25_FLOAT)))); // type is FLOAT value type is FLOAT
                                var var211 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7eaec42d
                                var var216 = (var211.x + (local_25_FLOAT * local_6_FLOAT)); // type is FLOAT value type is FLOAT
                                var211.x = var216;
                                var var217 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7eaec42d
                                var var222 = (var217.y + (local_26_FLOAT * local_6_FLOAT)); // type is FLOAT value type is FLOAT
                                var217.y = var222;
                                local_13_FLOAT = (local_13_FLOAT + (local_8_FLOAT * ((local_17_REFERENCE.rB.x * local_26_FLOAT) - (local_17_REFERENCE.rB.y * local_25_FLOAT)))); // type is FLOAT value type is FLOAT
                                local_16_INT = (local_16_INT + 1); // type is INT value type is INT
                                __label__ = 178;
                                continue $L_178;
                            case 506 :
                            // NORMAL
                                $S_506 : {
                                // NORMAL
                                    var var240 = local_2_REFERENCE.pointCount; // type is INT value type is INT
                                    if ((var240 != 1)) {
                                        __label__ = 820;
                                        break $S_506;
                                    }
                                    __label__ = 514;
                                    }
                                $M_820_514 : for(;;) switch (__label__) {
                                    case 514 :
                                    // NORMAL
                                        $S_514 : {
                                        // NORMAL
                                            var var773 = local_2_REFERENCE.points.data[0]; // type is REFERENCE value type is REFERENCE
                                            local_16_REFERENCE = var773; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3690548b
                                            var local_17_FLOAT = (((((-local_13_FLOAT) * local_16_REFERENCE.rB.y) + local_12_REFERENCE.x) - local_10_REFERENCE.x) + (local_11_FLOAT * local_16_REFERENCE.rA.y)); // type is FLOAT value type is FLOAT
                                            local_18_FLOAT = ((((local_13_FLOAT * local_16_REFERENCE.rB.x) + local_12_REFERENCE.y) - local_10_REFERENCE.y) - (local_11_FLOAT * local_16_REFERENCE.rA.x)); // type is FLOAT value type is FLOAT
                                            local_19_FLOAT = ((local_17_FLOAT * local_14_REFERENCE.x) + (local_18_FLOAT * local_14_REFERENCE.y)); // type is FLOAT value type is FLOAT
                                            var local_20_FLOAT = ((-local_16_REFERENCE.normalMass) * (local_19_FLOAT - local_16_REFERENCE.velocityBias)); // type is FLOAT value type is FLOAT
                                            local_21_FLOAT = (local_16_REFERENCE.normalImpulse + local_20_FLOAT); // type is FLOAT value type is FLOAT
                                            var var836 = local_21_FLOAT; // type is FLOAT value type is FLOAT
                                            if ((var836 <= 0.0)) {
                                                __label__ = 655;
                                                break $S_514;
                                            }
                                            __label__ = 650;
                                            }
                                        $M_655_650 : for(;;) switch (__label__) {
                                            case 650 :
                                            // NORMAL
                                                var839 = local_21_FLOAT; // type is FLOAT value type is FLOAT
                                                break $M_655_650;
                                            case 655 :
                                            // NORMAL
                                                var839 = 0.0; // type is FLOAT value type is FLOAT
                                                break $M_655_650;
                                        }
                                        var local_22_FLOAT = var839; // type is FLOAT value type is FLOAT
                                        var local_20_FLOAT = (local_22_FLOAT - local_16_REFERENCE.normalImpulse); // type is FLOAT value type is FLOAT
                                        var var846 = local_16_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3e9760d8
                                        var var847 = local_22_FLOAT; // type is FLOAT value type is FLOAT
                                        var846.normalImpulse = var847;
                                        var local_23_FLOAT = (local_14_REFERENCE.x * local_20_FLOAT); // type is FLOAT value type is FLOAT
                                        var local_24_FLOAT = (local_14_REFERENCE.y * local_20_FLOAT); // type is FLOAT value type is FLOAT
                                        var var858 = local_10_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@27e2a310
                                        var var863 = (var858.x - (local_23_FLOAT * local_5_FLOAT)); // type is FLOAT value type is FLOAT
                                        var858.x = var863;
                                        var var864 = local_10_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@27e2a310
                                        var var869 = (var864.y - (local_24_FLOAT * local_5_FLOAT)); // type is FLOAT value type is FLOAT
                                        var864.y = var869;
                                        local_11_FLOAT = (local_11_FLOAT - (local_7_FLOAT * ((local_16_REFERENCE.rA.x * local_24_FLOAT) - (local_16_REFERENCE.rA.y * local_23_FLOAT)))); // type is FLOAT value type is FLOAT
                                        var var886 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7eaec42d
                                        var var891 = (var886.x + (local_23_FLOAT * local_6_FLOAT)); // type is FLOAT value type is FLOAT
                                        var886.x = var891;
                                        var var892 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7eaec42d
                                        var var897 = (var892.y + (local_24_FLOAT * local_6_FLOAT)); // type is FLOAT value type is FLOAT
                                        var892.y = var897;
                                        local_13_FLOAT = (local_13_FLOAT + (local_8_FLOAT * ((local_16_REFERENCE.rB.x * local_24_FLOAT) - (local_16_REFERENCE.rB.y * local_23_FLOAT)))); // type is FLOAT value type is FLOAT
                                        break $M_820_514;
                                    case 820 :
                                    // NORMAL
                                        $S_820 : {
                                        // NORMAL
                                            var var243 = local_2_REFERENCE.points.data[0]; // type is REFERENCE value type is REFERENCE
                                            local_16_REFERENCE = var243; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3e9760d8
                                            var var247 = local_2_REFERENCE.points.data[1]; // type is REFERENCE value type is REFERENCE
                                            local_17_REFERENCE = var247; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@47717528
                                            var var248 = thisRef.a; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1f5efc9f
                                            var var250 = local_16_REFERENCE.normalImpulse; // type is FLOAT value type is FLOAT
                                            var248.x = var250;
                                            var var251 = thisRef.a; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@32ae8593
                                            var var253 = local_17_REFERENCE.normalImpulse; // type is FLOAT value type is FLOAT
                                            var251.y = var253;
                                            var var254 = ojdcContactSolver.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                                            if ((var254 != 0)) {
                                                __label__ = 898;
                                                break $S_820;
                                            }
                                            __label__ = 866;
                                            }
                                        $M_898_866 : for(;;) switch (__label__) {
                                            case 898 :
                                            // NORMAL
                                                $S_898 : {
                                                // NORMAL
                                                    var var261 = thisRef.dv1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@37eb5494
                                                    var var279 = (((((-local_13_FLOAT) * local_16_REFERENCE.rB.y) + local_12_REFERENCE.x) - local_10_REFERENCE.x) + (local_11_FLOAT * local_16_REFERENCE.rA.y)); // type is FLOAT value type is FLOAT
                                                    var261.x = var279;
                                                    var var280 = thisRef.dv1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@76812c65
                                                    var var297 = ((((local_13_FLOAT * local_16_REFERENCE.rB.x) + local_12_REFERENCE.y) - local_10_REFERENCE.y) - (local_11_FLOAT * local_16_REFERENCE.rA.x)); // type is FLOAT value type is FLOAT
                                                    var280.y = var297;
                                                    var var298 = thisRef.dv2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1e539c2e
                                                    var var316 = (((((-local_13_FLOAT) * local_17_REFERENCE.rB.y) + local_12_REFERENCE.x) - local_10_REFERENCE.x) + (local_11_FLOAT * local_17_REFERENCE.rA.y)); // type is FLOAT value type is FLOAT
                                                    var298.x = var316;
                                                    var var317 = thisRef.dv2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5897006a
                                                    var var334 = ((((local_13_FLOAT * local_17_REFERENCE.rB.x) + local_12_REFERENCE.y) - local_10_REFERENCE.y) - (local_11_FLOAT * local_17_REFERENCE.rA.x)); // type is FLOAT value type is FLOAT
                                                    var317.y = var334;
                                                    local_18_FLOAT = ((thisRef.dv1.x * local_14_REFERENCE.x) + (thisRef.dv1.y * local_14_REFERENCE.y)); // type is FLOAT value type is FLOAT
                                                    local_19_FLOAT = ((thisRef.dv2.x * local_14_REFERENCE.x) + (thisRef.dv2.y * local_14_REFERENCE.y)); // type is FLOAT value type is FLOAT
                                                    var var360 = thisRef.b; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@35b5b018
                                                    var var364 = (local_18_FLOAT - local_16_REFERENCE.velocityBias); // type is FLOAT value type is FLOAT
                                                    var360.x = var364;
                                                    var var365 = thisRef.b; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4a2850cf
                                                    var var369 = (local_19_FLOAT - local_17_REFERENCE.velocityBias); // type is FLOAT value type is FLOAT
                                                    var365.y = var369;
                                                    var local_20_REFERENCE = local_2_REFERENCE.K; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@48180748
                                                    var var373 = thisRef.b; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@286cda71
                                                    var var388 = (var373.x - ((local_20_REFERENCE.ex.x * thisRef.a.x) + (local_20_REFERENCE.ey.x * thisRef.a.y))); // type is FLOAT value type is FLOAT
                                                    var373.x = var388;
                                                    var var389 = thisRef.b; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@30c19a14
                                                    var var404 = (var389.y - ((local_20_REFERENCE.ex.y * thisRef.a.x) + (local_20_REFERENCE.ey.y * thisRef.a.y))); // type is FLOAT value type is FLOAT
                                                    var389.y = var404;
                                                    ojcMat22.VOIDmulToOutUnsafeojcMat22ojcVec2ojcVec2(local_2_REFERENCE.normalMass,thisRef.b,thisRef.x);
                                                    var var409 = thisRef.x; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@38670aeb
                                                    var var411 = (var409.x * -1.0); // type is FLOAT value type is FLOAT
                                                    var409.x = var411;
                                                    var var412 = thisRef.x; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@304d78e8
                                                    var var414 = (var412.y * -1.0); // type is FLOAT value type is FLOAT
                                                    var412.y = var414;
                                                    var var416 = thisRef.x.x; // type is FLOAT value type is FLOAT
                                                    if ((var416 < 0.0)) {
                                                        __label__ = 1544;
                                                        break $S_898;
                                                    }
                                                    __label__ = 1307;
                                                    }
                                                $M_1544_1307 : for(;;) switch (__label__) {
                                                    case 1544 :
                                                    // NORMAL
                                                        $S_1544 : {
                                                        // NORMAL
                                                            var var493 = thisRef.x; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7ebc83c2
                                                            var var499 = ((-local_16_REFERENCE.normalMass) * thisRef.b.x); // type is FLOAT value type is FLOAT
                                                            var493.x = var499;
                                                            var var500 = thisRef.x; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4211b73b
                                                            var500.y = 0.0;
                                                            local_18_FLOAT = 0.0; // type is FLOAT value type is FLOAT
                                                            local_19_FLOAT = ((local_2_REFERENCE.K.ex.y * thisRef.x.x) + thisRef.b.y); // type is FLOAT value type is FLOAT
                                                            var var514 = thisRef.x.x; // type is FLOAT value type is FLOAT
                                                            if ((var514 < 0.0)) {
                                                                __label__ = 1848;
                                                                break $S_1544;
                                                            }
                                                            __label__ = 1616;
                                                            }
                                                        $M_1616_1848 : for(;;) switch (__label__) {
                                                            case 1848 :
                                                            // NORMAL
                                                                $S_1848 : {
                                                                // NORMAL
                                                                    var var518 = thisRef.x; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@42a1ddc0
                                                                    var518.x = 0.0;
                                                                    var var519 = thisRef.x; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@19f07744
                                                                    var var525 = ((-local_17_REFERENCE.normalMass) * thisRef.b.y); // type is FLOAT value type is FLOAT
                                                                    var519.y = var525;
                                                                    local_18_FLOAT = ((local_2_REFERENCE.K.ey.x * thisRef.x.y) + thisRef.b.x); // type is FLOAT value type is FLOAT
                                                                    local_19_FLOAT = 0.0; // type is FLOAT value type is FLOAT
                                                                    var var539 = thisRef.x.y; // type is FLOAT value type is FLOAT
                                                                    if ((var539 < 0.0)) {
                                                                        __label__ = 2152;
                                                                        break $S_1848;
                                                                    }
                                                                    __label__ = 1920;
                                                                    }
                                                                $M_2152_1920 : for(;;) switch (__label__) {
                                                                    case 2152 :
                                                                    // NORMAL
                                                                        $S_2152 : {
                                                                        // NORMAL
                                                                            var var543 = thisRef.x; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@348452b
                                                                            var543.x = 0.0;
                                                                            var var544 = thisRef.x; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4c2f8216
                                                                            var544.y = 0.0;
                                                                            local_18_FLOAT = thisRef.b.x; // type is FLOAT value type is FLOAT
                                                                            local_19_FLOAT = thisRef.b.y; // type is FLOAT value type is FLOAT
                                                                            var var551 = local_18_FLOAT; // type is FLOAT value type is FLOAT
                                                                            if ((var551 < 0.0)) {
                                                                                break $M_820_514;
                                                                            }
                                                                            }
                                                                        $S_2193 : {
                                                                        // NORMAL
                                                                            var var625 = local_19_FLOAT; // type is FLOAT value type is FLOAT
                                                                            if ((var625 < 0.0)) {
                                                                                break $M_820_514;
                                                                            }
                                                                            }
                                                                        var var701 = thisRef.d.ojcVec2setojcVec2(thisRef.d,thisRef.x); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@ac098e
                                                                        var var703 = var701.ojcVec2subLocalojcVec2(var701,thisRef.a); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1a7c1488
                                                                        var var706 = thisRef.P1.ojcVec2setojcVec2(thisRef.P1,local_14_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5b5c7bf1
                                                                        var var709 = var706.ojcVec2mulLocalFLOAT(var706,thisRef.d.x); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6bd36dbe
                                                                        var var712 = thisRef.P2.ojcVec2setojcVec2(thisRef.P2,local_14_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@b53f933
                                                                        var var715 = var712.ojcVec2mulLocalFLOAT(var712,thisRef.d.y); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@71f17485
                                                                        var var718 = thisRef.temp1.ojcVec2setojcVec2(thisRef.temp1,thisRef.P1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@494a0ab9
                                                                        var var720 = var718.ojcVec2addLocalojcVec2(var718,thisRef.P2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@390420b3
                                                                        var var723 = thisRef.temp2.ojcVec2setojcVec2(thisRef.temp2,thisRef.temp1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2d0accc1
                                                                        var var725 = var723.ojcVec2mulLocalFLOAT(var723,local_5_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@57a5c0b9
                                                                        var var728 = local_10_REFERENCE.ojcVec2subLocalojcVec2(local_10_REFERENCE,thisRef.temp2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4ea30736
                                                                        var var731 = thisRef.temp2.ojcVec2setojcVec2(thisRef.temp2,thisRef.temp1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@563aa7e9
                                                                        var var733 = var731.ojcVec2mulLocalFLOAT(var731,local_6_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2d2d052b
                                                                        var var736 = local_12_REFERENCE.ojcVec2addLocalojcVec2(local_12_REFERENCE,thisRef.temp2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5474a83f
                                                                        var var737 = local_11_FLOAT; // type is FLOAT value type is FLOAT
                                                                        var var738 = local_7_FLOAT; // type is FLOAT value type is FLOAT
                                                                        var var742 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_16_REFERENCE.rA,thisRef.P1); // type is FLOAT value type is FLOAT
                                                                        var var746 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_17_REFERENCE.rA,thisRef.P2); // type is FLOAT value type is FLOAT
                                                                        local_11_FLOAT = (var737 - (var738 * (var742 + var746))); // type is FLOAT value type is FLOAT
                                                                        var var751 = local_13_FLOAT; // type is FLOAT value type is FLOAT
                                                                        var var752 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                                                                        var var756 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_16_REFERENCE.rB,thisRef.P1); // type is FLOAT value type is FLOAT
                                                                        var var760 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_17_REFERENCE.rB,thisRef.P2); // type is FLOAT value type is FLOAT
                                                                        local_13_FLOAT = (var751 + (var752 * (var756 + var760))); // type is FLOAT value type is FLOAT
                                                                        var var765 = local_16_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3e9760d8
                                                                        var var767 = thisRef.x.x; // type is FLOAT value type is FLOAT
                                                                        var765.normalImpulse = var767;
                                                                        var var768 = local_17_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@369c47b3
                                                                        var var770 = thisRef.x.y; // type is FLOAT value type is FLOAT
                                                                        var768.normalImpulse = var770;
                                                                        break $M_820_514;
                                                                    case 1920 :
                                                                    // NORMAL
                                                                        $S_1920 : {
                                                                        // NORMAL
                                                                            var var541 = local_18_FLOAT; // type is FLOAT value type is FLOAT
                                                                            if ((var541 < 0.0)) {
                                                                                __label__ = 2152;
                                                                                continue $M_2152_1920;
                                                                            }
                                                                            }
                                                                        var var629 = thisRef.d.ojcVec2setojcVec2(thisRef.d,thisRef.x); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2389f30
                                                                        var var631 = var629.ojcVec2subLocalojcVec2(var629,thisRef.a); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1be7571
                                                                        var var634 = thisRef.P1.ojcVec2setojcVec2(thisRef.P1,local_14_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@44ff3c30
                                                                        var var637 = var634.ojcVec2mulLocalFLOAT(var634,thisRef.d.x); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@35bb41c0
                                                                        var var640 = thisRef.P2.ojcVec2setojcVec2(thisRef.P2,local_14_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@73bc8958
                                                                        var var643 = var640.ojcVec2mulLocalFLOAT(var640,thisRef.d.y); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1db6fa3
                                                                        var var646 = thisRef.temp1.ojcVec2setojcVec2(thisRef.temp1,thisRef.P1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3cf8cd14
                                                                        var var648 = var646.ojcVec2addLocalojcVec2(var646,thisRef.P2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@53223e0a
                                                                        var var651 = thisRef.temp2.ojcVec2setojcVec2(thisRef.temp2,thisRef.temp1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@44438b7f
                                                                        var var653 = var651.ojcVec2mulLocalFLOAT(var651,local_5_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1e3f4223
                                                                        var var656 = local_10_REFERENCE.ojcVec2subLocalojcVec2(local_10_REFERENCE,thisRef.temp2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6455bc9d
                                                                        var var659 = thisRef.temp2.ojcVec2setojcVec2(thisRef.temp2,thisRef.temp1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@26c51c73
                                                                        var var661 = var659.ojcVec2mulLocalFLOAT(var659,local_6_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7e0563a7
                                                                        var var664 = local_12_REFERENCE.ojcVec2addLocalojcVec2(local_12_REFERENCE,thisRef.temp2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1acf181e
                                                                        var var665 = local_11_FLOAT; // type is FLOAT value type is FLOAT
                                                                        var var666 = local_7_FLOAT; // type is FLOAT value type is FLOAT
                                                                        var var670 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_16_REFERENCE.rA,thisRef.P1); // type is FLOAT value type is FLOAT
                                                                        var var674 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_17_REFERENCE.rA,thisRef.P2); // type is FLOAT value type is FLOAT
                                                                        local_11_FLOAT = (var665 - (var666 * (var670 + var674))); // type is FLOAT value type is FLOAT
                                                                        var var679 = local_13_FLOAT; // type is FLOAT value type is FLOAT
                                                                        var var680 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                                                                        var var684 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_16_REFERENCE.rB,thisRef.P1); // type is FLOAT value type is FLOAT
                                                                        var var688 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_17_REFERENCE.rB,thisRef.P2); // type is FLOAT value type is FLOAT
                                                                        local_13_FLOAT = (var679 + (var680 * (var684 + var688))); // type is FLOAT value type is FLOAT
                                                                        var var693 = local_16_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3e9760d8
                                                                        var var695 = thisRef.x.x; // type is FLOAT value type is FLOAT
                                                                        var693.normalImpulse = var695;
                                                                        var var696 = local_17_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@369c47b3
                                                                        var var698 = thisRef.x.y; // type is FLOAT value type is FLOAT
                                                                        var696.normalImpulse = var698;
                                                                        break $M_820_514;
                                                                }
                                                            case 1616 :
                                                            // NORMAL
                                                                $S_1616 : {
                                                                // NORMAL
                                                                    var var516 = local_19_FLOAT; // type is FLOAT value type is FLOAT
                                                                    if ((var516 < 0.0)) {
                                                                        __label__ = 1848;
                                                                        continue $M_1616_1848;
                                                                    }
                                                                    }
                                                                var var555 = thisRef.d.ojcVec2setojcVec2(thisRef.d,thisRef.x); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5337ee8e
                                                                var var557 = var555.ojcVec2subLocalojcVec2(var555,thisRef.a); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5d9f561f
                                                                var var560 = thisRef.P1.ojcVec2setojcVec2(thisRef.P1,local_14_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@8d21e50
                                                                var var563 = var560.ojcVec2mulLocalFLOAT(var560,thisRef.d.x); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6a3ff8bc
                                                                var var566 = thisRef.P2.ojcVec2setojcVec2(thisRef.P2,local_14_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@61038eb
                                                                var var569 = var566.ojcVec2mulLocalFLOAT(var566,thisRef.d.y); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2198a998
                                                                var var572 = thisRef.temp1.ojcVec2setojcVec2(thisRef.temp1,thisRef.P1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@39201365
                                                                var var574 = var572.ojcVec2addLocalojcVec2(var572,thisRef.P2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2ccfe6e5
                                                                var var577 = thisRef.temp2.ojcVec2setojcVec2(thisRef.temp2,thisRef.temp1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2b1f44f7
                                                                var var579 = var577.ojcVec2mulLocalFLOAT(var577,local_5_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4f2fec65
                                                                var var582 = local_10_REFERENCE.ojcVec2subLocalojcVec2(local_10_REFERENCE,thisRef.temp2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@762d65de
                                                                var var585 = thisRef.temp2.ojcVec2setojcVec2(thisRef.temp2,thisRef.temp1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@25064d30
                                                                var var587 = var585.ojcVec2mulLocalFLOAT(var585,local_6_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@746f8d9b
                                                                var var590 = local_12_REFERENCE.ojcVec2addLocalojcVec2(local_12_REFERENCE,thisRef.temp2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@44130bb7
                                                                var var591 = local_11_FLOAT; // type is FLOAT value type is FLOAT
                                                                var var592 = local_7_FLOAT; // type is FLOAT value type is FLOAT
                                                                var var596 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_16_REFERENCE.rA,thisRef.P1); // type is FLOAT value type is FLOAT
                                                                var var600 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_17_REFERENCE.rA,thisRef.P2); // type is FLOAT value type is FLOAT
                                                                local_11_FLOAT = (var591 - (var592 * (var596 + var600))); // type is FLOAT value type is FLOAT
                                                                var var605 = local_13_FLOAT; // type is FLOAT value type is FLOAT
                                                                var var606 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                                                                var var610 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_16_REFERENCE.rB,thisRef.P1); // type is FLOAT value type is FLOAT
                                                                var var614 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_17_REFERENCE.rB,thisRef.P2); // type is FLOAT value type is FLOAT
                                                                local_13_FLOAT = (var605 + (var606 * (var610 + var614))); // type is FLOAT value type is FLOAT
                                                                var var619 = local_16_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3e9760d8
                                                                var var621 = thisRef.x.x; // type is FLOAT value type is FLOAT
                                                                var619.normalImpulse = var621;
                                                                var var622 = local_17_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@369c47b3
                                                                var var624 = thisRef.x.y; // type is FLOAT value type is FLOAT
                                                                var622.normalImpulse = var624;
                                                                break $M_820_514;
                                                        }
                                                    case 1307 :
                                                    // NORMAL
                                                        $S_1307 : {
                                                        // NORMAL
                                                            var var419 = thisRef.x.y; // type is FLOAT value type is FLOAT
                                                            if ((var419 < 0.0)) {
                                                                __label__ = 1544;
                                                                continue $M_1544_1307;
                                                            }
                                                            }
                                                        var var423 = thisRef.d.ojcVec2setojcVec2(thisRef.d,thisRef.x); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@598d957e
                                                        var var425 = var423.ojcVec2subLocalojcVec2(var423,thisRef.a); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4ef52cb2
                                                        var var428 = thisRef.P1.ojcVec2setojcVec2(thisRef.P1,local_14_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@46fe63a2
                                                        var var431 = var428.ojcVec2mulLocalFLOAT(var428,thisRef.d.x); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1a6c8679
                                                        var var434 = thisRef.P2.ojcVec2setojcVec2(thisRef.P2,local_14_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2fffc62f
                                                        var var437 = var434.ojcVec2mulLocalFLOAT(var434,thisRef.d.y); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4808ffde
                                                        var var440 = thisRef.temp1.ojcVec2setojcVec2(thisRef.temp1,thisRef.P1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7dde760e
                                                        var var442 = var440.ojcVec2addLocalojcVec2(var440,thisRef.P2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3ff7882
                                                        var var445 = thisRef.temp2.ojcVec2setojcVec2(thisRef.temp2,thisRef.temp1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5260186c
                                                        var var447 = var445.ojcVec2mulLocalFLOAT(var445,local_5_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5d19fbf1
                                                        var var450 = local_10_REFERENCE.ojcVec2subLocalojcVec2(local_10_REFERENCE,thisRef.temp2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5379985a
                                                        var var453 = thisRef.temp2.ojcVec2setojcVec2(thisRef.temp2,thisRef.temp1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2b3ac1df
                                                        var var455 = var453.ojcVec2mulLocalFLOAT(var453,local_6_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@794b1fac
                                                        var var458 = local_12_REFERENCE.ojcVec2addLocalojcVec2(local_12_REFERENCE,thisRef.temp2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6b1fb507
                                                        var var459 = local_11_FLOAT; // type is FLOAT value type is FLOAT
                                                        var var460 = local_7_FLOAT; // type is FLOAT value type is FLOAT
                                                        var var464 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_16_REFERENCE.rA,thisRef.P1); // type is FLOAT value type is FLOAT
                                                        var var468 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_17_REFERENCE.rA,thisRef.P2); // type is FLOAT value type is FLOAT
                                                        local_11_FLOAT = (var459 - (var460 * (var464 + var468))); // type is FLOAT value type is FLOAT
                                                        var var473 = local_13_FLOAT; // type is FLOAT value type is FLOAT
                                                        var var474 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                                                        var var478 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_16_REFERENCE.rB,thisRef.P1); // type is FLOAT value type is FLOAT
                                                        var var482 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_17_REFERENCE.rB,thisRef.P2); // type is FLOAT value type is FLOAT
                                                        local_13_FLOAT = (var473 + (var474 * (var478 + var482))); // type is FLOAT value type is FLOAT
                                                        var var487 = local_16_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3e9760d8
                                                        var var489 = thisRef.x.x; // type is FLOAT value type is FLOAT
                                                        var487.normalImpulse = var489;
                                                        var var490 = local_17_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@369c47b3
                                                        var var492 = thisRef.x.y; // type is FLOAT value type is FLOAT
                                                        var490.normalImpulse = var492;
                                                        break $M_820_514;
                                                }
                                            case 866 :
                                            // NORMAL
                                                $S_866 : {
                                                // NORMAL
                                                    var var256 = thisRef.a.x; // type is FLOAT value type is FLOAT
                                                    if ((var256 < 0.0)) {
                                                        __label__ = 890;
                                                        break $S_866;
                                                    }
                                                    __label__ = 878;
                                                    }
                                                $M_878_890 : for(;;) switch (__label__) {
                                                    case 890 :
                                                    // NORMAL
                                                        var var922 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                                        jlAssertionError.VOIDinit(var922);
                                                        throw var922;
                                                    case 878 :
                                                    // NORMAL
                                                        var var259 = thisRef.a.y; // type is FLOAT value type is FLOAT
                                                        if ((var259 >= 0.0)) {
                                                            __label__ = 898;
                                                            continue $M_898_866;
                                                        }
                                                        __label__ = 890;
                                                        continue $M_878_890;
                                                }
                                        }
                                }
                                var var916 = thisRef.m_velocities.data[local_3_INT]; // type is REFERENCE value type is REFERENCE
                                var var917 = local_11_FLOAT; // type is FLOAT value type is FLOAT
                                var916.w = var917;
                                var var920 = thisRef.m_velocities.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                                var var921 = local_13_FLOAT; // type is FLOAT value type is FLOAT
                                var920.w = var921;
                                local_1_INT = (local_1_INT + 1); // type is INT value type is INT
                                __label__ = 2;
                                continue $L_2;
                        }
                    }
            }
        }
    },

    VOIDstoreImpulses : function(thisRef) {
        var local_4_INT = null; // type is INT # of inits = 3
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_1_INT = null; // type is INT # of inits = 4
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_1_INT = 0; // type is INT value type is INT
            __label__ = 2;
            }
        $L_2 : for (;;) {
            $S_2 : {
            // NORMAL
                var var2 = local_1_INT; // type is INT value type is INT
                var var3 = thisRef.m_count; // type is INT value type is INT
                if ((var2 >= var3)) {
                    return;
                }
                }
            $S_10 : {
            // NORMAL
                var var6 = thisRef.m_velocityConstraints.data[local_1_INT]; // type is REFERENCE value type is REFERENCE
                local_2_REFERENCE = var6; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@7330273a
                var var11 = thisRef.m_contacts.data[local_2_REFERENCE.contactIndex]; // type is REFERENCE value type is REFERENCE
                var var12 = var11.ojcManifoldgetManifold(var11); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@443abe91
                local_3_REFERENCE = var12; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1ed6c08
                local_4_INT = 0; // type is INT value type is INT
                __label__ = 33;
                }
            $L_33 : for (;;) {
                $S_33 : {
                // NORMAL
                    var var16 = local_4_INT; // type is INT value type is INT
                    var var18 = local_2_REFERENCE.pointCount; // type is INT value type is INT
                    if ((var16 >= var18)) {
                        __label__ = 88;
                        break $S_33;
                    }
                    __label__ = 42;
                    }
                for(;;) switch (__label__) {
                    case 88 :
                    // NORMAL
                        local_1_INT = (local_1_INT + 1); // type is INT value type is INT
                        __label__ = 2;
                        continue $L_2;
                    case 42 :
                    // NORMAL
                        var var22 = local_3_REFERENCE.points.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                        var var26 = local_2_REFERENCE.points.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                        var var27 = var26.normalImpulse; // type is FLOAT value type is FLOAT
                        var22.normalImpulse = var27;
                        var var31 = local_3_REFERENCE.points.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                        var var35 = local_2_REFERENCE.points.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                        var var36 = var35.tangentImpulse; // type is FLOAT value type is FLOAT
                        var31.tangentImpulse = var36;
                        local_4_INT = (local_4_INT + 1); // type is INT value type is INT
                        __label__ = 33;
                        continue $L_33;
                }
            }
        }
    },

    BOOLEANsolvePositionConstraints : function(thisRef) {
        var local_7_FLOAT = null; // type is FLOAT # of inits = 2
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_19_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_12_INT = null; // type is INT # of inits = 2
        var local_9_FLOAT = null; // type is FLOAT # of inits = 2
        var local_6_FLOAT = null; // type is FLOAT # of inits = 2
        var local_11_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_16_FLOAT = null; // type is FLOAT # of inits = 3
        var local_4_INT = null; // type is INT # of inits = 2
        var var179 = null; // type is FLOAT # of inits = 2
        var local_13_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_2_INT = null; // type is INT # of inits = 4
        var local_15_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_25_FLOAT = null; // type is FLOAT # of inits = 1
        var local_22_FLOAT = null; // type is FLOAT # of inits = 1
        var local_1_FLOAT = null; // type is FLOAT # of inits = 4
        var local_10_FLOAT = null; // type is FLOAT # of inits = 2
        var local_5_INT = null; // type is INT # of inits = 2
        var local_8_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_14_FLOAT = null; // type is FLOAT # of inits = 3
        var local_17_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_1_FLOAT = 0.0; // type is FLOAT value type is FLOAT
            local_2_INT = 0; // type is INT value type is INT
            __label__ = 4;
            }
        $L_4 : for (;;) {
            $S_4 : {
            // NORMAL
                var var4 = local_2_INT; // type is INT value type is INT
                var var5 = thisRef.m_count; // type is INT value type is INT
                if ((var4 >= var5)) {
                    __label__ = 522;
                    break $S_4;
                }
                __label__ = 12;
                }
            for(;;) switch (__label__) {
                case 522 :
                // NORMAL
                    $S_522 : {
                    // NORMAL
                        var var78 = local_1_FLOAT; // type is FLOAT value type is FLOAT
                        if ((var78 < -0.015)) {
                            __label__ = 533;
                            break $S_522;
                        }
                        __label__ = 529;
                        }
                    for(;;) switch (__label__) {
                        case 533 :
                        // NORMAL
                            var var80 = 0; // type is INT value type is INT
                            return var80;
                        case 529 :
                        // NORMAL
                            var var80 = 1; // type is INT value type is INT
                            return var80;
                    }
                case 12 :
                // NORMAL
                    $S_12 : {
                    // NORMAL
                        var var8 = thisRef.m_positionConstraints.data[local_2_INT]; // type is REFERENCE value type is REFERENCE
                        local_3_REFERENCE = var8; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@18c34dac
                        local_4_INT = local_3_REFERENCE.indexA; // type is INT value type is INT
                        local_5_INT = local_3_REFERENCE.indexB; // type is INT value type is INT
                        local_6_FLOAT = local_3_REFERENCE.invMassA; // type is FLOAT value type is FLOAT
                        local_7_FLOAT = local_3_REFERENCE.invIA; // type is FLOAT value type is FLOAT
                        local_8_REFERENCE = local_3_REFERENCE.localCenterA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3884ce2c
                        local_9_FLOAT = local_3_REFERENCE.invMassB; // type is FLOAT value type is FLOAT
                        local_10_FLOAT = local_3_REFERENCE.invIB; // type is FLOAT value type is FLOAT
                        local_11_REFERENCE = local_3_REFERENCE.localCenterB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1e347dde
                        local_12_INT = local_3_REFERENCE.pointCount; // type is INT value type is INT
                        var var46 = thisRef.m_positions.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                        local_13_REFERENCE = var46.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@25f34d85
                        var var51 = thisRef.m_positions.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                        local_14_FLOAT = var51.a; // type is FLOAT value type is FLOAT
                        var var57 = thisRef.m_positions.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                        local_15_REFERENCE = var57.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@38d43d6e
                        var var62 = thisRef.m_positions.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                        local_16_FLOAT = var62.a; // type is FLOAT value type is FLOAT
                        local_17_INT = 0; // type is INT value type is INT
                        __label__ = 124;
                        }
                    $L_124 : for (;;) {
                        $S_124 : {
                        // NORMAL
                            var var68 = local_17_INT; // type is INT value type is INT
                            var var69 = local_12_INT; // type is INT value type is INT
                            if ((var68 >= var69)) {
                                __label__ = 492;
                                break $S_124;
                            }
                            __label__ = 131;
                            }
                        for(;;) switch (__label__) {
                            case 131 :
                            // NORMAL
                                $S_131 : {
                                // NORMAL
                                    var var84 = thisRef.xfA.q.ojcRotsetFLOAT(thisRef.xfA.q,local_14_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@26bf71f6
                                    var var88 = thisRef.xfB.q.ojcRotsetFLOAT(thisRef.xfB.q,local_16_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1bd82272
                                    ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(thisRef.xfA.q,local_8_REFERENCE,thisRef.xfA.p);
                                    var var96 = thisRef.xfA.p.ojcVec2negateLocal(thisRef.xfA.p); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2478cbe9
                                    var var98 = var96.ojcVec2addLocalojcVec2(var96,local_13_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3d5ead45
                                    ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(thisRef.xfB.q,local_11_REFERENCE,thisRef.xfB.p);
                                    var var106 = thisRef.xfB.p.ojcVec2negateLocal(thisRef.xfB.p); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@60b34bd9
                                    var var108 = var106.ojcVec2addLocalojcVec2(var106,local_15_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3a223e0f
                                    var local_18_REFERENCE = thisRef.psolver; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@58679d21
                                    local_18_REFERENCE.VOIDinitializeojdcContactPositionConstraintojcTransformojcTransformINT(local_18_REFERENCE,local_3_REFERENCE,thisRef.xfA,thisRef.xfB,local_17_INT);
                                    local_19_REFERENCE = local_18_REFERENCE.normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@101b27ed
                                    var local_20_REFERENCE = local_18_REFERENCE.point; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6a0c4bb4
                                    var local_21_FLOAT = local_18_REFERENCE.separation; // type is FLOAT value type is FLOAT
                                    var var128 = thisRef.rA.ojcVec2setojcVec2(thisRef.rA,local_20_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@41f5c2bc
                                    var var130 = var128.ojcVec2subLocalojcVec2(var128,local_13_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@251fc136
                                    var var133 = thisRef.rB.ojcVec2setojcVec2(thisRef.rB,local_20_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6cf2be37
                                    var var135 = var133.ojcVec2subLocalojcVec2(var133,local_15_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@642b09f6
                                    var var138 = ojcMathUtils.FLOATminFLOATFLOAT(local_1_FLOAT,local_21_FLOAT); // type is FLOAT value type is FLOAT
                                    local_1_FLOAT = var138; // type is FLOAT value type is FLOAT
                                    var var143 = ojcMathUtils.FLOATclampFLOATFLOATFLOAT((0.2 * (local_21_FLOAT + 0.005)),-0.2,0.0); // type is FLOAT value type is FLOAT
                                    local_22_FLOAT = var143; // type is FLOAT value type is FLOAT
                                    var var148 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.rA,local_19_REFERENCE); // type is FLOAT value type is FLOAT
                                    var local_23_FLOAT = var148; // type is FLOAT value type is FLOAT
                                    var var153 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.rB,local_19_REFERENCE); // type is FLOAT value type is FLOAT
                                    var local_24_FLOAT = var153; // type is FLOAT value type is FLOAT
                                    local_25_FLOAT = (((local_6_FLOAT + local_9_FLOAT) + ((local_7_FLOAT * local_23_FLOAT) * local_23_FLOAT)) + ((local_10_FLOAT * local_24_FLOAT) * local_24_FLOAT)); // type is FLOAT value type is FLOAT
                                    var var173 = local_25_FLOAT; // type is FLOAT value type is FLOAT
                                    if ((var173 <= 0.0)) {
                                        __label__ = 386;
                                        break $S_131;
                                    }
                                    __label__ = 377;
                                    }
                                $M_377_386 : for(;;) switch (__label__) {
                                    case 386 :
                                    // NORMAL
                                        var179 = 0.0; // type is FLOAT value type is FLOAT
                                        break $M_377_386;
                                    case 377 :
                                    // NORMAL
                                        var179 = ((-local_22_FLOAT) / local_25_FLOAT); // type is FLOAT value type is FLOAT
                                        break $M_377_386;
                                }
                                var local_26_FLOAT = var179; // type is FLOAT value type is FLOAT
                                var var184 = thisRef.P.ojcVec2setojcVec2(thisRef.P,local_19_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@ba4d7ed
                                var var186 = var184.ojcVec2mulLocalFLOAT(var184,local_26_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@50e9a1de
                                var var187 = local_13_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@334c9603
                                var var190 = thisRef.temp.ojcVec2setojcVec2(thisRef.temp,thisRef.P); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2913bef2
                                var var192 = var190.ojcVec2mulLocalFLOAT(var190,local_6_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@15cb669f
                                var var193 = var187.ojcVec2subLocalojcVec2(var187,var192); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@387dd074
                                var var194 = local_14_FLOAT; // type is FLOAT value type is FLOAT
                                var var195 = local_7_FLOAT; // type is FLOAT value type is FLOAT
                                var var198 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.rA,thisRef.P); // type is FLOAT value type is FLOAT
                                local_14_FLOAT = (var194 - (var195 * var198)); // type is FLOAT value type is FLOAT
                                var var202 = local_15_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@31e003eb
                                var var205 = thisRef.temp.ojcVec2setojcVec2(thisRef.temp,thisRef.P); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@250761f4
                                var var207 = var205.ojcVec2mulLocalFLOAT(var205,local_9_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1157bf88
                                var var208 = var202.ojcVec2addLocalojcVec2(var202,var207); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5f66dca3
                                var var209 = local_16_FLOAT; // type is FLOAT value type is FLOAT
                                var var210 = local_10_FLOAT; // type is FLOAT value type is FLOAT
                                var var213 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.rB,thisRef.P); // type is FLOAT value type is FLOAT
                                local_16_FLOAT = (var209 + (var210 * var213)); // type is FLOAT value type is FLOAT
                                local_17_INT = (local_17_INT + 1); // type is INT value type is INT
                                __label__ = 124;
                                continue $L_124;
                            case 492 :
                            // NORMAL
                                var var72 = thisRef.m_positions.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                                var var73 = local_14_FLOAT; // type is FLOAT value type is FLOAT
                                var72.a = var73;
                                var var76 = thisRef.m_positions.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                                var var77 = local_16_FLOAT; // type is FLOAT value type is FLOAT
                                var76.a = var77;
                                local_2_INT = (local_2_INT + 1); // type is INT value type is INT
                                __label__ = 4;
                                continue $L_4;
                        }
                    }
            }
        }
    },

    BOOLEANsolveTOIPositionConstraintsINTINT : function(thisRef,toiIndexA,toiIndexB) {
        var local_11_FLOAT = null; // type is FLOAT # of inits = 3
        var local_17_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_8_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_27_FLOAT = null; // type is FLOAT # of inits = 1
        var local_6_INT = null; // type is INT # of inits = 2
        var local_16_FLOAT = null; // type is FLOAT # of inits = 3
        var local_7_INT = null; // type is INT # of inits = 2
        var local_18_FLOAT = null; // type is FLOAT # of inits = 3
        var local_15_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_21_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_13_FLOAT = null; // type is FLOAT # of inits = 3
        var local_4_INT = null; // type is INT # of inits = 4
        var local_24_FLOAT = null; // type is FLOAT # of inits = 1
        var var184 = null; // type is FLOAT # of inits = 2
        var local_12_FLOAT = null; // type is FLOAT # of inits = 3
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_10_INT = null; // type is INT # of inits = 2
        var local_14_FLOAT = null; // type is FLOAT # of inits = 3
        var local_19_INT = null; // type is INT # of inits = 3
        var local_3_FLOAT = null; // type is FLOAT # of inits = 4
        var local_9_REFERENCE = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_3_FLOAT = 0.0; // type is FLOAT value type is FLOAT
            local_4_INT = 0; // type is INT value type is INT
            __label__ = 5;
            }
        $L_5 : for (;;) {
            $S_5 : {
            // NORMAL
                var var4 = local_4_INT; // type is INT value type is INT
                var var5 = thisRef.m_count; // type is INT value type is INT
                if ((var4 >= var5)) {
                    __label__ = 572;
                    break $S_5;
                }
                __label__ = 14;
                }
            for(;;) switch (__label__) {
                case 14 :
                // NORMAL
                    $S_14 : {
                    // NORMAL
                        var var8 = thisRef.m_positionConstraints.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                        local_5_REFERENCE = var8; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@a4b9aa8
                        local_6_INT = local_5_REFERENCE.indexA; // type is INT value type is INT
                        local_7_INT = local_5_REFERENCE.indexB; // type is INT value type is INT
                        local_8_REFERENCE = local_5_REFERENCE.localCenterA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@37d3f4c8
                        local_9_REFERENCE = local_5_REFERENCE.localCenterB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4b1c21d1
                        local_10_INT = local_5_REFERENCE.pointCount; // type is INT value type is INT
                        local_11_FLOAT = 0.0; // type is FLOAT value type is FLOAT
                        local_12_FLOAT = 0.0; // type is FLOAT value type is FLOAT
                        var var32 = local_6_INT; // type is INT value type is INT
                        if ((var32 == toiIndexA)) {
                            __label__ = 76;
                            break $S_14;
                        }
                        __label__ = 70;
                        }
                    $M_76_70 : for(;;) switch (__label__) {
                        case 76 :
                        // NORMAL
                            local_11_FLOAT = local_5_REFERENCE.invMassA; // type is FLOAT value type is FLOAT
                            local_12_FLOAT = local_5_REFERENCE.invIA; // type is FLOAT value type is FLOAT
                            break $M_76_70;
                        case 70 :
                        // NORMAL
                            var var33 = local_6_INT; // type is INT value type is INT
                            if ((var33 != toiIndexB)) {
                                break $M_76_70;
                            }
                            __label__ = 76;
                            continue $M_76_70;
                    }
                    $S_90 : {
                    // NORMAL
                        local_13_FLOAT = 0.0; // type is FLOAT value type is FLOAT
                        local_14_FLOAT = 0.0; // type is FLOAT value type is FLOAT
                        var var44 = local_7_INT; // type is INT value type is INT
                        if ((var44 == toiIndexA)) {
                            __label__ = 108;
                            break $S_90;
                        }
                        __label__ = 102;
                        }
                    $M_102_108 : for(;;) switch (__label__) {
                        case 108 :
                        // NORMAL
                            local_13_FLOAT = local_5_REFERENCE.invMassB; // type is FLOAT value type is FLOAT
                            local_14_FLOAT = local_5_REFERENCE.invIB; // type is FLOAT value type is FLOAT
                            break $M_102_108;
                        case 102 :
                        // NORMAL
                            var var45 = local_7_INT; // type is INT value type is INT
                            if ((var45 != toiIndexB)) {
                                break $M_102_108;
                            }
                            __label__ = 108;
                            continue $M_102_108;
                    }
                    $S_122 : {
                    // NORMAL
                        var var54 = thisRef.m_positions.data[local_6_INT]; // type is REFERENCE value type is REFERENCE
                        local_15_REFERENCE = var54.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@677da784
                        var var59 = thisRef.m_positions.data[local_6_INT]; // type is REFERENCE value type is REFERENCE
                        local_16_FLOAT = var59.a; // type is FLOAT value type is FLOAT
                        var var65 = thisRef.m_positions.data[local_7_INT]; // type is REFERENCE value type is REFERENCE
                        local_17_REFERENCE = var65.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@32d79caa
                        var var70 = thisRef.m_positions.data[local_7_INT]; // type is REFERENCE value type is REFERENCE
                        local_18_FLOAT = var70.a; // type is FLOAT value type is FLOAT
                        local_19_INT = 0; // type is INT value type is INT
                        __label__ = 173;
                        }
                    $L_173 : for (;;) {
                        $S_173 : {
                        // NORMAL
                            var var76 = local_19_INT; // type is INT value type is INT
                            var var77 = local_10_INT; // type is INT value type is INT
                            if ((var76 >= var77)) {
                                __label__ = 542;
                                break $S_173;
                            }
                            __label__ = 180;
                            }
                        for(;;) switch (__label__) {
                            case 542 :
                            // NORMAL
                                var var80 = thisRef.m_positions.data[local_6_INT]; // type is REFERENCE value type is REFERENCE
                                var var81 = local_16_FLOAT; // type is FLOAT value type is FLOAT
                                var80.a = var81;
                                var var84 = thisRef.m_positions.data[local_7_INT]; // type is REFERENCE value type is REFERENCE
                                var var85 = local_18_FLOAT; // type is FLOAT value type is FLOAT
                                var84.a = var85;
                                local_4_INT = (local_4_INT + 1); // type is INT value type is INT
                                __label__ = 5;
                                continue $L_5;
                            case 180 :
                            // NORMAL
                                $S_180 : {
                                // NORMAL
                                    var var89 = thisRef.xfA.q.ojcRotsetFLOAT(thisRef.xfA.q,local_16_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1a0a5b8c
                                    var var93 = thisRef.xfB.q.ojcRotsetFLOAT(thisRef.xfB.q,local_18_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@30b2f3b5
                                    ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(thisRef.xfA.q,local_8_REFERENCE,thisRef.xfA.p);
                                    var var101 = thisRef.xfA.p.ojcVec2negateLocal(thisRef.xfA.p); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3a7933a0
                                    var var103 = var101.ojcVec2addLocalojcVec2(var101,local_15_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@34c5da89
                                    ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(thisRef.xfB.q,local_9_REFERENCE,thisRef.xfB.p);
                                    var var111 = thisRef.xfB.p.ojcVec2negateLocal(thisRef.xfB.p); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7cdb31a6
                                    var var113 = var111.ojcVec2addLocalojcVec2(var111,local_17_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5b535ad3
                                    var local_20_REFERENCE = thisRef.psolver; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@28c4862a
                                    local_20_REFERENCE.VOIDinitializeojdcContactPositionConstraintojcTransformojcTransformINT(local_20_REFERENCE,local_5_REFERENCE,thisRef.xfA,thisRef.xfB,local_19_INT);
                                    local_21_REFERENCE = local_20_REFERENCE.normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@32cf0029
                                    var local_22_REFERENCE = local_20_REFERENCE.point; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@17bc51d7
                                    var local_23_FLOAT = local_20_REFERENCE.separation; // type is FLOAT value type is FLOAT
                                    var var133 = thisRef.rA.ojcVec2setojcVec2(thisRef.rA,local_22_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@56f81431
                                    var var135 = var133.ojcVec2subLocalojcVec2(var133,local_15_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5a012d12
                                    var var138 = thisRef.rB.ojcVec2setojcVec2(thisRef.rB,local_22_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1085b033
                                    var var140 = var138.ojcVec2subLocalojcVec2(var138,local_17_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6542791d
                                    var var143 = ojcMathUtils.FLOATminFLOATFLOAT(local_3_FLOAT,local_23_FLOAT); // type is FLOAT value type is FLOAT
                                    local_3_FLOAT = var143; // type is FLOAT value type is FLOAT
                                    var var148 = ojcMathUtils.FLOATclampFLOATFLOATFLOAT((0.75 * (local_23_FLOAT + 0.005)),-0.2,0.0); // type is FLOAT value type is FLOAT
                                    local_24_FLOAT = var148; // type is FLOAT value type is FLOAT
                                    var var153 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.rA,local_21_REFERENCE); // type is FLOAT value type is FLOAT
                                    var local_25_FLOAT = var153; // type is FLOAT value type is FLOAT
                                    var var158 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.rB,local_21_REFERENCE); // type is FLOAT value type is FLOAT
                                    var local_26_FLOAT = var158; // type is FLOAT value type is FLOAT
                                    local_27_FLOAT = (((local_11_FLOAT + local_13_FLOAT) + ((local_12_FLOAT * local_25_FLOAT) * local_25_FLOAT)) + ((local_14_FLOAT * local_26_FLOAT) * local_26_FLOAT)); // type is FLOAT value type is FLOAT
                                    var var178 = local_27_FLOAT; // type is FLOAT value type is FLOAT
                                    if ((var178 <= 0.0)) {
                                        __label__ = 436;
                                        break $S_180;
                                    }
                                    __label__ = 427;
                                    }
                                $M_427_436 : for(;;) switch (__label__) {
                                    case 427 :
                                    // NORMAL
                                        var184 = ((-local_24_FLOAT) / local_27_FLOAT); // type is FLOAT value type is FLOAT
                                        break $M_427_436;
                                    case 436 :
                                    // NORMAL
                                        var184 = 0.0; // type is FLOAT value type is FLOAT
                                        break $M_427_436;
                                }
                                var local_28_FLOAT = var184; // type is FLOAT value type is FLOAT
                                var var189 = thisRef.P.ojcVec2setojcVec2(thisRef.P,local_21_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@730db018
                                var var191 = var189.ojcVec2mulLocalFLOAT(var189,local_28_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@20b76ad6
                                var var192 = local_15_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@667f4456
                                var var195 = thisRef.temp.ojcVec2setojcVec2(thisRef.temp,thisRef.P); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1d0e52db
                                var var197 = var195.ojcVec2mulLocalFLOAT(var195,local_11_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6bf24af6
                                var var198 = var192.ojcVec2subLocalojcVec2(var192,var197); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7561bae0
                                var var199 = local_16_FLOAT; // type is FLOAT value type is FLOAT
                                var var200 = local_12_FLOAT; // type is FLOAT value type is FLOAT
                                var var203 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.rA,thisRef.P); // type is FLOAT value type is FLOAT
                                local_16_FLOAT = (var199 - (var200 * var203)); // type is FLOAT value type is FLOAT
                                var var207 = local_17_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@30371ceb
                                var var210 = thisRef.temp.ojcVec2setojcVec2(thisRef.temp,thisRef.P); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6e9b8f40
                                var var212 = var210.ojcVec2mulLocalFLOAT(var210,local_13_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@16c90c2
                                var var213 = var207.ojcVec2addLocalojcVec2(var207,var212); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7830cfe3
                                var var214 = local_18_FLOAT; // type is FLOAT value type is FLOAT
                                var var215 = local_14_FLOAT; // type is FLOAT value type is FLOAT
                                var var218 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.rB,thisRef.P); // type is FLOAT value type is FLOAT
                                local_18_FLOAT = (var214 + (var215 * var218)); // type is FLOAT value type is FLOAT
                                local_19_INT = (local_19_INT + 1); // type is INT value type is INT
                                __label__ = 173;
                                continue $L_173;
                        }
                    }
                case 572 :
                // NORMAL
                    $S_572 : {
                    // NORMAL
                        var var222 = local_3_FLOAT; // type is FLOAT value type is FLOAT
                        if ((var222 < -0.0075)) {
                            __label__ = 583;
                            break $S_572;
                        }
                        __label__ = 579;
                        }
                    for(;;) switch (__label__) {
                        case 579 :
                        // NORMAL
                            var var224 = 1; // type is INT value type is INT
                            return var224;
                        case 583 :
                        // NORMAL
                            var var224 = 0; // type is INT value type is INT
                            return var224;
                    }
            }
        }
    },

    classInitCheck : function() {
        if (!ojdcContactSolver.__initialized) {
            ojdcContactSolver.__initialized = true;
            var thePrototype = ojdcContactSolver.Create.prototype;
            thePrototype.instanceOf = ojdcContactSolver.instanceOf;
            thePrototype.ClassgetClass = ojdcContactSolver.ClassgetClass;
            thePrototype.BOOLEANsolveTOIPositionConstraintsINTINT = ojdcContactSolver.BOOLEANsolveTOIPositionConstraintsINTINT;
            thePrototype.BOOLEANsolvePositionConstraints = ojdcContactSolver.BOOLEANsolvePositionConstraints;
            thePrototype.VOIDstoreImpulses = ojdcContactSolver.VOIDstoreImpulses;
            thePrototype.VOIDsolveVelocityConstraints = ojdcContactSolver.VOIDsolveVelocityConstraints;
            thePrototype.VOIDwarmStart = ojdcContactSolver.VOIDwarmStart;
            thePrototype.VOIDinitializeVelocityConstraints = ojdcContactSolver.VOIDinitializeVelocityConstraints;
            thePrototype.VOIDinitojdcContactSolver$ContactSolverDef = ojdcContactSolver.VOIDinitojdcContactSolver$ContactSolverDef;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            ojdcContactSolver.VOIDclinit();
        }
    },

};

var ojcWorldManifold = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 102,
    __implementedTypes : [102,1],

    Create : function() {
        this.pool3 = null; // declared in org.jbox2d.collision.WorldManifold
        this.pool4 = null; // declared in org.jbox2d.collision.WorldManifold
        this.normal = null; // declared in org.jbox2d.collision.WorldManifold
        this.points = null; // declared in org.jbox2d.collision.WorldManifold
    },

    instanceOf : function(aType) {
        return ojcWorldManifold.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcWorldManifold;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var local_1_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var0);
            thisRef.pool3 = var0;
            var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var1);
            thisRef.pool4 = var1;
            var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var2);
            thisRef.normal = var2;
            var var3 = bytecoder.newArray(2,null); // type is REFERENCE value type is REFERENCE
            thisRef.points = var3;
            local_1_INT = 0; // type is INT value type is INT
            __label__ = 47;
            }
        $L_47 : for (;;) {
            $S_47 : {
            // NORMAL
                var var6 = local_1_INT; // type is INT value type is INT
                if ((var6 >= 2)) {
                    return;
                }
                }
            var var7 = thisRef.points; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@5b3cb3e9
            var var8 = local_1_INT; // type is INT value type is INT
            var var9 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var9);
            var7.data[var8] = var9;
            local_1_INT = (local_1_INT + 1); // type is INT value type is INT
            __label__ = 47;
            continue $L_47;
        }
    },

    VOIDinitializeojcManifoldojcTransformFLOATojcTransformFLOAT : function(thisRef,manifold,xfA,radiusA,xfB,radiusB) {
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 5
        var local_7_REFERENCE = null; // type is REFERENCE # of inits = 5
        var local_8_INT = null; // type is INT # of inits = 6
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = manifold.pointCount; // type is INT value type is INT
            if ((var0 != 0)) {
                break $S_0;
            }
            return;
            }
        $S_8 : {
        // NORMAL
            var var1 = ojcWorldManifold$1.$SwitchMap$org$jbox2d$collision$Manifold$ManifoldType; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@31fa7062
            var var3 = manifold.type.INTordinal(manifold.type); // type is INT value type is INT
            var var4 = var1.data[var3]; // type is INT value type is INT
            if (var4 < 1 || var4 > 3) {
             return;
            }
            switch(var4 - 1) {
             case 0:
                 __label__ = 44;
            break $S_8;
             case 1:
                 __label__ = 264;
            break $S_8;
             case 2:
                 __label__ = 492;
            break $S_8;
            }
            throw 'Illegal jump target!';
            }
        for(;;) switch (__label__) {
            case 264 :
            // NORMAL
                $S_264 : {
                // NORMAL
                    local_6_REFERENCE = thisRef.pool3; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@71d0ebad
                    ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(xfA.q,manifold.localNormal,thisRef.normal);
                    ojcTransform.VOIDmulToOutojcTransformojcVec2ojcVec2(xfA,manifold.localPoint,local_6_REFERENCE);
                    local_7_REFERENCE = thisRef.pool4; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@29b473c5
                    local_8_INT = 0; // type is INT value type is INT
                    __label__ = 304;
                    }
                $L_304 : for (;;) {
                    $S_304 : {
                    // NORMAL
                        var var101 = local_8_INT; // type is INT value type is INT
                        var var102 = manifold.pointCount; // type is INT value type is INT
                        if ((var101 >= var102)) {
                            __label__ = 489;
                            break $S_304;
                        }
                        __label__ = 313;
                        }
                    for(;;) switch (__label__) {
                        case 313 :
                        // NORMAL
                            var var105 = manifold.points.data[local_8_INT]; // type is REFERENCE value type is REFERENCE
                            ojcTransform.VOIDmulToOutojcTransformojcVec2ojcVec2(xfB,var105.localPoint,local_7_REFERENCE);
                            var local_9_FLOAT = (radiusA - (((local_7_REFERENCE.x - local_6_REFERENCE.x) * thisRef.normal.x) + ((local_7_REFERENCE.y - local_6_REFERENCE.y) * thisRef.normal.y))); // type is FLOAT value type is FLOAT
                            var local_10_FLOAT = ((thisRef.normal.x * local_9_FLOAT) + local_7_REFERENCE.x); // type is FLOAT value type is FLOAT
                            var local_11_FLOAT = ((thisRef.normal.y * local_9_FLOAT) + local_7_REFERENCE.y); // type is FLOAT value type is FLOAT
                            var local_12_FLOAT = (((-thisRef.normal.x) * radiusB) + local_7_REFERENCE.x); // type is FLOAT value type is FLOAT
                            var local_13_FLOAT = (((-thisRef.normal.y) * radiusB) + local_7_REFERENCE.y); // type is FLOAT value type is FLOAT
                            var var161 = thisRef.points.data[local_8_INT]; // type is REFERENCE value type is REFERENCE
                            var var165 = ((local_10_FLOAT + local_12_FLOAT) * 0.5); // type is FLOAT value type is FLOAT
                            var161.x = var165;
                            var var168 = thisRef.points.data[local_8_INT]; // type is REFERENCE value type is REFERENCE
                            var var172 = ((local_11_FLOAT + local_13_FLOAT) * 0.5); // type is FLOAT value type is FLOAT
                            var168.y = var172;
                            local_8_INT = (local_8_INT + 1); // type is INT value type is INT
                            __label__ = 304;
                            continue $L_304;
                        case 489 :
                        // NORMAL
                            return;
                    }
                }
            case 492 :
            // NORMAL
                $S_492 : {
                // NORMAL
                    local_6_REFERENCE = thisRef.pool3; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@10404827
                    ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(xfB.q,manifold.localNormal,thisRef.normal);
                    ojcTransform.VOIDmulToOutojcTransformojcVec2ojcVec2(xfB,manifold.localPoint,local_6_REFERENCE);
                    local_7_REFERENCE = thisRef.pool4; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@72db532d
                    local_8_INT = 0; // type is INT value type is INT
                    __label__ = 534;
                    }
                $L_534 : for (;;) {
                    $S_534 : {
                    // NORMAL
                        var var16 = local_8_INT; // type is INT value type is INT
                        var var17 = manifold.pointCount; // type is INT value type is INT
                        if ((var16 >= var17)) {
                            __label__ = 717;
                            break $S_534;
                        }
                        __label__ = 543;
                        }
                    for(;;) switch (__label__) {
                        case 543 :
                        // NORMAL
                            var var20 = manifold.points.data[local_8_INT]; // type is REFERENCE value type is REFERENCE
                            ojcTransform.VOIDmulToOutojcTransformojcVec2ojcVec2(xfA,var20.localPoint,local_7_REFERENCE);
                            var local_9_FLOAT = (radiusB - (((local_7_REFERENCE.x - local_6_REFERENCE.x) * thisRef.normal.x) + ((local_7_REFERENCE.y - local_6_REFERENCE.y) * thisRef.normal.y))); // type is FLOAT value type is FLOAT
                            var local_10_FLOAT = ((thisRef.normal.x * local_9_FLOAT) + local_7_REFERENCE.x); // type is FLOAT value type is FLOAT
                            var local_11_FLOAT = ((thisRef.normal.y * local_9_FLOAT) + local_7_REFERENCE.y); // type is FLOAT value type is FLOAT
                            var local_12_FLOAT = (((-thisRef.normal.x) * radiusA) + local_7_REFERENCE.x); // type is FLOAT value type is FLOAT
                            var local_13_FLOAT = (((-thisRef.normal.y) * radiusA) + local_7_REFERENCE.y); // type is FLOAT value type is FLOAT
                            var var81 = thisRef.points.data[local_8_INT]; // type is REFERENCE value type is REFERENCE
                            var var85 = ((local_12_FLOAT + local_10_FLOAT) * 0.5); // type is FLOAT value type is FLOAT
                            var81.x = var85;
                            var var88 = thisRef.points.data[local_8_INT]; // type is REFERENCE value type is REFERENCE
                            var var92 = ((local_13_FLOAT + local_11_FLOAT) * 0.5); // type is FLOAT value type is FLOAT
                            var88.y = var92;
                            local_8_INT = (local_8_INT + 1); // type is INT value type is INT
                            __label__ = 534;
                            continue $L_534;
                        case 717 :
                        // NORMAL
                            var var173 = thisRef.normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4a04358
                            var var176 = (-thisRef.normal.x); // type is FLOAT value type is FLOAT
                            var173.x = var176;
                            var var177 = thisRef.normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@e803252
                            var var180 = (-thisRef.normal.y); // type is FLOAT value type is FLOAT
                            var177.y = var180;
                            return;
                    }
                }
            case 44 :
            // NORMAL
                $S_44 : {
                // NORMAL
                    local_6_REFERENCE = thisRef.pool3; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1c9342d5
                    local_7_REFERENCE = thisRef.pool4; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@34f93851
                    var var183 = thisRef.normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@32450715
                    var183.x = 1.0;
                    var var184 = thisRef.normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3d58b1ad
                    var184.y = 0.0;
                    ojcTransform.VOIDmulToOutojcTransformojcVec2ojcVec2(xfA,manifold.localPoint,local_6_REFERENCE);
                    var var188 = manifold.points.data[0]; // type is REFERENCE value type is REFERENCE
                    ojcTransform.VOIDmulToOutojcTransformojcVec2ojcVec2(xfB,var188.localPoint,local_7_REFERENCE);
                    var var193 = ojcMathUtils.FLOATdistanceSquaredojcVec2ojcVec2(local_6_REFERENCE,local_7_REFERENCE); // type is FLOAT value type is FLOAT
                    if ((var193 <= 1.4210855E-14)) {
                        __label__ = 155;
                        break $S_44;
                    }
                    __label__ = 111;
                    }
                $M_111_155 : for(;;) switch (__label__) {
                    case 155 :
                    // NORMAL
                        var local_8_FLOAT = ((thisRef.normal.x * radiusA) + local_6_REFERENCE.x); // type is FLOAT value type is FLOAT
                        var local_9_FLOAT = ((thisRef.normal.y * radiusA) + local_6_REFERENCE.y); // type is FLOAT value type is FLOAT
                        var local_10_FLOAT = (((-thisRef.normal.x) * radiusB) + local_7_REFERENCE.x); // type is FLOAT value type is FLOAT
                        var local_11_FLOAT = (((-thisRef.normal.y) * radiusB) + local_7_REFERENCE.y); // type is FLOAT value type is FLOAT
                        var var241 = thisRef.points.data[0]; // type is REFERENCE value type is REFERENCE
                        var var245 = ((local_8_FLOAT + local_10_FLOAT) * 0.5); // type is FLOAT value type is FLOAT
                        var241.x = var245;
                        var var247 = thisRef.points.data[0]; // type is REFERENCE value type is REFERENCE
                        var var251 = ((local_9_FLOAT + local_11_FLOAT) * 0.5); // type is FLOAT value type is FLOAT
                        var247.y = var251;
                        return;
                    case 111 :
                    // NORMAL
                        var var195 = thisRef.normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3b5bd939
                        var var200 = (local_7_REFERENCE.x - local_6_REFERENCE.x); // type is FLOAT value type is FLOAT
                        var195.x = var200;
                        var var201 = thisRef.normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@469d45b3
                        var var206 = (local_7_REFERENCE.y - local_6_REFERENCE.y); // type is FLOAT value type is FLOAT
                        var201.y = var206;
                        var var208 = thisRef.normal.FLOATnormalize(thisRef.normal); // type is FLOAT value type is FLOAT
                        __label__ = 155;
                        continue $M_111_155;
                }
        }
    },

    classInitCheck : function() {
        if (!ojcWorldManifold.__initialized) {
            ojcWorldManifold.__initialized = true;
            var thePrototype = ojcWorldManifold.Create.prototype;
            thePrototype.instanceOf = ojcWorldManifold.instanceOf;
            thePrototype.ClassgetClass = ojcWorldManifold.ClassgetClass;
            thePrototype.VOIDinitializeojcManifoldojcTransformFLOATojcTransformFLOAT = ojcWorldManifold.VOIDinitializeojcManifoldojcTransformFLOATojcTransformFLOAT;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojdcPositionSolverManifold = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 103,
    __implementedTypes : [1,103],
    $assertionsDisabled : false, // declared in org.jbox2d.dynamics.contacts.PositionSolverManifold

    Create : function() {
        this.normal = null; // declared in org.jbox2d.dynamics.contacts.PositionSolverManifold
        this.point = null; // declared in org.jbox2d.dynamics.contacts.PositionSolverManifold
        this.separation = 0; // declared in org.jbox2d.dynamics.contacts.PositionSolverManifold
    },

    instanceOf : function(aType) {
        return ojdcPositionSolverManifold.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdcPositionSolverManifold;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdcPositionSolverManifold.BOOLEANdesiredAssertionStatus(ojdcPositionSolverManifold); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_9_13 : for(;;) switch (__label__) {
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_9_13;
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_9_13;
        }
        ojdcPositionSolverManifold.$assertionsDisabled = var1;
        return;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var0);
        thisRef.normal = var0;
        var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var1);
        thisRef.point = var1;
        return;
    },

    VOIDinitializeojdcContactPositionConstraintojcTransformojcTransformINT : function(thisRef,pc,xfA,xfB,index) {
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_7_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdcPositionSolverManifold.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 21;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_21_6 : for(;;) switch (__label__) {
            case 21 :
            // NORMAL
                $S_21 : {
                // NORMAL
                    local_5_REFERENCE = xfA.q; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7b27348c
                    local_6_REFERENCE = xfB.q; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@61f953c7
                    var var7 = pc.localPoints.data[index]; // type is REFERENCE value type is REFERENCE
                    local_7_REFERENCE = var7; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1707d23b
                    var var9 = ojdcPositionSolverManifold$1.$SwitchMap$org$jbox2d$collision$Manifold$ManifoldType; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3167ada
                    var var11 = pc.type.INTordinal(pc.type); // type is INT value type is INT
                    var var12 = var9.data[var11]; // type is INT value type is INT
                    if (var12 < 1 || var12 > 3) {
                     return;
                    }
                    switch(var12 - 1) {
                     case 0:
                         __label__ = 80;
                    break $S_21;
                     case 1:
                         __label__ = 340;
                    break $S_21;
                     case 2:
                         __label__ = 614;
                    break $S_21;
                    }
                    throw 'Illegal jump target!';
                    }
                for(;;) switch (__label__) {
                    case 340 :
                    // NORMAL
                        var local_8_REFERENCE = pc.localNormal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@78a55c00
                        var local_9_REFERENCE = pc.localPoint; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3a6494cc
                        var var140 = thisRef.normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@11288f2c
                        var var151 = ((local_5_REFERENCE.c * local_8_REFERENCE.x) - (local_5_REFERENCE.s * local_8_REFERENCE.y)); // type is FLOAT value type is FLOAT
                        var140.x = var151;
                        var var152 = thisRef.normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2158f779
                        var var163 = ((local_5_REFERENCE.s * local_8_REFERENCE.x) + (local_5_REFERENCE.c * local_8_REFERENCE.y)); // type is FLOAT value type is FLOAT
                        var152.y = var163;
                        var local_10_FLOAT = (((local_5_REFERENCE.c * local_9_REFERENCE.x) - (local_5_REFERENCE.s * local_9_REFERENCE.y)) + xfA.p.x); // type is FLOAT value type is FLOAT
                        var local_11_FLOAT = (((local_5_REFERENCE.s * local_9_REFERENCE.x) + (local_5_REFERENCE.c * local_9_REFERENCE.y)) + xfA.p.y); // type is FLOAT value type is FLOAT
                        var local_12_FLOAT = (((local_6_REFERENCE.c * local_7_REFERENCE.x) - (local_6_REFERENCE.s * local_7_REFERENCE.y)) + xfB.p.x); // type is FLOAT value type is FLOAT
                        var local_13_FLOAT = (((local_6_REFERENCE.s * local_7_REFERENCE.x) + (local_6_REFERENCE.c * local_7_REFERENCE.y)) + xfB.p.y); // type is FLOAT value type is FLOAT
                        var local_14_FLOAT = (local_12_FLOAT - local_10_FLOAT); // type is FLOAT value type is FLOAT
                        var local_15_FLOAT = (local_13_FLOAT - local_11_FLOAT); // type is FLOAT value type is FLOAT
                        var var244 = ((((local_14_FLOAT * thisRef.normal.x) + (local_15_FLOAT * thisRef.normal.y)) - pc.radiusA) - pc.radiusB); // type is FLOAT value type is FLOAT
                        thisRef.separation = var244;
                        var var245 = thisRef.point; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@73cfea0e
                        var var246 = local_12_FLOAT; // type is FLOAT value type is FLOAT
                        var245.x = var246;
                        var var247 = thisRef.point; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6d93c24f
                        var var248 = local_13_FLOAT; // type is FLOAT value type is FLOAT
                        var247.y = var248;
                        return;
                    case 614 :
                    // NORMAL
                        var local_8_REFERENCE = pc.localNormal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3817713e
                        var local_9_REFERENCE = pc.localPoint; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5e12ba7a
                        var var17 = thisRef.normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5201b42c
                        var var28 = ((local_6_REFERENCE.c * local_8_REFERENCE.x) - (local_6_REFERENCE.s * local_8_REFERENCE.y)); // type is FLOAT value type is FLOAT
                        var17.x = var28;
                        var var29 = thisRef.normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@21739599
                        var var40 = ((local_6_REFERENCE.s * local_8_REFERENCE.x) + (local_6_REFERENCE.c * local_8_REFERENCE.y)); // type is FLOAT value type is FLOAT
                        var29.y = var40;
                        var local_10_FLOAT = (((local_6_REFERENCE.c * local_9_REFERENCE.x) - (local_6_REFERENCE.s * local_9_REFERENCE.y)) + xfB.p.x); // type is FLOAT value type is FLOAT
                        var local_11_FLOAT = (((local_6_REFERENCE.s * local_9_REFERENCE.x) + (local_6_REFERENCE.c * local_9_REFERENCE.y)) + xfB.p.y); // type is FLOAT value type is FLOAT
                        var local_12_FLOAT = (((local_5_REFERENCE.c * local_7_REFERENCE.x) - (local_5_REFERENCE.s * local_7_REFERENCE.y)) + xfA.p.x); // type is FLOAT value type is FLOAT
                        var local_13_FLOAT = (((local_5_REFERENCE.s * local_7_REFERENCE.x) + (local_5_REFERENCE.c * local_7_REFERENCE.y)) + xfA.p.y); // type is FLOAT value type is FLOAT
                        var local_14_FLOAT = (local_12_FLOAT - local_10_FLOAT); // type is FLOAT value type is FLOAT
                        var local_15_FLOAT = (local_13_FLOAT - local_11_FLOAT); // type is FLOAT value type is FLOAT
                        var var127 = ((((local_14_FLOAT * thisRef.normal.x) + (local_15_FLOAT * thisRef.normal.y)) - pc.radiusA) - pc.radiusB); // type is FLOAT value type is FLOAT
                        thisRef.separation = var127;
                        var var128 = thisRef.point; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@22ee8e08
                        var var129 = local_12_FLOAT; // type is FLOAT value type is FLOAT
                        var128.x = var129;
                        var var130 = thisRef.point; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@69e42145
                        var var131 = local_13_FLOAT; // type is FLOAT value type is FLOAT
                        var130.y = var131;
                        var var132 = thisRef.normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@369b4881
                        var var134 = (var132.x * -1.0); // type is FLOAT value type is FLOAT
                        var132.x = var134;
                        var var135 = thisRef.normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@bf9cc96
                        var var137 = (var135.y * -1.0); // type is FLOAT value type is FLOAT
                        var135.y = var137;
                        return;
                    case 80 :
                    // NORMAL
                        var local_8_REFERENCE = pc.localPoint; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5d318d2f
                        var var251 = pc.localPoints.data[0]; // type is REFERENCE value type is REFERENCE
                        var local_9_REFERENCE = var251; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@151771c5
                        var local_10_FLOAT = (((local_5_REFERENCE.c * local_8_REFERENCE.x) - (local_5_REFERENCE.s * local_8_REFERENCE.y)) + xfA.p.x); // type is FLOAT value type is FLOAT
                        var local_11_FLOAT = (((local_5_REFERENCE.s * local_8_REFERENCE.x) + (local_5_REFERENCE.c * local_8_REFERENCE.y)) + xfA.p.y); // type is FLOAT value type is FLOAT
                        var local_12_FLOAT = (((local_6_REFERENCE.c * local_9_REFERENCE.x) - (local_6_REFERENCE.s * local_9_REFERENCE.y)) + xfB.p.x); // type is FLOAT value type is FLOAT
                        var local_13_FLOAT = (((local_6_REFERENCE.s * local_9_REFERENCE.x) + (local_6_REFERENCE.c * local_9_REFERENCE.y)) + xfB.p.y); // type is FLOAT value type is FLOAT
                        var var312 = thisRef.normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7924eca6
                        var var315 = (local_12_FLOAT - local_10_FLOAT); // type is FLOAT value type is FLOAT
                        var312.x = var315;
                        var var316 = thisRef.normal; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3cfc1268
                        var var319 = (local_13_FLOAT - local_11_FLOAT); // type is FLOAT value type is FLOAT
                        var316.y = var319;
                        var var321 = thisRef.normal.FLOATnormalize(thisRef.normal); // type is FLOAT value type is FLOAT
                        var var322 = thisRef.point; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6df5a82d
                        var var326 = ((local_10_FLOAT + local_12_FLOAT) * 0.5); // type is FLOAT value type is FLOAT
                        var322.x = var326;
                        var var327 = thisRef.point; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@43c2750f
                        var var331 = ((local_11_FLOAT + local_13_FLOAT) * 0.5); // type is FLOAT value type is FLOAT
                        var327.y = var331;
                        var local_14_FLOAT = (local_12_FLOAT - local_10_FLOAT); // type is FLOAT value type is FLOAT
                        var local_15_FLOAT = (local_13_FLOAT - local_11_FLOAT); // type is FLOAT value type is FLOAT
                        var var352 = ((((local_14_FLOAT * thisRef.normal.x) + (local_15_FLOAT * thisRef.normal.y)) - pc.radiusA) - pc.radiusB); // type is FLOAT value type is FLOAT
                        thisRef.separation = var352;
                        return;
                }
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    var var1 = pc.pointCount; // type is INT value type is INT
                    if ((var1 > 0)) {
                        __label__ = 21;
                        continue $M_21_6;
                    }
                    }
                var var353 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var353);
                throw var353;
        }
    },

    classInitCheck : function() {
        if (!ojdcPositionSolverManifold.__initialized) {
            ojdcPositionSolverManifold.__initialized = true;
            var thePrototype = ojdcPositionSolverManifold.Create.prototype;
            thePrototype.instanceOf = ojdcPositionSolverManifold.instanceOf;
            thePrototype.ClassgetClass = ojdcPositionSolverManifold.ClassgetClass;
            thePrototype.VOIDinitializeojdcContactPositionConstraintojcTransformojcTransformINT = ojdcPositionSolverManifold.VOIDinitializeojdcContactPositionConstraintojcTransformojcTransformINT;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            ojdcPositionSolverManifold.VOIDclinit();
        }
    },

};

var ojdcContactPositionConstraint = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 104,
    __implementedTypes : [1,104],

    Create : function() {
        this.localPoints = null; // declared in org.jbox2d.dynamics.contacts.ContactPositionConstraint
        this.localNormal = null; // declared in org.jbox2d.dynamics.contacts.ContactPositionConstraint
        this.localPoint = null; // declared in org.jbox2d.dynamics.contacts.ContactPositionConstraint
        this.localCenterA = null; // declared in org.jbox2d.dynamics.contacts.ContactPositionConstraint
        this.localCenterB = null; // declared in org.jbox2d.dynamics.contacts.ContactPositionConstraint
        this.indexA = 0; // declared in org.jbox2d.dynamics.contacts.ContactPositionConstraint
        this.indexB = 0; // declared in org.jbox2d.dynamics.contacts.ContactPositionConstraint
        this.invMassA = 0; // declared in org.jbox2d.dynamics.contacts.ContactPositionConstraint
        this.invMassB = 0; // declared in org.jbox2d.dynamics.contacts.ContactPositionConstraint
        this.invIA = 0; // declared in org.jbox2d.dynamics.contacts.ContactPositionConstraint
        this.invIB = 0; // declared in org.jbox2d.dynamics.contacts.ContactPositionConstraint
        this.pointCount = 0; // declared in org.jbox2d.dynamics.contacts.ContactPositionConstraint
        this.radiusA = 0; // declared in org.jbox2d.dynamics.contacts.ContactPositionConstraint
        this.radiusB = 0; // declared in org.jbox2d.dynamics.contacts.ContactPositionConstraint
        this.type = null; // declared in org.jbox2d.dynamics.contacts.ContactPositionConstraint
    },

    instanceOf : function(aType) {
        return ojdcContactPositionConstraint.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdcContactPositionConstraint;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var local_1_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = bytecoder.newArray(2,null); // type is REFERENCE value type is REFERENCE
            thisRef.localPoints = var0;
            var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var1);
            thisRef.localNormal = var1;
            var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var2);
            thisRef.localPoint = var2;
            var var3 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var3);
            thisRef.localCenterA = var3;
            var var4 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var4);
            thisRef.localCenterB = var4;
            local_1_INT = 0; // type is INT value type is INT
            __label__ = 58;
            }
        $L_58 : for (;;) {
            $S_58 : {
            // NORMAL
                var var7 = local_1_INT; // type is INT value type is INT
                var var9 = thisRef.localPoints.data.length; // type is INT value type is INT
                if ((var7 >= var9)) {
                    return;
                }
                }
            var var10 = thisRef.localPoints; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@75645f07
            var var11 = local_1_INT; // type is INT value type is INT
            var var12 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var12);
            var10.data[var11] = var12;
            local_1_INT = (local_1_INT + 1); // type is INT value type is INT
            __label__ = 58;
            continue $L_58;
        }
    },

    classInitCheck : function() {
        if (!ojdcContactPositionConstraint.__initialized) {
            ojdcContactPositionConstraint.__initialized = true;
            var thePrototype = ojdcContactPositionConstraint.Create.prototype;
            thePrototype.instanceOf = ojdcContactPositionConstraint.instanceOf;
            thePrototype.ClassgetClass = ojdcContactPositionConstraint.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojdcContactVelocityConstraint = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 105,
    __implementedTypes : [1,105],

    Create : function() {
        this.points = null; // declared in org.jbox2d.dynamics.contacts.ContactVelocityConstraint
        this.normal = null; // declared in org.jbox2d.dynamics.contacts.ContactVelocityConstraint
        this.normalMass = null; // declared in org.jbox2d.dynamics.contacts.ContactVelocityConstraint
        this.K = null; // declared in org.jbox2d.dynamics.contacts.ContactVelocityConstraint
        this.friction = 0; // declared in org.jbox2d.dynamics.contacts.ContactVelocityConstraint
        this.restitution = 0; // declared in org.jbox2d.dynamics.contacts.ContactVelocityConstraint
        this.tangentSpeed = 0; // declared in org.jbox2d.dynamics.contacts.ContactVelocityConstraint
        this.indexA = 0; // declared in org.jbox2d.dynamics.contacts.ContactVelocityConstraint
        this.indexB = 0; // declared in org.jbox2d.dynamics.contacts.ContactVelocityConstraint
        this.invMassA = 0; // declared in org.jbox2d.dynamics.contacts.ContactVelocityConstraint
        this.invMassB = 0; // declared in org.jbox2d.dynamics.contacts.ContactVelocityConstraint
        this.invIA = 0; // declared in org.jbox2d.dynamics.contacts.ContactVelocityConstraint
        this.invIB = 0; // declared in org.jbox2d.dynamics.contacts.ContactVelocityConstraint
        this.contactIndex = 0; // declared in org.jbox2d.dynamics.contacts.ContactVelocityConstraint
        this.pointCount = 0; // declared in org.jbox2d.dynamics.contacts.ContactVelocityConstraint
    },

    instanceOf : function(aType) {
        return ojdcContactVelocityConstraint.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdcContactVelocityConstraint;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var local_1_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = bytecoder.newArray(2,null); // type is REFERENCE value type is REFERENCE
            thisRef.points = var0;
            var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var1);
            thisRef.normal = var1;
            var var2 = new ojcMat22.Create(); // type is REFERENCE value type is REFERENCE
            ojcMat22.VOIDinit(var2);
            thisRef.normalMass = var2;
            var var3 = new ojcMat22.Create(); // type is REFERENCE value type is REFERENCE
            ojcMat22.VOIDinit(var3);
            thisRef.K = var3;
            local_1_INT = 0; // type is INT value type is INT
            __label__ = 47;
            }
        $L_47 : for (;;) {
            $S_47 : {
            // NORMAL
                var var6 = local_1_INT; // type is INT value type is INT
                var var8 = thisRef.points.data.length; // type is INT value type is INT
                if ((var6 >= var8)) {
                    return;
                }
                }
            var var9 = thisRef.points; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3c149586
            var var10 = local_1_INT; // type is INT value type is INT
            var var11 = new ojdcContactVelocityConstraint$VelocityConstraintPoint.Create(); // type is REFERENCE value type is REFERENCE
            ojdcContactVelocityConstraint$VelocityConstraintPoint.VOIDinit(var11);
            var9.data[var10] = var11;
            local_1_INT = (local_1_INT + 1); // type is INT value type is INT
            __label__ = 47;
            continue $L_47;
        }
    },

    classInitCheck : function() {
        if (!ojdcContactVelocityConstraint.__initialized) {
            ojdcContactVelocityConstraint.__initialized = true;
            var thePrototype = ojdcContactVelocityConstraint.Create.prototype;
            thePrototype.instanceOf = ojdcContactVelocityConstraint.instanceOf;
            thePrototype.ClassgetClass = ojdcContactVelocityConstraint.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojdcContactVelocityConstraint$VelocityConstraintPoint = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 106,
    __implementedTypes : [1,106],

    Create : function() {
        this.rA = null; // declared in org.jbox2d.dynamics.contacts.ContactVelocityConstraint$VelocityConstraintPoint
        this.rB = null; // declared in org.jbox2d.dynamics.contacts.ContactVelocityConstraint$VelocityConstraintPoint
        this.normalImpulse = 0; // declared in org.jbox2d.dynamics.contacts.ContactVelocityConstraint$VelocityConstraintPoint
        this.tangentImpulse = 0; // declared in org.jbox2d.dynamics.contacts.ContactVelocityConstraint$VelocityConstraintPoint
        this.normalMass = 0; // declared in org.jbox2d.dynamics.contacts.ContactVelocityConstraint$VelocityConstraintPoint
        this.tangentMass = 0; // declared in org.jbox2d.dynamics.contacts.ContactVelocityConstraint$VelocityConstraintPoint
        this.velocityBias = 0; // declared in org.jbox2d.dynamics.contacts.ContactVelocityConstraint$VelocityConstraintPoint
    },

    instanceOf : function(aType) {
        return ojdcContactVelocityConstraint$VelocityConstraintPoint.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdcContactVelocityConstraint$VelocityConstraintPoint;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var0);
        thisRef.rA = var0;
        var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var1);
        thisRef.rB = var1;
        return;
    },

    classInitCheck : function() {
        if (!ojdcContactVelocityConstraint$VelocityConstraintPoint.__initialized) {
            ojdcContactVelocityConstraint$VelocityConstraintPoint.__initialized = true;
            var thePrototype = ojdcContactVelocityConstraint$VelocityConstraintPoint.Create.prototype;
            thePrototype.instanceOf = ojdcContactVelocityConstraint$VelocityConstraintPoint.instanceOf;
            thePrototype.ClassgetClass = ojdcContactVelocityConstraint$VelocityConstraintPoint.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojcMat22 = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 107,
    __implementedTypes : [1,107,2],
    $assertionsDisabled : false, // declared in org.jbox2d.common.Mat22

    Create : function() {
        this.ex = null; // declared in org.jbox2d.common.Mat22
        this.ey = null; // declared in org.jbox2d.common.Mat22
    },

    instanceOf : function(aType) {
        return ojcMat22.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcMat22;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcMat22.BOOLEANdesiredAssertionStatus(ojcMat22); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_9_13 : for(;;) switch (__label__) {
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_9_13;
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_9_13;
        }
        ojcMat22.$assertionsDisabled = var1;
        return;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var0);
        thisRef.ex = var0;
        var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var1);
        thisRef.ey = var1;
        return;
    },

    INThashCode : function(thisRef) {
        var var17 = null; // type is INT # of inits = 2
        var var9 = null; // type is INT # of inits = 2
        var var5 = null; // type is INT # of inits = 1
        var var13 = null; // type is INT # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var local_1_INT = 31; // type is INT value type is INT
            var local_2_INT = 1; // type is INT value type is INT
            var5 = (31 * local_2_INT); // type is INT value type is INT
            var var6 = thisRef.ex; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@53046c95
            if (var6 != null ) {
                __label__ = 20;
                break $S_0;
            }
            __label__ = 16;
            }
        $M_16_20 : for(;;) switch (__label__) {
            case 16 :
            // NORMAL
                var9 = 0; // type is INT value type is INT
                break $M_16_20;
            case 20 :
            // NORMAL
                var var8 = thisRef.ex.INThashCode(thisRef.ex); // type is INT value type is INT
                var9 = var8; // type is INT value type is INT
                break $M_16_20;
        }
        $S_27 : {
        // NORMAL
            var local_2_INT = (var5 + var9); // type is INT value type is INT
            var13 = (31 * local_2_INT); // type is INT value type is INT
            var var14 = thisRef.ey; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1851b962
            if (var14 != null ) {
                __label__ = 44;
                break $S_27;
            }
            __label__ = 40;
            }
        $M_40_44 : for(;;) switch (__label__) {
            case 44 :
            // NORMAL
                var var16 = thisRef.ey.INThashCode(thisRef.ey); // type is INT value type is INT
                var17 = var16; // type is INT value type is INT
                break $M_40_44;
            case 40 :
            // NORMAL
                var17 = 0; // type is INT value type is INT
                break $M_40_44;
        }
        var local_2_INT = (var13 + var17); // type is INT value type is INT
        return local_2_INT;
    },

    BOOLEANequalsjlObject : function(thisRef,obj) {
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((thisRef != obj)) {
                break $S_0;
            }
            return 1;
            }
        $S_7 : {
        // NORMAL
            if (obj != null ) {
                break $S_7;
            }
            return 0;
            }
        $S_13 : {
        // NORMAL
            var var0 = thisRef.ClassgetClass(); // type is REFERENCE value type is REFERENCE
            var var1 = obj.ClassgetClass(); // type is REFERENCE value type is REFERENCE
            if ((var0 == var1)) {
                break $S_13;
            }
            return 0;
            }
        $S_26 : {
        // NORMAL
            local_2_REFERENCE = obj; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1aff02da
            var var3 = thisRef.ex; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@168402df
            if (var3 != null ) {
                __label__ = 47;
                break $S_26;
            }
            __label__ = 38;
            }
        $M_38_47 : for(;;) switch (__label__) {
            case 38 :
            // NORMAL
                var var5 = local_2_REFERENCE.ex; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4d801b0b
                if (var5 == null ) {
                    break $M_38_47;
                }
                return 0;
            case 47 :
            // NORMAL
                var var9 = thisRef.ex.BOOLEANequalsjlObject(thisRef.ex,local_2_REFERENCE.ex); // type is BOOLEAN value type is BOOLEAN
                if ((var9 != 0)) {
                    break $M_38_47;
                }
                return 0;
        }
        $S_63 : {
        // NORMAL
            var var10 = thisRef.ey; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@59397c99
            if (var10 != null ) {
                __label__ = 79;
                break $S_63;
            }
            __label__ = 70;
            }
        for(;;) switch (__label__) {
            case 79 :
            // NORMAL
                var var16 = thisRef.ey.BOOLEANequalsjlObject(thisRef.ey,local_2_REFERENCE.ey); // type is BOOLEAN value type is BOOLEAN
                if ((var16 != 0)) {
                    return 1;
                }
                return 0;
            case 70 :
            // NORMAL
                var var12 = local_2_REFERENCE.ey; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3b51b6c4
                if (var12 == null ) {
                    return 1;
                }
                return 0;
        }
    },

    jlStringtoString : function(thisRef) {
        var __label__ = null;
        var local_1_REFERENCE = bytecoder.stringpool[0]; // type is REFERENCE value type is REFERENCE
        var var1 = new jlStringBuilder.Create(); // type is REFERENCE value type is REFERENCE
        jlStringBuilder.VOIDinit(var1);
        var var3 = var1.jlStringBuilderappendjlString(var1,local_1_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@64be6924
        var var4 = var3.jlStringBuilderappendjlString(var3,bytecoder.stringpool[35]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@44c31202
        var var7 = var4.jlStringBuilderappendFLOAT(var4,thisRef.ex.x); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@429224fc
        var var8 = var7.jlStringBuilderappendjlString(var7,bytecoder.stringpool[9]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2b12d668
        var var11 = var8.jlStringBuilderappendFLOAT(var8,thisRef.ey.x); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3c727d67
        var var12 = var11.jlStringBuilderappendjlString(var11,bytecoder.stringpool[36]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@607d2be9
        var var13 = var12.jlStringtoString(var12); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@339b56de
        var local_1_REFERENCE = var13; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@e076753
        var var14 = new jlStringBuilder.Create(); // type is REFERENCE value type is REFERENCE
        jlStringBuilder.VOIDinit(var14);
        var var16 = var14.jlStringBuilderappendjlString(var14,local_1_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2131bab1
        var var17 = var16.jlStringBuilderappendjlString(var16,bytecoder.stringpool[35]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@289aef1d
        var var20 = var17.jlStringBuilderappendFLOAT(var17,thisRef.ex.y); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@415e6176
        var var21 = var20.jlStringBuilderappendjlString(var20,bytecoder.stringpool[9]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7456bbf1
        var var24 = var21.jlStringBuilderappendFLOAT(var21,thisRef.ey.y); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@589e73f8
        var var25 = var24.jlStringBuilderappendjlString(var24,bytecoder.stringpool[33]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@27838df1
        var var26 = var25.jlStringtoString(var25); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@15e40da6
        var local_1_REFERENCE = var26; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@542cb5d8
        return local_1_REFERENCE;
    },

    VOIDsetZero : function(thisRef) {
        var __label__ = null;
        var var0 = thisRef.ex; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@40deae83
        var0.x = 0.0;
        var var1 = thisRef.ey; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@fff7533
        var1.x = 0.0;
        var var2 = thisRef.ex; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@44bd0635
        var2.y = 0.0;
        var var3 = thisRef.ey; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5f7384ee
        var3.y = 0.0;
        return;
    },

    VOIDinvertToOutojcMat22 : function(thisRef,out) {
        var __label__ = null;
        var local_2_FLOAT = thisRef.ex.x; // type is FLOAT value type is FLOAT
        var local_3_FLOAT = thisRef.ey.x; // type is FLOAT value type is FLOAT
        var local_4_FLOAT = thisRef.ex.y; // type is FLOAT value type is FLOAT
        var local_5_FLOAT = thisRef.ey.y; // type is FLOAT value type is FLOAT
        var local_6_FLOAT = ((local_2_FLOAT * local_5_FLOAT) - (local_3_FLOAT * local_4_FLOAT)); // type is FLOAT value type is FLOAT
        var local_6_FLOAT = (1.0 / local_6_FLOAT); // type is FLOAT value type is FLOAT
        var var28 = out.ex; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7980388d
        var var31 = (local_6_FLOAT * local_5_FLOAT); // type is FLOAT value type is FLOAT
        var28.x = var31;
        var var32 = out.ey; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@45ec0b7e
        var var36 = ((-local_6_FLOAT) * local_3_FLOAT); // type is FLOAT value type is FLOAT
        var32.x = var36;
        var var37 = out.ex; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6270d2ab
        var var41 = ((-local_6_FLOAT) * local_4_FLOAT); // type is FLOAT value type is FLOAT
        var37.y = var41;
        var var42 = out.ey; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@65ad25d7
        var var45 = (local_6_FLOAT * local_2_FLOAT); // type is FLOAT value type is FLOAT
        var42.y = var45;
        return;
    },

    VOIDmulToOutUnsafeojcMat22ojcVec2ojcVec2 : function(R,v,out) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcMat22.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 19;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_19_6 : for(;;) switch (__label__) {
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    if ((v != out)) {
                        __label__ = 19;
                        continue $M_19_6;
                    }
                    }
                var var19 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var19);
                throw var19;
            case 19 :
            // NORMAL
                var var9 = ((R.ex.x * v.x) + (R.ey.x * v.y)); // type is FLOAT value type is FLOAT
                out.x = var9;
                var var18 = ((R.ex.y * v.x) + (R.ey.y * v.y)); // type is FLOAT value type is FLOAT
                out.y = var18;
                return;
        }
    },

    VOIDsolveToOutojcVec2ojcVec2 : function(thisRef,b,out) {
        var local_7_FLOAT = null; // type is FLOAT # of inits = 2
        var local_5_FLOAT = null; // type is FLOAT # of inits = 1
        var local_3_FLOAT = null; // type is FLOAT # of inits = 1
        var local_4_FLOAT = null; // type is FLOAT # of inits = 1
        var local_6_FLOAT = null; // type is FLOAT # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_3_FLOAT = thisRef.ex.x; // type is FLOAT value type is FLOAT
            local_4_FLOAT = thisRef.ey.x; // type is FLOAT value type is FLOAT
            local_5_FLOAT = thisRef.ex.y; // type is FLOAT value type is FLOAT
            local_6_FLOAT = thisRef.ey.y; // type is FLOAT value type is FLOAT
            local_7_FLOAT = ((local_3_FLOAT * local_6_FLOAT) - (local_4_FLOAT * local_5_FLOAT)); // type is FLOAT value type is FLOAT
            var var25 = local_7_FLOAT; // type is FLOAT value type is FLOAT
            if ((var25 == 0.0)) {
                __label__ = 60;
                break $S_0;
            }
            __label__ = 54;
            }
        $M_54_60 : for(;;) switch (__label__) {
            case 54 :
            // NORMAL
                local_7_FLOAT = (1.0 / local_7_FLOAT); // type is FLOAT value type is FLOAT
                __label__ = 60;
                continue $M_54_60;
            case 60 :
            // NORMAL
                var local_8_FLOAT = (local_7_FLOAT * ((local_3_FLOAT * b.y) - (local_5_FLOAT * b.x))); // type is FLOAT value type is FLOAT
                var var49 = (local_7_FLOAT * ((local_6_FLOAT * b.x) - (local_4_FLOAT * b.y))); // type is FLOAT value type is FLOAT
                out.x = var49;
                var var50 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                out.y = var50;
                return;
        }
    },

    classInitCheck : function() {
        if (!ojcMat22.__initialized) {
            ojcMat22.__initialized = true;
            var thePrototype = ojcMat22.Create.prototype;
            thePrototype.instanceOf = ojcMat22.instanceOf;
            thePrototype.ClassgetClass = ojcMat22.ClassgetClass;
            thePrototype.VOIDsolveToOutojcVec2ojcVec2 = ojcMat22.VOIDsolveToOutojcVec2ojcVec2;
            thePrototype.VOIDinvertToOutojcMat22 = ojcMat22.VOIDinvertToOutojcMat22;
            thePrototype.VOIDsetZero = ojcMat22.VOIDsetZero;
            thePrototype.jlStringtoString = ojcMat22.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = ojcMat22.BOOLEANequalsjlObject;
            thePrototype.INThashCode = ojcMat22.INThashCode;
            jlObject.classInitCheck();
            jiSerializable.classInitCheck();
            ojcMat22.VOIDclinit();
        }
    },

};

var ojdSolverData = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 108,
    __implementedTypes : [1,108],

    Create : function() {
        this.step = null; // declared in org.jbox2d.dynamics.SolverData
        this.positions = null; // declared in org.jbox2d.dynamics.SolverData
        this.velocities = null; // declared in org.jbox2d.dynamics.SolverData
    },

    instanceOf : function(aType) {
        return ojdSolverData.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdSolverData;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    classInitCheck : function() {
        if (!ojdSolverData.__initialized) {
            ojdSolverData.__initialized = true;
            var thePrototype = ojdSolverData.Create.prototype;
            thePrototype.instanceOf = ojdSolverData.instanceOf;
            thePrototype.ClassgetClass = ojdSolverData.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojdcContactSolver$ContactSolverDef = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 109,
    __implementedTypes : [1,109],

    Create : function() {
        this.step = null; // declared in org.jbox2d.dynamics.contacts.ContactSolver$ContactSolverDef
        this.contacts = null; // declared in org.jbox2d.dynamics.contacts.ContactSolver$ContactSolverDef
        this.count = 0; // declared in org.jbox2d.dynamics.contacts.ContactSolver$ContactSolverDef
        this.positions = null; // declared in org.jbox2d.dynamics.contacts.ContactSolver$ContactSolverDef
        this.velocities = null; // declared in org.jbox2d.dynamics.contacts.ContactSolver$ContactSolverDef
    },

    instanceOf : function(aType) {
        return ojdcContactSolver$ContactSolverDef.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdcContactSolver$ContactSolverDef;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    classInitCheck : function() {
        if (!ojdcContactSolver$ContactSolverDef.__initialized) {
            ojdcContactSolver$ContactSolverDef.__initialized = true;
            var thePrototype = ojdcContactSolver$ContactSolverDef.Create.prototype;
            thePrototype.instanceOf = ojdcContactSolver$ContactSolverDef.instanceOf;
            thePrototype.ClassgetClass = ojdcContactSolver$ContactSolverDef.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojcContactImpulse = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 110,
    __implementedTypes : [1,110],

    Create : function() {
        this.normalImpulses = null; // declared in org.jbox2d.callbacks.ContactImpulse
        this.tangentImpulses = null; // declared in org.jbox2d.callbacks.ContactImpulse
        this.count = 0; // declared in org.jbox2d.callbacks.ContactImpulse
    },

    instanceOf : function(aType) {
        return ojcContactImpulse.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcContactImpulse;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = bytecoder.newArray(2,0.0); // type is REFERENCE value type is REFERENCE
        thisRef.normalImpulses = var0;
        var var1 = bytecoder.newArray(2,0.0); // type is REFERENCE value type is REFERENCE
        thisRef.tangentImpulses = var1;
        return;
    },

    classInitCheck : function() {
        if (!ojcContactImpulse.__initialized) {
            ojcContactImpulse.__initialized = true;
            var thePrototype = ojcContactImpulse.Create.prototype;
            thePrototype.instanceOf = ojcContactImpulse.instanceOf;
            thePrototype.ClassgetClass = ojcContactImpulse.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojdBody = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 111,
    __implementedTypes : [1,111],
    $assertionsDisabled : false, // declared in org.jbox2d.dynamics.Body

    Create : function() {
        this.m_xf = null; // declared in org.jbox2d.dynamics.Body
        this.m_sweep = null; // declared in org.jbox2d.dynamics.Body
        this.m_linearVelocity = null; // declared in org.jbox2d.dynamics.Body
        this.m_angularVelocity = 0; // declared in org.jbox2d.dynamics.Body
        this.m_force = null; // declared in org.jbox2d.dynamics.Body
        this.m_torque = 0; // declared in org.jbox2d.dynamics.Body
        this.fixDef = null; // declared in org.jbox2d.dynamics.Body
        this.pmd = null; // declared in org.jbox2d.dynamics.Body
        this.pxf = null; // declared in org.jbox2d.dynamics.Body
        this.m_flags = 0; // declared in org.jbox2d.dynamics.Body
        this.m_world = null; // declared in org.jbox2d.dynamics.Body
        this.m_jointList = null; // declared in org.jbox2d.dynamics.Body
        this.m_contactList = null; // declared in org.jbox2d.dynamics.Body
        this.m_prev = null; // declared in org.jbox2d.dynamics.Body
        this.m_next = null; // declared in org.jbox2d.dynamics.Body
        this.m_linearDamping = 0; // declared in org.jbox2d.dynamics.Body
        this.m_angularDamping = 0; // declared in org.jbox2d.dynamics.Body
        this.m_gravityScale = 0; // declared in org.jbox2d.dynamics.Body
        this.m_sleepTime = 0; // declared in org.jbox2d.dynamics.Body
        this.m_type = null; // declared in org.jbox2d.dynamics.Body
        this.m_mass = 0; // declared in org.jbox2d.dynamics.Body
        this.m_invMass = 0; // declared in org.jbox2d.dynamics.Body
        this.m_I = 0; // declared in org.jbox2d.dynamics.Body
        this.m_invI = 0; // declared in org.jbox2d.dynamics.Body
        this.m_userData = null; // declared in org.jbox2d.dynamics.Body
        this.m_fixtureList = null; // declared in org.jbox2d.dynamics.Body
        this.m_fixtureCount = 0; // declared in org.jbox2d.dynamics.Body
        this.m_islandIndex = 0; // declared in org.jbox2d.dynamics.Body
    },

    instanceOf : function(aType) {
        return ojdBody.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdBody;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdBody.BOOLEANdesiredAssertionStatus(ojdBody); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_9_13 : for(;;) switch (__label__) {
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_9_13;
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_9_13;
        }
        ojdBody.$assertionsDisabled = var1;
        return;
    },

    VOIDinitojdBodyDefojdWorld : function(thisRef,bd,world) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = new ojcTransform.Create(); // type is REFERENCE value type is REFERENCE
            ojcTransform.VOIDinit(var0);
            thisRef.m_xf = var0;
            var var1 = new ojcSweep.Create(); // type is REFERENCE value type is REFERENCE
            ojcSweep.VOIDinit(var1);
            thisRef.m_sweep = var1;
            var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var2);
            thisRef.m_linearVelocity = var2;
            thisRef.m_angularVelocity = 0.0;
            var var3 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var3);
            thisRef.m_force = var3;
            thisRef.m_torque = 0.0;
            var var4 = new ojdFixtureDef.Create(); // type is REFERENCE value type is REFERENCE
            ojdFixtureDef.VOIDinit(var4);
            thisRef.fixDef = var4;
            var var5 = new ojcsMassData.Create(); // type is REFERENCE value type is REFERENCE
            ojcsMassData.VOIDinit(var5);
            thisRef.pmd = var5;
            var var6 = new ojcTransform.Create(); // type is REFERENCE value type is REFERENCE
            ojcTransform.VOIDinit(var6);
            thisRef.pxf = var6;
            var var7 = ojdBody.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var7 != 0)) {
                __label__ = 115;
                break $S_0;
            }
            __label__ = 97;
            }
        $M_97_115 : for(;;) switch (__label__) {
            case 115 :
            // NORMAL
                $S_115 : {
                // NORMAL
                    var var10 = ojdBody.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                    if ((var10 != 0)) {
                        __label__ = 139;
                        break $S_115;
                    }
                    __label__ = 121;
                    }
                $M_121_139 : for(;;) switch (__label__) {
                    case 139 :
                    // NORMAL
                        $S_139 : {
                        // NORMAL
                            var var13 = ojdBody.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                            if ((var13 != 0)) {
                                __label__ = 162;
                                break $S_139;
                            }
                            __label__ = 145;
                            }
                        $M_162_145 : for(;;) switch (__label__) {
                            case 162 :
                            // NORMAL
                                $S_162 : {
                                // NORMAL
                                    var var17 = ojdBody.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                                    if ((var17 != 0)) {
                                        __label__ = 185;
                                        break $S_162;
                                    }
                                    __label__ = 168;
                                    }
                                $M_185_168 : for(;;) switch (__label__) {
                                    case 168 :
                                    // NORMAL
                                        $S_168 : {
                                        // NORMAL
                                            var var18 = bd.angularDamping; // type is FLOAT value type is FLOAT
                                            if ((var18 >= 0.0)) {
                                                __label__ = 185;
                                                continue $M_185_168;
                                            }
                                            }
                                        var var77 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                        jlAssertionError.VOIDinit(var77);
                                        throw var77;
                                    case 185 :
                                    // NORMAL
                                        $S_185 : {
                                        // NORMAL
                                            var var20 = ojdBody.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                                            if ((var20 != 0)) {
                                                __label__ = 208;
                                                break $S_185;
                                            }
                                            __label__ = 191;
                                            }
                                        $M_191_208 : for(;;) switch (__label__) {
                                            case 208 :
                                            // NORMAL
                                                $S_208 : {
                                                // NORMAL
                                                    thisRef.m_flags = 0;
                                                    var var24 = bd.bullet; // type is BOOLEAN value type is BOOLEAN
                                                    if ((var24 == 0)) {
                                                        __label__ = 231;
                                                        break $S_208;
                                                    }
                                                    __label__ = 220;
                                                    }
                                                $M_231_220 : for(;;) switch (__label__) {
                                                    case 231 :
                                                    // NORMAL
                                                        $S_231 : {
                                                        // NORMAL
                                                            var var27 = bd.fixedRotation; // type is BOOLEAN value type is BOOLEAN
                                                            if ((var27 == 0)) {
                                                                __label__ = 249;
                                                                break $S_231;
                                                            }
                                                            __label__ = 238;
                                                            }
                                                        $M_238_249 : for(;;) switch (__label__) {
                                                            case 249 :
                                                            // NORMAL
                                                                $S_249 : {
                                                                // NORMAL
                                                                    var var30 = bd.allowSleep; // type is BOOLEAN value type is BOOLEAN
                                                                    if ((var30 == 0)) {
                                                                        __label__ = 266;
                                                                        break $S_249;
                                                                    }
                                                                    __label__ = 256;
                                                                    }
                                                                $M_266_256 : for(;;) switch (__label__) {
                                                                    case 266 :
                                                                    // NORMAL
                                                                        $S_266 : {
                                                                        // NORMAL
                                                                            var var33 = bd.awake; // type is BOOLEAN value type is BOOLEAN
                                                                            if ((var33 == 0)) {
                                                                                __label__ = 283;
                                                                                break $S_266;
                                                                            }
                                                                            __label__ = 273;
                                                                            }
                                                                        $M_273_283 : for(;;) switch (__label__) {
                                                                            case 273 :
                                                                            // NORMAL
                                                                                var var35 = (thisRef.m_flags | 2); // type is INT value type is INT
                                                                                thisRef.m_flags = var35;
                                                                                __label__ = 283;
                                                                                continue $M_273_283;
                                                                            case 283 :
                                                                            // NORMAL
                                                                                $S_283 : {
                                                                                // NORMAL
                                                                                    var var36 = bd.active; // type is BOOLEAN value type is BOOLEAN
                                                                                    if ((var36 == 0)) {
                                                                                        __label__ = 301;
                                                                                        break $S_283;
                                                                                    }
                                                                                    __label__ = 290;
                                                                                    }
                                                                                $M_290_301 : for(;;) switch (__label__) {
                                                                                    case 301 :
                                                                                    // NORMAL
                                                                                        $S_301 : {
                                                                                        // NORMAL
                                                                                            thisRef.m_world = world;
                                                                                            var var42 = thisRef.m_xf.p.ojcVec2setojcVec2(thisRef.m_xf.p,bd.position); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@b8ae0aa
                                                                                            var var46 = thisRef.m_xf.q.ojcRotsetFLOAT(thisRef.m_xf.q,bd.angle); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4ffab71d
                                                                                            thisRef.m_sweep.localCenter.VOIDsetZero(thisRef.m_sweep.localCenter);
                                                                                            var var53 = thisRef.m_sweep.c0.ojcVec2setojcVec2(thisRef.m_sweep.c0,thisRef.m_xf.p); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3be99438
                                                                                            var var58 = thisRef.m_sweep.c.ojcVec2setojcVec2(thisRef.m_sweep.c,thisRef.m_xf.p); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@687fc1b6
                                                                                            var var59 = thisRef.m_sweep; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@34ace3a3
                                                                                            var var60 = bd.angle; // type is FLOAT value type is FLOAT
                                                                                            var59.a0 = var60;
                                                                                            var var61 = thisRef.m_sweep; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2e74e874
                                                                                            var var62 = bd.angle; // type is FLOAT value type is FLOAT
                                                                                            var61.a = var62;
                                                                                            var var63 = thisRef.m_sweep; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@59cbf1d6
                                                                                            var63.alpha0 = 0.0;
                                                                                            thisRef.m_jointList = null;
                                                                                            thisRef.m_contactList = null;
                                                                                            thisRef.m_prev = null;
                                                                                            thisRef.m_next = null;
                                                                                            var var66 = thisRef.m_linearVelocity.ojcVec2setojcVec2(thisRef.m_linearVelocity,bd.linearVelocity); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4fafe928
                                                                                            var var67 = bd.angularVelocity; // type is FLOAT value type is FLOAT
                                                                                            thisRef.m_angularVelocity = var67;
                                                                                            var var68 = bd.linearDamping; // type is FLOAT value type is FLOAT
                                                                                            thisRef.m_linearDamping = var68;
                                                                                            var var69 = bd.angularDamping; // type is FLOAT value type is FLOAT
                                                                                            thisRef.m_angularDamping = var69;
                                                                                            var var70 = bd.gravityScale; // type is FLOAT value type is FLOAT
                                                                                            thisRef.m_gravityScale = var70;
                                                                                            thisRef.m_force.VOIDsetZero(thisRef.m_force);
                                                                                            thisRef.m_torque = 0.0;
                                                                                            thisRef.m_sleepTime = 0.0;
                                                                                            var var72 = bd.type; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1ccdba85
                                                                                            thisRef.m_type = var72;
                                                                                            var var73 = thisRef.m_type; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1573c620
                                                                                            var var74 = ojdBodyType.DYNAMIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@13b0d019
                                                                                            if ((var73 != var74)) {
                                                                                                __label__ = 524;
                                                                                                break $S_301;
                                                                                            }
                                                                                            __label__ = 511;
                                                                                            }
                                                                                        $M_524_511 : for(;;) switch (__label__) {
                                                                                            case 524 :
                                                                                            // NORMAL
                                                                                                thisRef.m_mass = 0.0;
                                                                                                thisRef.m_invMass = 0.0;
                                                                                                break $M_524_511;
                                                                                            case 511 :
                                                                                            // NORMAL
                                                                                                thisRef.m_mass = 1.0;
                                                                                                thisRef.m_invMass = 1.0;
                                                                                                break $M_524_511;
                                                                                        }
                                                                                        thisRef.m_I = 0.0;
                                                                                        thisRef.m_invI = 0.0;
                                                                                        var var75 = bd.userData; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@23e69dee
                                                                                        thisRef.m_userData = var75;
                                                                                        thisRef.m_fixtureList = null;
                                                                                        thisRef.m_fixtureCount = 0;
                                                                                        return;
                                                                                    case 290 :
                                                                                    // NORMAL
                                                                                        var var38 = (thisRef.m_flags | 32); // type is INT value type is INT
                                                                                        thisRef.m_flags = var38;
                                                                                        __label__ = 301;
                                                                                        continue $M_290_301;
                                                                                }
                                                                        }
                                                                    case 256 :
                                                                    // NORMAL
                                                                        var var32 = (thisRef.m_flags | 4); // type is INT value type is INT
                                                                        thisRef.m_flags = var32;
                                                                        __label__ = 266;
                                                                        continue $M_266_256;
                                                                }
                                                            case 238 :
                                                            // NORMAL
                                                                var var29 = (thisRef.m_flags | 16); // type is INT value type is INT
                                                                thisRef.m_flags = var29;
                                                                __label__ = 249;
                                                                continue $M_238_249;
                                                        }
                                                    case 220 :
                                                    // NORMAL
                                                        var var26 = (thisRef.m_flags | 8); // type is INT value type is INT
                                                        thisRef.m_flags = var26;
                                                        __label__ = 231;
                                                        continue $M_231_220;
                                                }
                                            case 191 :
                                            // NORMAL
                                                $S_191 : {
                                                // NORMAL
                                                    var var21 = bd.linearDamping; // type is FLOAT value type is FLOAT
                                                    if ((var21 >= 0.0)) {
                                                        __label__ = 208;
                                                        continue $M_191_208;
                                                    }
                                                    }
                                                var var23 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                                jlAssertionError.VOIDinit(var23);
                                                throw var23;
                                        }
                                }
                            case 145 :
                            // NORMAL
                                $S_145 : {
                                // NORMAL
                                    var var14 = bd.gravityScale; // type is FLOAT value type is FLOAT
                                    if ((var14 >= 0.0)) {
                                        __label__ = 162;
                                        continue $M_162_145;
                                    }
                                    }
                                var var16 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                jlAssertionError.VOIDinit(var16);
                                throw var16;
                        }
                    case 121 :
                    // NORMAL
                        $S_121 : {
                        // NORMAL
                            var var12 = bd.linearVelocity.BOOLEANisValid(bd.linearVelocity); // type is BOOLEAN value type is BOOLEAN
                            if ((var12 != 0)) {
                                __label__ = 139;
                                continue $M_121_139;
                            }
                            }
                        var var78 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                        jlAssertionError.VOIDinit(var78);
                        throw var78;
                }
            case 97 :
            // NORMAL
                $S_97 : {
                // NORMAL
                    var var9 = bd.position.BOOLEANisValid(bd.position); // type is BOOLEAN value type is BOOLEAN
                    if ((var9 != 0)) {
                        __label__ = 115;
                        continue $M_97_115;
                    }
                    }
                var var76 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var76);
                throw var76;
        }
    },

    ojdFixturecreateFixtureojdFixtureDef : function(thisRef,def) {
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdBody.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 24;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_6_24 : for(;;) switch (__label__) {
            case 24 :
            // NORMAL
                $S_24 : {
                // NORMAL
                    var var4 = thisRef.m_world.BOOLEANisLocked(thisRef.m_world); // type is BOOLEAN value type is BOOLEAN
                    if ((var4 != 1)) {
                        break $S_24;
                    }
                    return null;
                    }
                $S_37 : {
                // NORMAL
                    var var5 = new ojdFixture.Create(); // type is REFERENCE value type is REFERENCE
                    ojdFixture.VOIDinit(var5);
                    local_2_REFERENCE = var5; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@257de3eb
                    local_2_REFERENCE.VOIDcreateojdBodyojdFixtureDef(local_2_REFERENCE,thisRef,def);
                    var var9 = (thisRef.m_flags & 32); // type is INT value type is INT
                    if ((var9 != 32)) {
                        __label__ = 83;
                        break $S_37;
                    }
                    __label__ = 63;
                    }
                $M_63_83 : for(;;) switch (__label__) {
                    case 83 :
                    // NORMAL
                        $S_83 : {
                        // NORMAL
                            var var17 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@257de3eb
                            var var18 = thisRef.m_fixtureList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7c25089e
                            var17.m_next = var18;
                            var var19 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@257de3eb
                            thisRef.m_fixtureList = var19;
                            var var21 = (thisRef.m_fixtureCount + 1); // type is INT value type is INT
                            thisRef.m_fixtureCount = var21;
                            var var22 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@257de3eb
                            var22.m_body = thisRef;
                            var var24 = local_2_REFERENCE.m_density; // type is FLOAT value type is FLOAT
                            if ((var24 <= 0.0)) {
                                __label__ = 124;
                                break $S_83;
                            }
                            __label__ = 120;
                            }
                        $M_120_124 : for(;;) switch (__label__) {
                            case 124 :
                            // NORMAL
                                var var26 = thisRef.m_world; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@c719c78
                                var var28 = (var26.m_flags | 1); // type is INT value type is INT
                                var26.m_flags = var28;
                                return local_2_REFERENCE;
                            case 120 :
                            // NORMAL
                                thisRef.VOIDresetMassData(thisRef);
                                __label__ = 124;
                                continue $M_120_124;
                        }
                    case 63 :
                    // NORMAL
                        var local_3_REFERENCE = thisRef.m_world.m_contactManager.m_broadPhase; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@45fe776e
                        local_2_REFERENCE.VOIDcreateProxiesojcbBroadPhaseojcTransform(local_2_REFERENCE,local_3_REFERENCE,thisRef.m_xf);
                        __label__ = 83;
                        continue $M_63_83;
                }
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    var var2 = thisRef.m_world.BOOLEANisLocked(thisRef.m_world); // type is BOOLEAN value type is BOOLEAN
                    if ((var2 == 0)) {
                        __label__ = 24;
                        continue $M_6_24;
                    }
                    }
                var var30 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var30);
                throw var30;
        }
    },

    VOIDresetMassData : function(thisRef) {
        var local_1_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 4
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            thisRef.m_mass = 0.0;
            thisRef.m_invMass = 0.0;
            thisRef.m_I = 0.0;
            thisRef.m_invI = 0.0;
            thisRef.m_sweep.localCenter.VOIDsetZero(thisRef.m_sweep.localCenter);
            var var2 = thisRef.m_type; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@26649f25
            var var3 = ojdBodyType.STATIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5f7645e3
            if ((var2 == var3)) {
                __label__ = 50;
                break $S_0;
            }
            __label__ = 40;
            }
        $M_50_40 : for(;;) switch (__label__) {
            case 40 :
            // NORMAL
                $S_40 : {
                // NORMAL
                    var var4 = thisRef.m_type; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@600ea724
                    var var5 = ojdBodyType.KINEMATIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4f0816b0
                    if ((var4 != var5)) {
                        break $S_40;
                    }
                    __label__ = 50;
                    continue $M_50_40;
                    }
                $S_101 : {
                // NORMAL
                    var var6 = ojdBody.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                    if ((var6 != 0)) {
                        __label__ = 125;
                        break $S_101;
                    }
                    __label__ = 107;
                    }
                $M_107_125 : for(;;) switch (__label__) {
                    case 125 :
                    // NORMAL
                        $S_125 : {
                        // NORMAL
                            var var24 = thisRef.m_world.ojpIWorldPoolgetPool(thisRef.m_world); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4d1735c3
                            var var25 = var24.ojcVec2popVec2(var24); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@202328df
                            local_1_REFERENCE = var25; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@19c1ed3c
                            local_1_REFERENCE.VOIDsetZero(local_1_REFERENCE);
                            var var29 = thisRef.m_world.ojpIWorldPoolgetPool(thisRef.m_world); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@35018c78
                            var var30 = var29.ojcVec2popVec2(var29); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3ab3b1fe
                            local_2_REFERENCE = var30; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7479d850
                            local_3_REFERENCE = thisRef.pmd; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4e7e3246
                            local_4_REFERENCE = thisRef.m_fixtureList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@77a29e86
                            __label__ = 166;
                            }
                        $L_166 : for (;;) {
                            $S_166 : {
                            // NORMAL
                                var var36 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5b74afee
                                if (var36 == null ) {
                                    __label__ = 248;
                                    break $S_166;
                                }
                                __label__ = 171;
                                }
                            for(;;) switch (__label__) {
                                case 171 :
                                // NORMAL
                                    $S_171 : {
                                    // NORMAL
                                        var var38 = local_4_REFERENCE.m_density; // type is FLOAT value type is FLOAT
                                        if ((var38 != 0.0)) {
                                            __label__ = 184;
                                            break $S_171;
                                        }
                                        __label__ = 181;
                                        }
                                    $M_184_181 : for(;;) switch (__label__) {
                                        case 181 :
                                        // NORMAL
                                            break $M_184_181;
                                        case 184 :
                                        // NORMAL
                                            local_4_REFERENCE.VOIDgetMassDataojcsMassData(local_4_REFERENCE,local_3_REFERENCE);
                                            var var45 = (thisRef.m_mass + local_3_REFERENCE.mass); // type is FLOAT value type is FLOAT
                                            thisRef.m_mass = var45;
                                            var var49 = local_2_REFERENCE.ojcVec2setojcVec2(local_2_REFERENCE,local_3_REFERENCE.center); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4e79be46
                                            var var52 = var49.ojcVec2mulLocalFLOAT(var49,local_3_REFERENCE.mass); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6962da36
                                            var var55 = local_1_REFERENCE.ojcVec2addLocalojcVec2(local_1_REFERENCE,local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@56b1295e
                                            var var59 = (thisRef.m_I + local_3_REFERENCE.I); // type is FLOAT value type is FLOAT
                                            thisRef.m_I = var59;
                                            break $M_184_181;
                                    }
                                    local_4_REFERENCE = local_4_REFERENCE.m_next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3584cba0
                                    __label__ = 166;
                                    continue $L_166;
                                case 248 :
                                // NORMAL
                                    $S_248 : {
                                    // NORMAL
                                        var var62 = thisRef.m_mass; // type is FLOAT value type is FLOAT
                                        if ((var62 <= 0.0)) {
                                            __label__ = 279;
                                            break $S_248;
                                        }
                                        __label__ = 257;
                                        }
                                    $M_279_257 : for(;;) switch (__label__) {
                                        case 279 :
                                        // NORMAL
                                            thisRef.m_mass = 1.0;
                                            thisRef.m_invMass = 1.0;
                                            break $M_279_257;
                                        case 257 :
                                        // NORMAL
                                            var var65 = (1.0 / thisRef.m_mass); // type is FLOAT value type is FLOAT
                                            thisRef.m_invMass = var65;
                                            var var68 = local_1_REFERENCE.ojcVec2mulLocalFLOAT(local_1_REFERENCE,thisRef.m_invMass); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@360cd8d8
                                            break $M_279_257;
                                    }
                                    $S_289 : {
                                    // NORMAL
                                        var var69 = thisRef.m_I; // type is FLOAT value type is FLOAT
                                        if ((var69 <= 0.0)) {
                                            __label__ = 363;
                                            break $S_289;
                                        }
                                        __label__ = 298;
                                        }
                                    $M_363_298 : for(;;) switch (__label__) {
                                        case 363 :
                                        // NORMAL
                                            thisRef.m_I = 0.0;
                                            thisRef.m_invI = 0.0;
                                            break $M_363_298;
                                        case 298 :
                                        // NORMAL
                                            $S_298 : {
                                            // NORMAL
                                                var var72 = (thisRef.m_flags & 16); // type is INT value type is INT
                                                if ((var72 != 0)) {
                                                    __label__ = 363;
                                                    continue $M_363_298;
                                                }
                                                }
                                            $S_308 : {
                                            // NORMAL
                                                var var73 = thisRef.m_I; // type is FLOAT value type is FLOAT
                                                var var74 = thisRef.m_mass; // type is FLOAT value type is FLOAT
                                                var var77 = ojcVec2.FLOATdotojcVec2ojcVec2(local_1_REFERENCE,local_1_REFERENCE); // type is FLOAT value type is FLOAT
                                                var var79 = (var73 - (var74 * var77)); // type is FLOAT value type is FLOAT
                                                thisRef.m_I = var79;
                                                var var80 = ojdBody.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                                                if ((var80 != 0)) {
                                                    __label__ = 350;
                                                    break $S_308;
                                                }
                                                __label__ = 333;
                                                }
                                            $M_350_333 : for(;;) switch (__label__) {
                                                case 350 :
                                                // NORMAL
                                                    var var84 = (1.0 / thisRef.m_I); // type is FLOAT value type is FLOAT
                                                    thisRef.m_invI = var84;
                                                    break $M_363_298;
                                                case 333 :
                                                // NORMAL
                                                    $S_333 : {
                                                    // NORMAL
                                                        var var81 = thisRef.m_I; // type is FLOAT value type is FLOAT
                                                        if ((var81 > 0.0)) {
                                                            __label__ = 350;
                                                            continue $M_350_333;
                                                        }
                                                        }
                                                    var var122 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                                    jlAssertionError.VOIDinit(var122);
                                                    throw var122;
                                            }
                                    }
                                    var var86 = thisRef.m_world.ojpIWorldPoolgetPool(thisRef.m_world); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@49401745
                                    var var87 = var86.ojcVec2popVec2(var86); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@16e43cea
                                    local_4_REFERENCE = var87; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@774bfb10
                                    var var91 = local_4_REFERENCE.ojcVec2setojcVec2(local_4_REFERENCE,thisRef.m_sweep.c); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5ae2c5d
                                    var var95 = thisRef.m_sweep.localCenter.ojcVec2setojcVec2(thisRef.m_sweep.localCenter,local_1_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@55b4ee28
                                    ojcTransform.VOIDmulToOutUnsafeojcTransformojcVec2ojcVec2(thisRef.m_xf,thisRef.m_sweep.localCenter,thisRef.m_sweep.c0);
                                    var var105 = thisRef.m_sweep.c.ojcVec2setojcVec2(thisRef.m_sweep.c,thisRef.m_sweep.c0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1c0721e4
                                    var var109 = local_2_REFERENCE.ojcVec2setojcVec2(local_2_REFERENCE,thisRef.m_sweep.c); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2b334de2
                                    var var111 = var109.ojcVec2subLocalojcVec2(var109,local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5f0b401d
                                    var local_5_REFERENCE = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5b74afee
                                    ojcVec2.VOIDcrossToOutUnsafeFLOATojcVec2ojcVec2(thisRef.m_angularVelocity,local_2_REFERENCE,local_5_REFERENCE);
                                    var var119 = thisRef.m_linearVelocity.ojcVec2addLocalojcVec2(thisRef.m_linearVelocity,local_5_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2d3c307a
                                    var var121 = thisRef.m_world.ojpIWorldPoolgetPool(thisRef.m_world); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@8113c38
                                    var121.VOIDpushVec2INT(var121,3);
                                    return;
                            }
                        }
                    case 107 :
                    // NORMAL
                        $S_107 : {
                        // NORMAL
                            var var7 = thisRef.m_type; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@39fc3c85
                            var var8 = ojdBodyType.DYNAMIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3c72880f
                            if ((var7 == var8)) {
                                __label__ = 125;
                                continue $M_107_125;
                            }
                            }
                        var var9 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                        jlAssertionError.VOIDinit(var9);
                        throw var9;
                }
            case 50 :
            // NORMAL
                var var14 = thisRef.m_sweep.c0.ojcVec2setojcVec2(thisRef.m_sweep.c0,thisRef.m_xf.p); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7001d01b
                var var19 = thisRef.m_sweep.c.ojcVec2setojcVec2(thisRef.m_sweep.c,thisRef.m_xf.p); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7170c2df
                var var20 = thisRef.m_sweep; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2930c060
                var var22 = thisRef.m_sweep.a; // type is FLOAT value type is FLOAT
                var20.a0 = var22;
                return;
        }
    },

    ojcTransformgetTransform : function(thisRef) {
        var __label__ = null;
        return thisRef.m_xf;
    },

    ojcVec2getWorldCenter : function(thisRef) {
        var __label__ = null;
        return thisRef.m_sweep.c;
    },

    ojcVec2getLocalPointojcVec2 : function(thisRef,worldPoint) {
        var __label__ = null;
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var0);
        var local_2_REFERENCE = var0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6eb864eb
        thisRef.VOIDgetLocalPointToOutojcVec2ojcVec2(thisRef,worldPoint,local_2_REFERENCE);
        return local_2_REFERENCE;
    },

    VOIDgetLocalPointToOutojcVec2ojcVec2 : function(thisRef,worldPoint,out) {
        var __label__ = null;
        ojcTransform.VOIDmulTransToOutojcTransformojcVec2ojcVec2(thisRef.m_xf,worldPoint,out);
        return;
    },

    ojdcContactEdgegetContactList : function(thisRef) {
        var __label__ = null;
        return thisRef.m_contactList;
    },

    VOIDapplyTorqueFLOAT : function(thisRef,torque) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.m_type; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2b43ed01
            var var1 = ojdBodyType.DYNAMIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6dc95be7
            if ((var0 == var1)) {
                break $S_0;
            }
            return;
            }
        $S_11 : {
        // NORMAL
            var var2 = thisRef.BOOLEANisAwake(thisRef); // type is BOOLEAN value type is BOOLEAN
            if ((var2 != 0)) {
                __label__ = 23;
                break $S_11;
            }
            __label__ = 18;
            }
        $M_18_23 : for(;;) switch (__label__) {
            case 18 :
            // NORMAL
                thisRef.VOIDsetAwakeBOOLEAN(thisRef,1);
                __label__ = 23;
                continue $M_18_23;
            case 23 :
            // NORMAL
                var var4 = (thisRef.m_torque + torque); // type is FLOAT value type is FLOAT
                thisRef.m_torque = var4;
                return;
        }
    },

    BOOLEANisAwake : function(thisRef) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var1 = (thisRef.m_flags & 2); // type is INT value type is INT
            if ((var1 != 2)) {
                __label__ = 14;
                break $S_0;
            }
            __label__ = 10;
            }
        for(;;) switch (__label__) {
            case 14 :
            // NORMAL
                var var2 = 0; // type is INT value type is INT
                return var2;
            case 10 :
            // NORMAL
                var var2 = 1; // type is INT value type is INT
                return var2;
        }
    },

    VOIDsetAwakeBOOLEAN : function(thisRef,flag) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((flag == 0)) {
                __label__ = 31;
                break $S_0;
            }
            __label__ = 4;
            }
        for(;;) switch (__label__) {
            case 31 :
            // NORMAL
                var var5 = (thisRef.m_flags & -3); // type is INT value type is INT
                thisRef.m_flags = var5;
                thisRef.m_sleepTime = 0.0;
                thisRef.m_linearVelocity.VOIDsetZero(thisRef.m_linearVelocity);
                thisRef.m_angularVelocity = 0.0;
                thisRef.m_force.VOIDsetZero(thisRef.m_force);
                thisRef.m_torque = 0.0;
                return;
            case 4 :
            // NORMAL
                $S_4 : {
                // NORMAL
                    var var1 = (thisRef.m_flags & 2); // type is INT value type is INT
                    if ((var1 != 0)) {
                        return;
                    }
                    }
                var var3 = (thisRef.m_flags | 2); // type is INT value type is INT
                thisRef.m_flags = var3;
                thisRef.m_sleepTime = 0.0;
                return;
        }
    },

    BOOLEANshouldCollideojdBody : function(thisRef,other) {
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.m_type; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2f80cce3
            var var1 = ojdBodyType.DYNAMIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3475b48
            if ((var0 == var1)) {
                __label__ = 22;
                break $S_0;
            }
            __label__ = 10;
            }
        $M_10_22 : for(;;) switch (__label__) {
            case 22 :
            // NORMAL
                $S_22 : {
                // NORMAL
                    local_2_REFERENCE = thisRef.m_jointList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@30537358
                    __label__ = 27;
                    }
                $L_27 : for (;;) {
                    $S_27 : {
                    // NORMAL
                        var var6 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5ccc05f0
                        if (var6 == null ) {
                            return 1;
                        }
                        }
                    $S_31 : {
                    // NORMAL
                        var var8 = local_2_REFERENCE.other; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7b3ba72c
                        if ((var8 != other)) {
                            __label__ = 51;
                            break $S_31;
                        }
                        __label__ = 39;
                        }
                    $M_51_39 : for(;;) switch (__label__) {
                        case 51 :
                        // NORMAL
                            local_2_REFERENCE = local_2_REFERENCE.next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@52f59b7c
                            __label__ = 27;
                            continue $L_27;
                        case 39 :
                        // NORMAL
                            var var11 = local_2_REFERENCE.joint.BOOLEANgetCollideConnected(local_2_REFERENCE.joint); // type is BOOLEAN value type is BOOLEAN
                            if ((var11 != 0)) {
                                __label__ = 51;
                                continue $M_51_39;
                            }
                            return 0;
                    }
                }
            case 10 :
            // NORMAL
                var var2 = other.m_type; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6bd11771
                var var3 = ojdBodyType.DYNAMIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@40b370e0
                if ((var2 == var3)) {
                    __label__ = 22;
                    continue $M_10_22;
                }
                return 0;
        }
    },

    BOOLEANisActive : function(thisRef) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var1 = (thisRef.m_flags & 32); // type is INT value type is INT
            if ((var1 != 32)) {
                __label__ = 16;
                break $S_0;
            }
            __label__ = 12;
            }
        for(;;) switch (__label__) {
            case 12 :
            // NORMAL
                var var2 = 1; // type is INT value type is INT
                return var2;
            case 16 :
            // NORMAL
                var var2 = 0; // type is INT value type is INT
                return var2;
        }
    },

    ojdBodyTypegetType : function(thisRef) {
        var __label__ = null;
        return thisRef.m_type;
    },

    VOIDsynchronizeTransform : function(thisRef) {
        var __label__ = null;
        var var1 = thisRef.m_xf.q; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@64fc4dd0
        var var4 = ojcMathUtils.FLOATsinFLOAT(thisRef.m_sweep.a); // type is FLOAT value type is FLOAT
        var1.s = var4;
        var var6 = thisRef.m_xf.q; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@e803b60
        var var9 = ojcMathUtils.FLOATcosFLOAT(thisRef.m_sweep.a); // type is FLOAT value type is FLOAT
        var6.c = var9;
        var local_1_REFERENCE = thisRef.m_xf.q; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@27a47885
        var local_2_REFERENCE = thisRef.m_sweep.localCenter; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1e91ca8f
        var var17 = thisRef.m_xf.p; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@18858640
        var var32 = ((thisRef.m_sweep.c.x - (local_1_REFERENCE.c * local_2_REFERENCE.x)) + (local_1_REFERENCE.s * local_2_REFERENCE.y)); // type is FLOAT value type is FLOAT
        var17.x = var32;
        var var34 = thisRef.m_xf.p; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@17d1e50b
        var var49 = ((thisRef.m_sweep.c.y - (local_1_REFERENCE.s * local_2_REFERENCE.x)) - (local_1_REFERENCE.c * local_2_REFERENCE.y)); // type is FLOAT value type is FLOAT
        var34.y = var49;
        return;
    },

    VOIDsynchronizeFixtures : function(thisRef) {
        var local_1_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_1_REFERENCE = thisRef.pxf; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@75e2f56f
            var var3 = local_1_REFERENCE.q; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3973f4f8
            var var6 = ojcMathUtils.FLOATsinFLOAT(thisRef.m_sweep.a0); // type is FLOAT value type is FLOAT
            var3.s = var6;
            var var8 = local_1_REFERENCE.q; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@370df853
            var var11 = ojcMathUtils.FLOATcosFLOAT(thisRef.m_sweep.a0); // type is FLOAT value type is FLOAT
            var8.c = var11;
            var var13 = local_1_REFERENCE.p; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@17e31d0e
            var var32 = ((thisRef.m_sweep.c0.x - (local_1_REFERENCE.q.c * thisRef.m_sweep.localCenter.x)) + (local_1_REFERENCE.q.s * thisRef.m_sweep.localCenter.y)); // type is FLOAT value type is FLOAT
            var13.x = var32;
            var var34 = local_1_REFERENCE.p; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7548cb10
            var var53 = ((thisRef.m_sweep.c0.y - (local_1_REFERENCE.q.s * thisRef.m_sweep.localCenter.x)) - (local_1_REFERENCE.q.c * thisRef.m_sweep.localCenter.y)); // type is FLOAT value type is FLOAT
            var34.y = var53;
            local_2_REFERENCE = thisRef.m_fixtureList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@533a2575
            __label__ = 154;
            }
        $L_154 : for (;;) {
            $S_154 : {
            // NORMAL
                var var56 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4668dbb0
                if (var56 == null ) {
                    return;
                }
                }
            local_2_REFERENCE.VOIDsynchronizeojcbBroadPhaseojcTransformojcTransform(local_2_REFERENCE,thisRef.m_world.m_contactManager.m_broadPhase,local_1_REFERENCE,thisRef.m_xf);
            local_2_REFERENCE = local_2_REFERENCE.m_next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@b2d9021
            __label__ = 154;
            continue $L_154;
        }
    },

    ojdBodygetNext : function(thisRef) {
        var __label__ = null;
        return thisRef.m_next;
    },

    BOOLEANisBullet : function(thisRef) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var1 = (thisRef.m_flags & 8); // type is INT value type is INT
            if ((var1 != 8)) {
                __label__ = 16;
                break $S_0;
            }
            __label__ = 12;
            }
        for(;;) switch (__label__) {
            case 12 :
            // NORMAL
                var var2 = 1; // type is INT value type is INT
                return var2;
            case 16 :
            // NORMAL
                var var2 = 0; // type is INT value type is INT
                return var2;
        }
    },

    VOIDadvanceFLOAT : function(thisRef,t) {
        var __label__ = null;
        thisRef.m_sweep.VOIDadvanceFLOAT(thisRef.m_sweep,t);
        var var5 = thisRef.m_sweep.c.ojcVec2setojcVec2(thisRef.m_sweep.c,thisRef.m_sweep.c0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@565d8822
        var var6 = thisRef.m_sweep; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@757467d3
        var var8 = thisRef.m_sweep.a0; // type is FLOAT value type is FLOAT
        var6.a = var8;
        var var13 = thisRef.m_xf.q.ojcRotsetFLOAT(thisRef.m_xf.q,thisRef.m_sweep.a); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@43e5b5f7
        ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(thisRef.m_xf.q,thisRef.m_sweep.localCenter,thisRef.m_xf.p);
        var var22 = thisRef.m_xf.p.ojcVec2mulLocalFLOAT(thisRef.m_xf.p,-1.0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6fbc6f6
        var var25 = var22.ojcVec2addLocalojcVec2(var22,thisRef.m_sweep.c); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3c5d5293
        return;
    },

    ojcVec2getPosition : function(thisRef) {
        var __label__ = null;
        return thisRef.m_xf.p;
    },

    FLOATgetAngle : function(thisRef) {
        var __label__ = null;
        return thisRef.m_sweep.a;
    },

    ojdFixturegetFixtureList : function(thisRef) {
        var __label__ = null;
        return thisRef.m_fixtureList;
    },

    FLOATgetMass : function(thisRef) {
        var __label__ = null;
        return thisRef.m_mass;
    },

    classInitCheck : function() {
        if (!ojdBody.__initialized) {
            ojdBody.__initialized = true;
            var thePrototype = ojdBody.Create.prototype;
            thePrototype.instanceOf = ojdBody.instanceOf;
            thePrototype.ClassgetClass = ojdBody.ClassgetClass;
            thePrototype.FLOATgetMass = ojdBody.FLOATgetMass;
            thePrototype.ojdFixturegetFixtureList = ojdBody.ojdFixturegetFixtureList;
            thePrototype.FLOATgetAngle = ojdBody.FLOATgetAngle;
            thePrototype.ojcVec2getPosition = ojdBody.ojcVec2getPosition;
            thePrototype.VOIDadvanceFLOAT = ojdBody.VOIDadvanceFLOAT;
            thePrototype.BOOLEANisBullet = ojdBody.BOOLEANisBullet;
            thePrototype.ojdBodygetNext = ojdBody.ojdBodygetNext;
            thePrototype.VOIDsynchronizeFixtures = ojdBody.VOIDsynchronizeFixtures;
            thePrototype.VOIDsynchronizeTransform = ojdBody.VOIDsynchronizeTransform;
            thePrototype.ojdBodyTypegetType = ojdBody.ojdBodyTypegetType;
            thePrototype.BOOLEANisActive = ojdBody.BOOLEANisActive;
            thePrototype.BOOLEANshouldCollideojdBody = ojdBody.BOOLEANshouldCollideojdBody;
            thePrototype.VOIDsetAwakeBOOLEAN = ojdBody.VOIDsetAwakeBOOLEAN;
            thePrototype.BOOLEANisAwake = ojdBody.BOOLEANisAwake;
            thePrototype.VOIDapplyTorqueFLOAT = ojdBody.VOIDapplyTorqueFLOAT;
            thePrototype.ojdcContactEdgegetContactList = ojdBody.ojdcContactEdgegetContactList;
            thePrototype.VOIDgetLocalPointToOutojcVec2ojcVec2 = ojdBody.VOIDgetLocalPointToOutojcVec2ojcVec2;
            thePrototype.ojcVec2getLocalPointojcVec2 = ojdBody.ojcVec2getLocalPointojcVec2;
            thePrototype.ojcVec2getWorldCenter = ojdBody.ojcVec2getWorldCenter;
            thePrototype.ojcTransformgetTransform = ojdBody.ojcTransformgetTransform;
            thePrototype.VOIDresetMassData = ojdBody.VOIDresetMassData;
            thePrototype.ojdFixturecreateFixtureojdFixtureDef = ojdBody.ojdFixturecreateFixtureojdFixtureDef;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            ojdBody.VOIDclinit();
        }
    },

};

var ojdProfile = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 112,
    __implementedTypes : [1,112],

    Create : function() {
        this.collide = 0; // declared in org.jbox2d.dynamics.Profile
        this.solveInit = 0; // declared in org.jbox2d.dynamics.Profile
        this.solveVelocity = 0; // declared in org.jbox2d.dynamics.Profile
        this.solvePosition = 0; // declared in org.jbox2d.dynamics.Profile
        this.broadphase = 0; // declared in org.jbox2d.dynamics.Profile
        this.solve = 0; // declared in org.jbox2d.dynamics.Profile
        this.solveTOI = 0; // declared in org.jbox2d.dynamics.Profile
        this.step = 0; // declared in org.jbox2d.dynamics.Profile
    },

    instanceOf : function(aType) {
        return ojdProfile.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdProfile;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    classInitCheck : function() {
        if (!ojdProfile.__initialized) {
            ojdProfile.__initialized = true;
            var thePrototype = ojdProfile.Create.prototype;
            thePrototype.instanceOf = ojdProfile.instanceOf;
            thePrototype.ClassgetClass = ojdProfile.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojcTimeOfImpact$TOIInput = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 113,
    __implementedTypes : [1,113],

    Create : function() {
        this.proxyA = null; // declared in org.jbox2d.collision.TimeOfImpact$TOIInput
        this.proxyB = null; // declared in org.jbox2d.collision.TimeOfImpact$TOIInput
        this.sweepA = null; // declared in org.jbox2d.collision.TimeOfImpact$TOIInput
        this.sweepB = null; // declared in org.jbox2d.collision.TimeOfImpact$TOIInput
        this.tMax = 0; // declared in org.jbox2d.collision.TimeOfImpact$TOIInput
    },

    instanceOf : function(aType) {
        return ojcTimeOfImpact$TOIInput.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcTimeOfImpact$TOIInput;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcDistance$DistanceProxy.Create(); // type is REFERENCE value type is REFERENCE
        ojcDistance$DistanceProxy.VOIDinit(var0);
        thisRef.proxyA = var0;
        var var1 = new ojcDistance$DistanceProxy.Create(); // type is REFERENCE value type is REFERENCE
        ojcDistance$DistanceProxy.VOIDinit(var1);
        thisRef.proxyB = var1;
        var var2 = new ojcSweep.Create(); // type is REFERENCE value type is REFERENCE
        ojcSweep.VOIDinit(var2);
        thisRef.sweepA = var2;
        var var3 = new ojcSweep.Create(); // type is REFERENCE value type is REFERENCE
        ojcSweep.VOIDinit(var3);
        thisRef.sweepB = var3;
        return;
    },

    classInitCheck : function() {
        if (!ojcTimeOfImpact$TOIInput.__initialized) {
            ojcTimeOfImpact$TOIInput.__initialized = true;
            var thePrototype = ojcTimeOfImpact$TOIInput.Create.prototype;
            thePrototype.instanceOf = ojcTimeOfImpact$TOIInput.instanceOf;
            thePrototype.ClassgetClass = ojcTimeOfImpact$TOIInput.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojcTimeOfImpact$TOIOutput = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 114,
    __implementedTypes : [1,114],

    Create : function() {
        this.state = null; // declared in org.jbox2d.collision.TimeOfImpact$TOIOutput
        this.t = 0; // declared in org.jbox2d.collision.TimeOfImpact$TOIOutput
    },

    instanceOf : function(aType) {
        return ojcTimeOfImpact$TOIOutput.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcTimeOfImpact$TOIOutput;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    classInitCheck : function() {
        if (!ojcTimeOfImpact$TOIOutput.__initialized) {
            ojcTimeOfImpact$TOIOutput.__initialized = true;
            var thePrototype = ojcTimeOfImpact$TOIOutput.Create.prototype;
            thePrototype.instanceOf = ojcTimeOfImpact$TOIOutput.instanceOf;
            thePrototype.ClassgetClass = ojcTimeOfImpact$TOIOutput.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojcDestructionListener = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 115,
    __implementedTypes : [1,115],


    classInitCheck : function() {
        if (!ojcDestructionListener.__initialized) {
            ojcDestructionListener.__initialized = true;
            jlObject.classInitCheck();
        }
    },

};

var ojcDebugDraw = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 116,
    __implementedTypes : [1,116],

    instanceOf : function(aType) {
        return ojcDebugDraw.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcDebugDraw;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    classInitCheck : function() {
        if (!ojcDebugDraw.__initialized) {
            ojcDebugDraw.__initialized = true;
            jlObject.classInitCheck();
        }
    },

};

var ojdjJoint = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 117,
    __implementedTypes : [1,117],
    $assertionsDisabled : false, // declared in org.jbox2d.dynamics.joints.Joint

    instanceOf : function(aType) {
        return ojdjJoint.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdjJoint;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdjJoint.BOOLEANdesiredAssertionStatus(ojdjJoint); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_13_9 : for(;;) switch (__label__) {
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_13_9;
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_13_9;
        }
        ojdjJoint.$assertionsDisabled = var1;
        return;
    },

    ojdjJointcreateojdWorldojdjJointDef : function(world,def) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdjJoint$1.$SwitchMap$org$jbox2d$dynamics$joints$JointType; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1d8b8687
            var var2 = def.type.INTordinal(def.type); // type is INT value type is INT
            var var3 = var0.data[var2]; // type is INT value type is INT
            if (var3 < 1 || var3 > 12) {
             return null;
            }
            switch(var3 - 1) {
             case 0:
                 __label__ = 72;
            break $S_0;
             case 1:
                 __label__ = 88;
            break $S_0;
             case 2:
                 __label__ = 104;
            break $S_0;
             case 3:
                 __label__ = 120;
            break $S_0;
             case 4:
                 __label__ = 136;
            break $S_0;
             case 5:
                 __label__ = 152;
            break $S_0;
             case 6:
                 __label__ = 168;
            break $S_0;
             case 7:
                 __label__ = 184;
            break $S_0;
             case 8:
                 __label__ = 200;
            break $S_0;
             case 9:
                 __label__ = 216;
            break $S_0;
             case 10:
                 __label__ = 229;
            break $S_0;
             case 11:
                 return null;
            }
            throw 'Illegal jump target!';
            }
        for(;;) switch (__label__) {
            case 120 :
            // NORMAL
                var var6 = new ojdjRevoluteJoint.Create(); // type is REFERENCE value type is REFERENCE
                var var7 = world.ojpIWorldPoolgetPool(world); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4ae955d2
                ojdjRevoluteJoint.VOIDinitojpIWorldPoolojdjRevoluteJointDef(var6,var7,def);
                return var6;
            case 200 :
            // NORMAL
                var var12 = new ojdjPulleyJoint.Create(); // type is REFERENCE value type is REFERENCE
                var var13 = world.ojpIWorldPoolgetPool(world); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@60241e56
                ojdjPulleyJoint.VOIDinitojpIWorldPoolojdjPulleyJointDef(var12,var13,def);
                return var12;
            case 72 :
            // NORMAL
                var var14 = new ojdjMouseJoint.Create(); // type is REFERENCE value type is REFERENCE
                var var15 = world.ojpIWorldPoolgetPool(world); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@211d8557
                ojdjMouseJoint.VOIDinitojpIWorldPoolojdjMouseJointDef(var14,var15,def);
                return var14;
            case 104 :
            // NORMAL
                var var4 = new ojdjPrismaticJoint.Create(); // type is REFERENCE value type is REFERENCE
                var var5 = world.ojpIWorldPoolgetPool(world); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2cd118f0
                ojdjPrismaticJoint.VOIDinitojpIWorldPoolojdjPrismaticJointDef(var4,var5,def);
                return var4;
            case 229 :
            // NORMAL
                var var10 = new ojdjRopeJoint.Create(); // type is REFERENCE value type is REFERENCE
                var var11 = world.ojpIWorldPoolgetPool(world); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@109b169c
                ojdjRopeJoint.VOIDinitojpIWorldPoolojdjRopeJointDef(var10,var11,def);
                return var10;
            case 184 :
            // NORMAL
                var var18 = new ojdjGearJoint.Create(); // type is REFERENCE value type is REFERENCE
                var var19 = world.ojpIWorldPoolgetPool(world); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6355d476
                ojdjGearJoint.VOIDinitojpIWorldPoolojdjGearJointDef(var18,var19,def);
                return var18;
            case 216 :
            // NORMAL
                var var20 = new ojdjConstantVolumeJoint.Create(); // type is REFERENCE value type is REFERENCE
                ojdjConstantVolumeJoint.VOIDinitojdWorldojdjConstantVolumeJointDef(var20,world,def);
                return var20;
            case 168 :
            // NORMAL
                var var23 = new ojdjWheelJoint.Create(); // type is REFERENCE value type is REFERENCE
                var var24 = world.ojpIWorldPoolgetPool(world); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@331a6c7
                ojdjWheelJoint.VOIDinitojpIWorldPoolojdjWheelJointDef(var23,var24,def);
                return var23;
            case 136 :
            // NORMAL
                var var8 = new ojdjWeldJoint.Create(); // type is REFERENCE value type is REFERENCE
                var var9 = world.ojpIWorldPoolgetPool(world); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@269d9e3f
                ojdjWeldJoint.VOIDinitojpIWorldPoolojdjWeldJointDef(var8,var9,def);
                return var8;
            case 152 :
            // NORMAL
                var var16 = new ojdjFrictionJoint.Create(); // type is REFERENCE value type is REFERENCE
                var var17 = world.ojpIWorldPoolgetPool(world); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@366ffa02
                ojdjFrictionJoint.VOIDinitojpIWorldPoolojdjFrictionJointDef(var16,var17,def);
                return var16;
            case 88 :
            // NORMAL
                var var21 = new ojdjDistanceJoint.Create(); // type is REFERENCE value type is REFERENCE
                var var22 = world.ojpIWorldPoolgetPool(world); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@63f970a2
                ojdjDistanceJoint.VOIDinitojpIWorldPoolojdjDistanceJointDef(var21,var22,def);
                return var21;
        }
    },

    VOIDinitojpIWorldPoolojdjJointDef : function(thisRef,worldPool,def) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdjJoint.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 29;
                break $S_0;
            }
            __label__ = 10;
            }
        $M_10_29 : for(;;) switch (__label__) {
            case 10 :
            // NORMAL
                $S_10 : {
                // NORMAL
                    var var1 = def.bodyA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@51e75ccb
                    var var2 = def.bodyB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@19d11d8b
                    if ((var1 != var2)) {
                        __label__ = 29;
                        continue $M_10_29;
                    }
                    }
                var var3 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var3);
                throw var3;
            case 29 :
            // NORMAL
                thisRef.pool = worldPool;
                var var4 = def.type; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@fac1a8b
                thisRef.m_type = var4;
                thisRef.m_prev = null;
                thisRef.m_next = null;
                var var5 = def.bodyA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@29361f9d
                thisRef.m_bodyA = var5;
                var var6 = def.bodyB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@42dc1f74
                thisRef.m_bodyB = var6;
                var var7 = def.collideConnected; // type is BOOLEAN value type is BOOLEAN
                thisRef.m_collideConnected = var7;
                thisRef.m_islandFlag = 0;
                var var8 = def.userData; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@53f07fe1
                thisRef.m_userData = var8;
                var var9 = new ojdjJointEdge.Create(); // type is REFERENCE value type is REFERENCE
                ojdjJointEdge.VOIDinit(var9);
                thisRef.m_edgeA = var9;
                var var10 = thisRef.m_edgeA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@25b475a0
                var10.joint = null;
                var var11 = thisRef.m_edgeA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7b1e9dd
                var11.other = null;
                var var12 = thisRef.m_edgeA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@57ee91bd
                var12.prev = null;
                var var13 = thisRef.m_edgeA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@517569f9
                var13.next = null;
                var var14 = new ojdjJointEdge.Create(); // type is REFERENCE value type is REFERENCE
                ojdjJointEdge.VOIDinit(var14);
                thisRef.m_edgeB = var14;
                var var15 = thisRef.m_edgeB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@57ea1f02
                var15.joint = null;
                var var16 = thisRef.m_edgeB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5f9deb23
                var16.other = null;
                var var17 = thisRef.m_edgeB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7cddea14
                var17.prev = null;
                var var18 = thisRef.m_edgeB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@69d6ed7
                var18.next = null;
                return;
        }
    },

    ojdjJointTypegetType : function(thisRef) {
        var __label__ = null;
        return thisRef.m_type;
    },

    ojdBodygetBodyA : function(thisRef) {
        var __label__ = null;
        return thisRef.m_bodyA;
    },

    ojdBodygetBodyB : function(thisRef) {
        var __label__ = null;
        return thisRef.m_bodyB;
    },

    BOOLEANgetCollideConnected : function(thisRef) {
        var __label__ = null;
        return thisRef.m_collideConnected;
    },

    classInitCheck : function() {
        if (!ojdjJoint.__initialized) {
            ojdjJoint.__initialized = true;
            jlObject.classInitCheck();
            ojdjJoint.VOIDclinit();
        }
    },

};

var ojdContactManager = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 118,
    __implementedTypes : [1,118,119],

    Create : function() {
        this.m_contactList = null; // declared in org.jbox2d.dynamics.ContactManager
        this.m_contactCount = 0; // declared in org.jbox2d.dynamics.ContactManager
        this.m_contactFilter = null; // declared in org.jbox2d.dynamics.ContactManager
        this.m_contactListener = null; // declared in org.jbox2d.dynamics.ContactManager
        this.m_broadPhase = null; // declared in org.jbox2d.dynamics.ContactManager
        this.pool = null; // declared in org.jbox2d.dynamics.ContactManager
    },

    instanceOf : function(aType) {
        return ojdContactManager.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdContactManager;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitojdWorldojcbBroadPhaseStrategy : function(thisRef,argPool,strategy) {
        var __label__ = null;
        thisRef.m_contactList = null;
        thisRef.m_contactCount = 0;
        var var0 = new ojcContactFilter.Create(); // type is REFERENCE value type is REFERENCE
        ojcContactFilter.VOIDinit(var0);
        thisRef.m_contactFilter = var0;
        thisRef.m_contactListener = null;
        var var1 = new ojcbBroadPhase.Create(); // type is REFERENCE value type is REFERENCE
        ojcbBroadPhase.VOIDinitojcbBroadPhaseStrategy(var1,strategy);
        thisRef.m_broadPhase = var1;
        thisRef.pool = argPool;
        return;
    },

    VOIDfindNewContacts : function(thisRef) {
        var __label__ = null;
        thisRef.m_broadPhase.VOIDupdatePairsojcPairCallback(thisRef.m_broadPhase,thisRef);
        return;
    },

    VOIDcollide : function(thisRef) {
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_9_INT = null; // type is INT # of inits = 1
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var var42 = null; // type is INT # of inits = 2
        var local_8_INT = null; // type is INT # of inits = 1
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_5_INT = null; // type is INT # of inits = 1
        var local_1_REFERENCE = null; // type is REFERENCE # of inits = 11
        var var50 = null; // type is INT # of inits = 2
        var local_4_INT = null; // type is INT # of inits = 1
        var local_7_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_1_REFERENCE = thisRef.m_contactList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@48bca903
            __label__ = 5;
            }
        $L_5 : for (;;) {
            $S_5 : {
            // NORMAL
                var var2 = local_1_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@60c66c7b
                if (var2 == null ) {
                    return;
                }
                }
            $S_9 : {
            // NORMAL
                var var4 = local_1_REFERENCE.ojdFixturegetFixtureA(local_1_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3fc04e18
                local_2_REFERENCE = var4; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@488da707
                var var7 = local_1_REFERENCE.ojdFixturegetFixtureB(local_1_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@183d748f
                local_3_REFERENCE = var7; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@16f74d8f
                var var10 = local_1_REFERENCE.INTgetChildIndexA(local_1_REFERENCE); // type is INT value type is INT
                local_4_INT = var10; // type is INT value type is INT
                var var14 = local_1_REFERENCE.INTgetChildIndexB(local_1_REFERENCE); // type is INT value type is INT
                local_5_INT = var14; // type is INT value type is INT
                var var18 = local_2_REFERENCE.ojdBodygetBody(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4eb79722
                local_6_REFERENCE = var18; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2bbd1b00
                var var21 = local_3_REFERENCE.ojdBodygetBody(local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@636ecb46
                local_7_REFERENCE = var21; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@49cac30c
                var var25 = (local_1_REFERENCE.m_flags & 8); // type is INT value type is INT
                if ((var25 != 8)) {
                    __label__ = 131;
                    break $S_9;
                }
                __label__ = 55;
                }
            $M_131_55 : for(;;) switch (__label__) {
                case 131 :
                // NORMAL
                    $S_131 : {
                    // NORMAL
                        var var38 = local_6_REFERENCE.BOOLEANisAwake(local_6_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                        if ((var38 == 0)) {
                            __label__ = 154;
                            break $S_131;
                        }
                        __label__ = 139;
                        }
                    $M_154_139 : for(;;) switch (__label__) {
                        case 139 :
                        // NORMAL
                            $S_139 : {
                            // NORMAL
                                var var40 = local_6_REFERENCE.m_type; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5e63e9bd
                                var var41 = ojdBodyType.STATIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2d8977f2
                                if ((var40 == var41)) {
                                    __label__ = 154;
                                    continue $M_154_139;
                                }
                                }
                            var42 = 1; // type is INT value type is INT
                            break $M_154_139;
                        case 154 :
                        // NORMAL
                            var42 = 0; // type is INT value type is INT
                            break $M_154_139;
                    }
                    $S_155 : {
                    // NORMAL
                        local_8_INT = var42; // type is INT value type is INT
                        var var46 = local_7_REFERENCE.BOOLEANisAwake(local_7_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                        if ((var46 == 0)) {
                            __label__ = 180;
                            break $S_155;
                        }
                        __label__ = 165;
                        }
                    $M_165_180 : for(;;) switch (__label__) {
                        case 165 :
                        // NORMAL
                            $S_165 : {
                            // NORMAL
                                var var48 = local_7_REFERENCE.m_type; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5ff5fbe6
                                var var49 = ojdBodyType.STATIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4a543fa5
                                if ((var48 == var49)) {
                                    __label__ = 180;
                                    continue $M_165_180;
                                }
                                }
                            var50 = 1; // type is INT value type is INT
                            break $M_165_180;
                        case 180 :
                        // NORMAL
                            var50 = 0; // type is INT value type is INT
                            break $M_165_180;
                    }
                    $S_181 : {
                    // NORMAL
                        local_9_INT = var50; // type is INT value type is INT
                        var var53 = local_8_INT; // type is INT value type is INT
                        if ((var53 != 0)) {
                            __label__ = 201;
                            break $S_181;
                        }
                        __label__ = 188;
                        }
                    $M_201_188 : for(;;) switch (__label__) {
                        case 188 :
                        // NORMAL
                            $S_188 : {
                            // NORMAL
                                var var54 = local_9_INT; // type is INT value type is INT
                                if ((var54 != 0)) {
                                    __label__ = 201;
                                    continue $M_201_188;
                                }
                                }
                            var var86 = local_1_REFERENCE.ojdcContactgetNext(local_1_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@b3b0953
                            local_1_REFERENCE = var86; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2b1ea74e
                            __label__ = 5;
                            continue $L_5;
                        case 201 :
                        // NORMAL
                            $S_201 : {
                            // NORMAL
                                var var58 = local_2_REFERENCE.m_proxies.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                                var local_10_INT = var58.proxyId; // type is INT value type is INT
                                var var65 = local_3_REFERENCE.m_proxies.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                                var local_11_INT = var65.proxyId; // type is INT value type is INT
                                var var72 = thisRef.m_broadPhase.BOOLEANtestOverlapINTINT(thisRef.m_broadPhase,local_10_INT,local_11_INT); // type is BOOLEAN value type is BOOLEAN
                                var local_12_BOOLEAN = var72; // type is BOOLEAN value type is BOOLEAN
                                var var75 = local_12_BOOLEAN; // type is BOOLEAN value type is BOOLEAN
                                if ((var75 != 0)) {
                                    __label__ = 261;
                                    break $S_201;
                                }
                                __label__ = 243;
                                }
                            for(;;) switch (__label__) {
                                case 261 :
                                // NORMAL
                                    local_1_REFERENCE.VOIDupdateojcContactListener(local_1_REFERENCE,thisRef.m_contactListener);
                                    var var79 = local_1_REFERENCE.ojdcContactgetNext(local_1_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6d6bc921
                                    local_1_REFERENCE = var79; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2c068cc0
                                    __label__ = 5;
                                    continue $L_5;
                                case 243 :
                                // NORMAL
                                    var local_13_REFERENCE = local_1_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@60c66c7b
                                    var var90 = local_13_REFERENCE.ojdcContactgetNext(local_13_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1db135a1
                                    local_1_REFERENCE = var90; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@78e8a3e2
                                    thisRef.VOIDdestroyojdcContact(thisRef,local_13_REFERENCE);
                                    __label__ = 5;
                                    continue $L_5;
                            }
                    }
                case 55 :
                // NORMAL
                    $S_55 : {
                    // NORMAL
                        var var28 = local_7_REFERENCE.BOOLEANshouldCollideojdBody(local_7_REFERENCE,local_6_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                        if ((var28 != 0)) {
                            __label__ = 83;
                            break $S_55;
                        }
                        __label__ = 65;
                        }
                    for(;;) switch (__label__) {
                        case 65 :
                        // NORMAL
                            var local_8_REFERENCE = local_1_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@60c66c7b
                            var var83 = local_8_REFERENCE.ojdcContactgetNext(local_8_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@767388a5
                            local_1_REFERENCE = var83; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@18c61e78
                            thisRef.VOIDdestroyojdcContact(thisRef,local_8_REFERENCE);
                            __label__ = 5;
                            continue $L_5;
                        case 83 :
                        // NORMAL
                            $S_83 : {
                            // NORMAL
                                var var29 = thisRef.m_contactFilter; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@255166a9
                                if (var29 == null ) {
                                    __label__ = 120;
                                    break $S_83;
                                }
                                __label__ = 90;
                                }
                            $M_120_90 : for(;;) switch (__label__) {
                                case 120 :
                                // NORMAL
                                    var var34 = local_1_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@60c66c7b
                                    var var36 = (var34.m_flags & -9); // type is INT value type is INT
                                    var34.m_flags = var36;
                                    __label__ = 131;
                                    continue $M_131_55;
                                case 90 :
                                // NORMAL
                                    $S_90 : {
                                    // NORMAL
                                        var var33 = thisRef.m_contactFilter.BOOLEANshouldCollideojdFixtureojdFixture(thisRef.m_contactFilter,local_2_REFERENCE,local_3_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                        if ((var33 != 0)) {
                                            __label__ = 120;
                                            continue $M_120_90;
                                        }
                                        }
                                    var local_8_REFERENCE = local_1_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@60c66c7b
                                    var var94 = local_8_REFERENCE.ojdcContactgetNext(local_8_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@16c081e3
                                    local_1_REFERENCE = var94; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@609050b3
                                    thisRef.VOIDdestroyojdcContact(thisRef,local_8_REFERENCE);
                                    __label__ = 5;
                                    continue $L_5;
                            }
                    }
            }
        }
    },

    VOIDdestroyojdcContact : function(thisRef,c) {
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = c.ojdFixturegetFixtureA(c); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4b043d03
            var local_2_REFERENCE = var0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@575951fb
            var var2 = c.ojdFixturegetFixtureB(c); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4e26516b
            var local_3_REFERENCE = var2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4fd12002
            var var5 = local_2_REFERENCE.ojdBodygetBody(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2557f0de
            local_4_REFERENCE = var5; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@609325e4
            var var8 = local_3_REFERENCE.ojdBodygetBody(local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@389cbb06
            local_5_REFERENCE = var8; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@33aacc08
            var var10 = thisRef.m_contactListener; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@444d0877
            if (var10 == null ) {
                __label__ = 46;
                break $S_0;
            }
            __label__ = 29;
            }
        $M_29_46 : for(;;) switch (__label__) {
            case 46 :
            // NORMAL
                $S_46 : {
                // NORMAL
                    var var13 = c.m_prev; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2daf1cc
                    if (var13 == null ) {
                        __label__ = 64;
                        break $S_46;
                    }
                    __label__ = 53;
                    }
                $M_53_64 : for(;;) switch (__label__) {
                    case 64 :
                    // NORMAL
                        $S_64 : {
                        // NORMAL
                            var var16 = c.m_next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@18113049
                            if (var16 == null ) {
                                __label__ = 82;
                                break $S_64;
                            }
                            __label__ = 71;
                            }
                        $M_71_82 : for(;;) switch (__label__) {
                            case 71 :
                            // NORMAL
                                var var17 = c.m_next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4508ecc6
                                var var18 = c.m_prev; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@69aa4aa0
                                var17.m_prev = var18;
                                __label__ = 82;
                                continue $M_71_82;
                            case 82 :
                            // NORMAL
                                $S_82 : {
                                // NORMAL
                                    var var19 = thisRef.m_contactList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3cab82c8
                                    if ((c != var19)) {
                                        __label__ = 98;
                                        break $S_82;
                                    }
                                    __label__ = 90;
                                    }
                                $M_98_90 : for(;;) switch (__label__) {
                                    case 90 :
                                    // NORMAL
                                        var var20 = c.m_next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2d296e6c
                                        thisRef.m_contactList = var20;
                                        __label__ = 98;
                                        continue $M_98_90;
                                    case 98 :
                                    // NORMAL
                                        $S_98 : {
                                        // NORMAL
                                            var var22 = c.m_nodeA.prev; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2fc5d9d3
                                            if (var22 == null ) {
                                                __label__ = 125;
                                                break $S_98;
                                            }
                                            __label__ = 108;
                                            }
                                        $M_125_108 : for(;;) switch (__label__) {
                                            case 108 :
                                            // NORMAL
                                                var var24 = c.m_nodeA.prev; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@140179c1
                                                var var26 = c.m_nodeA.next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@74dc144b
                                                var24.next = var26;
                                                __label__ = 125;
                                                continue $M_125_108;
                                            case 125 :
                                            // NORMAL
                                                $S_125 : {
                                                // NORMAL
                                                    var var28 = c.m_nodeA.next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@12e05eb2
                                                    if (var28 == null ) {
                                                        __label__ = 152;
                                                        break $S_125;
                                                    }
                                                    __label__ = 135;
                                                    }
                                                $M_152_135 : for(;;) switch (__label__) {
                                                    case 135 :
                                                    // NORMAL
                                                        var var30 = c.m_nodeA.next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@136a067c
                                                        var var32 = c.m_nodeA.prev; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@c3abaa1
                                                        var30.prev = var32;
                                                        __label__ = 152;
                                                        continue $M_152_135;
                                                    case 152 :
                                                    // NORMAL
                                                        $S_152 : {
                                                        // NORMAL
                                                            var var33 = c.m_nodeA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@18509921
                                                            var var35 = local_4_REFERENCE.m_contactList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@8d55157
                                                            if ((var33 != var35)) {
                                                                __label__ = 176;
                                                                break $S_152;
                                                            }
                                                            __label__ = 164;
                                                            }
                                                        $M_164_176 : for(;;) switch (__label__) {
                                                            case 164 :
                                                            // NORMAL
                                                                var var36 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@609325e4
                                                                var var38 = c.m_nodeA.next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4bcfefd7
                                                                var36.m_contactList = var38;
                                                                __label__ = 176;
                                                                continue $M_164_176;
                                                            case 176 :
                                                            // NORMAL
                                                                $S_176 : {
                                                                // NORMAL
                                                                    var var40 = c.m_nodeB.prev; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1279bbbd
                                                                    if (var40 == null ) {
                                                                        __label__ = 203;
                                                                        break $S_176;
                                                                    }
                                                                    __label__ = 186;
                                                                    }
                                                                $M_186_203 : for(;;) switch (__label__) {
                                                                    case 203 :
                                                                    // NORMAL
                                                                        $S_203 : {
                                                                        // NORMAL
                                                                            var var46 = c.m_nodeB.next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@efcb142
                                                                            if (var46 == null ) {
                                                                                __label__ = 230;
                                                                                break $S_203;
                                                                            }
                                                                            __label__ = 213;
                                                                            }
                                                                        $M_230_213 : for(;;) switch (__label__) {
                                                                            case 230 :
                                                                            // NORMAL
                                                                                $S_230 : {
                                                                                // NORMAL
                                                                                    var var51 = c.m_nodeB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2c010623
                                                                                    var var53 = local_5_REFERENCE.m_contactList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1884f523
                                                                                    if ((var51 != var53)) {
                                                                                        __label__ = 254;
                                                                                        break $S_230;
                                                                                    }
                                                                                    __label__ = 242;
                                                                                    }
                                                                                $M_254_242 : for(;;) switch (__label__) {
                                                                                    case 242 :
                                                                                    // NORMAL
                                                                                        var var54 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@33aacc08
                                                                                        var var56 = c.m_nodeB.next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@47ff11dd
                                                                                        var54.m_contactList = var56;
                                                                                        __label__ = 254;
                                                                                        continue $M_254_242;
                                                                                    case 254 :
                                                                                    // NORMAL
                                                                                        thisRef.pool.VOIDpushContactojdcContact(thisRef.pool,c);
                                                                                        var var59 = (thisRef.m_contactCount - 1); // type is INT value type is INT
                                                                                        thisRef.m_contactCount = var59;
                                                                                        return;
                                                                                }
                                                                            case 213 :
                                                                            // NORMAL
                                                                                var var48 = c.m_nodeB.next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2c62cec1
                                                                                var var50 = c.m_nodeB.prev; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@8f6f570
                                                                                var48.prev = var50;
                                                                                __label__ = 230;
                                                                                continue $M_230_213;
                                                                        }
                                                                    case 186 :
                                                                    // NORMAL
                                                                        var var42 = c.m_nodeB.prev; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@376434a0
                                                                        var var44 = c.m_nodeB.next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@8aaaa68
                                                                        var42.next = var44;
                                                                        __label__ = 203;
                                                                        continue $M_186_203;
                                                                }
                                                        }
                                                }
                                        }
                                }
                        }
                    case 53 :
                    // NORMAL
                        var var14 = c.m_prev; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3204797a
                        var var15 = c.m_next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@de6473f
                        var14.m_next = var15;
                        __label__ = 64;
                        continue $M_53_64;
                }
            case 29 :
            // NORMAL
                $S_29 : {
                // NORMAL
                    var var11 = c.BOOLEANisTouching(c); // type is BOOLEAN value type is BOOLEAN
                    if ((var11 == 0)) {
                        __label__ = 46;
                        continue $M_29_46;
                    }
                    }
                thisRef.m_contactListener.VOIDendContactojdcContact(thisRef.m_contactListener,c);
                __label__ = 46;
                continue $M_29_46;
        }
    },

    VOIDaddPairjlObjectjlObject : function(thisRef,proxyUserDataA,proxyUserDataB) {
        var local_10_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_15_INT = null; // type is INT # of inits = 1
        var local_13_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_9_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_8_INT = null; // type is INT # of inits = 3
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_14_INT = null; // type is INT # of inits = 1
        var local_7_INT = null; // type is INT # of inits = 3
        var local_12_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_11_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var local_3_REFERENCE = proxyUserDataA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@28f6df89
            var local_4_REFERENCE = proxyUserDataB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2fe9df7
            local_5_REFERENCE = local_3_REFERENCE.fixture; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7e8628ca
            local_6_REFERENCE = local_4_REFERENCE.fixture; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@588ff2b9
            local_7_INT = local_3_REFERENCE.childIndex; // type is INT value type is INT
            local_8_INT = local_4_REFERENCE.childIndex; // type is INT value type is INT
            var var17 = local_5_REFERENCE.ojdBodygetBody(local_5_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@469b64b6
            local_9_REFERENCE = var17; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@294659bb
            var var20 = local_6_REFERENCE.ojdBodygetBody(local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@30fc58b7
            local_10_REFERENCE = var20; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1b261787
            var var22 = local_9_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@294659bb
            var var23 = local_10_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1b261787
            if ((var22 != var23)) {
                break $S_0;
            }
            return;
            }
        $S_59 : {
        // NORMAL
            var var25 = local_10_REFERENCE.ojdcContactEdgegetContactList(local_10_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7f73e61a
            local_11_REFERENCE = var25; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@b3e7a4c
            __label__ = 66;
            }
        $L_66 : for (;;) {
            $S_66 : {
            // NORMAL
                var var27 = local_11_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@b3e7a4c
                if (var27 == null ) {
                    __label__ = 189;
                    break $S_66;
                }
                __label__ = 71;
                }
            for(;;) switch (__label__) {
                case 71 :
                // NORMAL
                    $S_71 : {
                    // NORMAL
                        var var45 = local_11_REFERENCE.other; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@584ec977
                        var var46 = local_9_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@294659bb
                        if ((var45 != var46)) {
                            __label__ = 179;
                            break $S_71;
                        }
                        __label__ = 81;
                        }
                    $M_179_81 : for(;;) switch (__label__) {
                        case 179 :
                        // NORMAL
                            local_11_REFERENCE = local_11_REFERENCE.next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@456da81c
                            __label__ = 66;
                            continue $L_66;
                        case 81 :
                        // NORMAL
                            $S_81 : {
                            // NORMAL
                                var var49 = local_11_REFERENCE.contact.ojdFixturegetFixtureA(local_11_REFERENCE.contact); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@178669e6
                                local_12_REFERENCE = var49; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@61dd6e01
                                var var52 = local_11_REFERENCE.contact.ojdFixturegetFixtureB(local_11_REFERENCE.contact); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@77251e3a
                                local_13_REFERENCE = var52; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@19c9946c
                                var var56 = local_11_REFERENCE.contact.INTgetChildIndexA(local_11_REFERENCE.contact); // type is INT value type is INT
                                local_14_INT = var56; // type is INT value type is INT
                                var var61 = local_11_REFERENCE.contact.INTgetChildIndexB(local_11_REFERENCE.contact); // type is INT value type is INT
                                local_15_INT = var61; // type is INT value type is INT
                                var var64 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2833958
                                var var65 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7b73f734
                                if ((var64 != var65)) {
                                    __label__ = 150;
                                    break $S_81;
                                }
                                __label__ = 128;
                                }
                            $M_128_150 : for(;;) switch (__label__) {
                                case 128 :
                                // NORMAL
                                    $S_128 : {
                                    // NORMAL
                                        var var66 = local_14_INT; // type is INT value type is INT
                                        var var67 = local_7_INT; // type is INT value type is INT
                                        if ((var66 != var67)) {
                                            __label__ = 150;
                                            continue $M_128_150;
                                        }
                                        }
                                    $S_135 : {
                                    // NORMAL
                                        var var68 = local_13_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@19c9946c
                                        var var69 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@329eae11
                                        if ((var68 != var69)) {
                                            __label__ = 150;
                                            continue $M_128_150;
                                        }
                                        }
                                    var var70 = local_15_INT; // type is INT value type is INT
                                    var var71 = local_8_INT; // type is INT value type is INT
                                    if ((var70 != var71)) {
                                        __label__ = 150;
                                        continue $M_128_150;
                                    }
                                    return;
                                case 150 :
                                // NORMAL
                                    $S_150 : {
                                    // NORMAL
                                        var var72 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2833958
                                        var var73 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@329eae11
                                        if ((var72 != var73)) {
                                            __label__ = 179;
                                            continue $M_179_81;
                                        }
                                        }
                                    $S_157 : {
                                    // NORMAL
                                        var var74 = local_14_INT; // type is INT value type is INT
                                        var var75 = local_8_INT; // type is INT value type is INT
                                        if ((var74 != var75)) {
                                            __label__ = 179;
                                            continue $M_179_81;
                                        }
                                        }
                                    $S_164 : {
                                    // NORMAL
                                        var var76 = local_13_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@19c9946c
                                        var var77 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7b73f734
                                        if ((var76 != var77)) {
                                            __label__ = 179;
                                            continue $M_179_81;
                                        }
                                        }
                                    var var78 = local_15_INT; // type is INT value type is INT
                                    var var79 = local_7_INT; // type is INT value type is INT
                                    if ((var78 != var79)) {
                                        __label__ = 179;
                                        continue $M_179_81;
                                    }
                                    return;
                            }
                    }
                case 189 :
                // NORMAL
                    $S_189 : {
                    // NORMAL
                        var var30 = local_10_REFERENCE.BOOLEANshouldCollideojdBody(local_10_REFERENCE,local_9_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                        if ((var30 != 0)) {
                            break $S_189;
                        }
                        return;
                        }
                    $S_200 : {
                    // NORMAL
                        var var31 = thisRef.m_contactFilter; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@590e74d8
                        if (var31 == null ) {
                            __label__ = 222;
                            break $S_200;
                        }
                        __label__ = 207;
                        }
                    $M_207_222 : for(;;) switch (__label__) {
                        case 207 :
                        // NORMAL
                            var var35 = thisRef.m_contactFilter.BOOLEANshouldCollideojdFixtureojdFixture(thisRef.m_contactFilter,local_5_REFERENCE,local_6_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                            if ((var35 != 0)) {
                                __label__ = 222;
                                continue $M_207_222;
                            }
                            return;
                        case 222 :
                        // NORMAL
                            $S_222 : {
                            // NORMAL
                                var var41 = thisRef.pool.ojdcContactpopContactojdFixtureINTojdFixtureINT(thisRef.pool,local_5_REFERENCE,local_7_INT,local_6_REFERENCE,local_8_INT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@718b0aad
                                local_12_REFERENCE = var41; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2833958
                                var var43 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2833958
                                if (var43 != null ) {
                                    break $S_222;
                                }
                                return;
                                }
                            $S_245 : {
                            // NORMAL
                                var var83 = local_12_REFERENCE.ojdFixturegetFixtureA(local_12_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@55669423
                                local_5_REFERENCE = var83; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@35980486
                                var var85 = local_12_REFERENCE.ojdFixturegetFixtureB(local_12_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@a6d847b
                                local_6_REFERENCE = var85; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4de8cd65
                                var var87 = local_12_REFERENCE.INTgetChildIndexA(local_12_REFERENCE); // type is INT value type is INT
                                local_7_INT = var87; // type is INT value type is INT
                                var var90 = local_12_REFERENCE.INTgetChildIndexB(local_12_REFERENCE); // type is INT value type is INT
                                local_8_INT = var90; // type is INT value type is INT
                                var var93 = local_5_REFERENCE.ojdBodygetBody(local_5_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@206f895a
                                local_9_REFERENCE = var93; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5c8fd421
                                var var95 = local_6_REFERENCE.ojdBodygetBody(local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@9983198
                                local_10_REFERENCE = var95; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@10ae7263
                                var var96 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2833958
                                var96.m_prev = null;
                                var var97 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2833958
                                var var98 = thisRef.m_contactList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@683e7b04
                                var97.m_next = var98;
                                var var99 = thisRef.m_contactList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@e966424
                                if (var99 == null ) {
                                    __label__ = 318;
                                    break $S_245;
                                }
                                __label__ = 309;
                                }
                            $M_309_318 : for(;;) switch (__label__) {
                                case 309 :
                                // NORMAL
                                    var var100 = thisRef.m_contactList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@52ef09f5
                                    var var101 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2833958
                                    var100.m_prev = var101;
                                    __label__ = 318;
                                    continue $M_309_318;
                                case 318 :
                                // NORMAL
                                    $S_318 : {
                                    // NORMAL
                                        var var102 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2833958
                                        thisRef.m_contactList = var102;
                                        var var104 = local_12_REFERENCE.m_nodeA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1a33f6c1
                                        var var105 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2833958
                                        var104.contact = var105;
                                        var var107 = local_12_REFERENCE.m_nodeA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@14e48d8
                                        var var108 = local_10_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1b261787
                                        var107.other = var108;
                                        var var110 = local_12_REFERENCE.m_nodeA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3cc4ab91
                                        var110.prev = null;
                                        var var112 = local_12_REFERENCE.m_nodeA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@16cebd5d
                                        var var114 = local_9_REFERENCE.m_contactList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@13cec4bb
                                        var112.next = var114;
                                        var var116 = local_9_REFERENCE.m_contactList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@60355692
                                        if (var116 == null ) {
                                            __label__ = 387;
                                            break $S_318;
                                        }
                                        __label__ = 374;
                                        }
                                    $M_387_374 : for(;;) switch (__label__) {
                                        case 387 :
                                        // NORMAL
                                            $S_387 : {
                                            // NORMAL
                                                var var121 = local_9_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@294659bb
                                                var var123 = local_12_REFERENCE.m_nodeA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7934e126
                                                var121.m_contactList = var123;
                                                var var125 = local_12_REFERENCE.m_nodeB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1a738f08
                                                var var126 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2833958
                                                var125.contact = var126;
                                                var var128 = local_12_REFERENCE.m_nodeB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7f7d6be1
                                                var var129 = local_9_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@294659bb
                                                var128.other = var129;
                                                var var131 = local_12_REFERENCE.m_nodeB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3536235a
                                                var131.prev = null;
                                                var var133 = local_12_REFERENCE.m_nodeB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6b55d90b
                                                var var135 = local_10_REFERENCE.m_contactList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6d5800a6
                                                var133.next = var135;
                                                var var137 = local_10_REFERENCE.m_contactList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@79ee5c8f
                                                if (var137 == null ) {
                                                    __label__ = 460;
                                                    break $S_387;
                                                }
                                                __label__ = 447;
                                                }
                                            $M_447_460 : for(;;) switch (__label__) {
                                                case 460 :
                                                // NORMAL
                                                    $S_460 : {
                                                    // NORMAL
                                                        var var142 = local_10_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1b261787
                                                        var var144 = local_12_REFERENCE.m_nodeB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7dc68c1b
                                                        var142.m_contactList = var144;
                                                        var var146 = local_5_REFERENCE.BOOLEANisSensor(local_5_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                                        if ((var146 != 0)) {
                                                            __label__ = 498;
                                                            break $S_460;
                                                        }
                                                        __label__ = 478;
                                                        }
                                                    $M_498_478 : for(;;) switch (__label__) {
                                                        case 498 :
                                                        // NORMAL
                                                            var var152 = (thisRef.m_contactCount + 1); // type is INT value type is INT
                                                            thisRef.m_contactCount = var152;
                                                            return;
                                                        case 478 :
                                                        // NORMAL
                                                            $S_478 : {
                                                            // NORMAL
                                                                var var148 = local_6_REFERENCE.BOOLEANisSensor(local_6_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                                                if ((var148 != 0)) {
                                                                    __label__ = 498;
                                                                    continue $M_498_478;
                                                                }
                                                                }
                                                            local_9_REFERENCE.VOIDsetAwakeBOOLEAN(local_9_REFERENCE,1);
                                                            local_10_REFERENCE.VOIDsetAwakeBOOLEAN(local_10_REFERENCE,1);
                                                            __label__ = 498;
                                                            continue $M_498_478;
                                                    }
                                                case 447 :
                                                // NORMAL
                                                    var var139 = local_10_REFERENCE.m_contactList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@381e9f29
                                                    var var141 = local_12_REFERENCE.m_nodeB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@156ef5bc
                                                    var139.prev = var141;
                                                    __label__ = 460;
                                                    continue $M_447_460;
                                            }
                                        case 374 :
                                        // NORMAL
                                            var var118 = local_9_REFERENCE.m_contactList; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1e6fd9ba
                                            var var120 = local_12_REFERENCE.m_nodeA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@57802838
                                            var118.prev = var120;
                                            __label__ = 387;
                                            continue $M_387_374;
                                    }
                            }
                    }
            }
        }
    },

    classInitCheck : function() {
        if (!ojdContactManager.__initialized) {
            ojdContactManager.__initialized = true;
            var thePrototype = ojdContactManager.Create.prototype;
            thePrototype.instanceOf = ojdContactManager.instanceOf;
            thePrototype.ClassgetClass = ojdContactManager.ClassgetClass;
            thePrototype.VOIDaddPairjlObjectjlObject = ojdContactManager.VOIDaddPairjlObjectjlObject;
            thePrototype.VOIDdestroyojdcContact = ojdContactManager.VOIDdestroyojdcContact;
            thePrototype.VOIDcollide = ojdContactManager.VOIDcollide;
            thePrototype.VOIDfindNewContacts = ojdContactManager.VOIDfindNewContacts;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            ojcPairCallback.classInitCheck();
        }
    },

};

var ojcPairCallback = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 119,
    __implementedTypes : [1,119],


    classInitCheck : function() {
        if (!ojcPairCallback.__initialized) {
            ojcPairCallback.__initialized = true;
            jlObject.classInitCheck();
        }
    },

};

var ojdcContact = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 120,
    __implementedTypes : [1,120],

    instanceOf : function(aType) {
        return ojdcContact.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdcContact;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDflagForFiltering : function(thisRef) {
        var __label__ = null;
        var var1 = (thisRef.m_flags | 8); // type is INT value type is INT
        thisRef.m_flags = var1;
        return;
    },

    VOIDinitojpIWorldPool : function(thisRef,argPool) {
        var __label__ = null;
        thisRef.m_nodeA = null;
        thisRef.m_nodeB = null;
        var var0 = new ojcManifold.Create(); // type is REFERENCE value type is REFERENCE
        ojcManifold.VOIDinit(var0);
        thisRef.oldManifold = var0;
        thisRef.m_fixtureA = null;
        thisRef.m_fixtureB = null;
        var var1 = new ojdcContactEdge.Create(); // type is REFERENCE value type is REFERENCE
        ojdcContactEdge.VOIDinit(var1);
        thisRef.m_nodeA = var1;
        var var2 = new ojdcContactEdge.Create(); // type is REFERENCE value type is REFERENCE
        ojdcContactEdge.VOIDinit(var2);
        thisRef.m_nodeB = var2;
        var var3 = new ojcManifold.Create(); // type is REFERENCE value type is REFERENCE
        ojcManifold.VOIDinit(var3);
        thisRef.m_manifold = var3;
        thisRef.pool = argPool;
        return;
    },

    ojdFixturegetFixtureA : function(thisRef) {
        var __label__ = null;
        return thisRef.m_fixtureA;
    },

    ojdFixturegetFixtureB : function(thisRef) {
        var __label__ = null;
        return thisRef.m_fixtureB;
    },

    INTgetChildIndexA : function(thisRef) {
        var __label__ = null;
        return thisRef.m_indexA;
    },

    INTgetChildIndexB : function(thisRef) {
        var __label__ = null;
        return thisRef.m_indexB;
    },

    ojdcContactgetNext : function(thisRef) {
        var __label__ = null;
        return thisRef.m_next;
    },

    BOOLEANisTouching : function(thisRef) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var1 = (thisRef.m_flags & 2); // type is INT value type is INT
            if ((var1 != 2)) {
                __label__ = 14;
                break $S_0;
            }
            __label__ = 10;
            }
        for(;;) switch (__label__) {
            case 14 :
            // NORMAL
                var var2 = 0; // type is INT value type is INT
                return var2;
            case 10 :
            // NORMAL
                var var2 = 1; // type is INT value type is INT
                return var2;
        }
    },

    VOIDupdateojcContactListener : function(thisRef,listener) {
        var local_10_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_2_INT = null; // type is INT # of inits = 3
        var var42 = null; // type is INT # of inits = 2
        var local_3_INT = null; // type is INT # of inits = 2
        var local_6_INT = null; // type is INT # of inits = 2
        var local_5_BOOLEAN = null; // type is BOOLEAN # of inits = 1
        var var21 = null; // type is INT # of inits = 2
        var local_12_REFERENCE = null; // type is REFERENCE # of inits = 3
        var var8 = null; // type is INT # of inits = 2
        var local_14_INT = null; // type is INT # of inits = 3
        var local_7_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_13_REFERENCE = null; // type is REFERENCE # of inits = 2
        var var100 = null; // type is INT # of inits = 2
        var local_11_INT = null; // type is INT # of inits = 4
        var local_15_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_9_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_8_REFERENCE = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            thisRef.oldManifold.VOIDsetojcManifold(thisRef.oldManifold,thisRef.m_manifold);
            var var3 = (thisRef.m_flags | 4); // type is INT value type is INT
            thisRef.m_flags = var3;
            local_2_INT = 0; // type is INT value type is INT
            var var7 = (thisRef.m_flags & 2); // type is INT value type is INT
            if ((var7 != 2)) {
                __label__ = 37;
                break $S_0;
            }
            __label__ = 33;
            }
        $M_37_33 : for(;;) switch (__label__) {
            case 37 :
            // NORMAL
                var8 = 0; // type is INT value type is INT
                break $M_37_33;
            case 33 :
            // NORMAL
                var8 = 1; // type is INT value type is INT
                break $M_37_33;
        }
        $S_38 : {
        // NORMAL
            local_3_INT = var8; // type is INT value type is INT
            var var12 = thisRef.m_fixtureA.BOOLEANisSensor(thisRef.m_fixtureA); // type is BOOLEAN value type is BOOLEAN
            var local_4_BOOLEAN = var12; // type is BOOLEAN value type is BOOLEAN
            var var16 = thisRef.m_fixtureB.BOOLEANisSensor(thisRef.m_fixtureB); // type is BOOLEAN value type is BOOLEAN
            local_5_BOOLEAN = var16; // type is BOOLEAN value type is BOOLEAN
            var var19 = local_4_BOOLEAN; // type is BOOLEAN value type is BOOLEAN
            if ((var19 != 0)) {
                __label__ = 67;
                break $S_38;
            }
            __label__ = 62;
            }
        $M_67_62 : for(;;) switch (__label__) {
            case 67 :
            // NORMAL
                var21 = 1; // type is INT value type is INT
                break $M_67_62;
            case 62 :
            // NORMAL
                $S_62 : {
                // NORMAL
                    var var20 = local_5_BOOLEAN; // type is BOOLEAN value type is BOOLEAN
                    if ((var20 == 0)) {
                        break $S_62;
                    }
                    __label__ = 67;
                    continue $M_67_62;
                    }
                var21 = 0; // type is INT value type is INT
                break $M_67_62;
        }
        $S_72 : {
        // NORMAL
            local_6_INT = var21; // type is INT value type is INT
            var var25 = thisRef.m_fixtureA.ojdBodygetBody(thisRef.m_fixtureA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@77ee7237
            local_7_REFERENCE = var25; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7dbc896f
            var var28 = thisRef.m_fixtureB.ojdBodygetBody(thisRef.m_fixtureB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@53eb47a9
            local_8_REFERENCE = var28; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2dc1e10c
            var var31 = local_7_REFERENCE.ojcTransformgetTransform(local_7_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6c2fd100
            local_9_REFERENCE = var31; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@66cd928f
            var var34 = local_8_REFERENCE.ojcTransformgetTransform(local_8_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@75b33163
            local_10_REFERENCE = var34; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@22b704ab
            var var36 = local_6_INT; // type is INT value type is INT
            if ((var36 == 0)) {
                __label__ = 169;
                break $S_72;
            }
            __label__ = 111;
            }
        $M_111_169 : for(;;) switch (__label__) {
            case 111 :
            // NORMAL
                var var84 = thisRef.m_fixtureA.ojcsShapegetShape(thisRef.m_fixtureA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@71c89a28
                var local_11_REFERENCE = var84; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@78975db7
                var var87 = thisRef.m_fixtureB.ojcsShapegetShape(thisRef.m_fixtureB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6aa22474
                local_12_REFERENCE = var87; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@13e1e9d6
                var var89 = thisRef.pool.ojcCollisiongetCollision(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6f6286a
                var var96 = var89.BOOLEANtestOverlapojcsShapeINTojcsShapeINTojcTransformojcTransform(var89,local_11_REFERENCE,thisRef.m_indexA,local_12_REFERENCE,thisRef.m_indexB,local_9_REFERENCE,local_10_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                var local_2_BOOLEAN = var96; // type is BOOLEAN value type is BOOLEAN
                var var99 = thisRef.m_manifold; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@335afb46
                var99.pointCount = 0;
                var100 = local_2_BOOLEAN; // type is INT value type is BOOLEAN
                break $M_111_169;
            case 169 :
            // NORMAL
                $S_169 : {
                // NORMAL
                    thisRef.VOIDevaluateojcManifoldojcTransformojcTransform(thisRef,thisRef.m_manifold,local_9_REFERENCE,local_10_REFERENCE);
                    var var41 = thisRef.m_manifold.pointCount; // type is INT value type is INT
                    if ((var41 <= 0)) {
                        __label__ = 195;
                        break $S_169;
                    }
                    __label__ = 191;
                    }
                $M_195_191 : for(;;) switch (__label__) {
                    case 191 :
                    // NORMAL
                        var42 = 1; // type is INT value type is INT
                        break $M_195_191;
                    case 195 :
                    // NORMAL
                        var42 = 0; // type is INT value type is INT
                        break $M_195_191;
                }
                $S_196 : {
                // NORMAL
                    local_2_INT = var42; // type is INT value type is INT
                    local_11_INT = 0; // type is INT value type is INT
                    __label__ = 200;
                    }
                $L_200 : for (;;) {
                    $S_200 : {
                    // NORMAL
                        var var46 = local_11_INT; // type is INT value type is INT
                        var var48 = thisRef.m_manifold.pointCount; // type is INT value type is INT
                        if ((var46 >= var48)) {
                            __label__ = 318;
                            break $S_200;
                        }
                        __label__ = 212;
                        }
                    for(;;) switch (__label__) {
                        case 212 :
                        // NORMAL
                            $S_212 : {
                            // NORMAL
                                var var52 = thisRef.m_manifold.points.data[local_11_INT]; // type is REFERENCE value type is REFERENCE
                                local_12_REFERENCE = var52; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@19325995
                                var var54 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@19325995
                                var54.normalImpulse = 0.0;
                                var var55 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@19325995
                                var55.tangentImpulse = 0.0;
                                local_13_REFERENCE = local_12_REFERENCE.id; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@71e2627f
                                local_14_INT = 0; // type is INT value type is INT
                                __label__ = 246;
                                }
                            $L_246 : for (;;) {
                                $S_246 : {
                                // NORMAL
                                    var var61 = local_14_INT; // type is INT value type is INT
                                    var var63 = thisRef.oldManifold.pointCount; // type is INT value type is INT
                                    if ((var61 >= var63)) {
                                        __label__ = 312;
                                        break $S_246;
                                    }
                                    __label__ = 258;
                                    }
                                $M_312_258 : for(;;) switch (__label__) {
                                    case 312 :
                                    // NORMAL
                                        local_11_INT = (local_11_INT + 1); // type is INT value type is INT
                                        __label__ = 200;
                                        continue $L_200;
                                    case 258 :
                                    // NORMAL
                                        $S_258 : {
                                        // NORMAL
                                            var var67 = thisRef.oldManifold.points.data[local_14_INT]; // type is REFERENCE value type is REFERENCE
                                            local_15_REFERENCE = var67; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@71854027
                                            var var72 = local_15_REFERENCE.id.BOOLEANisEqualojcContactID(local_15_REFERENCE.id,local_13_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                            if ((var72 == 0)) {
                                                __label__ = 306;
                                                break $S_258;
                                            }
                                            __label__ = 283;
                                            }
                                        for(;;) switch (__label__) {
                                            case 283 :
                                            // NORMAL
                                                var var73 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@19325995
                                                var var75 = local_15_REFERENCE.normalImpulse; // type is FLOAT value type is FLOAT
                                                var73.normalImpulse = var75;
                                                var var76 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@19325995
                                                var var78 = local_15_REFERENCE.tangentImpulse; // type is FLOAT value type is FLOAT
                                                var76.tangentImpulse = var78;
                                                __label__ = 312;
                                                continue $M_312_258;
                                            case 306 :
                                            // NORMAL
                                                local_14_INT = (local_14_INT + 1); // type is INT value type is INT
                                                __label__ = 246;
                                                continue $L_246;
                                        }
                                }
                            }
                        case 318 :
                        // NORMAL
                            $S_318 : {
                            // NORMAL
                                var var79 = local_2_INT; // type is INT value type is INT
                                var var80 = local_3_INT; // type is INT value type is INT
                                if ((var79 == var80)) {
                                    var100 = local_2_INT; // type is INT value type is INT
                                    break $M_111_169;
                                }
                                }
                            local_7_REFERENCE.VOIDsetAwakeBOOLEAN(local_7_REFERENCE,1);
                            local_8_REFERENCE.VOIDsetAwakeBOOLEAN(local_8_REFERENCE,1);
                            var100 = local_2_INT; // type is INT value type is INT
                            break $M_111_169;
                    }
                }
        }
        $S_335 : {
        // NORMAL
            var var101 = var100; // type is INT value type is INT
            if ((var101 == 0)) {
                __label__ = 352;
                break $S_335;
            }
            __label__ = 339;
            }
        $M_339_352 : for(;;) switch (__label__) {
            case 339 :
            // NORMAL
                var var103 = (thisRef.m_flags | 2); // type is INT value type is INT
                thisRef.m_flags = var103;
                break $M_339_352;
            case 352 :
            // NORMAL
                var var105 = (thisRef.m_flags & -3); // type is INT value type is INT
                thisRef.m_flags = var105;
                break $M_339_352;
        }
        $S_363 : {
        // NORMAL
            if (listener != null ) {
                break $S_363;
            }
            return;
            }
        $S_368 : {
        // NORMAL
            var var106 = local_3_INT; // type is INT value type is INT
            if ((var106 != 0)) {
                __label__ = 384;
                break $S_368;
            }
            __label__ = 372;
            }
        $M_384_372 : for(;;) switch (__label__) {
            case 384 :
            // NORMAL
                $S_384 : {
                // NORMAL
                    var var108 = local_3_INT; // type is INT value type is INT
                    if ((var108 != 1)) {
                        __label__ = 400;
                        break $S_384;
                    }
                    __label__ = 389;
                    }
                $M_400_389 : for(;;) switch (__label__) {
                    case 400 :
                    // NORMAL
                        $S_400 : {
                        // NORMAL
                            var var110 = local_6_INT; // type is INT value type is INT
                            if ((var110 != 0)) {
                                return;
                            }
                            }
                        $S_405 : {
                        // NORMAL
                            var var111 = var100; // type is INT value type is INT
                            if ((var111 == 0)) {
                                return;
                            }
                            }
                        listener.VOIDpreSolveojdcContactojcManifold(listener,thisRef,thisRef.oldManifold);
                        return;
                    case 389 :
                    // NORMAL
                        $S_389 : {
                        // NORMAL
                            var var109 = var100; // type is INT value type is INT
                            if ((var109 != 0)) {
                                __label__ = 400;
                                continue $M_400_389;
                            }
                            }
                        listener.VOIDendContactojdcContact(listener,thisRef);
                        __label__ = 400;
                        continue $M_400_389;
                }
            case 372 :
            // NORMAL
                $S_372 : {
                // NORMAL
                    var var107 = var100; // type is INT value type is INT
                    if ((var107 != 1)) {
                        __label__ = 384;
                        continue $M_384_372;
                    }
                    }
                listener.VOIDbeginContactojdcContact(listener,thisRef);
                __label__ = 384;
                continue $M_384_372;
        }
    },

    BOOLEANisEnabled : function(thisRef) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var1 = (thisRef.m_flags & 4); // type is INT value type is INT
            if ((var1 != 4)) {
                __label__ = 14;
                break $S_0;
            }
            __label__ = 10;
            }
        for(;;) switch (__label__) {
            case 10 :
            // NORMAL
                var var2 = 1; // type is INT value type is INT
                return var2;
            case 14 :
            // NORMAL
                var var2 = 0; // type is INT value type is INT
                return var2;
        }
    },

    ojcManifoldgetManifold : function(thisRef) {
        var __label__ = null;
        return thisRef.m_manifold;
    },

    VOIDsetEnabledBOOLEAN : function(thisRef,flag) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((flag == 0)) {
                __label__ = 17;
                break $S_0;
            }
            __label__ = 4;
            }
        for(;;) switch (__label__) {
            case 17 :
            // NORMAL
                var var3 = (thisRef.m_flags & -5); // type is INT value type is INT
                thisRef.m_flags = var3;
                return;
            case 4 :
            // NORMAL
                var var1 = (thisRef.m_flags | 4); // type is INT value type is INT
                thisRef.m_flags = var1;
                return;
        }
    },

    VOIDinitojdFixtureINTojdFixtureINT : function(thisRef,fA,indexA,fB,indexB) {
        var __label__ = null;
        thisRef.m_flags = 0;
        thisRef.m_fixtureA = fA;
        thisRef.m_fixtureB = fB;
        thisRef.m_indexA = indexA;
        thisRef.m_indexB = indexB;
        var var0 = thisRef.m_manifold; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6ec978f7
        var0.pointCount = 0;
        thisRef.m_prev = null;
        thisRef.m_next = null;
        var var1 = thisRef.m_nodeA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2a489856
        var1.contact = null;
        var var2 = thisRef.m_nodeA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@64ed9a95
        var2.prev = null;
        var var3 = thisRef.m_nodeA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@32b076c6
        var3.next = null;
        var var4 = thisRef.m_nodeA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@179baea7
        var4.other = null;
        var var5 = thisRef.m_nodeB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@797f1e2a
        var5.contact = null;
        var var6 = thisRef.m_nodeB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@71ce0aa2
        var6.prev = null;
        var var7 = thisRef.m_nodeB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@40f9441b
        var7.next = null;
        var var8 = thisRef.m_nodeB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@a5d3435
        var8.other = null;
        thisRef.m_toiCount = 0.0;
        var var11 = ojdcContact.FLOATmixFrictionFLOATFLOAT(fA.m_friction,fB.m_friction); // type is FLOAT value type is FLOAT
        thisRef.m_friction = var11;
        var var14 = ojdcContact.FLOATmixRestitutionFLOATFLOAT(fA.m_restitution,fB.m_restitution); // type is FLOAT value type is FLOAT
        thisRef.m_restitution = var14;
        thisRef.m_tangentSpeed = 0.0;
        return;
    },

    FLOATmixFrictionFLOATFLOAT : function(friction1,friction2) {
        var __label__ = null;
        var var1 = ojcMathUtils.FLOATsqrtFLOAT((friction1 * friction2)); // type is FLOAT value type is FLOAT
        return var1;
    },

    FLOATmixRestitutionFLOATFLOAT : function(restitution1,restitution2) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((restitution1 <= restitution2)) {
                __label__ = 10;
                break $S_0;
            }
            __label__ = 6;
            }
        for(;;) switch (__label__) {
            case 6 :
            // NORMAL
                var var1 = restitution1; // type is FLOAT value type is FLOAT
                return var1;
            case 10 :
            // NORMAL
                var var1 = restitution2; // type is FLOAT value type is FLOAT
                return var1;
        }
    },

    classInitCheck : function() {
        if (!ojdcContact.__initialized) {
            ojdcContact.__initialized = true;
            jlObject.classInitCheck();
        }
    },

};

var ojcContactFilter = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 121,
    __implementedTypes : [1,121],

    Create : function() {
    },

    instanceOf : function(aType) {
        return ojcContactFilter.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcContactFilter;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    BOOLEANshouldCollideojdFixtureojdFixture : function(thisRef,fixtureA,fixtureB) {
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 1
        var var20 = null; // type is INT # of inits = 2
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = fixtureA.ojdFiltergetFilterData(fixtureA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5bfb48b8
            local_3_REFERENCE = var0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5cb00d72
            var var2 = fixtureB.ojdFiltergetFilterData(fixtureB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@775772d6
            local_4_REFERENCE = var2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4d6ddc3
            var var5 = local_3_REFERENCE.groupIndex; // type is INT value type is INT
            var var7 = local_4_REFERENCE.groupIndex; // type is INT value type is INT
            if ((var5 != var7)) {
                __label__ = 43;
                break $S_0;
            }
            __label__ = 23;
            }
        $M_43_23 : for(;;) switch (__label__) {
            case 43 :
            // NORMAL
                $S_43 : {
                // NORMAL
                    var var14 = (local_3_REFERENCE.maskBits & local_4_REFERENCE.categoryBits); // type is INT value type is INT
                    if ((var14 == 0)) {
                        __label__ = 73;
                        break $S_43;
                    }
                    __label__ = 56;
                    }
                $M_73_56 : for(;;) switch (__label__) {
                    case 73 :
                    // NORMAL
                        var20 = 0; // type is INT value type is INT
                        break $M_73_56;
                    case 56 :
                    // NORMAL
                        $S_56 : {
                        // NORMAL
                            var var19 = (local_3_REFERENCE.categoryBits & local_4_REFERENCE.maskBits); // type is INT value type is INT
                            if ((var19 == 0)) {
                                __label__ = 73;
                                continue $M_73_56;
                            }
                            }
                        var20 = 1; // type is INT value type is INT
                        break $M_73_56;
                }
                var local_5_INT = var20; // type is INT value type is INT
                return local_5_INT;
            case 23 :
            // NORMAL
                $S_23 : {
                // NORMAL
                    var var9 = local_3_REFERENCE.groupIndex; // type is INT value type is INT
                    if ((var9 == 0)) {
                        __label__ = 43;
                        continue $M_43_23;
                    }
                    }
                $S_30 : {
                // NORMAL
                    var var25 = local_3_REFERENCE.groupIndex; // type is INT value type is INT
                    if ((var25 <= 0)) {
                        __label__ = 41;
                        break $S_30;
                    }
                    __label__ = 37;
                    }
                for(;;) switch (__label__) {
                    case 37 :
                    // NORMAL
                        var var26 = 1; // type is INT value type is INT
                        return var26;
                    case 41 :
                    // NORMAL
                        var var26 = 0; // type is INT value type is INT
                        return var26;
                }
        }
    },

    classInitCheck : function() {
        if (!ojcContactFilter.__initialized) {
            ojcContactFilter.__initialized = true;
            var thePrototype = ojcContactFilter.Create.prototype;
            thePrototype.instanceOf = ojcContactFilter.instanceOf;
            thePrototype.ClassgetClass = ojcContactFilter.ClassgetClass;
            thePrototype.BOOLEANshouldCollideojdFixtureojdFixture = ojcContactFilter.BOOLEANshouldCollideojdFixtureojdFixture;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojcContactListener = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 122,
    __implementedTypes : [1,122],


    classInitCheck : function() {
        if (!ojcContactListener.__initialized) {
            ojcContactListener.__initialized = true;
            jlObject.classInitCheck();
        }
    },

};

var ojcbBroadPhase = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 123,
    __implementedTypes : [1,123,96],

    Create : function() {
        this.m_proxyCount = 0; // declared in org.jbox2d.collision.broadphase.BroadPhase
        this.m_pairCapacity = 0; // declared in org.jbox2d.collision.broadphase.BroadPhase
        this.m_pairCount = 0; // declared in org.jbox2d.collision.broadphase.BroadPhase
        this.m_pairBuffer = null; // declared in org.jbox2d.collision.broadphase.BroadPhase
        this.m_moveCapacity = 0; // declared in org.jbox2d.collision.broadphase.BroadPhase
        this.m_moveCount = 0; // declared in org.jbox2d.collision.broadphase.BroadPhase
        this.m_moveBuffer = null; // declared in org.jbox2d.collision.broadphase.BroadPhase
        this.m_tree = null; // declared in org.jbox2d.collision.broadphase.BroadPhase
        this.m_queryProxyId = 0; // declared in org.jbox2d.collision.broadphase.BroadPhase
    },

    instanceOf : function(aType) {
        return ojcbBroadPhase.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcbBroadPhase;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitojcbBroadPhaseStrategy : function(thisRef,strategy) {
        var local_2_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            thisRef.m_proxyCount = 0;
            thisRef.m_pairCapacity = 16;
            thisRef.m_pairCount = 0;
            var var1 = bytecoder.newArray(thisRef.m_pairCapacity,null); // type is REFERENCE value type is REFERENCE
            thisRef.m_pairBuffer = var1;
            local_2_INT = 0; // type is INT value type is INT
            __label__ = 33;
            }
        $L_33 : for (;;) {
            $S_33 : {
            // NORMAL
                var var4 = local_2_INT; // type is INT value type is INT
                var var5 = thisRef.m_pairCapacity; // type is INT value type is INT
                if ((var4 >= var5)) {
                    __label__ = 60;
                    break $S_33;
                }
                __label__ = 41;
                }
            for(;;) switch (__label__) {
                case 41 :
                // NORMAL
                    var var8 = thisRef.m_pairBuffer; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@38ded8b7
                    var var9 = local_2_INT; // type is INT value type is INT
                    var var10 = new ojcbPair.Create(); // type is REFERENCE value type is REFERENCE
                    ojcbPair.VOIDinit(var10);
                    var8.data[var9] = var10;
                    local_2_INT = (local_2_INT + 1); // type is INT value type is INT
                    __label__ = 33;
                    continue $L_33;
                case 60 :
                // NORMAL
                    thisRef.m_moveCapacity = 16;
                    thisRef.m_moveCount = 0;
                    var var7 = bytecoder.newArray(thisRef.m_moveCapacity,0); // type is REFERENCE value type is REFERENCE
                    thisRef.m_moveBuffer = var7;
                    thisRef.m_tree = strategy;
                    thisRef.m_queryProxyId = -1;
                    return;
            }
        }
    },

    INTcreateProxyojcAABBjlObject : function(thisRef,aabb,userData) {
        var __label__ = null;
        var var1 = thisRef.m_tree.INTcreateProxyojcAABBjlObject(thisRef.m_tree,aabb,userData); // type is INT value type is INT
        var local_3_INT = var1; // type is INT value type is INT
        var var5 = (thisRef.m_proxyCount + 1); // type is INT value type is INT
        thisRef.m_proxyCount = var5;
        thisRef.VOIDbufferMoveINT(thisRef,local_3_INT);
        return local_3_INT;
    },

    VOIDbufferMoveINT : function(thisRef,proxyId) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.m_moveCount; // type is INT value type is INT
            var var1 = thisRef.m_moveCapacity; // type is INT value type is INT
            if ((var0 != var1)) {
                __label__ = 48;
                break $S_0;
            }
            __label__ = 11;
            }
        $M_48_11 : for(;;) switch (__label__) {
            case 48 :
            // NORMAL
                var var12 = thisRef.m_moveBuffer; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1e79fc5
                var var13 = thisRef.m_moveCount; // type is INT value type is INT
                var12.data[var13] = proxyId;
                var var15 = (thisRef.m_moveCount + 1); // type is INT value type is INT
                thisRef.m_moveCount = var15;
                return;
            case 11 :
            // NORMAL
                var local_2_REFERENCE = thisRef.m_moveBuffer; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@2cec25b8
                var var5 = (thisRef.m_moveCapacity * 2); // type is INT value type is INT
                thisRef.m_moveCapacity = var5;
                var var7 = bytecoder.newArray(thisRef.m_moveCapacity,0); // type is REFERENCE value type is REFERENCE
                thisRef.m_moveBuffer = var7;
                jlSystem.VOIDarraycopyjlObjectINTjlObjectINTINT(local_2_REFERENCE,0,thisRef.m_moveBuffer,0,local_2_REFERENCE.data.length);
                __label__ = 48;
                continue $M_48_11;
        }
    },

    VOIDupdatePairsojcPairCallback : function(thisRef,callback) {
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_2_INT = null; // type is INT # of inits = 8
        var __label__ = null;
        $S_0 : {
        // NORMAL
            thisRef.m_pairCount = 0;
            local_2_INT = 0; // type is INT value type is INT
            __label__ = 7;
            }
        $L_7 : for (;;) {
            $S_7 : {
            // NORMAL
                var var2 = local_2_INT; // type is INT value type is INT
                var var3 = thisRef.m_moveCount; // type is INT value type is INT
                if ((var2 >= var3)) {
                    __label__ = 67;
                    break $S_7;
                }
                __label__ = 15;
                }
            for(;;) switch (__label__) {
                case 67 :
                // NORMAL
                    $S_67 : {
                    // NORMAL
                        thisRef.m_moveCount = 0;
                        juArrays.VOIDsortA1jlObjectINTINT(thisRef.m_pairBuffer,0,thisRef.m_pairCount);
                        local_2_INT = 0; // type is INT value type is INT
                        __label__ = 86;
                        }
                    $L_86 : for (;;) {
                        $S_86 : {
                        // NORMAL
                            var var7 = local_2_INT; // type is INT value type is INT
                            var var8 = thisRef.m_pairCount; // type is INT value type is INT
                            if ((var7 >= var8)) {
                                return;
                            }
                            }
                        $S_94 : {
                        // NORMAL
                            var var21 = thisRef.m_pairBuffer.data[local_2_INT]; // type is REFERENCE value type is REFERENCE
                            local_3_REFERENCE = var21; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@19d9625a
                            var var25 = thisRef.m_tree.jlObjectgetUserDataINT(thisRef.m_tree,local_3_REFERENCE.proxyIdA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@34679229
                            var local_4_REFERENCE = var25; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5535a1bf
                            var var30 = thisRef.m_tree.jlObjectgetUserDataINT(thisRef.m_tree,local_3_REFERENCE.proxyIdB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@35b3b699
                            var local_5_REFERENCE = var30; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@36e9926c
                            callback.VOIDaddPairjlObjectjlObject(callback,local_4_REFERENCE,local_5_REFERENCE);
                            local_2_INT = (local_2_INT + 1); // type is INT value type is INT
                            __label__ = 144;
                            }
                        $L_144 : for (;;) {
                            $S_144 : {
                            // NORMAL
                                var var34 = local_2_INT; // type is INT value type is INT
                                var var35 = thisRef.m_pairCount; // type is INT value type is INT
                                if ((var34 >= var35)) {
                                    __label__ = 193;
                                    break $S_144;
                                }
                                __label__ = 152;
                                }
                            $M_152_193 : for(;;) switch (__label__) {
                                case 152 :
                                // NORMAL
                                    $S_152 : {
                                    // NORMAL
                                        var var38 = thisRef.m_pairBuffer.data[local_2_INT]; // type is REFERENCE value type is REFERENCE
                                        local_6_REFERENCE = var38; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@2dc4c05e
                                        var var41 = local_6_REFERENCE.proxyIdA; // type is INT value type is INT
                                        var var43 = local_3_REFERENCE.proxyIdA; // type is INT value type is INT
                                        if ((var41 != var43)) {
                                            __label__ = 193;
                                            continue $M_152_193;
                                        }
                                        }
                                    $S_172 : {
                                    // NORMAL
                                        var var45 = local_6_REFERENCE.proxyIdB; // type is INT value type is INT
                                        var var47 = local_3_REFERENCE.proxyIdB; // type is INT value type is INT
                                        if ((var45 == var47)) {
                                            __label__ = 187;
                                            break $S_172;
                                        }
                                        __label__ = 184;
                                        }
                                    for(;;) switch (__label__) {
                                        case 184 :
                                        // NORMAL
                                            __label__ = 193;
                                            continue $M_152_193;
                                        case 187 :
                                        // NORMAL
                                            local_2_INT = (local_2_INT + 1); // type is INT value type is INT
                                            __label__ = 144;
                                            continue $L_144;
                                    }
                                case 193 :
                                // NORMAL
                                    __label__ = 86;
                                    continue $L_86;
                            }
                        }
                    }
                case 15 :
                // NORMAL
                    $S_15 : {
                    // NORMAL
                        var var11 = thisRef.m_moveBuffer.data[local_2_INT]; // type is INT value type is INT
                        thisRef.m_queryProxyId = var11;
                        var var12 = thisRef.m_queryProxyId; // type is INT value type is INT
                        if ((var12 != -1)) {
                            __label__ = 36;
                            break $S_15;
                        }
                        __label__ = 33;
                        }
                    $M_36_33 : for(;;) switch (__label__) {
                        case 36 :
                        // NORMAL
                            var var15 = thisRef.m_tree.ojcAABBgetFatAABBINT(thisRef.m_tree,thisRef.m_queryProxyId); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3e97b842
                            local_3_REFERENCE = var15; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@11d54b27
                            thisRef.m_tree.VOIDqueryojcTreeCallbackojcAABB(thisRef.m_tree,thisRef,local_3_REFERENCE);
                            break $M_36_33;
                        case 33 :
                        // NORMAL
                            break $M_36_33;
                    }
                    local_2_INT = (local_2_INT + 1); // type is INT value type is INT
                    __label__ = 7;
                    continue $L_7;
            }
        }
    },

    BOOLEANtestOverlapINTINT : function(thisRef,proxyIdA,proxyIdB) {
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var1 = thisRef.m_tree.ojcAABBgetFatAABBINT(thisRef.m_tree,proxyIdA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6d5fdfb1
            local_3_REFERENCE = var1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@31c2a51a
            var var4 = thisRef.m_tree.ojcAABBgetFatAABBINT(thisRef.m_tree,proxyIdB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1e7394a8
            local_4_REFERENCE = var4; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@36837a58
            var var12 = (local_4_REFERENCE.lowerBound.x - local_3_REFERENCE.upperBound.x); // type is FLOAT value type is FLOAT
            if ((var12 > 0.0)) {
                return 0;
            }
            }
        $S_44 : {
        // NORMAL
            var var20 = (local_4_REFERENCE.lowerBound.y - local_3_REFERENCE.upperBound.y); // type is FLOAT value type is FLOAT
            if ((var20 <= 0.0)) {
                break $S_44;
            }
            return 0;
            }
        $S_67 : {
        // NORMAL
            var var28 = (local_3_REFERENCE.lowerBound.x - local_4_REFERENCE.upperBound.x); // type is FLOAT value type is FLOAT
            if ((var28 > 0.0)) {
                return 0;
            }
            }
        var var36 = (local_3_REFERENCE.lowerBound.y - local_4_REFERENCE.upperBound.y); // type is FLOAT value type is FLOAT
        if ((var36 <= 0.0)) {
            return 1;
        }
        return 0;
    },

    VOIDmoveProxyINTojcAABBojcVec2 : function(thisRef,proxyId,aabb,displacement) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var1 = thisRef.m_tree.BOOLEANmoveProxyINTojcAABBojcVec2(thisRef.m_tree,proxyId,aabb,displacement); // type is BOOLEAN value type is BOOLEAN
            var local_4_BOOLEAN = var1; // type is BOOLEAN value type is BOOLEAN
            var var4 = local_4_BOOLEAN; // type is BOOLEAN value type is BOOLEAN
            if ((var4 == 0)) {
                return;
            }
            }
        thisRef.VOIDbufferMoveINT(thisRef,proxyId);
        return;
    },

    jlObjectgetUserDataINT : function(thisRef,proxyId) {
        var __label__ = null;
        var var1 = thisRef.m_tree.jlObjectgetUserDataINT(thisRef.m_tree,proxyId); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@627432a8
        return var1;
    },

    BOOLEANtreeCallbackINT : function(thisRef,proxyId) {
        var local_3_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.m_queryProxyId; // type is INT value type is INT
            if ((proxyId != var0)) {
                break $S_0;
            }
            return 1;
            }
        $S_10 : {
        // NORMAL
            var var1 = thisRef.m_pairCount; // type is INT value type is INT
            var var2 = thisRef.m_pairCapacity; // type is INT value type is INT
            if ((var1 != var2)) {
                __label__ = 89;
                break $S_10;
            }
            __label__ = 21;
            }
        $M_89_21 : for(;;) switch (__label__) {
            case 21 :
            // NORMAL
                $S_21 : {
                // NORMAL
                    var local_2_REFERENCE = thisRef.m_pairBuffer; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@2bdbb900
                    var var6 = (thisRef.m_pairCapacity * 2); // type is INT value type is INT
                    thisRef.m_pairCapacity = var6;
                    var var8 = bytecoder.newArray(thisRef.m_pairCapacity,null); // type is REFERENCE value type is REFERENCE
                    thisRef.m_pairBuffer = var8;
                    jlSystem.VOIDarraycopyjlObjectINTjlObjectINTINT(local_2_REFERENCE,0,thisRef.m_pairBuffer,0,local_2_REFERENCE.data.length);
                    local_3_INT = local_2_REFERENCE.data.length; // type is INT value type is INT
                    __label__ = 62;
                    }
                $L_62 : for (;;) {
                    $S_62 : {
                    // NORMAL
                        var var17 = local_3_INT; // type is INT value type is INT
                        var var18 = thisRef.m_pairCapacity; // type is INT value type is INT
                        if ((var17 >= var18)) {
                            __label__ = 89;
                            continue $M_89_21;
                        }
                        }
                    var var36 = thisRef.m_pairBuffer; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@2f8236f3
                    var var37 = local_3_INT; // type is INT value type is INT
                    var var38 = new ojcbPair.Create(); // type is REFERENCE value type is REFERENCE
                    ojcbPair.VOIDinit(var38);
                    var36.data[var37] = var38;
                    local_3_INT = (local_3_INT + 1); // type is INT value type is INT
                    __label__ = 62;
                    continue $L_62;
                }
            case 89 :
            // NORMAL
                $S_89 : {
                // NORMAL
                    var var19 = thisRef.m_queryProxyId; // type is INT value type is INT
                    if ((proxyId >= var19)) {
                        __label__ = 129;
                        break $S_89;
                    }
                    __label__ = 97;
                    }
                $M_129_97 : for(;;) switch (__label__) {
                    case 97 :
                    // NORMAL
                        var var29 = thisRef.m_pairBuffer.data[thisRef.m_pairCount]; // type is REFERENCE value type is REFERENCE
                        var29.proxyIdA = proxyId;
                        var var32 = thisRef.m_pairBuffer.data[thisRef.m_pairCount]; // type is REFERENCE value type is REFERENCE
                        var var33 = thisRef.m_queryProxyId; // type is INT value type is INT
                        var32.proxyIdB = var33;
                        break $M_129_97;
                    case 129 :
                    // NORMAL
                        var var22 = thisRef.m_pairBuffer.data[thisRef.m_pairCount]; // type is REFERENCE value type is REFERENCE
                        var var23 = thisRef.m_queryProxyId; // type is INT value type is INT
                        var22.proxyIdA = var23;
                        var var26 = thisRef.m_pairBuffer.data[thisRef.m_pairCount]; // type is REFERENCE value type is REFERENCE
                        var26.proxyIdB = proxyId;
                        break $M_129_97;
                }
                var var35 = (thisRef.m_pairCount + 1); // type is INT value type is INT
                thisRef.m_pairCount = var35;
                return 1;
        }
    },

    classInitCheck : function() {
        if (!ojcbBroadPhase.__initialized) {
            ojcbBroadPhase.__initialized = true;
            var thePrototype = ojcbBroadPhase.Create.prototype;
            thePrototype.instanceOf = ojcbBroadPhase.instanceOf;
            thePrototype.ClassgetClass = ojcbBroadPhase.ClassgetClass;
            thePrototype.BOOLEANtreeCallbackINT = ojcbBroadPhase.BOOLEANtreeCallbackINT;
            thePrototype.jlObjectgetUserDataINT = ojcbBroadPhase.jlObjectgetUserDataINT;
            thePrototype.VOIDmoveProxyINTojcAABBojcVec2 = ojcbBroadPhase.VOIDmoveProxyINTojcAABBojcVec2;
            thePrototype.BOOLEANtestOverlapINTINT = ojcbBroadPhase.BOOLEANtestOverlapINTINT;
            thePrototype.VOIDupdatePairsojcPairCallback = ojcbBroadPhase.VOIDupdatePairsojcPairCallback;
            thePrototype.VOIDbufferMoveINT = ojcbBroadPhase.VOIDbufferMoveINT;
            thePrototype.INTcreateProxyojcAABBjlObject = ojcbBroadPhase.INTcreateProxyojcAABBjlObject;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            ojcTreeCallback.classInitCheck();
        }
    },

};

var ojcbPair = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 124,
    __implementedTypes : [1,14,124],

    Create : function() {
        this.proxyIdA = 0; // declared in org.jbox2d.collision.broadphase.Pair
        this.proxyIdB = 0; // declared in org.jbox2d.collision.broadphase.Pair
    },

    instanceOf : function(aType) {
        return ojcbPair.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcbPair;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    INTcompareTojlObject : function(thisRef,x0) {
        var __label__ = null;
        var var0 = thisRef.INTcompareToojcbPair(thisRef,x0); // type is INT value type is INT
        return var0;
    },

    INTcompareToojcbPair : function(thisRef,pair2) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.proxyIdA; // type is INT value type is INT
            var var1 = pair2.proxyIdA; // type is INT value type is INT
            if ((var0 >= var1)) {
                break $S_0;
            }
            return -1;
            }
        $S_13 : {
        // NORMAL
            var var2 = thisRef.proxyIdA; // type is INT value type is INT
            var var3 = pair2.proxyIdA; // type is INT value type is INT
            if ((var2 != var3)) {
                return 1;
            }
            }
        $S_24 : {
        // NORMAL
            var var4 = thisRef.proxyIdB; // type is INT value type is INT
            var var5 = pair2.proxyIdB; // type is INT value type is INT
            if ((var4 >= var5)) {
                __label__ = 39;
                break $S_24;
            }
            __label__ = 35;
            }
        for(;;) switch (__label__) {
            case 39 :
            // NORMAL
                $S_39 : {
                // NORMAL
                    var var6 = thisRef.proxyIdB; // type is INT value type is INT
                    var var7 = pair2.proxyIdB; // type is INT value type is INT
                    if ((var6 != var7)) {
                        __label__ = 54;
                        break $S_39;
                    }
                    __label__ = 50;
                    }
                for(;;) switch (__label__) {
                    case 50 :
                    // NORMAL
                        var var8 = 0; // type is INT value type is INT
                        return var8;
                    case 54 :
                    // NORMAL
                        var var8 = 1; // type is INT value type is INT
                        return var8;
                }
            case 35 :
            // NORMAL
                var var8 = -1; // type is INT value type is INT
                return var8;
        }
    },

    classInitCheck : function() {
        if (!ojcbPair.__initialized) {
            ojcbPair.__initialized = true;
            var thePrototype = ojcbPair.Create.prototype;
            thePrototype.instanceOf = ojcbPair.instanceOf;
            thePrototype.ClassgetClass = ojcbPair.ClassgetClass;
            thePrototype.INTcompareToojcbPair = ojcbPair.INTcompareToojcbPair;
            thePrototype.INTcompareTojlObject = ojcbPair.INTcompareTojlObject;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            jlComparable.classInitCheck();
        }
    },

};

var ojdBodyDef = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 125,
    __implementedTypes : [1,125],

    Create : function() {
        this.userData = null; // declared in org.jbox2d.dynamics.BodyDef
        this.position = null; // declared in org.jbox2d.dynamics.BodyDef
        this.angle = 0; // declared in org.jbox2d.dynamics.BodyDef
        this.linearVelocity = null; // declared in org.jbox2d.dynamics.BodyDef
        this.angularVelocity = 0; // declared in org.jbox2d.dynamics.BodyDef
        this.linearDamping = 0; // declared in org.jbox2d.dynamics.BodyDef
        this.angularDamping = 0; // declared in org.jbox2d.dynamics.BodyDef
        this.allowSleep = false; // declared in org.jbox2d.dynamics.BodyDef
        this.awake = false; // declared in org.jbox2d.dynamics.BodyDef
        this.fixedRotation = false; // declared in org.jbox2d.dynamics.BodyDef
        this.bullet = false; // declared in org.jbox2d.dynamics.BodyDef
        this.type = null; // declared in org.jbox2d.dynamics.BodyDef
        this.active = false; // declared in org.jbox2d.dynamics.BodyDef
        this.gravityScale = 0; // declared in org.jbox2d.dynamics.BodyDef
    },

    instanceOf : function(aType) {
        return ojdBodyDef.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdBodyDef;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        thisRef.userData = null;
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var0);
        thisRef.position = var0;
        thisRef.angle = 0.0;
        var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var1);
        thisRef.linearVelocity = var1;
        thisRef.angularVelocity = 0.0;
        thisRef.linearDamping = 0.0;
        thisRef.angularDamping = 0.0;
        thisRef.allowSleep = 1;
        thisRef.awake = 1;
        thisRef.fixedRotation = 0;
        thisRef.bullet = 0;
        var var2 = ojdBodyType.STATIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6acbc1cd
        thisRef.type = var2;
        thisRef.active = 1;
        thisRef.gravityScale = 1.0;
        return;
    },

    classInitCheck : function() {
        if (!ojdBodyDef.__initialized) {
            ojdBodyDef.__initialized = true;
            var thePrototype = ojdBodyDef.Create.prototype;
            thePrototype.instanceOf = ojdBodyDef.instanceOf;
            thePrototype.ClassgetClass = ojdBodyDef.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojdBodyType = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 126,
    __implementedTypes : [1,14,126,59,2],
    STATIC : null, // declared in org.jbox2d.dynamics.BodyType
    KINEMATIC : null, // declared in org.jbox2d.dynamics.BodyType
    DYNAMIC : null, // declared in org.jbox2d.dynamics.BodyType
    $VALUES : null, // declared in org.jbox2d.dynamics.BodyType

    Create : function() {
        this.name = null; // declared in java.lang.Enum
        this.ordinalNumber = 0; // declared in java.lang.Enum
    },

    instanceOf : function(aType) {
        return ojdBodyType.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdBodyType;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var __label__ = null;
        var var0 = new ojdBodyType.Create(); // type is REFERENCE value type is REFERENCE
        ojdBodyType.VOIDinitjlStringINT(var0,bytecoder.stringpool[37],0);
        ojdBodyType.STATIC = var0;
        var var1 = new ojdBodyType.Create(); // type is REFERENCE value type is REFERENCE
        ojdBodyType.VOIDinitjlStringINT(var1,bytecoder.stringpool[38],1);
        ojdBodyType.KINEMATIC = var1;
        var var2 = new ojdBodyType.Create(); // type is REFERENCE value type is REFERENCE
        ojdBodyType.VOIDinitjlStringINT(var2,bytecoder.stringpool[39],2);
        ojdBodyType.DYNAMIC = var2;
        var var3 = bytecoder.newArray(3,null); // type is REFERENCE value type is REFERENCE
        var var4 = ojdBodyType.STATIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3a2d1c38
        var3.data[0] = var4;
        var var5 = ojdBodyType.KINEMATIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7c690eed
        var3.data[1] = var5;
        var var6 = ojdBodyType.DYNAMIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@489fbe8c
        var3.data[2] = var6;
        ojdBodyType.$VALUES = var3;
        return;
    },

    VOIDinitjlStringINT : function(thisRef,p1,p2) {
        var __label__ = null;
        jlEnum.VOIDinitjlStringINT(thisRef,p1,p2);
        return;
    },

    classInitCheck : function() {
        if (!ojdBodyType.__initialized) {
            ojdBodyType.__initialized = true;
            var thePrototype = ojdBodyType.Create.prototype;
            thePrototype.instanceOf = ojdBodyType.instanceOf;
            thePrototype.ClassgetClass = ojdBodyType.ClassgetClass;
            thePrototype.INTordinal = jlEnum.INTordinal;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlEnum.classInitCheck();
            jlObject.classInitCheck();
            jlComparable.classInitCheck();
            jiSerializable.classInitCheck();
            jlrArray.classInitCheck();
            ojdBodyType.VOIDclinit();
        }
    },

};

var jlAssertionError = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 127,
    __implementedTypes : [127,1,64,63,2],

    Create : function() {
    },

    instanceOf : function(aType) {
        return jlAssertionError.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jlAssertionError;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        jlError.VOIDinit(thisRef);
        return;
    },

    VOIDinitjlObject : function(thisRef,detailMessage) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = jlString.jlStringvalueOfjlObject(detailMessage); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@49223980
            jlAssertionError.VOIDinitjlString(thisRef,var0);
            var var1 = (detailMessage == null ? false : detailMessage.instanceOf(jlThrowable)); // type is BOOLEAN value type is BOOLEAN
            if ((var1 == 0)) {
                return;
            }
            }
        var var2 = thisRef.jlThrowableinitCausejlThrowable(thisRef,detailMessage); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@339aafb0
        return;
    },

    VOIDinitjlString : function(thisRef,detailMessage) {
        var __label__ = null;
        jlError.VOIDinitjlString(thisRef,detailMessage);
        return;
    },

    classInitCheck : function() {
        if (!jlAssertionError.__initialized) {
            jlAssertionError.__initialized = true;
            var thePrototype = jlAssertionError.Create.prototype;
            thePrototype.instanceOf = jlAssertionError.instanceOf;
            thePrototype.ClassgetClass = jlAssertionError.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlError.classInitCheck();
            jlObject.classInitCheck();
            jlThrowable.classInitCheck();
            jiSerializable.classInitCheck();
        }
    },

};

var ojdFixtureDef = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 128,
    __implementedTypes : [1,128],

    Create : function() {
        this.shape = null; // declared in org.jbox2d.dynamics.FixtureDef
        this.userData = null; // declared in org.jbox2d.dynamics.FixtureDef
        this.friction = 0; // declared in org.jbox2d.dynamics.FixtureDef
        this.restitution = 0; // declared in org.jbox2d.dynamics.FixtureDef
        this.density = 0; // declared in org.jbox2d.dynamics.FixtureDef
        this.filter = null; // declared in org.jbox2d.dynamics.FixtureDef
        this.isSensor = false; // declared in org.jbox2d.dynamics.FixtureDef
    },

    instanceOf : function(aType) {
        return ojdFixtureDef.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdFixtureDef;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        thisRef.shape = null;
        thisRef.shape = null;
        thisRef.userData = null;
        thisRef.friction = 0.2;
        thisRef.restitution = 0.0;
        thisRef.density = 0.0;
        var var0 = new ojdFilter.Create(); // type is REFERENCE value type is REFERENCE
        ojdFilter.VOIDinit(var0);
        thisRef.filter = var0;
        thisRef.isSensor = 0;
        return;
    },

    classInitCheck : function() {
        if (!ojdFixtureDef.__initialized) {
            ojdFixtureDef.__initialized = true;
            var thePrototype = ojdFixtureDef.Create.prototype;
            thePrototype.instanceOf = ojdFixtureDef.instanceOf;
            thePrototype.ClassgetClass = ojdFixtureDef.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojcsShape = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 129,
    __implementedTypes : [1,129],

    instanceOf : function(aType) {
        return ojcsShape.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcsShape;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitojcsShapeType : function(thisRef,type) {
        var __label__ = null;
        thisRef.m_type = type;
        return;
    },

    VOIDsetRadiusFLOAT : function(thisRef,radius) {
        var __label__ = null;
        thisRef.m_radius = radius;
        return;
    },

    FLOATgetRadius : function(thisRef) {
        var __label__ = null;
        return thisRef.m_radius;
    },

    ojcsShapeTypegetType : function(thisRef) {
        var __label__ = null;
        return thisRef.m_type;
    },

    classInitCheck : function() {
        if (!ojcsShape.__initialized) {
            ojcsShape.__initialized = true;
            jlObject.classInitCheck();
        }
    },

};

var ojdFilter = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 130,
    __implementedTypes : [1,130],

    Create : function() {
        this.categoryBits = 0; // declared in org.jbox2d.dynamics.Filter
        this.maskBits = 0; // declared in org.jbox2d.dynamics.Filter
        this.groupIndex = 0; // declared in org.jbox2d.dynamics.Filter
    },

    instanceOf : function(aType) {
        return ojdFilter.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdFilter;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        thisRef.categoryBits = 1;
        thisRef.maskBits = 65535;
        thisRef.groupIndex = 0;
        return;
    },

    VOIDsetojdFilter : function(thisRef,argOther) {
        var __label__ = null;
        var var0 = argOther.categoryBits; // type is INT value type is INT
        thisRef.categoryBits = var0;
        var var1 = argOther.maskBits; // type is INT value type is INT
        thisRef.maskBits = var1;
        var var2 = argOther.groupIndex; // type is INT value type is INT
        thisRef.groupIndex = var2;
        return;
    },

    classInitCheck : function() {
        if (!ojdFilter.__initialized) {
            ojdFilter.__initialized = true;
            var thePrototype = ojdFilter.Create.prototype;
            thePrototype.instanceOf = ojdFilter.instanceOf;
            thePrototype.ClassgetClass = ojdFilter.ClassgetClass;
            thePrototype.VOIDsetojdFilter = ojdFilter.VOIDsetojdFilter;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojcsMassData = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 131,
    __implementedTypes : [1,131],

    Create : function() {
        this.I = 0; // declared in org.jbox2d.collision.shapes.MassData
        this.mass = 0; // declared in org.jbox2d.collision.shapes.MassData
        this.center = null; // declared in org.jbox2d.collision.shapes.MassData
    },

    instanceOf : function(aType) {
        return ojcsMassData.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcsMassData;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        thisRef.I = 0.0;
        thisRef.mass = 0.0;
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var0);
        thisRef.center = var0;
        return;
    },

    classInitCheck : function() {
        if (!ojcsMassData.__initialized) {
            ojcsMassData.__initialized = true;
            var thePrototype = ojcsMassData.Create.prototype;
            thePrototype.instanceOf = ojcsMassData.instanceOf;
            thePrototype.ClassgetClass = ojcsMassData.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var jlFloat = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 132,
    __implementedTypes : [1,14,132,2,19],

    Create : function() {
        this.floatValue = 0; // declared in java.lang.Float
    },

    instanceOf : function(aType) {
        return jlFloat.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jlFloat;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    BOOLEANisNaNFLOAT : function(aFloat) {
        var __label__ = null;
        return 0;
    },

    BOOLEANisInfiniteFLOAT : function(aFloat) {
        var __label__ = null;
        return 0;
    },

    INTfloatToIntBitsFLOAT : function(value) {
        var local_1_FLOAT = null; // type is FLOAT # of inits = 1
        var local_3_INT = null; // type is INT # of inits = 2
        var local_4_FLOAT = null; // type is FLOAT # of inits = 2
        var local_2_INT = null; // type is INT # of inits = 2
        var var42 = null; // type is INT # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((value != Infinity)) {
                break $S_0;
            }
            return 2139095040;
            }
        $S_10 : {
        // NORMAL
            if ((value != -Infinity)) {
                break $S_10;
            }
            return -8388608;
            }
        $S_20 : {
        // NORMAL
            var var2 = jlFloat.BOOLEANisNaNFLOAT(value); // type is BOOLEAN value type is BOOLEAN
            if ((var2 == 0)) {
                break $S_20;
            }
            return 2143289344;
            }
        $S_30 : {
        // NORMAL
            var var3 = jlMath.FLOATabsFLOAT(value); // type is FLOAT value type is FLOAT
            local_1_FLOAT = var3; // type is FLOAT value type is FLOAT
            var var7 = jlMath.INTgetExponentFLOAT(local_1_FLOAT); // type is INT value type is INT
            local_2_INT = var7; // type is INT value type is INT
            local_3_INT = ((-local_2_INT) + 23); // type is INT value type is INT
            var var15 = local_2_INT; // type is INT value type is INT
            if ((var15 >= -126)) {
                __label__ = 59;
                break $S_30;
            }
            __label__ = 52;
            }
        $M_52_59 : for(;;) switch (__label__) {
            case 59 :
            // NORMAL
                $S_59 : {
                // NORMAL
                    var var18 = local_3_INT; // type is INT value type is INT
                    if ((var18 > 126)) {
                        __label__ = 76;
                        break $S_59;
                    }
                    __label__ = 65;
                    }
                $M_76_65 : for(;;) switch (__label__) {
                    case 65 :
                    // NORMAL
                        var var27 = local_1_FLOAT; // type is FLOAT value type is FLOAT
                        var var29 = jlFloat.FLOATbinaryExponentINT(local_3_INT); // type is FLOAT value type is FLOAT
                        local_4_FLOAT = (var27 * var29); // type is FLOAT value type is FLOAT
                        break $M_76_65;
                    case 76 :
                    // NORMAL
                        var var20 = (local_1_FLOAT * 8.507059E37); // type is FLOAT value type is FLOAT
                        var var23 = jlFloat.FLOATbinaryExponentINT((local_3_INT - 126)); // type is FLOAT value type is FLOAT
                        local_4_FLOAT = (var20 * var23); // type is FLOAT value type is FLOAT
                        break $M_76_65;
                }
                $S_90 : {
                // NORMAL
                    var local_5_INT = (Math.floor((local_4_FLOAT + 0.5)) & 8388607); // type is INT value type is INT
                    var42 = (local_5_INT | ((local_2_INT + 127) << 23)); // type is INT value type is INT
                    if ((value < 0.0)) {
                        __label__ = 126;
                        break $S_90;
                    }
                    __label__ = 117;
                    }
                $M_126_117 : for(;;) switch (__label__) {
                    case 126 :
                    // NORMAL
                        var var46 = -2147483648; // type is INT value type is INT
                        return (var42 | var46);
                    case 117 :
                    // NORMAL
                        $S_117 : {
                        // NORMAL
                            var var44 = (1.0 / value); // type is FLOAT value type is FLOAT
                            if ((var44 != -Infinity)) {
                                break $S_117;
                            }
                            __label__ = 126;
                            continue $M_126_117;
                            }
                        var var46 = 0; // type is INT value type is INT
                        return (var42 | var46);
                }
            case 52 :
            // NORMAL
                local_2_INT = -127; // type is INT value type is INT
                local_3_INT = 149; // type is INT value type is INT
                __label__ = 59;
                continue $M_52_59;
        }
    },

    FLOATbinaryExponentINT : function(n) {
        var local_1_FLOAT = null; // type is FLOAT # of inits = 5
        var local_0_INT = null; // type is INT # of inits = 4
        var local_2_FLOAT = null; // type is FLOAT # of inits = 6
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_1_FLOAT = 1.0; // type is FLOAT value type is FLOAT
            if ((n < 0)) {
                __label__ = 36;
                break $S_0;
            }
            __label__ = 6;
            }
        for(;;) switch (__label__) {
            case 36 :
            // NORMAL
                $S_36 : {
                // NORMAL
                    local_0_INT = (-n); // type is INT value type is INT
                    local_2_FLOAT = 0.5; // type is FLOAT value type is FLOAT
                    __label__ = 42;
                    }
                $L_42 : for (;;) {
                    $S_42 : {
                    // NORMAL
                        var var7 = local_0_INT; // type is INT value type is INT
                        if ((var7 == 0)) {
                            return local_1_FLOAT;
                        }
                        }
                    $S_46 : {
                    // NORMAL
                        var var11 = (local_0_INT % 2); // type is INT value type is INT
                        if ((var11 == 0)) {
                            __label__ = 56;
                            break $S_46;
                        }
                        __label__ = 52;
                        }
                    $M_56_52 : for(;;) switch (__label__) {
                        case 56 :
                        // NORMAL
                            local_0_INT = Math.floor((local_0_INT / 2)); // type is INT value type is INT
                            local_2_FLOAT = (local_2_FLOAT * local_2_FLOAT); // type is FLOAT value type is FLOAT
                            __label__ = 42;
                            continue $L_42;
                        case 52 :
                        // NORMAL
                            local_1_FLOAT = (local_1_FLOAT * local_2_FLOAT); // type is FLOAT value type is FLOAT
                            __label__ = 56;
                            continue $M_56_52;
                    }
                }
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    local_2_FLOAT = 2.0; // type is FLOAT value type is FLOAT
                    __label__ = 8;
                    }
                $L_8 : for (;;) {
                    $S_8 : {
                    // NORMAL
                        if ((n == 0)) {
                            __label__ = 33;
                            break $S_8;
                        }
                        __label__ = 12;
                        }
                    for(;;) switch (__label__) {
                        case 12 :
                        // NORMAL
                            $S_12 : {
                            // NORMAL
                                var var23 = (n % 2); // type is INT value type is INT
                                if ((var23 == 0)) {
                                    __label__ = 22;
                                    break $S_12;
                                }
                                __label__ = 18;
                                }
                            $M_22_18 : for(;;) switch (__label__) {
                                case 22 :
                                // NORMAL
                                    local_0_INT = Math.floor((n / 2)); // type is INT value type is INT
                                    local_2_FLOAT = (local_2_FLOAT * local_2_FLOAT); // type is FLOAT value type is FLOAT
                                    n = local_0_INT; // type is INT value type is INT
                                    __label__ = 8;
                                    continue $L_8;
                                case 18 :
                                // NORMAL
                                    local_1_FLOAT = (local_1_FLOAT * local_2_FLOAT); // type is FLOAT value type is FLOAT
                                    __label__ = 22;
                                    continue $M_22_18;
                            }
                        case 33 :
                        // NORMAL
                            return local_1_FLOAT;
                    }
                }
        }
    },

    FLOATfloatValue : function(thisRef) {
        var __label__ = null;
        return thisRef.floatValue;
    },

    INThashCode : function(thisRef) {
        var __label__ = null;
        return Math.floor(thisRef.floatValue);
    },

    BOOLEANequalsjlObject : function(thisRef,o) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((thisRef != o)) {
                break $S_0;
            }
            return 1;
            }
        $S_7 : {
        // NORMAL
            if (o == null ) {
                return 0;
            }
            }
        $S_11 : {
        // NORMAL
            var var0 = thisRef.ClassgetClass(); // type is REFERENCE value type is REFERENCE
            var var1 = o.ClassgetClass(); // type is REFERENCE value type is REFERENCE
            if ((var0 == var1)) {
                break $S_11;
            }
            return 0;
            }
        var local_2_REFERENCE = o; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@9915009
        var var6 = jlFloat.INTcompareFLOATFLOAT(local_2_REFERENCE.floatValue,thisRef.floatValue); // type is INT value type is INT
        if ((var6 == 0)) {
            return 1;
        }
        return 0;
    },

    INTcompareFLOATFLOAT : function(f1,f2) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((f1 >= f2)) {
                break $S_0;
            }
            return -1;
            }
        if ((f1 <= f2)) {
            return 0;
        }
        return 1;
    },

    jlStringtoString : function(thisRef) {
        var __label__ = null;
        var var1 = jlFloat.jlStringtoStringFLOAT(thisRef.floatValue); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3b30c9d8
        return var1;
    },

    jlStringtoStringFLOAT : function(aValue) {
        var __label__ = null;
        var var0 = new jlStringBuilder.Create(); // type is REFERENCE value type is REFERENCE
        jlStringBuilder.VOIDinit(var0);
        var local_1_REFERENCE = var0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6cb8bb8b
        var var3 = local_1_REFERENCE.jlStringBuilderappendFLOAT(local_1_REFERENCE,aValue); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7f1062c9
        var var5 = local_1_REFERENCE.jlStringtoString(local_1_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1f34878e
        return var5;
    },

    classInitCheck : function() {
        if (!jlFloat.__initialized) {
            jlFloat.__initialized = true;
            var thePrototype = jlFloat.Create.prototype;
            thePrototype.instanceOf = jlFloat.instanceOf;
            thePrototype.ClassgetClass = jlFloat.ClassgetClass;
            thePrototype.jlStringtoString = jlFloat.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlFloat.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlFloat.INThashCode;
            thePrototype.FLOATfloatValue = jlFloat.FLOATfloatValue;
            jlNumber.classInitCheck();
            jlObject.classInitCheck();
            jlComparable.classInitCheck();
            jiSerializable.classInitCheck();
        }
    },

};

var ojcMathUtils = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 133,
    __implementedTypes : [1,134,133],
    sinLUT : null, // declared in org.jbox2d.common.MathUtils

    Create : function() {
    },

    instanceOf : function(aType) {
        return ojcMathUtils.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcMathUtils;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var local_0_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var1 = bytecoder.newArray(ojcSettings.SINCOS_LUT_LENGTH,0.0); // type is REFERENCE value type is REFERENCE
            ojcMathUtils.sinLUT = var1;
            local_0_INT = 0; // type is INT value type is INT
            __label__ = 10;
            }
        $L_10 : for (;;) {
            $S_10 : {
            // NORMAL
                var var4 = local_0_INT; // type is INT value type is INT
                var var5 = ojcSettings.SINCOS_LUT_LENGTH; // type is INT value type is INT
                if ((var4 >= var5)) {
                    return;
                }
                }
            var var6 = ojcMathUtils.sinLUT; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1d7c55a4
            var var7 = local_0_INT; // type is INT value type is INT
            var var12 = jlMath.DOUBLEsinDOUBLE((local_0_INT * 1.1E-4)); // type is DOUBLE value type is DOUBLE
            var var13 = var12; // type is FLOAT value type is FLOAT
            var6.data[var7] = var13;
            local_0_INT = (local_0_INT + 1); // type is INT value type is INT
            __label__ = 10;
            continue $L_10;
        }
    },

    FLOATsinFLOAT : function(x) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcSettings.SINCOS_LUT_ENABLED; // type is BOOLEAN value type is BOOLEAN
            if ((var0 == 0)) {
                __label__ = 11;
                break $S_0;
            }
            __label__ = 6;
            }
        for(;;) switch (__label__) {
            case 11 :
            // NORMAL
                var var3 = jlStrictMath.DOUBLEsinDOUBLE(x); // type is DOUBLE value type is DOUBLE
                return var3;
            case 6 :
            // NORMAL
                var var1 = ojcMathUtils.FLOATsinLUTFLOAT(x); // type is FLOAT value type is FLOAT
                return var1;
        }
    },

    FLOATsinLUTFLOAT : function(x) {
        var local_1_INT = null; // type is INT # of inits = 1
        var local_0_FLOAT = null; // type is FLOAT # of inits = 4
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_0_FLOAT = (x % 6.2831855); // type is FLOAT value type is FLOAT
            var var3 = local_0_FLOAT; // type is FLOAT value type is FLOAT
            if ((var3 >= 0.0)) {
                __label__ = 16;
                break $S_0;
            }
            __label__ = 11;
            }
        $M_16_11 : for(;;) switch (__label__) {
            case 16 :
            // NORMAL
                $S_16 : {
                // NORMAL
                    var var8 = ojcSettings.SINCOS_LUT_LERP; // type is BOOLEAN value type is BOOLEAN
                    if ((var8 == 0)) {
                        __label__ = 86;
                        break $S_16;
                    }
                    __label__ = 22;
                    }
                for(;;) switch (__label__) {
                    case 22 :
                    // NORMAL
                        $S_22 : {
                        // NORMAL
                            local_0_FLOAT = (local_0_FLOAT / 1.1E-4); // type is FLOAT value type is FLOAT
                            local_1_INT = Math.floor(local_0_FLOAT); // type is INT value type is INT
                            var var16 = local_1_INT; // type is INT value type is INT
                            if ((var16 == 0)) {
                                __label__ = 39;
                                break $S_22;
                            }
                            __label__ = 34;
                            }
                        $M_34_39 : for(;;) switch (__label__) {
                            case 34 :
                            // NORMAL
                                local_0_FLOAT = (local_0_FLOAT % local_1_INT); // type is FLOAT value type is FLOAT
                                __label__ = 39;
                                continue $M_34_39;
                            case 39 :
                            // NORMAL
                                $S_39 : {
                                // NORMAL
                                    var var22 = local_1_INT; // type is INT value type is INT
                                    var var24 = (ojcSettings.SINCOS_LUT_LENGTH - 1); // type is INT value type is INT
                                    if ((var22 != var24)) {
                                        __label__ = 66;
                                        break $S_39;
                                    }
                                    __label__ = 48;
                                    }
                                for(;;) switch (__label__) {
                                    case 66 :
                                    // NORMAL
                                        var var26 = (1.0 - local_0_FLOAT); // type is FLOAT value type is FLOAT
                                        var var29 = ojcMathUtils.sinLUT.data[local_1_INT]; // type is FLOAT value type is FLOAT
                                        var var30 = (var26 * var29); // type is FLOAT value type is FLOAT
                                        var var31 = local_0_FLOAT; // type is FLOAT value type is FLOAT
                                        var var35 = ojcMathUtils.sinLUT.data[(local_1_INT + 1)]; // type is FLOAT value type is FLOAT
                                        return (var30 + (var31 * var35));
                                    case 48 :
                                    // NORMAL
                                        var var39 = (1.0 - local_0_FLOAT); // type is FLOAT value type is FLOAT
                                        var var42 = ojcMathUtils.sinLUT.data[local_1_INT]; // type is FLOAT value type is FLOAT
                                        var var43 = (var39 * var42); // type is FLOAT value type is FLOAT
                                        var var44 = local_0_FLOAT; // type is FLOAT value type is FLOAT
                                        var var46 = ojcMathUtils.sinLUT.data[0]; // type is FLOAT value type is FLOAT
                                        return (var43 + (var44 * var46));
                                }
                        }
                    case 86 :
                    // NORMAL
                        var var49 = ojcMathUtils.sinLUT; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3e95e4af
                        var var52 = ojcMathUtils.INTroundFLOAT((local_0_FLOAT / 1.1E-4)); // type is INT value type is INT
                        var var55 = var49.data[(var52 % ojcSettings.SINCOS_LUT_LENGTH)]; // type is FLOAT value type is FLOAT
                        return var55;
                }
            case 11 :
            // NORMAL
                local_0_FLOAT = (local_0_FLOAT + 6.2831855); // type is FLOAT value type is FLOAT
                __label__ = 16;
                continue $M_16_11;
        }
    },

    INTroundFLOAT : function(x) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcSettings.FAST_ROUND; // type is BOOLEAN value type is BOOLEAN
            if ((var0 == 0)) {
                __label__ = 14;
                break $S_0;
            }
            __label__ = 6;
            }
        for(;;) switch (__label__) {
            case 14 :
            // NORMAL
                var var1 = jlStrictMath.INTroundFLOAT(x); // type is INT value type is INT
                return var1;
            case 6 :
            // NORMAL
                var var3 = ojcMathUtils.INTfloorFLOAT((x + 0.5)); // type is INT value type is INT
                return var3;
        }
    },

    INTfloorFLOAT : function(x) {
        var local_1_INT = null; // type is INT # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcSettings.FAST_FLOOR; // type is BOOLEAN value type is BOOLEAN
            if ((var0 == 0)) {
                return Math.floor(Math.floor(x));
            }
            }
        $S_6 : {
        // NORMAL
            local_1_INT = Math.floor(x); // type is INT value type is INT
            if ((x >= 0.0)) {
                return local_1_INT;
            }
            }
        var var6 = local_1_INT; // type is FLOAT value type is FLOAT
        if ((x == var6)) {
            return local_1_INT;
        }
        return (local_1_INT - 1);
    },

    FLOATcosFLOAT : function(x) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcSettings.SINCOS_LUT_ENABLED; // type is BOOLEAN value type is BOOLEAN
            if ((var0 == 0)) {
                __label__ = 14;
                break $S_0;
            }
            __label__ = 6;
            }
        for(;;) switch (__label__) {
            case 6 :
            // NORMAL
                var var2 = ojcMathUtils.FLOATsinLUTFLOAT((1.5707964 - x)); // type is FLOAT value type is FLOAT
                return var2;
            case 14 :
            // NORMAL
                var var4 = jlStrictMath.DOUBLEcosDOUBLE(x); // type is DOUBLE value type is DOUBLE
                return var4;
        }
    },

    INTmaxINTINT : function(a,b) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((a <= b)) {
                __label__ = 9;
                break $S_0;
            }
            __label__ = 5;
            }
        for(;;) switch (__label__) {
            case 5 :
            // NORMAL
                var var0 = a; // type is INT value type is INT
                return var0;
            case 9 :
            // NORMAL
                var var0 = b; // type is INT value type is INT
                return var0;
        }
    },

    INTminINTINT : function(a,b) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((a >= b)) {
                __label__ = 9;
                break $S_0;
            }
            __label__ = 5;
            }
        for(;;) switch (__label__) {
            case 5 :
            // NORMAL
                var var0 = a; // type is INT value type is INT
                return var0;
            case 9 :
            // NORMAL
                var var0 = b; // type is INT value type is INT
                return var0;
        }
    },

    FLOATsqrtFLOAT : function(x) {
        var __label__ = null;
        return Math.sqrt(x);
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        ojcPlatformMathUtils.VOIDinit(thisRef);
        return;
    },

    FLOATdistanceojcVec2ojcVec2 : function(v1,v2) {
        var __label__ = null;
        var var0 = ojcMathUtils.FLOATdistanceSquaredojcVec2ojcVec2(v1,v2); // type is FLOAT value type is FLOAT
        var var1 = ojcMathUtils.FLOATsqrtFLOAT(var0); // type is FLOAT value type is FLOAT
        return var1;
    },

    FLOATdistanceSquaredojcVec2ojcVec2 : function(v1,v2) {
        var __label__ = null;
        var local_2_FLOAT = (v1.x - v2.x); // type is FLOAT value type is FLOAT
        var local_3_FLOAT = (v1.y - v2.y); // type is FLOAT value type is FLOAT
        return ((local_2_FLOAT * local_2_FLOAT) + (local_3_FLOAT * local_3_FLOAT));
    },

    FLOATclampFLOATFLOATFLOAT : function(a,low,high) {
        var __label__ = null;
        var var0 = ojcMathUtils.FLOATminFLOATFLOAT(a,high); // type is FLOAT value type is FLOAT
        var var1 = ojcMathUtils.FLOATmaxFLOATFLOAT(low,var0); // type is FLOAT value type is FLOAT
        return var1;
    },

    FLOATminFLOATFLOAT : function(a,b) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((a >= b)) {
                __label__ = 10;
                break $S_0;
            }
            __label__ = 6;
            }
        for(;;) switch (__label__) {
            case 6 :
            // NORMAL
                var var1 = a; // type is FLOAT value type is FLOAT
                return var1;
            case 10 :
            // NORMAL
                var var1 = b; // type is FLOAT value type is FLOAT
                return var1;
        }
    },

    FLOATmaxFLOATFLOAT : function(a,b) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((a <= b)) {
                __label__ = 10;
                break $S_0;
            }
            __label__ = 6;
            }
        for(;;) switch (__label__) {
            case 6 :
            // NORMAL
                var var1 = a; // type is FLOAT value type is FLOAT
                return var1;
            case 10 :
            // NORMAL
                var var1 = b; // type is FLOAT value type is FLOAT
                return var1;
        }
    },

    FLOATabsFLOAT : function(x) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcSettings.FAST_ABS; // type is BOOLEAN value type is BOOLEAN
            if ((var0 == 0)) {
                __label__ = 19;
                break $S_0;
            }
            __label__ = 6;
            }
        for(;;) switch (__label__) {
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    if ((x <= 0.0)) {
                        __label__ = 16;
                        break $S_6;
                    }
                    __label__ = 12;
                    }
                for(;;) switch (__label__) {
                    case 12 :
                    // NORMAL
                        var var3 = x; // type is FLOAT value type is FLOAT
                        return var3;
                    case 16 :
                    // NORMAL
                        var var3 = (-x); // type is FLOAT value type is FLOAT
                        return var3;
                }
            case 19 :
            // NORMAL
                var var4 = jlMath.FLOATabsFLOAT(x); // type is FLOAT value type is FLOAT
                return var4;
        }
    },

    classInitCheck : function() {
        if (!ojcMathUtils.__initialized) {
            ojcMathUtils.__initialized = true;
            var thePrototype = ojcMathUtils.Create.prototype;
            thePrototype.instanceOf = ojcMathUtils.instanceOf;
            thePrototype.ClassgetClass = ojcMathUtils.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojcPlatformMathUtils.classInitCheck();
            jlObject.classInitCheck();
            ojcSettings.classInitCheck();
            jlMath.classInitCheck();
            ojcMathUtils.VOIDclinit();
        }
    },

};

var ojcPlatformMathUtils = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 134,
    __implementedTypes : [1,134],

    Create : function() {
    },

    instanceOf : function(aType) {
        return ojcPlatformMathUtils.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcPlatformMathUtils;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    classInitCheck : function() {
        if (!ojcPlatformMathUtils.__initialized) {
            ojcPlatformMathUtils.__initialized = true;
            var thePrototype = ojcPlatformMathUtils.Create.prototype;
            thePrototype.instanceOf = ojcPlatformMathUtils.instanceOf;
            thePrototype.ClassgetClass = ojcPlatformMathUtils.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var jlStrictMath = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 135,
    __implementedTypes : [1,135],

    Create : function() {
    },

    instanceOf : function(aType) {
        return jlStrictMath.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jlStrictMath;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    INTroundFLOAT : function(p1) {
         return bytecoder.imports.strictmath.round(p1);
    },

    DOUBLEsinDOUBLE : function(p1) {
         return bytecoder.imports.strictmath.sin(p1);
    },

    DOUBLEcosDOUBLE : function(p1) {
         return bytecoder.imports.strictmath.cos(p1);
    },

    DOUBLEsqrtDOUBLE : function(p1) {
         return bytecoder.imports.strictmath.sqrt(p1);
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    classInitCheck : function() {
        if (!jlStrictMath.__initialized) {
            jlStrictMath.__initialized = true;
            var thePrototype = jlStrictMath.Create.prototype;
            thePrototype.instanceOf = jlStrictMath.instanceOf;
            thePrototype.ClassgetClass = jlStrictMath.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojdjJointEdge = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 136,
    __implementedTypes : [1,136],

    Create : function() {
        this.other = null; // declared in org.jbox2d.dynamics.joints.JointEdge
        this.joint = null; // declared in org.jbox2d.dynamics.joints.JointEdge
        this.prev = null; // declared in org.jbox2d.dynamics.joints.JointEdge
        this.next = null; // declared in org.jbox2d.dynamics.joints.JointEdge
    },

    instanceOf : function(aType) {
        return ojdjJointEdge.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdjJointEdge;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        thisRef.other = null;
        thisRef.joint = null;
        thisRef.prev = null;
        thisRef.next = null;
        return;
    },

    classInitCheck : function() {
        if (!ojdjJointEdge.__initialized) {
            ojdjJointEdge.__initialized = true;
            var thePrototype = ojdjJointEdge.Create.prototype;
            thePrototype.instanceOf = ojdjJointEdge.instanceOf;
            thePrototype.ClassgetClass = ojdjJointEdge.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojdcContactEdge = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 137,
    __implementedTypes : [1,137],

    Create : function() {
        this.other = null; // declared in org.jbox2d.dynamics.contacts.ContactEdge
        this.contact = null; // declared in org.jbox2d.dynamics.contacts.ContactEdge
        this.next = null; // declared in org.jbox2d.dynamics.contacts.ContactEdge
        this.prev = null; // declared in org.jbox2d.dynamics.contacts.ContactEdge
    },

    instanceOf : function(aType) {
        return ojdcContactEdge.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdcContactEdge;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        thisRef.other = null;
        thisRef.contact = null;
        thisRef.prev = null;
        thisRef.next = null;
        return;
    },

    classInitCheck : function() {
        if (!ojdcContactEdge.__initialized) {
            ojdcContactEdge.__initialized = true;
            var thePrototype = ojdcContactEdge.Create.prototype;
            thePrototype.instanceOf = ojdcContactEdge.instanceOf;
            thePrototype.ClassgetClass = ojdcContactEdge.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojdFixture = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 138,
    __implementedTypes : [1,138],
    $assertionsDisabled : false, // declared in org.jbox2d.dynamics.Fixture

    Create : function() {
        this.pool1 = null; // declared in org.jbox2d.dynamics.Fixture
        this.pool2 = null; // declared in org.jbox2d.dynamics.Fixture
        this.displacement = null; // declared in org.jbox2d.dynamics.Fixture
        this.m_userData = null; // declared in org.jbox2d.dynamics.Fixture
        this.m_body = null; // declared in org.jbox2d.dynamics.Fixture
        this.m_next = null; // declared in org.jbox2d.dynamics.Fixture
        this.m_proxies = null; // declared in org.jbox2d.dynamics.Fixture
        this.m_proxyCount = 0; // declared in org.jbox2d.dynamics.Fixture
        this.m_shape = null; // declared in org.jbox2d.dynamics.Fixture
        this.m_filter = null; // declared in org.jbox2d.dynamics.Fixture
        this.m_friction = 0; // declared in org.jbox2d.dynamics.Fixture
        this.m_restitution = 0; // declared in org.jbox2d.dynamics.Fixture
        this.m_isSensor = false; // declared in org.jbox2d.dynamics.Fixture
        this.m_density = 0; // declared in org.jbox2d.dynamics.Fixture
    },

    instanceOf : function(aType) {
        return ojdFixture.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdFixture;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdFixture.BOOLEANdesiredAssertionStatus(ojdFixture); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_9_13 : for(;;) switch (__label__) {
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_9_13;
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_9_13;
        }
        ojdFixture.$assertionsDisabled = var1;
        return;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcAABB.Create(); // type is REFERENCE value type is REFERENCE
        ojcAABB.VOIDinit(var0);
        thisRef.pool1 = var0;
        var var1 = new ojcAABB.Create(); // type is REFERENCE value type is REFERENCE
        ojcAABB.VOIDinit(var1);
        thisRef.pool2 = var1;
        var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var2);
        thisRef.displacement = var2;
        thisRef.m_userData = null;
        thisRef.m_body = null;
        thisRef.m_next = null;
        thisRef.m_proxies = null;
        thisRef.m_proxyCount = 0;
        thisRef.m_shape = null;
        var var3 = new ojdFilter.Create(); // type is REFERENCE value type is REFERENCE
        ojdFilter.VOIDinit(var3);
        thisRef.m_filter = var3;
        return;
    },

    VOIDcreateojdBodyojdFixtureDef : function(thisRef,body,def) {
        var local_4_INT = null; // type is INT # of inits = 3
        var local_3_INT = null; // type is INT # of inits = 2
        var local_6_INT = null; // type is INT # of inits = 3
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_5_INT = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = def.userData; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@33b2d0a3
            thisRef.m_userData = var0;
            var var1 = def.friction; // type is FLOAT value type is FLOAT
            thisRef.m_friction = var1;
            var var2 = def.restitution; // type is FLOAT value type is FLOAT
            thisRef.m_restitution = var2;
            thisRef.m_body = body;
            thisRef.m_next = null;
            thisRef.m_filter.VOIDsetojdFilter(thisRef.m_filter,def.filter);
            var var5 = def.isSensor; // type is BOOLEAN value type is BOOLEAN
            thisRef.m_isSensor = var5;
            var var7 = def.shape.ojcsShapeclone(def.shape); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5c890c8b
            thisRef.m_shape = var7;
            var var9 = thisRef.m_shape.INTgetChildCount(thisRef.m_shape); // type is INT value type is INT
            local_3_INT = var9; // type is INT value type is INT
            var var12 = thisRef.m_proxies; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1c8b0625
            if (var12 != null ) {
                __label__ = 138;
                break $S_0;
            }
            __label__ = 79;
            }
        $M_138_79 : for(;;) switch (__label__) {
            case 138 :
            // NORMAL
                $S_138 : {
                // NORMAL
                    var var20 = thisRef.m_proxies.data.length; // type is INT value type is INT
                    var var21 = local_3_INT; // type is INT value type is INT
                    if ((var20 >= var21)) {
                        __label__ = 247;
                        break $S_138;
                    }
                    __label__ = 147;
                    }
                $M_247_147 : for(;;) switch (__label__) {
                    case 147 :
                    // NORMAL
                        $S_147 : {
                        // NORMAL
                            local_4_REFERENCE = thisRef.m_proxies; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@61580b8f
                            var var28 = ojcMathUtils.INTmaxINTINT((local_4_REFERENCE.data.length * 2),local_3_INT); // type is INT value type is INT
                            local_5_INT = var28; // type is INT value type is INT
                            var var32 = bytecoder.newArray(local_5_INT,null); // type is REFERENCE value type is REFERENCE
                            thisRef.m_proxies = var32;
                            jlSystem.VOIDarraycopyjlObjectINTjlObjectINTINT(local_4_REFERENCE,0,thisRef.m_proxies,0,local_4_REFERENCE.data.length);
                            local_6_INT = 0; // type is INT value type is INT
                            __label__ = 190;
                            }
                        $L_190 : for (;;) {
                            $S_190 : {
                            // NORMAL
                                var var39 = local_6_INT; // type is INT value type is INT
                                var var40 = local_5_INT; // type is INT value type is INT
                                if ((var39 >= var40)) {
                                    __label__ = 247;
                                    continue $M_247_147;
                                }
                                }
                            $S_197 : {
                            // NORMAL
                                var var41 = local_6_INT; // type is INT value type is INT
                                var var43 = local_4_REFERENCE.data.length; // type is INT value type is INT
                                if ((var41 < var43)) {
                                    __label__ = 219;
                                    break $S_197;
                                }
                                __label__ = 205;
                                }
                            $M_219_205 : for(;;) switch (__label__) {
                                case 219 :
                                // NORMAL
                                    var var49 = thisRef.m_proxies.data[local_6_INT]; // type is REFERENCE value type is REFERENCE
                                    var49.fixture = null;
                                    var var52 = thisRef.m_proxies.data[local_6_INT]; // type is REFERENCE value type is REFERENCE
                                    var52.proxyId = -1;
                                    local_6_INT = (local_6_INT + 1); // type is INT value type is INT
                                    __label__ = 190;
                                    continue $L_190;
                                case 205 :
                                // NORMAL
                                    var var44 = thisRef.m_proxies; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@444af8cf
                                    var var45 = local_6_INT; // type is INT value type is INT
                                    var var46 = new ojdFixtureProxy.Create(); // type is REFERENCE value type is REFERENCE
                                    ojdFixtureProxy.VOIDinit(var46);
                                    var44.data[var45] = var46;
                                    __label__ = 219;
                                    continue $M_219_205;
                            }
                        }
                    case 247 :
                    // NORMAL
                        thisRef.m_proxyCount = 0;
                        var var53 = def.density; // type is FLOAT value type is FLOAT
                        thisRef.m_density = var53;
                        return;
                }
            case 79 :
            // NORMAL
                $S_79 : {
                // NORMAL
                    var var14 = bytecoder.newArray(local_3_INT,null); // type is REFERENCE value type is REFERENCE
                    thisRef.m_proxies = var14;
                    local_4_INT = 0; // type is INT value type is INT
                    __label__ = 90;
                    }
                $L_90 : for (;;) {
                    $S_90 : {
                    // NORMAL
                        var var17 = local_4_INT; // type is INT value type is INT
                        var var18 = local_3_INT; // type is INT value type is INT
                        if ((var17 >= var18)) {
                            __label__ = 138;
                            continue $M_138_79;
                        }
                        }
                    var var54 = thisRef.m_proxies; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@144dc794
                    var var55 = local_4_INT; // type is INT value type is INT
                    var var56 = new ojdFixtureProxy.Create(); // type is REFERENCE value type is REFERENCE
                    ojdFixtureProxy.VOIDinit(var56);
                    var54.data[var55] = var56;
                    var var59 = thisRef.m_proxies.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                    var59.fixture = null;
                    var var62 = thisRef.m_proxies.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                    var62.proxyId = -1;
                    local_4_INT = (local_4_INT + 1); // type is INT value type is INT
                    __label__ = 90;
                    continue $L_90;
                }
        }
    },

    VOIDcreateProxiesojcbBroadPhaseojcTransform : function(thisRef,broadPhase,xf) {
        var local_3_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdFixture.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 21;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_21_6 : for(;;) switch (__label__) {
            case 21 :
            // NORMAL
                $S_21 : {
                // NORMAL
                    var var3 = thisRef.m_shape.INTgetChildCount(thisRef.m_shape); // type is INT value type is INT
                    thisRef.m_proxyCount = var3;
                    local_3_INT = 0; // type is INT value type is INT
                    __label__ = 34;
                    }
                $L_34 : for (;;) {
                    $S_34 : {
                    // NORMAL
                        var var6 = local_3_INT; // type is INT value type is INT
                        var var7 = thisRef.m_proxyCount; // type is INT value type is INT
                        if ((var6 >= var7)) {
                            return;
                        }
                        }
                    var var11 = thisRef.m_proxies.data[local_3_INT]; // type is REFERENCE value type is REFERENCE
                    var local_4_REFERENCE = var11; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@65353a86
                    thisRef.m_shape.VOIDcomputeAABBojcAABBojcTransformINT(thisRef.m_shape,local_4_REFERENCE.aabb,xf,local_3_INT);
                    var var17 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@65353a86
                    var var21 = broadPhase.INTcreateProxyojcAABBjlObject(broadPhase,local_4_REFERENCE.aabb,local_4_REFERENCE); // type is INT value type is INT
                    var17.proxyId = var21;
                    var var22 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@65353a86
                    var22.fixture = thisRef;
                    var var23 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@65353a86
                    var var24 = local_3_INT; // type is INT value type is INT
                    var23.childIndex = var24;
                    local_3_INT = (local_3_INT + 1); // type is INT value type is INT
                    __label__ = 34;
                    continue $L_34;
                }
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    var var1 = thisRef.m_proxyCount; // type is INT value type is INT
                    if ((var1 == 0)) {
                        __label__ = 21;
                        continue $M_21_6;
                    }
                    }
                var var8 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var8);
                throw var8;
        }
    },

    VOIDgetMassDataojcsMassData : function(thisRef,massData) {
        var __label__ = null;
        thisRef.m_shape.VOIDcomputeMassojcsMassDataFLOAT(thisRef.m_shape,massData,thisRef.m_density);
        return;
    },

    ojdBodygetBody : function(thisRef) {
        var __label__ = null;
        return thisRef.m_body;
    },

    BOOLEANisSensor : function(thisRef) {
        var __label__ = null;
        return thisRef.m_isSensor;
    },

    ojcsShapeTypegetType : function(thisRef) {
        var __label__ = null;
        var var1 = thisRef.m_shape.ojcsShapeTypegetType(thisRef.m_shape); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3a02727e
        return var1;
    },

    ojdFiltergetFilterData : function(thisRef) {
        var __label__ = null;
        return thisRef.m_filter;
    },

    ojcsShapegetShape : function(thisRef) {
        var __label__ = null;
        return thisRef.m_shape;
    },

    VOIDsynchronizeojcbBroadPhaseojcTransformojcTransform : function(thisRef,broadPhase,transform1,transform2) {
        var var71 = null; // type is FLOAT # of inits = 2
        var var74 = null; // type is REFERENCE # of inits = 1
        var var23 = null; // type is REFERENCE # of inits = 1
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 1
        var var40 = null; // type is REFERENCE # of inits = 1
        var var54 = null; // type is FLOAT # of inits = 2
        var var57 = null; // type is REFERENCE # of inits = 1
        var local_7_REFERENCE = null; // type is REFERENCE # of inits = 1
        var var37 = null; // type is FLOAT # of inits = 2
        var local_4_INT = null; // type is INT # of inits = 3
        var var88 = null; // type is FLOAT # of inits = 2
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.m_proxyCount; // type is INT value type is INT
            if ((var0 != 0)) {
                break $S_0;
            }
            return;
            }
        $S_8 : {
        // NORMAL
            local_4_INT = 0; // type is INT value type is INT
            __label__ = 11;
            }
        $L_11 : for (;;) {
            $S_11 : {
            // NORMAL
                var var3 = local_4_INT; // type is INT value type is INT
                var var4 = thisRef.m_proxyCount; // type is INT value type is INT
                if ((var3 >= var4)) {
                    return;
                }
                }
            $S_20 : {
            // NORMAL
                var var7 = thisRef.m_proxies.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                local_5_REFERENCE = var7; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@786bc721
                local_6_REFERENCE = thisRef.pool1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@44fd7257
                local_7_REFERENCE = thisRef.pool2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@9b3e323
                thisRef.m_shape.VOIDcomputeAABBojcAABBojcTransformINT(thisRef.m_shape,local_6_REFERENCE,transform1,local_5_REFERENCE.childIndex);
                thisRef.m_shape.VOIDcomputeAABBojcAABBojcTransformINT(thisRef.m_shape,local_7_REFERENCE,transform2,local_5_REFERENCE.childIndex);
                var23 = local_5_REFERENCE.aabb.lowerBound; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@9fb73df
                var var26 = local_6_REFERENCE.lowerBound.x; // type is FLOAT value type is FLOAT
                var var29 = local_7_REFERENCE.lowerBound.x; // type is FLOAT value type is FLOAT
                if ((var26 >= var29)) {
                    __label__ = 110;
                    break $S_20;
                }
                __label__ = 99;
                }
            $M_99_110 : for(;;) switch (__label__) {
                case 110 :
                // NORMAL
                    var37 = local_7_REFERENCE.lowerBound.x; // type is FLOAT value type is FLOAT
                    break $M_99_110;
                case 99 :
                // NORMAL
                    var37 = local_6_REFERENCE.lowerBound.x; // type is FLOAT value type is FLOAT
                    break $M_99_110;
            }
            $S_118 : {
            // NORMAL
                var23.x = var37;
                var40 = local_5_REFERENCE.aabb.lowerBound; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@26baee03
                var var43 = local_6_REFERENCE.lowerBound.y; // type is FLOAT value type is FLOAT
                var var46 = local_7_REFERENCE.lowerBound.y; // type is FLOAT value type is FLOAT
                if ((var43 >= var46)) {
                    __label__ = 160;
                    break $S_118;
                }
                __label__ = 149;
                }
            $M_160_149 : for(;;) switch (__label__) {
                case 160 :
                // NORMAL
                    var54 = local_7_REFERENCE.lowerBound.y; // type is FLOAT value type is FLOAT
                    break $M_160_149;
                case 149 :
                // NORMAL
                    var54 = local_6_REFERENCE.lowerBound.y; // type is FLOAT value type is FLOAT
                    break $M_160_149;
            }
            $S_168 : {
            // NORMAL
                var40.y = var54;
                var57 = local_5_REFERENCE.aabb.upperBound; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@9fa5f49
                var var60 = local_6_REFERENCE.upperBound.x; // type is FLOAT value type is FLOAT
                var var63 = local_7_REFERENCE.upperBound.x; // type is FLOAT value type is FLOAT
                if ((var60 <= var63)) {
                    __label__ = 210;
                    break $S_168;
                }
                __label__ = 199;
                }
            $M_210_199 : for(;;) switch (__label__) {
                case 210 :
                // NORMAL
                    var71 = local_7_REFERENCE.upperBound.x; // type is FLOAT value type is FLOAT
                    break $M_210_199;
                case 199 :
                // NORMAL
                    var71 = local_6_REFERENCE.upperBound.x; // type is FLOAT value type is FLOAT
                    break $M_210_199;
            }
            $S_218 : {
            // NORMAL
                var57.x = var71;
                var74 = local_5_REFERENCE.aabb.upperBound; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1fc61fae
                var var77 = local_6_REFERENCE.upperBound.y; // type is FLOAT value type is FLOAT
                var var80 = local_7_REFERENCE.upperBound.y; // type is FLOAT value type is FLOAT
                if ((var77 <= var80)) {
                    __label__ = 260;
                    break $S_218;
                }
                __label__ = 249;
                }
            $M_249_260 : for(;;) switch (__label__) {
                case 249 :
                // NORMAL
                    var88 = local_6_REFERENCE.upperBound.y; // type is FLOAT value type is FLOAT
                    break $M_249_260;
                case 260 :
                // NORMAL
                    var88 = local_7_REFERENCE.upperBound.y; // type is FLOAT value type is FLOAT
                    break $M_249_260;
            }
            var74.y = var88;
            var var89 = thisRef.displacement; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4df1f202
            var var94 = (transform2.p.x - transform1.p.x); // type is FLOAT value type is FLOAT
            var89.x = var94;
            var var95 = thisRef.displacement; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3c4ac749
            var var100 = (transform2.p.y - transform1.p.y); // type is FLOAT value type is FLOAT
            var95.y = var100;
            broadPhase.VOIDmoveProxyINTojcAABBojcVec2(broadPhase,local_5_REFERENCE.proxyId,local_5_REFERENCE.aabb,thisRef.displacement);
            local_4_INT = (local_4_INT + 1); // type is INT value type is INT
            __label__ = 11;
            continue $L_11;
        }
    },

    ojdFixturegetNext : function(thisRef) {
        var __label__ = null;
        return thisRef.m_next;
    },

    classInitCheck : function() {
        if (!ojdFixture.__initialized) {
            ojdFixture.__initialized = true;
            var thePrototype = ojdFixture.Create.prototype;
            thePrototype.instanceOf = ojdFixture.instanceOf;
            thePrototype.ClassgetClass = ojdFixture.ClassgetClass;
            thePrototype.ojdFixturegetNext = ojdFixture.ojdFixturegetNext;
            thePrototype.VOIDsynchronizeojcbBroadPhaseojcTransformojcTransform = ojdFixture.VOIDsynchronizeojcbBroadPhaseojcTransformojcTransform;
            thePrototype.ojcsShapegetShape = ojdFixture.ojcsShapegetShape;
            thePrototype.ojdFiltergetFilterData = ojdFixture.ojdFiltergetFilterData;
            thePrototype.ojcsShapeTypegetType = ojdFixture.ojcsShapeTypegetType;
            thePrototype.BOOLEANisSensor = ojdFixture.BOOLEANisSensor;
            thePrototype.ojdBodygetBody = ojdFixture.ojdBodygetBody;
            thePrototype.VOIDgetMassDataojcsMassData = ojdFixture.VOIDgetMassDataojcsMassData;
            thePrototype.VOIDcreateProxiesojcbBroadPhaseojcTransform = ojdFixture.VOIDcreateProxiesojcbBroadPhaseojcTransform;
            thePrototype.VOIDcreateojdBodyojdFixtureDef = ojdFixture.VOIDcreateojdBodyojdFixtureDef;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            ojdFixture.VOIDclinit();
        }
    },

};

var ojcsCircleShape = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 139,
    __implementedTypes : [1,129,139],
    $assertionsDisabled : false, // declared in org.jbox2d.collision.shapes.CircleShape

    Create : function() {
        this.m_type = null; // declared in org.jbox2d.collision.shapes.Shape
        this.m_radius = 0; // declared in org.jbox2d.collision.shapes.Shape
        this.m_p = null; // declared in org.jbox2d.collision.shapes.CircleShape
    },

    instanceOf : function(aType) {
        return ojcsCircleShape.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcsCircleShape;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcsCircleShape.BOOLEANdesiredAssertionStatus(ojcsCircleShape); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_13_9 : for(;;) switch (__label__) {
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_13_9;
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_13_9;
        }
        ojcsCircleShape.$assertionsDisabled = var1;
        return;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        ojcsShape.VOIDinitojcsShapeType(thisRef,ojcsShapeType.CIRCLE);
        var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var1);
        thisRef.m_p = var1;
        thisRef.m_radius = 0.0;
        return;
    },

    ojcsShapeclone : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcsCircleShape.Create(); // type is REFERENCE value type is REFERENCE
        ojcsCircleShape.VOIDinit(var0);
        var local_1_REFERENCE = var0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@bf16172
        var var3 = local_1_REFERENCE.m_p; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4ad419e5
        var var5 = thisRef.m_p.x; // type is FLOAT value type is FLOAT
        var3.x = var5;
        var var7 = local_1_REFERENCE.m_p; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@62c97ba6
        var var9 = thisRef.m_p.y; // type is FLOAT value type is FLOAT
        var7.y = var9;
        var var10 = local_1_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@bf16172
        var var11 = thisRef.m_radius; // type is FLOAT value type is FLOAT
        var10.m_radius = var11;
        return local_1_REFERENCE;
    },

    INTgetChildCount : function(thisRef) {
        var __label__ = null;
        return 1;
    },

    VOIDcomputeAABBojcAABBojcTransformINT : function(thisRef,aabb,transform,childIndex) {
        var __label__ = null;
        var local_4_REFERENCE = transform.q; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7df4d309
        var local_5_REFERENCE = transform.p; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@e3e5dac
        var local_6_FLOAT = (((local_4_REFERENCE.c * thisRef.m_p.x) - (local_4_REFERENCE.s * thisRef.m_p.y)) + local_5_REFERENCE.x); // type is FLOAT value type is FLOAT
        var local_7_FLOAT = (((local_4_REFERENCE.s * thisRef.m_p.x) + (local_4_REFERENCE.c * thisRef.m_p.y)) + local_5_REFERENCE.y); // type is FLOAT value type is FLOAT
        var var36 = aabb.lowerBound; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@29618175
        var var39 = (local_6_FLOAT - thisRef.m_radius); // type is FLOAT value type is FLOAT
        var36.x = var39;
        var var40 = aabb.lowerBound; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4096499a
        var var43 = (local_7_FLOAT - thisRef.m_radius); // type is FLOAT value type is FLOAT
        var40.y = var43;
        var var44 = aabb.upperBound; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1ba1a61a
        var var47 = (local_6_FLOAT + thisRef.m_radius); // type is FLOAT value type is FLOAT
        var44.x = var47;
        var var48 = aabb.upperBound; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@670e5bff
        var var51 = (local_7_FLOAT + thisRef.m_radius); // type is FLOAT value type is FLOAT
        var48.y = var51;
        return;
    },

    VOIDcomputeMassojcsMassDataFLOAT : function(thisRef,massData,density) {
        var __label__ = null;
        var var4 = (((density * 3.1415927) * thisRef.m_radius) * thisRef.m_radius); // type is FLOAT value type is FLOAT
        massData.mass = var4;
        var var5 = massData.center; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4f53e0aa
        var var7 = thisRef.m_p.x; // type is FLOAT value type is FLOAT
        var5.x = var7;
        var var8 = massData.center; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@86ee129
        var var10 = thisRef.m_p.y; // type is FLOAT value type is FLOAT
        var8.y = var10;
        var var28 = (massData.mass * (((0.5 * thisRef.m_radius) * thisRef.m_radius) + ((thisRef.m_p.x * thisRef.m_p.x) + (thisRef.m_p.y * thisRef.m_p.y)))); // type is FLOAT value type is FLOAT
        massData.I = var28;
        return;
    },

    classInitCheck : function() {
        if (!ojcsCircleShape.__initialized) {
            ojcsCircleShape.__initialized = true;
            var thePrototype = ojcsCircleShape.Create.prototype;
            thePrototype.instanceOf = ojcsCircleShape.instanceOf;
            thePrototype.ClassgetClass = ojcsCircleShape.ClassgetClass;
            thePrototype.VOIDcomputeMassojcsMassDataFLOAT = ojcsCircleShape.VOIDcomputeMassojcsMassDataFLOAT;
            thePrototype.VOIDcomputeAABBojcAABBojcTransformINT = ojcsCircleShape.VOIDcomputeAABBojcAABBojcTransformINT;
            thePrototype.INTgetChildCount = ojcsCircleShape.INTgetChildCount;
            thePrototype.ojcsShapeclone = ojcsCircleShape.ojcsShapeclone;
            thePrototype.ojcsShapeTypegetType = ojcsShape.ojcsShapeTypegetType;
            thePrototype.FLOATgetRadius = ojcsShape.FLOATgetRadius;
            thePrototype.VOIDsetRadiusFLOAT = ojcsShape.VOIDsetRadiusFLOAT;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojcsShape.classInitCheck();
            jlObject.classInitCheck();
            ojcsCircleShape.VOIDclinit();
        }
    },

};

var ojdFixtureProxy = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 140,
    __implementedTypes : [1,140],

    Create : function() {
        this.aabb = null; // declared in org.jbox2d.dynamics.FixtureProxy
        this.fixture = null; // declared in org.jbox2d.dynamics.FixtureProxy
        this.proxyId = 0; // declared in org.jbox2d.dynamics.FixtureProxy
        this.childIndex = 0; // declared in org.jbox2d.dynamics.FixtureProxy
    },

    instanceOf : function(aType) {
        return ojdFixtureProxy.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdFixtureProxy;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcAABB.Create(); // type is REFERENCE value type is REFERENCE
        ojcAABB.VOIDinit(var0);
        thisRef.aabb = var0;
        return;
    },

    classInitCheck : function() {
        if (!ojdFixtureProxy.__initialized) {
            ojdFixtureProxy.__initialized = true;
            var thePrototype = ojdFixtureProxy.Create.prototype;
            thePrototype.instanceOf = ojdFixtureProxy.instanceOf;
            thePrototype.ClassgetClass = ojdFixtureProxy.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojcsPolygonShape = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 141,
    __implementedTypes : [1,129,141],
    $assertionsDisabled : false, // declared in org.jbox2d.collision.shapes.PolygonShape

    Create : function() {
        this.m_type = null; // declared in org.jbox2d.collision.shapes.Shape
        this.m_radius = 0; // declared in org.jbox2d.collision.shapes.Shape
        this.m_centroid = null; // declared in org.jbox2d.collision.shapes.PolygonShape
        this.pool1 = null; // declared in org.jbox2d.collision.shapes.PolygonShape
        this.pool2 = null; // declared in org.jbox2d.collision.shapes.PolygonShape
        this.pool3 = null; // declared in org.jbox2d.collision.shapes.PolygonShape
        this.pool4 = null; // declared in org.jbox2d.collision.shapes.PolygonShape
        this.poolt1 = null; // declared in org.jbox2d.collision.shapes.PolygonShape
        this.m_count = 0; // declared in org.jbox2d.collision.shapes.PolygonShape
        this.m_vertices = null; // declared in org.jbox2d.collision.shapes.PolygonShape
        this.m_normals = null; // declared in org.jbox2d.collision.shapes.PolygonShape
    },

    instanceOf : function(aType) {
        return ojcsPolygonShape.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcsPolygonShape;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcsPolygonShape.BOOLEANdesiredAssertionStatus(ojcsPolygonShape); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_13_9 : for(;;) switch (__label__) {
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_13_9;
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_13_9;
        }
        ojcsPolygonShape.$assertionsDisabled = var1;
        return;
    },

    VOIDinit : function(thisRef) {
        var local_1_INT = null; // type is INT # of inits = 6
        var __label__ = null;
        $S_0 : {
        // NORMAL
            ojcsShape.VOIDinitojcsShapeType(thisRef,ojcsShapeType.POLYGON);
            var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var1);
            thisRef.m_centroid = var1;
            var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var2);
            thisRef.pool1 = var2;
            var var3 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var3);
            thisRef.pool2 = var3;
            var var4 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var4);
            thisRef.pool3 = var4;
            var var5 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var5);
            thisRef.pool4 = var5;
            var var6 = new ojcTransform.Create(); // type is REFERENCE value type is REFERENCE
            ojcTransform.VOIDinit(var6);
            thisRef.poolt1 = var6;
            thisRef.m_count = 0;
            var var7 = bytecoder.newArray(8,null); // type is REFERENCE value type is REFERENCE
            thisRef.m_vertices = var7;
            local_1_INT = 0; // type is INT value type is INT
            __label__ = 89;
            }
        $L_89 : for (;;) {
            $S_89 : {
            // NORMAL
                var var10 = local_1_INT; // type is INT value type is INT
                var var12 = thisRef.m_vertices.data.length; // type is INT value type is INT
                if ((var10 >= var12)) {
                    __label__ = 117;
                    break $S_89;
                }
                __label__ = 98;
                }
            for(;;) switch (__label__) {
                case 98 :
                // NORMAL
                    var var19 = thisRef.m_vertices; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3ffcfa7c
                    var var20 = local_1_INT; // type is INT value type is INT
                    var var21 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
                    ojcVec2.VOIDinit(var21);
                    var19.data[var20] = var21;
                    local_1_INT = (local_1_INT + 1); // type is INT value type is INT
                    __label__ = 89;
                    continue $L_89;
                case 117 :
                // NORMAL
                    $S_117 : {
                    // NORMAL
                        var var13 = bytecoder.newArray(8,null); // type is REFERENCE value type is REFERENCE
                        thisRef.m_normals = var13;
                        local_1_INT = 0; // type is INT value type is INT
                        __label__ = 128;
                        }
                    $L_128 : for (;;) {
                        $S_128 : {
                        // NORMAL
                            var var15 = local_1_INT; // type is INT value type is INT
                            var var17 = thisRef.m_normals.data.length; // type is INT value type is INT
                            if ((var15 >= var17)) {
                                __label__ = 156;
                                break $S_128;
                            }
                            __label__ = 137;
                            }
                        for(;;) switch (__label__) {
                            case 156 :
                            // NORMAL
                                thisRef.VOIDsetRadiusFLOAT(thisRef,0.01);
                                thisRef.m_centroid.VOIDsetZero(thisRef.m_centroid);
                                return;
                            case 137 :
                            // NORMAL
                                var var22 = thisRef.m_normals; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@2efedda2
                                var var23 = local_1_INT; // type is INT value type is INT
                                var var24 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
                                ojcVec2.VOIDinit(var24);
                                var22.data[var23] = var24;
                                local_1_INT = (local_1_INT + 1); // type is INT value type is INT
                                __label__ = 128;
                                continue $L_128;
                        }
                    }
            }
        }
    },

    VOIDsetA1ojcVec2INT : function(thisRef,vertices,count) {
        var __label__ = null;
        thisRef.VOIDsetA1ojcVec2INTojpaVec2ArrayojpaIntArray(thisRef,vertices,count,null,null);
        return;
    },

    VOIDsetA1ojcVec2INTojpaVec2ArrayojpaIntArray : function(thisRef,verts,num,vecPool,intPool) {
        var local_10_INT = null; // type is INT # of inits = 4
        var local_10_FLOAT = null; // type is FLOAT # of inits = 1
        var local_11_INT = null; // type is INT # of inits = 4
        var local_13_INT = null; // type is INT # of inits = 6
        var local_12_INT = null; // type is INT # of inits = 8
        var local_8_FLOAT = null; // type is FLOAT # of inits = 3
        var var62 = null; // type is INT # of inits = 2
        var local_12_REFERENCE = null; // type is REFERENCE # of inits = 2
        var var25 = null; // type is REFERENCE # of inits = 2
        var local_5_INT = null; // type is INT # of inits = 5
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 6
        var local_16_FLOAT = null; // type is FLOAT # of inits = 1
        var local_14_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_15_REFERENCE = null; // type is REFERENCE # of inits = 1
        var var8 = null; // type is REFERENCE # of inits = 2
        var local_7_INT = null; // type is INT # of inits = 8
        var local_14_INT = null; // type is INT # of inits = 1
        var local_9_INT = null; // type is INT # of inits = 3
        var local_9_REFERENCE = null; // type is REFERENCE # of inits = 4
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcsPolygonShape.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 25;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_6_25 : for(;;) switch (__label__) {
            case 25 :
            // NORMAL
                $S_25 : {
                // NORMAL
                    if ((num >= 3)) {
                        __label__ = 37;
                        break $S_25;
                    }
                    __label__ = 30;
                    }
                for(;;) switch (__label__) {
                    case 37 :
                    // NORMAL
                        $S_37 : {
                        // NORMAL
                            var var1 = ojcMathUtils.INTminINTINT(num,8); // type is INT value type is INT
                            local_5_INT = var1; // type is INT value type is INT
                            if (vecPool == null ) {
                                __label__ = 58;
                                break $S_37;
                            }
                            __label__ = 49;
                            }
                        $M_58_49 : for(;;) switch (__label__) {
                            case 58 :
                            // NORMAL
                                var8 = bytecoder.newArray(local_5_INT,null); // type is REFERENCE value type is REFERENCE
                                break $M_58_49;
                            case 49 :
                            // NORMAL
                                var var7 = vecPool.A1ojcVec2getINT(vecPool,local_5_INT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@18b185cf
                                var8 = var7; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@fb8d673
                                break $M_58_49;
                        }
                        $S_63 : {
                        // NORMAL
                            local_6_REFERENCE = var8; // type is REFERENCE value type is REFERENCE
                            local_7_INT = 0; // type is INT value type is INT
                            __label__ = 68;
                            }
                        $L_68 : for (;;) {
                            $S_68 : {
                            // NORMAL
                                var var12 = local_7_INT; // type is INT value type is INT
                                var var13 = local_5_INT; // type is INT value type is INT
                                if ((var12 >= var13)) {
                                    __label__ = 90;
                                    break $S_68;
                                }
                                __label__ = 75;
                                }
                            for(;;) switch (__label__) {
                                case 75 :
                                // NORMAL
                                    var var116 = local_6_REFERENCE; // type is REFERENCE value type is REFERENCE
                                    var var117 = local_7_INT; // type is INT value type is INT
                                    var var119 = verts.data[local_7_INT]; // type is REFERENCE value type is REFERENCE
                                    var116.data[var117] = var119;
                                    local_7_INT = (local_7_INT + 1); // type is INT value type is INT
                                    __label__ = 68;
                                    continue $L_68;
                                case 90 :
                                // NORMAL
                                    $S_90 : {
                                    // NORMAL
                                        local_7_INT = 0; // type is INT value type is INT
                                        var var16 = local_6_REFERENCE.data[0]; // type is REFERENCE value type is REFERENCE
                                        local_8_FLOAT = var16.x; // type is FLOAT value type is FLOAT
                                        local_9_INT = 1; // type is INT value type is INT
                                        __label__ = 105;
                                        }
                                    $L_105 : for (;;) {
                                        $S_105 : {
                                        // NORMAL
                                            var var22 = local_9_INT; // type is INT value type is INT
                                            if ((var22 >= num)) {
                                                __label__ = 171;
                                                break $S_105;
                                            }
                                            __label__ = 111;
                                            }
                                        for(;;) switch (__label__) {
                                            case 111 :
                                            // NORMAL
                                                $S_111 : {
                                                // NORMAL
                                                    var var88 = local_6_REFERENCE.data[local_9_INT]; // type is REFERENCE value type is REFERENCE
                                                    local_10_FLOAT = var88.x; // type is FLOAT value type is FLOAT
                                                    var var92 = local_10_FLOAT; // type is FLOAT value type is FLOAT
                                                    var var93 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                                                    if ((var92 > var93)) {
                                                        __label__ = 157;
                                                        break $S_111;
                                                    }
                                                    __label__ = 129;
                                                    }
                                                $M_157_129 : for(;;) switch (__label__) {
                                                    case 157 :
                                                    // NORMAL
                                                        local_7_INT = local_9_INT; // type is INT value type is INT
                                                        local_8_FLOAT = local_10_FLOAT; // type is FLOAT value type is FLOAT
                                                        break $M_157_129;
                                                    case 129 :
                                                    // NORMAL
                                                        $S_129 : {
                                                        // NORMAL
                                                            var var95 = local_10_FLOAT; // type is FLOAT value type is FLOAT
                                                            var var96 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                                                            if ((var95 != var96)) {
                                                                break $M_157_129;
                                                            }
                                                            }
                                                        var var100 = local_6_REFERENCE.data[local_9_INT]; // type is REFERENCE value type is REFERENCE
                                                        var var101 = var100.y; // type is FLOAT value type is FLOAT
                                                        var var104 = local_6_REFERENCE.data[local_7_INT]; // type is REFERENCE value type is REFERENCE
                                                        var var105 = var104.y; // type is FLOAT value type is FLOAT
                                                        if ((var101 >= var105)) {
                                                            break $M_157_129;
                                                        }
                                                        __label__ = 157;
                                                        continue $M_157_129;
                                                }
                                                local_9_INT = (local_9_INT + 1); // type is INT value type is INT
                                                __label__ = 105;
                                                continue $L_105;
                                            case 171 :
                                            // NORMAL
                                                $S_171 : {
                                                // NORMAL
                                                    if (intPool == null ) {
                                                        __label__ = 186;
                                                        break $S_171;
                                                    }
                                                    __label__ = 176;
                                                    }
                                                $M_186_176 : for(;;) switch (__label__) {
                                                    case 176 :
                                                    // NORMAL
                                                        var var24 = intPool.A1INTgetINT(intPool,8); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@501d31f
                                                        var25 = var24; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@615da25c
                                                        break $M_186_176;
                                                    case 186 :
                                                    // NORMAL
                                                        var25 = bytecoder.newArray(8,0); // type is REFERENCE value type is REFERENCE
                                                        break $M_186_176;
                                                }
                                                $S_190 : {
                                                // NORMAL
                                                    local_9_REFERENCE = var25; // type is REFERENCE value type is REFERENCE
                                                    local_10_INT = 0; // type is INT value type is INT
                                                    local_11_INT = local_7_INT; // type is INT value type is INT
                                                    __label__ = 199;
                                                    }
                                                $L_199 : for (;;) {
                                                    $S_199 : {
                                                    // NORMAL
                                                        var var32 = local_9_REFERENCE; // type is REFERENCE value type is REFERENCE
                                                        var var33 = local_10_INT; // type is INT value type is INT
                                                        var var34 = local_11_INT; // type is INT value type is INT
                                                        var32.data[var33] = var34;
                                                        local_12_INT = 0; // type is INT value type is INT
                                                        local_13_INT = 1; // type is INT value type is INT
                                                        __label__ = 212;
                                                        }
                                                    $L_212 : for (;;) {
                                                        $S_212 : {
                                                        // NORMAL
                                                            var var39 = local_13_INT; // type is INT value type is INT
                                                            var var40 = local_5_INT; // type is INT value type is INT
                                                            if ((var39 >= var40)) {
                                                                __label__ = 334;
                                                                break $S_212;
                                                            }
                                                            __label__ = 219;
                                                            }
                                                        for(;;) switch (__label__) {
                                                            case 219 :
                                                            // NORMAL
                                                                $S_219 : {
                                                                // NORMAL
                                                                    var var135 = local_12_INT; // type is INT value type is INT
                                                                    var var136 = local_11_INT; // type is INT value type is INT
                                                                    if ((var135 != var136)) {
                                                                        __label__ = 233;
                                                                        break $S_219;
                                                                    }
                                                                    __label__ = 226;
                                                                    }
                                                                $M_226_233 : for(;;) switch (__label__) {
                                                                    case 226 :
                                                                    // NORMAL
                                                                        local_12_INT = local_13_INT; // type is INT value type is INT
                                                                        break $M_226_233;
                                                                    case 233 :
                                                                    // NORMAL
                                                                        $S_233 : {
                                                                        // NORMAL
                                                                            var var137 = thisRef.pool1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6c7afce2
                                                                            var var140 = local_6_REFERENCE.data[local_12_INT]; // type is REFERENCE value type is REFERENCE
                                                                            var var141 = var137.ojcVec2setojcVec2(var137,var140); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@78f1835f
                                                                            var var142 = local_6_REFERENCE; // type is REFERENCE value type is REFERENCE
                                                                            var var145 = local_9_REFERENCE.data[local_10_INT]; // type is INT value type is INT
                                                                            var var146 = var142.data[var145]; // type is REFERENCE value type is REFERENCE
                                                                            var var147 = var141.ojcVec2subLocalojcVec2(var141,var146); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1b663596
                                                                            local_14_REFERENCE = var147; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@67a6ac4a
                                                                            var var149 = thisRef.pool2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@107484ce
                                                                            var var152 = local_6_REFERENCE.data[local_13_INT]; // type is REFERENCE value type is REFERENCE
                                                                            var var153 = var149.ojcVec2setojcVec2(var149,var152); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2bd2e7ce
                                                                            var var154 = local_6_REFERENCE; // type is REFERENCE value type is REFERENCE
                                                                            var var157 = local_9_REFERENCE.data[local_10_INT]; // type is INT value type is INT
                                                                            var var158 = var154.data[var157]; // type is REFERENCE value type is REFERENCE
                                                                            var var159 = var153.ojcVec2subLocalojcVec2(var153,var158); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5f4d6290
                                                                            local_15_REFERENCE = var159; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@696b2a30
                                                                            var var163 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_14_REFERENCE,local_15_REFERENCE); // type is FLOAT value type is FLOAT
                                                                            local_16_FLOAT = var163; // type is FLOAT value type is FLOAT
                                                                            var var166 = local_16_FLOAT; // type is FLOAT value type is FLOAT
                                                                            if ((var166 >= 0.0)) {
                                                                                __label__ = 303;
                                                                                break $S_233;
                                                                            }
                                                                            __label__ = 299;
                                                                            }
                                                                        $M_303_299 : for(;;) switch (__label__) {
                                                                            case 303 :
                                                                            // NORMAL
                                                                                $S_303 : {
                                                                                // NORMAL
                                                                                    var var170 = local_16_FLOAT; // type is FLOAT value type is FLOAT
                                                                                    if ((var170 != 0.0)) {
                                                                                        break $M_226_233;
                                                                                    }
                                                                                    }
                                                                                $S_310 : {
                                                                                // NORMAL
                                                                                    var var175 = local_15_REFERENCE.FLOATlengthSquared(local_15_REFERENCE); // type is FLOAT value type is FLOAT
                                                                                    var var177 = local_14_REFERENCE.FLOATlengthSquared(local_14_REFERENCE); // type is FLOAT value type is FLOAT
                                                                                    if ((var175 <= var177)) {
                                                                                        break $M_226_233;
                                                                                    }
                                                                                    }
                                                                                local_12_INT = local_13_INT; // type is INT value type is INT
                                                                                break $M_226_233;
                                                                            case 299 :
                                                                            // NORMAL
                                                                                local_12_INT = local_13_INT; // type is INT value type is INT
                                                                                __label__ = 303;
                                                                                continue $M_303_299;
                                                                        }
                                                                }
                                                                local_13_INT = (local_13_INT + 1); // type is INT value type is INT
                                                                __label__ = 212;
                                                                continue $L_212;
                                                            case 334 :
                                                            // NORMAL
                                                                $S_334 : {
                                                                // NORMAL
                                                                    local_10_INT = (local_10_INT + 1); // type is INT value type is INT
                                                                    local_11_INT = local_12_INT; // type is INT value type is INT
                                                                    var var43 = local_12_INT; // type is INT value type is INT
                                                                    var var44 = local_7_INT; // type is INT value type is INT
                                                                    if ((var43 != var44)) {
                                                                        __label__ = 351;
                                                                        break $S_334;
                                                                    }
                                                                    __label__ = 348;
                                                                    }
                                                                for(;;) switch (__label__) {
                                                                    case 351 :
                                                                    // NORMAL
                                                                        __label__ = 199;
                                                                        continue $L_199;
                                                                    case 348 :
                                                                    // NORMAL
                                                                        $S_348 : {
                                                                        // NORMAL
                                                                            }
                                                                        $S_354 : {
                                                                        // NORMAL
                                                                            var var45 = local_10_INT; // type is INT value type is INT
                                                                            thisRef.m_count = var45;
                                                                            local_12_INT = 0; // type is INT value type is INT
                                                                            __label__ = 363;
                                                                            }
                                                                        $L_363 : for (;;) {
                                                                            $S_363 : {
                                                                            // NORMAL
                                                                                var var47 = local_12_INT; // type is INT value type is INT
                                                                                var var48 = thisRef.m_count; // type is INT value type is INT
                                                                                if ((var47 >= var48)) {
                                                                                    __label__ = 421;
                                                                                    break $S_363;
                                                                                }
                                                                                __label__ = 372;
                                                                                }
                                                                            for(;;) switch (__label__) {
                                                                                case 421 :
                                                                                // NORMAL
                                                                                    $S_421 : {
                                                                                    // NORMAL
                                                                                        local_12_REFERENCE = thisRef.pool1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@75ad366a
                                                                                        local_13_INT = 0; // type is INT value type is INT
                                                                                        __label__ = 430;
                                                                                        }
                                                                                    $L_430 : for (;;) {
                                                                                        $S_430 : {
                                                                                        // NORMAL
                                                                                            var var52 = local_13_INT; // type is INT value type is INT
                                                                                            var var53 = thisRef.m_count; // type is INT value type is INT
                                                                                            if ((var52 >= var53)) {
                                                                                                __label__ = 542;
                                                                                                break $S_430;
                                                                                            }
                                                                                            __label__ = 439;
                                                                                            }
                                                                                        for(;;) switch (__label__) {
                                                                                            case 542 :
                                                                                            // NORMAL
                                                                                                thisRef.VOIDcomputeCentroidToOutA1ojcVec2INTojcVec2(thisRef,thisRef.m_vertices,thisRef.m_count,thisRef.m_centroid);
                                                                                                return;
                                                                                            case 439 :
                                                                                            // NORMAL
                                                                                                $S_439 : {
                                                                                                // NORMAL
                                                                                                    local_14_INT = local_13_INT; // type is INT value type is INT
                                                                                                    var var58 = (local_13_INT + 1); // type is INT value type is INT
                                                                                                    var var59 = thisRef.m_count; // type is INT value type is INT
                                                                                                    if ((var58 >= var59)) {
                                                                                                        __label__ = 461;
                                                                                                        break $S_439;
                                                                                                    }
                                                                                                    __label__ = 454;
                                                                                                    }
                                                                                                $M_454_461 : for(;;) switch (__label__) {
                                                                                                    case 461 :
                                                                                                    // NORMAL
                                                                                                        var62 = 0; // type is INT value type is INT
                                                                                                        break $M_454_461;
                                                                                                    case 454 :
                                                                                                    // NORMAL
                                                                                                        var62 = (local_13_INT + 1); // type is INT value type is INT
                                                                                                        break $M_454_461;
                                                                                                }
                                                                                                $S_462 : {
                                                                                                // NORMAL
                                                                                                    var local_15_INT = var62; // type is INT value type is INT
                                                                                                    var var65 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6feb9786
                                                                                                    var var68 = thisRef.m_vertices.data[local_15_INT]; // type is REFERENCE value type is REFERENCE
                                                                                                    var var69 = var65.ojcVec2setojcVec2(var65,var68); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@41cb8ee5
                                                                                                    var var72 = thisRef.m_vertices.data[local_14_INT]; // type is REFERENCE value type is REFERENCE
                                                                                                    var var73 = var69.ojcVec2subLocalojcVec2(var69,var72); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7d1bed85
                                                                                                    var var74 = ojcsPolygonShape.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                                                                                                    if ((var74 != 0)) {
                                                                                                        __label__ = 512;
                                                                                                        break $S_462;
                                                                                                    }
                                                                                                    __label__ = 493;
                                                                                                    }
                                                                                                $M_512_493 : for(;;) switch (__label__) {
                                                                                                    case 493 :
                                                                                                    // NORMAL
                                                                                                        $S_493 : {
                                                                                                        // NORMAL
                                                                                                            var var76 = local_12_REFERENCE.FLOATlengthSquared(local_12_REFERENCE); // type is FLOAT value type is FLOAT
                                                                                                            if ((var76 > 1.4210855E-14)) {
                                                                                                                __label__ = 512;
                                                                                                                continue $M_512_493;
                                                                                                            }
                                                                                                            }
                                                                                                        var var111 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                                                                                        jlAssertionError.VOIDinit(var111);
                                                                                                        throw var111;
                                                                                                    case 512 :
                                                                                                    // NORMAL
                                                                                                        var var78 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6feb9786
                                                                                                        var var81 = thisRef.m_normals.data[local_13_INT]; // type is REFERENCE value type is REFERENCE
                                                                                                        ojcVec2.VOIDcrossToOutUnsafeojcVec2FLOATojcVec2(var78,1.0,var81);
                                                                                                        var var84 = thisRef.m_normals.data[local_13_INT]; // type is REFERENCE value type is REFERENCE
                                                                                                        var var85 = var84.FLOATnormalize(var84); // type is FLOAT value type is FLOAT
                                                                                                        local_13_INT = (local_13_INT + 1); // type is INT value type is INT
                                                                                                        __label__ = 430;
                                                                                                        continue $L_430;
                                                                                                }
                                                                                        }
                                                                                    }
                                                                                case 372 :
                                                                                // NORMAL
                                                                                    $S_372 : {
                                                                                    // NORMAL
                                                                                        var var122 = thisRef.m_vertices.data[local_12_INT]; // type is REFERENCE value type is REFERENCE
                                                                                        if (var122 != null ) {
                                                                                            __label__ = 396;
                                                                                            break $S_372;
                                                                                        }
                                                                                        __label__ = 382;
                                                                                        }
                                                                                    $M_382_396 : for(;;) switch (__label__) {
                                                                                        case 396 :
                                                                                        // NORMAL
                                                                                            var var128 = thisRef.m_vertices.data[local_12_INT]; // type is REFERENCE value type is REFERENCE
                                                                                            var var129 = local_6_REFERENCE; // type is REFERENCE value type is REFERENCE
                                                                                            var var132 = local_9_REFERENCE.data[local_12_INT]; // type is INT value type is INT
                                                                                            var var133 = var129.data[var132]; // type is REFERENCE value type is REFERENCE
                                                                                            var var134 = var128.ojcVec2setojcVec2(var128,var133); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@49f64954
                                                                                            local_12_INT = (local_12_INT + 1); // type is INT value type is INT
                                                                                            __label__ = 363;
                                                                                            continue $L_363;
                                                                                        case 382 :
                                                                                        // NORMAL
                                                                                            var var123 = thisRef.m_vertices; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@55743866
                                                                                            var var124 = local_12_INT; // type is INT value type is INT
                                                                                            var var125 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
                                                                                            ojcVec2.VOIDinit(var125);
                                                                                            var123.data[var124] = var125;
                                                                                            __label__ = 396;
                                                                                            continue $M_382_396;
                                                                                    }
                                                                            }
                                                                        }
                                                                }
                                                        }
                                                    }
                                                }
                                        }
                                    }
                            }
                        }
                    case 30 :
                    // NORMAL
                        thisRef.VOIDsetAsBoxFLOATFLOAT(thisRef,1.0,1.0);
                        return;
                }
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    if ((3 > num)) {
                        __label__ = 17;
                        break $S_6;
                    }
                    __label__ = 11;
                    }
                $M_17_11 : for(;;) switch (__label__) {
                    case 11 :
                    // NORMAL
                        if ((num <= 8)) {
                            __label__ = 25;
                            continue $M_6_25;
                        }
                        __label__ = 17;
                        continue $M_17_11;
                    case 17 :
                    // NORMAL
                        var var115 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                        jlAssertionError.VOIDinit(var115);
                        throw var115;
                }
        }
    },

    VOIDsetAsBoxFLOATFLOAT : function(thisRef,hx,hy) {
        var __label__ = null;
        thisRef.m_count = 4;
        var var1 = thisRef.m_vertices.data[0]; // type is REFERENCE value type is REFERENCE
        var var4 = var1.ojcVec2setFLOATFLOAT(var1,(-hx),(-hy)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@55813af
        var var6 = thisRef.m_vertices.data[1]; // type is REFERENCE value type is REFERENCE
        var var8 = var6.ojcVec2setFLOATFLOAT(var6,hx,(-hy)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@59ad3341
        var var10 = thisRef.m_vertices.data[2]; // type is REFERENCE value type is REFERENCE
        var var11 = var10.ojcVec2setFLOATFLOAT(var10,hx,hy); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@74dfc2f3
        var var13 = thisRef.m_vertices.data[3]; // type is REFERENCE value type is REFERENCE
        var var15 = var13.ojcVec2setFLOATFLOAT(var13,(-hx),hy); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2fb63c70
        var var17 = thisRef.m_normals.data[0]; // type is REFERENCE value type is REFERENCE
        var var18 = var17.ojcVec2setFLOATFLOAT(var17,0.0,-1.0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6ab69742
        var var20 = thisRef.m_normals.data[1]; // type is REFERENCE value type is REFERENCE
        var var21 = var20.ojcVec2setFLOATFLOAT(var20,1.0,0.0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5ab1866e
        var var23 = thisRef.m_normals.data[2]; // type is REFERENCE value type is REFERENCE
        var var24 = var23.ojcVec2setFLOATFLOAT(var23,0.0,1.0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@50730f91
        var var26 = thisRef.m_normals.data[3]; // type is REFERENCE value type is REFERENCE
        var var27 = var26.ojcVec2setFLOATFLOAT(var26,-1.0,0.0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4eb8fc53
        thisRef.m_centroid.VOIDsetZero(thisRef.m_centroid);
        return;
    },

    VOIDcomputeCentroidToOutA1ojcVec2INTojcVec2 : function(thisRef,vs,count,out) {
        var local_7_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_10_REFERENCE = null; // type is REFERENCE # of inits = 1
        var var33 = null; // type is REFERENCE # of inits = 2
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_11_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_4_FLOAT = null; // type is FLOAT # of inits = 3
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_9_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcsPolygonShape.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 19;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_6_19 : for(;;) switch (__label__) {
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    if ((count >= 3)) {
                        __label__ = 19;
                        continue $M_6_19;
                    }
                    }
                var var70 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var70);
                throw var70;
            case 19 :
            // NORMAL
                $S_19 : {
                // NORMAL
                    var var1 = out.ojcVec2setFLOATFLOAT(out,0.0,0.0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@12eb958c
                    local_4_FLOAT = 0.0; // type is FLOAT value type is FLOAT
                    local_5_REFERENCE = thisRef.pool1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1971757
                    local_5_REFERENCE.VOIDsetZero(local_5_REFERENCE);
                    local_6_REFERENCE = thisRef.pool2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7414d0f2
                    local_7_REFERENCE = thisRef.pool3; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7f951693
                    var local_8_FLOAT = 0.33333334; // type is FLOAT value type is FLOAT
                    local_9_INT = 0; // type is INT value type is INT
                    __label__ = 59;
                    }
                $L_59 : for (;;) {
                    $S_59 : {
                    // NORMAL
                        var var15 = local_9_INT; // type is INT value type is INT
                        if ((var15 >= count)) {
                            __label__ = 185;
                            break $S_59;
                        }
                        __label__ = 65;
                        }
                    for(;;) switch (__label__) {
                        case 185 :
                        // NORMAL
                            $S_185 : {
                            // NORMAL
                                var var16 = ojcsPolygonShape.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                                if ((var16 != 0)) {
                                    __label__ = 207;
                                    break $S_185;
                                }
                                __label__ = 191;
                                }
                            $M_191_207 : for(;;) switch (__label__) {
                                case 191 :
                                // NORMAL
                                    $S_191 : {
                                    // NORMAL
                                        var var17 = local_4_FLOAT; // type is FLOAT value type is FLOAT
                                        if ((var17 > 1.1920929E-7)) {
                                            __label__ = 207;
                                            continue $M_191_207;
                                        }
                                        }
                                    var var71 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                    jlAssertionError.VOIDinit(var71);
                                    throw var71;
                                case 207 :
                                // NORMAL
                                    var var21 = out.ojcVec2mulLocalFLOAT(out,(1.0 / local_4_FLOAT)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@319cbb18
                                    return;
                            }
                        case 65 :
                        // NORMAL
                            $S_65 : {
                            // NORMAL
                                local_10_REFERENCE = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@623219b9
                                var var25 = vs.data[local_9_INT]; // type is REFERENCE value type is REFERENCE
                                local_11_REFERENCE = var25; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@61fb6714
                                var var28 = (local_9_INT + 1); // type is INT value type is INT
                                if ((var28 >= count)) {
                                    __label__ = 92;
                                    break $S_65;
                                }
                                __label__ = 83;
                                }
                            $M_83_92 : for(;;) switch (__label__) {
                                case 83 :
                                // NORMAL
                                    var var31 = vs.data[(local_9_INT + 1)]; // type is REFERENCE value type is REFERENCE
                                    var33 = var31; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@4132e4c7
                                    break $M_83_92;
                                case 92 :
                                // NORMAL
                                    var var32 = vs.data[0]; // type is REFERENCE value type is REFERENCE
                                    var33 = var32; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@4596ad60
                                    break $M_83_92;
                            }
                            var local_12_REFERENCE = var33; // type is REFERENCE value type is REFERENCE
                            var var37 = local_6_REFERENCE.ojcVec2setojcVec2(local_6_REFERENCE,local_11_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@8882fd3
                            var var39 = var37.ojcVec2subLocalojcVec2(var37,local_10_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5a49ed70
                            var var42 = local_7_REFERENCE.ojcVec2setojcVec2(local_7_REFERENCE,local_12_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@d3f5924
                            var var44 = var42.ojcVec2subLocalojcVec2(var42,local_10_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@592f77e0
                            var var47 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_6_REFERENCE,local_7_REFERENCE); // type is FLOAT value type is FLOAT
                            var local_13_FLOAT = var47; // type is FLOAT value type is FLOAT
                            var local_14_FLOAT = (0.5 * local_13_FLOAT); // type is FLOAT value type is FLOAT
                            local_4_FLOAT = (local_4_FLOAT + local_14_FLOAT); // type is FLOAT value type is FLOAT
                            var var60 = local_6_REFERENCE.ojcVec2setojcVec2(local_6_REFERENCE,local_10_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@10102da1
                            var var62 = var60.ojcVec2addLocalojcVec2(var60,local_11_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5a760be
                            var var64 = var62.ojcVec2addLocalojcVec2(var62,local_12_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7226ff57
                            var var67 = var64.ojcVec2mulLocalFLOAT(var64,(local_14_FLOAT * 0.33333334)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@50140684
                            var var69 = out.ojcVec2addLocalojcVec2(out,local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@41f85402
                            local_9_INT = (local_9_INT + 1); // type is INT value type is INT
                            __label__ = 59;
                            continue $L_59;
                    }
                }
        }
    },

    ojcsShapeclone : function(thisRef) {
        var local_1_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_2_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = new ojcsPolygonShape.Create(); // type is REFERENCE value type is REFERENCE
            ojcsPolygonShape.VOIDinit(var0);
            local_1_REFERENCE = var0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1ba523a6
            var var5 = local_1_REFERENCE.m_centroid.ojcVec2setojcVec2(local_1_REFERENCE.m_centroid,thisRef.m_centroid); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7debed5a
            local_2_INT = 0; // type is INT value type is INT
            __label__ = 22;
            }
        $L_22 : for (;;) {
            $S_22 : {
            // NORMAL
                var var8 = local_2_INT; // type is INT value type is INT
                var var11 = local_1_REFERENCE.m_normals.data.length; // type is INT value type is INT
                if ((var8 >= var11)) {
                    __label__ = 69;
                    break $S_22;
                }
                __label__ = 31;
                }
            for(;;) switch (__label__) {
                case 31 :
                // NORMAL
                    var var20 = local_1_REFERENCE.m_normals.data[local_2_INT]; // type is REFERENCE value type is REFERENCE
                    var var23 = thisRef.m_normals.data[local_2_INT]; // type is REFERENCE value type is REFERENCE
                    var var24 = var20.ojcVec2setojcVec2(var20,var23); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@57aa12d0
                    var var28 = local_1_REFERENCE.m_vertices.data[local_2_INT]; // type is REFERENCE value type is REFERENCE
                    var var31 = thisRef.m_vertices.data[local_2_INT]; // type is REFERENCE value type is REFERENCE
                    var var32 = var28.ojcVec2setojcVec2(var28,var31); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@54f968de
                    local_2_INT = (local_2_INT + 1); // type is INT value type is INT
                    __label__ = 22;
                    continue $L_22;
                case 69 :
                // NORMAL
                    var var12 = local_1_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1ba523a6
                    var var13 = thisRef.FLOATgetRadius(thisRef); // type is FLOAT value type is FLOAT
                    var12.VOIDsetRadiusFLOAT(var12,var13);
                    var var14 = local_1_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1ba523a6
                    var var15 = thisRef.m_count; // type is INT value type is INT
                    var14.m_count = var15;
                    return local_1_REFERENCE;
            }
        }
    },

    INTgetChildCount : function(thisRef) {
        var __label__ = null;
        return 1;
    },

    VOIDcomputeAABBojcAABBojcTransformINT : function(thisRef,aabb,xf,childIndex) {
        var var121 = null; // type is REFERENCE # of inits = 1
        var var103 = null; // type is REFERENCE # of inits = 1
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_10_FLOAT = null; // type is FLOAT # of inits = 1
        var var129 = null; // type is FLOAT # of inits = 2
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_7_REFERENCE = null; // type is REFERENCE # of inits = 2
        var var120 = null; // type is FLOAT # of inits = 2
        var var111 = null; // type is FLOAT # of inits = 2
        var local_9_FLOAT = null; // type is FLOAT # of inits = 1
        var local_11_INT = null; // type is INT # of inits = 3
        var var138 = null; // type is FLOAT # of inits = 2
        var var112 = null; // type is REFERENCE # of inits = 1
        var local_8_REFERENCE = null; // type is REFERENCE # of inits = 2
        var var130 = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_4_REFERENCE = aabb.lowerBound; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@19160064
            local_5_REFERENCE = aabb.upperBound; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@286e298f
            var var5 = thisRef.m_vertices.data[0]; // type is REFERENCE value type is REFERENCE
            var local_6_REFERENCE = var5; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@383b02ab
            local_7_REFERENCE = xf.q; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@44d673e
            local_8_REFERENCE = xf.p; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2d7152f3
            var var11 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@25ef4e75
            var var25 = (((local_7_REFERENCE.c * local_6_REFERENCE.x) - (local_7_REFERENCE.s * local_6_REFERENCE.y)) + local_8_REFERENCE.x); // type is FLOAT value type is FLOAT
            var11.x = var25;
            var var26 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@25ef4e75
            var var40 = (((local_7_REFERENCE.s * local_6_REFERENCE.x) + (local_7_REFERENCE.c * local_6_REFERENCE.y)) + local_8_REFERENCE.y); // type is FLOAT value type is FLOAT
            var26.y = var40;
            var var41 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@74310907
            var var43 = local_4_REFERENCE.x; // type is FLOAT value type is FLOAT
            var41.x = var43;
            var var44 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@74310907
            var var46 = local_4_REFERENCE.y; // type is FLOAT value type is FLOAT
            var44.y = var46;
            local_11_INT = 1; // type is INT value type is INT
            __label__ = 123;
            }
        $L_123 : for (;;) {
            $S_123 : {
            // NORMAL
                var var49 = local_11_INT; // type is INT value type is INT
                var var50 = thisRef.m_count; // type is INT value type is INT
                if ((var49 >= var50)) {
                    __label__ = 313;
                    break $S_123;
                }
                __label__ = 132;
                }
            for(;;) switch (__label__) {
                case 313 :
                // NORMAL
                    var var51 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@25ef4e75
                    var var54 = (var51.x - thisRef.m_radius); // type is FLOAT value type is FLOAT
                    var51.x = var54;
                    var var55 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@25ef4e75
                    var var58 = (var55.y - thisRef.m_radius); // type is FLOAT value type is FLOAT
                    var55.y = var58;
                    var var59 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@74310907
                    var var62 = (var59.x + thisRef.m_radius); // type is FLOAT value type is FLOAT
                    var59.x = var62;
                    var var63 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@74310907
                    var var66 = (var63.y + thisRef.m_radius); // type is FLOAT value type is FLOAT
                    var63.y = var66;
                    return;
                case 132 :
                // NORMAL
                    $S_132 : {
                    // NORMAL
                        var var69 = thisRef.m_vertices.data[local_11_INT]; // type is REFERENCE value type is REFERENCE
                        var local_12_REFERENCE = var69; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@740a2483
                        local_9_FLOAT = (((local_7_REFERENCE.c * local_12_REFERENCE.x) - (local_7_REFERENCE.s * local_12_REFERENCE.y)) + local_8_REFERENCE.x); // type is FLOAT value type is FLOAT
                        local_10_FLOAT = (((local_7_REFERENCE.s * local_12_REFERENCE.x) + (local_7_REFERENCE.c * local_12_REFERENCE.y)) + local_8_REFERENCE.y); // type is FLOAT value type is FLOAT
                        var103 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@25ef4e75
                        var var105 = local_4_REFERENCE.x; // type is FLOAT value type is FLOAT
                        var var106 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                        if ((var105 >= var106)) {
                            __label__ = 224;
                            break $S_132;
                        }
                        __label__ = 216;
                        }
                    $M_224_216 : for(;;) switch (__label__) {
                        case 216 :
                        // NORMAL
                            var111 = local_4_REFERENCE.x; // type is FLOAT value type is FLOAT
                            break $M_224_216;
                        case 224 :
                        // NORMAL
                            var111 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                            break $M_224_216;
                    }
                    $S_226 : {
                    // NORMAL
                        var103.x = var111;
                        var112 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@25ef4e75
                        var var114 = local_4_REFERENCE.y; // type is FLOAT value type is FLOAT
                        var var115 = local_10_FLOAT; // type is FLOAT value type is FLOAT
                        if ((var114 >= var115)) {
                            __label__ = 250;
                            break $S_226;
                        }
                        __label__ = 242;
                        }
                    $M_250_242 : for(;;) switch (__label__) {
                        case 242 :
                        // NORMAL
                            var120 = local_4_REFERENCE.y; // type is FLOAT value type is FLOAT
                            break $M_250_242;
                        case 250 :
                        // NORMAL
                            var120 = local_10_FLOAT; // type is FLOAT value type is FLOAT
                            break $M_250_242;
                    }
                    $S_252 : {
                    // NORMAL
                        var112.y = var120;
                        var121 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@74310907
                        var var123 = local_5_REFERENCE.x; // type is FLOAT value type is FLOAT
                        var var124 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                        if ((var123 <= var124)) {
                            __label__ = 276;
                            break $S_252;
                        }
                        __label__ = 268;
                        }
                    $M_268_276 : for(;;) switch (__label__) {
                        case 268 :
                        // NORMAL
                            var129 = local_5_REFERENCE.x; // type is FLOAT value type is FLOAT
                            break $M_268_276;
                        case 276 :
                        // NORMAL
                            var129 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                            break $M_268_276;
                    }
                    $S_278 : {
                    // NORMAL
                        var121.x = var129;
                        var130 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@74310907
                        var var132 = local_5_REFERENCE.y; // type is FLOAT value type is FLOAT
                        var var133 = local_10_FLOAT; // type is FLOAT value type is FLOAT
                        if ((var132 <= var133)) {
                            __label__ = 302;
                            break $S_278;
                        }
                        __label__ = 294;
                        }
                    $M_302_294 : for(;;) switch (__label__) {
                        case 294 :
                        // NORMAL
                            var138 = local_5_REFERENCE.y; // type is FLOAT value type is FLOAT
                            break $M_302_294;
                        case 302 :
                        // NORMAL
                            var138 = local_10_FLOAT; // type is FLOAT value type is FLOAT
                            break $M_302_294;
                    }
                    var130.y = var138;
                    local_11_INT = (local_11_INT + 1); // type is INT value type is INT
                    __label__ = 123;
                    continue $L_123;
            }
        }
    },

    VOIDcomputeMassojcsMassDataFLOAT : function(thisRef,massData,density) {
        var local_9_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_10_INT = null; // type is INT # of inits = 3
        var local_5_FLOAT = null; // type is FLOAT # of inits = 4
        var var81 = null; // type is REFERENCE # of inits = 2
        var local_7_INT = null; // type is INT # of inits = 3
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_8_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 3
        var var71 = null; // type is REFERENCE # of inits = 1
        var local_4_FLOAT = null; // type is FLOAT # of inits = 4
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcsPolygonShape.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 22;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_6_22 : for(;;) switch (__label__) {
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    var var1 = thisRef.m_count; // type is INT value type is INT
                    if ((var1 >= 3)) {
                        __label__ = 22;
                        continue $M_6_22;
                    }
                    }
                var var54 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var54);
                throw var54;
            case 22 :
            // NORMAL
                $S_22 : {
                // NORMAL
                    local_3_REFERENCE = thisRef.pool1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@c9475dd
                    local_3_REFERENCE.VOIDsetZero(local_3_REFERENCE);
                    local_4_FLOAT = 0.0; // type is FLOAT value type is FLOAT
                    local_5_FLOAT = 0.0; // type is FLOAT value type is FLOAT
                    local_6_REFERENCE = thisRef.pool2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@14567552
                    local_6_REFERENCE.VOIDsetZero(local_6_REFERENCE);
                    local_7_INT = 0; // type is INT value type is INT
                    __label__ = 51;
                    }
                $L_51 : for (;;) {
                    $S_51 : {
                    // NORMAL
                        var var14 = local_7_INT; // type is INT value type is INT
                        var var15 = thisRef.m_count; // type is INT value type is INT
                        if ((var14 >= var15)) {
                            __label__ = 79;
                            break $S_51;
                        }
                        __label__ = 60;
                        }
                    for(;;) switch (__label__) {
                        case 79 :
                        // NORMAL
                            $S_79 : {
                            // NORMAL
                                var var20 = local_6_REFERENCE.ojcVec2mulLocalFLOAT(local_6_REFERENCE,(1.0 / thisRef.m_count)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@153cde5a
                                var local_7_FLOAT = 0.33333334; // type is FLOAT value type is FLOAT
                                local_8_REFERENCE = thisRef.pool3; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@347eacd4
                                local_9_REFERENCE = thisRef.pool4; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1b6b0d1b
                                local_10_INT = 0; // type is INT value type is INT
                                __label__ = 111;
                                }
                            $L_111 : for (;;) {
                                $S_111 : {
                                // NORMAL
                                    var var29 = local_10_INT; // type is INT value type is INT
                                    var var30 = thisRef.m_count; // type is INT value type is INT
                                    if ((var29 >= var30)) {
                                        __label__ = 344;
                                        break $S_111;
                                    }
                                    __label__ = 120;
                                    }
                                for(;;) switch (__label__) {
                                    case 120 :
                                    // NORMAL
                                        $S_120 : {
                                        // NORMAL
                                            var var61 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@46a252a2
                                            var var64 = thisRef.m_vertices.data[local_10_INT]; // type is REFERENCE value type is REFERENCE
                                            var var65 = var61.ojcVec2setojcVec2(var61,var64); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3cb017c1
                                            var var67 = var65.ojcVec2subLocalojcVec2(var65,local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4f0dd003
                                            var var70 = local_9_REFERENCE.ojcVec2setojcVec2(local_9_REFERENCE,local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@ed4cd3a
                                            var71 = var70.ojcVec2negateLocal(var70); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4d940a2e
                                            var var73 = (local_10_INT + 1); // type is INT value type is INT
                                            var var74 = thisRef.m_count; // type is INT value type is INT
                                            if ((var73 >= var74)) {
                                                __label__ = 171;
                                                break $S_120;
                                            }
                                            __label__ = 159;
                                            }
                                        $M_159_171 : for(;;) switch (__label__) {
                                            case 171 :
                                            // NORMAL
                                                var var80 = thisRef.m_vertices.data[0]; // type is REFERENCE value type is REFERENCE
                                                var81 = var80; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1e22e50a
                                                break $M_159_171;
                                            case 159 :
                                            // NORMAL
                                                var var78 = thisRef.m_vertices.data[(local_10_INT + 1)]; // type is REFERENCE value type is REFERENCE
                                                var81 = var78; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@878d47a
                                                break $M_159_171;
                                        }
                                        var var82 = var71.ojcVec2addLocalojcVec2(var71,var81); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@71260242
                                        var var85 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_8_REFERENCE,local_9_REFERENCE); // type is FLOAT value type is FLOAT
                                        var local_11_FLOAT = var85; // type is FLOAT value type is FLOAT
                                        var local_12_FLOAT = (0.5 * local_11_FLOAT); // type is FLOAT value type is FLOAT
                                        local_4_FLOAT = (local_4_FLOAT + local_12_FLOAT); // type is FLOAT value type is FLOAT
                                        var var96 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1e33f541
                                        var var106 = (var96.x + ((local_12_FLOAT * 0.33333334) * (local_8_REFERENCE.x + local_9_REFERENCE.x))); // type is FLOAT value type is FLOAT
                                        var96.x = var106;
                                        var var107 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1e33f541
                                        var var117 = (var107.y + ((local_12_FLOAT * 0.33333334) * (local_8_REFERENCE.y + local_9_REFERENCE.y))); // type is FLOAT value type is FLOAT
                                        var107.y = var117;
                                        var local_13_FLOAT = local_8_REFERENCE.x; // type is FLOAT value type is FLOAT
                                        var local_14_FLOAT = local_8_REFERENCE.y; // type is FLOAT value type is FLOAT
                                        var local_15_FLOAT = local_9_REFERENCE.x; // type is FLOAT value type is FLOAT
                                        var local_16_FLOAT = local_9_REFERENCE.y; // type is FLOAT value type is FLOAT
                                        var local_17_FLOAT = (((local_13_FLOAT * local_13_FLOAT) + (local_15_FLOAT * local_13_FLOAT)) + (local_15_FLOAT * local_15_FLOAT)); // type is FLOAT value type is FLOAT
                                        var local_18_FLOAT = (((local_14_FLOAT * local_14_FLOAT) + (local_16_FLOAT * local_14_FLOAT)) + (local_16_FLOAT * local_16_FLOAT)); // type is FLOAT value type is FLOAT
                                        local_5_FLOAT = (local_5_FLOAT + ((0.083333336 * local_11_FLOAT) * (local_17_FLOAT + local_18_FLOAT))); // type is FLOAT value type is FLOAT
                                        local_10_INT = (local_10_INT + 1); // type is INT value type is INT
                                        __label__ = 111;
                                        continue $L_111;
                                    case 344 :
                                    // NORMAL
                                        $S_344 : {
                                        // NORMAL
                                            var var32 = (density * local_4_FLOAT); // type is FLOAT value type is FLOAT
                                            massData.mass = var32;
                                            var var33 = ojcsPolygonShape.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                                            if ((var33 != 0)) {
                                                __label__ = 374;
                                                break $S_344;
                                            }
                                            __label__ = 358;
                                            }
                                        $M_374_358 : for(;;) switch (__label__) {
                                            case 358 :
                                            // NORMAL
                                                $S_358 : {
                                                // NORMAL
                                                    var var34 = local_4_FLOAT; // type is FLOAT value type is FLOAT
                                                    if ((var34 > 1.1920929E-7)) {
                                                        __label__ = 374;
                                                        continue $M_374_358;
                                                    }
                                                    }
                                                var var60 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                                jlAssertionError.VOIDinit(var60);
                                                throw var60;
                                            case 374 :
                                            // NORMAL
                                                var var39 = local_3_REFERENCE.ojcVec2mulLocalFLOAT(local_3_REFERENCE,(1.0 / local_4_FLOAT)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@508a49ad
                                                var var42 = massData.center.ojcVec2setojcVec2(massData.center,local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@781fe39b
                                                var var44 = var42.ojcVec2addLocalojcVec2(var42,local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@15b753cc
                                                var var46 = (local_5_FLOAT * density); // type is FLOAT value type is FLOAT
                                                massData.I = var46;
                                                var var47 = massData.I; // type is FLOAT value type is FLOAT
                                                var var48 = massData.mass; // type is FLOAT value type is FLOAT
                                                var var51 = ojcVec2.FLOATdotojcVec2ojcVec2(massData.center,massData.center); // type is FLOAT value type is FLOAT
                                                var var53 = (var47 + (var48 * var51)); // type is FLOAT value type is FLOAT
                                                massData.I = var53;
                                                return;
                                        }
                                }
                            }
                        case 60 :
                        // NORMAL
                            var var55 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@774d6dcf
                            var var58 = thisRef.m_vertices.data[local_7_INT]; // type is REFERENCE value type is REFERENCE
                            var var59 = var55.ojcVec2addLocalojcVec2(var55,var58); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@54c2772a
                            local_7_INT = (local_7_INT + 1); // type is INT value type is INT
                            __label__ = 51;
                            continue $L_51;
                    }
                }
        }
    },

    A1ojcVec2getVertices : function(thisRef) {
        var __label__ = null;
        return thisRef.m_vertices;
    },

    INTgetVertexCount : function(thisRef) {
        var __label__ = null;
        return thisRef.m_count;
    },

    classInitCheck : function() {
        if (!ojcsPolygonShape.__initialized) {
            ojcsPolygonShape.__initialized = true;
            var thePrototype = ojcsPolygonShape.Create.prototype;
            thePrototype.instanceOf = ojcsPolygonShape.instanceOf;
            thePrototype.ClassgetClass = ojcsPolygonShape.ClassgetClass;
            thePrototype.INTgetVertexCount = ojcsPolygonShape.INTgetVertexCount;
            thePrototype.A1ojcVec2getVertices = ojcsPolygonShape.A1ojcVec2getVertices;
            thePrototype.VOIDcomputeMassojcsMassDataFLOAT = ojcsPolygonShape.VOIDcomputeMassojcsMassDataFLOAT;
            thePrototype.VOIDcomputeAABBojcAABBojcTransformINT = ojcsPolygonShape.VOIDcomputeAABBojcAABBojcTransformINT;
            thePrototype.INTgetChildCount = ojcsPolygonShape.INTgetChildCount;
            thePrototype.ojcsShapeclone = ojcsPolygonShape.ojcsShapeclone;
            thePrototype.VOIDcomputeCentroidToOutA1ojcVec2INTojcVec2 = ojcsPolygonShape.VOIDcomputeCentroidToOutA1ojcVec2INTojcVec2;
            thePrototype.VOIDsetAsBoxFLOATFLOAT = ojcsPolygonShape.VOIDsetAsBoxFLOATFLOAT;
            thePrototype.VOIDsetA1ojcVec2INTojpaVec2ArrayojpaIntArray = ojcsPolygonShape.VOIDsetA1ojcVec2INTojpaVec2ArrayojpaIntArray;
            thePrototype.VOIDsetA1ojcVec2INT = ojcsPolygonShape.VOIDsetA1ojcVec2INT;
            thePrototype.ojcsShapeTypegetType = ojcsShape.ojcsShapeTypegetType;
            thePrototype.FLOATgetRadius = ojcsShape.FLOATgetRadius;
            thePrototype.VOIDsetRadiusFLOAT = ojcsShape.VOIDsetRadiusFLOAT;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojcsShape.classInitCheck();
            jlObject.classInitCheck();
            ojcsPolygonShape.VOIDclinit();
        }
    },

};

var ojpaIntArray = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 142,
    __implementedTypes : [1,142],
    $assertionsDisabled : false, // declared in org.jbox2d.pooling.arrays.IntArray

    Create : function() {
        this.map = null; // declared in org.jbox2d.pooling.arrays.IntArray
    },

    instanceOf : function(aType) {
        return ojpaIntArray.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojpaIntArray;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojpaIntArray.BOOLEANdesiredAssertionStatus(ojpaIntArray); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_9_13 : for(;;) switch (__label__) {
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_9_13;
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_9_13;
        }
        ojpaIntArray.$assertionsDisabled = var1;
        return;
    },

    A1INTgetINT : function(thisRef,argLength) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojpaIntArray.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 18;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_18_6 : for(;;) switch (__label__) {
            case 18 :
            // NORMAL
                $S_18 : {
                // NORMAL
                    var var2 = thisRef.map; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1c2609ef
                    var var3 = jlInteger.jlIntegervalueOfINT(argLength); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3e69f5d6
                    var var4 = var2.BOOLEANcontainsKeyjlObject(var2,var3); // type is BOOLEAN value type is BOOLEAN
                    if ((var4 != 0)) {
                        __label__ = 49;
                        break $S_18;
                    }
                    __label__ = 32;
                    }
                $M_32_49 : for(;;) switch (__label__) {
                    case 49 :
                    // NORMAL
                        $S_49 : {
                        // NORMAL
                            var var9 = ojpaIntArray.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                            if ((var9 != 0)) {
                                __label__ = 84;
                                break $S_49;
                            }
                            __label__ = 55;
                            }
                        $M_55_84 : for(;;) switch (__label__) {
                            case 55 :
                            // NORMAL
                                $S_55 : {
                                // NORMAL
                                    var var10 = thisRef.map; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5cb7e69d
                                    var var11 = jlInteger.jlIntegervalueOfINT(argLength); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6757a30e
                                    var var12 = var10.jlObjectgetjlObject(var10,var11); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4b12a77a
                                    var var13 = var12.data.length; // type is INT value type is INT
                                    if ((var13 == argLength)) {
                                        __label__ = 84;
                                        continue $M_55_84;
                                    }
                                    }
                                var var14 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                jlAssertionError.VOIDinitjlObject(var14,bytecoder.stringpool[34]);
                                throw var14;
                            case 84 :
                            // NORMAL
                                var var15 = thisRef.map; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3aa43c8b
                                var var16 = jlInteger.jlIntegervalueOfINT(argLength); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5944a64c
                                var var17 = var15.jlObjectgetjlObject(var15,var16); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@35121b9
                                return var17;
                        }
                    case 32 :
                    // NORMAL
                        var var5 = thisRef.map; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5d266fde
                        var var6 = jlInteger.jlIntegervalueOfINT(argLength); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@46fd5095
                        var var7 = thisRef.A1INTgetInitializedArrayINT(thisRef,argLength); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3a77e8c0
                        var var8 = var5.jlObjectputjlObjectjlObject(var5,var6,var7); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@30214ade
                        __label__ = 49;
                        continue $M_32_49;
                }
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    if ((argLength > 0)) {
                        __label__ = 18;
                        continue $M_18_6;
                    }
                    }
                var var1 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var1);
                throw var1;
        }
    },

    A1INTgetInitializedArrayINT : function(thisRef,argLength) {
        var __label__ = null;
        return bytecoder.newArray(argLength,0);
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = new juHashMap.Create(); // type is REFERENCE value type is REFERENCE
        juHashMap.VOIDinit(var0);
        thisRef.map = var0;
        return;
    },

    classInitCheck : function() {
        if (!ojpaIntArray.__initialized) {
            ojpaIntArray.__initialized = true;
            var thePrototype = ojpaIntArray.Create.prototype;
            thePrototype.instanceOf = ojpaIntArray.instanceOf;
            thePrototype.ClassgetClass = ojpaIntArray.ClassgetClass;
            thePrototype.A1INTgetInitializedArrayINT = ojpaIntArray.A1INTgetInitializedArrayINT;
            thePrototype.A1INTgetINT = ojpaIntArray.A1INTgetINT;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            ojpaIntArray.VOIDclinit();
        }
    },

};

var juHashMap$Node = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 143,
    __implementedTypes : [1,143,144],

    Create : function() {
        this.hash = 0; // declared in java.util.HashMap$Node
        this.key = null; // declared in java.util.HashMap$Node
        this.next = null; // declared in java.util.HashMap$Node
        this.value = null; // declared in java.util.HashMap$Node
    },

    instanceOf : function(aType) {
        return juHashMap$Node.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return juHashMap$Node;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitINTjlObjectjlObjectjuHashMap$Node : function(thisRef,hash,key,value,next) {
        var __label__ = null;
        thisRef.hash = hash;
        thisRef.key = key;
        thisRef.value = value;
        thisRef.next = next;
        return;
    },

    INThashCode : function(thisRef) {
        var __label__ = null;
        var var1 = juObjects.INThashCodejlObject(thisRef.key); // type is INT value type is INT
        var var3 = juObjects.INThashCodejlObject(thisRef.value); // type is INT value type is INT
        return (var1 ^ var3);
    },

    BOOLEANequalsjlObject : function(thisRef,o) {
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((o != thisRef)) {
                break $S_0;
            }
            return 1;
            }
        $S_7 : {
        // NORMAL
            var var0 = (o == null ? false : o.instanceOf(juMap$Entry)); // type is BOOLEAN value type is BOOLEAN
            if ((var0 == 0)) {
                return 0;
            }
            }
        $S_14 : {
        // NORMAL
            local_2_REFERENCE = o; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4cc032f5
            var var2 = thisRef.key; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@33701b56
            var var4 = local_2_REFERENCE.jlObjectgetKey(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3bf3c043
            var var5 = juObjects.BOOLEANequalsjlObjectjlObject(var2,var4); // type is BOOLEAN value type is BOOLEAN
            if ((var5 == 0)) {
                return 0;
            }
            }
        var var6 = thisRef.value; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@65812d1
        var var8 = local_2_REFERENCE.jlObjectgetValue(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2ed54e87
        var var9 = juObjects.BOOLEANequalsjlObjectjlObject(var6,var8); // type is BOOLEAN value type is BOOLEAN
        if ((var9 == 0)) {
            return 0;
        }
        return 1;
    },

    jlStringtoString : function(thisRef) {
        var __label__ = null;
        var var0 = new jlStringBuilder.Create(); // type is REFERENCE value type is REFERENCE
        jlStringBuilder.VOIDinit(var0);
        var var2 = var0.jlStringBuilderappendjlObject(var0,thisRef.key); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4c8b0cc5
        var var3 = var2.jlStringBuilderappendjlString(var2,bytecoder.stringpool[40]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@103fde7a
        var var5 = var3.jlStringBuilderappendjlObject(var3,thisRef.value); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3819fb26
        var var6 = var5.jlStringtoString(var5); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3b64f2d5
        return var6;
    },

    jlObjectgetKey : function(thisRef) {
        var __label__ = null;
        return thisRef.key;
    },

    jlObjectgetValue : function(thisRef) {
        var __label__ = null;
        return thisRef.value;
    },

    classInitCheck : function() {
        if (!juHashMap$Node.__initialized) {
            juHashMap$Node.__initialized = true;
            var thePrototype = juHashMap$Node.Create.prototype;
            thePrototype.instanceOf = juHashMap$Node.instanceOf;
            thePrototype.ClassgetClass = juHashMap$Node.ClassgetClass;
            thePrototype.jlObjectgetValue = juHashMap$Node.jlObjectgetValue;
            thePrototype.jlObjectgetKey = juHashMap$Node.jlObjectgetKey;
            thePrototype.jlStringtoString = juHashMap$Node.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = juHashMap$Node.BOOLEANequalsjlObject;
            thePrototype.INThashCode = juHashMap$Node.INThashCode;
            jlObject.classInitCheck();
            juMap$Entry.classInitCheck();
        }
    },

};

var juMap$Entry = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 144,
    __implementedTypes : [1,144],


    classInitCheck : function() {
        if (!juMap$Entry.__initialized) {
            juMap$Entry.__initialized = true;
            jlObject.classInitCheck();
        }
    },

};

var juHashMap$TreeNode = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 145,
    __implementedTypes : [1,146,145,143,144],
    $assertionsDisabled : false, // declared in java.util.HashMap$TreeNode

    Create : function() {
        this.hash = 0; // declared in java.util.HashMap$Node
        this.key = null; // declared in java.util.HashMap$Node
        this.next = null; // declared in java.util.HashMap$Node
        this.value = null; // declared in java.util.HashMap$Node
        this.parent = null; // declared in java.util.HashMap$TreeNode
        this.left = null; // declared in java.util.HashMap$TreeNode
        this.right = null; // declared in java.util.HashMap$TreeNode
        this.prev = null; // declared in java.util.HashMap$TreeNode
        this.red = false; // declared in java.util.HashMap$TreeNode
    },

    instanceOf : function(aType) {
        return juHashMap$TreeNode.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return juHashMap$TreeNode;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = juHashMap.BOOLEANdesiredAssertionStatus(juHashMap); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 12;
                break $S_0;
            }
            __label__ = 8;
            }
        $M_8_12 : for(;;) switch (__label__) {
            case 12 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_8_12;
            case 8 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_8_12;
        }
        juHashMap$TreeNode.$assertionsDisabled = var1;
        return;
    },

    juHashMap$TreeNodegetTreeNodeINTjlObject : function(thisRef,h,k) {
        var var2 = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.parent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@71cba9bf
            if (var0 == null ) {
                __label__ = 14;
                break $S_0;
            }
            __label__ = 7;
            }
        $M_7_14 : for(;;) switch (__label__) {
            case 7 :
            // NORMAL
                var var1 = thisRef.juHashMap$TreeNoderoot(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@58a4c9f2
                var2 = var1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@50176ed6
                break $M_7_14;
            case 14 :
            // NORMAL
                var2 = thisRef; // type is REFERENCE value type is REFERENCE
                break $M_7_14;
        }
        var var3 = var2.juHashMap$TreeNodefindINTjlObjectjlClass(var2,h,k,null); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2ee36ab7
        return var3;
    },

    juHashMap$TreeNoderoot : function(thisRef) {
        var local_1_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_1_REFERENCE = thisRef; // type is REFERENCE value type is REFERENCE
            __label__ = 2;
            }
        $L_2 : for (;;) {
            $S_2 : {
            // NORMAL
                var var2 = local_1_REFERENCE.parent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2d035e30
                local_2_REFERENCE = var2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@c2620e1
                if (var2 != null ) {
                    break $S_2;
                }
                return local_1_REFERENCE;
                }
            local_1_REFERENCE = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@c2620e1
            __label__ = 2;
            continue $L_2;
        }
    },

    juHashMap$TreeNodefindINTjlObjectjlClass : function(thisRef,h,k,kc) {
        var var29 = null; // type is REFERENCE # of inits = 2
        var local_5_INT = null; // type is INT # of inits = 1
        var local_9_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_8_REFERENCE = null; // type is REFERENCE # of inits = 1
        var var44 = null; // type is REFERENCE # of inits = 3
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 8
        var local_7_REFERENCE = null; // type is REFERENCE # of inits = 1
        var var22 = null; // type is REFERENCE # of inits = 2
        var local_6_INT = null; // type is INT # of inits = 1
        var var42 = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_4_REFERENCE = thisRef; // type is REFERENCE value type is REFERENCE
            __label__ = 3;
            }
        $L_3 : for (;;) {
            $S_3 : {
            // NORMAL
                local_8_REFERENCE = local_4_REFERENCE.left; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@222747b7
                local_9_REFERENCE = local_4_REFERENCE.right; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6ef0e792
                var var8 = local_4_REFERENCE.hash; // type is INT value type is INT
                local_5_INT = var8; // type is INT value type is INT
                if ((var8 <= h)) {
                    __label__ = 36;
                    break $S_3;
                }
                __label__ = 29;
                }
            $M_36_29 : for(;;) switch (__label__) {
                case 36 :
                // NORMAL
                    $S_36 : {
                    // NORMAL
                        var var11 = local_5_INT; // type is INT value type is INT
                        if ((var11 >= h)) {
                            __label__ = 49;
                            break $S_36;
                        }
                        __label__ = 42;
                        }
                    for(;;) switch (__label__) {
                        case 49 :
                        // NORMAL
                            $S_49 : {
                            // NORMAL
                                var var13 = local_4_REFERENCE.key; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2a4d3681
                                local_7_REFERENCE = var13; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@76ccf580
                                if ((var13 == k)) {
                                    return local_4_REFERENCE;
                                }
                                }
                            $S_61 : {
                            // NORMAL
                                if (k == null ) {
                                    __label__ = 77;
                                    break $S_61;
                                }
                                __label__ = 65;
                                }
                            $M_65_77 : for(;;) switch (__label__) {
                                case 77 :
                                // NORMAL
                                    $S_77 : {
                                    // NORMAL
                                        var var18 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3a0ed866
                                        if (var18 != null ) {
                                            __label__ = 89;
                                            break $S_77;
                                        }
                                        __label__ = 82;
                                        }
                                    for(;;) switch (__label__) {
                                        case 89 :
                                        // NORMAL
                                            $S_89 : {
                                            // NORMAL
                                                var var19 = local_9_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@119f606f
                                                if (var19 != null ) {
                                                    __label__ = 101;
                                                    break $S_89;
                                                }
                                                __label__ = 94;
                                                }
                                            for(;;) switch (__label__) {
                                                case 94 :
                                                // NORMAL
                                                    local_4_REFERENCE = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3a0ed866
                                                    var44 = kc; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7631b24f
                                                    break $M_36_29;
                                                case 101 :
                                                // NORMAL
                                                    $S_101 : {
                                                    // NORMAL
                                                        if (kc != null ) {
                                                            var22 = kc; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7631b24f
                                                            __label__ = 114;
                                                            break $S_101;
                                                        }
                                                        __label__ = 105;
                                                        }
                                                    $M_105_114 : for(;;) switch (__label__) {
                                                        case 105 :
                                                        // NORMAL
                                                            var var20 = juHashMap.jlClasscomparableClassForjlObject(k); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6f7d2c5b
                                                            var local_3_REFERENCE = var20; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3a4dced7
                                                            if (var20 == null ) {
                                                                var29 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3a4dced7
                                                                break $M_105_114;
                                                            }
                                                            var22 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3a4dced7
                                                            __label__ = 114;
                                                            continue $M_105_114;
                                                        case 114 :
                                                        // NORMAL
                                                            $S_114 : {
                                                            // NORMAL
                                                                var var25 = juHashMap.INTcompareComparablesjlClassjlObjectjlObject(var22,k,local_7_REFERENCE); // type is INT value type is INT
                                                                local_6_INT = var25; // type is INT value type is INT
                                                                if ((var25 == 0)) {
                                                                    var29 = var22; // type is REFERENCE value type is REFERENCE
                                                                    break $M_105_114;
                                                                }
                                                                }
                                                            $S_127 : {
                                                            // NORMAL
                                                                var var39 = local_6_INT; // type is INT value type is INT
                                                                if ((var39 >= 0)) {
                                                                    __label__ = 137;
                                                                    break $S_127;
                                                                }
                                                                __label__ = 132;
                                                                }
                                                            $M_132_137 : for(;;) switch (__label__) {
                                                                case 132 :
                                                                // NORMAL
                                                                    var42 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3a0ed866
                                                                    break $M_132_137;
                                                                case 137 :
                                                                // NORMAL
                                                                    var42 = local_9_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@119f606f
                                                                    break $M_132_137;
                                                            }
                                                            local_4_REFERENCE = var42; // type is REFERENCE value type is REFERENCE
                                                            var44 = var22; // type is REFERENCE value type is REFERENCE
                                                            break $M_36_29;
                                                    }
                                                    $S_144 : {
                                                    // NORMAL
                                                        var var31 = local_9_REFERENCE.juHashMap$TreeNodefindINTjlObjectjlClass(local_9_REFERENCE,h,k,var29); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@777fd4fc
                                                        var local_10_REFERENCE = var31; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@503b5de9
                                                        if (var31 == null ) {
                                                            break $S_144;
                                                        }
                                                        return local_10_REFERENCE;
                                                        }
                                                    local_4_REFERENCE = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3a0ed866
                                                    var44 = var29; // type is REFERENCE value type is REFERENCE
                                                    break $M_36_29;
                                            }
                                        case 82 :
                                        // NORMAL
                                            local_4_REFERENCE = local_9_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@119f606f
                                            var44 = kc; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7631b24f
                                            break $M_36_29;
                                    }
                                case 65 :
                                // NORMAL
                                    var var16 = k.BOOLEANequalsjlObject(k,local_7_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                    if ((var16 == 0)) {
                                        __label__ = 77;
                                        continue $M_65_77;
                                    }
                                    return local_4_REFERENCE;
                            }
                        case 42 :
                        // NORMAL
                            local_4_REFERENCE = local_9_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@119f606f
                            var44 = kc; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7631b24f
                            break $M_36_29;
                    }
                case 29 :
                // NORMAL
                    local_4_REFERENCE = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3a0ed866
                    var44 = kc; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7631b24f
                    break $M_36_29;
            }
            var var43 = local_4_REFERENCE; // type is REFERENCE value type is REFERENCE
            if (var43 != null ) {
                kc = var44; // type is REFERENCE value type is REFERENCE
                __label__ = 3;
                continue $L_3;
            }
            return null;
        }
    },

    VOIDsplitjuHashMapA1juHashMap$NodeINTINT : function(thisRef,map,tab,index,bit) {
        var local_8_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_10_INT = null; // type is INT # of inits = 3
        var local_13_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_12_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_11_INT = null; // type is INT # of inits = 3
        var local_7_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_9_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var local_5_REFERENCE = thisRef; // type is REFERENCE value type is REFERENCE
            local_6_REFERENCE = null; // type is REFERENCE value type is REFERENCE
            local_7_REFERENCE = null; // type is REFERENCE value type is REFERENCE
            local_8_REFERENCE = null; // type is REFERENCE value type is REFERENCE
            local_9_REFERENCE = null; // type is REFERENCE value type is REFERENCE
            local_10_INT = 0; // type is INT value type is INT
            local_11_INT = 0; // type is INT value type is INT
            local_12_REFERENCE = local_5_REFERENCE; // type is REFERENCE value type is REFERENCE
            __label__ = 25;
            }
        $L_25 : for (;;) {
            $S_25 : {
            // NORMAL
                var var11 = local_12_REFERENCE; // type is REFERENCE value type is REFERENCE
                if (var11 == null ) {
                    __label__ = 131;
                    break $S_25;
                }
                __label__ = 30;
                }
            for(;;) switch (__label__) {
                case 131 :
                // NORMAL
                    $S_131 : {
                    // NORMAL
                        var var32 = local_6_REFERENCE; // type is REFERENCE value type is REFERENCE
                        if (var32 == null ) {
                            __label__ = 171;
                            break $S_131;
                        }
                        __label__ = 136;
                        }
                    $M_136_171 : for(;;) switch (__label__) {
                        case 136 :
                        // NORMAL
                            $S_136 : {
                            // NORMAL
                                var var33 = local_10_INT; // type is INT value type is INT
                                if ((var33 > 6)) {
                                    __label__ = 155;
                                    break $S_136;
                                }
                                __label__ = 143;
                                }
                            for(;;) switch (__label__) {
                                case 155 :
                                // NORMAL
                                    $S_155 : {
                                    // NORMAL
                                        var var36 = local_6_REFERENCE; // type is REFERENCE value type is REFERENCE
                                        tab.data[index] = var36;
                                        var var37 = local_8_REFERENCE; // type is REFERENCE value type is REFERENCE
                                        if (var37 == null ) {
                                            __label__ = 171;
                                            continue $M_136_171;
                                        }
                                        }
                                    local_6_REFERENCE.VOIDtreeifyA1juHashMap$Node(local_6_REFERENCE,tab);
                                    __label__ = 171;
                                    continue $M_136_171;
                                case 143 :
                                // NORMAL
                                    var var35 = local_6_REFERENCE.juHashMap$NodeuntreeifyjuHashMap(local_6_REFERENCE,map); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@10db97d1
                                    tab.data[index] = var35;
                                    __label__ = 171;
                                    continue $M_136_171;
                            }
                        case 171 :
                        // NORMAL
                            $S_171 : {
                            // NORMAL
                                var var39 = local_8_REFERENCE; // type is REFERENCE value type is REFERENCE
                                if (var39 == null ) {
                                    return;
                                }
                                }
                            $S_176 : {
                            // NORMAL
                                var var40 = local_11_INT; // type is INT value type is INT
                                if ((var40 > 6)) {
                                    __label__ = 198;
                                    break $S_176;
                                }
                                __label__ = 183;
                                }
                            for(;;) switch (__label__) {
                                case 183 :
                                // NORMAL
                                    var var45 = (index + bit); // type is INT value type is INT
                                    var var47 = local_8_REFERENCE.juHashMap$NodeuntreeifyjuHashMap(local_8_REFERENCE,map); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@64ec4791
                                    tab.data[var45] = var47;
                                    return;
                                case 198 :
                                // NORMAL
                                    $S_198 : {
                                    // NORMAL
                                        var var41 = (index + bit); // type is INT value type is INT
                                        var var42 = local_8_REFERENCE; // type is REFERENCE value type is REFERENCE
                                        tab.data[var41] = var42;
                                        var var43 = local_6_REFERENCE; // type is REFERENCE value type is REFERENCE
                                        if (var43 == null ) {
                                            return;
                                        }
                                        }
                                    local_8_REFERENCE.VOIDtreeifyA1juHashMap$Node(local_8_REFERENCE,tab);
                                    return;
                            }
                    }
                case 30 :
                // NORMAL
                    $S_30 : {
                    // NORMAL
                        var var13 = local_12_REFERENCE.next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@569dc7cf
                        local_13_REFERENCE = var13; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3b8ca1f0
                        var var15 = local_12_REFERENCE; // type is REFERENCE value type is REFERENCE
                        var15.next = null;
                        var var18 = (local_12_REFERENCE.hash & bit); // type is INT value type is INT
                        if ((var18 != 0)) {
                            __label__ = 92;
                            break $S_30;
                        }
                        __label__ = 57;
                        }
                    $M_92_57 : for(;;) switch (__label__) {
                        case 57 :
                        // NORMAL
                            $S_57 : {
                            // NORMAL
                                var var19 = local_12_REFERENCE; // type is REFERENCE value type is REFERENCE
                                var var20 = local_7_REFERENCE; // type is REFERENCE value type is REFERENCE
                                var19.prev = var20;
                                if (var20 != null ) {
                                    __label__ = 75;
                                    break $S_57;
                                }
                                __label__ = 68;
                                }
                            $M_68_75 : for(;;) switch (__label__) {
                                case 68 :
                                // NORMAL
                                    local_6_REFERENCE = local_12_REFERENCE; // type is REFERENCE value type is REFERENCE
                                    break $M_68_75;
                                case 75 :
                                // NORMAL
                                    var var22 = local_7_REFERENCE; // type is REFERENCE value type is REFERENCE
                                    var var23 = local_12_REFERENCE; // type is REFERENCE value type is REFERENCE
                                    var22.next = var23;
                                    break $M_68_75;
                            }
                            local_7_REFERENCE = local_12_REFERENCE; // type is REFERENCE value type is REFERENCE
                            local_10_INT = (local_10_INT + 1); // type is INT value type is INT
                            break $M_92_57;
                        case 92 :
                        // NORMAL
                            $S_92 : {
                            // NORMAL
                                var var25 = local_12_REFERENCE; // type is REFERENCE value type is REFERENCE
                                var var26 = local_9_REFERENCE; // type is REFERENCE value type is REFERENCE
                                var25.prev = var26;
                                if (var26 != null ) {
                                    __label__ = 110;
                                    break $S_92;
                                }
                                __label__ = 103;
                                }
                            $M_103_110 : for(;;) switch (__label__) {
                                case 110 :
                                // NORMAL
                                    var var28 = local_9_REFERENCE; // type is REFERENCE value type is REFERENCE
                                    var var29 = local_12_REFERENCE; // type is REFERENCE value type is REFERENCE
                                    var28.next = var29;
                                    break $M_103_110;
                                case 103 :
                                // NORMAL
                                    local_8_REFERENCE = local_12_REFERENCE; // type is REFERENCE value type is REFERENCE
                                    break $M_103_110;
                            }
                            local_9_REFERENCE = local_12_REFERENCE; // type is REFERENCE value type is REFERENCE
                            local_11_INT = (local_11_INT + 1); // type is INT value type is INT
                            break $M_92_57;
                    }
                    local_12_REFERENCE = local_13_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3b8ca1f0
                    __label__ = 25;
                    continue $L_25;
            }
        }
    },

    juHashMap$NodeuntreeifyjuHashMap : function(thisRef,map) {
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_2_REFERENCE = null; // type is REFERENCE value type is REFERENCE
            local_3_REFERENCE = null; // type is REFERENCE value type is REFERENCE
            local_4_REFERENCE = thisRef; // type is REFERENCE value type is REFERENCE
            __label__ = 7;
            }
        $L_7 : for (;;) {
            $S_7 : {
            // NORMAL
                var var3 = local_4_REFERENCE; // type is REFERENCE value type is REFERENCE
                if (var3 == null ) {
                    return local_2_REFERENCE;
                }
                }
            $S_12 : {
            // NORMAL
                var var5 = map.juHashMap$NodereplacementNodejuHashMap$NodejuHashMap$Node(map,local_4_REFERENCE,null); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3d54b3c5
                local_5_REFERENCE = var5; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6ce4a9f9
                var var7 = local_3_REFERENCE; // type is REFERENCE value type is REFERENCE
                if (var7 != null ) {
                    __label__ = 31;
                    break $S_12;
                }
                __label__ = 25;
                }
            $M_25_31 : for(;;) switch (__label__) {
                case 31 :
                // NORMAL
                    var var9 = local_3_REFERENCE; // type is REFERENCE value type is REFERENCE
                    var var10 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6ce4a9f9
                    var9.next = var10;
                    break $M_25_31;
                case 25 :
                // NORMAL
                    local_2_REFERENCE = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6ce4a9f9
                    break $M_25_31;
            }
            local_3_REFERENCE = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6ce4a9f9
            local_4_REFERENCE = local_4_REFERENCE.next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3eed2354
            __label__ = 7;
            continue $L_7;
        }
    },

    VOIDtreeifyA1juHashMap$Node : function(thisRef,tab) {
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 4
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 2
        var var55 = null; // type is REFERENCE # of inits = 2
        var local_11_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_9_INT = null; // type is INT # of inits = 4
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 5
        var local_7_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_10_INT = null; // type is INT # of inits = 1
        var local_6_INT = null; // type is INT # of inits = 2
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_8_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_12_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_2_REFERENCE = null; // type is REFERENCE value type is REFERENCE
            local_3_REFERENCE = thisRef; // type is REFERENCE value type is REFERENCE
            __label__ = 4;
            }
        $L_4 : for (;;) {
            $S_4 : {
            // NORMAL
                var var2 = local_3_REFERENCE; // type is REFERENCE value type is REFERENCE
                if (var2 == null ) {
                    __label__ = 215;
                    break $S_4;
                }
                __label__ = 8;
                }
            for(;;) switch (__label__) {
                case 8 :
                // NORMAL
                    $S_8 : {
                    // NORMAL
                        var var5 = local_3_REFERENCE.next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5c3fc0c0
                        local_4_REFERENCE = var5; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7864f7d5
                        var var7 = local_3_REFERENCE; // type is REFERENCE value type is REFERENCE
                        var var8 = local_3_REFERENCE; // type is REFERENCE value type is REFERENCE
                        var8.right = null;
                        var7.left = null;
                        var var9 = local_2_REFERENCE; // type is REFERENCE value type is REFERENCE
                        if (var9 != null ) {
                            __label__ = 46;
                            break $S_8;
                        }
                        __label__ = 31;
                        }
                    $M_46_31 : for(;;) switch (__label__) {
                        case 31 :
                        // NORMAL
                            var var10 = local_3_REFERENCE; // type is REFERENCE value type is REFERENCE
                            var10.parent = null;
                            var var11 = local_3_REFERENCE; // type is REFERENCE value type is REFERENCE
                            var11.red = 0;
                            local_2_REFERENCE = local_3_REFERENCE; // type is REFERENCE value type is REFERENCE
                            break $M_46_31;
                        case 46 :
                        // NORMAL
                            $S_46 : {
                            // NORMAL
                                local_5_REFERENCE = local_3_REFERENCE.key; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@75419818
                                local_6_INT = local_3_REFERENCE.hash; // type is INT value type is INT
                                local_7_REFERENCE = null; // type is REFERENCE value type is REFERENCE
                                local_8_REFERENCE = local_2_REFERENCE; // type is REFERENCE value type is REFERENCE
                                __label__ = 64;
                                }
                            $L_64 : for (;;) {
                                $S_64 : {
                                // NORMAL
                                    local_11_REFERENCE = local_8_REFERENCE.key; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@640930ad
                                    var var27 = local_8_REFERENCE.hash; // type is INT value type is INT
                                    local_10_INT = var27; // type is INT value type is INT
                                    var var30 = local_6_INT; // type is INT value type is INT
                                    if ((var27 <= var30)) {
                                        __label__ = 90;
                                        break $S_64;
                                    }
                                    __label__ = 84;
                                    }
                                $M_90_84 : for(;;) switch (__label__) {
                                    case 84 :
                                    // NORMAL
                                        local_9_INT = -1; // type is INT value type is INT
                                        break $M_90_84;
                                    case 90 :
                                    // NORMAL
                                        $S_90 : {
                                        // NORMAL
                                            var var33 = local_10_INT; // type is INT value type is INT
                                            var var34 = local_6_INT; // type is INT value type is INT
                                            if ((var33 >= var34)) {
                                                __label__ = 103;
                                                break $S_90;
                                            }
                                            __label__ = 97;
                                            }
                                        for(;;) switch (__label__) {
                                            case 97 :
                                            // NORMAL
                                                local_9_INT = 1; // type is INT value type is INT
                                                break $M_90_84;
                                            case 103 :
                                            // NORMAL
                                                $S_103 : {
                                                // NORMAL
                                                    var var35 = local_7_REFERENCE; // type is REFERENCE value type is REFERENCE
                                                    if (var35 != null ) {
                                                        __label__ = 119;
                                                        break $S_103;
                                                    }
                                                    __label__ = 108;
                                                    }
                                                $M_119_108 : for(;;) switch (__label__) {
                                                    case 119 :
                                                    // NORMAL
                                                        var var41 = juHashMap.INTcompareComparablesjlClassjlObjectjlObject(local_7_REFERENCE,local_5_REFERENCE,local_11_REFERENCE); // type is INT value type is INT
                                                        local_9_INT = var41; // type is INT value type is INT
                                                        if ((var41 != 0)) {
                                                            break $M_90_84;
                                                        }
                                                        break $M_119_108;
                                                    case 108 :
                                                    // NORMAL
                                                        var var37 = juHashMap.jlClasscomparableClassForjlObject(local_5_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@44b12eac
                                                        local_7_REFERENCE = var37; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@57d58110
                                                        if (var37 == null ) {
                                                            break $M_119_108;
                                                        }
                                                        __label__ = 119;
                                                        continue $M_119_108;
                                                }
                                                var var46 = juHashMap$TreeNode.INTtieBreakOrderjlObjectjlObject(local_5_REFERENCE,local_11_REFERENCE); // type is INT value type is INT
                                                local_9_INT = var46; // type is INT value type is INT
                                                break $M_90_84;
                                        }
                                }
                                $S_143 : {
                                // NORMAL
                                    local_12_REFERENCE = local_8_REFERENCE; // type is REFERENCE value type is REFERENCE
                                    var var50 = local_9_INT; // type is INT value type is INT
                                    if ((var50 > 0)) {
                                        __label__ = 160;
                                        break $S_143;
                                    }
                                    __label__ = 152;
                                    }
                                $M_152_160 : for(;;) switch (__label__) {
                                    case 160 :
                                    // NORMAL
                                        var55 = local_8_REFERENCE.right; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@66aacf3a
                                        break $M_152_160;
                                    case 152 :
                                    // NORMAL
                                        var55 = local_8_REFERENCE.left; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1fd20aaf
                                        break $M_152_160;
                                }
                                $S_165 : {
                                // NORMAL
                                    local_8_REFERENCE = var55; // type is REFERENCE value type is REFERENCE
                                    if (var55 != null ) {
                                        __label__ = 206;
                                        break $S_165;
                                    }
                                    __label__ = 171;
                                    }
                                for(;;) switch (__label__) {
                                    case 206 :
                                    // NORMAL
                                        __label__ = 64;
                                        continue $L_64;
                                    case 171 :
                                    // NORMAL
                                        $S_171 : {
                                        // NORMAL
                                            var var56 = local_3_REFERENCE; // type is REFERENCE value type is REFERENCE
                                            var var57 = local_12_REFERENCE; // type is REFERENCE value type is REFERENCE
                                            var56.parent = var57;
                                            var var58 = local_9_INT; // type is INT value type is INT
                                            if ((var58 > 0)) {
                                                __label__ = 191;
                                                break $S_171;
                                            }
                                            __label__ = 182;
                                            }
                                        $M_182_191 : for(;;) switch (__label__) {
                                            case 191 :
                                            // NORMAL
                                                var var61 = local_12_REFERENCE; // type is REFERENCE value type is REFERENCE
                                                var var62 = local_3_REFERENCE; // type is REFERENCE value type is REFERENCE
                                                var61.right = var62;
                                                break $M_182_191;
                                            case 182 :
                                            // NORMAL
                                                var var59 = local_12_REFERENCE; // type is REFERENCE value type is REFERENCE
                                                var var60 = local_3_REFERENCE; // type is REFERENCE value type is REFERENCE
                                                var59.left = var60;
                                                break $M_182_191;
                                        }
                                        var var65 = juHashMap$TreeNode.juHashMap$TreeNodebalanceInsertionjuHashMap$TreeNodejuHashMap$TreeNode(local_2_REFERENCE,local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@32f3dda0
                                        local_2_REFERENCE = var65; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7eb49e61
                                        break $M_46_31;
                                }
                            }
                    }
                    local_3_REFERENCE = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7864f7d5
                    __label__ = 4;
                    continue $L_4;
                case 215 :
                // NORMAL
                    juHashMap$TreeNode.VOIDmoveRootToFrontA1juHashMap$NodejuHashMap$TreeNode(tab,local_2_REFERENCE);
                    return;
            }
        }
    },

    INTtieBreakOrderjlObjectjlObject : function(a,b) {
        var var9 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if (a == null ) {
                __label__ = 30;
                break $S_0;
            }
            __label__ = 4;
            }
        $M_4_30 : for(;;) switch (__label__) {
            case 30 :
            // NORMAL
                $S_30 : {
                // NORMAL
                    var var7 = jlSystem.INTidentityHashCodejlObject(a); // type is INT value type is INT
                    var var8 = jlSystem.INTidentityHashCodejlObject(b); // type is INT value type is INT
                    if ((var7 > var8)) {
                        __label__ = 45;
                        break $S_30;
                    }
                    __label__ = 41;
                    }
                $M_41_45 : for(;;) switch (__label__) {
                    case 41 :
                    // NORMAL
                        var9 = -1; // type is INT value type is INT
                        break $M_41_45;
                    case 45 :
                    // NORMAL
                        var9 = 1; // type is INT value type is INT
                        break $M_41_45;
                }
                var local_2_INT = var9; // type is INT value type is INT
                return local_2_INT;
            case 4 :
            // NORMAL
                $S_4 : {
                // NORMAL
                    if (b == null ) {
                        __label__ = 30;
                        continue $M_4_30;
                    }
                    }
                var var1 = a.ClassgetClass().jlStringgetName(a.ClassgetClass()); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@75a809ae
                var var3 = b.ClassgetClass().jlStringgetName(b.ClassgetClass()); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@563ed6eb
                var var4 = var1.INTcompareTojlString(var1,var3); // type is INT value type is INT
                var local_2_INT = var4; // type is INT value type is INT
                if ((var4 != 0)) {
                    return local_2_INT;
                }
                __label__ = 30;
                continue $M_4_30;
        }
    },

    juHashMap$TreeNodebalanceInsertionjuHashMap$TreeNodejuHashMap$TreeNode : function(root,x) {
        var var50 = null; // type is REFERENCE # of inits = 2
        var local_0_REFERENCE = null; // type is REFERENCE # of inits = 4
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 1
        var var35 = null; // type is REFERENCE # of inits = 2
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 3
        var var30 = null; // type is REFERENCE # of inits = 2
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var var55 = null; // type is REFERENCE # of inits = 2
        var var63 = null; // type is REFERENCE # of inits = 2
        var var64 = null; // type is REFERENCE # of inits = 2
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_1_REFERENCE = null; // type is REFERENCE # of inits = 4
        var __label__ = null;
        $S_0 : {
        // NORMAL
            x.red = 1;
            __label__ = 5;
            }
        $L_5 : for (;;) {
            $S_5 : {
            // NORMAL
                var var0 = x.parent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3d6ed660
                local_2_REFERENCE = var0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3a20623e
                if (var0 != null ) {
                    __label__ = 21;
                    break $S_5;
                }
                __label__ = 14;
                }
            for(;;) switch (__label__) {
                case 21 :
                // NORMAL
                    $S_21 : {
                    // NORMAL
                        var var3 = local_2_REFERENCE.red; // type is BOOLEAN value type is BOOLEAN
                        if ((var3 == 0)) {
                            return root;
                        }
                        }
                    $S_28 : {
                    // NORMAL
                        var var5 = local_2_REFERENCE.parent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1267df4b
                        local_3_REFERENCE = var5; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@659a5655
                        if (var5 != null ) {
                            break $S_28;
                        }
                        return root;
                        }
                    $S_39 : {
                    // NORMAL
                        var var7 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3a20623e
                        var var9 = local_3_REFERENCE.left; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@28964710
                        local_4_REFERENCE = var9; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7ecc215
                        if ((var7 != var9)) {
                            __label__ = 150;
                            break $S_39;
                        }
                        __label__ = 50;
                        }
                    for(;;) switch (__label__) {
                        case 50 :
                        // NORMAL
                            $S_50 : {
                            // NORMAL
                                var var12 = local_3_REFERENCE.right; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@53bdede6
                                local_5_REFERENCE = var12; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3ee47144
                                if (var12 == null ) {
                                    __label__ = 89;
                                    break $S_50;
                                }
                                __label__ = 60;
                                }
                            $M_89_60 : for(;;) switch (__label__) {
                                case 89 :
                                // NORMAL
                                    $S_89 : {
                                    // NORMAL
                                        var var22 = local_2_REFERENCE.right; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@182bfc27
                                        if ((x != var22)) {
                                            var35 = root; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@304df505
                                            var63 = x; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@204b45d3
                                            __label__ = 123;
                                            break $S_89;
                                        }
                                        __label__ = 97;
                                        }
                                    $M_123_97 : for(;;) switch (__label__) {
                                        case 123 :
                                        // NORMAL
                                            $S_123 : {
                                            // NORMAL
                                                var var31 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3a20623e
                                                if (var31 == null ) {
                                                    root = var35; // type is REFERENCE value type is REFERENCE
                                                    x = var63; // type is REFERENCE value type is REFERENCE
                                                    __label__ = 5;
                                                    continue $L_5;
                                                }
                                                }
                                            $S_127 : {
                                            // NORMAL
                                                var var32 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3a20623e
                                                var32.red = 0;
                                                var var33 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@659a5655
                                                if (var33 == null ) {
                                                    root = var35; // type is REFERENCE value type is REFERENCE
                                                    x = var63; // type is REFERENCE value type is REFERENCE
                                                    __label__ = 5;
                                                    continue $L_5;
                                                }
                                                }
                                            var var34 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@659a5655
                                            var34.red = 1;
                                            var var38 = juHashMap$TreeNode.juHashMap$TreeNoderotateRightjuHashMap$TreeNodejuHashMap$TreeNode(var35,local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@349af5ee
                                            local_0_REFERENCE = var38; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@80535f8
                                            root = local_0_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4d0eeee5
                                            x = var63; // type is REFERENCE value type is REFERENCE
                                            __label__ = 5;
                                            continue $L_5;
                                        case 97 :
                                        // NORMAL
                                            $S_97 : {
                                            // NORMAL
                                                var var23 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3a20623e
                                                local_1_REFERENCE = var23; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3a20623e
                                                var var24 = juHashMap$TreeNode.juHashMap$TreeNoderotateLeftjuHashMap$TreeNodejuHashMap$TreeNode(root,var23); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2eae8aaa
                                                local_0_REFERENCE = var24; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4d0eeee5
                                                var var27 = local_1_REFERENCE.parent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@12408044
                                                local_2_REFERENCE = var27; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@e3da59
                                                if (var27 != null ) {
                                                    __label__ = 118;
                                                    break $S_97;
                                                }
                                                __label__ = 114;
                                                }
                                            $M_118_114 : for(;;) switch (__label__) {
                                                case 118 :
                                                // NORMAL
                                                    var30 = local_2_REFERENCE.parent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@554d8cef
                                                    break $M_118_114;
                                                case 114 :
                                                // NORMAL
                                                    var30 = null; // type is REFERENCE value type is REFERENCE
                                                    break $M_118_114;
                                            }
                                            local_3_REFERENCE = var30; // type is REFERENCE value type is REFERENCE
                                            var35 = local_0_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4d0eeee5
                                            var63 = local_1_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@659a5655
                                            __label__ = 123;
                                            continue $M_123_97;
                                    }
                                case 60 :
                                // NORMAL
                                    $S_60 : {
                                    // NORMAL
                                        var var15 = local_5_REFERENCE.red; // type is BOOLEAN value type is BOOLEAN
                                        if ((var15 == 0)) {
                                            __label__ = 89;
                                            continue $M_89_60;
                                        }
                                        }
                                    var var16 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3ee47144
                                    var16.red = 0;
                                    var var17 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3a20623e
                                    var17.red = 0;
                                    var var18 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@659a5655
                                    var18.red = 1;
                                    local_1_REFERENCE = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@659a5655
                                    x = local_1_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@659a5655
                                    __label__ = 5;
                                    continue $L_5;
                            }
                        case 150 :
                        // NORMAL
                            $S_150 : {
                            // NORMAL
                                var var39 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7ecc215
                                if (var39 == null ) {
                                    __label__ = 184;
                                    break $S_150;
                                }
                                __label__ = 155;
                                }
                            $M_184_155 : for(;;) switch (__label__) {
                                case 155 :
                                // NORMAL
                                    $S_155 : {
                                    // NORMAL
                                        var var41 = local_4_REFERENCE.red; // type is BOOLEAN value type is BOOLEAN
                                        if ((var41 == 0)) {
                                            __label__ = 184;
                                            continue $M_184_155;
                                        }
                                        }
                                    var var59 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7ecc215
                                    var59.red = 0;
                                    var var60 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3a20623e
                                    var60.red = 0;
                                    var var61 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@659a5655
                                    var61.red = 1;
                                    local_1_REFERENCE = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@659a5655
                                    x = local_1_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@659a5655
                                    __label__ = 5;
                                    continue $L_5;
                                case 184 :
                                // NORMAL
                                    $S_184 : {
                                    // NORMAL
                                        var var43 = local_2_REFERENCE.left; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@361b262d
                                        if ((x != var43)) {
                                            var55 = root; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@304df505
                                            var64 = x; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@204b45d3
                                            __label__ = 218;
                                            break $S_184;
                                        }
                                        __label__ = 192;
                                        }
                                    $M_218_192 : for(;;) switch (__label__) {
                                        case 192 :
                                        // NORMAL
                                            $S_192 : {
                                            // NORMAL
                                                var var44 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3a20623e
                                                local_1_REFERENCE = var44; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3a20623e
                                                var var45 = juHashMap$TreeNode.juHashMap$TreeNoderotateRightjuHashMap$TreeNodejuHashMap$TreeNode(root,var44); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6cba119e
                                                local_0_REFERENCE = var45; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6918b287
                                                var var47 = local_1_REFERENCE.parent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7aeeeeed
                                                local_2_REFERENCE = var47; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@307312b0
                                                if (var47 != null ) {
                                                    __label__ = 213;
                                                    break $S_192;
                                                }
                                                __label__ = 209;
                                                }
                                            $M_209_213 : for(;;) switch (__label__) {
                                                case 209 :
                                                // NORMAL
                                                    var50 = null; // type is REFERENCE value type is REFERENCE
                                                    break $M_209_213;
                                                case 213 :
                                                // NORMAL
                                                    var50 = local_2_REFERENCE.parent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@437d2fab
                                                    break $M_209_213;
                                            }
                                            local_3_REFERENCE = var50; // type is REFERENCE value type is REFERENCE
                                            var55 = local_0_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4d0eeee5
                                            var64 = local_1_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@659a5655
                                            __label__ = 218;
                                            continue $M_218_192;
                                        case 218 :
                                        // NORMAL
                                            $S_218 : {
                                            // NORMAL
                                                var var51 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3a20623e
                                                if (var51 == null ) {
                                                    root = var55; // type is REFERENCE value type is REFERENCE
                                                    x = var64; // type is REFERENCE value type is REFERENCE
                                                    __label__ = 5;
                                                    continue $L_5;
                                                }
                                                }
                                            $S_222 : {
                                            // NORMAL
                                                var var52 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3a20623e
                                                var52.red = 0;
                                                var var53 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@659a5655
                                                if (var53 == null ) {
                                                    root = var55; // type is REFERENCE value type is REFERENCE
                                                    x = var64; // type is REFERENCE value type is REFERENCE
                                                    __label__ = 5;
                                                    continue $L_5;
                                                }
                                                }
                                            var var54 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@659a5655
                                            var54.red = 1;
                                            var var58 = juHashMap$TreeNode.juHashMap$TreeNoderotateLeftjuHashMap$TreeNodejuHashMap$TreeNode(var55,local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2c3843a7
                                            local_0_REFERENCE = var58; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@74eb80b1
                                            root = local_0_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4d0eeee5
                                            x = var64; // type is REFERENCE value type is REFERENCE
                                            __label__ = 5;
                                            continue $L_5;
                                    }
                            }
                    }
                case 14 :
                // NORMAL
                    x.red = 0;
                    return x;
            }
        }
    },

    juHashMap$TreeNoderotateLeftjuHashMap$TreeNodejuHashMap$TreeNode : function(root,p) {
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var var19 = null; // type is REFERENCE # of inits = 2
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if (p == null ) {
                var var20 = root; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@10b7d6b4
                return var20;
            }
            }
        $S_4 : {
        // NORMAL
            var var0 = p.right; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5dba86fa
            local_2_REFERENCE = var0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@648f4803
            if (var0 == null ) {
                var var20 = root; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@10b7d6b4
                return var20;
            }
            }
        $S_13 : {
        // NORMAL
            var var3 = local_2_REFERENCE.left; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7a16b523
            p.right = var3;
            local_4_REFERENCE = var3; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4a232050
            if (var3 == null ) {
                __label__ = 34;
                break $S_13;
            }
            __label__ = 28;
            }
        $M_28_34 : for(;;) switch (__label__) {
            case 28 :
            // NORMAL
                var var5 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4a232050
                var5.parent = p;
                __label__ = 34;
                continue $M_28_34;
            case 34 :
            // NORMAL
                $S_34 : {
                // NORMAL
                    var var6 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@648f4803
                    var var7 = p.parent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2bbbb91d
                    var6.parent = var7;
                    local_3_REFERENCE = var7; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6f548541
                    if (var7 != null ) {
                        __label__ = 58;
                        break $S_34;
                    }
                    __label__ = 48;
                    }
                $M_48_58 : for(;;) switch (__label__) {
                    case 58 :
                    // NORMAL
                        $S_58 : {
                        // NORMAL
                            var var10 = local_3_REFERENCE.left; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2ec6a8f0
                            if ((var10 != p)) {
                                __label__ = 74;
                                break $S_58;
                            }
                            __label__ = 66;
                            }
                        for(;;) switch (__label__) {
                            case 66 :
                            // NORMAL
                                var var15 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6f548541
                                var var16 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@648f4803
                                var15.left = var16;
                                var19 = root; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@10b7d6b4
                                break $M_48_58;
                            case 74 :
                            // NORMAL
                                var var11 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6f548541
                                var var12 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@648f4803
                                var11.right = var12;
                                var19 = root; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@10b7d6b4
                                break $M_48_58;
                        }
                    case 48 :
                    // NORMAL
                        var var13 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@648f4803
                        var local_0_REFERENCE = var13; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@648f4803
                        var13.red = 0;
                        var19 = local_0_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@648f4803
                        break $M_48_58;
                }
                var var17 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@648f4803
                var17.left = p;
                var var18 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@648f4803
                p.parent = var18;
                var var20 = var19; // type is REFERENCE value type is REFERENCE
                return var20;
        }
    },

    juHashMap$TreeNoderotateRightjuHashMap$TreeNodejuHashMap$TreeNode : function(root,p) {
        var var19 = null; // type is REFERENCE # of inits = 2
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if (p == null ) {
                var var20 = root; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@310e9cb0
                return var20;
            }
            }
        $S_4 : {
        // NORMAL
            var var0 = p.left; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3ecc8823
            local_2_REFERENCE = var0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5ffb742e
            if (var0 == null ) {
                var var20 = root; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@310e9cb0
                return var20;
            }
            }
        $S_13 : {
        // NORMAL
            var var3 = local_2_REFERENCE.right; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@25a47605
            p.left = var3;
            local_4_REFERENCE = var3; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1ad5987d
            if (var3 == null ) {
                __label__ = 34;
                break $S_13;
            }
            __label__ = 28;
            }
        $M_34_28 : for(;;) switch (__label__) {
            case 28 :
            // NORMAL
                var var5 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1ad5987d
                var5.parent = p;
                __label__ = 34;
                continue $M_34_28;
            case 34 :
            // NORMAL
                $S_34 : {
                // NORMAL
                    var var6 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5ffb742e
                    var var7 = p.parent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2090555b
                    var6.parent = var7;
                    local_3_REFERENCE = var7; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@44f90171
                    if (var7 != null ) {
                        __label__ = 58;
                        break $S_34;
                    }
                    __label__ = 48;
                    }
                $M_58_48 : for(;;) switch (__label__) {
                    case 58 :
                    // NORMAL
                        $S_58 : {
                        // NORMAL
                            var var10 = local_3_REFERENCE.right; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@74b61297
                            if ((var10 != p)) {
                                __label__ = 74;
                                break $S_58;
                            }
                            __label__ = 66;
                            }
                        for(;;) switch (__label__) {
                            case 74 :
                            // NORMAL
                                var var11 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@44f90171
                                var var12 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5ffb742e
                                var11.left = var12;
                                var19 = root; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@310e9cb0
                                break $M_58_48;
                            case 66 :
                            // NORMAL
                                var var15 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@44f90171
                                var var16 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5ffb742e
                                var15.right = var16;
                                var19 = root; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@310e9cb0
                                break $M_58_48;
                        }
                    case 48 :
                    // NORMAL
                        var var13 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5ffb742e
                        var local_0_REFERENCE = var13; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5ffb742e
                        var13.red = 0;
                        var19 = local_0_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5ffb742e
                        break $M_58_48;
                }
                var var17 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5ffb742e
                var17.right = p;
                var var18 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5ffb742e
                p.parent = var18;
                var var20 = var19; // type is REFERENCE value type is REFERENCE
                return var20;
        }
    },

    VOIDmoveRootToFrontA1juHashMap$NodejuHashMap$TreeNode : function(tab,root) {
        var local_3_INT = null; // type is INT # of inits = 1
        var local_2_INT = null; // type is INT # of inits = 1
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if (root == null ) {
                return;
            }
            }
        $S_4 : {
        // NORMAL
            if (tab == null ) {
                return;
            }
            }
        $S_8 : {
        // NORMAL
            var var0 = tab.data.length; // type is INT value type is INT
            local_2_INT = var0; // type is INT value type is INT
            if ((var0 <= 0)) {
                return;
            }
            }
        $S_15 : {
        // NORMAL
            local_3_INT = ((local_2_INT - 1) & root.hash); // type is INT value type is INT
            var var10 = tab.data[local_3_INT]; // type is REFERENCE value type is REFERENCE
            local_4_REFERENCE = var10; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@24e4288e
            var var12 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@24e4288e
            if ((root == var12)) {
                __label__ = 102;
                break $S_15;
            }
            __label__ = 38;
            }
        $M_38_102 : for(;;) switch (__label__) {
            case 38 :
            // NORMAL
                $S_38 : {
                // NORMAL
                    var var13 = local_3_INT; // type is INT value type is INT
                    tab.data[var13] = root;
                    local_6_REFERENCE = root.prev; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@512c165
                    var var16 = root.next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@b240dd2
                    local_5_REFERENCE = var16; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1e5cb409
                    if (var16 == null ) {
                        __label__ = 68;
                        break $S_38;
                    }
                    __label__ = 58;
                    }
                $M_68_58 : for(;;) switch (__label__) {
                    case 58 :
                    // NORMAL
                        var var18 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1e5cb409
                        var var19 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@79518f57
                        var18.prev = var19;
                        __label__ = 68;
                        continue $M_68_58;
                    case 68 :
                    // NORMAL
                        $S_68 : {
                        // NORMAL
                            var var20 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@79518f57
                            if (var20 == null ) {
                                __label__ = 80;
                                break $S_68;
                            }
                            __label__ = 73;
                            }
                        $M_73_80 : for(;;) switch (__label__) {
                            case 73 :
                            // NORMAL
                                var var21 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@79518f57
                                var var22 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1e5cb409
                                var21.next = var22;
                                __label__ = 80;
                                continue $M_73_80;
                            case 80 :
                            // NORMAL
                                $S_80 : {
                                // NORMAL
                                    var var23 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@24e4288e
                                    if (var23 == null ) {
                                        __label__ = 91;
                                        break $S_80;
                                    }
                                    __label__ = 85;
                                    }
                                $M_85_91 : for(;;) switch (__label__) {
                                    case 91 :
                                    // NORMAL
                                        var var25 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@24e4288e
                                        root.next = var25;
                                        root.prev = null;
                                        __label__ = 102;
                                        continue $M_38_102;
                                    case 85 :
                                    // NORMAL
                                        var var24 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@24e4288e
                                        var24.prev = root;
                                        __label__ = 91;
                                        continue $M_85_91;
                                }
                        }
                }
            case 102 :
            // NORMAL
                $S_102 : {
                // NORMAL
                    var var26 = juHashMap$TreeNode.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                    if ((var26 != 0)) {
                        return;
                    }
                    }
                $S_108 : {
                // NORMAL
                    var var27 = juHashMap$TreeNode.BOOLEANcheckInvariantsjuHashMap$TreeNode(root); // type is BOOLEAN value type is BOOLEAN
                    if ((var27 != 0)) {
                        return;
                    }
                    }
                var var28 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var28);
                throw var28;
        }
    },

    BOOLEANcheckInvariantsjuHashMap$TreeNode : function(t) {
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_1_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_1_REFERENCE = t.parent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@13eb92a6
            local_2_REFERENCE = t.left; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6445f22f
            local_3_REFERENCE = t.right; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7f0dd572
            local_4_REFERENCE = t.prev; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@52e79be7
            var var8 = t.next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1d565dbf
            local_5_REFERENCE = var8; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@103bb17f
            var var10 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@63691ff6
            if (var10 == null ) {
                __label__ = 46;
                break $S_0;
            }
            __label__ = 35;
            }
        $M_35_46 : for(;;) switch (__label__) {
            case 46 :
            // NORMAL
                $S_46 : {
                // NORMAL
                    var var13 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@103bb17f
                    if (var13 == null ) {
                        __label__ = 62;
                        break $S_46;
                    }
                    __label__ = 51;
                    }
                $M_51_62 : for(;;) switch (__label__) {
                    case 51 :
                    // NORMAL
                        var var15 = local_5_REFERENCE.prev; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@564900b0
                        if ((var15 == t)) {
                            __label__ = 62;
                            continue $M_51_62;
                        }
                        return 0;
                    case 62 :
                    // NORMAL
                        $S_62 : {
                        // NORMAL
                            var var16 = local_1_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3b090513
                            if (var16 == null ) {
                                __label__ = 84;
                                break $S_62;
                            }
                            __label__ = 66;
                            }
                        $M_66_84 : for(;;) switch (__label__) {
                            case 66 :
                            // NORMAL
                                $S_66 : {
                                // NORMAL
                                    var var18 = local_1_REFERENCE.left; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@477ef94e
                                    if ((t == var18)) {
                                        __label__ = 84;
                                        continue $M_66_84;
                                    }
                                    }
                                var var20 = local_1_REFERENCE.right; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@29a86ae5
                                if ((t == var20)) {
                                    __label__ = 84;
                                    continue $M_66_84;
                                }
                                return 0;
                            case 84 :
                            // NORMAL
                                $S_84 : {
                                // NORMAL
                                    var var21 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2a707548
                                    if (var21 == null ) {
                                        __label__ = 109;
                                        break $S_84;
                                    }
                                    __label__ = 88;
                                    }
                                $M_109_88 : for(;;) switch (__label__) {
                                    case 88 :
                                    // NORMAL
                                        $S_88 : {
                                        // NORMAL
                                            var var23 = local_2_REFERENCE.parent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6bc61ca
                                            if ((var23 != t)) {
                                                return 0;
                                            }
                                            }
                                        var var25 = local_2_REFERENCE.hash; // type is INT value type is INT
                                        var var26 = t.hash; // type is INT value type is INT
                                        if ((var25 <= var26)) {
                                            __label__ = 109;
                                            continue $M_109_88;
                                        }
                                        return 0;
                                    case 109 :
                                    // NORMAL
                                        $S_109 : {
                                        // NORMAL
                                            var var27 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6e863b59
                                            if (var27 == null ) {
                                                __label__ = 134;
                                                break $S_109;
                                            }
                                            __label__ = 113;
                                            }
                                        $M_134_113 : for(;;) switch (__label__) {
                                            case 134 :
                                            // NORMAL
                                                $S_134 : {
                                                // NORMAL
                                                    var var33 = t.red; // type is BOOLEAN value type is BOOLEAN
                                                    if ((var33 == 0)) {
                                                        __label__ = 165;
                                                        break $S_134;
                                                    }
                                                    __label__ = 141;
                                                    }
                                                $M_165_141 : for(;;) switch (__label__) {
                                                    case 141 :
                                                    // NORMAL
                                                        $S_141 : {
                                                        // NORMAL
                                                            var var34 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2a707548
                                                            if (var34 == null ) {
                                                                __label__ = 165;
                                                                continue $M_165_141;
                                                            }
                                                            }
                                                        $S_145 : {
                                                        // NORMAL
                                                            var var36 = local_2_REFERENCE.red; // type is BOOLEAN value type is BOOLEAN
                                                            if ((var36 == 0)) {
                                                                __label__ = 165;
                                                                continue $M_165_141;
                                                            }
                                                            }
                                                        $S_152 : {
                                                        // NORMAL
                                                            var var37 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6e863b59
                                                            if (var37 == null ) {
                                                                __label__ = 165;
                                                                continue $M_165_141;
                                                            }
                                                            }
                                                        var var39 = local_3_REFERENCE.red; // type is BOOLEAN value type is BOOLEAN
                                                        if ((var39 == 0)) {
                                                            __label__ = 165;
                                                            continue $M_165_141;
                                                        }
                                                        return 0;
                                                    case 165 :
                                                    // NORMAL
                                                        $S_165 : {
                                                        // NORMAL
                                                            var var40 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2a707548
                                                            if (var40 == null ) {
                                                                __label__ = 178;
                                                                break $S_165;
                                                            }
                                                            __label__ = 169;
                                                            }
                                                        $M_169_178 : for(;;) switch (__label__) {
                                                            case 178 :
                                                            // NORMAL
                                                                $S_178 : {
                                                                // NORMAL
                                                                    var var43 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6e863b59
                                                                    if (var43 == null ) {
                                                                        return 1;
                                                                    }
                                                                    }
                                                                var var45 = juHashMap$TreeNode.BOOLEANcheckInvariantsjuHashMap$TreeNode(local_3_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                                                if ((var45 != 0)) {
                                                                    return 1;
                                                                }
                                                                return 0;
                                                            case 169 :
                                                            // NORMAL
                                                                var var42 = juHashMap$TreeNode.BOOLEANcheckInvariantsjuHashMap$TreeNode(local_2_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                                                if ((var42 != 0)) {
                                                                    __label__ = 178;
                                                                    continue $M_169_178;
                                                                }
                                                                return 0;
                                                        }
                                                }
                                            case 113 :
                                            // NORMAL
                                                $S_113 : {
                                                // NORMAL
                                                    var var29 = local_3_REFERENCE.parent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@186ead2d
                                                    if ((var29 != t)) {
                                                        return 0;
                                                    }
                                                    }
                                                var var31 = local_3_REFERENCE.hash; // type is INT value type is INT
                                                var var32 = t.hash; // type is INT value type is INT
                                                if ((var31 >= var32)) {
                                                    __label__ = 134;
                                                    continue $M_134_113;
                                                }
                                                return 0;
                                        }
                                }
                        }
                }
            case 35 :
            // NORMAL
                var var12 = local_4_REFERENCE.next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@286a83e7
                if ((var12 == t)) {
                    __label__ = 46;
                    continue $M_35_46;
                }
                return 0;
        }
    },

    juHashMap$TreeNodeputTreeValjuHashMapA1juHashMap$NodeINTjlObjectjlObject : function(thisRef,map,tab,h,k,v) {
        var local_12_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_9_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_14_REFERENCE = null; // type is REFERENCE # of inits = 3
        var var5 = null; // type is REFERENCE # of inits = 2
        var local_7_INT = null; // type is INT # of inits = 3
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 3
        var var52 = null; // type is REFERENCE # of inits = 2
        var local_13_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_8_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_15_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_11_INT = null; // type is INT # of inits = 1
        var local_10_INT = null; // type is INT # of inits = 4
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_6_REFERENCE = null; // type is REFERENCE value type is REFERENCE
            local_7_INT = 0; // type is INT value type is INT
            var var3 = thisRef.parent; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@37db168e
            if (var3 == null ) {
                __label__ = 20;
                break $S_0;
            }
            __label__ = 13;
            }
        $M_20_13 : for(;;) switch (__label__) {
            case 20 :
            // NORMAL
                var5 = thisRef; // type is REFERENCE value type is REFERENCE
                break $M_20_13;
            case 13 :
            // NORMAL
                var var4 = thisRef.juHashMap$TreeNoderoot(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@60d1f6d8
                var5 = var4; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4d8c89f4
                break $M_20_13;
        }
        $S_21 : {
        // NORMAL
            local_8_REFERENCE = var5; // type is REFERENCE value type is REFERENCE
            local_9_REFERENCE = local_8_REFERENCE; // type is REFERENCE value type is REFERENCE
            __label__ = 27;
            }
        $L_27 : for (;;) {
            $S_27 : {
            // NORMAL
                var var10 = local_9_REFERENCE.hash; // type is INT value type is INT
                local_11_INT = var10; // type is INT value type is INT
                if ((var10 <= h)) {
                    __label__ = 45;
                    break $S_27;
                }
                __label__ = 39;
                }
            $M_45_39 : for(;;) switch (__label__) {
                case 39 :
                // NORMAL
                    local_10_INT = -1; // type is INT value type is INT
                    break $M_45_39;
                case 45 :
                // NORMAL
                    $S_45 : {
                    // NORMAL
                        var var13 = local_11_INT; // type is INT value type is INT
                        if ((var13 >= h)) {
                            __label__ = 57;
                            break $S_45;
                        }
                        __label__ = 51;
                        }
                    for(;;) switch (__label__) {
                        case 57 :
                        // NORMAL
                            $S_57 : {
                            // NORMAL
                                var var15 = local_9_REFERENCE.key; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@443e2865
                                local_12_REFERENCE = var15; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@23900328
                                if ((var15 == k)) {
                                    return local_9_REFERENCE;
                                }
                                }
                            $S_70 : {
                            // NORMAL
                                if (k == null ) {
                                    __label__ = 88;
                                    break $S_70;
                                }
                                __label__ = 75;
                                }
                            $M_75_88 : for(;;) switch (__label__) {
                                case 88 :
                                // NORMAL
                                    $S_88 : {
                                    // NORMAL
                                        var var20 = local_6_REFERENCE; // type is REFERENCE value type is REFERENCE
                                        if (var20 != null ) {
                                            __label__ = 104;
                                            break $S_88;
                                        }
                                        __label__ = 93;
                                        }
                                    $M_104_93 : for(;;) switch (__label__) {
                                        case 93 :
                                        // NORMAL
                                            var var21 = juHashMap.jlClasscomparableClassForjlObject(k); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@30a1cbe5
                                            local_6_REFERENCE = var21; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@161d0cca
                                            if (var21 == null ) {
                                                break $M_104_93;
                                            }
                                            __label__ = 104;
                                            continue $M_104_93;
                                        case 104 :
                                        // NORMAL
                                            var var24 = juHashMap.INTcompareComparablesjlClassjlObjectjlObject(local_6_REFERENCE,k,local_12_REFERENCE); // type is INT value type is INT
                                            local_10_INT = var24; // type is INT value type is INT
                                            if ((var24 != 0)) {
                                                break $M_45_39;
                                            }
                                            break $M_104_93;
                                    }
                                    $S_119 : {
                                    // NORMAL
                                        var var29 = local_7_INT; // type is INT value type is INT
                                        if ((var29 != 0)) {
                                            __label__ = 184;
                                            break $S_119;
                                        }
                                        __label__ = 124;
                                        }
                                    $M_184_124 : for(;;) switch (__label__) {
                                        case 124 :
                                        // NORMAL
                                            $S_124 : {
                                            // NORMAL
                                                local_7_INT = 1; // type is INT value type is INT
                                                var var32 = local_9_REFERENCE.left; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5fa1d419
                                                local_14_REFERENCE = var32; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6d1d840e
                                                if (var32 == null ) {
                                                    __label__ = 154;
                                                    break $S_124;
                                                }
                                                __label__ = 138;
                                                }
                                            $M_138_154 : for(;;) switch (__label__) {
                                                case 154 :
                                                // NORMAL
                                                    $S_154 : {
                                                    // NORMAL
                                                        var var39 = local_9_REFERENCE.right; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@30a99e03
                                                        local_14_REFERENCE = var39; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1318be3b
                                                        if (var39 == null ) {
                                                            __label__ = 184;
                                                            continue $M_184_124;
                                                        }
                                                        }
                                                    var var42 = local_14_REFERENCE.juHashMap$TreeNodefindINTjlObjectjlClass(local_14_REFERENCE,h,k,local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@561f573
                                                    local_13_REFERENCE = var42; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@18645171
                                                    if (var42 == null ) {
                                                        __label__ = 184;
                                                        continue $M_184_124;
                                                    }
                                                    return local_13_REFERENCE;
                                                case 138 :
                                                // NORMAL
                                                    var var36 = local_14_REFERENCE.juHashMap$TreeNodefindINTjlObjectjlClass(local_14_REFERENCE,h,k,local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3b21e8d9
                                                    local_13_REFERENCE = var36; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@19588ba0
                                                    if (var36 != null ) {
                                                        return local_13_REFERENCE;
                                                    }
                                                    __label__ = 154;
                                                    continue $M_138_154;
                                            }
                                        case 184 :
                                        // NORMAL
                                            var var44 = juHashMap$TreeNode.INTtieBreakOrderjlObjectjlObject(k,local_12_REFERENCE); // type is INT value type is INT
                                            local_10_INT = var44; // type is INT value type is INT
                                            break $M_45_39;
                                    }
                                case 75 :
                                // NORMAL
                                    var var18 = k.BOOLEANequalsjlObject(k,local_12_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                    if ((var18 == 0)) {
                                        __label__ = 88;
                                        continue $M_75_88;
                                    }
                                    return local_9_REFERENCE;
                            }
                        case 51 :
                        // NORMAL
                            local_10_INT = 1; // type is INT value type is INT
                            break $M_45_39;
                    }
            }
            $S_193 : {
            // NORMAL
                local_13_REFERENCE = local_9_REFERENCE; // type is REFERENCE value type is REFERENCE
                var var47 = local_10_INT; // type is INT value type is INT
                if ((var47 > 0)) {
                    __label__ = 210;
                    break $S_193;
                }
                __label__ = 202;
                }
            $M_210_202 : for(;;) switch (__label__) {
                case 210 :
                // NORMAL
                    var52 = local_9_REFERENCE.right; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6af1e2b8
                    break $M_210_202;
                case 202 :
                // NORMAL
                    var52 = local_9_REFERENCE.left; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@16543063
                    break $M_210_202;
            }
            $S_215 : {
            // NORMAL
                local_9_REFERENCE = var52; // type is REFERENCE value type is REFERENCE
                if (var52 != null ) {
                    __label__ = 311;
                    break $S_215;
                }
                __label__ = 221;
                }
            for(;;) switch (__label__) {
                case 311 :
                // NORMAL
                    __label__ = 27;
                    continue $L_27;
                case 221 :
                // NORMAL
                    $S_221 : {
                    // NORMAL
                        local_14_REFERENCE = local_13_REFERENCE.next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1c9485b7
                        var var56 = map.juHashMap$TreeNodenewTreeNodeINTjlObjectjlObjectjuHashMap$Node(map,h,k,v,local_14_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2847d1dc
                        local_15_REFERENCE = var56; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3b6d7efd
                        var var58 = local_10_INT; // type is INT value type is INT
                        if ((var58 > 0)) {
                            __label__ = 256;
                            break $S_221;
                        }
                        __label__ = 246;
                        }
                    $M_256_246 : for(;;) switch (__label__) {
                        case 256 :
                        // NORMAL
                            var var59 = local_13_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@19588ba0
                            var var60 = local_15_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3b6d7efd
                            var59.right = var60;
                            break $M_256_246;
                        case 246 :
                        // NORMAL
                            var var61 = local_13_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@19588ba0
                            var var62 = local_15_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3b6d7efd
                            var61.left = var62;
                            break $M_256_246;
                    }
                    $S_263 : {
                    // NORMAL
                        var var63 = local_13_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@19588ba0
                        var var64 = local_15_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3b6d7efd
                        var63.next = var64;
                        var var65 = local_15_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3b6d7efd
                        var var66 = local_15_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3b6d7efd
                        var var67 = local_13_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@19588ba0
                        var66.prev = var67;
                        var65.parent = var67;
                        var var68 = local_14_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6d1d840e
                        if (var68 == null ) {
                            __label__ = 298;
                            break $S_263;
                        }
                        __label__ = 288;
                        }
                    $M_288_298 : for(;;) switch (__label__) {
                        case 298 :
                        // NORMAL
                            var var73 = juHashMap$TreeNode.juHashMap$TreeNodebalanceInsertionjuHashMap$TreeNodejuHashMap$TreeNode(local_8_REFERENCE,local_15_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4d46124e
                            juHashMap$TreeNode.VOIDmoveRootToFrontA1juHashMap$NodejuHashMap$TreeNode(tab,var73);
                            return null;
                        case 288 :
                        // NORMAL
                            var var69 = local_14_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6d1d840e
                            var var70 = local_15_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3b6d7efd
                            var69.prev = var70;
                            __label__ = 298;
                            continue $M_288_298;
                    }
            }
        }
    },

    VOIDinitINTjlObjectjlObjectjuHashMap$Node : function(thisRef,hash,key,val,next) {
        var __label__ = null;
        juLinkedHashMap$Entry.VOIDinitINTjlObjectjlObjectjuHashMap$Node(thisRef,hash,key,val,next);
        return;
    },

    classInitCheck : function() {
        if (!juHashMap$TreeNode.__initialized) {
            juHashMap$TreeNode.__initialized = true;
            var thePrototype = juHashMap$TreeNode.Create.prototype;
            thePrototype.instanceOf = juHashMap$TreeNode.instanceOf;
            thePrototype.ClassgetClass = juHashMap$TreeNode.ClassgetClass;
            thePrototype.juHashMap$TreeNodeputTreeValjuHashMapA1juHashMap$NodeINTjlObjectjlObject = juHashMap$TreeNode.juHashMap$TreeNodeputTreeValjuHashMapA1juHashMap$NodeINTjlObjectjlObject;
            thePrototype.VOIDtreeifyA1juHashMap$Node = juHashMap$TreeNode.VOIDtreeifyA1juHashMap$Node;
            thePrototype.juHashMap$NodeuntreeifyjuHashMap = juHashMap$TreeNode.juHashMap$NodeuntreeifyjuHashMap;
            thePrototype.VOIDsplitjuHashMapA1juHashMap$NodeINTINT = juHashMap$TreeNode.VOIDsplitjuHashMapA1juHashMap$NodeINTINT;
            thePrototype.juHashMap$TreeNodefindINTjlObjectjlClass = juHashMap$TreeNode.juHashMap$TreeNodefindINTjlObjectjlClass;
            thePrototype.juHashMap$TreeNoderoot = juHashMap$TreeNode.juHashMap$TreeNoderoot;
            thePrototype.juHashMap$TreeNodegetTreeNodeINTjlObject = juHashMap$TreeNode.juHashMap$TreeNodegetTreeNodeINTjlObject;
            thePrototype.jlObjectgetValue = juHashMap$Node.jlObjectgetValue;
            thePrototype.jlObjectgetKey = juHashMap$Node.jlObjectgetKey;
            thePrototype.jlStringtoString = juHashMap$Node.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = juHashMap$Node.BOOLEANequalsjlObject;
            thePrototype.INThashCode = juHashMap$Node.INThashCode;
            juLinkedHashMap$Entry.classInitCheck();
            jlObject.classInitCheck();
            juHashMap$Node.classInitCheck();
            juMap$Entry.classInitCheck();
            juHashMap$TreeNode.VOIDclinit();
        }
    },

};

var juLinkedHashMap$Entry = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 146,
    __implementedTypes : [1,146,143,144],

    Create : function() {
        this.hash = 0; // declared in java.util.HashMap$Node
        this.key = null; // declared in java.util.HashMap$Node
        this.next = null; // declared in java.util.HashMap$Node
        this.value = null; // declared in java.util.HashMap$Node
    },

    instanceOf : function(aType) {
        return juLinkedHashMap$Entry.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return juLinkedHashMap$Entry;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitINTjlObjectjlObjectjuHashMap$Node : function(thisRef,hash,key,value,next) {
        var __label__ = null;
        juHashMap$Node.VOIDinitINTjlObjectjlObjectjuHashMap$Node(thisRef,hash,key,value,next);
        return;
    },

    classInitCheck : function() {
        if (!juLinkedHashMap$Entry.__initialized) {
            juLinkedHashMap$Entry.__initialized = true;
            var thePrototype = juLinkedHashMap$Entry.Create.prototype;
            thePrototype.instanceOf = juLinkedHashMap$Entry.instanceOf;
            thePrototype.ClassgetClass = juLinkedHashMap$Entry.ClassgetClass;
            thePrototype.jlObjectgetValue = juHashMap$Node.jlObjectgetValue;
            thePrototype.jlObjectgetKey = juHashMap$Node.jlObjectgetKey;
            thePrototype.jlStringtoString = juHashMap$Node.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = juHashMap$Node.BOOLEANequalsjlObject;
            thePrototype.INThashCode = juHashMap$Node.INThashCode;
            juHashMap$Node.classInitCheck();
            jlObject.classInitCheck();
            juMap$Entry.classInitCheck();
        }
    },

};

var jlrParameterizedType = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 147,
    __implementedTypes : [147,1,5],


    classInitCheck : function() {
        if (!jlrParameterizedType.__initialized) {
            jlrParameterizedType.__initialized = true;
            jlObject.classInitCheck();
            jlrType.classInitCheck();
        }
    },

};

var ojdjRevoluteJointDef = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 148,
    __implementedTypes : [1,148,149],

    Create : function() {
        this.type = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.userData = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.bodyA = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.bodyB = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.collideConnected = false; // declared in org.jbox2d.dynamics.joints.JointDef
        this.localAnchorA = null; // declared in org.jbox2d.dynamics.joints.RevoluteJointDef
        this.localAnchorB = null; // declared in org.jbox2d.dynamics.joints.RevoluteJointDef
        this.referenceAngle = 0; // declared in org.jbox2d.dynamics.joints.RevoluteJointDef
        this.lowerAngle = 0; // declared in org.jbox2d.dynamics.joints.RevoluteJointDef
        this.upperAngle = 0; // declared in org.jbox2d.dynamics.joints.RevoluteJointDef
        this.maxMotorTorque = 0; // declared in org.jbox2d.dynamics.joints.RevoluteJointDef
        this.motorSpeed = 0; // declared in org.jbox2d.dynamics.joints.RevoluteJointDef
        this.enableLimit = false; // declared in org.jbox2d.dynamics.joints.RevoluteJointDef
        this.enableMotor = false; // declared in org.jbox2d.dynamics.joints.RevoluteJointDef
    },

    instanceOf : function(aType) {
        return ojdjRevoluteJointDef.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdjRevoluteJointDef;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        ojdjJointDef.VOIDinit(thisRef);
        var var0 = ojdjJointType.REVOLUTE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1c0c1b95
        thisRef.type = var0;
        var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinitFLOATFLOAT(var1,0.0,0.0);
        thisRef.localAnchorA = var1;
        var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinitFLOATFLOAT(var2,0.0,0.0);
        thisRef.localAnchorB = var2;
        thisRef.referenceAngle = 0.0;
        thisRef.lowerAngle = 0.0;
        thisRef.upperAngle = 0.0;
        thisRef.maxMotorTorque = 0.0;
        thisRef.motorSpeed = 0.0;
        thisRef.enableLimit = 0;
        thisRef.enableMotor = 0;
        return;
    },

    classInitCheck : function() {
        if (!ojdjRevoluteJointDef.__initialized) {
            ojdjRevoluteJointDef.__initialized = true;
            var thePrototype = ojdjRevoluteJointDef.Create.prototype;
            thePrototype.instanceOf = ojdjRevoluteJointDef.instanceOf;
            thePrototype.ClassgetClass = ojdjRevoluteJointDef.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojdjJointDef.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var ojdjJointDef = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 149,
    __implementedTypes : [1,149],

    Create : function() {
        this.type = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.userData = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.bodyA = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.bodyB = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.collideConnected = false; // declared in org.jbox2d.dynamics.joints.JointDef
    },

    instanceOf : function(aType) {
        return ojdjJointDef.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdjJointDef;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = ojdjJointType.UNKNOWN; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@26193a2
        thisRef.type = var0;
        thisRef.userData = null;
        thisRef.bodyA = null;
        thisRef.bodyB = null;
        thisRef.collideConnected = 0;
        return;
    },

    classInitCheck : function() {
        if (!ojdjJointDef.__initialized) {
            ojdjJointDef.__initialized = true;
            var thePrototype = ojdjJointDef.Create.prototype;
            thePrototype.instanceOf = ojdjJointDef.instanceOf;
            thePrototype.ClassgetClass = ojdjJointDef.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojdjJointType = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 150,
    __implementedTypes : [1,14,150,59,2],
    UNKNOWN : null, // declared in org.jbox2d.dynamics.joints.JointType
    REVOLUTE : null, // declared in org.jbox2d.dynamics.joints.JointType
    PRISMATIC : null, // declared in org.jbox2d.dynamics.joints.JointType
    DISTANCE : null, // declared in org.jbox2d.dynamics.joints.JointType
    PULLEY : null, // declared in org.jbox2d.dynamics.joints.JointType
    MOUSE : null, // declared in org.jbox2d.dynamics.joints.JointType
    GEAR : null, // declared in org.jbox2d.dynamics.joints.JointType
    WHEEL : null, // declared in org.jbox2d.dynamics.joints.JointType
    WELD : null, // declared in org.jbox2d.dynamics.joints.JointType
    FRICTION : null, // declared in org.jbox2d.dynamics.joints.JointType
    ROPE : null, // declared in org.jbox2d.dynamics.joints.JointType
    CONSTANT_VOLUME : null, // declared in org.jbox2d.dynamics.joints.JointType
    $VALUES : null, // declared in org.jbox2d.dynamics.joints.JointType

    Create : function() {
        this.name = null; // declared in java.lang.Enum
        this.ordinalNumber = 0; // declared in java.lang.Enum
    },

    instanceOf : function(aType) {
        return ojdjJointType.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdjJointType;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var __label__ = null;
        var var0 = new ojdjJointType.Create(); // type is REFERENCE value type is REFERENCE
        ojdjJointType.VOIDinitjlStringINT(var0,bytecoder.stringpool[41],0);
        ojdjJointType.UNKNOWN = var0;
        var var1 = new ojdjJointType.Create(); // type is REFERENCE value type is REFERENCE
        ojdjJointType.VOIDinitjlStringINT(var1,bytecoder.stringpool[42],1);
        ojdjJointType.REVOLUTE = var1;
        var var2 = new ojdjJointType.Create(); // type is REFERENCE value type is REFERENCE
        ojdjJointType.VOIDinitjlStringINT(var2,bytecoder.stringpool[43],2);
        ojdjJointType.PRISMATIC = var2;
        var var3 = new ojdjJointType.Create(); // type is REFERENCE value type is REFERENCE
        ojdjJointType.VOIDinitjlStringINT(var3,bytecoder.stringpool[44],3);
        ojdjJointType.DISTANCE = var3;
        var var4 = new ojdjJointType.Create(); // type is REFERENCE value type is REFERENCE
        ojdjJointType.VOIDinitjlStringINT(var4,bytecoder.stringpool[45],4);
        ojdjJointType.PULLEY = var4;
        var var5 = new ojdjJointType.Create(); // type is REFERENCE value type is REFERENCE
        ojdjJointType.VOIDinitjlStringINT(var5,bytecoder.stringpool[46],5);
        ojdjJointType.MOUSE = var5;
        var var6 = new ojdjJointType.Create(); // type is REFERENCE value type is REFERENCE
        ojdjJointType.VOIDinitjlStringINT(var6,bytecoder.stringpool[47],6);
        ojdjJointType.GEAR = var6;
        var var7 = new ojdjJointType.Create(); // type is REFERENCE value type is REFERENCE
        ojdjJointType.VOIDinitjlStringINT(var7,bytecoder.stringpool[48],7);
        ojdjJointType.WHEEL = var7;
        var var8 = new ojdjJointType.Create(); // type is REFERENCE value type is REFERENCE
        ojdjJointType.VOIDinitjlStringINT(var8,bytecoder.stringpool[49],8);
        ojdjJointType.WELD = var8;
        var var9 = new ojdjJointType.Create(); // type is REFERENCE value type is REFERENCE
        ojdjJointType.VOIDinitjlStringINT(var9,bytecoder.stringpool[50],9);
        ojdjJointType.FRICTION = var9;
        var var10 = new ojdjJointType.Create(); // type is REFERENCE value type is REFERENCE
        ojdjJointType.VOIDinitjlStringINT(var10,bytecoder.stringpool[51],10);
        ojdjJointType.ROPE = var10;
        var var11 = new ojdjJointType.Create(); // type is REFERENCE value type is REFERENCE
        ojdjJointType.VOIDinitjlStringINT(var11,bytecoder.stringpool[52],11);
        ojdjJointType.CONSTANT_VOLUME = var11;
        var var12 = bytecoder.newArray(12,null); // type is REFERENCE value type is REFERENCE
        var var13 = ojdjJointType.UNKNOWN; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@49edc2a1
        var12.data[0] = var13;
        var var14 = ojdjJointType.REVOLUTE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@72edecce
        var12.data[1] = var14;
        var var15 = ojdjJointType.PRISMATIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@68b1cb92
        var12.data[2] = var15;
        var var16 = ojdjJointType.DISTANCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@52bfcf4a
        var12.data[3] = var16;
        var var17 = ojdjJointType.PULLEY; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7560f776
        var12.data[4] = var17;
        var var18 = ojdjJointType.MOUSE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@68f6ee88
        var12.data[5] = var18;
        var var19 = ojdjJointType.GEAR; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@e7d555f
        var12.data[6] = var19;
        var var20 = ojdjJointType.WHEEL; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@22140e45
        var12.data[7] = var20;
        var var21 = ojdjJointType.WELD; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@50bd8636
        var12.data[8] = var21;
        var var22 = ojdjJointType.FRICTION; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@fe0b007
        var12.data[9] = var22;
        var var23 = ojdjJointType.ROPE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6bd3cb09
        var12.data[10] = var23;
        var var24 = ojdjJointType.CONSTANT_VOLUME; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@69b79610
        var12.data[11] = var24;
        ojdjJointType.$VALUES = var12;
        return;
    },

    VOIDinitjlStringINT : function(thisRef,p1,p2) {
        var __label__ = null;
        jlEnum.VOIDinitjlStringINT(thisRef,p1,p2);
        return;
    },

    A1ojdjJointTypevalues : function() {
        var __label__ = null;
        var var1 = ojdjJointType.$VALUES.jlObjectclone(ojdjJointType.$VALUES); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@716704ec
        return var1;
    },

    classInitCheck : function() {
        if (!ojdjJointType.__initialized) {
            ojdjJointType.__initialized = true;
            var thePrototype = ojdjJointType.Create.prototype;
            thePrototype.instanceOf = ojdjJointType.instanceOf;
            thePrototype.ClassgetClass = ojdjJointType.ClassgetClass;
            thePrototype.INTordinal = jlEnum.INTordinal;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlEnum.classInitCheck();
            jlObject.classInitCheck();
            jlComparable.classInitCheck();
            jiSerializable.classInitCheck();
            jlrArray.classInitCheck();
            ojdjJointType.VOIDclinit();
        }
    },

};

var ojdjJoint$1 = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 151,
    __implementedTypes : [1,151],
    $SwitchMap$org$jbox2d$dynamics$joints$JointType : null, // declared in org.jbox2d.dynamics.joints.Joint$1

    Create : function() {
    },

    instanceOf : function(aType) {
        return ojdjJoint$1.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdjJoint$1;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdjJointType.A1ojdjJointTypevalues(); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@33c9a814
            var var2 = bytecoder.newArray(var0.data.length,0); // type is REFERENCE value type is REFERENCE
            ojdjJoint$1.$SwitchMap$org$jbox2d$dynamics$joints$JointType = var2;
            }
        try {
            $S_9 : {
            // NORMAL
                var var3 = ojdjJoint$1.$SwitchMap$org$jbox2d$dynamics$joints$JointType; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@79ba9037
                var var5 = ojdjJointType.MOUSE.INTordinal(ojdjJointType.MOUSE); // type is INT value type is INT
                var3.data[var5] = 1;
                __label__ = 24;
                }
        } catch (e) {
            dmbcExceptionManager.VOIDpushjlThrowable(e);
            if (e.instanceOf(jlNoSuchFieldError)) {
                __label__ = 23;
            } else {
                throw dmbcExceptionManager.jlThrowablepop();
            }
        }
        $M_23_24 : for(;;) switch (__label__) {
            case 24 :
            // NORMAL
                try {
                    $S_24 : {
                    // NORMAL
                        var var8 = ojdjJoint$1.$SwitchMap$org$jbox2d$dynamics$joints$JointType; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1ca49a1d
                        var var10 = ojdjJointType.DISTANCE.INTordinal(ojdjJointType.DISTANCE); // type is INT value type is INT
                        var8.data[var10] = 2;
                        __label__ = 39;
                        }
                } catch (e) {
                    dmbcExceptionManager.VOIDpushjlThrowable(e);
                    if (e.instanceOf(jlNoSuchFieldError)) {
                        __label__ = 38;
                    } else {
                        throw dmbcExceptionManager.jlThrowablepop();
                    }
                }
                $M_39_38 : for(;;) switch (__label__) {
                    case 39 :
                    // NORMAL
                        try {
                            $S_39 : {
                            // NORMAL
                                var var12 = ojdjJoint$1.$SwitchMap$org$jbox2d$dynamics$joints$JointType; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@afde7f
                                var var14 = ojdjJointType.PRISMATIC.INTordinal(ojdjJointType.PRISMATIC); // type is INT value type is INT
                                var12.data[var14] = 3;
                                __label__ = 54;
                                }
                        } catch (e) {
                            dmbcExceptionManager.VOIDpushjlThrowable(e);
                            if (e.instanceOf(jlNoSuchFieldError)) {
                                __label__ = 53;
                            } else {
                                throw dmbcExceptionManager.jlThrowablepop();
                            }
                        }
                        $M_54_53 : for(;;) switch (__label__) {
                            case 54 :
                            // NORMAL
                                try {
                                    $S_54 : {
                                    // NORMAL
                                        var var16 = ojdjJoint$1.$SwitchMap$org$jbox2d$dynamics$joints$JointType; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@7ed85f76
                                        var var18 = ojdjJointType.REVOLUTE.INTordinal(ojdjJointType.REVOLUTE); // type is INT value type is INT
                                        var16.data[var18] = 4;
                                        __label__ = 69;
                                        }
                                } catch (e) {
                                    dmbcExceptionManager.VOIDpushjlThrowable(e);
                                    if (e.instanceOf(jlNoSuchFieldError)) {
                                        __label__ = 68;
                                    } else {
                                        throw dmbcExceptionManager.jlThrowablepop();
                                    }
                                }
                                $M_68_69 : for(;;) switch (__label__) {
                                    case 69 :
                                    // NORMAL
                                        try {
                                            $S_69 : {
                                            // NORMAL
                                                var var20 = ojdjJoint$1.$SwitchMap$org$jbox2d$dynamics$joints$JointType; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@534e53b2
                                                var var22 = ojdjJointType.WELD.INTordinal(ojdjJointType.WELD); // type is INT value type is INT
                                                var20.data[var22] = 5;
                                                __label__ = 84;
                                                }
                                        } catch (e) {
                                            dmbcExceptionManager.VOIDpushjlThrowable(e);
                                            if (e.instanceOf(jlNoSuchFieldError)) {
                                                __label__ = 83;
                                            } else {
                                                throw dmbcExceptionManager.jlThrowablepop();
                                            }
                                        }
                                        $M_83_84 : for(;;) switch (__label__) {
                                            case 84 :
                                            // NORMAL
                                                try {
                                                    $S_84 : {
                                                    // NORMAL
                                                        var var24 = ojdjJoint$1.$SwitchMap$org$jbox2d$dynamics$joints$JointType; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@6b025fb4
                                                        var var26 = ojdjJointType.FRICTION.INTordinal(ojdjJointType.FRICTION); // type is INT value type is INT
                                                        var24.data[var26] = 6;
                                                        __label__ = 100;
                                                        }
                                                } catch (e) {
                                                    dmbcExceptionManager.VOIDpushjlThrowable(e);
                                                    if (e.instanceOf(jlNoSuchFieldError)) {
                                                        __label__ = 99;
                                                    } else {
                                                        throw dmbcExceptionManager.jlThrowablepop();
                                                    }
                                                }
                                                $M_100_99 : for(;;) switch (__label__) {
                                                    case 100 :
                                                    // NORMAL
                                                        try {
                                                            $S_100 : {
                                                            // NORMAL
                                                                var var28 = ojdjJoint$1.$SwitchMap$org$jbox2d$dynamics$joints$JointType; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1520288d
                                                                var var30 = ojdjJointType.WHEEL.INTordinal(ojdjJointType.WHEEL); // type is INT value type is INT
                                                                var28.data[var30] = 7;
                                                                __label__ = 116;
                                                                }
                                                        } catch (e) {
                                                            dmbcExceptionManager.VOIDpushjlThrowable(e);
                                                            if (e.instanceOf(jlNoSuchFieldError)) {
                                                                __label__ = 115;
                                                            } else {
                                                                throw dmbcExceptionManager.jlThrowablepop();
                                                            }
                                                        }
                                                        $M_115_116 : for(;;) switch (__label__) {
                                                            case 115 :
                                                            // EXCEPTION_HANDLER
                                                                var var31 = dmbcExceptionManager.jlThrowablepop(); // type is REFERENCE value type is REFERENCE
                                                                var local_0_REFERENCE = var31; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@293fe6b0
                                                                __label__ = 116;
                                                                continue $M_115_116;
                                                            case 116 :
                                                            // NORMAL
                                                                try {
                                                                    $S_116 : {
                                                                    // NORMAL
                                                                        var var32 = ojdjJoint$1.$SwitchMap$org$jbox2d$dynamics$joints$JointType; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@8cdf3e6
                                                                        var var34 = ojdjJointType.GEAR.INTordinal(ojdjJointType.GEAR); // type is INT value type is INT
                                                                        var32.data[var34] = 8;
                                                                        __label__ = 132;
                                                                        }
                                                                } catch (e) {
                                                                    dmbcExceptionManager.VOIDpushjlThrowable(e);
                                                                    if (e.instanceOf(jlNoSuchFieldError)) {
                                                                        __label__ = 131;
                                                                    } else {
                                                                        throw dmbcExceptionManager.jlThrowablepop();
                                                                    }
                                                                }
                                                                $M_132_131 : for(;;) switch (__label__) {
                                                                    case 132 :
                                                                    // NORMAL
                                                                        try {
                                                                            $S_132 : {
                                                                            // NORMAL
                                                                                var var36 = ojdjJoint$1.$SwitchMap$org$jbox2d$dynamics$joints$JointType; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@714bf2b4
                                                                                var var38 = ojdjJointType.PULLEY.INTordinal(ojdjJointType.PULLEY); // type is INT value type is INT
                                                                                var36.data[var38] = 9;
                                                                                __label__ = 148;
                                                                                }
                                                                        } catch (e) {
                                                                            dmbcExceptionManager.VOIDpushjlThrowable(e);
                                                                            if (e.instanceOf(jlNoSuchFieldError)) {
                                                                                __label__ = 147;
                                                                            } else {
                                                                                throw dmbcExceptionManager.jlThrowablepop();
                                                                            }
                                                                        }
                                                                        $M_148_147 : for(;;) switch (__label__) {
                                                                            case 148 :
                                                                            // NORMAL
                                                                                try {
                                                                                    $S_148 : {
                                                                                    // NORMAL
                                                                                        var var40 = ojdjJoint$1.$SwitchMap$org$jbox2d$dynamics$joints$JointType; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@653bd850
                                                                                        var var42 = ojdjJointType.CONSTANT_VOLUME.INTordinal(ojdjJointType.CONSTANT_VOLUME); // type is INT value type is INT
                                                                                        var40.data[var42] = 10;
                                                                                        __label__ = 164;
                                                                                        }
                                                                                } catch (e) {
                                                                                    dmbcExceptionManager.VOIDpushjlThrowable(e);
                                                                                    if (e.instanceOf(jlNoSuchFieldError)) {
                                                                                        __label__ = 163;
                                                                                    } else {
                                                                                        throw dmbcExceptionManager.jlThrowablepop();
                                                                                    }
                                                                                }
                                                                                $M_163_164 : for(;;) switch (__label__) {
                                                                                    case 163 :
                                                                                    // EXCEPTION_HANDLER
                                                                                        var var43 = dmbcExceptionManager.jlThrowablepop(); // type is REFERENCE value type is REFERENCE
                                                                                        var local_0_REFERENCE = var43; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@33e7b821
                                                                                        __label__ = 164;
                                                                                        continue $M_163_164;
                                                                                    case 164 :
                                                                                    // NORMAL
                                                                                        try {
                                                                                            $S_164 : {
                                                                                            // NORMAL
                                                                                                var var44 = ojdjJoint$1.$SwitchMap$org$jbox2d$dynamics$joints$JointType; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@54d23f78
                                                                                                var var46 = ojdjJointType.ROPE.INTordinal(ojdjJointType.ROPE); // type is INT value type is INT
                                                                                                var44.data[var46] = 11;
                                                                                                __label__ = 180;
                                                                                                }
                                                                                        } catch (e) {
                                                                                            dmbcExceptionManager.VOIDpushjlThrowable(e);
                                                                                            if (e.instanceOf(jlNoSuchFieldError)) {
                                                                                                __label__ = 179;
                                                                                            } else {
                                                                                                throw dmbcExceptionManager.jlThrowablepop();
                                                                                            }
                                                                                        }
                                                                                        $M_180_179 : for(;;) switch (__label__) {
                                                                                            case 180 :
                                                                                            // NORMAL
                                                                                                try {
                                                                                                    var var48 = ojdjJoint$1.$SwitchMap$org$jbox2d$dynamics$joints$JointType; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@7a22a904
                                                                                                    var var50 = ojdjJointType.UNKNOWN.INTordinal(ojdjJointType.UNKNOWN); // type is INT value type is INT
                                                                                                    var48.data[var50] = 12;
                                                                                                    return;
                                                                                                } catch (e) {
                                                                                                    dmbcExceptionManager.VOIDpushjlThrowable(e);
                                                                                                    if (e.instanceOf(jlNoSuchFieldError)) {
                                                                                                        __label__ = 195;
                                                                                                    } else {
                                                                                                        throw dmbcExceptionManager.jlThrowablepop();
                                                                                                    }
                                                                                                }
                                                                                                var var51 = dmbcExceptionManager.jlThrowablepop(); // type is REFERENCE value type is REFERENCE
                                                                                                var local_0_REFERENCE = var51; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@41601748
                                                                                                return;
                                                                                            case 179 :
                                                                                            // EXCEPTION_HANDLER
                                                                                                var var47 = dmbcExceptionManager.jlThrowablepop(); // type is REFERENCE value type is REFERENCE
                                                                                                var local_0_REFERENCE = var47; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4fc889f5
                                                                                                __label__ = 180;
                                                                                                continue $M_180_179;
                                                                                        }
                                                                                }
                                                                            case 147 :
                                                                            // EXCEPTION_HANDLER
                                                                                var var39 = dmbcExceptionManager.jlThrowablepop(); // type is REFERENCE value type is REFERENCE
                                                                                var local_0_REFERENCE = var39; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@aa4468b
                                                                                __label__ = 148;
                                                                                continue $M_148_147;
                                                                        }
                                                                    case 131 :
                                                                    // EXCEPTION_HANDLER
                                                                        var var35 = dmbcExceptionManager.jlThrowablepop(); // type is REFERENCE value type is REFERENCE
                                                                        var local_0_REFERENCE = var35; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6521b452
                                                                        __label__ = 132;
                                                                        continue $M_132_131;
                                                                }
                                                        }
                                                    case 99 :
                                                    // EXCEPTION_HANDLER
                                                        var var27 = dmbcExceptionManager.jlThrowablepop(); // type is REFERENCE value type is REFERENCE
                                                        var local_0_REFERENCE = var27; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@24ba35e9
                                                        __label__ = 100;
                                                        continue $M_100_99;
                                                }
                                            case 83 :
                                            // EXCEPTION_HANDLER
                                                var var23 = dmbcExceptionManager.jlThrowablepop(); // type is REFERENCE value type is REFERENCE
                                                var local_0_REFERENCE = var23; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2fb697aa
                                                __label__ = 84;
                                                continue $M_83_84;
                                        }
                                    case 68 :
                                    // EXCEPTION_HANDLER
                                        var var19 = dmbcExceptionManager.jlThrowablepop(); // type is REFERENCE value type is REFERENCE
                                        var local_0_REFERENCE = var19; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@78e0cc9
                                        __label__ = 69;
                                        continue $M_68_69;
                                }
                            case 53 :
                            // EXCEPTION_HANDLER
                                var var15 = dmbcExceptionManager.jlThrowablepop(); // type is REFERENCE value type is REFERENCE
                                var local_0_REFERENCE = var15; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6f65ab4e
                                __label__ = 54;
                                continue $M_54_53;
                        }
                    case 38 :
                    // EXCEPTION_HANDLER
                        var var11 = dmbcExceptionManager.jlThrowablepop(); // type is REFERENCE value type is REFERENCE
                        var local_0_REFERENCE = var11; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1a85ce36
                        __label__ = 39;
                        continue $M_39_38;
                }
            case 23 :
            // EXCEPTION_HANDLER
                var var6 = dmbcExceptionManager.jlThrowablepop(); // type is REFERENCE value type is REFERENCE
                var local_0_REFERENCE = var6; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@195110b
                __label__ = 24;
                continue $M_23_24;
        }
    },

    classInitCheck : function() {
        if (!ojdjJoint$1.__initialized) {
            ojdjJoint$1.__initialized = true;
            var thePrototype = ojdjJoint$1.Create.prototype;
            thePrototype.instanceOf = ojdjJoint$1.instanceOf;
            thePrototype.ClassgetClass = ojdjJoint$1.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            ojdjJointType.classInitCheck();
            ojdjJoint$1.VOIDclinit();
        }
    },

};

var ojdjMouseJoint = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 152,
    __implementedTypes : [1,117,152],
    $assertionsDisabled : false, // declared in org.jbox2d.dynamics.joints.Joint
    $assertionsDisabled : false, // declared in org.jbox2d.dynamics.joints.MouseJoint

    Create : function() {
        this.pool = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_type = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_prev = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_next = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_bodyA = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_bodyB = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_collideConnected = false; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_islandFlag = false; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_userData = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_edgeA = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_edgeB = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_localAnchorB = null; // declared in org.jbox2d.dynamics.joints.MouseJoint
        this.m_targetA = null; // declared in org.jbox2d.dynamics.joints.MouseJoint
        this.m_impulse = null; // declared in org.jbox2d.dynamics.joints.MouseJoint
        this.m_rB = null; // declared in org.jbox2d.dynamics.joints.MouseJoint
        this.m_localCenterB = null; // declared in org.jbox2d.dynamics.joints.MouseJoint
        this.m_mass = null; // declared in org.jbox2d.dynamics.joints.MouseJoint
        this.m_C = null; // declared in org.jbox2d.dynamics.joints.MouseJoint
        this.m_maxForce = 0; // declared in org.jbox2d.dynamics.joints.MouseJoint
        this.m_frequencyHz = 0; // declared in org.jbox2d.dynamics.joints.MouseJoint
        this.m_dampingRatio = 0; // declared in org.jbox2d.dynamics.joints.MouseJoint
        this.m_beta = 0; // declared in org.jbox2d.dynamics.joints.MouseJoint
        this.m_gamma = 0; // declared in org.jbox2d.dynamics.joints.MouseJoint
        this.m_indexB = 0; // declared in org.jbox2d.dynamics.joints.MouseJoint
        this.m_invMassB = 0; // declared in org.jbox2d.dynamics.joints.MouseJoint
        this.m_invIB = 0; // declared in org.jbox2d.dynamics.joints.MouseJoint
    },

    instanceOf : function(aType) {
        return ojdjMouseJoint.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdjMouseJoint;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    ojdjJointcreateojdWorldojdjJointDef : function(p0,p1) {
         return ojdjJoint.ojdjJointcreateojdWorldojdjJointDef(p0,p1);
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdjMouseJoint.BOOLEANdesiredAssertionStatus(ojdjMouseJoint); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_9_13 : for(;;) switch (__label__) {
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_9_13;
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_9_13;
        }
        ojdjMouseJoint.$assertionsDisabled = var1;
        return;
    },

    VOIDinitojpIWorldPoolojdjMouseJointDef : function(thisRef,argWorld,def) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            ojdjJoint.VOIDinitojpIWorldPoolojdjJointDef(thisRef,argWorld,def);
            var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var0);
            thisRef.m_localAnchorB = var0;
            var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var1);
            thisRef.m_targetA = var1;
            var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var2);
            thisRef.m_impulse = var2;
            var var3 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var3);
            thisRef.m_rB = var3;
            var var4 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var4);
            thisRef.m_localCenterB = var4;
            var var5 = new ojcMat22.Create(); // type is REFERENCE value type is REFERENCE
            ojcMat22.VOIDinit(var5);
            thisRef.m_mass = var5;
            var var6 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var6);
            thisRef.m_C = var6;
            var var7 = ojdjMouseJoint.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var7 != 0)) {
                __label__ = 107;
                break $S_0;
            }
            __label__ = 89;
            }
        $M_89_107 : for(;;) switch (__label__) {
            case 89 :
            // NORMAL
                $S_89 : {
                // NORMAL
                    var var9 = def.target.BOOLEANisValid(def.target); // type is BOOLEAN value type is BOOLEAN
                    if ((var9 != 0)) {
                        __label__ = 107;
                        continue $M_89_107;
                    }
                    }
                var var33 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var33);
                throw var33;
            case 107 :
            // NORMAL
                $S_107 : {
                // NORMAL
                    var var10 = ojdjMouseJoint.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                    if ((var10 != 0)) {
                        __label__ = 130;
                        break $S_107;
                    }
                    __label__ = 113;
                    }
                $M_113_130 : for(;;) switch (__label__) {
                    case 130 :
                    // NORMAL
                        $S_130 : {
                        // NORMAL
                            var var13 = ojdjMouseJoint.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                            if ((var13 != 0)) {
                                __label__ = 153;
                                break $S_130;
                            }
                            __label__ = 136;
                            }
                        $M_153_136 : for(;;) switch (__label__) {
                            case 136 :
                            // NORMAL
                                $S_136 : {
                                // NORMAL
                                    var var14 = def.frequencyHz; // type is FLOAT value type is FLOAT
                                    if ((var14 >= 0.0)) {
                                        __label__ = 153;
                                        continue $M_153_136;
                                    }
                                    }
                                var var31 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                jlAssertionError.VOIDinit(var31);
                                throw var31;
                            case 153 :
                            // NORMAL
                                $S_153 : {
                                // NORMAL
                                    var var16 = ojdjMouseJoint.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                                    if ((var16 != 0)) {
                                        __label__ = 176;
                                        break $S_153;
                                    }
                                    __label__ = 159;
                                    }
                                $M_159_176 : for(;;) switch (__label__) {
                                    case 159 :
                                    // NORMAL
                                        $S_159 : {
                                        // NORMAL
                                            var var17 = def.dampingRatio; // type is FLOAT value type is FLOAT
                                            if ((var17 >= 0.0)) {
                                                __label__ = 176;
                                                continue $M_159_176;
                                            }
                                            }
                                        var var19 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                                        jlAssertionError.VOIDinit(var19);
                                        throw var19;
                                    case 176 :
                                    // NORMAL
                                        var var22 = thisRef.m_targetA.ojcVec2setojcVec2(thisRef.m_targetA,def.target); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7ca13ec0
                                        var var24 = thisRef.m_bodyB.ojcTransformgetTransform(thisRef.m_bodyB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@587e1f06
                                        ojcTransform.VOIDmulTransToOutUnsafeojcTransformojcVec2ojcVec2(var24,thisRef.m_targetA,thisRef.m_localAnchorB);
                                        var var27 = def.maxForce; // type is FLOAT value type is FLOAT
                                        thisRef.m_maxForce = var27;
                                        thisRef.m_impulse.VOIDsetZero(thisRef.m_impulse);
                                        var var29 = def.frequencyHz; // type is FLOAT value type is FLOAT
                                        thisRef.m_frequencyHz = var29;
                                        var var30 = def.dampingRatio; // type is FLOAT value type is FLOAT
                                        thisRef.m_dampingRatio = var30;
                                        thisRef.m_beta = 0.0;
                                        thisRef.m_gamma = 0.0;
                                        return;
                                }
                        }
                    case 113 :
                    // NORMAL
                        $S_113 : {
                        // NORMAL
                            var var11 = def.maxForce; // type is FLOAT value type is FLOAT
                            if ((var11 >= 0.0)) {
                                __label__ = 130;
                                continue $M_113_130;
                            }
                            }
                        var var32 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                        jlAssertionError.VOIDinit(var32);
                        throw var32;
                }
        }
    },

    VOIDinitVelocityConstraintsojdSolverData : function(thisRef,data) {
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_9_FLOAT = null; // type is FLOAT # of inits = 1
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_5_FLOAT = null; // type is FLOAT # of inits = 3
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_10_FLOAT = null; // type is FLOAT # of inits = 1
        var local_11_FLOAT = null; // type is FLOAT # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var1 = thisRef.m_bodyB.m_islandIndex; // type is INT value type is INT
            thisRef.m_indexB = var1;
            var var6 = thisRef.m_localCenterB.ojcVec2setojcVec2(thisRef.m_localCenterB,thisRef.m_bodyB.m_sweep.localCenter); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@45e64c6e
            var var8 = thisRef.m_bodyB.m_invMass; // type is FLOAT value type is FLOAT
            thisRef.m_invMassB = var8;
            var var10 = thisRef.m_bodyB.m_invI; // type is FLOAT value type is FLOAT
            thisRef.m_invIB = var10;
            var var13 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_2_REFERENCE = var13.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1fc7ecf
            var var18 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            var local_3_FLOAT = var18.a; // type is FLOAT value type is FLOAT
            var var24 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_4_REFERENCE = var24.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2972bb8e
            var var29 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_5_FLOAT = var29.w; // type is FLOAT value type is FLOAT
            var var34 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@29b0d499
            local_6_REFERENCE = var34; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1430fba1
            var var38 = local_6_REFERENCE.ojcRotsetFLOAT(local_6_REFERENCE,local_3_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5e4268fd
            var var40 = thisRef.m_bodyB.FLOATgetMass(thisRef.m_bodyB); // type is FLOAT value type is FLOAT
            var local_7_FLOAT = var40; // type is FLOAT value type is FLOAT
            var local_8_FLOAT = (6.2831855 * thisRef.m_frequencyHz); // type is FLOAT value type is FLOAT
            local_9_FLOAT = (((2.0 * local_7_FLOAT) * thisRef.m_dampingRatio) * local_8_FLOAT); // type is FLOAT value type is FLOAT
            local_10_FLOAT = (local_7_FLOAT * (local_8_FLOAT * local_8_FLOAT)); // type is FLOAT value type is FLOAT
            local_11_FLOAT = data.step.dt; // type is FLOAT value type is FLOAT
            var var66 = ojdjMouseJoint.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var66 != 0)) {
                __label__ = 202;
                break $S_0;
            }
            __label__ = 180;
            }
        $M_202_180 : for(;;) switch (__label__) {
            case 202 :
            // NORMAL
                $S_202 : {
                // NORMAL
                    var var80 = (local_11_FLOAT * (local_9_FLOAT + (local_11_FLOAT * local_10_FLOAT))); // type is FLOAT value type is FLOAT
                    thisRef.m_gamma = var80;
                    var var81 = thisRef.m_gamma; // type is FLOAT value type is FLOAT
                    if ((var81 == 0.0)) {
                        __label__ = 236;
                        break $S_202;
                    }
                    __label__ = 226;
                    }
                $M_236_226 : for(;;) switch (__label__) {
                    case 226 :
                    // NORMAL
                        var var84 = (1.0 / thisRef.m_gamma); // type is FLOAT value type is FLOAT
                        thisRef.m_gamma = var84;
                        __label__ = 236;
                        continue $M_236_226;
                    case 236 :
                    // NORMAL
                        $S_236 : {
                        // NORMAL
                            var var89 = ((local_11_FLOAT * local_10_FLOAT) * thisRef.m_gamma); // type is FLOAT value type is FLOAT
                            thisRef.m_beta = var89;
                            var var91 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3c2a6ffc
                            var local_12_REFERENCE = var91; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@b80d3c
                            var var93 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1430fba1
                            var var96 = local_12_REFERENCE.ojcVec2setojcVec2(local_12_REFERENCE,thisRef.m_localAnchorB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2f0305ae
                            var var98 = var96.ojcVec2subLocalojcVec2(var96,thisRef.m_localCenterB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@624b9533
                            ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var93,var98,thisRef.m_rB);
                            var var101 = thisRef.pool.ojcMat22popMat22(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@d715309
                            var local_13_REFERENCE = var101; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4d607e76
                            var var104 = local_13_REFERENCE.ex; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7af92c01
                            var var115 = ((thisRef.m_invMassB + ((thisRef.m_invIB * thisRef.m_rB.y) * thisRef.m_rB.y)) + thisRef.m_gamma); // type is FLOAT value type is FLOAT
                            var104.x = var115;
                            var var117 = local_13_REFERENCE.ex; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@44a5dc60
                            var var125 = (((-thisRef.m_invIB) * thisRef.m_rB.x) * thisRef.m_rB.y); // type is FLOAT value type is FLOAT
                            var117.y = var125;
                            var var127 = local_13_REFERENCE.ey; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@434b26e6
                            var var130 = local_13_REFERENCE.ex.y; // type is FLOAT value type is FLOAT
                            var127.x = var130;
                            var var132 = local_13_REFERENCE.ey; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@d967337
                            var var143 = ((thisRef.m_invMassB + ((thisRef.m_invIB * thisRef.m_rB.x) * thisRef.m_rB.x)) + thisRef.m_gamma); // type is FLOAT value type is FLOAT
                            var132.y = var143;
                            local_13_REFERENCE.VOIDinvertToOutojcMat22(local_13_REFERENCE,thisRef.m_mass);
                            var var148 = thisRef.m_C.ojcVec2setojcVec2(thisRef.m_C,local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3e3ccfa0
                            var var150 = var148.ojcVec2addLocalojcVec2(var148,thisRef.m_rB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@541052db
                            var var152 = var150.ojcVec2subLocalojcVec2(var150,thisRef.m_targetA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4e7632a9
                            var var155 = thisRef.m_C.ojcVec2mulLocalFLOAT(thisRef.m_C,thisRef.m_beta); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@70c7ff9b
                            local_5_FLOAT = (local_5_FLOAT * 0.98); // type is FLOAT value type is FLOAT
                            var var160 = data.step.warmStarting; // type is BOOLEAN value type is BOOLEAN
                            if ((var160 == 0)) {
                                __label__ = 562;
                                break $S_236;
                            }
                            __label__ = 479;
                            }
                        $M_479_562 : for(;;) switch (__label__) {
                            case 479 :
                            // NORMAL
                                var var164 = thisRef.m_impulse.ojcVec2mulLocalFLOAT(thisRef.m_impulse,data.step.dtRatio); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@285e6fec
                                var var165 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1ce107ec
                                var var171 = (var165.x + (thisRef.m_invMassB * thisRef.m_impulse.x)); // type is FLOAT value type is FLOAT
                                var165.x = var171;
                                var var172 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1ce107ec
                                var var178 = (var172.y + (thisRef.m_invMassB * thisRef.m_impulse.y)); // type is FLOAT value type is FLOAT
                                var172.y = var178;
                                var var179 = local_5_FLOAT; // type is FLOAT value type is FLOAT
                                var var180 = thisRef.m_invIB; // type is FLOAT value type is FLOAT
                                var var183 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.m_rB,thisRef.m_impulse); // type is FLOAT value type is FLOAT
                                local_5_FLOAT = (var179 + (var180 * var183)); // type is FLOAT value type is FLOAT
                                break $M_479_562;
                            case 562 :
                            // NORMAL
                                thisRef.m_impulse.VOIDsetZero(thisRef.m_impulse);
                                break $M_479_562;
                        }
                        var var190 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
                        var var191 = local_5_FLOAT; // type is FLOAT value type is FLOAT
                        var190.w = var191;
                        thisRef.pool.VOIDpushVec2INT(thisRef.pool,1);
                        thisRef.pool.VOIDpushMat22INT(thisRef.pool,1);
                        thisRef.pool.VOIDpushRotINT(thisRef.pool,1);
                        return;
                }
            case 180 :
            // NORMAL
                $S_180 : {
                // NORMAL
                    var var71 = (local_9_FLOAT + (local_11_FLOAT * local_10_FLOAT)); // type is FLOAT value type is FLOAT
                    if ((var71 > 1.1920929E-7)) {
                        __label__ = 202;
                        continue $M_202_180;
                    }
                    }
                var var73 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var73);
                throw var73;
        }
    },

    VOIDsolveVelocityConstraintsojdSolverData : function(thisRef,data) {
        var local_3_FLOAT = null; // type is FLOAT # of inits = 2
        var local_7_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_8_FLOAT = null; // type is FLOAT # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var2 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_2_REFERENCE = var2.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6a60af20
            var var7 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_3_FLOAT = var7.w; // type is FLOAT value type is FLOAT
            var var12 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@621d41b8
            var local_4_REFERENCE = var12; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3c4db25c
            ojcVec2.VOIDcrossToOutUnsafeFLOATojcVec2ojcVec2(local_3_FLOAT,thisRef.m_rB,local_4_REFERENCE);
            var var19 = local_4_REFERENCE.ojcVec2addLocalojcVec2(local_4_REFERENCE,local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2c59e73c
            var var21 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@43af4438
            local_5_REFERENCE = var21; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@36f77559
            var var24 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4b37dd74
            var local_6_REFERENCE = var24; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@12d12952
            var var28 = local_6_REFERENCE.ojcVec2setojcVec2(local_6_REFERENCE,thisRef.m_impulse); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1a39491c
            var var30 = var28.ojcVec2mulLocalFLOAT(var28,thisRef.m_gamma); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@793a2d60
            var var32 = var30.ojcVec2addLocalojcVec2(var30,thisRef.m_C); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@408d28fb
            var var34 = var32.ojcVec2addLocalojcVec2(var32,local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@352481e3
            var var35 = var34.ojcVec2negateLocal(var34); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@65855ff2
            ojcMat22.VOIDmulToOutUnsafeojcMat22ojcVec2ojcVec2(thisRef.m_mass,local_6_REFERENCE,local_5_REFERENCE);
            local_7_REFERENCE = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@12d12952
            var var43 = local_7_REFERENCE.ojcVec2setojcVec2(local_7_REFERENCE,thisRef.m_impulse); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4d7c3f0f
            var var46 = thisRef.m_impulse.ojcVec2addLocalojcVec2(thisRef.m_impulse,local_5_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@649f0cab
            local_8_FLOAT = (data.step.dt * thisRef.m_maxForce); // type is FLOAT value type is FLOAT
            var var54 = thisRef.m_impulse.FLOATlengthSquared(thisRef.m_impulse); // type is FLOAT value type is FLOAT
            var var57 = (local_8_FLOAT * local_8_FLOAT); // type is FLOAT value type is FLOAT
            if ((var54 <= var57)) {
                __label__ = 191;
                break $S_0;
            }
            __label__ = 173;
            }
        $M_191_173 : for(;;) switch (__label__) {
            case 191 :
            // NORMAL
                var var67 = local_5_REFERENCE.ojcVec2setojcVec2(local_5_REFERENCE,thisRef.m_impulse); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@75a5b242
                var var69 = var67.ojcVec2subLocalojcVec2(var67,local_7_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3a1009cb
                var var70 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@58ab6962
                var var76 = (var70.x + (thisRef.m_invMassB * local_5_REFERENCE.x)); // type is FLOAT value type is FLOAT
                var70.x = var76;
                var var77 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@58ab6962
                var var83 = (var77.y + (thisRef.m_invMassB * local_5_REFERENCE.y)); // type is FLOAT value type is FLOAT
                var77.y = var83;
                var var84 = local_3_FLOAT; // type is FLOAT value type is FLOAT
                var var85 = thisRef.m_invIB; // type is FLOAT value type is FLOAT
                var var88 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.m_rB,local_5_REFERENCE); // type is FLOAT value type is FLOAT
                local_3_FLOAT = (var84 + (var85 * var88)); // type is FLOAT value type is FLOAT
                var var94 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
                var var95 = local_3_FLOAT; // type is FLOAT value type is FLOAT
                var94.w = var95;
                thisRef.pool.VOIDpushVec2INT(thisRef.pool,3);
                return;
            case 173 :
            // NORMAL
                var var59 = thisRef.m_impulse; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1638ddc1
                var var60 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                var var62 = thisRef.m_impulse.FLOATlength(thisRef.m_impulse); // type is FLOAT value type is FLOAT
                var var64 = var59.ojcVec2mulLocalFLOAT(var59,(var60 / var62)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@a5e71f9
                __label__ = 191;
                continue $M_191_173;
        }
    },

    BOOLEANsolvePositionConstraintsojdSolverData : function(thisRef,data) {
        var __label__ = null;
        return 1;
    },

    classInitCheck : function() {
        if (!ojdjMouseJoint.__initialized) {
            ojdjMouseJoint.__initialized = true;
            var thePrototype = ojdjMouseJoint.Create.prototype;
            thePrototype.instanceOf = ojdjMouseJoint.instanceOf;
            thePrototype.ClassgetClass = ojdjMouseJoint.ClassgetClass;
            thePrototype.BOOLEANsolvePositionConstraintsojdSolverData = ojdjMouseJoint.BOOLEANsolvePositionConstraintsojdSolverData;
            thePrototype.VOIDsolveVelocityConstraintsojdSolverData = ojdjMouseJoint.VOIDsolveVelocityConstraintsojdSolverData;
            thePrototype.VOIDinitVelocityConstraintsojdSolverData = ojdjMouseJoint.VOIDinitVelocityConstraintsojdSolverData;
            thePrototype.BOOLEANgetCollideConnected = ojdjJoint.BOOLEANgetCollideConnected;
            thePrototype.ojdBodygetBodyB = ojdjJoint.ojdBodygetBodyB;
            thePrototype.ojdBodygetBodyA = ojdjJoint.ojdBodygetBodyA;
            thePrototype.ojdjJointTypegetType = ojdjJoint.ojdjJointTypegetType;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojdjJoint.classInitCheck();
            jlObject.classInitCheck();
            ojdjMouseJoint.VOIDclinit();
        }
    },

};

var ojdjMouseJointDef = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 153,
    __implementedTypes : [1,149,153],

    Create : function() {
        this.type = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.userData = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.bodyA = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.bodyB = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.collideConnected = false; // declared in org.jbox2d.dynamics.joints.JointDef
        this.target = null; // declared in org.jbox2d.dynamics.joints.MouseJointDef
        this.maxForce = 0; // declared in org.jbox2d.dynamics.joints.MouseJointDef
        this.frequencyHz = 0; // declared in org.jbox2d.dynamics.joints.MouseJointDef
        this.dampingRatio = 0; // declared in org.jbox2d.dynamics.joints.MouseJointDef
    },

    instanceOf : function(aType) {
        return ojdjMouseJointDef.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdjMouseJointDef;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        ojdjJointDef.VOIDinit(thisRef);
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var0);
        thisRef.target = var0;
        var var1 = ojdjJointType.MOUSE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4c5c3590
        thisRef.type = var1;
        var var3 = thisRef.target.ojcVec2setFLOATFLOAT(thisRef.target,0.0,0.0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@67669164
        thisRef.maxForce = 0.0;
        thisRef.frequencyHz = 5.0;
        thisRef.dampingRatio = 0.7;
        return;
    },

    classInitCheck : function() {
        if (!ojdjMouseJointDef.__initialized) {
            ojdjMouseJointDef.__initialized = true;
            var thePrototype = ojdjMouseJointDef.Create.prototype;
            thePrototype.instanceOf = ojdjMouseJointDef.instanceOf;
            thePrototype.ClassgetClass = ojdjMouseJointDef.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojdjJointDef.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var ojdjDistanceJoint = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 154,
    __implementedTypes : [154,1,117],
    $assertionsDisabled : false, // declared in org.jbox2d.dynamics.joints.Joint

    Create : function() {
        this.pool = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_type = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_prev = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_next = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_bodyA = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_bodyB = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_collideConnected = false; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_islandFlag = false; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_userData = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_edgeA = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_edgeB = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_u = null; // declared in org.jbox2d.dynamics.joints.DistanceJoint
        this.m_rA = null; // declared in org.jbox2d.dynamics.joints.DistanceJoint
        this.m_rB = null; // declared in org.jbox2d.dynamics.joints.DistanceJoint
        this.m_localCenterA = null; // declared in org.jbox2d.dynamics.joints.DistanceJoint
        this.m_localCenterB = null; // declared in org.jbox2d.dynamics.joints.DistanceJoint
        this.m_localAnchorA = null; // declared in org.jbox2d.dynamics.joints.DistanceJoint
        this.m_localAnchorB = null; // declared in org.jbox2d.dynamics.joints.DistanceJoint
        this.m_length = 0; // declared in org.jbox2d.dynamics.joints.DistanceJoint
        this.m_impulse = 0; // declared in org.jbox2d.dynamics.joints.DistanceJoint
        this.m_frequencyHz = 0; // declared in org.jbox2d.dynamics.joints.DistanceJoint
        this.m_dampingRatio = 0; // declared in org.jbox2d.dynamics.joints.DistanceJoint
        this.m_gamma = 0; // declared in org.jbox2d.dynamics.joints.DistanceJoint
        this.m_bias = 0; // declared in org.jbox2d.dynamics.joints.DistanceJoint
        this.m_indexA = 0; // declared in org.jbox2d.dynamics.joints.DistanceJoint
        this.m_indexB = 0; // declared in org.jbox2d.dynamics.joints.DistanceJoint
        this.m_invMassA = 0; // declared in org.jbox2d.dynamics.joints.DistanceJoint
        this.m_invMassB = 0; // declared in org.jbox2d.dynamics.joints.DistanceJoint
        this.m_invIA = 0; // declared in org.jbox2d.dynamics.joints.DistanceJoint
        this.m_invIB = 0; // declared in org.jbox2d.dynamics.joints.DistanceJoint
        this.m_mass = 0; // declared in org.jbox2d.dynamics.joints.DistanceJoint
    },

    instanceOf : function(aType) {
        return ojdjDistanceJoint.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdjDistanceJoint;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    ojdjJointcreateojdWorldojdjJointDef : function(p0,p1) {
         return ojdjJoint.ojdjJointcreateojdWorldojdjJointDef(p0,p1);
    },

    VOIDinitojpIWorldPoolojdjDistanceJointDef : function(thisRef,argWorld,def) {
        var __label__ = null;
        ojdjJoint.VOIDinitojpIWorldPoolojdjJointDef(thisRef,argWorld,def);
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var0);
        thisRef.m_u = var0;
        var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var1);
        thisRef.m_rA = var1;
        var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var2);
        thisRef.m_rB = var2;
        var var3 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var3);
        thisRef.m_localCenterA = var3;
        var var4 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var4);
        thisRef.m_localCenterB = var4;
        var var6 = def.localAnchorA.ojcVec2clone(def.localAnchorA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5a234a5e
        thisRef.m_localAnchorA = var6;
        var var8 = def.localAnchorB.ojcVec2clone(def.localAnchorB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@75b01efc
        thisRef.m_localAnchorB = var8;
        var var9 = def.length; // type is FLOAT value type is FLOAT
        thisRef.m_length = var9;
        thisRef.m_impulse = 0.0;
        var var10 = def.frequencyHz; // type is FLOAT value type is FLOAT
        thisRef.m_frequencyHz = var10;
        var var11 = def.dampingRatio; // type is FLOAT value type is FLOAT
        thisRef.m_dampingRatio = var11;
        thisRef.m_gamma = 0.0;
        thisRef.m_bias = 0.0;
        return;
    },

    VOIDinitVelocityConstraintsojdSolverData : function(thisRef,data) {
        var local_16_FLOAT = null; // type is FLOAT # of inits = 1
        var local_12_FLOAT = null; // type is FLOAT # of inits = 1
        var var151 = null; // type is FLOAT # of inits = 2
        var local_20_FLOAT = null; // type is FLOAT # of inits = 1
        var local_8_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_19_FLOAT = null; // type is FLOAT # of inits = 1
        var local_9_FLOAT = null; // type is FLOAT # of inits = 2
        var var193 = null; // type is FLOAT # of inits = 2
        var local_5_FLOAT = null; // type is FLOAT # of inits = 2
        var local_15_FLOAT = null; // type is FLOAT # of inits = 2
        var var209 = null; // type is FLOAT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var1 = thisRef.m_bodyA.m_islandIndex; // type is INT value type is INT
            thisRef.m_indexA = var1;
            var var3 = thisRef.m_bodyB.m_islandIndex; // type is INT value type is INT
            thisRef.m_indexB = var3;
            var var8 = thisRef.m_localCenterA.ojcVec2setojcVec2(thisRef.m_localCenterA,thisRef.m_bodyA.m_sweep.localCenter); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@965db24
            var var13 = thisRef.m_localCenterB.ojcVec2setojcVec2(thisRef.m_localCenterB,thisRef.m_bodyB.m_sweep.localCenter); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3b28c30a
            var var15 = thisRef.m_bodyA.m_invMass; // type is FLOAT value type is FLOAT
            thisRef.m_invMassA = var15;
            var var17 = thisRef.m_bodyB.m_invMass; // type is FLOAT value type is FLOAT
            thisRef.m_invMassB = var17;
            var var19 = thisRef.m_bodyA.m_invI; // type is FLOAT value type is FLOAT
            thisRef.m_invIA = var19;
            var var21 = thisRef.m_bodyB.m_invI; // type is FLOAT value type is FLOAT
            thisRef.m_invIB = var21;
            var var24 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            var local_2_REFERENCE = var24.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5322ec9a
            var var29 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            var local_3_FLOAT = var29.a; // type is FLOAT value type is FLOAT
            var var35 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_4_REFERENCE = var35.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7bb9c653
            var var40 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_5_FLOAT = var40.w; // type is FLOAT value type is FLOAT
            var var46 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            var local_6_REFERENCE = var46.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5ca29efb
            var var51 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            var local_7_FLOAT = var51.a; // type is FLOAT value type is FLOAT
            var var57 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_8_REFERENCE = var57.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@216f36f6
            var var62 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_9_FLOAT = var62.w; // type is FLOAT value type is FLOAT
            var var67 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@656d587d
            var local_10_REFERENCE = var67; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@50d391dd
            var var70 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@18ce987a
            var local_11_REFERENCE = var70; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@40ced513
            var var74 = local_10_REFERENCE.ojcRotsetFLOAT(local_10_REFERENCE,local_3_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4fefc3c7
            var var77 = local_11_REFERENCE.ojcRotsetFLOAT(local_11_REFERENCE,local_7_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3fefe9e
            var var78 = local_10_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@50d391dd
            var var81 = thisRef.m_u.ojcVec2setojcVec2(thisRef.m_u,thisRef.m_localAnchorA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6f1fabd3
            var var83 = var81.ojcVec2subLocalojcVec2(var81,thisRef.m_localCenterA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@594f8d6e
            ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var78,var83,thisRef.m_rA);
            var var85 = local_11_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@40ced513
            var var88 = thisRef.m_u.ojcVec2setojcVec2(thisRef.m_u,thisRef.m_localAnchorB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@680f8c7b
            var var90 = var88.ojcVec2subLocalojcVec2(var88,thisRef.m_localCenterB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1c7195ea
            ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var85,var90,thisRef.m_rB);
            var var94 = thisRef.m_u.ojcVec2setojcVec2(thisRef.m_u,local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@ea2f484
            var var96 = var94.ojcVec2addLocalojcVec2(var94,thisRef.m_rB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2ba32cc3
            var var98 = var96.ojcVec2subLocalojcVec2(var96,local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3f5b1198
            var var100 = var98.ojcVec2subLocalojcVec2(var98,thisRef.m_rA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2f951d5c
            thisRef.pool.VOIDpushRotINT(thisRef.pool,2);
            var var103 = thisRef.m_u.FLOATlength(thisRef.m_u); // type is FLOAT value type is FLOAT
            local_12_FLOAT = var103; // type is FLOAT value type is FLOAT
            var var106 = local_12_FLOAT; // type is FLOAT value type is FLOAT
            if ((var106 <= 0.005)) {
                __label__ = 393;
                break $S_0;
            }
            __label__ = 358;
            }
        $M_358_393 : for(;;) switch (__label__) {
            case 358 :
            // NORMAL
                var var108 = thisRef.m_u; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@368adafe
                var var112 = (var108.x * (1.0 / local_12_FLOAT)); // type is FLOAT value type is FLOAT
                var108.x = var112;
                var var113 = thisRef.m_u; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@47d3dd8
                var var117 = (var113.y * (1.0 / local_12_FLOAT)); // type is FLOAT value type is FLOAT
                var113.y = var117;
                break $M_358_393;
            case 393 :
            // NORMAL
                var var119 = thisRef.m_u.ojcVec2setFLOATFLOAT(thisRef.m_u,0.0,0.0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@63cd2b1e
                break $M_358_393;
        }
        $S_403 : {
        // NORMAL
            var var122 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.m_rA,thisRef.m_u); // type is FLOAT value type is FLOAT
            var local_13_FLOAT = var122; // type is FLOAT value type is FLOAT
            var var127 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.m_rB,thisRef.m_u); // type is FLOAT value type is FLOAT
            var local_14_FLOAT = var127; // type is FLOAT value type is FLOAT
            local_15_FLOAT = (((thisRef.m_invMassA + ((thisRef.m_invIA * local_13_FLOAT) * local_13_FLOAT)) + thisRef.m_invMassB) + ((thisRef.m_invIB * local_14_FLOAT) * local_14_FLOAT)); // type is FLOAT value type is FLOAT
            var var147 = local_15_FLOAT; // type is FLOAT value type is FLOAT
            if ((var147 == 0.0)) {
                __label__ = 477;
                break $S_403;
            }
            __label__ = 470;
            }
        $M_477_470 : for(;;) switch (__label__) {
            case 470 :
            // NORMAL
                var151 = (1.0 / local_15_FLOAT); // type is FLOAT value type is FLOAT
                break $M_477_470;
            case 477 :
            // NORMAL
                var151 = 0.0; // type is FLOAT value type is FLOAT
                break $M_477_470;
        }
        $S_478 : {
        // NORMAL
            thisRef.m_mass = var151;
            var var152 = thisRef.m_frequencyHz; // type is FLOAT value type is FLOAT
            if ((var152 <= 0.0)) {
                __label__ = 631;
                break $S_478;
            }
            __label__ = 490;
            }
        $M_631_490 : for(;;) switch (__label__) {
            case 631 :
            // NORMAL
                thisRef.m_gamma = 0.0;
                thisRef.m_bias = 0.0;
                break $M_631_490;
            case 490 :
            // NORMAL
                $S_490 : {
                // NORMAL
                    local_16_FLOAT = (local_12_FLOAT - thisRef.m_length); // type is FLOAT value type is FLOAT
                    var local_17_FLOAT = (6.2831855 * thisRef.m_frequencyHz); // type is FLOAT value type is FLOAT
                    var local_18_FLOAT = (((2.0 * thisRef.m_mass) * thisRef.m_dampingRatio) * local_17_FLOAT); // type is FLOAT value type is FLOAT
                    local_19_FLOAT = ((thisRef.m_mass * local_17_FLOAT) * local_17_FLOAT); // type is FLOAT value type is FLOAT
                    local_20_FLOAT = data.step.dt; // type is FLOAT value type is FLOAT
                    var var188 = (local_20_FLOAT * (local_18_FLOAT + (local_20_FLOAT * local_19_FLOAT))); // type is FLOAT value type is FLOAT
                    thisRef.m_gamma = var188;
                    var var189 = thisRef.m_gamma; // type is FLOAT value type is FLOAT
                    if ((var189 == 0.0)) {
                        __label__ = 579;
                        break $S_490;
                    }
                    __label__ = 570;
                    }
                $M_579_570 : for(;;) switch (__label__) {
                    case 570 :
                    // NORMAL
                        var193 = (1.0 / thisRef.m_gamma); // type is FLOAT value type is FLOAT
                        break $M_579_570;
                    case 579 :
                    // NORMAL
                        var193 = 0.0; // type is FLOAT value type is FLOAT
                        break $M_579_570;
                }
                $S_580 : {
                // NORMAL
                    thisRef.m_gamma = var193;
                    var var200 = (((local_16_FLOAT * local_20_FLOAT) * local_19_FLOAT) * thisRef.m_gamma); // type is FLOAT value type is FLOAT
                    thisRef.m_bias = var200;
                    local_15_FLOAT = (local_15_FLOAT + thisRef.m_gamma); // type is FLOAT value type is FLOAT
                    var var205 = local_15_FLOAT; // type is FLOAT value type is FLOAT
                    if ((var205 == 0.0)) {
                        __label__ = 624;
                        break $S_580;
                    }
                    __label__ = 617;
                    }
                $M_617_624 : for(;;) switch (__label__) {
                    case 617 :
                    // NORMAL
                        var209 = (1.0 / local_15_FLOAT); // type is FLOAT value type is FLOAT
                        break $M_617_624;
                    case 624 :
                    // NORMAL
                        var209 = 0.0; // type is FLOAT value type is FLOAT
                        break $M_617_624;
                }
                thisRef.m_mass = var209;
                break $M_631_490;
        }
        $S_641 : {
        // NORMAL
            var var211 = data.step.warmStarting; // type is BOOLEAN value type is BOOLEAN
            if ((var211 == 0)) {
                __label__ = 826;
                break $S_641;
            }
            __label__ = 651;
            }
        $M_826_651 : for(;;) switch (__label__) {
            case 651 :
            // NORMAL
                var var215 = (thisRef.m_impulse * data.step.dtRatio); // type is FLOAT value type is FLOAT
                thisRef.m_impulse = var215;
                var var217 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@64b5b5c6
                var local_16_REFERENCE = var217; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@408de84
                var var221 = local_16_REFERENCE.ojcVec2setojcVec2(local_16_REFERENCE,thisRef.m_u); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@69f6b020
                var var223 = var221.ojcVec2mulLocalFLOAT(var221,thisRef.m_impulse); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@63e9f3db
                var var224 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4bba9e8
                var var230 = (var224.x - (thisRef.m_invMassA * local_16_REFERENCE.x)); // type is FLOAT value type is FLOAT
                var224.x = var230;
                var var231 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4bba9e8
                var var237 = (var231.y - (thisRef.m_invMassA * local_16_REFERENCE.y)); // type is FLOAT value type is FLOAT
                var231.y = var237;
                var var238 = local_5_FLOAT; // type is FLOAT value type is FLOAT
                var var239 = thisRef.m_invIA; // type is FLOAT value type is FLOAT
                var var242 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.m_rA,local_16_REFERENCE); // type is FLOAT value type is FLOAT
                local_5_FLOAT = (var238 - (var239 * var242)); // type is FLOAT value type is FLOAT
                var var246 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@18ca1cfa
                var var252 = (var246.x + (thisRef.m_invMassB * local_16_REFERENCE.x)); // type is FLOAT value type is FLOAT
                var246.x = var252;
                var var253 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@18ca1cfa
                var var259 = (var253.y + (thisRef.m_invMassB * local_16_REFERENCE.y)); // type is FLOAT value type is FLOAT
                var253.y = var259;
                var var260 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                var var261 = thisRef.m_invIB; // type is FLOAT value type is FLOAT
                var var264 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.m_rB,local_16_REFERENCE); // type is FLOAT value type is FLOAT
                local_9_FLOAT = (var260 + (var261 * var264)); // type is FLOAT value type is FLOAT
                thisRef.pool.VOIDpushVec2INT(thisRef.pool,1);
                break $M_826_651;
            case 826 :
            // NORMAL
                thisRef.m_impulse = 0.0;
                break $M_826_651;
        }
        var var271 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
        var var272 = local_5_FLOAT; // type is FLOAT value type is FLOAT
        var271.w = var272;
        var var275 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
        var var276 = local_9_FLOAT; // type is FLOAT value type is FLOAT
        var275.w = var276;
        return;
    },

    VOIDsolveVelocityConstraintsojdSolverData : function(thisRef,data) {
        var __label__ = null;
        var var2 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
        var local_2_REFERENCE = var2.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@580fc3d1
        var var7 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
        var local_3_FLOAT = var7.w; // type is FLOAT value type is FLOAT
        var var13 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
        var local_4_REFERENCE = var13.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@547925a5
        var var18 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
        var local_5_FLOAT = var18.w; // type is FLOAT value type is FLOAT
        var var23 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1bf5fad6
        var local_6_REFERENCE = var23; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1cf806fa
        var var26 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3acf4fff
        var local_7_REFERENCE = var26; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2786010e
        ojcVec2.VOIDcrossToOutUnsafeFLOATojcVec2ojcVec2(local_3_FLOAT,thisRef.m_rA,local_6_REFERENCE);
        var var33 = local_6_REFERENCE.ojcVec2addLocalojcVec2(local_6_REFERENCE,local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@13917c62
        ojcVec2.VOIDcrossToOutUnsafeFLOATojcVec2ojcVec2(local_5_FLOAT,thisRef.m_rB,local_7_REFERENCE);
        var var39 = local_7_REFERENCE.ojcVec2addLocalojcVec2(local_7_REFERENCE,local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4f02773c
        var var40 = thisRef.m_u; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@f726994
        var var43 = local_7_REFERENCE.ojcVec2subLocalojcVec2(local_7_REFERENCE,local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@186b9705
        var var44 = ojcVec2.FLOATdotojcVec2ojcVec2(var40,var43); // type is FLOAT value type is FLOAT
        var local_8_FLOAT = var44; // type is FLOAT value type is FLOAT
        var local_9_FLOAT = ((-thisRef.m_mass) * ((local_8_FLOAT + thisRef.m_bias) + (thisRef.m_gamma * thisRef.m_impulse))); // type is FLOAT value type is FLOAT
        var var61 = (thisRef.m_impulse + local_9_FLOAT); // type is FLOAT value type is FLOAT
        thisRef.m_impulse = var61;
        var local_10_FLOAT = (local_9_FLOAT * thisRef.m_u.x); // type is FLOAT value type is FLOAT
        var local_11_FLOAT = (local_9_FLOAT * thisRef.m_u.y); // type is FLOAT value type is FLOAT
        var var74 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@19a06
        var var79 = (var74.x - (thisRef.m_invMassA * local_10_FLOAT)); // type is FLOAT value type is FLOAT
        var74.x = var79;
        var var80 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@19a06
        var var85 = (var80.y - (thisRef.m_invMassA * local_11_FLOAT)); // type is FLOAT value type is FLOAT
        var80.y = var85;
        var local_3_FLOAT = (local_3_FLOAT - (thisRef.m_invIA * ((thisRef.m_rA.x * local_11_FLOAT) - (thisRef.m_rA.y * local_10_FLOAT)))); // type is FLOAT value type is FLOAT
        var var100 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5c66a6ad
        var var105 = (var100.x + (thisRef.m_invMassB * local_10_FLOAT)); // type is FLOAT value type is FLOAT
        var100.x = var105;
        var var106 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5c66a6ad
        var var111 = (var106.y + (thisRef.m_invMassB * local_11_FLOAT)); // type is FLOAT value type is FLOAT
        var106.y = var111;
        var local_5_FLOAT = (local_5_FLOAT + (thisRef.m_invIB * ((thisRef.m_rB.x * local_11_FLOAT) - (thisRef.m_rB.y * local_10_FLOAT)))); // type is FLOAT value type is FLOAT
        var var128 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
        var var129 = local_3_FLOAT; // type is FLOAT value type is FLOAT
        var128.w = var129;
        var var132 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
        var var133 = local_5_FLOAT; // type is FLOAT value type is FLOAT
        var132.w = var133;
        thisRef.pool.VOIDpushVec2INT(thisRef.pool,2);
        return;
    },

    BOOLEANsolvePositionConstraintsojdSolverData : function(thisRef,data) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.m_frequencyHz; // type is FLOAT value type is FLOAT
            if ((var0 <= 0.0)) {
                break $S_0;
            }
            return 1;
            }
        $S_11 : {
        // NORMAL
            var var3 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@57d937c
            var local_2_REFERENCE = var3; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@79ad80ba
            var var6 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5b508578
            var local_3_REFERENCE = var6; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@f8d463e
            var var9 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6682c2c0
            var local_4_REFERENCE = var9; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@733f36fa
            var var12 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2c9b06a0
            var local_5_REFERENCE = var12; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@49c219bb
            var var15 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@39264681
            var local_6_REFERENCE = var15; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@33242fb9
            var var19 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            var local_7_REFERENCE = var19.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@47fe917b
            var var24 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            var local_8_FLOAT = var24.a; // type is FLOAT value type is FLOAT
            var var30 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            var local_9_REFERENCE = var30.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1ea847fe
            var var35 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            var local_10_FLOAT = var35.a; // type is FLOAT value type is FLOAT
            var var41 = local_2_REFERENCE.ojcRotsetFLOAT(local_2_REFERENCE,local_8_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@15b108e4
            var var44 = local_3_REFERENCE.ojcRotsetFLOAT(local_3_REFERENCE,local_10_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@77aa40c
            var var45 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@79ad80ba
            var var48 = local_6_REFERENCE.ojcVec2setojcVec2(local_6_REFERENCE,thisRef.m_localAnchorA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@343c98d1
            var var50 = var48.ojcVec2subLocalojcVec2(var48,thisRef.m_localCenterA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6877be1f
            ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var45,var50,local_4_REFERENCE);
            var var52 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@f8d463e
            var var55 = local_6_REFERENCE.ojcVec2setojcVec2(local_6_REFERENCE,thisRef.m_localAnchorB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@759c7ddd
            var var57 = var55.ojcVec2subLocalojcVec2(var55,thisRef.m_localCenterB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2714fda6
            ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var52,var57,local_5_REFERENCE);
            var var61 = local_6_REFERENCE.ojcVec2setojcVec2(local_6_REFERENCE,local_9_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@773e1385
            var var63 = var61.ojcVec2addLocalojcVec2(var61,local_5_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@22eccc3b
            var var65 = var63.ojcVec2subLocalojcVec2(var63,local_7_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@34883f2e
            var var67 = var65.ojcVec2subLocalojcVec2(var65,local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@34f11dd4
            var var69 = local_6_REFERENCE.FLOATnormalize(local_6_REFERENCE); // type is FLOAT value type is FLOAT
            var local_11_FLOAT = var69; // type is FLOAT value type is FLOAT
            var local_12_FLOAT = (local_11_FLOAT - thisRef.m_length); // type is FLOAT value type is FLOAT
            var var78 = ojcMathUtils.FLOATclampFLOATFLOATFLOAT(local_12_FLOAT,-0.2,0.2); // type is FLOAT value type is FLOAT
            var local_12_FLOAT = var78; // type is FLOAT value type is FLOAT
            var local_13_FLOAT = ((-thisRef.m_mass) * local_12_FLOAT); // type is FLOAT value type is FLOAT
            var local_14_FLOAT = (local_13_FLOAT * local_6_REFERENCE.x); // type is FLOAT value type is FLOAT
            var local_15_FLOAT = (local_13_FLOAT * local_6_REFERENCE.y); // type is FLOAT value type is FLOAT
            var var98 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@335482f4
            var var103 = (var98.x - (thisRef.m_invMassA * local_14_FLOAT)); // type is FLOAT value type is FLOAT
            var98.x = var103;
            var var104 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@335482f4
            var var109 = (var104.y - (thisRef.m_invMassA * local_15_FLOAT)); // type is FLOAT value type is FLOAT
            var104.y = var109;
            var local_8_FLOAT = (local_8_FLOAT - (thisRef.m_invIA * ((local_4_REFERENCE.x * local_15_FLOAT) - (local_4_REFERENCE.y * local_14_FLOAT)))); // type is FLOAT value type is FLOAT
            var var124 = local_9_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@771d1db1
            var var129 = (var124.x + (thisRef.m_invMassB * local_14_FLOAT)); // type is FLOAT value type is FLOAT
            var124.x = var129;
            var var130 = local_9_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@771d1db1
            var var135 = (var130.y + (thisRef.m_invMassB * local_15_FLOAT)); // type is FLOAT value type is FLOAT
            var130.y = var135;
            var local_10_FLOAT = (local_10_FLOAT + (thisRef.m_invIB * ((local_5_REFERENCE.x * local_15_FLOAT) - (local_5_REFERENCE.y * local_14_FLOAT)))); // type is FLOAT value type is FLOAT
            var var152 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            var var153 = local_8_FLOAT; // type is FLOAT value type is FLOAT
            var152.a = var153;
            var var156 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            var var157 = local_10_FLOAT; // type is FLOAT value type is FLOAT
            var156.a = var157;
            thisRef.pool.VOIDpushVec2INT(thisRef.pool,3);
            thisRef.pool.VOIDpushRotINT(thisRef.pool,2);
            var var161 = ojcMathUtils.FLOATabsFLOAT(local_12_FLOAT); // type is FLOAT value type is FLOAT
            if ((var161 >= 0.005)) {
                __label__ = 443;
                break $S_11;
            }
            __label__ = 439;
            }
        for(;;) switch (__label__) {
            case 439 :
            // NORMAL
                var var163 = 1; // type is INT value type is INT
                return var163;
            case 443 :
            // NORMAL
                var var163 = 0; // type is INT value type is INT
                return var163;
        }
    },

    classInitCheck : function() {
        if (!ojdjDistanceJoint.__initialized) {
            ojdjDistanceJoint.__initialized = true;
            var thePrototype = ojdjDistanceJoint.Create.prototype;
            thePrototype.instanceOf = ojdjDistanceJoint.instanceOf;
            thePrototype.ClassgetClass = ojdjDistanceJoint.ClassgetClass;
            thePrototype.BOOLEANsolvePositionConstraintsojdSolverData = ojdjDistanceJoint.BOOLEANsolvePositionConstraintsojdSolverData;
            thePrototype.VOIDsolveVelocityConstraintsojdSolverData = ojdjDistanceJoint.VOIDsolveVelocityConstraintsojdSolverData;
            thePrototype.VOIDinitVelocityConstraintsojdSolverData = ojdjDistanceJoint.VOIDinitVelocityConstraintsojdSolverData;
            thePrototype.BOOLEANgetCollideConnected = ojdjJoint.BOOLEANgetCollideConnected;
            thePrototype.ojdBodygetBodyB = ojdjJoint.ojdBodygetBodyB;
            thePrototype.ojdBodygetBodyA = ojdjJoint.ojdBodygetBodyA;
            thePrototype.ojdjJointTypegetType = ojdjJoint.ojdjJointTypegetType;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojdjJoint.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var ojdjDistanceJointDef = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 155,
    __implementedTypes : [1,155,149],

    Create : function() {
        this.type = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.userData = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.bodyA = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.bodyB = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.collideConnected = false; // declared in org.jbox2d.dynamics.joints.JointDef
        this.localAnchorA = null; // declared in org.jbox2d.dynamics.joints.DistanceJointDef
        this.localAnchorB = null; // declared in org.jbox2d.dynamics.joints.DistanceJointDef
        this.length = 0; // declared in org.jbox2d.dynamics.joints.DistanceJointDef
        this.frequencyHz = 0; // declared in org.jbox2d.dynamics.joints.DistanceJointDef
        this.dampingRatio = 0; // declared in org.jbox2d.dynamics.joints.DistanceJointDef
    },

    instanceOf : function(aType) {
        return ojdjDistanceJointDef.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdjDistanceJointDef;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        ojdjJointDef.VOIDinit(thisRef);
        var var0 = ojdjJointType.DISTANCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7dba5a57
        thisRef.type = var0;
        var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinitFLOATFLOAT(var1,0.0,0.0);
        thisRef.localAnchorA = var1;
        var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinitFLOATFLOAT(var2,0.0,0.0);
        thisRef.localAnchorB = var2;
        thisRef.length = 1.0;
        thisRef.frequencyHz = 0.0;
        thisRef.dampingRatio = 0.0;
        return;
    },

    VOIDinitializeojdBodyojdBodyojcVec2ojcVec2 : function(thisRef,b1,b2,anchor1,anchor2) {
        var __label__ = null;
        thisRef.bodyA = b1;
        thisRef.bodyB = b2;
        var var0 = thisRef.localAnchorA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5842f15f
        var var2 = thisRef.bodyA.ojcVec2getLocalPointojcVec2(thisRef.bodyA,anchor1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2ef2bd3d
        var var3 = var0.ojcVec2setojcVec2(var0,var2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3f5e72db
        var var4 = thisRef.localAnchorB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5d9116ae
        var var6 = thisRef.bodyB.ojcVec2getLocalPointojcVec2(thisRef.bodyB,anchor2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1216dc4a
        var var7 = var4.ojcVec2setojcVec2(var4,var6); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@29b69060
        var var8 = anchor2.ojcVec2subojcVec2(anchor2,anchor1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6532e727
        var local_5_REFERENCE = var8; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@30c3b949
        var var11 = local_5_REFERENCE.FLOATlength(local_5_REFERENCE); // type is FLOAT value type is FLOAT
        thisRef.length = var11;
        return;
    },

    classInitCheck : function() {
        if (!ojdjDistanceJointDef.__initialized) {
            ojdjDistanceJointDef.__initialized = true;
            var thePrototype = ojdjDistanceJointDef.Create.prototype;
            thePrototype.instanceOf = ojdjDistanceJointDef.instanceOf;
            thePrototype.ClassgetClass = ojdjDistanceJointDef.ClassgetClass;
            thePrototype.VOIDinitializeojdBodyojdBodyojcVec2ojcVec2 = ojdjDistanceJointDef.VOIDinitializeojdBodyojdBodyojcVec2ojcVec2;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojdjJointDef.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var ojdjPrismaticJoint = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 156,
    __implementedTypes : [1,117,156],
    $assertionsDisabled : false, // declared in org.jbox2d.dynamics.joints.Joint
    $assertionsDisabled : false, // declared in org.jbox2d.dynamics.joints.PrismaticJoint

    Create : function() {
        this.pool = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_type = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_prev = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_next = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_bodyA = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_bodyB = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_collideConnected = false; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_islandFlag = false; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_userData = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_edgeA = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_edgeB = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_localCenterA = null; // declared in org.jbox2d.dynamics.joints.PrismaticJoint
        this.m_localCenterB = null; // declared in org.jbox2d.dynamics.joints.PrismaticJoint
        this.m_localAnchorA = null; // declared in org.jbox2d.dynamics.joints.PrismaticJoint
        this.m_localAnchorB = null; // declared in org.jbox2d.dynamics.joints.PrismaticJoint
        this.m_localXAxisA = null; // declared in org.jbox2d.dynamics.joints.PrismaticJoint
        this.m_localYAxisA = null; // declared in org.jbox2d.dynamics.joints.PrismaticJoint
        this.m_referenceAngle = 0; // declared in org.jbox2d.dynamics.joints.PrismaticJoint
        this.m_impulse = null; // declared in org.jbox2d.dynamics.joints.PrismaticJoint
        this.m_motorMass = 0; // declared in org.jbox2d.dynamics.joints.PrismaticJoint
        this.m_motorImpulse = 0; // declared in org.jbox2d.dynamics.joints.PrismaticJoint
        this.m_lowerTranslation = 0; // declared in org.jbox2d.dynamics.joints.PrismaticJoint
        this.m_upperTranslation = 0; // declared in org.jbox2d.dynamics.joints.PrismaticJoint
        this.m_maxMotorForce = 0; // declared in org.jbox2d.dynamics.joints.PrismaticJoint
        this.m_motorSpeed = 0; // declared in org.jbox2d.dynamics.joints.PrismaticJoint
        this.m_enableLimit = false; // declared in org.jbox2d.dynamics.joints.PrismaticJoint
        this.m_enableMotor = false; // declared in org.jbox2d.dynamics.joints.PrismaticJoint
        this.m_limitState = null; // declared in org.jbox2d.dynamics.joints.PrismaticJoint
        this.m_K = null; // declared in org.jbox2d.dynamics.joints.PrismaticJoint
        this.m_axis = null; // declared in org.jbox2d.dynamics.joints.PrismaticJoint
        this.m_perp = null; // declared in org.jbox2d.dynamics.joints.PrismaticJoint
        this.m_indexA = 0; // declared in org.jbox2d.dynamics.joints.PrismaticJoint
        this.m_indexB = 0; // declared in org.jbox2d.dynamics.joints.PrismaticJoint
        this.m_invMassA = 0; // declared in org.jbox2d.dynamics.joints.PrismaticJoint
        this.m_invMassB = 0; // declared in org.jbox2d.dynamics.joints.PrismaticJoint
        this.m_invIA = 0; // declared in org.jbox2d.dynamics.joints.PrismaticJoint
        this.m_invIB = 0; // declared in org.jbox2d.dynamics.joints.PrismaticJoint
        this.m_a1 = 0; // declared in org.jbox2d.dynamics.joints.PrismaticJoint
        this.m_a2 = 0; // declared in org.jbox2d.dynamics.joints.PrismaticJoint
        this.m_s1 = 0; // declared in org.jbox2d.dynamics.joints.PrismaticJoint
        this.m_s2 = 0; // declared in org.jbox2d.dynamics.joints.PrismaticJoint
    },

    instanceOf : function(aType) {
        return ojdjPrismaticJoint.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdjPrismaticJoint;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    ojdjJointcreateojdWorldojdjJointDef : function(p0,p1) {
         return ojdjJoint.ojdjJointcreateojdWorldojdjJointDef(p0,p1);
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdjPrismaticJoint.BOOLEANdesiredAssertionStatus(ojdjPrismaticJoint); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_9_13 : for(;;) switch (__label__) {
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_9_13;
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_9_13;
        }
        ojdjPrismaticJoint.$assertionsDisabled = var1;
        return;
    },

    VOIDinitojpIWorldPoolojdjPrismaticJointDef : function(thisRef,argWorld,def) {
        var __label__ = null;
        ojdjJoint.VOIDinitojpIWorldPoolojdjJointDef(thisRef,argWorld,def);
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var0);
        thisRef.m_localCenterA = var0;
        var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var1);
        thisRef.m_localCenterB = var1;
        var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinitojcVec2(var2,def.localAnchorA);
        thisRef.m_localAnchorA = var2;
        var var4 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinitojcVec2(var4,def.localAnchorB);
        thisRef.m_localAnchorB = var4;
        var var6 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinitojcVec2(var6,def.localAxisA);
        thisRef.m_localXAxisA = var6;
        var var9 = thisRef.m_localXAxisA.FLOATnormalize(thisRef.m_localXAxisA); // type is FLOAT value type is FLOAT
        var var10 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var10);
        thisRef.m_localYAxisA = var10;
        ojcVec2.VOIDcrossToOutUnsafeFLOATojcVec2ojcVec2(1.0,thisRef.m_localXAxisA,thisRef.m_localYAxisA);
        var var13 = def.referenceAngle; // type is FLOAT value type is FLOAT
        thisRef.m_referenceAngle = var13;
        var var14 = new ojcVec3.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec3.VOIDinit(var14);
        thisRef.m_impulse = var14;
        thisRef.m_motorMass = 0.0;
        thisRef.m_motorImpulse = 0.0;
        var var15 = def.lowerTranslation; // type is FLOAT value type is FLOAT
        thisRef.m_lowerTranslation = var15;
        var var16 = def.upperTranslation; // type is FLOAT value type is FLOAT
        thisRef.m_upperTranslation = var16;
        var var17 = def.maxMotorForce; // type is FLOAT value type is FLOAT
        thisRef.m_maxMotorForce = var17;
        var var18 = def.motorSpeed; // type is FLOAT value type is FLOAT
        thisRef.m_motorSpeed = var18;
        var var19 = def.enableLimit; // type is BOOLEAN value type is BOOLEAN
        thisRef.m_enableLimit = var19;
        var var20 = def.enableMotor; // type is BOOLEAN value type is BOOLEAN
        thisRef.m_enableMotor = var20;
        var var21 = ojdjLimitState.INACTIVE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@84dd22c
        thisRef.m_limitState = var21;
        var var22 = new ojcMat33.Create(); // type is REFERENCE value type is REFERENCE
        ojcMat33.VOIDinit(var22);
        thisRef.m_K = var22;
        var var23 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var23);
        thisRef.m_axis = var23;
        var var24 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var24);
        thisRef.m_perp = var24;
        return;
    },

    VOIDinitVelocityConstraintsojdSolverData : function(thisRef,data) {
        var local_16_FLOAT = null; // type is FLOAT # of inits = 1
        var local_14_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_13_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_12_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_5_FLOAT = null; // type is FLOAT # of inits = 2
        var local_21_FLOAT = null; // type is FLOAT # of inits = 2
        var local_23_FLOAT = null; // type is FLOAT # of inits = 2
        var local_15_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_20_FLOAT = null; // type is FLOAT # of inits = 2
        var local_10_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_18_FLOAT = null; // type is FLOAT # of inits = 1
        var local_17_FLOAT = null; // type is FLOAT # of inits = 1
        var local_19_FLOAT = null; // type is FLOAT # of inits = 1
        var local_8_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_9_FLOAT = null; // type is FLOAT # of inits = 2
        var local_22_FLOAT = null; // type is FLOAT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var1 = thisRef.m_bodyA.m_islandIndex; // type is INT value type is INT
            thisRef.m_indexA = var1;
            var var3 = thisRef.m_bodyB.m_islandIndex; // type is INT value type is INT
            thisRef.m_indexB = var3;
            var var8 = thisRef.m_localCenterA.ojcVec2setojcVec2(thisRef.m_localCenterA,thisRef.m_bodyA.m_sweep.localCenter); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1e10298f
            var var13 = thisRef.m_localCenterB.ojcVec2setojcVec2(thisRef.m_localCenterB,thisRef.m_bodyB.m_sweep.localCenter); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@40f35b85
            var var15 = thisRef.m_bodyA.m_invMass; // type is FLOAT value type is FLOAT
            thisRef.m_invMassA = var15;
            var var17 = thisRef.m_bodyB.m_invMass; // type is FLOAT value type is FLOAT
            thisRef.m_invMassB = var17;
            var var19 = thisRef.m_bodyA.m_invI; // type is FLOAT value type is FLOAT
            thisRef.m_invIA = var19;
            var var21 = thisRef.m_bodyB.m_invI; // type is FLOAT value type is FLOAT
            thisRef.m_invIB = var21;
            var var24 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            var local_2_REFERENCE = var24.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3776c74a
            var var29 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            var local_3_FLOAT = var29.a; // type is FLOAT value type is FLOAT
            var var35 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_4_REFERENCE = var35.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@26fc77ab
            var var40 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_5_FLOAT = var40.w; // type is FLOAT value type is FLOAT
            var var46 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            var local_6_REFERENCE = var46.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@393f6eaa
            var var51 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            var local_7_FLOAT = var51.a; // type is FLOAT value type is FLOAT
            var var57 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_8_REFERENCE = var57.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@63ca357b
            var var62 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_9_FLOAT = var62.w; // type is FLOAT value type is FLOAT
            var var67 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6287f2df
            local_10_REFERENCE = var67; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5261d5b2
            var var70 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2783800b
            var local_11_REFERENCE = var70; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@650be06f
            var var73 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@57d86058
            local_12_REFERENCE = var73; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2ed33138
            var var76 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@a146176
            local_13_REFERENCE = var76; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7826dffd
            var var79 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@312c3be7
            local_14_REFERENCE = var79; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6edd1b81
            var var82 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@b1ebd35
            local_15_REFERENCE = var82; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@324d9fad
            var var86 = local_10_REFERENCE.ojcRotsetFLOAT(local_10_REFERENCE,local_3_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1fd0d6ae
            var var89 = local_11_REFERENCE.ojcRotsetFLOAT(local_11_REFERENCE,local_7_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@36660bf3
            var var90 = local_10_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5261d5b2
            var var93 = local_12_REFERENCE.ojcVec2setojcVec2(local_12_REFERENCE,thisRef.m_localAnchorA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6645fddb
            var var95 = var93.ojcVec2subLocalojcVec2(var93,thisRef.m_localCenterA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@18cc0333
            ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var90,var95,local_14_REFERENCE);
            var var97 = local_11_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@650be06f
            var var100 = local_12_REFERENCE.ojcVec2setojcVec2(local_12_REFERENCE,thisRef.m_localAnchorB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1b0d322
            var var102 = var100.ojcVec2subLocalojcVec2(var100,thisRef.m_localCenterB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@78f6974
            ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var97,var102,local_15_REFERENCE);
            var var106 = local_12_REFERENCE.ojcVec2setojcVec2(local_12_REFERENCE,local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4eedf77b
            var var108 = var106.ojcVec2subLocalojcVec2(var106,local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@36c0b00e
            var var110 = var108.ojcVec2addLocalojcVec2(var108,local_15_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@31ee4c37
            var var112 = var110.ojcVec2subLocalojcVec2(var110,local_14_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4dd657b7
            local_16_FLOAT = thisRef.m_invMassA; // type is FLOAT value type is FLOAT
            local_17_FLOAT = thisRef.m_invMassB; // type is FLOAT value type is FLOAT
            local_18_FLOAT = thisRef.m_invIA; // type is FLOAT value type is FLOAT
            local_19_FLOAT = thisRef.m_invIB; // type is FLOAT value type is FLOAT
            ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(local_10_REFERENCE,thisRef.m_localXAxisA,thisRef.m_axis);
            var var130 = local_13_REFERENCE.ojcVec2setojcVec2(local_13_REFERENCE,local_12_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6ca12759
            var var132 = var130.ojcVec2addLocalojcVec2(var130,local_14_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5f52aa03
            var var135 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_13_REFERENCE,thisRef.m_axis); // type is FLOAT value type is FLOAT
            thisRef.m_a1 = var135;
            var var138 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_15_REFERENCE,thisRef.m_axis); // type is FLOAT value type is FLOAT
            thisRef.m_a2 = var138;
            var var153 = (((local_16_FLOAT + local_17_FLOAT) + ((local_18_FLOAT * thisRef.m_a1) * thisRef.m_a1)) + ((local_19_FLOAT * thisRef.m_a2) * thisRef.m_a2)); // type is FLOAT value type is FLOAT
            thisRef.m_motorMass = var153;
            var var154 = thisRef.m_motorMass; // type is FLOAT value type is FLOAT
            if ((var154 <= 0.0)) {
                __label__ = 491;
                break $S_0;
            }
            __label__ = 481;
            }
        $M_491_481 : for(;;) switch (__label__) {
            case 481 :
            // NORMAL
                var var157 = (1.0 / thisRef.m_motorMass); // type is FLOAT value type is FLOAT
                thisRef.m_motorMass = var157;
                __label__ = 491;
                continue $M_491_481;
            case 491 :
            // NORMAL
                $S_491 : {
                // NORMAL
                    ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(local_10_REFERENCE,thisRef.m_localYAxisA,thisRef.m_perp);
                    var var163 = local_13_REFERENCE.ojcVec2setojcVec2(local_13_REFERENCE,local_12_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1c1eca2a
                    var var165 = var163.ojcVec2addLocalojcVec2(var163,local_14_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@638a4df1
                    var var168 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_13_REFERENCE,thisRef.m_perp); // type is FLOAT value type is FLOAT
                    thisRef.m_s1 = var168;
                    var var171 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_15_REFERENCE,thisRef.m_perp); // type is FLOAT value type is FLOAT
                    thisRef.m_s2 = var171;
                    local_20_FLOAT = (((local_16_FLOAT + local_17_FLOAT) + ((local_18_FLOAT * thisRef.m_s1) * thisRef.m_s1)) + ((local_19_FLOAT * thisRef.m_s2) * thisRef.m_s2)); // type is FLOAT value type is FLOAT
                    local_21_FLOAT = ((local_18_FLOAT * thisRef.m_s1) + (local_19_FLOAT * thisRef.m_s2)); // type is FLOAT value type is FLOAT
                    local_22_FLOAT = (((local_18_FLOAT * thisRef.m_s1) * thisRef.m_a1) + ((local_19_FLOAT * thisRef.m_s2) * thisRef.m_a2)); // type is FLOAT value type is FLOAT
                    local_23_FLOAT = (local_18_FLOAT + local_19_FLOAT); // type is FLOAT value type is FLOAT
                    var var216 = local_23_FLOAT; // type is FLOAT value type is FLOAT
                    if ((var216 != 0.0)) {
                        __label__ = 637;
                        break $S_491;
                    }
                    __label__ = 634;
                    }
                $M_634_637 : for(;;) switch (__label__) {
                    case 637 :
                    // NORMAL
                        $S_637 : {
                        // NORMAL
                            var local_24_FLOAT = ((local_18_FLOAT * thisRef.m_a1) + (local_19_FLOAT * thisRef.m_a2)); // type is FLOAT value type is FLOAT
                            var local_25_FLOAT = (((local_16_FLOAT + local_17_FLOAT) + ((local_18_FLOAT * thisRef.m_a1) * thisRef.m_a1)) + ((local_19_FLOAT * thisRef.m_a2) * thisRef.m_a2)); // type is FLOAT value type is FLOAT
                            var var250 = thisRef.m_K.ex.ojcVec3setFLOATFLOATFLOAT(thisRef.m_K.ex,local_20_FLOAT,local_21_FLOAT,local_22_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6742536
                            var var256 = thisRef.m_K.ey.ojcVec3setFLOATFLOATFLOAT(thisRef.m_K.ey,local_21_FLOAT,local_23_FLOAT,local_24_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4c3c8549
                            var var262 = thisRef.m_K.ez.ojcVec3setFLOATFLOATFLOAT(thisRef.m_K.ez,local_22_FLOAT,local_24_FLOAT,local_25_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2699497e
                            var var263 = thisRef.m_enableLimit; // type is BOOLEAN value type is BOOLEAN
                            if ((var263 == 0)) {
                                __label__ = 878;
                                break $S_637;
                            }
                            __label__ = 745;
                            }
                        $M_878_745 : for(;;) switch (__label__) {
                            case 745 :
                            // NORMAL
                                $S_745 : {
                                // NORMAL
                                    var var266 = ojcVec2.FLOATdotojcVec2ojcVec2(thisRef.m_axis,local_12_REFERENCE); // type is FLOAT value type is FLOAT
                                    local_20_FLOAT = var266; // type is FLOAT value type is FLOAT
                                    var var271 = ojcMathUtils.FLOATabsFLOAT((thisRef.m_upperTranslation - thisRef.m_lowerTranslation)); // type is FLOAT value type is FLOAT
                                    if ((var271 >= 0.01)) {
                                        __label__ = 784;
                                        break $S_745;
                                    }
                                    __label__ = 774;
                                    }
                                $M_784_774 : for(;;) switch (__label__) {
                                    case 774 :
                                    // NORMAL
                                        var var278 = ojdjLimitState.EQUAL; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@17cd6d99
                                        thisRef.m_limitState = var278;
                                        break $M_784_774;
                                    case 784 :
                                    // NORMAL
                                        $S_784 : {
                                        // NORMAL
                                            var var273 = local_20_FLOAT; // type is FLOAT value type is FLOAT
                                            var var274 = thisRef.m_lowerTranslation; // type is FLOAT value type is FLOAT
                                            if ((var273 > var274)) {
                                                __label__ = 822;
                                                break $S_784;
                                            }
                                            __label__ = 794;
                                            }
                                        for(;;) switch (__label__) {
                                            case 794 :
                                            // NORMAL
                                                $S_794 : {
                                                // NORMAL
                                                    var var276 = thisRef.m_limitState; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@30b7b7c3
                                                    var var277 = ojdjLimitState.AT_LOWER; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@18897a51
                                                    if ((var276 == var277)) {
                                                        break $M_784_774;
                                                    }
                                                    }
                                                var var279 = ojdjLimitState.AT_LOWER; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@74b70287
                                                thisRef.m_limitState = var279;
                                                var var280 = thisRef.m_impulse; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@8ea082d
                                                var280.z = 0.0;
                                                break $M_784_774;
                                            case 822 :
                                            // NORMAL
                                                $S_822 : {
                                                // NORMAL
                                                    var var281 = local_20_FLOAT; // type is FLOAT value type is FLOAT
                                                    var var282 = thisRef.m_upperTranslation; // type is FLOAT value type is FLOAT
                                                    if ((var281 < var282)) {
                                                        __label__ = 860;
                                                        break $S_822;
                                                    }
                                                    __label__ = 832;
                                                    }
                                                for(;;) switch (__label__) {
                                                    case 832 :
                                                    // NORMAL
                                                        $S_832 : {
                                                        // NORMAL
                                                            var var284 = thisRef.m_limitState; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5eebf5c
                                                            var var285 = ojdjLimitState.AT_UPPER; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@56660642
                                                            if ((var284 == var285)) {
                                                                break $M_784_774;
                                                            }
                                                            }
                                                        var var288 = ojdjLimitState.AT_UPPER; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1a099533
                                                        thisRef.m_limitState = var288;
                                                        var var289 = thisRef.m_impulse; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@427a4d3f
                                                        var289.z = 0.0;
                                                        break $M_784_774;
                                                    case 860 :
                                                    // NORMAL
                                                        var var286 = ojdjLimitState.INACTIVE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@329e0e73
                                                        thisRef.m_limitState = var286;
                                                        var var287 = thisRef.m_impulse; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@54ac5a74
                                                        var287.z = 0.0;
                                                        break $M_784_774;
                                                }
                                        }
                                }
                                break $M_878_745;
                            case 878 :
                            // NORMAL
                                var var290 = ojdjLimitState.INACTIVE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2daeddf
                                thisRef.m_limitState = var290;
                                var var291 = thisRef.m_impulse; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@12594b0e
                                var291.z = 0.0;
                                break $M_878_745;
                        }
                        $S_893 : {
                        // NORMAL
                            var var292 = thisRef.m_enableMotor; // type is BOOLEAN value type is BOOLEAN
                            if ((var292 != 0)) {
                                __label__ = 905;
                                break $S_893;
                            }
                            __label__ = 900;
                            }
                        $M_905_900 : for(;;) switch (__label__) {
                            case 900 :
                            // NORMAL
                                thisRef.m_motorImpulse = 0.0;
                                __label__ = 905;
                                continue $M_905_900;
                            case 905 :
                            // NORMAL
                                $S_905 : {
                                // NORMAL
                                    var var294 = data.step.warmStarting; // type is BOOLEAN value type is BOOLEAN
                                    if ((var294 == 0)) {
                                        __label__ = 1192;
                                        break $S_905;
                                    }
                                    __label__ = 915;
                                    }
                                $M_1192_915 : for(;;) switch (__label__) {
                                    case 1192 :
                                    // NORMAL
                                        thisRef.m_impulse.VOIDsetZero(thisRef.m_impulse);
                                        thisRef.m_motorImpulse = 0.0;
                                        break $M_1192_915;
                                    case 915 :
                                    // NORMAL
                                        var var299 = thisRef.m_impulse.ojcVec3mulLocalFLOAT(thisRef.m_impulse,data.step.dtRatio); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@50f622a0
                                        var var303 = (thisRef.m_motorImpulse * data.step.dtRatio); // type is FLOAT value type is FLOAT
                                        thisRef.m_motorImpulse = var303;
                                        var var305 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@663fbd30
                                        var local_20_REFERENCE = var305; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@335e103d
                                        var var309 = local_13_REFERENCE.ojcVec2setojcVec2(local_13_REFERENCE,thisRef.m_axis); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6b073c63
                                        var var314 = var309.ojcVec2mulLocalFLOAT(var309,(thisRef.m_motorImpulse + thisRef.m_impulse.z)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@a85e081
                                        var var317 = local_20_REFERENCE.ojcVec2setojcVec2(local_20_REFERENCE,thisRef.m_perp); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@11c81adc
                                        var var320 = var317.ojcVec2mulLocalFLOAT(var317,thisRef.m_impulse.x); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@52543f20
                                        var var322 = var320.ojcVec2addLocalojcVec2(var320,local_13_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@62f52d
                                        local_21_FLOAT = (((thisRef.m_impulse.x * thisRef.m_s1) + thisRef.m_impulse.y) + ((thisRef.m_motorImpulse + thisRef.m_impulse.z) * thisRef.m_a1)); // type is FLOAT value type is FLOAT
                                        local_22_FLOAT = (((thisRef.m_impulse.x * thisRef.m_s2) + thisRef.m_impulse.y) + ((thisRef.m_motorImpulse + thisRef.m_impulse.z) * thisRef.m_a2)); // type is FLOAT value type is FLOAT
                                        var var353 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5921f057
                                        var var359 = (var353.x - (local_16_FLOAT * local_20_REFERENCE.x)); // type is FLOAT value type is FLOAT
                                        var353.x = var359;
                                        var var360 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5921f057
                                        var var366 = (var360.y - (local_16_FLOAT * local_20_REFERENCE.y)); // type is FLOAT value type is FLOAT
                                        var360.y = var366;
                                        local_5_FLOAT = (local_5_FLOAT - (local_18_FLOAT * local_21_FLOAT)); // type is FLOAT value type is FLOAT
                                        var var373 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@685fd65e
                                        var var379 = (var373.x + (local_17_FLOAT * local_20_REFERENCE.x)); // type is FLOAT value type is FLOAT
                                        var373.x = var379;
                                        var var380 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@685fd65e
                                        var var386 = (var380.y + (local_17_FLOAT * local_20_REFERENCE.y)); // type is FLOAT value type is FLOAT
                                        var380.y = var386;
                                        local_9_FLOAT = (local_9_FLOAT + (local_19_FLOAT * local_22_FLOAT)); // type is FLOAT value type is FLOAT
                                        thisRef.pool.VOIDpushVec2INT(thisRef.pool,1);
                                        break $M_1192_915;
                                }
                                var var396 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
                                var var397 = local_5_FLOAT; // type is FLOAT value type is FLOAT
                                var396.w = var397;
                                var var400 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
                                var var401 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                                var400.w = var401;
                                thisRef.pool.VOIDpushRotINT(thisRef.pool,2);
                                thisRef.pool.VOIDpushVec2INT(thisRef.pool,4);
                                return;
                        }
                    case 634 :
                    // NORMAL
                        local_23_FLOAT = 1.0; // type is FLOAT value type is FLOAT
                        __label__ = 637;
                        continue $M_634_637;
                }
        }
    },

    VOIDsolveVelocityConstraintsojdSolverData : function(thisRef,data) {
        var local_8_FLOAT = null; // type is FLOAT # of inits = 1
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_7_FLOAT = null; // type is FLOAT # of inits = 1
        var local_9_FLOAT = null; // type is FLOAT # of inits = 1
        var local_6_FLOAT = null; // type is FLOAT # of inits = 1
        var local_14_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_15_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_3_FLOAT = null; // type is FLOAT # of inits = 4
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_11_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_5_FLOAT = null; // type is FLOAT # of inits = 4
        var local_10_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var2 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_2_REFERENCE = var2.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@aef3214
            var var7 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_3_FLOAT = var7.w; // type is FLOAT value type is FLOAT
            var var13 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_4_REFERENCE = var13.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@669fbf01
            var var18 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_5_FLOAT = var18.w; // type is FLOAT value type is FLOAT
            local_6_FLOAT = thisRef.m_invMassA; // type is FLOAT value type is FLOAT
            local_7_FLOAT = thisRef.m_invMassB; // type is FLOAT value type is FLOAT
            local_8_FLOAT = thisRef.m_invIA; // type is FLOAT value type is FLOAT
            local_9_FLOAT = thisRef.m_invIB; // type is FLOAT value type is FLOAT
            var var35 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@64dcfa64
            local_10_REFERENCE = var35; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@14a91511
            var var37 = thisRef.m_enableMotor; // type is BOOLEAN value type is BOOLEAN
            if ((var37 == 0)) {
                __label__ = 348;
                break $S_0;
            }
            __label__ = 96;
            }
        $M_348_96 : for(;;) switch (__label__) {
            case 96 :
            // NORMAL
                $S_96 : {
                // NORMAL
                    var var38 = thisRef.m_limitState; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@436d91a9
                    var var39 = ojdjLimitState.EQUAL; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@30616442
                    if ((var38 == var39)) {
                        __label__ = 348;
                        continue $M_348_96;
                    }
                    }
                var var42 = local_10_REFERENCE.ojcVec2setojcVec2(local_10_REFERENCE,local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2b9da2f8
                var var44 = var42.ojcVec2subLocalojcVec2(var42,local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@28117235
                var var47 = ojcVec2.FLOATdotojcVec2ojcVec2(thisRef.m_axis,local_10_REFERENCE); // type is FLOAT value type is FLOAT
                var local_11_FLOAT = ((var47 + (thisRef.m_a2 * local_5_FLOAT)) - (thisRef.m_a1 * local_3_FLOAT)); // type is FLOAT value type is FLOAT
                var local_12_FLOAT = (thisRef.m_motorMass * (thisRef.m_motorSpeed - local_11_FLOAT)); // type is FLOAT value type is FLOAT
                var local_13_FLOAT = thisRef.m_motorImpulse; // type is FLOAT value type is FLOAT
                var local_14_FLOAT = (data.step.dt * thisRef.m_maxMotorForce); // type is FLOAT value type is FLOAT
                var var80 = ojcMathUtils.FLOATclampFLOATFLOATFLOAT((thisRef.m_motorImpulse + local_12_FLOAT),(-local_14_FLOAT),local_14_FLOAT); // type is FLOAT value type is FLOAT
                thisRef.m_motorImpulse = var80;
                var local_12_FLOAT = (thisRef.m_motorImpulse - local_13_FLOAT); // type is FLOAT value type is FLOAT
                var var86 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@75e5e47
                local_15_REFERENCE = var86; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@64bb5299
                var var90 = local_15_REFERENCE.ojcVec2setojcVec2(local_15_REFERENCE,thisRef.m_axis); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3ca6699a
                var var92 = var90.ojcVec2mulLocalFLOAT(var90,local_12_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7aea9694
                var local_16_FLOAT = (local_12_FLOAT * thisRef.m_a1); // type is FLOAT value type is FLOAT
                var local_17_FLOAT = (local_12_FLOAT * thisRef.m_a2); // type is FLOAT value type is FLOAT
                var var103 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@ecaaa20
                var var109 = (var103.x - (local_6_FLOAT * local_15_REFERENCE.x)); // type is FLOAT value type is FLOAT
                var103.x = var109;
                var var110 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@ecaaa20
                var var116 = (var110.y - (local_6_FLOAT * local_15_REFERENCE.y)); // type is FLOAT value type is FLOAT
                var110.y = var116;
                local_3_FLOAT = (local_3_FLOAT - (local_8_FLOAT * local_16_FLOAT)); // type is FLOAT value type is FLOAT
                var var123 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3a7f5d1b
                var var129 = (var123.x + (local_7_FLOAT * local_15_REFERENCE.x)); // type is FLOAT value type is FLOAT
                var123.x = var129;
                var var130 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3a7f5d1b
                var var136 = (var130.y + (local_7_FLOAT * local_15_REFERENCE.y)); // type is FLOAT value type is FLOAT
                var130.y = var136;
                local_5_FLOAT = (local_5_FLOAT + (local_9_FLOAT * local_17_FLOAT)); // type is FLOAT value type is FLOAT
                thisRef.pool.VOIDpushVec2INT(thisRef.pool,1);
                __label__ = 348;
                continue $M_348_96;
            case 348 :
            // NORMAL
                $S_348 : {
                // NORMAL
                    var var145 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5949c326
                    local_11_REFERENCE = var145; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7f2c6ae5
                    var var149 = local_10_REFERENCE.ojcVec2setojcVec2(local_10_REFERENCE,local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2c10022e
                    var var151 = var149.ojcVec2subLocalojcVec2(var149,local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2375448f
                    var var152 = local_11_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7f2c6ae5
                    var var155 = ojcVec2.FLOATdotojcVec2ojcVec2(thisRef.m_perp,local_10_REFERENCE); // type is FLOAT value type is FLOAT
                    var var163 = ((var155 + (thisRef.m_s2 * local_5_FLOAT)) - (thisRef.m_s1 * local_3_FLOAT)); // type is FLOAT value type is FLOAT
                    var152.x = var163;
                    var var164 = local_11_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7f2c6ae5
                    var var167 = (local_5_FLOAT - local_3_FLOAT); // type is FLOAT value type is FLOAT
                    var164.y = var167;
                    var var168 = thisRef.m_enableLimit; // type is BOOLEAN value type is BOOLEAN
                    if ((var168 == 0)) {
                        __label__ = 975;
                        break $S_348;
                    }
                    __label__ = 416;
                    }
                $M_975_416 : for(;;) switch (__label__) {
                    case 416 :
                    // NORMAL
                        $S_416 : {
                        // NORMAL
                            var var169 = thisRef.m_limitState; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@d052843
                            var var170 = ojdjLimitState.INACTIVE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1a428a36
                            if ((var169 == var170)) {
                                __label__ = 975;
                                continue $M_975_416;
                            }
                            }
                        $S_426 : {
                        // NORMAL
                            var var173 = local_10_REFERENCE.ojcVec2setojcVec2(local_10_REFERENCE,local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@366ffa22
                            var var175 = var173.ojcVec2subLocalojcVec2(var173,local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3fb7915c
                            var var178 = ojcVec2.FLOATdotojcVec2ojcVec2(thisRef.m_axis,local_10_REFERENCE); // type is FLOAT value type is FLOAT
                            var local_12_FLOAT = ((var178 + (thisRef.m_a2 * local_5_FLOAT)) - (thisRef.m_a1 * local_3_FLOAT)); // type is FLOAT value type is FLOAT
                            var var189 = thisRef.pool.ojcVec3popVec3(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1bd4f1d9
                            var local_13_REFERENCE = var189; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@15c9cbaf
                            var var197 = local_13_REFERENCE.ojcVec3setFLOATFLOATFLOAT(local_13_REFERENCE,local_11_REFERENCE.x,local_11_REFERENCE.y,local_12_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5c3e8dde
                            var var199 = thisRef.pool.ojcVec3popVec3(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5f00da74
                            local_14_REFERENCE = var199; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@246c548a
                            var var202 = thisRef.pool.ojcVec3popVec3(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6366a274
                            local_15_REFERENCE = var202; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3866d282
                            var var205 = local_14_REFERENCE.ojcVec3setojcVec3(local_14_REFERENCE,thisRef.m_impulse); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@38299904
                            var var206 = thisRef.m_K; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1051b3a2
                            var var208 = local_13_REFERENCE.ojcVec3negateLocal(local_13_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@495b18a6
                            var206.VOIDsolve33ToOutojcVec3ojcVec3(var206,var208,local_15_REFERENCE);
                            var var212 = thisRef.m_impulse.ojcVec3addLocalojcVec3(thisRef.m_impulse,local_15_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1ff876fb
                            var var213 = thisRef.m_limitState; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6b6d2db9
                            var var214 = ojdjLimitState.AT_LOWER; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@763c4fd5
                            if ((var213 != var214)) {
                                __label__ = 580;
                                break $S_426;
                            }
                            __label__ = 559;
                            }
                        $M_580_559 : for(;;) switch (__label__) {
                            case 559 :
                            // NORMAL
                                var var221 = thisRef.m_impulse; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@67b3e79c
                                var var224 = ojcMathUtils.FLOATmaxFLOATFLOAT(thisRef.m_impulse.z,0.0); // type is FLOAT value type is FLOAT
                                var221.z = var224;
                                break $M_580_559;
                            case 580 :
                            // NORMAL
                                $S_580 : {
                                // NORMAL
                                    var var215 = thisRef.m_limitState; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3b201a3f
                                    var var216 = ojdjLimitState.AT_UPPER; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3922f807
                                    if ((var215 != var216)) {
                                        break $M_580_559;
                                    }
                                    }
                                var var217 = thisRef.m_impulse; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2d745a11
                                var var220 = ojcMathUtils.FLOATminFLOATFLOAT(thisRef.m_impulse.z,0.0); // type is FLOAT value type is FLOAT
                                var217.z = var220;
                                break $M_580_559;
                        }
                        var var226 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5583d724
                        var local_16_REFERENCE = var226; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6e49ce49
                        var var229 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4085e147
                        var local_17_REFERENCE = var229; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4fae9f94
                        var var238 = local_10_REFERENCE.ojcVec2setFLOATFLOAT(local_10_REFERENCE,thisRef.m_K.ez.x,thisRef.m_K.ez.y); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4df4bb2
                        var var244 = var238.ojcVec2mulLocalFLOAT(var238,(thisRef.m_impulse.z - local_14_REFERENCE.z)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@24c4e6e6
                        var var247 = local_16_REFERENCE.ojcVec2setojcVec2(local_16_REFERENCE,local_11_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4b24a4e0
                        var var248 = var247.ojcVec2negateLocal(var247); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@70cdd02f
                        var var250 = var248.ojcVec2subLocalojcVec2(var248,local_10_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@e31875f
                        thisRef.m_K.VOIDsolve22ToOutojcVec2ojcVec2(thisRef.m_K,local_16_REFERENCE,local_17_REFERENCE);
                        var var259 = local_17_REFERENCE.ojcVec2addLocalFLOATFLOAT(local_17_REFERENCE,local_14_REFERENCE.x,local_14_REFERENCE.y); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@d41a3a9
                        var var260 = thisRef.m_impulse; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@63ac1545
                        var var262 = local_17_REFERENCE.x; // type is FLOAT value type is FLOAT
                        var260.x = var262;
                        var var263 = thisRef.m_impulse; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7dfefdb7
                        var var265 = local_17_REFERENCE.y; // type is FLOAT value type is FLOAT
                        var263.y = var265;
                        var var268 = local_15_REFERENCE.ojcVec3setojcVec3(local_15_REFERENCE,thisRef.m_impulse); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7f778628
                        var var270 = var268.ojcVec3subLocalojcVec3(var268,local_14_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7fab2e84
                        var var272 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7cae1a09
                        var local_18_REFERENCE = var272; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7637436e
                        var var276 = local_10_REFERENCE.ojcVec2setojcVec2(local_10_REFERENCE,thisRef.m_axis); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3532dd46
                        var var279 = var276.ojcVec2mulLocalFLOAT(var276,local_15_REFERENCE.z); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@13cb1a6a
                        var var282 = local_18_REFERENCE.ojcVec2setojcVec2(local_18_REFERENCE,thisRef.m_perp); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1fb92448
                        var var285 = var282.ojcVec2mulLocalFLOAT(var282,local_15_REFERENCE.x); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@53d928e2
                        var var287 = var285.ojcVec2addLocalojcVec2(var285,local_10_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@70220732
                        var local_19_FLOAT = (((local_15_REFERENCE.x * thisRef.m_s1) + local_15_REFERENCE.y) + (local_15_REFERENCE.z * thisRef.m_a1)); // type is FLOAT value type is FLOAT
                        var local_20_FLOAT = (((local_15_REFERENCE.x * thisRef.m_s2) + local_15_REFERENCE.y) + (local_15_REFERENCE.z * thisRef.m_a2)); // type is FLOAT value type is FLOAT
                        var var316 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@ecaaa20
                        var var322 = (var316.x - (local_6_FLOAT * local_18_REFERENCE.x)); // type is FLOAT value type is FLOAT
                        var316.x = var322;
                        var var323 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@ecaaa20
                        var var329 = (var323.y - (local_6_FLOAT * local_18_REFERENCE.y)); // type is FLOAT value type is FLOAT
                        var323.y = var329;
                        local_3_FLOAT = (local_3_FLOAT - (local_8_FLOAT * local_19_FLOAT)); // type is FLOAT value type is FLOAT
                        var var336 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3a7f5d1b
                        var var342 = (var336.x + (local_7_FLOAT * local_18_REFERENCE.x)); // type is FLOAT value type is FLOAT
                        var336.x = var342;
                        var var343 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3a7f5d1b
                        var var349 = (var343.y + (local_7_FLOAT * local_18_REFERENCE.y)); // type is FLOAT value type is FLOAT
                        var343.y = var349;
                        local_5_FLOAT = (local_5_FLOAT + (local_9_FLOAT * local_20_FLOAT)); // type is FLOAT value type is FLOAT
                        thisRef.pool.VOIDpushVec2INT(thisRef.pool,3);
                        thisRef.pool.VOIDpushVec3INT(thisRef.pool,3);
                        break $M_975_416;
                    case 975 :
                    // NORMAL
                        var var359 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3bf14b16
                        var local_12_REFERENCE = var359; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6d3cb344
                        var var361 = thisRef.m_K; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@77b81839
                        var var363 = local_11_REFERENCE.ojcVec2negateLocal(local_11_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@17439a6b
                        var361.VOIDsolve22ToOutojcVec2ojcVec2(var361,var363,local_12_REFERENCE);
                        var var366 = local_11_REFERENCE.ojcVec2negateLocal(local_11_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@265bda6e
                        var var367 = thisRef.m_impulse; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2e75eb72
                        var var371 = (var367.x + local_12_REFERENCE.x); // type is FLOAT value type is FLOAT
                        var367.x = var371;
                        var var372 = thisRef.m_impulse; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@19bb5755
                        var var376 = (var372.y + local_12_REFERENCE.y); // type is FLOAT value type is FLOAT
                        var372.y = var376;
                        var var378 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@12a006cb
                        var local_13_REFERENCE = var378; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6ad0365b
                        var var381 = local_13_REFERENCE.ojcVec2setojcVec2(local_13_REFERENCE,thisRef.m_perp); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6bff6e08
                        var var384 = var381.ojcVec2mulLocalFLOAT(var381,local_12_REFERENCE.x); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@283d9ddd
                        var local_14_FLOAT = ((local_12_REFERENCE.x * thisRef.m_s1) + local_12_REFERENCE.y); // type is FLOAT value type is FLOAT
                        var local_15_FLOAT = ((local_12_REFERENCE.x * thisRef.m_s2) + local_12_REFERENCE.y); // type is FLOAT value type is FLOAT
                        var var402 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@ecaaa20
                        var var408 = (var402.x - (local_6_FLOAT * local_13_REFERENCE.x)); // type is FLOAT value type is FLOAT
                        var402.x = var408;
                        var var409 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@ecaaa20
                        var var415 = (var409.y - (local_6_FLOAT * local_13_REFERENCE.y)); // type is FLOAT value type is FLOAT
                        var409.y = var415;
                        local_3_FLOAT = (local_3_FLOAT - (local_8_FLOAT * local_14_FLOAT)); // type is FLOAT value type is FLOAT
                        var var422 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3a7f5d1b
                        var var428 = (var422.x + (local_7_FLOAT * local_13_REFERENCE.x)); // type is FLOAT value type is FLOAT
                        var422.x = var428;
                        var var429 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3a7f5d1b
                        var var435 = (var429.y + (local_7_FLOAT * local_13_REFERENCE.y)); // type is FLOAT value type is FLOAT
                        var429.y = var435;
                        local_5_FLOAT = (local_5_FLOAT + (local_9_FLOAT * local_15_FLOAT)); // type is FLOAT value type is FLOAT
                        thisRef.pool.VOIDpushVec2INT(thisRef.pool,2);
                        break $M_975_416;
                }
                var var445 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
                var var446 = local_3_FLOAT; // type is FLOAT value type is FLOAT
                var445.w = var446;
                var var449 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
                var var450 = local_5_FLOAT; // type is FLOAT value type is FLOAT
                var449.w = var450;
                thisRef.pool.VOIDpushVec2INT(thisRef.pool,2);
                return;
        }
    },

    BOOLEANsolvePositionConstraintsojdSolverData : function(thisRef,data) {
        var local_22_FLOAT = null; // type is FLOAT # of inits = 1
        var local_9_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_26_INT = null; // type is INT # of inits = 4
        var local_28_FLOAT = null; // type is FLOAT # of inits = 4
        var local_27_FLOAT = null; // type is FLOAT # of inits = 4
        var local_24_FLOAT = null; // type is FLOAT # of inits = 4
        var local_14_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_7_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_25_FLOAT = null; // type is FLOAT # of inits = 1
        var local_31_FLOAT = null; // type is FLOAT # of inits = 3
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_8_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_20_FLOAT = null; // type is FLOAT # of inits = 1
        var local_11_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_17_FLOAT = null; // type is FLOAT # of inits = 1
        var local_12_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_19_FLOAT = null; // type is FLOAT # of inits = 1
        var local_29_FLOAT = null; // type is FLOAT # of inits = 3
        var local_18_FLOAT = null; // type is FLOAT # of inits = 1
        var local_30_FLOAT = null; // type is FLOAT # of inits = 4
        var local_16_FLOAT = null; // type is FLOAT # of inits = 1
        var local_15_FLOAT = null; // type is FLOAT # of inits = 2
        var local_23_FLOAT = null; // type is FLOAT # of inits = 1
        var local_10_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_13_FLOAT = null; // type is FLOAT # of inits = 2
        var local_21_FLOAT = null; // type is FLOAT # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var1 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@58d358eb
            var local_2_REFERENCE = var1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@18d1d751
            var var4 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@38673c4
            var local_3_REFERENCE = var4; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1322afc6
            var var7 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5174a949
            var local_4_REFERENCE = var7; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@47098769
            var var10 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@77a1d41f
            var local_5_REFERENCE = var10; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@717b19b2
            var var13 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@531d835
            local_6_REFERENCE = var13; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@60ffdb67
            var var16 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@e883535
            local_7_REFERENCE = var16; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6a991dfa
            var var19 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@77f019d7
            local_8_REFERENCE = var19; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@23d5619e
            var var22 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5e6f2812
            local_9_REFERENCE = var22; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@41df2644
            var var25 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5594a39a
            local_10_REFERENCE = var25; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@33ae4dc0
            var var28 = thisRef.pool.ojcVec3popVec3(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1afa1580
            local_11_REFERENCE = var28; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@11faf082
            var var32 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_12_REFERENCE = var32.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6d3389a9
            var var37 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_13_FLOAT = var37.a; // type is FLOAT value type is FLOAT
            var var43 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_14_REFERENCE = var43.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4a3b03a5
            var var48 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_15_FLOAT = var48.a; // type is FLOAT value type is FLOAT
            var var54 = local_2_REFERENCE.ojcRotsetFLOAT(local_2_REFERENCE,local_13_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3a43e10b
            var var57 = local_3_REFERENCE.ojcRotsetFLOAT(local_3_REFERENCE,local_15_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@70dfa5d6
            local_16_FLOAT = thisRef.m_invMassA; // type is FLOAT value type is FLOAT
            local_17_FLOAT = thisRef.m_invMassB; // type is FLOAT value type is FLOAT
            local_18_FLOAT = thisRef.m_invIA; // type is FLOAT value type is FLOAT
            local_19_FLOAT = thisRef.m_invIB; // type is FLOAT value type is FLOAT
            var var70 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@18d1d751
            var var73 = local_9_REFERENCE.ojcVec2setojcVec2(local_9_REFERENCE,thisRef.m_localAnchorA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1d004a5
            var var75 = var73.ojcVec2subLocalojcVec2(var73,thisRef.m_localCenterA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@13e41911
            ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var70,var75,local_4_REFERENCE);
            var var77 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1322afc6
            var var80 = local_9_REFERENCE.ojcVec2setojcVec2(local_9_REFERENCE,thisRef.m_localAnchorB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@368af9df
            var var82 = var80.ojcVec2subLocalojcVec2(var80,thisRef.m_localCenterB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3b760bcd
            ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var77,var82,local_5_REFERENCE);
            var var86 = local_6_REFERENCE.ojcVec2setojcVec2(local_6_REFERENCE,local_14_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3a82c52a
            var var88 = var86.ojcVec2addLocalojcVec2(var86,local_5_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@91d6ffa
            var var90 = var88.ojcVec2subLocalojcVec2(var88,local_12_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@68b82b07
            var var92 = var90.ojcVec2subLocalojcVec2(var90,local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@639b7dbe
            ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(local_2_REFERENCE,thisRef.m_localXAxisA,local_7_REFERENCE);
            var var98 = local_9_REFERENCE.ojcVec2setojcVec2(local_9_REFERENCE,local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4f9c5f72
            var var100 = var98.ojcVec2addLocalojcVec2(var98,local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2d1c8bc4
            var var102 = ojcVec2.FLOATcrossojcVec2ojcVec2(var100,local_7_REFERENCE); // type is FLOAT value type is FLOAT
            local_20_FLOAT = var102; // type is FLOAT value type is FLOAT
            var var107 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_5_REFERENCE,local_7_REFERENCE); // type is FLOAT value type is FLOAT
            local_21_FLOAT = var107; // type is FLOAT value type is FLOAT
            ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(local_2_REFERENCE,thisRef.m_localYAxisA,local_8_REFERENCE);
            var var115 = local_9_REFERENCE.ojcVec2setojcVec2(local_9_REFERENCE,local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4d56d73
            var var117 = var115.ojcVec2addLocalojcVec2(var115,local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3c9b86da
            var var119 = ojcVec2.FLOATcrossojcVec2ojcVec2(var117,local_8_REFERENCE); // type is FLOAT value type is FLOAT
            local_22_FLOAT = var119; // type is FLOAT value type is FLOAT
            var var124 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_5_REFERENCE,local_8_REFERENCE); // type is FLOAT value type is FLOAT
            local_23_FLOAT = var124; // type is FLOAT value type is FLOAT
            var var127 = local_10_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@33ae4dc0
            var var130 = ojcVec2.FLOATdotojcVec2ojcVec2(local_8_REFERENCE,local_6_REFERENCE); // type is FLOAT value type is FLOAT
            var127.x = var130;
            var var131 = local_10_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@33ae4dc0
            var var136 = ((local_15_FLOAT - local_13_FLOAT) - thisRef.m_referenceAngle); // type is FLOAT value type is FLOAT
            var131.y = var136;
            var var139 = ojcMathUtils.FLOATabsFLOAT(local_10_REFERENCE.x); // type is FLOAT value type is FLOAT
            local_24_FLOAT = var139; // type is FLOAT value type is FLOAT
            var var144 = ojcMathUtils.FLOATabsFLOAT(local_10_REFERENCE.y); // type is FLOAT value type is FLOAT
            local_25_FLOAT = var144; // type is FLOAT value type is FLOAT
            local_26_INT = 0; // type is INT value type is INT
            local_27_FLOAT = 0.0; // type is FLOAT value type is FLOAT
            var var151 = thisRef.m_enableLimit; // type is BOOLEAN value type is BOOLEAN
            if ((var151 == 0)) {
                __label__ = 554;
                break $S_0;
            }
            __label__ = 405;
            }
        $M_405_554 : for(;;) switch (__label__) {
            case 405 :
            // NORMAL
                $S_405 : {
                // NORMAL
                    var var154 = ojcVec2.FLOATdotojcVec2ojcVec2(local_7_REFERENCE,local_6_REFERENCE); // type is FLOAT value type is FLOAT
                    local_28_FLOAT = var154; // type is FLOAT value type is FLOAT
                    var var160 = ojcMathUtils.FLOATabsFLOAT((thisRef.m_upperTranslation - thisRef.m_lowerTranslation)); // type is FLOAT value type is FLOAT
                    if ((var160 >= 0.01)) {
                        __label__ = 461;
                        break $S_405;
                    }
                    __label__ = 432;
                    }
                for(;;) switch (__label__) {
                    case 432 :
                    // NORMAL
                        var var195 = ojcMathUtils.FLOATclampFLOATFLOATFLOAT(local_28_FLOAT,-0.2,0.2); // type is FLOAT value type is FLOAT
                        local_27_FLOAT = var195; // type is FLOAT value type is FLOAT
                        var var197 = local_24_FLOAT; // type is FLOAT value type is FLOAT
                        var var199 = ojcMathUtils.FLOATabsFLOAT(local_28_FLOAT); // type is FLOAT value type is FLOAT
                        var var200 = ojcMathUtils.FLOATmaxFLOATFLOAT(var197,var199); // type is FLOAT value type is FLOAT
                        local_24_FLOAT = var200; // type is FLOAT value type is FLOAT
                        local_26_INT = 1; // type is INT value type is INT
                        __label__ = 554;
                        continue $M_405_554;
                    case 461 :
                    // NORMAL
                        $S_461 : {
                        // NORMAL
                            var var162 = local_28_FLOAT; // type is FLOAT value type is FLOAT
                            var var163 = thisRef.m_lowerTranslation; // type is FLOAT value type is FLOAT
                            if ((var162 > var163)) {
                                __label__ = 509;
                                break $S_461;
                            }
                            __label__ = 471;
                            }
                        for(;;) switch (__label__) {
                            case 509 :
                            // NORMAL
                                $S_509 : {
                                // NORMAL
                                    var var165 = local_28_FLOAT; // type is FLOAT value type is FLOAT
                                    var var166 = thisRef.m_upperTranslation; // type is FLOAT value type is FLOAT
                                    if ((var165 < var166)) {
                                        __label__ = 554;
                                        continue $M_405_554;
                                    }
                                    }
                                var var172 = ojcMathUtils.FLOATclampFLOATFLOATFLOAT(((local_28_FLOAT - thisRef.m_upperTranslation) - 0.005),0.0,0.2); // type is FLOAT value type is FLOAT
                                local_27_FLOAT = var172; // type is FLOAT value type is FLOAT
                                var var178 = ojcMathUtils.FLOATmaxFLOATFLOAT(local_24_FLOAT,(local_28_FLOAT - thisRef.m_upperTranslation)); // type is FLOAT value type is FLOAT
                                local_24_FLOAT = var178; // type is FLOAT value type is FLOAT
                                local_26_INT = 1; // type is INT value type is INT
                                __label__ = 554;
                                continue $M_405_554;
                            case 471 :
                            // NORMAL
                                var var185 = ojcMathUtils.FLOATclampFLOATFLOATFLOAT(((local_28_FLOAT - thisRef.m_lowerTranslation) + 0.005),-0.2,0.0); // type is FLOAT value type is FLOAT
                                local_27_FLOAT = var185; // type is FLOAT value type is FLOAT
                                var var191 = ojcMathUtils.FLOATmaxFLOATFLOAT(local_24_FLOAT,(thisRef.m_lowerTranslation - local_28_FLOAT)); // type is FLOAT value type is FLOAT
                                local_24_FLOAT = var191; // type is FLOAT value type is FLOAT
                                local_26_INT = 1; // type is INT value type is INT
                                __label__ = 554;
                                continue $M_405_554;
                        }
                }
            case 554 :
            // NORMAL
                $S_554 : {
                // NORMAL
                    var var203 = local_26_INT; // type is INT value type is INT
                    if ((var203 == 0)) {
                        __label__ = 800;
                        break $S_554;
                    }
                    __label__ = 559;
                    }
                $M_559_800 : for(;;) switch (__label__) {
                    case 559 :
                    // NORMAL
                        $S_559 : {
                        // NORMAL
                            local_28_FLOAT = (((local_16_FLOAT + local_17_FLOAT) + ((local_18_FLOAT * local_22_FLOAT) * local_22_FLOAT)) + ((local_19_FLOAT * local_23_FLOAT) * local_23_FLOAT)); // type is FLOAT value type is FLOAT
                            local_29_FLOAT = ((local_18_FLOAT * local_22_FLOAT) + (local_19_FLOAT * local_23_FLOAT)); // type is FLOAT value type is FLOAT
                            local_30_FLOAT = (((local_18_FLOAT * local_22_FLOAT) * local_20_FLOAT) + ((local_19_FLOAT * local_23_FLOAT) * local_21_FLOAT)); // type is FLOAT value type is FLOAT
                            local_31_FLOAT = (local_18_FLOAT + local_19_FLOAT); // type is FLOAT value type is FLOAT
                            var var247 = local_31_FLOAT; // type is FLOAT value type is FLOAT
                            if ((var247 != 0.0)) {
                                __label__ = 633;
                                break $S_559;
                            }
                            __label__ = 630;
                            }
                        $M_633_630 : for(;;) switch (__label__) {
                            case 630 :
                            // NORMAL
                                local_31_FLOAT = 1.0; // type is FLOAT value type is FLOAT
                                __label__ = 633;
                                continue $M_633_630;
                            case 633 :
                            // NORMAL
                                var local_32_FLOAT = ((local_18_FLOAT * local_20_FLOAT) + (local_19_FLOAT * local_21_FLOAT)); // type is FLOAT value type is FLOAT
                                var local_33_FLOAT = (((local_16_FLOAT + local_17_FLOAT) + ((local_18_FLOAT * local_20_FLOAT) * local_20_FLOAT)) + ((local_19_FLOAT * local_21_FLOAT) * local_21_FLOAT)); // type is FLOAT value type is FLOAT
                                var var277 = thisRef.pool.ojcMat33popMat33(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@115139f4
                                var local_34_REFERENCE = var277; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@585ad2b1
                                var var284 = local_34_REFERENCE.ex.ojcVec3setFLOATFLOATFLOAT(local_34_REFERENCE.ex,local_28_FLOAT,local_29_FLOAT,local_30_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@77cb923c
                                var var290 = local_34_REFERENCE.ey.ojcVec3setFLOATFLOATFLOAT(local_34_REFERENCE.ey,local_29_FLOAT,local_31_FLOAT,local_32_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@17066749
                                var var296 = local_34_REFERENCE.ez.ojcVec3setFLOATFLOATFLOAT(local_34_REFERENCE.ez,local_30_FLOAT,local_32_FLOAT,local_33_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@f0062c4
                                var var298 = thisRef.pool.ojcVec3popVec3(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@141e6cf
                                var local_35_REFERENCE = var298; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2a30cea9
                                var var300 = local_35_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2a30cea9
                                var var302 = local_10_REFERENCE.x; // type is FLOAT value type is FLOAT
                                var300.x = var302;
                                var var303 = local_35_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2a30cea9
                                var var305 = local_10_REFERENCE.y; // type is FLOAT value type is FLOAT
                                var303.y = var305;
                                var var306 = local_35_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2a30cea9
                                var var307 = local_27_FLOAT; // type is FLOAT value type is FLOAT
                                var306.z = var307;
                                var var308 = local_34_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@585ad2b1
                                var var310 = local_35_REFERENCE.ojcVec3negateLocal(local_35_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@e28d889
                                var308.VOIDsolve33ToOutojcVec3ojcVec3(var308,var310,local_11_REFERENCE);
                                thisRef.pool.VOIDpushVec3INT(thisRef.pool,1);
                                thisRef.pool.VOIDpushMat33INT(thisRef.pool,1);
                                break $M_559_800;
                        }
                    case 800 :
                    // NORMAL
                        $S_800 : {
                        // NORMAL
                            local_28_FLOAT = (((local_16_FLOAT + local_17_FLOAT) + ((local_18_FLOAT * local_22_FLOAT) * local_22_FLOAT)) + ((local_19_FLOAT * local_23_FLOAT) * local_23_FLOAT)); // type is FLOAT value type is FLOAT
                            local_29_FLOAT = ((local_18_FLOAT * local_22_FLOAT) + (local_19_FLOAT * local_23_FLOAT)); // type is FLOAT value type is FLOAT
                            local_30_FLOAT = (local_18_FLOAT + local_19_FLOAT); // type is FLOAT value type is FLOAT
                            var var342 = local_30_FLOAT; // type is FLOAT value type is FLOAT
                            if ((var342 != 0.0)) {
                                __label__ = 855;
                                break $S_800;
                            }
                            __label__ = 852;
                            }
                        $M_855_852 : for(;;) switch (__label__) {
                            case 852 :
                            // NORMAL
                                local_30_FLOAT = 1.0; // type is FLOAT value type is FLOAT
                                __label__ = 855;
                                continue $M_855_852;
                            case 855 :
                            // NORMAL
                                var var346 = thisRef.pool.ojcMat22popMat22(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2b28dca
                                var local_31_REFERENCE = var346; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@ccb74cd
                                var var352 = local_31_REFERENCE.ex.ojcVec2setFLOATFLOAT(local_31_REFERENCE.ex,local_28_FLOAT,local_29_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2022a67b
                                var var357 = local_31_REFERENCE.ey.ojcVec2setFLOATFLOAT(local_31_REFERENCE.ey,local_29_FLOAT,local_30_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6886de66
                                var var358 = local_31_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@ccb74cd
                                var var360 = local_10_REFERENCE.ojcVec2negateLocal(local_10_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7e4cd261
                                var358.VOIDsolveToOutojcVec2ojcVec2(var358,var360,local_9_REFERENCE);
                                var var363 = local_10_REFERENCE.ojcVec2negateLocal(local_10_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@29f6ac79
                                var var364 = local_11_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@11faf082
                                var var366 = local_9_REFERENCE.x; // type is FLOAT value type is FLOAT
                                var364.x = var366;
                                var var367 = local_11_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@11faf082
                                var var369 = local_9_REFERENCE.y; // type is FLOAT value type is FLOAT
                                var367.y = var369;
                                var var370 = local_11_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@11faf082
                                var370.z = 0.0;
                                thisRef.pool.VOIDpushMat22INT(thisRef.pool,1);
                                break $M_559_800;
                        }
                }
                $S_946 : {
                // NORMAL
                    local_28_FLOAT = ((local_11_REFERENCE.x * local_8_REFERENCE.x) + (local_11_REFERENCE.z * local_7_REFERENCE.x)); // type is FLOAT value type is FLOAT
                    local_29_FLOAT = ((local_11_REFERENCE.x * local_8_REFERENCE.y) + (local_11_REFERENCE.z * local_7_REFERENCE.y)); // type is FLOAT value type is FLOAT
                    local_30_FLOAT = (((local_11_REFERENCE.x * local_22_FLOAT) + local_11_REFERENCE.y) + (local_11_REFERENCE.z * local_20_FLOAT)); // type is FLOAT value type is FLOAT
                    local_31_FLOAT = (((local_11_REFERENCE.x * local_23_FLOAT) + local_11_REFERENCE.y) + (local_11_REFERENCE.z * local_21_FLOAT)); // type is FLOAT value type is FLOAT
                    var var422 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@19abbab2
                    var var427 = (var422.x - (local_16_FLOAT * local_28_FLOAT)); // type is FLOAT value type is FLOAT
                    var422.x = var427;
                    var var428 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@19abbab2
                    var var433 = (var428.y - (local_16_FLOAT * local_29_FLOAT)); // type is FLOAT value type is FLOAT
                    var428.y = var433;
                    local_13_FLOAT = (local_13_FLOAT - (local_18_FLOAT * local_30_FLOAT)); // type is FLOAT value type is FLOAT
                    var var440 = local_14_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@217e42c5
                    var var445 = (var440.x + (local_17_FLOAT * local_28_FLOAT)); // type is FLOAT value type is FLOAT
                    var440.x = var445;
                    var var446 = local_14_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@217e42c5
                    var var451 = (var446.y + (local_17_FLOAT * local_29_FLOAT)); // type is FLOAT value type is FLOAT
                    var446.y = var451;
                    local_15_FLOAT = (local_15_FLOAT + (local_19_FLOAT * local_31_FLOAT)); // type is FLOAT value type is FLOAT
                    var var460 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
                    var var461 = local_13_FLOAT; // type is FLOAT value type is FLOAT
                    var460.a = var461;
                    var var464 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
                    var var465 = local_15_FLOAT; // type is FLOAT value type is FLOAT
                    var464.a = var465;
                    thisRef.pool.VOIDpushVec2INT(thisRef.pool,7);
                    thisRef.pool.VOIDpushVec3INT(thisRef.pool,1);
                    thisRef.pool.VOIDpushRotINT(thisRef.pool,2);
                    var var469 = local_24_FLOAT; // type is FLOAT value type is FLOAT
                    if ((var469 > 0.005)) {
                        __label__ = 1205;
                        break $S_946;
                    }
                    __label__ = 1193;
                    }
                $M_1205_1193 : for(;;) switch (__label__) {
                    case 1193 :
                    // NORMAL
                        $S_1193 : {
                        // NORMAL
                            var var471 = local_25_FLOAT; // type is FLOAT value type is FLOAT
                            if ((var471 > 0.03490659)) {
                                __label__ = 1205;
                                continue $M_1205_1193;
                            }
                            }
                        var var473 = 1; // type is INT value type is INT
                        return var473;
                    case 1205 :
                    // NORMAL
                        var var473 = 0; // type is INT value type is INT
                        return var473;
                }
        }
    },

    classInitCheck : function() {
        if (!ojdjPrismaticJoint.__initialized) {
            ojdjPrismaticJoint.__initialized = true;
            var thePrototype = ojdjPrismaticJoint.Create.prototype;
            thePrototype.instanceOf = ojdjPrismaticJoint.instanceOf;
            thePrototype.ClassgetClass = ojdjPrismaticJoint.ClassgetClass;
            thePrototype.BOOLEANsolvePositionConstraintsojdSolverData = ojdjPrismaticJoint.BOOLEANsolvePositionConstraintsojdSolverData;
            thePrototype.VOIDsolveVelocityConstraintsojdSolverData = ojdjPrismaticJoint.VOIDsolveVelocityConstraintsojdSolverData;
            thePrototype.VOIDinitVelocityConstraintsojdSolverData = ojdjPrismaticJoint.VOIDinitVelocityConstraintsojdSolverData;
            thePrototype.BOOLEANgetCollideConnected = ojdjJoint.BOOLEANgetCollideConnected;
            thePrototype.ojdBodygetBodyB = ojdjJoint.ojdBodygetBodyB;
            thePrototype.ojdBodygetBodyA = ojdjJoint.ojdBodygetBodyA;
            thePrototype.ojdjJointTypegetType = ojdjJoint.ojdjJointTypegetType;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojdjJoint.classInitCheck();
            jlObject.classInitCheck();
            ojdjPrismaticJoint.VOIDclinit();
        }
    },

};

var ojdjPrismaticJointDef = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 157,
    __implementedTypes : [157,1,149],

    Create : function() {
        this.type = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.userData = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.bodyA = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.bodyB = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.collideConnected = false; // declared in org.jbox2d.dynamics.joints.JointDef
        this.localAnchorA = null; // declared in org.jbox2d.dynamics.joints.PrismaticJointDef
        this.localAnchorB = null; // declared in org.jbox2d.dynamics.joints.PrismaticJointDef
        this.localAxisA = null; // declared in org.jbox2d.dynamics.joints.PrismaticJointDef
        this.referenceAngle = 0; // declared in org.jbox2d.dynamics.joints.PrismaticJointDef
        this.lowerTranslation = 0; // declared in org.jbox2d.dynamics.joints.PrismaticJointDef
        this.upperTranslation = 0; // declared in org.jbox2d.dynamics.joints.PrismaticJointDef
        this.maxMotorForce = 0; // declared in org.jbox2d.dynamics.joints.PrismaticJointDef
        this.motorSpeed = 0; // declared in org.jbox2d.dynamics.joints.PrismaticJointDef
        this.enableLimit = false; // declared in org.jbox2d.dynamics.joints.PrismaticJointDef
        this.enableMotor = false; // declared in org.jbox2d.dynamics.joints.PrismaticJointDef
    },

    instanceOf : function(aType) {
        return ojdjPrismaticJointDef.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdjPrismaticJointDef;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        ojdjJointDef.VOIDinit(thisRef);
        var var0 = ojdjJointType.PRISMATIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4cdd17bc
        thisRef.type = var0;
        var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var1);
        thisRef.localAnchorA = var1;
        var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var2);
        thisRef.localAnchorB = var2;
        var var3 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinitFLOATFLOAT(var3,1.0,0.0);
        thisRef.localAxisA = var3;
        thisRef.referenceAngle = 0.0;
        thisRef.enableLimit = 0;
        thisRef.lowerTranslation = 0.0;
        thisRef.upperTranslation = 0.0;
        thisRef.enableMotor = 0;
        thisRef.maxMotorForce = 0.0;
        thisRef.motorSpeed = 0.0;
        return;
    },

    classInitCheck : function() {
        if (!ojdjPrismaticJointDef.__initialized) {
            ojdjPrismaticJointDef.__initialized = true;
            var thePrototype = ojdjPrismaticJointDef.Create.prototype;
            thePrototype.instanceOf = ojdjPrismaticJointDef.instanceOf;
            thePrototype.ClassgetClass = ojdjPrismaticJointDef.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojdjJointDef.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var ojcVec3 = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 158,
    __implementedTypes : [1,158,2],
    $assertionsDisabled : false, // declared in org.jbox2d.common.Vec3

    Create : function() {
        this.z = 0; // declared in org.jbox2d.common.Vec3
        this.y = 0; // declared in org.jbox2d.common.Vec3
        this.x = 0; // declared in org.jbox2d.common.Vec3
    },

    instanceOf : function(aType) {
        return ojcVec3.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcVec3;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcVec3.BOOLEANdesiredAssertionStatus(ojcVec3); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_9_13 : for(;;) switch (__label__) {
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_9_13;
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_9_13;
        }
        ojcVec3.$assertionsDisabled = var1;
        return;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        thisRef.z = 0.0;
        thisRef.y = 0.0;
        thisRef.x = 0.0;
        return;
    },

    VOIDinitFLOATFLOATFLOAT : function(thisRef,argX,argY,argZ) {
        var __label__ = null;
        thisRef.x = argX;
        thisRef.y = argY;
        thisRef.z = argZ;
        return;
    },

    ojcVec3clone : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcVec3.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec3.VOIDinitojcVec3(var0,thisRef);
        return var0;
    },

    VOIDinitojcVec3 : function(thisRef,argCopy) {
        var __label__ = null;
        var var0 = argCopy.x; // type is FLOAT value type is FLOAT
        thisRef.x = var0;
        var var1 = argCopy.y; // type is FLOAT value type is FLOAT
        thisRef.y = var1;
        var var2 = argCopy.z; // type is FLOAT value type is FLOAT
        thisRef.z = var2;
        return;
    },

    VOIDsetZero : function(thisRef) {
        var __label__ = null;
        thisRef.x = 0.0;
        thisRef.y = 0.0;
        thisRef.z = 0.0;
        return;
    },

    INThashCode : function(thisRef) {
        var __label__ = null;
        var local_1_INT = 31; // type is INT value type is INT
        var local_2_INT = 1; // type is INT value type is INT
        var var5 = (31 * local_2_INT); // type is INT value type is INT
        var var7 = jlFloat.INTfloatToIntBitsFLOAT(thisRef.x); // type is INT value type is INT
        var local_2_INT = (var5 + var7); // type is INT value type is INT
        var var11 = (31 * local_2_INT); // type is INT value type is INT
        var var13 = jlFloat.INTfloatToIntBitsFLOAT(thisRef.y); // type is INT value type is INT
        var local_2_INT = (var11 + var13); // type is INT value type is INT
        var var17 = (31 * local_2_INT); // type is INT value type is INT
        var var19 = jlFloat.INTfloatToIntBitsFLOAT(thisRef.z); // type is INT value type is INT
        var local_2_INT = (var17 + var19); // type is INT value type is INT
        return local_2_INT;
    },

    BOOLEANequalsjlObject : function(thisRef,obj) {
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((thisRef != obj)) {
                break $S_0;
            }
            return 1;
            }
        $S_7 : {
        // NORMAL
            if (obj != null ) {
                break $S_7;
            }
            return 0;
            }
        $S_13 : {
        // NORMAL
            var var0 = thisRef.ClassgetClass(); // type is REFERENCE value type is REFERENCE
            var var1 = obj.ClassgetClass(); // type is REFERENCE value type is REFERENCE
            if ((var0 == var1)) {
                break $S_13;
            }
            return 0;
            }
        $S_26 : {
        // NORMAL
            local_2_REFERENCE = obj; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@48545beb
            var var4 = jlFloat.INTfloatToIntBitsFLOAT(thisRef.x); // type is INT value type is INT
            var var7 = jlFloat.INTfloatToIntBitsFLOAT(local_2_REFERENCE.x); // type is INT value type is INT
            if ((var4 == var7)) {
                break $S_26;
            }
            return 0;
            }
        $S_50 : {
        // NORMAL
            var var9 = jlFloat.INTfloatToIntBitsFLOAT(thisRef.y); // type is INT value type is INT
            var var12 = jlFloat.INTfloatToIntBitsFLOAT(local_2_REFERENCE.y); // type is INT value type is INT
            if ((var9 == var12)) {
                break $S_50;
            }
            return 0;
            }
        var var14 = jlFloat.INTfloatToIntBitsFLOAT(thisRef.z); // type is INT value type is INT
        var var17 = jlFloat.INTfloatToIntBitsFLOAT(local_2_REFERENCE.z); // type is INT value type is INT
        if ((var14 == var17)) {
            return 1;
        }
        return 0;
    },

    jlStringtoString : function(thisRef) {
        var __label__ = null;
        var var0 = new jlStringBuilder.Create(); // type is REFERENCE value type is REFERENCE
        jlStringBuilder.VOIDinit(var0);
        var var1 = var0.jlStringBuilderappendjlString(var0,bytecoder.stringpool[8]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6143ae68
        var var3 = var1.jlStringBuilderappendFLOAT(var1,thisRef.x); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@eadcc10
        var var4 = var3.jlStringBuilderappendjlString(var3,bytecoder.stringpool[9]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@30e5c377
        var var6 = var4.jlStringBuilderappendFLOAT(var4,thisRef.y); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@321e79f7
        var var7 = var6.jlStringBuilderappendjlString(var6,bytecoder.stringpool[9]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4ed2a132
        var var9 = var7.jlStringBuilderappendFLOAT(var7,thisRef.z); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2eff39b4
        var var10 = var9.jlStringBuilderappendjlString(var9,bytecoder.stringpool[10]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@301fb967
        var var11 = var10.jlStringtoString(var10); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@710faf52
        return var11;
    },

    ojcVec3setFLOATFLOATFLOAT : function(thisRef,argX,argY,argZ) {
        var __label__ = null;
        thisRef.x = argX;
        thisRef.y = argY;
        thisRef.z = argZ;
        return thisRef;
    },

    ojcVec3mulLocalFLOAT : function(thisRef,argScalar) {
        var __label__ = null;
        var var1 = (thisRef.x * argScalar); // type is FLOAT value type is FLOAT
        thisRef.x = var1;
        var var3 = (thisRef.y * argScalar); // type is FLOAT value type is FLOAT
        thisRef.y = var3;
        var var5 = (thisRef.z * argScalar); // type is FLOAT value type is FLOAT
        thisRef.z = var5;
        return thisRef;
    },

    ojcVec3setojcVec3 : function(thisRef,argVec) {
        var __label__ = null;
        var var0 = argVec.x; // type is FLOAT value type is FLOAT
        thisRef.x = var0;
        var var1 = argVec.y; // type is FLOAT value type is FLOAT
        thisRef.y = var1;
        var var2 = argVec.z; // type is FLOAT value type is FLOAT
        thisRef.z = var2;
        return thisRef;
    },

    ojcVec3negateLocal : function(thisRef) {
        var __label__ = null;
        var var1 = (-thisRef.x); // type is FLOAT value type is FLOAT
        thisRef.x = var1;
        var var3 = (-thisRef.y); // type is FLOAT value type is FLOAT
        thisRef.y = var3;
        var var5 = (-thisRef.z); // type is FLOAT value type is FLOAT
        thisRef.z = var5;
        return thisRef;
    },

    VOIDcrossToOutUnsafeojcVec3ojcVec3ojcVec3 : function(a,b,out) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcVec3.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 19;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_6_19 : for(;;) switch (__label__) {
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    if ((out != b)) {
                        __label__ = 19;
                        continue $M_6_19;
                    }
                    }
                var var24 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var24);
                throw var24;
            case 19 :
            // NORMAL
                $S_19 : {
                // NORMAL
                    var var1 = ojcVec3.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                    if ((var1 != 0)) {
                        __label__ = 38;
                        break $S_19;
                    }
                    __label__ = 25;
                    }
                $M_38_25 : for(;;) switch (__label__) {
                    case 25 :
                    // NORMAL
                        $S_25 : {
                        // NORMAL
                            if ((out != a)) {
                                __label__ = 38;
                                continue $M_38_25;
                            }
                            }
                        var var23 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                        jlAssertionError.VOIDinit(var23);
                        throw var23;
                    case 38 :
                    // NORMAL
                        var var8 = ((a.y * b.z) - (a.z * b.y)); // type is FLOAT value type is FLOAT
                        out.x = var8;
                        var var15 = ((a.z * b.x) - (a.x * b.z)); // type is FLOAT value type is FLOAT
                        out.y = var15;
                        var var22 = ((a.x * b.y) - (a.y * b.x)); // type is FLOAT value type is FLOAT
                        out.z = var22;
                        return;
                }
        }
    },

    FLOATdotojcVec3ojcVec3 : function(a,b) {
        var __label__ = null;
        return (((a.x * b.x) + (a.y * b.y)) + (a.z * b.z));
    },

    ojcVec3addLocalojcVec3 : function(thisRef,argVec) {
        var __label__ = null;
        var var2 = (thisRef.x + argVec.x); // type is FLOAT value type is FLOAT
        thisRef.x = var2;
        var var5 = (thisRef.y + argVec.y); // type is FLOAT value type is FLOAT
        thisRef.y = var5;
        var var8 = (thisRef.z + argVec.z); // type is FLOAT value type is FLOAT
        thisRef.z = var8;
        return thisRef;
    },

    ojcVec3subLocalojcVec3 : function(thisRef,argVec) {
        var __label__ = null;
        var var2 = (thisRef.x - argVec.x); // type is FLOAT value type is FLOAT
        thisRef.x = var2;
        var var5 = (thisRef.y - argVec.y); // type is FLOAT value type is FLOAT
        thisRef.y = var5;
        var var8 = (thisRef.z - argVec.z); // type is FLOAT value type is FLOAT
        thisRef.z = var8;
        return thisRef;
    },

    classInitCheck : function() {
        if (!ojcVec3.__initialized) {
            ojcVec3.__initialized = true;
            var thePrototype = ojcVec3.Create.prototype;
            thePrototype.instanceOf = ojcVec3.instanceOf;
            thePrototype.ClassgetClass = ojcVec3.ClassgetClass;
            thePrototype.ojcVec3subLocalojcVec3 = ojcVec3.ojcVec3subLocalojcVec3;
            thePrototype.ojcVec3addLocalojcVec3 = ojcVec3.ojcVec3addLocalojcVec3;
            thePrototype.ojcVec3negateLocal = ojcVec3.ojcVec3negateLocal;
            thePrototype.ojcVec3setojcVec3 = ojcVec3.ojcVec3setojcVec3;
            thePrototype.ojcVec3mulLocalFLOAT = ojcVec3.ojcVec3mulLocalFLOAT;
            thePrototype.ojcVec3setFLOATFLOATFLOAT = ojcVec3.ojcVec3setFLOATFLOATFLOAT;
            thePrototype.jlStringtoString = ojcVec3.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = ojcVec3.BOOLEANequalsjlObject;
            thePrototype.INThashCode = ojcVec3.INThashCode;
            thePrototype.VOIDsetZero = ojcVec3.VOIDsetZero;
            thePrototype.ojcVec3clone = ojcVec3.ojcVec3clone;
            jlObject.classInitCheck();
            jiSerializable.classInitCheck();
            ojcVec3.VOIDclinit();
        }
    },

};

var ojdjLimitState = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 159,
    __implementedTypes : [1,14,159,59,2],
    INACTIVE : null, // declared in org.jbox2d.dynamics.joints.LimitState
    AT_LOWER : null, // declared in org.jbox2d.dynamics.joints.LimitState
    AT_UPPER : null, // declared in org.jbox2d.dynamics.joints.LimitState
    EQUAL : null, // declared in org.jbox2d.dynamics.joints.LimitState
    $VALUES : null, // declared in org.jbox2d.dynamics.joints.LimitState

    Create : function() {
        this.name = null; // declared in java.lang.Enum
        this.ordinalNumber = 0; // declared in java.lang.Enum
    },

    instanceOf : function(aType) {
        return ojdjLimitState.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdjLimitState;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var __label__ = null;
        var var0 = new ojdjLimitState.Create(); // type is REFERENCE value type is REFERENCE
        ojdjLimitState.VOIDinitjlStringINT(var0,bytecoder.stringpool[53],0);
        ojdjLimitState.INACTIVE = var0;
        var var1 = new ojdjLimitState.Create(); // type is REFERENCE value type is REFERENCE
        ojdjLimitState.VOIDinitjlStringINT(var1,bytecoder.stringpool[54],1);
        ojdjLimitState.AT_LOWER = var1;
        var var2 = new ojdjLimitState.Create(); // type is REFERENCE value type is REFERENCE
        ojdjLimitState.VOIDinitjlStringINT(var2,bytecoder.stringpool[55],2);
        ojdjLimitState.AT_UPPER = var2;
        var var3 = new ojdjLimitState.Create(); // type is REFERENCE value type is REFERENCE
        ojdjLimitState.VOIDinitjlStringINT(var3,bytecoder.stringpool[56],3);
        ojdjLimitState.EQUAL = var3;
        var var4 = bytecoder.newArray(4,null); // type is REFERENCE value type is REFERENCE
        var var5 = ojdjLimitState.INACTIVE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2788f65d
        var4.data[0] = var5;
        var var6 = ojdjLimitState.AT_LOWER; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@61fc7353
        var4.data[1] = var6;
        var var7 = ojdjLimitState.AT_UPPER; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@19ccc391
        var4.data[2] = var7;
        var var8 = ojdjLimitState.EQUAL; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@64302752
        var4.data[3] = var8;
        ojdjLimitState.$VALUES = var4;
        return;
    },

    VOIDinitjlStringINT : function(thisRef,p1,p2) {
        var __label__ = null;
        jlEnum.VOIDinitjlStringINT(thisRef,p1,p2);
        return;
    },

    classInitCheck : function() {
        if (!ojdjLimitState.__initialized) {
            ojdjLimitState.__initialized = true;
            var thePrototype = ojdjLimitState.Create.prototype;
            thePrototype.instanceOf = ojdjLimitState.instanceOf;
            thePrototype.ClassgetClass = ojdjLimitState.ClassgetClass;
            thePrototype.INTordinal = jlEnum.INTordinal;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlEnum.classInitCheck();
            jlObject.classInitCheck();
            jlComparable.classInitCheck();
            jiSerializable.classInitCheck();
            jlrArray.classInitCheck();
            ojdjLimitState.VOIDclinit();
        }
    },

};

var ojcMat33 = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 160,
    __implementedTypes : [1,160,2],
    $assertionsDisabled : false, // declared in org.jbox2d.common.Mat33
    IDENTITY : null, // declared in org.jbox2d.common.Mat33

    Create : function() {
        this.ex = null; // declared in org.jbox2d.common.Mat33
        this.ey = null; // declared in org.jbox2d.common.Mat33
        this.ez = null; // declared in org.jbox2d.common.Mat33
    },

    instanceOf : function(aType) {
        return ojcMat33.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcMat33;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcMat33.BOOLEANdesiredAssertionStatus(ojcMat33); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_13_9 : for(;;) switch (__label__) {
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_13_9;
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_13_9;
        }
        ojcMat33.$assertionsDisabled = var1;
        var var2 = new ojcMat33.Create(); // type is REFERENCE value type is REFERENCE
        var var3 = new ojcVec3.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec3.VOIDinitFLOATFLOATFLOAT(var3,1.0,0.0,0.0);
        var var4 = new ojcVec3.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec3.VOIDinitFLOATFLOATFLOAT(var4,0.0,1.0,0.0);
        var var5 = new ojcVec3.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec3.VOIDinitFLOATFLOATFLOAT(var5,0.0,0.0,1.0);
        ojcMat33.VOIDinitojcVec3ojcVec3ojcVec3(var2,var3,var4,var5);
        ojcMat33.IDENTITY = var2;
        return;
    },

    VOIDinitojcVec3ojcVec3ojcVec3 : function(thisRef,argCol1,argCol2,argCol3) {
        var __label__ = null;
        var var0 = argCol1.ojcVec3clone(argCol1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@724c1a26
        thisRef.ex = var0;
        var var1 = argCol2.ojcVec3clone(argCol2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@725f9ca4
        thisRef.ey = var1;
        var var2 = argCol3.ojcVec3clone(argCol3); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2e5268b0
        thisRef.ez = var2;
        return;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcVec3.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec3.VOIDinit(var0);
        thisRef.ex = var0;
        var var1 = new ojcVec3.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec3.VOIDinit(var1);
        thisRef.ey = var1;
        var var2 = new ojcVec3.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec3.VOIDinit(var2);
        thisRef.ez = var2;
        return;
    },

    INThashCode : function(thisRef) {
        var var9 = null; // type is INT # of inits = 2
        var var5 = null; // type is INT # of inits = 1
        var var13 = null; // type is INT # of inits = 1
        var var25 = null; // type is INT # of inits = 2
        var var17 = null; // type is INT # of inits = 2
        var var21 = null; // type is INT # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var local_1_INT = 31; // type is INT value type is INT
            var local_2_INT = 1; // type is INT value type is INT
            var5 = (31 * local_2_INT); // type is INT value type is INT
            var var6 = thisRef.ex; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7fe23e48
            if (var6 != null ) {
                __label__ = 20;
                break $S_0;
            }
            __label__ = 16;
            }
        $M_20_16 : for(;;) switch (__label__) {
            case 20 :
            // NORMAL
                var var8 = thisRef.ex.INThashCode(thisRef.ex); // type is INT value type is INT
                var9 = var8; // type is INT value type is INT
                break $M_20_16;
            case 16 :
            // NORMAL
                var9 = 0; // type is INT value type is INT
                break $M_20_16;
        }
        $S_27 : {
        // NORMAL
            var local_2_INT = (var5 + var9); // type is INT value type is INT
            var13 = (31 * local_2_INT); // type is INT value type is INT
            var var14 = thisRef.ey; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@64dad58f
            if (var14 != null ) {
                __label__ = 44;
                break $S_27;
            }
            __label__ = 40;
            }
        $M_40_44 : for(;;) switch (__label__) {
            case 44 :
            // NORMAL
                var var16 = thisRef.ey.INThashCode(thisRef.ey); // type is INT value type is INT
                var17 = var16; // type is INT value type is INT
                break $M_40_44;
            case 40 :
            // NORMAL
                var17 = 0; // type is INT value type is INT
                break $M_40_44;
        }
        $S_51 : {
        // NORMAL
            var local_2_INT = (var13 + var17); // type is INT value type is INT
            var21 = (31 * local_2_INT); // type is INT value type is INT
            var var22 = thisRef.ez; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@48a9547a
            if (var22 != null ) {
                __label__ = 68;
                break $S_51;
            }
            __label__ = 64;
            }
        $M_64_68 : for(;;) switch (__label__) {
            case 64 :
            // NORMAL
                var25 = 0; // type is INT value type is INT
                break $M_64_68;
            case 68 :
            // NORMAL
                var var24 = thisRef.ez.INThashCode(thisRef.ez); // type is INT value type is INT
                var25 = var24; // type is INT value type is INT
                break $M_64_68;
        }
        var local_2_INT = (var21 + var25); // type is INT value type is INT
        return local_2_INT;
    },

    BOOLEANequalsjlObject : function(thisRef,obj) {
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((thisRef != obj)) {
                break $S_0;
            }
            return 1;
            }
        $S_7 : {
        // NORMAL
            if (obj != null ) {
                break $S_7;
            }
            return 0;
            }
        $S_13 : {
        // NORMAL
            var var0 = thisRef.ClassgetClass(); // type is REFERENCE value type is REFERENCE
            var var1 = obj.ClassgetClass(); // type is REFERENCE value type is REFERENCE
            if ((var0 == var1)) {
                break $S_13;
            }
            return 0;
            }
        $S_26 : {
        // NORMAL
            local_2_REFERENCE = obj; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@69bb8477
            var var3 = thisRef.ex; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@511eb172
            if (var3 != null ) {
                __label__ = 47;
                break $S_26;
            }
            __label__ = 38;
            }
        $M_47_38 : for(;;) switch (__label__) {
            case 38 :
            // NORMAL
                var var9 = local_2_REFERENCE.ex; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@41aa5e1a
                if (var9 == null ) {
                    break $M_47_38;
                }
                return 0;
            case 47 :
            // NORMAL
                var var7 = thisRef.ex.BOOLEANequalsjlObject(thisRef.ex,local_2_REFERENCE.ex); // type is BOOLEAN value type is BOOLEAN
                if ((var7 != 0)) {
                    break $M_47_38;
                }
                return 0;
        }
        $S_63 : {
        // NORMAL
            var var10 = thisRef.ey; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@73e62a8e
            if (var10 != null ) {
                __label__ = 79;
                break $S_63;
            }
            __label__ = 70;
            }
        $M_70_79 : for(;;) switch (__label__) {
            case 79 :
            // NORMAL
                var var16 = thisRef.ey.BOOLEANequalsjlObject(thisRef.ey,local_2_REFERENCE.ey); // type is BOOLEAN value type is BOOLEAN
                if ((var16 != 0)) {
                    break $M_70_79;
                }
                return 0;
            case 70 :
            // NORMAL
                var var12 = local_2_REFERENCE.ey; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6a48f27f
                if (var12 == null ) {
                    break $M_70_79;
                }
                return 0;
        }
        $S_95 : {
        // NORMAL
            var var17 = thisRef.ez; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4ef94b65
            if (var17 != null ) {
                __label__ = 111;
                break $S_95;
            }
            __label__ = 102;
            }
        for(;;) switch (__label__) {
            case 111 :
            // NORMAL
                var var21 = thisRef.ez.BOOLEANequalsjlObject(thisRef.ez,local_2_REFERENCE.ez); // type is BOOLEAN value type is BOOLEAN
                if ((var21 != 0)) {
                    return 1;
                }
                return 0;
            case 102 :
            // NORMAL
                var var23 = local_2_REFERENCE.ez; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5db0962e
                if (var23 == null ) {
                    return 1;
                }
                return 0;
        }
    },

    VOIDsolve33ToOutojcVec3ojcVec3 : function(thisRef,b,out) {
        var local_3_FLOAT = null; // type is FLOAT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcMat33.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 19;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_19_6 : for(;;) switch (__label__) {
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    if ((b != out)) {
                        __label__ = 19;
                        continue $M_19_6;
                    }
                    }
                var var36 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var36);
                throw var36;
            case 19 :
            // NORMAL
                $S_19 : {
                // NORMAL
                    ojcVec3.VOIDcrossToOutUnsafeojcVec3ojcVec3ojcVec3(thisRef.ey,thisRef.ez,out);
                    var var4 = ojcVec3.FLOATdotojcVec3ojcVec3(thisRef.ex,out); // type is FLOAT value type is FLOAT
                    local_3_FLOAT = var4; // type is FLOAT value type is FLOAT
                    var var7 = local_3_FLOAT; // type is FLOAT value type is FLOAT
                    if ((var7 == 0.0)) {
                        __label__ = 50;
                        break $S_19;
                    }
                    __label__ = 46;
                    }
                $M_50_46 : for(;;) switch (__label__) {
                    case 50 :
                    // NORMAL
                        ojcVec3.VOIDcrossToOutUnsafeojcVec3ojcVec3ojcVec3(thisRef.ey,thisRef.ez,out);
                        var var14 = local_3_FLOAT; // type is FLOAT value type is FLOAT
                        var var15 = ojcVec3.FLOATdotojcVec3ojcVec3(b,out); // type is FLOAT value type is FLOAT
                        var local_4_FLOAT = (var14 * var15); // type is FLOAT value type is FLOAT
                        ojcVec3.VOIDcrossToOutUnsafeojcVec3ojcVec3ojcVec3(b,thisRef.ez,out);
                        var var20 = local_3_FLOAT; // type is FLOAT value type is FLOAT
                        var var22 = ojcVec3.FLOATdotojcVec3ojcVec3(thisRef.ex,out); // type is FLOAT value type is FLOAT
                        var local_5_FLOAT = (var20 * var22); // type is FLOAT value type is FLOAT
                        ojcVec3.VOIDcrossToOutUnsafeojcVec3ojcVec3ojcVec3(thisRef.ey,b,out);
                        var var27 = local_3_FLOAT; // type is FLOAT value type is FLOAT
                        var var29 = ojcVec3.FLOATdotojcVec3ojcVec3(thisRef.ex,out); // type is FLOAT value type is FLOAT
                        var local_6_FLOAT = (var27 * var29); // type is FLOAT value type is FLOAT
                        var var33 = local_4_FLOAT; // type is FLOAT value type is FLOAT
                        out.x = var33;
                        var var34 = local_5_FLOAT; // type is FLOAT value type is FLOAT
                        out.y = var34;
                        var var35 = local_6_FLOAT; // type is FLOAT value type is FLOAT
                        out.z = var35;
                        return;
                    case 46 :
                    // NORMAL
                        local_3_FLOAT = (1.0 / local_3_FLOAT); // type is FLOAT value type is FLOAT
                        __label__ = 50;
                        continue $M_50_46;
                }
        }
    },

    VOIDsolve22ToOutojcVec2ojcVec2 : function(thisRef,b,out) {
        var local_4_FLOAT = null; // type is FLOAT # of inits = 1
        var local_3_FLOAT = null; // type is FLOAT # of inits = 1
        var local_5_FLOAT = null; // type is FLOAT # of inits = 1
        var local_6_FLOAT = null; // type is FLOAT # of inits = 1
        var local_7_FLOAT = null; // type is FLOAT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_3_FLOAT = thisRef.ex.x; // type is FLOAT value type is FLOAT
            local_4_FLOAT = thisRef.ey.x; // type is FLOAT value type is FLOAT
            local_5_FLOAT = thisRef.ex.y; // type is FLOAT value type is FLOAT
            local_6_FLOAT = thisRef.ey.y; // type is FLOAT value type is FLOAT
            local_7_FLOAT = ((local_3_FLOAT * local_6_FLOAT) - (local_4_FLOAT * local_5_FLOAT)); // type is FLOAT value type is FLOAT
            var var25 = local_7_FLOAT; // type is FLOAT value type is FLOAT
            if ((var25 == 0.0)) {
                __label__ = 60;
                break $S_0;
            }
            __label__ = 54;
            }
        $M_60_54 : for(;;) switch (__label__) {
            case 54 :
            // NORMAL
                local_7_FLOAT = (1.0 / local_7_FLOAT); // type is FLOAT value type is FLOAT
                __label__ = 60;
                continue $M_60_54;
            case 60 :
            // NORMAL
                var var38 = (local_7_FLOAT * ((local_6_FLOAT * b.x) - (local_4_FLOAT * b.y))); // type is FLOAT value type is FLOAT
                out.x = var38;
                var var47 = (local_7_FLOAT * ((local_3_FLOAT * b.y) - (local_5_FLOAT * b.x))); // type is FLOAT value type is FLOAT
                out.y = var47;
                return;
        }
    },

    VOIDgetInverse22ojcMat33 : function(thisRef,M) {
        var local_5_FLOAT = null; // type is FLOAT # of inits = 1
        var local_6_FLOAT = null; // type is FLOAT # of inits = 2
        var local_2_FLOAT = null; // type is FLOAT # of inits = 1
        var local_4_FLOAT = null; // type is FLOAT # of inits = 1
        var local_3_FLOAT = null; // type is FLOAT # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_2_FLOAT = thisRef.ex.x; // type is FLOAT value type is FLOAT
            local_3_FLOAT = thisRef.ey.x; // type is FLOAT value type is FLOAT
            local_4_FLOAT = thisRef.ex.y; // type is FLOAT value type is FLOAT
            local_5_FLOAT = thisRef.ey.y; // type is FLOAT value type is FLOAT
            local_6_FLOAT = ((local_2_FLOAT * local_5_FLOAT) - (local_3_FLOAT * local_4_FLOAT)); // type is FLOAT value type is FLOAT
            var var25 = local_6_FLOAT; // type is FLOAT value type is FLOAT
            if ((var25 == 0.0)) {
                __label__ = 58;
                break $S_0;
            }
            __label__ = 52;
            }
        $M_58_52 : for(;;) switch (__label__) {
            case 58 :
            // NORMAL
                var var30 = M.ex; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2b0c6c62
                var var33 = (local_6_FLOAT * local_5_FLOAT); // type is FLOAT value type is FLOAT
                var30.x = var33;
                var var34 = M.ey; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@612573a6
                var var38 = ((-local_6_FLOAT) * local_3_FLOAT); // type is FLOAT value type is FLOAT
                var34.x = var38;
                var var39 = M.ex; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5e716f1f
                var39.z = 0.0;
                var var40 = M.ex; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4d92d7a0
                var var44 = ((-local_6_FLOAT) * local_4_FLOAT); // type is FLOAT value type is FLOAT
                var40.y = var44;
                var var45 = M.ey; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@535cd0c
                var var48 = (local_6_FLOAT * local_2_FLOAT); // type is FLOAT value type is FLOAT
                var45.y = var48;
                var var49 = M.ey; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4f47264f
                var49.z = 0.0;
                var var50 = M.ez; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1a1bb12f
                var50.x = 0.0;
                var var51 = M.ez; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@41ef4a1b
                var51.y = 0.0;
                var var52 = M.ez; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6a99a287
                var52.z = 0.0;
                return;
            case 52 :
            // NORMAL
                local_6_FLOAT = (1.0 / local_6_FLOAT); // type is FLOAT value type is FLOAT
                __label__ = 58;
                continue $M_58_52;
        }
    },

    VOIDgetSymInverse33ojcMat33 : function(thisRef,M) {
        var local_5_FLOAT = null; // type is FLOAT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var local_2_FLOAT = ((thisRef.ey.y * thisRef.ez.z) - (thisRef.ey.z * thisRef.ez.y)); // type is FLOAT value type is FLOAT
            var local_3_FLOAT = ((thisRef.ey.z * thisRef.ez.x) - (thisRef.ey.x * thisRef.ez.z)); // type is FLOAT value type is FLOAT
            var local_4_FLOAT = ((thisRef.ey.x * thisRef.ez.y) - (thisRef.ey.y * thisRef.ez.x)); // type is FLOAT value type is FLOAT
            local_5_FLOAT = (((thisRef.ex.x * local_2_FLOAT) + (thisRef.ex.y * local_3_FLOAT)) + (thisRef.ex.z * local_4_FLOAT)); // type is FLOAT value type is FLOAT
            var var55 = local_5_FLOAT; // type is FLOAT value type is FLOAT
            if ((var55 == 0.0)) {
                __label__ = 142;
                break $S_0;
            }
            __label__ = 136;
            }
        $M_136_142 : for(;;) switch (__label__) {
            case 142 :
            // NORMAL
                var local_6_FLOAT = thisRef.ex.x; // type is FLOAT value type is FLOAT
                var local_7_FLOAT = thisRef.ey.x; // type is FLOAT value type is FLOAT
                var local_8_FLOAT = thisRef.ez.x; // type is FLOAT value type is FLOAT
                var local_9_FLOAT = thisRef.ey.y; // type is FLOAT value type is FLOAT
                var local_10_FLOAT = thisRef.ez.y; // type is FLOAT value type is FLOAT
                var local_11_FLOAT = thisRef.ez.z; // type is FLOAT value type is FLOAT
                var var84 = M.ex; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4be7d5aa
                var var93 = (local_5_FLOAT * ((local_9_FLOAT * local_11_FLOAT) - (local_10_FLOAT * local_10_FLOAT))); // type is FLOAT value type is FLOAT
                var84.x = var93;
                var var94 = M.ex; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@75b091c5
                var var103 = (local_5_FLOAT * ((local_8_FLOAT * local_10_FLOAT) - (local_7_FLOAT * local_11_FLOAT))); // type is FLOAT value type is FLOAT
                var94.y = var103;
                var var104 = M.ex; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@29e32b59
                var var113 = (local_5_FLOAT * ((local_7_FLOAT * local_10_FLOAT) - (local_8_FLOAT * local_9_FLOAT))); // type is FLOAT value type is FLOAT
                var104.z = var113;
                var var114 = M.ey; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3e562a35
                var var116 = M.ex.y; // type is FLOAT value type is FLOAT
                var114.x = var116;
                var var117 = M.ey; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4b69f2d0
                var var126 = (local_5_FLOAT * ((local_6_FLOAT * local_11_FLOAT) - (local_8_FLOAT * local_8_FLOAT))); // type is FLOAT value type is FLOAT
                var117.y = var126;
                var var127 = M.ey; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3aa66cc1
                var var136 = (local_5_FLOAT * ((local_8_FLOAT * local_7_FLOAT) - (local_6_FLOAT * local_10_FLOAT))); // type is FLOAT value type is FLOAT
                var127.z = var136;
                var var137 = M.ez; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@aaf312f
                var var139 = M.ex.z; // type is FLOAT value type is FLOAT
                var137.x = var139;
                var var140 = M.ez; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5a7a5cd
                var var142 = M.ey.z; // type is FLOAT value type is FLOAT
                var140.y = var142;
                var var143 = M.ez; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1dc38db
                var var152 = (local_5_FLOAT * ((local_6_FLOAT * local_9_FLOAT) - (local_7_FLOAT * local_7_FLOAT))); // type is FLOAT value type is FLOAT
                var143.z = var152;
                return;
            case 136 :
            // NORMAL
                local_5_FLOAT = (1.0 / local_5_FLOAT); // type is FLOAT value type is FLOAT
                __label__ = 142;
                continue $M_136_142;
        }
    },

    VOIDmul22ToOutUnsafeojcMat33ojcVec2ojcVec2 : function(A,v,out) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcMat33.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 19;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_19_6 : for(;;) switch (__label__) {
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    if ((v != out)) {
                        __label__ = 19;
                        continue $M_19_6;
                    }
                    }
                var var1 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var1);
                throw var1;
            case 19 :
            // NORMAL
                var var10 = ((A.ex.y * v.x) + (A.ey.y * v.y)); // type is FLOAT value type is FLOAT
                out.y = var10;
                var var19 = ((A.ex.x * v.x) + (A.ey.x * v.y)); // type is FLOAT value type is FLOAT
                out.x = var19;
                return;
        }
    },

    VOIDmulToOutUnsafeojcMat33ojcVec3ojcVec3 : function(A,v,out) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcMat33.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 19;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_19_6 : for(;;) switch (__label__) {
            case 19 :
            // NORMAL
                var var14 = (((v.x * A.ex.x) + (v.y * A.ey.x)) + (v.z * A.ez.x)); // type is FLOAT value type is FLOAT
                out.x = var14;
                var var28 = (((v.x * A.ex.y) + (v.y * A.ey.y)) + (v.z * A.ez.y)); // type is FLOAT value type is FLOAT
                out.y = var28;
                var var42 = (((v.x * A.ex.z) + (v.y * A.ey.z)) + (v.z * A.ez.z)); // type is FLOAT value type is FLOAT
                out.z = var42;
                return;
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    if ((out != v)) {
                        __label__ = 19;
                        continue $M_19_6;
                    }
                    }
                var var43 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var43);
                throw var43;
        }
    },

    classInitCheck : function() {
        if (!ojcMat33.__initialized) {
            ojcMat33.__initialized = true;
            var thePrototype = ojcMat33.Create.prototype;
            thePrototype.instanceOf = ojcMat33.instanceOf;
            thePrototype.ClassgetClass = ojcMat33.ClassgetClass;
            thePrototype.VOIDgetSymInverse33ojcMat33 = ojcMat33.VOIDgetSymInverse33ojcMat33;
            thePrototype.VOIDgetInverse22ojcMat33 = ojcMat33.VOIDgetInverse22ojcMat33;
            thePrototype.VOIDsolve22ToOutojcVec2ojcVec2 = ojcMat33.VOIDsolve22ToOutojcVec2ojcVec2;
            thePrototype.VOIDsolve33ToOutojcVec3ojcVec3 = ojcMat33.VOIDsolve33ToOutojcVec3ojcVec3;
            thePrototype.BOOLEANequalsjlObject = ojcMat33.BOOLEANequalsjlObject;
            thePrototype.INThashCode = ojcMat33.INThashCode;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            jlObject.classInitCheck();
            jiSerializable.classInitCheck();
            ojcVec3.classInitCheck();
            ojcMat33.VOIDclinit();
        }
    },

};

var ojdjRevoluteJoint = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 161,
    __implementedTypes : [1,161,117],
    $assertionsDisabled : false, // declared in org.jbox2d.dynamics.joints.Joint
    $assertionsDisabled : false, // declared in org.jbox2d.dynamics.joints.RevoluteJoint

    Create : function() {
        this.pool = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_type = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_prev = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_next = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_bodyA = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_bodyB = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_collideConnected = false; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_islandFlag = false; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_userData = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_edgeA = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_edgeB = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_localAnchorA = null; // declared in org.jbox2d.dynamics.joints.RevoluteJoint
        this.m_localAnchorB = null; // declared in org.jbox2d.dynamics.joints.RevoluteJoint
        this.m_impulse = null; // declared in org.jbox2d.dynamics.joints.RevoluteJoint
        this.m_rA = null; // declared in org.jbox2d.dynamics.joints.RevoluteJoint
        this.m_rB = null; // declared in org.jbox2d.dynamics.joints.RevoluteJoint
        this.m_localCenterA = null; // declared in org.jbox2d.dynamics.joints.RevoluteJoint
        this.m_localCenterB = null; // declared in org.jbox2d.dynamics.joints.RevoluteJoint
        this.m_mass = null; // declared in org.jbox2d.dynamics.joints.RevoluteJoint
        this.m_referenceAngle = 0; // declared in org.jbox2d.dynamics.joints.RevoluteJoint
        this.m_motorImpulse = 0; // declared in org.jbox2d.dynamics.joints.RevoluteJoint
        this.m_lowerAngle = 0; // declared in org.jbox2d.dynamics.joints.RevoluteJoint
        this.m_upperAngle = 0; // declared in org.jbox2d.dynamics.joints.RevoluteJoint
        this.m_maxMotorTorque = 0; // declared in org.jbox2d.dynamics.joints.RevoluteJoint
        this.m_motorSpeed = 0; // declared in org.jbox2d.dynamics.joints.RevoluteJoint
        this.m_enableLimit = false; // declared in org.jbox2d.dynamics.joints.RevoluteJoint
        this.m_enableMotor = false; // declared in org.jbox2d.dynamics.joints.RevoluteJoint
        this.m_limitState = null; // declared in org.jbox2d.dynamics.joints.RevoluteJoint
        this.m_indexA = 0; // declared in org.jbox2d.dynamics.joints.RevoluteJoint
        this.m_indexB = 0; // declared in org.jbox2d.dynamics.joints.RevoluteJoint
        this.m_invMassA = 0; // declared in org.jbox2d.dynamics.joints.RevoluteJoint
        this.m_invMassB = 0; // declared in org.jbox2d.dynamics.joints.RevoluteJoint
        this.m_invIA = 0; // declared in org.jbox2d.dynamics.joints.RevoluteJoint
        this.m_invIB = 0; // declared in org.jbox2d.dynamics.joints.RevoluteJoint
        this.m_motorMass = 0; // declared in org.jbox2d.dynamics.joints.RevoluteJoint
    },

    instanceOf : function(aType) {
        return ojdjRevoluteJoint.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdjRevoluteJoint;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    ojdjJointcreateojdWorldojdjJointDef : function(p0,p1) {
         return ojdjJoint.ojdjJointcreateojdWorldojdjJointDef(p0,p1);
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdjRevoluteJoint.BOOLEANdesiredAssertionStatus(ojdjRevoluteJoint); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_13_9 : for(;;) switch (__label__) {
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_13_9;
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_13_9;
        }
        ojdjRevoluteJoint.$assertionsDisabled = var1;
        return;
    },

    VOIDinitojpIWorldPoolojdjRevoluteJointDef : function(thisRef,argWorld,def) {
        var __label__ = null;
        ojdjJoint.VOIDinitojpIWorldPoolojdjJointDef(thisRef,argWorld,def);
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var0);
        thisRef.m_localAnchorA = var0;
        var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var1);
        thisRef.m_localAnchorB = var1;
        var var2 = new ojcVec3.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec3.VOIDinit(var2);
        thisRef.m_impulse = var2;
        var var3 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var3);
        thisRef.m_rA = var3;
        var var4 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var4);
        thisRef.m_rB = var4;
        var var5 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var5);
        thisRef.m_localCenterA = var5;
        var var6 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var6);
        thisRef.m_localCenterB = var6;
        var var7 = new ojcMat33.Create(); // type is REFERENCE value type is REFERENCE
        ojcMat33.VOIDinit(var7);
        thisRef.m_mass = var7;
        var var10 = thisRef.m_localAnchorA.ojcVec2setojcVec2(thisRef.m_localAnchorA,def.localAnchorA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@74f57b
        var var13 = thisRef.m_localAnchorB.ojcVec2setojcVec2(thisRef.m_localAnchorB,def.localAnchorB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@19c4aca8
        var var14 = def.referenceAngle; // type is FLOAT value type is FLOAT
        thisRef.m_referenceAngle = var14;
        thisRef.m_motorImpulse = 0.0;
        var var15 = def.lowerAngle; // type is FLOAT value type is FLOAT
        thisRef.m_lowerAngle = var15;
        var var16 = def.upperAngle; // type is FLOAT value type is FLOAT
        thisRef.m_upperAngle = var16;
        var var17 = def.maxMotorTorque; // type is FLOAT value type is FLOAT
        thisRef.m_maxMotorTorque = var17;
        var var18 = def.motorSpeed; // type is FLOAT value type is FLOAT
        thisRef.m_motorSpeed = var18;
        var var19 = def.enableLimit; // type is BOOLEAN value type is BOOLEAN
        thisRef.m_enableLimit = var19;
        var var20 = def.enableMotor; // type is BOOLEAN value type is BOOLEAN
        thisRef.m_enableMotor = var20;
        var var21 = ojdjLimitState.INACTIVE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@c714a64
        thisRef.m_limitState = var21;
        return;
    },

    VOIDinitVelocityConstraintsojdSolverData : function(thisRef,data) {
        var local_14_FLOAT = null; // type is FLOAT # of inits = 1
        var local_16_FLOAT = null; // type is FLOAT # of inits = 1
        var local_2_FLOAT = null; // type is FLOAT # of inits = 1
        var local_4_FLOAT = null; // type is FLOAT # of inits = 2
        var local_7_FLOAT = null; // type is FLOAT # of inits = 2
        var local_13_FLOAT = null; // type is FLOAT # of inits = 1
        var local_15_INT = null; // type is INT # of inits = 1
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_11_FLOAT = null; // type is FLOAT # of inits = 1
        var local_12_FLOAT = null; // type is FLOAT # of inits = 1
        var local_5_FLOAT = null; // type is FLOAT # of inits = 1
        var var101 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var1 = thisRef.m_bodyA.m_islandIndex; // type is INT value type is INT
            thisRef.m_indexA = var1;
            var var3 = thisRef.m_bodyB.m_islandIndex; // type is INT value type is INT
            thisRef.m_indexB = var3;
            var var8 = thisRef.m_localCenterA.ojcVec2setojcVec2(thisRef.m_localCenterA,thisRef.m_bodyA.m_sweep.localCenter); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2f9c2229
            var var13 = thisRef.m_localCenterB.ojcVec2setojcVec2(thisRef.m_localCenterB,thisRef.m_bodyB.m_sweep.localCenter); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@76e0dfd6
            var var15 = thisRef.m_bodyA.m_invMass; // type is FLOAT value type is FLOAT
            thisRef.m_invMassA = var15;
            var var17 = thisRef.m_bodyB.m_invMass; // type is FLOAT value type is FLOAT
            thisRef.m_invMassB = var17;
            var var19 = thisRef.m_bodyA.m_invI; // type is FLOAT value type is FLOAT
            thisRef.m_invIA = var19;
            var var21 = thisRef.m_bodyB.m_invI; // type is FLOAT value type is FLOAT
            thisRef.m_invIB = var21;
            var var24 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_2_FLOAT = var24.a; // type is FLOAT value type is FLOAT
            var var30 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_3_REFERENCE = var30.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@61158645
            var var35 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_4_FLOAT = var35.w; // type is FLOAT value type is FLOAT
            var var41 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_5_FLOAT = var41.a; // type is FLOAT value type is FLOAT
            var var47 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_6_REFERENCE = var47.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7d18e858
            var var52 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_7_FLOAT = var52.w; // type is FLOAT value type is FLOAT
            var var57 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@335b00b8
            var local_8_REFERENCE = var57; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4335676a
            var var60 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@e5ff6e7
            var local_9_REFERENCE = var60; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@34bf955c
            var var63 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5f8a0db3
            var local_10_REFERENCE = var63; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@37ec3f1f
            var var67 = local_8_REFERENCE.ojcRotsetFLOAT(local_8_REFERENCE,local_2_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@46751fcb
            var var70 = local_9_REFERENCE.ojcRotsetFLOAT(local_9_REFERENCE,local_5_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@ea8772c
            var var71 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4335676a
            var var74 = local_10_REFERENCE.ojcVec2setojcVec2(local_10_REFERENCE,thisRef.m_localAnchorA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@14014df
            var var76 = var74.ojcVec2subLocalojcVec2(var74,thisRef.m_localCenterA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5702d72f
            ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var71,var76,thisRef.m_rA);
            var var78 = local_9_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@34bf955c
            var var81 = local_10_REFERENCE.ojcVec2setojcVec2(local_10_REFERENCE,thisRef.m_localAnchorB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@39670143
            var var83 = var81.ojcVec2subLocalojcVec2(var81,thisRef.m_localCenterB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@74bb0054
            ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var78,var83,thisRef.m_rB);
            local_11_FLOAT = thisRef.m_invMassA; // type is FLOAT value type is FLOAT
            local_12_FLOAT = thisRef.m_invMassB; // type is FLOAT value type is FLOAT
            local_13_FLOAT = thisRef.m_invIA; // type is FLOAT value type is FLOAT
            local_14_FLOAT = thisRef.m_invIB; // type is FLOAT value type is FLOAT
            var var99 = (local_13_FLOAT + local_14_FLOAT); // type is FLOAT value type is FLOAT
            if ((var99 != 0.0)) {
                __label__ = 320;
                break $S_0;
            }
            __label__ = 316;
            }
        $M_320_316 : for(;;) switch (__label__) {
            case 320 :
            // NORMAL
                var101 = 0; // type is INT value type is INT
                break $M_320_316;
            case 316 :
            // NORMAL
                var101 = 1; // type is INT value type is INT
                break $M_320_316;
        }
        $S_321 : {
        // NORMAL
            local_15_INT = var101; // type is INT value type is INT
            var var105 = thisRef.m_mass.ex; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@75dc14f0
            var var124 = (((local_11_FLOAT + local_12_FLOAT) + ((thisRef.m_rA.y * thisRef.m_rA.y) * local_13_FLOAT)) + ((thisRef.m_rB.y * thisRef.m_rB.y) * local_14_FLOAT)); // type is FLOAT value type is FLOAT
            var105.x = var124;
            var var126 = thisRef.m_mass.ey; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@34a60ecb
            var var142 = ((((-thisRef.m_rA.y) * thisRef.m_rA.x) * local_13_FLOAT) - ((thisRef.m_rB.y * thisRef.m_rB.x) * local_14_FLOAT)); // type is FLOAT value type is FLOAT
            var126.x = var142;
            var var144 = thisRef.m_mass.ez; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@35ca6c05
            var var154 = (((-thisRef.m_rA.y) * local_13_FLOAT) - (thisRef.m_rB.y * local_14_FLOAT)); // type is FLOAT value type is FLOAT
            var144.x = var154;
            var var156 = thisRef.m_mass.ex; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@195f6348
            var var159 = thisRef.m_mass.ey.x; // type is FLOAT value type is FLOAT
            var156.y = var159;
            var var161 = thisRef.m_mass.ey; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@cb19f07
            var var180 = (((local_11_FLOAT + local_12_FLOAT) + ((thisRef.m_rA.x * thisRef.m_rA.x) * local_13_FLOAT)) + ((thisRef.m_rB.x * thisRef.m_rB.x) * local_14_FLOAT)); // type is FLOAT value type is FLOAT
            var161.y = var180;
            var var182 = thisRef.m_mass.ez; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@8e5180c
            var var191 = ((thisRef.m_rA.x * local_13_FLOAT) + (thisRef.m_rB.x * local_14_FLOAT)); // type is FLOAT value type is FLOAT
            var182.y = var191;
            var var193 = thisRef.m_mass.ex; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6ea9e751
            var var196 = thisRef.m_mass.ez.x; // type is FLOAT value type is FLOAT
            var193.z = var196;
            var var198 = thisRef.m_mass.ey; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@c8e8cef
            var var201 = thisRef.m_mass.ez.y; // type is FLOAT value type is FLOAT
            var198.z = var201;
            var var203 = thisRef.m_mass.ez; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@c4763de
            var var206 = (local_13_FLOAT + local_14_FLOAT); // type is FLOAT value type is FLOAT
            var203.z = var206;
            var var209 = (local_13_FLOAT + local_14_FLOAT); // type is FLOAT value type is FLOAT
            thisRef.m_motorMass = var209;
            var var210 = thisRef.m_motorMass; // type is FLOAT value type is FLOAT
            if ((var210 <= 0.0)) {
                __label__ = 643;
                break $S_321;
            }
            __label__ = 633;
            }
        $M_633_643 : for(;;) switch (__label__) {
            case 643 :
            // NORMAL
                $S_643 : {
                // NORMAL
                    var var214 = thisRef.m_enableMotor; // type is BOOLEAN value type is BOOLEAN
                    if ((var214 == 0)) {
                        __label__ = 655;
                        break $S_643;
                    }
                    __label__ = 650;
                    }
                $M_655_650 : for(;;) switch (__label__) {
                    case 650 :
                    // NORMAL
                        var var215 = local_15_INT; // type is INT value type is INT
                        if ((var215 == 0)) {
                            break $M_655_650;
                        }
                        __label__ = 655;
                        continue $M_655_650;
                    case 655 :
                    // NORMAL
                        thisRef.m_motorImpulse = 0.0;
                        break $M_655_650;
                }
                $S_660 : {
                // NORMAL
                    var var216 = thisRef.m_enableLimit; // type is BOOLEAN value type is BOOLEAN
                    if ((var216 == 0)) {
                        __label__ = 805;
                        break $S_660;
                    }
                    __label__ = 667;
                    }
                $M_805_667 : for(;;) switch (__label__) {
                    case 667 :
                    // NORMAL
                        $S_667 : {
                        // NORMAL
                            var var217 = local_15_INT; // type is INT value type is INT
                            if ((var217 != 0)) {
                                __label__ = 805;
                                continue $M_805_667;
                            }
                            }
                        $S_672 : {
                        // NORMAL
                            local_16_FLOAT = ((local_5_FLOAT - local_2_FLOAT) - thisRef.m_referenceAngle); // type is FLOAT value type is FLOAT
                            var var228 = ojcMathUtils.FLOATabsFLOAT((thisRef.m_upperAngle - thisRef.m_lowerAngle)); // type is FLOAT value type is FLOAT
                            if ((var228 >= 0.06981318)) {
                                __label__ = 711;
                                break $S_672;
                            }
                            __label__ = 701;
                            }
                        $M_711_701 : for(;;) switch (__label__) {
                            case 711 :
                            // NORMAL
                                $S_711 : {
                                // NORMAL
                                    var var230 = local_16_FLOAT; // type is FLOAT value type is FLOAT
                                    var var231 = thisRef.m_lowerAngle; // type is FLOAT value type is FLOAT
                                    if ((var230 > var231)) {
                                        __label__ = 749;
                                        break $S_711;
                                    }
                                    __label__ = 721;
                                    }
                                for(;;) switch (__label__) {
                                    case 749 :
                                    // NORMAL
                                        $S_749 : {
                                        // NORMAL
                                            var var233 = local_16_FLOAT; // type is FLOAT value type is FLOAT
                                            var var234 = thisRef.m_upperAngle; // type is FLOAT value type is FLOAT
                                            if ((var233 < var234)) {
                                                __label__ = 787;
                                                break $S_749;
                                            }
                                            __label__ = 759;
                                            }
                                        for(;;) switch (__label__) {
                                            case 759 :
                                            // NORMAL
                                                $S_759 : {
                                                // NORMAL
                                                    var var236 = thisRef.m_limitState; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2cc22f22
                                                    var var237 = ojdjLimitState.AT_UPPER; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@d70d684
                                                    if ((var236 == var237)) {
                                                        __label__ = 777;
                                                        break $S_759;
                                                    }
                                                    __label__ = 769;
                                                    }
                                                $M_769_777 : for(;;) switch (__label__) {
                                                    case 777 :
                                                    // NORMAL
                                                        var var239 = ojdjLimitState.AT_UPPER; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@75e1ca31
                                                        thisRef.m_limitState = var239;
                                                        break $M_711_701;
                                                    case 769 :
                                                    // NORMAL
                                                        var var238 = thisRef.m_impulse; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@420f0ec0
                                                        var238.z = 0.0;
                                                        __label__ = 777;
                                                        continue $M_769_777;
                                                }
                                            case 787 :
                                            // NORMAL
                                                var var241 = ojdjLimitState.INACTIVE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7f89929c
                                                thisRef.m_limitState = var241;
                                                var var242 = thisRef.m_impulse; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@74c6bf1f
                                                var242.z = 0.0;
                                                break $M_711_701;
                                        }
                                    case 721 :
                                    // NORMAL
                                        $S_721 : {
                                        // NORMAL
                                            var var243 = thisRef.m_limitState; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@f0d43f4
                                            var var244 = ojdjLimitState.AT_LOWER; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@35ce35db
                                            if ((var243 == var244)) {
                                                __label__ = 739;
                                                break $S_721;
                                            }
                                            __label__ = 731;
                                            }
                                        $M_739_731 : for(;;) switch (__label__) {
                                            case 739 :
                                            // NORMAL
                                                var var246 = ojdjLimitState.AT_LOWER; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6604c8c
                                                thisRef.m_limitState = var246;
                                                break $M_711_701;
                                            case 731 :
                                            // NORMAL
                                                var var245 = thisRef.m_impulse; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@471f3518
                                                var245.z = 0.0;
                                                __label__ = 739;
                                                continue $M_739_731;
                                        }
                                }
                            case 701 :
                            // NORMAL
                                var var240 = ojdjLimitState.EQUAL; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2268ccec
                                thisRef.m_limitState = var240;
                                break $M_711_701;
                        }
                        break $M_805_667;
                    case 805 :
                    // NORMAL
                        var var247 = ojdjLimitState.INACTIVE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@66cc4597
                        thisRef.m_limitState = var247;
                        break $M_805_667;
                }
                $S_812 : {
                // NORMAL
                    var var249 = data.step.warmStarting; // type is BOOLEAN value type is BOOLEAN
                    if ((var249 == 0)) {
                        __label__ = 1054;
                        break $S_812;
                    }
                    __label__ = 822;
                    }
                $M_822_1054 : for(;;) switch (__label__) {
                    case 1054 :
                    // NORMAL
                        thisRef.m_impulse.VOIDsetZero(thisRef.m_impulse);
                        thisRef.m_motorImpulse = 0.0;
                        break $M_822_1054;
                    case 822 :
                    // NORMAL
                        var var251 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@62cc71ee
                        var local_16_REFERENCE = var251; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5cc52f5a
                        var var253 = thisRef.m_impulse; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@38ae8782
                        var var257 = (var253.x * data.step.dtRatio); // type is FLOAT value type is FLOAT
                        var253.x = var257;
                        var var258 = thisRef.m_impulse; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3cca9dfd
                        var var262 = (var258.y * data.step.dtRatio); // type is FLOAT value type is FLOAT
                        var258.y = var262;
                        var var266 = (thisRef.m_motorImpulse * data.step.dtRatio); // type is FLOAT value type is FLOAT
                        thisRef.m_motorImpulse = var266;
                        var var267 = local_16_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5cc52f5a
                        var var269 = thisRef.m_impulse.x; // type is FLOAT value type is FLOAT
                        var267.x = var269;
                        var var270 = local_16_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5cc52f5a
                        var var272 = thisRef.m_impulse.y; // type is FLOAT value type is FLOAT
                        var270.y = var272;
                        var var273 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5777af4f
                        var var279 = (var273.x - (local_11_FLOAT * local_16_REFERENCE.x)); // type is FLOAT value type is FLOAT
                        var273.x = var279;
                        var var280 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5777af4f
                        var var286 = (var280.y - (local_11_FLOAT * local_16_REFERENCE.y)); // type is FLOAT value type is FLOAT
                        var280.y = var286;
                        var var287 = local_4_FLOAT; // type is FLOAT value type is FLOAT
                        var var288 = local_13_FLOAT; // type is FLOAT value type is FLOAT
                        var var291 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.m_rA,local_16_REFERENCE); // type is FLOAT value type is FLOAT
                        local_4_FLOAT = (var287 - (var288 * ((var291 + thisRef.m_motorImpulse) + thisRef.m_impulse.z))); // type is FLOAT value type is FLOAT
                        var var300 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7b39ef80
                        var var306 = (var300.x + (local_12_FLOAT * local_16_REFERENCE.x)); // type is FLOAT value type is FLOAT
                        var300.x = var306;
                        var var307 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7b39ef80
                        var var313 = (var307.y + (local_12_FLOAT * local_16_REFERENCE.y)); // type is FLOAT value type is FLOAT
                        var307.y = var313;
                        var var314 = local_7_FLOAT; // type is FLOAT value type is FLOAT
                        var var315 = local_14_FLOAT; // type is FLOAT value type is FLOAT
                        var var318 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.m_rB,local_16_REFERENCE); // type is FLOAT value type is FLOAT
                        local_7_FLOAT = (var314 + (var315 * ((var318 + thisRef.m_motorImpulse) + thisRef.m_impulse.z))); // type is FLOAT value type is FLOAT
                        thisRef.pool.VOIDpushVec2INT(thisRef.pool,1);
                        break $M_822_1054;
                }
                var var331 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
                var var332 = local_4_FLOAT; // type is FLOAT value type is FLOAT
                var331.w = var332;
                var var335 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
                var var336 = local_7_FLOAT; // type is FLOAT value type is FLOAT
                var335.w = var336;
                thisRef.pool.VOIDpushVec2INT(thisRef.pool,1);
                thisRef.pool.VOIDpushRotINT(thisRef.pool,2);
                return;
            case 633 :
            // NORMAL
                var var213 = (1.0 / thisRef.m_motorMass); // type is FLOAT value type is FLOAT
                thisRef.m_motorMass = var213;
                __label__ = 643;
                continue $M_633_643;
        }
    },

    VOIDsolveVelocityConstraintsojdSolverData : function(thisRef,data) {
        var local_8_FLOAT = null; // type is FLOAT # of inits = 1
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var var38 = null; // type is INT # of inits = 2
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_5_FLOAT = null; // type is FLOAT # of inits = 4
        var local_11_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_6_FLOAT = null; // type is FLOAT # of inits = 1
        var local_12_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_7_FLOAT = null; // type is FLOAT # of inits = 1
        var local_3_FLOAT = null; // type is FLOAT # of inits = 4
        var local_15_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_9_FLOAT = null; // type is FLOAT # of inits = 1
        var local_10_INT = null; // type is INT # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var2 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_2_REFERENCE = var2.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5a5ce0c1
            var var7 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_3_FLOAT = var7.w; // type is FLOAT value type is FLOAT
            var var13 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_4_REFERENCE = var13.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2d406a
            var var18 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_5_FLOAT = var18.w; // type is FLOAT value type is FLOAT
            local_6_FLOAT = thisRef.m_invMassA; // type is FLOAT value type is FLOAT
            local_7_FLOAT = thisRef.m_invMassB; // type is FLOAT value type is FLOAT
            local_8_FLOAT = thisRef.m_invIA; // type is FLOAT value type is FLOAT
            local_9_FLOAT = thisRef.m_invIB; // type is FLOAT value type is FLOAT
            var var36 = (local_8_FLOAT + local_9_FLOAT); // type is FLOAT value type is FLOAT
            if ((var36 != 0.0)) {
                __label__ = 92;
                break $S_0;
            }
            __label__ = 88;
            }
        $M_88_92 : for(;;) switch (__label__) {
            case 92 :
            // NORMAL
                var38 = 0; // type is INT value type is INT
                break $M_88_92;
            case 88 :
            // NORMAL
                var38 = 1; // type is INT value type is INT
                break $M_88_92;
        }
        $S_93 : {
        // NORMAL
            local_10_INT = var38; // type is INT value type is INT
            var var41 = thisRef.m_enableMotor; // type is BOOLEAN value type is BOOLEAN
            if ((var41 == 0)) {
                __label__ = 204;
                break $S_93;
            }
            __label__ = 102;
            }
        $M_102_204 : for(;;) switch (__label__) {
            case 204 :
            // NORMAL
                $S_204 : {
                // NORMAL
                    var var91 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@43f08644
                    local_11_REFERENCE = var91; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6e4a51f9
                    var var93 = thisRef.m_enableLimit; // type is BOOLEAN value type is BOOLEAN
                    if ((var93 == 0)) {
                        __label__ = 925;
                        break $S_204;
                    }
                    __label__ = 222;
                    }
                $M_222_925 : for(;;) switch (__label__) {
                    case 925 :
                    // NORMAL
                        var var310 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@66d49261
                        local_12_REFERENCE = var310; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1b558c4d
                        var var312 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5bb33c92
                        var local_13_REFERENCE = var312; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@31f7199e
                        ojcVec2.VOIDcrossToOutUnsafeFLOATojcVec2ojcVec2(local_3_FLOAT,thisRef.m_rA,local_11_REFERENCE);
                        ojcVec2.VOIDcrossToOutUnsafeFLOATojcVec2ojcVec2(local_5_FLOAT,thisRef.m_rB,local_12_REFERENCE);
                        var var321 = local_12_REFERENCE.ojcVec2addLocalojcVec2(local_12_REFERENCE,local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@76726b42
                        var var323 = var321.ojcVec2subLocalojcVec2(var321,local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3477a877
                        var var325 = var323.ojcVec2subLocalojcVec2(var323,local_11_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@766245c7
                        var var326 = thisRef.m_mass; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7f50897c
                        var var328 = local_12_REFERENCE.ojcVec2negateLocal(local_12_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1a1dc5af
                        var326.VOIDsolve22ToOutojcVec2ojcVec2(var326,var328,local_13_REFERENCE);
                        var var330 = thisRef.m_impulse; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1320f28b
                        var var334 = (var330.x + local_13_REFERENCE.x); // type is FLOAT value type is FLOAT
                        var330.x = var334;
                        var var335 = thisRef.m_impulse; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7788d155
                        var var339 = (var335.y + local_13_REFERENCE.y); // type is FLOAT value type is FLOAT
                        var335.y = var339;
                        var var340 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1f2478b6
                        var var346 = (var340.x - (local_6_FLOAT * local_13_REFERENCE.x)); // type is FLOAT value type is FLOAT
                        var340.x = var346;
                        var var347 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1f2478b6
                        var var353 = (var347.y - (local_6_FLOAT * local_13_REFERENCE.y)); // type is FLOAT value type is FLOAT
                        var347.y = var353;
                        var var354 = local_3_FLOAT; // type is FLOAT value type is FLOAT
                        var var355 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                        var var358 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.m_rA,local_13_REFERENCE); // type is FLOAT value type is FLOAT
                        local_3_FLOAT = (var354 - (var355 * var358)); // type is FLOAT value type is FLOAT
                        var var362 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@58af58bd
                        var var368 = (var362.x + (local_7_FLOAT * local_13_REFERENCE.x)); // type is FLOAT value type is FLOAT
                        var362.x = var368;
                        var var369 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@58af58bd
                        var var375 = (var369.y + (local_7_FLOAT * local_13_REFERENCE.y)); // type is FLOAT value type is FLOAT
                        var369.y = var375;
                        var var376 = local_5_FLOAT; // type is FLOAT value type is FLOAT
                        var var377 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                        var var380 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.m_rB,local_13_REFERENCE); // type is FLOAT value type is FLOAT
                        local_5_FLOAT = (var376 + (var377 * var380)); // type is FLOAT value type is FLOAT
                        thisRef.pool.VOIDpushVec2INT(thisRef.pool,2);
                        break $M_222_925;
                    case 222 :
                    // NORMAL
                        $S_222 : {
                        // NORMAL
                            var var94 = thisRef.m_limitState; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@ce8adb1
                            var var95 = ojdjLimitState.INACTIVE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@78ac213e
                            if ((var94 == var95)) {
                                __label__ = 925;
                                continue $M_222_925;
                            }
                            }
                        $S_232 : {
                        // NORMAL
                            var var96 = local_10_INT; // type is INT value type is INT
                            if ((var96 != 0)) {
                                __label__ = 925;
                                continue $M_222_925;
                            }
                            }
                        $S_237 : {
                        // NORMAL
                            var var98 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6c8c300a
                            local_12_REFERENCE = var98; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2708b1d2
                            var var101 = thisRef.pool.ojcVec3popVec3(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5dbf56b7
                            var local_13_REFERENCE = var101; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1473ed94
                            ojcVec2.VOIDcrossToOutUnsafeFLOATojcVec2ojcVec2(local_3_FLOAT,thisRef.m_rA,local_11_REFERENCE);
                            ojcVec2.VOIDcrossToOutUnsafeFLOATojcVec2ojcVec2(local_5_FLOAT,thisRef.m_rB,local_12_REFERENCE);
                            var var111 = local_12_REFERENCE.ojcVec2addLocalojcVec2(local_12_REFERENCE,local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@dcf8bf5
                            var var113 = var111.ojcVec2subLocalojcVec2(var111,local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4ef626
                            var var115 = var113.ojcVec2subLocalojcVec2(var113,local_11_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@27631276
                            var local_14_FLOAT = (local_5_FLOAT - local_3_FLOAT); // type is FLOAT value type is FLOAT
                            var var126 = local_13_REFERENCE.ojcVec3setFLOATFLOATFLOAT(local_13_REFERENCE,local_12_REFERENCE.x,local_12_REFERENCE.y,local_14_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2c774443
                            var var128 = thisRef.pool.ojcVec3popVec3(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5d16f21b
                            local_15_REFERENCE = var128; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@391d552a
                            thisRef.m_mass.VOIDsolve33ToOutojcVec3ojcVec3(thisRef.m_mass,local_13_REFERENCE,local_15_REFERENCE);
                            var var134 = local_15_REFERENCE.ojcVec3negateLocal(local_15_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2a9ed059
                            var var135 = thisRef.m_limitState; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@155197de
                            var var136 = ojdjLimitState.EQUAL; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3928c6b
                            if ((var135 != var136)) {
                                __label__ = 372;
                                break $S_237;
                            }
                            __label__ = 359;
                            }
                        $M_359_372 : for(;;) switch (__label__) {
                            case 372 :
                            // NORMAL
                                $S_372 : {
                                // NORMAL
                                    var var140 = thisRef.m_limitState; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@697e2028
                                    var var141 = ojdjLimitState.AT_LOWER; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@353e2946
                                    if ((var140 != var141)) {
                                        __label__ = 568;
                                        break $S_372;
                                    }
                                    __label__ = 382;
                                    }
                                for(;;) switch (__label__) {
                                    case 568 :
                                    // NORMAL
                                        $S_568 : {
                                        // NORMAL
                                            var var142 = thisRef.m_limitState; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2cc8a758
                                            var var143 = ojdjLimitState.AT_UPPER; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3bae877e
                                            if ((var142 != var143)) {
                                                break $M_359_372;
                                            }
                                            }
                                        $S_578 : {
                                        // NORMAL
                                            var local_16_FLOAT = (thisRef.m_impulse.z + local_15_REFERENCE.z); // type is FLOAT value type is FLOAT
                                            var var151 = local_16_FLOAT; // type is FLOAT value type is FLOAT
                                            if ((var151 <= 0.0)) {
                                                __label__ = 751;
                                                break $S_578;
                                            }
                                            __label__ = 600;
                                            }
                                        for(;;) switch (__label__) {
                                            case 751 :
                                            // NORMAL
                                                var var155 = thisRef.m_impulse.ojcVec3addLocalojcVec3(thisRef.m_impulse,local_15_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@23498f43
                                                break $M_359_372;
                                            case 600 :
                                            // NORMAL
                                                var var209 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@67f9e675
                                                var local_17_REFERENCE = var209; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@e626fb5
                                                var var217 = local_17_REFERENCE.ojcVec2setFLOATFLOAT(local_17_REFERENCE,thisRef.m_mass.ez.x,thisRef.m_mass.ez.y); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@41389c70
                                                var var220 = var217.ojcVec2mulLocalFLOAT(var217,thisRef.m_impulse.z); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2e643083
                                                var var222 = var220.ojcVec2subLocalojcVec2(var220,local_12_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@686b174
                                                thisRef.m_mass.VOIDsolve22ToOutojcVec2ojcVec2(thisRef.m_mass,local_17_REFERENCE,local_11_REFERENCE);
                                                var var226 = local_15_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@391d552a
                                                var var228 = local_11_REFERENCE.x; // type is FLOAT value type is FLOAT
                                                var226.x = var228;
                                                var var229 = local_15_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@391d552a
                                                var var231 = local_11_REFERENCE.y; // type is FLOAT value type is FLOAT
                                                var229.y = var231;
                                                var var232 = local_15_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@391d552a
                                                var var235 = (-thisRef.m_impulse.z); // type is FLOAT value type is FLOAT
                                                var232.z = var235;
                                                var var236 = thisRef.m_impulse; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1b0469d6
                                                var var240 = (var236.x + local_11_REFERENCE.x); // type is FLOAT value type is FLOAT
                                                var236.x = var240;
                                                var var241 = thisRef.m_impulse; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1e5abdda
                                                var var245 = (var241.y + local_11_REFERENCE.y); // type is FLOAT value type is FLOAT
                                                var241.y = var245;
                                                var var246 = thisRef.m_impulse; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@11b576ba
                                                var246.z = 0.0;
                                                thisRef.pool.VOIDpushVec2INT(thisRef.pool,1);
                                                break $M_359_372;
                                        }
                                    case 382 :
                                    // NORMAL
                                        $S_382 : {
                                        // NORMAL
                                            var local_16_FLOAT = (thisRef.m_impulse.z + local_15_REFERENCE.z); // type is FLOAT value type is FLOAT
                                            var var162 = local_16_FLOAT; // type is FLOAT value type is FLOAT
                                            if ((var162 >= 0.0)) {
                                                __label__ = 555;
                                                break $S_382;
                                            }
                                            __label__ = 404;
                                            }
                                        $M_555_404 : for(;;) switch (__label__) {
                                            case 555 :
                                            // NORMAL
                                                var var166 = thisRef.m_impulse.ojcVec3addLocalojcVec3(thisRef.m_impulse,local_15_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@228b68e9
                                                break $M_555_404;
                                            case 404 :
                                            // NORMAL
                                                var var168 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1a79ffb7
                                                var local_17_REFERENCE = var168; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5106354f
                                                var var177 = local_17_REFERENCE.ojcVec2setFLOATFLOAT(local_17_REFERENCE,thisRef.m_mass.ez.x,thisRef.m_mass.ez.y); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6bbc9973
                                                var var180 = var177.ojcVec2mulLocalFLOAT(var177,thisRef.m_impulse.z); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@120968cd
                                                var var182 = var180.ojcVec2subLocalojcVec2(var180,local_12_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@47d8b97c
                                                thisRef.m_mass.VOIDsolve22ToOutojcVec2ojcVec2(thisRef.m_mass,local_17_REFERENCE,local_11_REFERENCE);
                                                var var186 = local_15_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@391d552a
                                                var var188 = local_11_REFERENCE.x; // type is FLOAT value type is FLOAT
                                                var186.x = var188;
                                                var var189 = local_15_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@391d552a
                                                var var191 = local_11_REFERENCE.y; // type is FLOAT value type is FLOAT
                                                var189.y = var191;
                                                var var192 = local_15_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@391d552a
                                                var var195 = (-thisRef.m_impulse.z); // type is FLOAT value type is FLOAT
                                                var192.z = var195;
                                                var var196 = thisRef.m_impulse; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@27144085
                                                var var200 = (var196.x + local_11_REFERENCE.x); // type is FLOAT value type is FLOAT
                                                var196.x = var200;
                                                var var201 = thisRef.m_impulse; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@286c2215
                                                var var205 = (var201.y + local_11_REFERENCE.y); // type is FLOAT value type is FLOAT
                                                var201.y = var205;
                                                var var206 = thisRef.m_impulse; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@71fa78d5
                                                var206.z = 0.0;
                                                thisRef.pool.VOIDpushVec2INT(thisRef.pool,1);
                                                break $M_555_404;
                                        }
                                        break $M_359_372;
                                }
                            case 359 :
                            // NORMAL
                                var var139 = thisRef.m_impulse.ojcVec3addLocalojcVec3(thisRef.m_impulse,local_15_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@73eb3ccf
                                break $M_359_372;
                        }
                        var var249 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@76fe4a5f
                        var local_16_REFERENCE = var249; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3f4bb21f
                        var var256 = local_16_REFERENCE.ojcVec2setFLOATFLOAT(local_16_REFERENCE,local_15_REFERENCE.x,local_15_REFERENCE.y); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1dd549f3
                        var var257 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1f2478b6
                        var var263 = (var257.x - (local_6_FLOAT * local_16_REFERENCE.x)); // type is FLOAT value type is FLOAT
                        var257.x = var263;
                        var var264 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1f2478b6
                        var var270 = (var264.y - (local_6_FLOAT * local_16_REFERENCE.y)); // type is FLOAT value type is FLOAT
                        var264.y = var270;
                        var var271 = local_3_FLOAT; // type is FLOAT value type is FLOAT
                        var var272 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                        var var275 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.m_rA,local_16_REFERENCE); // type is FLOAT value type is FLOAT
                        local_3_FLOAT = (var271 - (var272 * (var275 + local_15_REFERENCE.z))); // type is FLOAT value type is FLOAT
                        var var282 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@58af58bd
                        var var288 = (var282.x + (local_7_FLOAT * local_16_REFERENCE.x)); // type is FLOAT value type is FLOAT
                        var282.x = var288;
                        var var289 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@58af58bd
                        var var295 = (var289.y + (local_7_FLOAT * local_16_REFERENCE.y)); // type is FLOAT value type is FLOAT
                        var289.y = var295;
                        var var296 = local_5_FLOAT; // type is FLOAT value type is FLOAT
                        var var297 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                        var var300 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.m_rB,local_16_REFERENCE); // type is FLOAT value type is FLOAT
                        local_5_FLOAT = (var296 + (var297 * (var300 + local_15_REFERENCE.z))); // type is FLOAT value type is FLOAT
                        thisRef.pool.VOIDpushVec2INT(thisRef.pool,2);
                        thisRef.pool.VOIDpushVec3INT(thisRef.pool,2);
                        break $M_222_925;
                }
                var var387 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
                var var388 = local_3_FLOAT; // type is FLOAT value type is FLOAT
                var387.w = var388;
                var var391 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
                var var392 = local_5_FLOAT; // type is FLOAT value type is FLOAT
                var391.w = var392;
                thisRef.pool.VOIDpushVec2INT(thisRef.pool,1);
                return;
            case 102 :
            // NORMAL
                $S_102 : {
                // NORMAL
                    var var42 = thisRef.m_limitState; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@37f203c2
                    var var43 = ojdjLimitState.EQUAL; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@33da1bd1
                    if ((var42 == var43)) {
                        __label__ = 204;
                        continue $M_102_204;
                    }
                    }
                $S_112 : {
                // NORMAL
                    var var44 = local_10_INT; // type is INT value type is INT
                    if ((var44 != 0)) {
                        __label__ = 204;
                        continue $M_102_204;
                    }
                    }
                var local_11_FLOAT = ((local_5_FLOAT - local_3_FLOAT) - thisRef.m_motorSpeed); // type is FLOAT value type is FLOAT
                var local_12_FLOAT = ((-thisRef.m_motorMass) * local_11_FLOAT); // type is FLOAT value type is FLOAT
                var local_13_FLOAT = thisRef.m_motorImpulse; // type is FLOAT value type is FLOAT
                var local_14_FLOAT = (data.step.dt * thisRef.m_maxMotorTorque); // type is FLOAT value type is FLOAT
                var var73 = ojcMathUtils.FLOATclampFLOATFLOATFLOAT((thisRef.m_motorImpulse + local_12_FLOAT),(-local_14_FLOAT),local_14_FLOAT); // type is FLOAT value type is FLOAT
                thisRef.m_motorImpulse = var73;
                var local_12_FLOAT = (thisRef.m_motorImpulse - local_13_FLOAT); // type is FLOAT value type is FLOAT
                local_3_FLOAT = (local_3_FLOAT - (local_8_FLOAT * local_12_FLOAT)); // type is FLOAT value type is FLOAT
                local_5_FLOAT = (local_5_FLOAT + (local_9_FLOAT * local_12_FLOAT)); // type is FLOAT value type is FLOAT
                __label__ = 204;
                continue $M_102_204;
        }
    },

    BOOLEANsolvePositionConstraintsojdSolverData : function(thisRef,data) {
        var local_8_FLOAT = null; // type is FLOAT # of inits = 4
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_5_FLOAT = null; // type is FLOAT # of inits = 3
        var var42 = null; // type is INT # of inits = 2
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_12_FLOAT = null; // type is FLOAT # of inits = 4
        var local_11_FLOAT = null; // type is FLOAT # of inits = 1
        var local_7_FLOAT = null; // type is FLOAT # of inits = 3
        var local_10_INT = null; // type is INT # of inits = 1
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var1 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@dfbae1
            local_2_REFERENCE = var1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@446f0a55
            var var4 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4384bd1c
            local_3_REFERENCE = var4; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@21c4eb7e
            var var8 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_4_REFERENCE = var8.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@32561e92
            var var13 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_5_FLOAT = var13.a; // type is FLOAT value type is FLOAT
            var var19 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_6_REFERENCE = var19.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6305fd09
            var var24 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_7_FLOAT = var24.a; // type is FLOAT value type is FLOAT
            var var30 = local_2_REFERENCE.ojcRotsetFLOAT(local_2_REFERENCE,local_5_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1e705b3a
            var var33 = local_3_REFERENCE.ojcRotsetFLOAT(local_3_REFERENCE,local_7_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@787a79b5
            local_8_FLOAT = 0.0; // type is FLOAT value type is FLOAT
            var local_9_FLOAT = 0.0; // type is FLOAT value type is FLOAT
            var var40 = (thisRef.m_invIA + thisRef.m_invIB); // type is FLOAT value type is FLOAT
            if ((var40 != 0.0)) {
                __label__ = 114;
                break $S_0;
            }
            __label__ = 110;
            }
        $M_114_110 : for(;;) switch (__label__) {
            case 114 :
            // NORMAL
                var42 = 0; // type is INT value type is INT
                break $M_114_110;
            case 110 :
            // NORMAL
                var42 = 1; // type is INT value type is INT
                break $M_114_110;
        }
        $S_115 : {
        // NORMAL
            local_10_INT = var42; // type is INT value type is INT
            var var45 = thisRef.m_enableLimit; // type is BOOLEAN value type is BOOLEAN
            if ((var45 == 0)) {
                __label__ = 320;
                break $S_115;
            }
            __label__ = 124;
            }
        $M_320_124 : for(;;) switch (__label__) {
            case 124 :
            // NORMAL
                $S_124 : {
                // NORMAL
                    var var46 = thisRef.m_limitState; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7a5a4aa6
                    var var47 = ojdjLimitState.INACTIVE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@367b1d51
                    if ((var46 == var47)) {
                        __label__ = 320;
                        continue $M_320_124;
                    }
                    }
                $S_134 : {
                // NORMAL
                    var var48 = local_10_INT; // type is INT value type is INT
                    if ((var48 != 0)) {
                        __label__ = 320;
                        continue $M_320_124;
                    }
                    }
                $S_139 : {
                // NORMAL
                    local_11_FLOAT = ((local_7_FLOAT - local_5_FLOAT) - thisRef.m_referenceAngle); // type is FLOAT value type is FLOAT
                    local_12_FLOAT = 0.0; // type is FLOAT value type is FLOAT
                    var var58 = thisRef.m_limitState; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2ace292f
                    var var59 = ojdjLimitState.EQUAL; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1525a12
                    if ((var58 != var59)) {
                        __label__ = 200;
                        break $S_139;
                    }
                    __label__ = 164;
                    }
                $M_200_164 : for(;;) switch (__label__) {
                    case 164 :
                    // NORMAL
                        var var63 = ojcMathUtils.FLOATclampFLOATFLOATFLOAT((local_11_FLOAT - thisRef.m_lowerAngle),-0.13962635,0.13962635); // type is FLOAT value type is FLOAT
                        var local_13_FLOAT = var63; // type is FLOAT value type is FLOAT
                        local_12_FLOAT = ((-thisRef.m_motorMass) * local_13_FLOAT); // type is FLOAT value type is FLOAT
                        var var72 = ojcMathUtils.FLOATabsFLOAT(local_13_FLOAT); // type is FLOAT value type is FLOAT
                        local_8_FLOAT = var72; // type is FLOAT value type is FLOAT
                        break $M_200_164;
                    case 200 :
                    // NORMAL
                        $S_200 : {
                        // NORMAL
                            var var74 = thisRef.m_limitState; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@29f53fe4
                            var var75 = ojdjLimitState.AT_LOWER; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@470a3e1e
                            if ((var74 != var75)) {
                                __label__ = 250;
                                break $S_200;
                            }
                            __label__ = 210;
                            }
                        for(;;) switch (__label__) {
                            case 250 :
                            // NORMAL
                                $S_250 : {
                                // NORMAL
                                    var var92 = thisRef.m_limitState; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1c56e081
                                    var var93 = ojdjLimitState.AT_UPPER; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@fc7bbd3
                                    if ((var92 != var93)) {
                                        break $M_200_164;
                                    }
                                    }
                                var local_13_FLOAT = (local_11_FLOAT - thisRef.m_upperAngle); // type is FLOAT value type is FLOAT
                                local_8_FLOAT = local_13_FLOAT; // type is FLOAT value type is FLOAT
                                var var102 = ojcMathUtils.FLOATclampFLOATFLOATFLOAT((local_13_FLOAT - 0.03490659),0.0,0.13962635); // type is FLOAT value type is FLOAT
                                var local_13_FLOAT = var102; // type is FLOAT value type is FLOAT
                                local_12_FLOAT = ((-thisRef.m_motorMass) * local_13_FLOAT); // type is FLOAT value type is FLOAT
                                break $M_200_164;
                            case 210 :
                            // NORMAL
                                var local_13_FLOAT = (local_11_FLOAT - thisRef.m_lowerAngle); // type is FLOAT value type is FLOAT
                                local_8_FLOAT = (-local_13_FLOAT); // type is FLOAT value type is FLOAT
                                var var85 = ojcMathUtils.FLOATclampFLOATFLOATFLOAT((local_13_FLOAT + 0.03490659),-0.13962635,0.0); // type is FLOAT value type is FLOAT
                                var local_13_FLOAT = var85; // type is FLOAT value type is FLOAT
                                local_12_FLOAT = ((-thisRef.m_motorMass) * local_13_FLOAT); // type is FLOAT value type is FLOAT
                                break $M_200_164;
                        }
                }
                local_5_FLOAT = (local_5_FLOAT - (thisRef.m_invIA * local_12_FLOAT)); // type is FLOAT value type is FLOAT
                local_7_FLOAT = (local_7_FLOAT + (thisRef.m_invIB * local_12_FLOAT)); // type is FLOAT value type is FLOAT
                __label__ = 320;
                continue $M_320_124;
            case 320 :
            // NORMAL
                $S_320 : {
                // NORMAL
                    var var123 = local_2_REFERENCE.ojcRotsetFLOAT(local_2_REFERENCE,local_5_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@f4dbfd0
                    var var126 = local_3_REFERENCE.ojcRotsetFLOAT(local_3_REFERENCE,local_7_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@19a18ae9
                    var var128 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@32d833b4
                    var local_11_REFERENCE = var128; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@730f1f
                    var var131 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@62a293fe
                    var local_12_REFERENCE = var131; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7741bb81
                    var var134 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4f7734e
                    var local_13_REFERENCE = var134; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1ce48f38
                    var var137 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6a2fd239
                    var local_14_REFERENCE = var137; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1048e14e
                    var var139 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@446f0a55
                    var var142 = local_13_REFERENCE.ojcVec2setojcVec2(local_13_REFERENCE,thisRef.m_localAnchorA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2f9a8d0a
                    var var144 = var142.ojcVec2subLocalojcVec2(var142,thisRef.m_localCenterA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@173f4a8e
                    ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var139,var144,local_11_REFERENCE);
                    var var146 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@21c4eb7e
                    var var149 = local_13_REFERENCE.ojcVec2setojcVec2(local_13_REFERENCE,thisRef.m_localAnchorB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@315fc4a
                    var var151 = var149.ojcVec2subLocalojcVec2(var149,thisRef.m_localCenterB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@54002ff7
                    ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var146,var151,local_12_REFERENCE);
                    var var155 = local_13_REFERENCE.ojcVec2setojcVec2(local_13_REFERENCE,local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2f890aa0
                    var var157 = var155.ojcVec2addLocalojcVec2(var155,local_12_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@428f5ee5
                    var var159 = var157.ojcVec2subLocalojcVec2(var157,local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6ed40d52
                    var var161 = var159.ojcVec2subLocalojcVec2(var159,local_11_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3bfef8e8
                    var var163 = local_13_REFERENCE.FLOATlength(local_13_REFERENCE); // type is FLOAT value type is FLOAT
                    var local_9_FLOAT = var163; // type is FLOAT value type is FLOAT
                    var local_15_FLOAT = thisRef.m_invMassA; // type is FLOAT value type is FLOAT
                    var local_16_FLOAT = thisRef.m_invMassB; // type is FLOAT value type is FLOAT
                    var local_17_FLOAT = thisRef.m_invIA; // type is FLOAT value type is FLOAT
                    var local_18_FLOAT = thisRef.m_invIB; // type is FLOAT value type is FLOAT
                    var var178 = thisRef.pool.ojcMat22popMat22(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5c45393d
                    var local_19_REFERENCE = var178; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@64052c26
                    var var181 = local_19_REFERENCE.ex; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2af51369
                    var var200 = (((local_15_FLOAT + local_16_FLOAT) + ((local_17_FLOAT * local_11_REFERENCE.y) * local_11_REFERENCE.y)) + ((local_18_FLOAT * local_12_REFERENCE.y) * local_12_REFERENCE.y)); // type is FLOAT value type is FLOAT
                    var181.x = var200;
                    var var202 = local_19_REFERENCE.ex; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@66808767
                    var var218 = ((((-local_17_FLOAT) * local_11_REFERENCE.x) * local_11_REFERENCE.y) - ((local_18_FLOAT * local_12_REFERENCE.x) * local_12_REFERENCE.y)); // type is FLOAT value type is FLOAT
                    var202.y = var218;
                    var var220 = local_19_REFERENCE.ey; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@13f9c65b
                    var var223 = local_19_REFERENCE.ex.y; // type is FLOAT value type is FLOAT
                    var220.x = var223;
                    var var225 = local_19_REFERENCE.ey; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5e50bc1e
                    var var244 = (((local_15_FLOAT + local_16_FLOAT) + ((local_17_FLOAT * local_11_REFERENCE.x) * local_11_REFERENCE.x)) + ((local_18_FLOAT * local_12_REFERENCE.x) * local_12_REFERENCE.x)); // type is FLOAT value type is FLOAT
                    var225.y = var244;
                    local_19_REFERENCE.VOIDsolveToOutojcVec2ojcVec2(local_19_REFERENCE,local_13_REFERENCE,local_14_REFERENCE);
                    var var249 = local_14_REFERENCE.ojcVec2negateLocal(local_14_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5c3c92e6
                    var var250 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@32c4d8fe
                    var var256 = (var250.x - (local_15_FLOAT * local_14_REFERENCE.x)); // type is FLOAT value type is FLOAT
                    var250.x = var256;
                    var var257 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@32c4d8fe
                    var var263 = (var257.y - (local_15_FLOAT * local_14_REFERENCE.y)); // type is FLOAT value type is FLOAT
                    var257.y = var263;
                    var var264 = local_5_FLOAT; // type is FLOAT value type is FLOAT
                    var var265 = local_17_FLOAT; // type is FLOAT value type is FLOAT
                    var var268 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_11_REFERENCE,local_14_REFERENCE); // type is FLOAT value type is FLOAT
                    local_5_FLOAT = (var264 - (var265 * var268)); // type is FLOAT value type is FLOAT
                    var var272 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5a22087d
                    var var278 = (var272.x + (local_16_FLOAT * local_14_REFERENCE.x)); // type is FLOAT value type is FLOAT
                    var272.x = var278;
                    var var279 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5a22087d
                    var var285 = (var279.y + (local_16_FLOAT * local_14_REFERENCE.y)); // type is FLOAT value type is FLOAT
                    var279.y = var285;
                    var var286 = local_7_FLOAT; // type is FLOAT value type is FLOAT
                    var var287 = local_18_FLOAT; // type is FLOAT value type is FLOAT
                    var var290 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_12_REFERENCE,local_14_REFERENCE); // type is FLOAT value type is FLOAT
                    local_7_FLOAT = (var286 + (var287 * var290)); // type is FLOAT value type is FLOAT
                    thisRef.pool.VOIDpushVec2INT(thisRef.pool,4);
                    thisRef.pool.VOIDpushMat22INT(thisRef.pool,1);
                    var var298 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
                    var var299 = local_5_FLOAT; // type is FLOAT value type is FLOAT
                    var298.a = var299;
                    var var302 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
                    var var303 = local_7_FLOAT; // type is FLOAT value type is FLOAT
                    var302.a = var303;
                    thisRef.pool.VOIDpushRotINT(thisRef.pool,2);
                    var var305 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                    if ((var305 > 0.005)) {
                        __label__ = 822;
                        break $S_320;
                    }
                    __label__ = 810;
                    }
                $M_822_810 : for(;;) switch (__label__) {
                    case 822 :
                    // NORMAL
                        var var309 = 0; // type is INT value type is INT
                        return var309;
                    case 810 :
                    // NORMAL
                        $S_810 : {
                        // NORMAL
                            var var307 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                            if ((var307 > 0.03490659)) {
                                __label__ = 822;
                                continue $M_822_810;
                            }
                            }
                        var var309 = 1; // type is INT value type is INT
                        return var309;
                }
        }
    },

    classInitCheck : function() {
        if (!ojdjRevoluteJoint.__initialized) {
            ojdjRevoluteJoint.__initialized = true;
            var thePrototype = ojdjRevoluteJoint.Create.prototype;
            thePrototype.instanceOf = ojdjRevoluteJoint.instanceOf;
            thePrototype.ClassgetClass = ojdjRevoluteJoint.ClassgetClass;
            thePrototype.BOOLEANsolvePositionConstraintsojdSolverData = ojdjRevoluteJoint.BOOLEANsolvePositionConstraintsojdSolverData;
            thePrototype.VOIDsolveVelocityConstraintsojdSolverData = ojdjRevoluteJoint.VOIDsolveVelocityConstraintsojdSolverData;
            thePrototype.VOIDinitVelocityConstraintsojdSolverData = ojdjRevoluteJoint.VOIDinitVelocityConstraintsojdSolverData;
            thePrototype.BOOLEANgetCollideConnected = ojdjJoint.BOOLEANgetCollideConnected;
            thePrototype.ojdBodygetBodyB = ojdjJoint.ojdBodygetBodyB;
            thePrototype.ojdBodygetBodyA = ojdjJoint.ojdBodygetBodyA;
            thePrototype.ojdjJointTypegetType = ojdjJoint.ojdjJointTypegetType;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojdjJoint.classInitCheck();
            jlObject.classInitCheck();
            ojdjRevoluteJoint.VOIDclinit();
        }
    },

};

var ojdjWeldJoint = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 162,
    __implementedTypes : [1,162,117],
    $assertionsDisabled : false, // declared in org.jbox2d.dynamics.joints.Joint

    Create : function() {
        this.pool = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_type = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_prev = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_next = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_bodyA = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_bodyB = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_collideConnected = false; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_islandFlag = false; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_userData = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_edgeA = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_edgeB = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_rA = null; // declared in org.jbox2d.dynamics.joints.WeldJoint
        this.m_rB = null; // declared in org.jbox2d.dynamics.joints.WeldJoint
        this.m_localCenterA = null; // declared in org.jbox2d.dynamics.joints.WeldJoint
        this.m_localCenterB = null; // declared in org.jbox2d.dynamics.joints.WeldJoint
        this.m_mass = null; // declared in org.jbox2d.dynamics.joints.WeldJoint
        this.m_localAnchorA = null; // declared in org.jbox2d.dynamics.joints.WeldJoint
        this.m_localAnchorB = null; // declared in org.jbox2d.dynamics.joints.WeldJoint
        this.m_referenceAngle = 0; // declared in org.jbox2d.dynamics.joints.WeldJoint
        this.m_frequencyHz = 0; // declared in org.jbox2d.dynamics.joints.WeldJoint
        this.m_dampingRatio = 0; // declared in org.jbox2d.dynamics.joints.WeldJoint
        this.m_impulse = null; // declared in org.jbox2d.dynamics.joints.WeldJoint
        this.m_indexA = 0; // declared in org.jbox2d.dynamics.joints.WeldJoint
        this.m_indexB = 0; // declared in org.jbox2d.dynamics.joints.WeldJoint
        this.m_invMassA = 0; // declared in org.jbox2d.dynamics.joints.WeldJoint
        this.m_invMassB = 0; // declared in org.jbox2d.dynamics.joints.WeldJoint
        this.m_invIA = 0; // declared in org.jbox2d.dynamics.joints.WeldJoint
        this.m_invIB = 0; // declared in org.jbox2d.dynamics.joints.WeldJoint
        this.m_gamma = 0; // declared in org.jbox2d.dynamics.joints.WeldJoint
        this.m_bias = 0; // declared in org.jbox2d.dynamics.joints.WeldJoint
    },

    instanceOf : function(aType) {
        return ojdjWeldJoint.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdjWeldJoint;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    ojdjJointcreateojdWorldojdjJointDef : function(p0,p1) {
         return ojdjJoint.ojdjJointcreateojdWorldojdjJointDef(p0,p1);
    },

    VOIDinitojpIWorldPoolojdjWeldJointDef : function(thisRef,argWorld,def) {
        var __label__ = null;
        ojdjJoint.VOIDinitojpIWorldPoolojdjJointDef(thisRef,argWorld,def);
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var0);
        thisRef.m_rA = var0;
        var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var1);
        thisRef.m_rB = var1;
        var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var2);
        thisRef.m_localCenterA = var2;
        var var3 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var3);
        thisRef.m_localCenterB = var3;
        var var4 = new ojcMat33.Create(); // type is REFERENCE value type is REFERENCE
        ojcMat33.VOIDinit(var4);
        thisRef.m_mass = var4;
        var var5 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinitojcVec2(var5,def.localAnchorA);
        thisRef.m_localAnchorA = var5;
        var var7 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinitojcVec2(var7,def.localAnchorB);
        thisRef.m_localAnchorB = var7;
        var var9 = def.referenceAngle; // type is FLOAT value type is FLOAT
        thisRef.m_referenceAngle = var9;
        var var10 = def.frequencyHz; // type is FLOAT value type is FLOAT
        thisRef.m_frequencyHz = var10;
        var var11 = def.dampingRatio; // type is FLOAT value type is FLOAT
        thisRef.m_dampingRatio = var11;
        var var12 = new ojcVec3.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec3.VOIDinit(var12);
        thisRef.m_impulse = var12;
        thisRef.m_impulse.VOIDsetZero(thisRef.m_impulse);
        return;
    },

    VOIDinitVelocityConstraintsojdSolverData : function(thisRef,data) {
        var local_2_FLOAT = null; // type is FLOAT # of inits = 1
        var local_7_FLOAT = null; // type is FLOAT # of inits = 2
        var local_13_FLOAT = null; // type is FLOAT # of inits = 1
        var local_15_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_22_FLOAT = null; // type is FLOAT # of inits = 1
        var local_5_FLOAT = null; // type is FLOAT # of inits = 1
        var local_21_FLOAT = null; // type is FLOAT # of inits = 1
        var local_11_FLOAT = null; // type is FLOAT # of inits = 1
        var local_16_FLOAT = null; // type is FLOAT # of inits = 2
        var var273 = null; // type is REFERENCE # of inits = 1
        var local_18_FLOAT = null; // type is FLOAT # of inits = 1
        var local_14_FLOAT = null; // type is FLOAT # of inits = 1
        var var216 = null; // type is FLOAT # of inits = 2
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 1
        var var260 = null; // type is FLOAT # of inits = 2
        var local_12_FLOAT = null; // type is FLOAT # of inits = 1
        var var278 = null; // type is FLOAT # of inits = 2
        var local_4_FLOAT = null; // type is FLOAT # of inits = 2
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var1 = thisRef.m_bodyA.m_islandIndex; // type is INT value type is INT
            thisRef.m_indexA = var1;
            var var3 = thisRef.m_bodyB.m_islandIndex; // type is INT value type is INT
            thisRef.m_indexB = var3;
            var var8 = thisRef.m_localCenterA.ojcVec2setojcVec2(thisRef.m_localCenterA,thisRef.m_bodyA.m_sweep.localCenter); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@75579004
            var var13 = thisRef.m_localCenterB.ojcVec2setojcVec2(thisRef.m_localCenterB,thisRef.m_bodyB.m_sweep.localCenter); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6d9e2aa0
            var var15 = thisRef.m_bodyA.m_invMass; // type is FLOAT value type is FLOAT
            thisRef.m_invMassA = var15;
            var var17 = thisRef.m_bodyB.m_invMass; // type is FLOAT value type is FLOAT
            thisRef.m_invMassB = var17;
            var var19 = thisRef.m_bodyA.m_invI; // type is FLOAT value type is FLOAT
            thisRef.m_invIA = var19;
            var var21 = thisRef.m_bodyB.m_invI; // type is FLOAT value type is FLOAT
            thisRef.m_invIB = var21;
            var var24 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_2_FLOAT = var24.a; // type is FLOAT value type is FLOAT
            var var30 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_3_REFERENCE = var30.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4379d5a5
            var var35 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_4_FLOAT = var35.w; // type is FLOAT value type is FLOAT
            var var41 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_5_FLOAT = var41.a; // type is FLOAT value type is FLOAT
            var var47 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_6_REFERENCE = var47.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@704e0db5
            var var52 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_7_FLOAT = var52.w; // type is FLOAT value type is FLOAT
            var var57 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@39506408
            var local_8_REFERENCE = var57; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@258792a8
            var var60 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@28deaf40
            var local_9_REFERENCE = var60; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@28fd2c4b
            var var63 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@12b77d78
            var local_10_REFERENCE = var63; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@b3cbf54
            var var67 = local_8_REFERENCE.ojcRotsetFLOAT(local_8_REFERENCE,local_2_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5645a5dc
            var var70 = local_9_REFERENCE.ojcRotsetFLOAT(local_9_REFERENCE,local_5_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@171b442b
            var var71 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@258792a8
            var var74 = local_10_REFERENCE.ojcVec2setojcVec2(local_10_REFERENCE,thisRef.m_localAnchorA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3eeeb70d
            var var76 = var74.ojcVec2subLocalojcVec2(var74,thisRef.m_localCenterA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5046699b
            ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var71,var76,thisRef.m_rA);
            var var78 = local_9_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@28fd2c4b
            var var81 = local_10_REFERENCE.ojcVec2setojcVec2(local_10_REFERENCE,thisRef.m_localAnchorB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2b564d0a
            var var83 = var81.ojcVec2subLocalojcVec2(var81,thisRef.m_localCenterB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@66216e57
            ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var78,var83,thisRef.m_rB);
            local_11_FLOAT = thisRef.m_invMassA; // type is FLOAT value type is FLOAT
            local_12_FLOAT = thisRef.m_invMassB; // type is FLOAT value type is FLOAT
            local_13_FLOAT = thisRef.m_invIA; // type is FLOAT value type is FLOAT
            local_14_FLOAT = thisRef.m_invIB; // type is FLOAT value type is FLOAT
            var var98 = thisRef.pool.ojcMat33popMat33(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2d3ceb41
            local_15_REFERENCE = var98; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@61f615dc
            var var101 = local_15_REFERENCE.ex; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4e5555cc
            var var120 = (((local_11_FLOAT + local_12_FLOAT) + ((thisRef.m_rA.y * thisRef.m_rA.y) * local_13_FLOAT)) + ((thisRef.m_rB.y * thisRef.m_rB.y) * local_14_FLOAT)); // type is FLOAT value type is FLOAT
            var101.x = var120;
            var var122 = local_15_REFERENCE.ey; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@57f27f11
            var var138 = ((((-thisRef.m_rA.y) * thisRef.m_rA.x) * local_13_FLOAT) - ((thisRef.m_rB.y * thisRef.m_rB.x) * local_14_FLOAT)); // type is FLOAT value type is FLOAT
            var122.x = var138;
            var var140 = local_15_REFERENCE.ez; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3acce06e
            var var150 = (((-thisRef.m_rA.y) * local_13_FLOAT) - (thisRef.m_rB.y * local_14_FLOAT)); // type is FLOAT value type is FLOAT
            var140.x = var150;
            var var152 = local_15_REFERENCE.ex; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@70607295
            var var155 = local_15_REFERENCE.ey.x; // type is FLOAT value type is FLOAT
            var152.y = var155;
            var var157 = local_15_REFERENCE.ey; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@147fb260
            var var176 = (((local_11_FLOAT + local_12_FLOAT) + ((thisRef.m_rA.x * thisRef.m_rA.x) * local_13_FLOAT)) + ((thisRef.m_rB.x * thisRef.m_rB.x) * local_14_FLOAT)); // type is FLOAT value type is FLOAT
            var157.y = var176;
            var var178 = local_15_REFERENCE.ez; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@50315d09
            var var187 = ((thisRef.m_rA.x * local_13_FLOAT) + (thisRef.m_rB.x * local_14_FLOAT)); // type is FLOAT value type is FLOAT
            var178.y = var187;
            var var189 = local_15_REFERENCE.ex; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@d2318f1
            var var192 = local_15_REFERENCE.ez.x; // type is FLOAT value type is FLOAT
            var189.z = var192;
            var var194 = local_15_REFERENCE.ey; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7ea4371a
            var var197 = local_15_REFERENCE.ez.y; // type is FLOAT value type is FLOAT
            var194.z = var197;
            var var199 = local_15_REFERENCE.ez; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1721661c
            var var202 = (local_13_FLOAT + local_14_FLOAT); // type is FLOAT value type is FLOAT
            var199.z = var202;
            var var203 = thisRef.m_frequencyHz; // type is FLOAT value type is FLOAT
            if ((var203 <= 0.0)) {
                __label__ = 772;
                break $S_0;
            }
            __label__ = 594;
            }
        $M_772_594 : for(;;) switch (__label__) {
            case 594 :
            // NORMAL
                $S_594 : {
                // NORMAL
                    local_15_REFERENCE.VOIDgetInverse22ojcMat33(local_15_REFERENCE,thisRef.m_mass);
                    local_16_FLOAT = (local_13_FLOAT + local_14_FLOAT); // type is FLOAT value type is FLOAT
                    var var212 = local_16_FLOAT; // type is FLOAT value type is FLOAT
                    if ((var212 <= 0.0)) {
                        __label__ = 624;
                        break $S_594;
                    }
                    __label__ = 617;
                    }
                $M_624_617 : for(;;) switch (__label__) {
                    case 617 :
                    // NORMAL
                        var216 = (1.0 / local_16_FLOAT); // type is FLOAT value type is FLOAT
                        break $M_624_617;
                    case 624 :
                    // NORMAL
                        var216 = 0.0; // type is FLOAT value type is FLOAT
                        break $M_624_617;
                }
                $S_625 : {
                // NORMAL
                    var local_17_FLOAT = var216; // type is FLOAT value type is FLOAT
                    local_18_FLOAT = ((local_5_FLOAT - local_2_FLOAT) - thisRef.m_referenceAngle); // type is FLOAT value type is FLOAT
                    var local_19_FLOAT = (6.2831855 * thisRef.m_frequencyHz); // type is FLOAT value type is FLOAT
                    var local_20_FLOAT = (((2.0 * local_17_FLOAT) * thisRef.m_dampingRatio) * local_19_FLOAT); // type is FLOAT value type is FLOAT
                    local_21_FLOAT = ((local_17_FLOAT * local_19_FLOAT) * local_19_FLOAT); // type is FLOAT value type is FLOAT
                    local_22_FLOAT = data.step.dt; // type is FLOAT value type is FLOAT
                    var var255 = (local_22_FLOAT * (local_20_FLOAT + (local_22_FLOAT * local_21_FLOAT))); // type is FLOAT value type is FLOAT
                    thisRef.m_gamma = var255;
                    var var256 = thisRef.m_gamma; // type is FLOAT value type is FLOAT
                    if ((var256 == 0.0)) {
                        __label__ = 714;
                        break $S_625;
                    }
                    __label__ = 705;
                    }
                $M_714_705 : for(;;) switch (__label__) {
                    case 714 :
                    // NORMAL
                        var260 = 0.0; // type is FLOAT value type is FLOAT
                        break $M_714_705;
                    case 705 :
                    // NORMAL
                        var260 = (1.0 / thisRef.m_gamma); // type is FLOAT value type is FLOAT
                        break $M_714_705;
                }
                $S_715 : {
                // NORMAL
                    thisRef.m_gamma = var260;
                    var var267 = (((local_18_FLOAT * local_22_FLOAT) * local_21_FLOAT) * thisRef.m_gamma); // type is FLOAT value type is FLOAT
                    thisRef.m_bias = var267;
                    local_16_FLOAT = (local_16_FLOAT + thisRef.m_gamma); // type is FLOAT value type is FLOAT
                    var273 = thisRef.m_mass.ez; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4da2a8e4
                    var var274 = local_16_FLOAT; // type is FLOAT value type is FLOAT
                    if ((var274 == 0.0)) {
                        __label__ = 765;
                        break $S_715;
                    }
                    __label__ = 758;
                    }
                $M_765_758 : for(;;) switch (__label__) {
                    case 765 :
                    // NORMAL
                        var278 = 0.0; // type is FLOAT value type is FLOAT
                        break $M_765_758;
                    case 758 :
                    // NORMAL
                        var278 = (1.0 / local_16_FLOAT); // type is FLOAT value type is FLOAT
                        break $M_765_758;
                }
                var273.z = var278;
                break $M_772_594;
            case 772 :
            // NORMAL
                local_15_REFERENCE.VOIDgetSymInverse33ojcMat33(local_15_REFERENCE,thisRef.m_mass);
                thisRef.m_gamma = 0.0;
                thisRef.m_bias = 0.0;
                break $M_772_594;
        }
        $S_791 : {
        // NORMAL
            var var282 = data.step.warmStarting; // type is BOOLEAN value type is BOOLEAN
            if ((var282 == 0)) {
                __label__ = 980;
                break $S_791;
            }
            __label__ = 801;
            }
        $M_801_980 : for(;;) switch (__label__) {
            case 980 :
            // NORMAL
                thisRef.m_impulse.VOIDsetZero(thisRef.m_impulse);
                break $M_801_980;
            case 801 :
            // NORMAL
                var var284 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5853d531
                var local_16_REFERENCE = var284; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@71025c6
                var var289 = thisRef.m_impulse.ojcVec3mulLocalFLOAT(thisRef.m_impulse,data.step.dtRatio); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1b1db2be
                var var295 = local_16_REFERENCE.ojcVec2setFLOATFLOAT(local_16_REFERENCE,thisRef.m_impulse.x,thisRef.m_impulse.y); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@43a0dcb1
                var var296 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@21b07827
                var var302 = (var296.x - (local_11_FLOAT * local_16_REFERENCE.x)); // type is FLOAT value type is FLOAT
                var296.x = var302;
                var var303 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@21b07827
                var var309 = (var303.y - (local_11_FLOAT * local_16_REFERENCE.y)); // type is FLOAT value type is FLOAT
                var303.y = var309;
                var var310 = local_4_FLOAT; // type is FLOAT value type is FLOAT
                var var311 = local_13_FLOAT; // type is FLOAT value type is FLOAT
                var var314 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.m_rA,local_16_REFERENCE); // type is FLOAT value type is FLOAT
                local_4_FLOAT = (var310 - (var311 * (var314 + thisRef.m_impulse.z))); // type is FLOAT value type is FLOAT
                var var321 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3ad32168
                var var327 = (var321.x + (local_12_FLOAT * local_16_REFERENCE.x)); // type is FLOAT value type is FLOAT
                var321.x = var327;
                var var328 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3ad32168
                var var334 = (var328.y + (local_12_FLOAT * local_16_REFERENCE.y)); // type is FLOAT value type is FLOAT
                var328.y = var334;
                var var335 = local_7_FLOAT; // type is FLOAT value type is FLOAT
                var var336 = local_14_FLOAT; // type is FLOAT value type is FLOAT
                var var339 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.m_rB,local_16_REFERENCE); // type is FLOAT value type is FLOAT
                local_7_FLOAT = (var335 + (var336 * (var339 + thisRef.m_impulse.z))); // type is FLOAT value type is FLOAT
                thisRef.pool.VOIDpushVec2INT(thisRef.pool,1);
                break $M_801_980;
        }
        var var350 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
        var var351 = local_4_FLOAT; // type is FLOAT value type is FLOAT
        var350.w = var351;
        var var354 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
        var var355 = local_7_FLOAT; // type is FLOAT value type is FLOAT
        var354.w = var355;
        thisRef.pool.VOIDpushVec2INT(thisRef.pool,1);
        thisRef.pool.VOIDpushRotINT(thisRef.pool,2);
        thisRef.pool.VOIDpushMat33INT(thisRef.pool,1);
        return;
    },

    VOIDsolveVelocityConstraintsojdSolverData : function(thisRef,data) {
        var local_7_FLOAT = null; // type is FLOAT # of inits = 1
        var local_11_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_12_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_3_FLOAT = null; // type is FLOAT # of inits = 4
        var local_10_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_5_FLOAT = null; // type is FLOAT # of inits = 4
        var local_9_FLOAT = null; // type is FLOAT # of inits = 1
        var local_6_FLOAT = null; // type is FLOAT # of inits = 1
        var local_8_FLOAT = null; // type is FLOAT # of inits = 1
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var2 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_2_REFERENCE = var2.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6ff3ee1
            var var7 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_3_FLOAT = var7.w; // type is FLOAT value type is FLOAT
            var var13 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_4_REFERENCE = var13.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4bd49a39
            var var18 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_5_FLOAT = var18.w; // type is FLOAT value type is FLOAT
            local_6_FLOAT = thisRef.m_invMassA; // type is FLOAT value type is FLOAT
            local_7_FLOAT = thisRef.m_invMassB; // type is FLOAT value type is FLOAT
            local_8_FLOAT = thisRef.m_invIA; // type is FLOAT value type is FLOAT
            local_9_FLOAT = thisRef.m_invIB; // type is FLOAT value type is FLOAT
            var var35 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2feb5c40
            local_10_REFERENCE = var35; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@b392e04
            var var38 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@61401daf
            local_11_REFERENCE = var38; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7fbb16fb
            var var41 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1e373f50
            local_12_REFERENCE = var41; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1d178c81
            var var43 = thisRef.m_frequencyHz; // type is FLOAT value type is FLOAT
            if ((var43 <= 0.0)) {
                __label__ = 390;
                break $S_0;
            }
            __label__ = 120;
            }
        $M_120_390 : for(;;) switch (__label__) {
            case 390 :
            // NORMAL
                ojcVec2.VOIDcrossToOutUnsafeFLOATojcVec2ojcVec2(local_3_FLOAT,thisRef.m_rA,local_12_REFERENCE);
                ojcVec2.VOIDcrossToOutUnsafeFLOATojcVec2ojcVec2(local_5_FLOAT,thisRef.m_rB,local_10_REFERENCE);
                var var163 = local_10_REFERENCE.ojcVec2addLocalojcVec2(local_10_REFERENCE,local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@71dd7bfd
                var var165 = var163.ojcVec2subLocalojcVec2(var163,local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@42120da
                var var167 = var165.ojcVec2subLocalojcVec2(var165,local_12_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@656df894
                var local_13_FLOAT = (local_5_FLOAT - local_3_FLOAT); // type is FLOAT value type is FLOAT
                var var173 = thisRef.pool.ojcVec3popVec3(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@428786d6
                var local_14_REFERENCE = var173; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@581f1fe8
                var var181 = local_14_REFERENCE.ojcVec3setFLOATFLOATFLOAT(local_14_REFERENCE,local_10_REFERENCE.x,local_10_REFERENCE.y,local_13_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@55b5d3c1
                var var183 = thisRef.pool.ojcVec3popVec3(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5f1628bb
                var local_15_REFERENCE = var183; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@21d9a4b9
                ojcMat33.VOIDmulToOutUnsafeojcMat33ojcVec3ojcVec3(thisRef.m_mass,local_14_REFERENCE,local_15_REFERENCE);
                var var188 = local_15_REFERENCE.ojcVec3negateLocal(local_15_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1191f35
                var var191 = thisRef.m_impulse.ojcVec3addLocalojcVec3(thisRef.m_impulse,local_15_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7ac9ef0c
                var var197 = local_11_REFERENCE.ojcVec2setFLOATFLOAT(local_11_REFERENCE,local_15_REFERENCE.x,local_15_REFERENCE.y); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1474531e
                var var198 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4594fb46
                var var204 = (var198.x - (local_6_FLOAT * local_11_REFERENCE.x)); // type is FLOAT value type is FLOAT
                var198.x = var204;
                var var205 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4594fb46
                var var211 = (var205.y - (local_6_FLOAT * local_11_REFERENCE.y)); // type is FLOAT value type is FLOAT
                var205.y = var211;
                var var212 = local_3_FLOAT; // type is FLOAT value type is FLOAT
                var var213 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                var var216 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.m_rA,local_11_REFERENCE); // type is FLOAT value type is FLOAT
                local_3_FLOAT = (var212 - (var213 * (var216 + local_15_REFERENCE.z))); // type is FLOAT value type is FLOAT
                var var223 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2b1bd807
                var var229 = (var223.x + (local_7_FLOAT * local_11_REFERENCE.x)); // type is FLOAT value type is FLOAT
                var223.x = var229;
                var var230 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2b1bd807
                var var236 = (var230.y + (local_7_FLOAT * local_11_REFERENCE.y)); // type is FLOAT value type is FLOAT
                var230.y = var236;
                var var237 = local_5_FLOAT; // type is FLOAT value type is FLOAT
                var var238 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                var var241 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.m_rB,local_11_REFERENCE); // type is FLOAT value type is FLOAT
                local_5_FLOAT = (var237 + (var238 * (var241 + local_15_REFERENCE.z))); // type is FLOAT value type is FLOAT
                thisRef.pool.VOIDpushVec3INT(thisRef.pool,2);
                break $M_120_390;
            case 120 :
            // NORMAL
                var local_13_FLOAT = (local_5_FLOAT - local_3_FLOAT); // type is FLOAT value type is FLOAT
                var local_14_FLOAT = ((-thisRef.m_mass.ez.z) * ((local_13_FLOAT + thisRef.m_bias) + (thisRef.m_gamma * thisRef.m_impulse.z))); // type is FLOAT value type is FLOAT
                var var65 = thisRef.m_impulse; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7864c145
                var var68 = (var65.z + local_14_FLOAT); // type is FLOAT value type is FLOAT
                var65.z = var68;
                local_3_FLOAT = (local_3_FLOAT - (local_8_FLOAT * local_14_FLOAT)); // type is FLOAT value type is FLOAT
                local_5_FLOAT = (local_5_FLOAT + (local_9_FLOAT * local_14_FLOAT)); // type is FLOAT value type is FLOAT
                ojcVec2.VOIDcrossToOutUnsafeFLOATojcVec2ojcVec2(local_5_FLOAT,thisRef.m_rB,local_10_REFERENCE);
                ojcVec2.VOIDcrossToOutUnsafeFLOATojcVec2ojcVec2(local_3_FLOAT,thisRef.m_rA,local_12_REFERENCE);
                var var89 = local_10_REFERENCE.ojcVec2addLocalojcVec2(local_10_REFERENCE,local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@314d89cb
                var var91 = var89.ojcVec2subLocalojcVec2(var89,local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@449b161
                var var93 = var91.ojcVec2subLocalojcVec2(var91,local_12_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3213ee55
                var local_15_REFERENCE = local_11_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7fbb16fb
                ojcMat33.VOIDmul22ToOutUnsafeojcMat33ojcVec2ojcVec2(thisRef.m_mass,local_10_REFERENCE,local_15_REFERENCE);
                var var100 = local_15_REFERENCE.ojcVec2negateLocal(local_15_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6ca36fbb
                var var101 = thisRef.m_impulse; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@31fda035
                var var105 = (var101.x + local_15_REFERENCE.x); // type is FLOAT value type is FLOAT
                var101.x = var105;
                var var106 = thisRef.m_impulse; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@78f6cdd2
                var var110 = (var106.y + local_15_REFERENCE.y); // type is FLOAT value type is FLOAT
                var106.y = var110;
                var var111 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4594fb46
                var var117 = (var111.x - (local_6_FLOAT * local_11_REFERENCE.x)); // type is FLOAT value type is FLOAT
                var111.x = var117;
                var var118 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4594fb46
                var var124 = (var118.y - (local_6_FLOAT * local_11_REFERENCE.y)); // type is FLOAT value type is FLOAT
                var118.y = var124;
                var var125 = local_3_FLOAT; // type is FLOAT value type is FLOAT
                var var126 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                var var129 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.m_rA,local_11_REFERENCE); // type is FLOAT value type is FLOAT
                local_3_FLOAT = (var125 - (var126 * var129)); // type is FLOAT value type is FLOAT
                var var133 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2b1bd807
                var var139 = (var133.x + (local_7_FLOAT * local_11_REFERENCE.x)); // type is FLOAT value type is FLOAT
                var133.x = var139;
                var var140 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2b1bd807
                var var146 = (var140.y + (local_7_FLOAT * local_11_REFERENCE.y)); // type is FLOAT value type is FLOAT
                var140.y = var146;
                var var147 = local_5_FLOAT; // type is FLOAT value type is FLOAT
                var var148 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                var var151 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.m_rB,local_11_REFERENCE); // type is FLOAT value type is FLOAT
                local_5_FLOAT = (var147 + (var148 * var151)); // type is FLOAT value type is FLOAT
                break $M_120_390;
        }
        var var251 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
        var var252 = local_3_FLOAT; // type is FLOAT value type is FLOAT
        var251.w = var252;
        var var255 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
        var var256 = local_5_FLOAT; // type is FLOAT value type is FLOAT
        var255.w = var256;
        thisRef.pool.VOIDpushVec2INT(thisRef.pool,3);
        return;
    },

    BOOLEANsolvePositionConstraintsojdSolverData : function(thisRef,data) {
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_14_FLOAT = null; // type is FLOAT # of inits = 1
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_12_FLOAT = null; // type is FLOAT # of inits = 1
        var local_17_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_9_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_3_FLOAT = null; // type is FLOAT # of inits = 3
        var local_10_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_18_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_19_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_15_FLOAT = null; // type is FLOAT # of inits = 2
        var local_13_FLOAT = null; // type is FLOAT # of inits = 1
        var local_11_FLOAT = null; // type is FLOAT # of inits = 1
        var local_16_FLOAT = null; // type is FLOAT # of inits = 2
        var local_5_FLOAT = null; // type is FLOAT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var2 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_2_REFERENCE = var2.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@f210b1
            var var7 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_3_FLOAT = var7.a; // type is FLOAT value type is FLOAT
            var var13 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_4_REFERENCE = var13.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@23cdd235
            var var18 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_5_FLOAT = var18.a; // type is FLOAT value type is FLOAT
            var var23 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5fd2493e
            var local_6_REFERENCE = var23; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1aaf7182
            var var26 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@ac89dfe
            var local_7_REFERENCE = var26; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4759bae8
            var var29 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@a8f8084
            var local_8_REFERENCE = var29; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6bcdd336
            var var32 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@25a484dc
            local_9_REFERENCE = var32; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4e16f38f
            var var35 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2f20e47a
            local_10_REFERENCE = var35; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@43632b73
            var var39 = local_6_REFERENCE.ojcRotsetFLOAT(local_6_REFERENCE,local_3_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@595ddaba
            var var42 = local_7_REFERENCE.ojcRotsetFLOAT(local_7_REFERENCE,local_5_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5c8ce6c4
            local_11_FLOAT = thisRef.m_invMassA; // type is FLOAT value type is FLOAT
            local_12_FLOAT = thisRef.m_invMassB; // type is FLOAT value type is FLOAT
            local_13_FLOAT = thisRef.m_invIA; // type is FLOAT value type is FLOAT
            local_14_FLOAT = thisRef.m_invIB; // type is FLOAT value type is FLOAT
            var var55 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1aaf7182
            var var58 = local_8_REFERENCE.ojcVec2setojcVec2(local_8_REFERENCE,thisRef.m_localAnchorA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5d8f1bed
            var var60 = var58.ojcVec2subLocalojcVec2(var58,thisRef.m_localCenterA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@75242712
            ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var55,var60,local_9_REFERENCE);
            var var62 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4759bae8
            var var65 = local_8_REFERENCE.ojcVec2setojcVec2(local_8_REFERENCE,thisRef.m_localAnchorB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@421bbb06
            var var67 = var65.ojcVec2subLocalojcVec2(var65,thisRef.m_localCenterB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@791acf47
            ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var62,var67,local_10_REFERENCE);
            var var70 = thisRef.pool.ojcMat33popMat33(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5c6ff3fa
            local_17_REFERENCE = var70; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1d5ece20
            var var73 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@8a743d2
            local_18_REFERENCE = var73; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@129e7bb6
            var var76 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@17fb0a4b
            local_19_REFERENCE = var76; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6bed78e1
            var var79 = local_17_REFERENCE.ex; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@38b48f04
            var var98 = (((local_11_FLOAT + local_12_FLOAT) + ((local_9_REFERENCE.y * local_9_REFERENCE.y) * local_13_FLOAT)) + ((local_10_REFERENCE.y * local_10_REFERENCE.y) * local_14_FLOAT)); // type is FLOAT value type is FLOAT
            var79.x = var98;
            var var100 = local_17_REFERENCE.ey; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1be74bcb
            var var116 = ((((-local_9_REFERENCE.y) * local_9_REFERENCE.x) * local_13_FLOAT) - ((local_10_REFERENCE.y * local_10_REFERENCE.x) * local_14_FLOAT)); // type is FLOAT value type is FLOAT
            var100.x = var116;
            var var118 = local_17_REFERENCE.ez; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@296c22b6
            var var128 = (((-local_9_REFERENCE.y) * local_13_FLOAT) - (local_10_REFERENCE.y * local_14_FLOAT)); // type is FLOAT value type is FLOAT
            var118.x = var128;
            var var130 = local_17_REFERENCE.ex; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@668adc82
            var var133 = local_17_REFERENCE.ey.x; // type is FLOAT value type is FLOAT
            var130.y = var133;
            var var135 = local_17_REFERENCE.ey; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7a5ab3f8
            var var154 = (((local_11_FLOAT + local_12_FLOAT) + ((local_9_REFERENCE.x * local_9_REFERENCE.x) * local_13_FLOAT)) + ((local_10_REFERENCE.x * local_10_REFERENCE.x) * local_14_FLOAT)); // type is FLOAT value type is FLOAT
            var135.y = var154;
            var var156 = local_17_REFERENCE.ez; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5bc2166b
            var var165 = ((local_9_REFERENCE.x * local_13_FLOAT) + (local_10_REFERENCE.x * local_14_FLOAT)); // type is FLOAT value type is FLOAT
            var156.y = var165;
            var var167 = local_17_REFERENCE.ex; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@13f3f637
            var var170 = local_17_REFERENCE.ez.x; // type is FLOAT value type is FLOAT
            var167.z = var170;
            var var172 = local_17_REFERENCE.ey; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@23ad5607
            var var175 = local_17_REFERENCE.ez.y; // type is FLOAT value type is FLOAT
            var172.z = var175;
            var var177 = local_17_REFERENCE.ez; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@cc7e4f9
            var var180 = (local_13_FLOAT + local_14_FLOAT); // type is FLOAT value type is FLOAT
            var177.z = var180;
            var var181 = thisRef.m_frequencyHz; // type is FLOAT value type is FLOAT
            if ((var181 <= 0.0)) {
                __label__ = 620;
                break $S_0;
            }
            __label__ = 472;
            }
        $M_620_472 : for(;;) switch (__label__) {
            case 472 :
            // NORMAL
                var var284 = local_18_REFERENCE.ojcVec2setojcVec2(local_18_REFERENCE,local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@47fdca44
                var var286 = var284.ojcVec2addLocalojcVec2(var284,local_10_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4b33dec2
                var var288 = var286.ojcVec2subLocalojcVec2(var286,local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@267a4cd
                var var290 = var288.ojcVec2subLocalojcVec2(var288,local_9_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@31346854
                var var292 = local_18_REFERENCE.FLOATlength(local_18_REFERENCE); // type is FLOAT value type is FLOAT
                local_15_FLOAT = var292; // type is FLOAT value type is FLOAT
                local_16_FLOAT = 0.0; // type is FLOAT value type is FLOAT
                local_17_REFERENCE.VOIDsolve22ToOutojcVec2ojcVec2(local_17_REFERENCE,local_18_REFERENCE,local_19_REFERENCE);
                var var299 = local_19_REFERENCE.ojcVec2negateLocal(local_19_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@18b23bdc
                var var300 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4ad28631
                var var306 = (var300.x - (local_11_FLOAT * local_19_REFERENCE.x)); // type is FLOAT value type is FLOAT
                var300.x = var306;
                var var307 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4ad28631
                var var313 = (var307.y - (local_11_FLOAT * local_19_REFERENCE.y)); // type is FLOAT value type is FLOAT
                var307.y = var313;
                var var314 = local_3_FLOAT; // type is FLOAT value type is FLOAT
                var var315 = local_13_FLOAT; // type is FLOAT value type is FLOAT
                var var318 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_9_REFERENCE,local_19_REFERENCE); // type is FLOAT value type is FLOAT
                local_3_FLOAT = (var314 - (var315 * var318)); // type is FLOAT value type is FLOAT
                var var322 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@50149d4
                var var328 = (var322.x + (local_12_FLOAT * local_19_REFERENCE.x)); // type is FLOAT value type is FLOAT
                var322.x = var328;
                var var329 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@50149d4
                var var335 = (var329.y + (local_12_FLOAT * local_19_REFERENCE.y)); // type is FLOAT value type is FLOAT
                var329.y = var335;
                var var336 = local_5_FLOAT; // type is FLOAT value type is FLOAT
                var var337 = local_14_FLOAT; // type is FLOAT value type is FLOAT
                var var340 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_10_REFERENCE,local_19_REFERENCE); // type is FLOAT value type is FLOAT
                local_5_FLOAT = (var336 + (var337 * var340)); // type is FLOAT value type is FLOAT
                break $M_620_472;
            case 620 :
            // NORMAL
                var var185 = local_18_REFERENCE.ojcVec2setojcVec2(local_18_REFERENCE,local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4da223c6
                var var187 = var185.ojcVec2addLocalojcVec2(var185,local_10_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@72dca773
                var var189 = var187.ojcVec2subLocalojcVec2(var187,local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@60b817b4
                var var191 = var189.ojcVec2subLocalojcVec2(var189,local_9_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@69ddaca4
                var local_20_FLOAT = ((local_5_FLOAT - local_3_FLOAT) - thisRef.m_referenceAngle); // type is FLOAT value type is FLOAT
                var var200 = local_18_REFERENCE.FLOATlength(local_18_REFERENCE); // type is FLOAT value type is FLOAT
                local_15_FLOAT = var200; // type is FLOAT value type is FLOAT
                var var204 = ojcMathUtils.FLOATabsFLOAT(local_20_FLOAT); // type is FLOAT value type is FLOAT
                local_16_FLOAT = var204; // type is FLOAT value type is FLOAT
                var var208 = thisRef.pool.ojcVec3popVec3(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@353d0e4a
                var local_21_REFERENCE = var208; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@224dd0a1
                var var211 = thisRef.pool.ojcVec3popVec3(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2e876eb
                var local_22_REFERENCE = var211; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6d4429e
                var var219 = local_21_REFERENCE.ojcVec3setFLOATFLOATFLOAT(local_21_REFERENCE,local_18_REFERENCE.x,local_18_REFERENCE.y,local_20_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5b464350
                local_17_REFERENCE.VOIDsolve33ToOutojcVec3ojcVec3(local_17_REFERENCE,local_21_REFERENCE,local_22_REFERENCE);
                var var224 = local_22_REFERENCE.ojcVec3negateLocal(local_22_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@17425841
                var var230 = local_19_REFERENCE.ojcVec2setFLOATFLOAT(local_19_REFERENCE,local_22_REFERENCE.x,local_22_REFERENCE.y); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@565c3b6c
                var var231 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4ad28631
                var var237 = (var231.x - (local_11_FLOAT * local_19_REFERENCE.x)); // type is FLOAT value type is FLOAT
                var231.x = var237;
                var var238 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4ad28631
                var var244 = (var238.y - (local_11_FLOAT * local_19_REFERENCE.y)); // type is FLOAT value type is FLOAT
                var238.y = var244;
                var var245 = local_3_FLOAT; // type is FLOAT value type is FLOAT
                var var246 = local_13_FLOAT; // type is FLOAT value type is FLOAT
                var var249 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_9_REFERENCE,local_19_REFERENCE); // type is FLOAT value type is FLOAT
                local_3_FLOAT = (var245 - (var246 * (var249 + local_22_REFERENCE.z))); // type is FLOAT value type is FLOAT
                var var256 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@50149d4
                var var262 = (var256.x + (local_12_FLOAT * local_19_REFERENCE.x)); // type is FLOAT value type is FLOAT
                var256.x = var262;
                var var263 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@50149d4
                var var269 = (var263.y + (local_12_FLOAT * local_19_REFERENCE.y)); // type is FLOAT value type is FLOAT
                var263.y = var269;
                var var270 = local_5_FLOAT; // type is FLOAT value type is FLOAT
                var var271 = local_14_FLOAT; // type is FLOAT value type is FLOAT
                var var274 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_10_REFERENCE,local_19_REFERENCE); // type is FLOAT value type is FLOAT
                local_5_FLOAT = (var270 + (var271 * (var274 + local_22_REFERENCE.z))); // type is FLOAT value type is FLOAT
                thisRef.pool.VOIDpushVec3INT(thisRef.pool,2);
                break $M_620_472;
        }
        $S_858 : {
        // NORMAL
            var var346 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            var var347 = local_3_FLOAT; // type is FLOAT value type is FLOAT
            var346.a = var347;
            var var350 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            var var351 = local_5_FLOAT; // type is FLOAT value type is FLOAT
            var350.a = var351;
            thisRef.pool.VOIDpushVec2INT(thisRef.pool,5);
            thisRef.pool.VOIDpushRotINT(thisRef.pool,2);
            thisRef.pool.VOIDpushMat33INT(thisRef.pool,1);
            var var355 = local_15_FLOAT; // type is FLOAT value type is FLOAT
            if ((var355 > 0.005)) {
                __label__ = 935;
                break $S_858;
            }
            __label__ = 923;
            }
        $M_935_923 : for(;;) switch (__label__) {
            case 935 :
            // NORMAL
                var var359 = 0; // type is INT value type is INT
                return var359;
            case 923 :
            // NORMAL
                $S_923 : {
                // NORMAL
                    var var357 = local_16_FLOAT; // type is FLOAT value type is FLOAT
                    if ((var357 > 0.03490659)) {
                        __label__ = 935;
                        continue $M_935_923;
                    }
                    }
                var var359 = 1; // type is INT value type is INT
                return var359;
        }
    },

    classInitCheck : function() {
        if (!ojdjWeldJoint.__initialized) {
            ojdjWeldJoint.__initialized = true;
            var thePrototype = ojdjWeldJoint.Create.prototype;
            thePrototype.instanceOf = ojdjWeldJoint.instanceOf;
            thePrototype.ClassgetClass = ojdjWeldJoint.ClassgetClass;
            thePrototype.BOOLEANsolvePositionConstraintsojdSolverData = ojdjWeldJoint.BOOLEANsolvePositionConstraintsojdSolverData;
            thePrototype.VOIDsolveVelocityConstraintsojdSolverData = ojdjWeldJoint.VOIDsolveVelocityConstraintsojdSolverData;
            thePrototype.VOIDinitVelocityConstraintsojdSolverData = ojdjWeldJoint.VOIDinitVelocityConstraintsojdSolverData;
            thePrototype.BOOLEANgetCollideConnected = ojdjJoint.BOOLEANgetCollideConnected;
            thePrototype.ojdBodygetBodyB = ojdjJoint.ojdBodygetBodyB;
            thePrototype.ojdBodygetBodyA = ojdjJoint.ojdBodygetBodyA;
            thePrototype.ojdjJointTypegetType = ojdjJoint.ojdjJointTypegetType;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojdjJoint.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var ojdjWeldJointDef = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 163,
    __implementedTypes : [1,163,149],

    Create : function() {
        this.type = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.userData = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.bodyA = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.bodyB = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.collideConnected = false; // declared in org.jbox2d.dynamics.joints.JointDef
        this.localAnchorA = null; // declared in org.jbox2d.dynamics.joints.WeldJointDef
        this.localAnchorB = null; // declared in org.jbox2d.dynamics.joints.WeldJointDef
        this.referenceAngle = 0; // declared in org.jbox2d.dynamics.joints.WeldJointDef
        this.frequencyHz = 0; // declared in org.jbox2d.dynamics.joints.WeldJointDef
        this.dampingRatio = 0; // declared in org.jbox2d.dynamics.joints.WeldJointDef
    },

    instanceOf : function(aType) {
        return ojdjWeldJointDef.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdjWeldJointDef;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        ojdjJointDef.VOIDinit(thisRef);
        var var0 = ojdjJointType.WELD; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@192ce46e
        thisRef.type = var0;
        var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var1);
        thisRef.localAnchorA = var1;
        var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var2);
        thisRef.localAnchorB = var2;
        thisRef.referenceAngle = 0.0;
        return;
    },

    classInitCheck : function() {
        if (!ojdjWeldJointDef.__initialized) {
            ojdjWeldJointDef.__initialized = true;
            var thePrototype = ojdjWeldJointDef.Create.prototype;
            thePrototype.instanceOf = ojdjWeldJointDef.instanceOf;
            thePrototype.ClassgetClass = ojdjWeldJointDef.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojdjJointDef.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var ojdjFrictionJoint = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 164,
    __implementedTypes : [1,117,164],
    $assertionsDisabled : false, // declared in org.jbox2d.dynamics.joints.Joint
    $assertionsDisabled : false, // declared in org.jbox2d.dynamics.joints.FrictionJoint

    Create : function() {
        this.pool = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_type = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_prev = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_next = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_bodyA = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_bodyB = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_collideConnected = false; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_islandFlag = false; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_userData = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_edgeA = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_edgeB = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_rA = null; // declared in org.jbox2d.dynamics.joints.FrictionJoint
        this.m_rB = null; // declared in org.jbox2d.dynamics.joints.FrictionJoint
        this.m_localCenterA = null; // declared in org.jbox2d.dynamics.joints.FrictionJoint
        this.m_localCenterB = null; // declared in org.jbox2d.dynamics.joints.FrictionJoint
        this.m_linearMass = null; // declared in org.jbox2d.dynamics.joints.FrictionJoint
        this.m_localAnchorA = null; // declared in org.jbox2d.dynamics.joints.FrictionJoint
        this.m_localAnchorB = null; // declared in org.jbox2d.dynamics.joints.FrictionJoint
        this.m_linearImpulse = null; // declared in org.jbox2d.dynamics.joints.FrictionJoint
        this.m_angularImpulse = 0; // declared in org.jbox2d.dynamics.joints.FrictionJoint
        this.m_maxForce = 0; // declared in org.jbox2d.dynamics.joints.FrictionJoint
        this.m_maxTorque = 0; // declared in org.jbox2d.dynamics.joints.FrictionJoint
        this.m_indexA = 0; // declared in org.jbox2d.dynamics.joints.FrictionJoint
        this.m_indexB = 0; // declared in org.jbox2d.dynamics.joints.FrictionJoint
        this.m_invMassA = 0; // declared in org.jbox2d.dynamics.joints.FrictionJoint
        this.m_invMassB = 0; // declared in org.jbox2d.dynamics.joints.FrictionJoint
        this.m_invIA = 0; // declared in org.jbox2d.dynamics.joints.FrictionJoint
        this.m_invIB = 0; // declared in org.jbox2d.dynamics.joints.FrictionJoint
        this.m_angularMass = 0; // declared in org.jbox2d.dynamics.joints.FrictionJoint
    },

    instanceOf : function(aType) {
        return ojdjFrictionJoint.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdjFrictionJoint;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    ojdjJointcreateojdWorldojdjJointDef : function(p0,p1) {
         return ojdjJoint.ojdjJointcreateojdWorldojdjJointDef(p0,p1);
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdjFrictionJoint.BOOLEANdesiredAssertionStatus(ojdjFrictionJoint); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_9_13 : for(;;) switch (__label__) {
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_9_13;
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_9_13;
        }
        ojdjFrictionJoint.$assertionsDisabled = var1;
        return;
    },

    VOIDinitojpIWorldPoolojdjFrictionJointDef : function(thisRef,argWorldPool,def) {
        var __label__ = null;
        ojdjJoint.VOIDinitojpIWorldPoolojdjJointDef(thisRef,argWorldPool,def);
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var0);
        thisRef.m_rA = var0;
        var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var1);
        thisRef.m_rB = var1;
        var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var2);
        thisRef.m_localCenterA = var2;
        var var3 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var3);
        thisRef.m_localCenterB = var3;
        var var4 = new ojcMat22.Create(); // type is REFERENCE value type is REFERENCE
        ojcMat22.VOIDinit(var4);
        thisRef.m_linearMass = var4;
        var var5 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinitojcVec2(var5,def.localAnchorA);
        thisRef.m_localAnchorA = var5;
        var var7 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinitojcVec2(var7,def.localAnchorB);
        thisRef.m_localAnchorB = var7;
        var var9 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var9);
        thisRef.m_linearImpulse = var9;
        thisRef.m_angularImpulse = 0.0;
        var var10 = def.maxForce; // type is FLOAT value type is FLOAT
        thisRef.m_maxForce = var10;
        var var11 = def.maxTorque; // type is FLOAT value type is FLOAT
        thisRef.m_maxTorque = var11;
        return;
    },

    VOIDinitVelocityConstraintsojdSolverData : function(thisRef,data) {
        var local_8_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_7_FLOAT = null; // type is FLOAT # of inits = 2
        var local_12_FLOAT = null; // type is FLOAT # of inits = 1
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_11_FLOAT = null; // type is FLOAT # of inits = 1
        var local_4_FLOAT = null; // type is FLOAT # of inits = 2
        var local_13_FLOAT = null; // type is FLOAT # of inits = 1
        var local_14_FLOAT = null; // type is FLOAT # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var1 = thisRef.m_bodyA.m_islandIndex; // type is INT value type is INT
            thisRef.m_indexA = var1;
            var var3 = thisRef.m_bodyB.m_islandIndex; // type is INT value type is INT
            thisRef.m_indexB = var3;
            var var8 = thisRef.m_localCenterA.ojcVec2setojcVec2(thisRef.m_localCenterA,thisRef.m_bodyA.m_sweep.localCenter); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@44a1c6b2
            var var13 = thisRef.m_localCenterB.ojcVec2setojcVec2(thisRef.m_localCenterB,thisRef.m_bodyB.m_sweep.localCenter); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@51e3c842
            var var15 = thisRef.m_bodyA.m_invMass; // type is FLOAT value type is FLOAT
            thisRef.m_invMassA = var15;
            var var17 = thisRef.m_bodyB.m_invMass; // type is FLOAT value type is FLOAT
            thisRef.m_invMassB = var17;
            var var19 = thisRef.m_bodyA.m_invI; // type is FLOAT value type is FLOAT
            thisRef.m_invIA = var19;
            var var21 = thisRef.m_bodyB.m_invI; // type is FLOAT value type is FLOAT
            thisRef.m_invIB = var21;
            var var24 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            var local_2_FLOAT = var24.a; // type is FLOAT value type is FLOAT
            var var30 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_3_REFERENCE = var30.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@130fc237
            var var35 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_4_FLOAT = var35.w; // type is FLOAT value type is FLOAT
            var var41 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            var local_5_FLOAT = var41.a; // type is FLOAT value type is FLOAT
            var var47 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_6_REFERENCE = var47.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1825f905
            var var52 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_7_FLOAT = var52.w; // type is FLOAT value type is FLOAT
            var var57 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@52fb38e5
            local_8_REFERENCE = var57; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@48bbdc91
            var var60 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1d954b20
            var local_9_REFERENCE = var60; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@70663cdf
            var var63 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@47bc0e07
            var local_10_REFERENCE = var63; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4c0b2a05
            var var67 = local_9_REFERENCE.ojcRotsetFLOAT(local_9_REFERENCE,local_2_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7bf0b4ef
            var var70 = local_10_REFERENCE.ojcRotsetFLOAT(local_10_REFERENCE,local_5_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3a31ef8a
            var var71 = local_9_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@70663cdf
            var var74 = local_8_REFERENCE.ojcVec2setojcVec2(local_8_REFERENCE,thisRef.m_localAnchorA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1d5a02fd
            var var76 = var74.ojcVec2subLocalojcVec2(var74,thisRef.m_localCenterA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@8945851
            ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var71,var76,thisRef.m_rA);
            var var78 = local_10_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4c0b2a05
            var var81 = local_8_REFERENCE.ojcVec2setojcVec2(local_8_REFERENCE,thisRef.m_localAnchorB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@76bdd260
            var var83 = var81.ojcVec2subLocalojcVec2(var81,thisRef.m_localCenterB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@43c53e82
            ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var78,var83,thisRef.m_rB);
            local_11_FLOAT = thisRef.m_invMassA; // type is FLOAT value type is FLOAT
            local_12_FLOAT = thisRef.m_invMassB; // type is FLOAT value type is FLOAT
            local_13_FLOAT = thisRef.m_invIA; // type is FLOAT value type is FLOAT
            local_14_FLOAT = thisRef.m_invIB; // type is FLOAT value type is FLOAT
            var var98 = thisRef.pool.ojcMat22popMat22(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@e4581ed
            var local_15_REFERENCE = var98; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@243906a4
            var var101 = local_15_REFERENCE.ex; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3c0ffe91
            var var120 = (((local_11_FLOAT + local_12_FLOAT) + ((local_13_FLOAT * thisRef.m_rA.y) * thisRef.m_rA.y)) + ((local_14_FLOAT * thisRef.m_rB.y) * thisRef.m_rB.y)); // type is FLOAT value type is FLOAT
            var101.x = var120;
            var var122 = local_15_REFERENCE.ex; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@56d4e6bc
            var var138 = ((((-local_13_FLOAT) * thisRef.m_rA.x) * thisRef.m_rA.y) - ((local_14_FLOAT * thisRef.m_rB.x) * thisRef.m_rB.y)); // type is FLOAT value type is FLOAT
            var122.y = var138;
            var var140 = local_15_REFERENCE.ey; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@74bc5f62
            var var143 = local_15_REFERENCE.ex.y; // type is FLOAT value type is FLOAT
            var140.x = var143;
            var var145 = local_15_REFERENCE.ey; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@185c6b77
            var var164 = (((local_11_FLOAT + local_12_FLOAT) + ((local_13_FLOAT * thisRef.m_rA.x) * thisRef.m_rA.x)) + ((local_14_FLOAT * thisRef.m_rB.x) * thisRef.m_rB.x)); // type is FLOAT value type is FLOAT
            var145.y = var164;
            local_15_REFERENCE.VOIDinvertToOutojcMat22(local_15_REFERENCE,thisRef.m_linearMass);
            var var169 = (local_13_FLOAT + local_14_FLOAT); // type is FLOAT value type is FLOAT
            thisRef.m_angularMass = var169;
            var var170 = thisRef.m_angularMass; // type is FLOAT value type is FLOAT
            if ((var170 <= 0.0)) {
                __label__ = 518;
                break $S_0;
            }
            __label__ = 508;
            }
        $M_518_508 : for(;;) switch (__label__) {
            case 508 :
            // NORMAL
                var var173 = (1.0 / thisRef.m_angularMass); // type is FLOAT value type is FLOAT
                thisRef.m_angularMass = var173;
                __label__ = 518;
                continue $M_518_508;
            case 518 :
            // NORMAL
                $S_518 : {
                // NORMAL
                    var var175 = data.step.warmStarting; // type is BOOLEAN value type is BOOLEAN
                    if ((var175 == 0)) {
                        __label__ = 678;
                        break $S_518;
                    }
                    __label__ = 528;
                    }
                $M_678_528 : for(;;) switch (__label__) {
                    case 678 :
                    // NORMAL
                        thisRef.m_linearImpulse.VOIDsetZero(thisRef.m_linearImpulse);
                        thisRef.m_angularImpulse = 0.0;
                        break $M_678_528;
                    case 528 :
                    // NORMAL
                        var var180 = thisRef.m_linearImpulse.ojcVec2mulLocalFLOAT(thisRef.m_linearImpulse,data.step.dtRatio); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5be4e59b
                        var var184 = (thisRef.m_angularImpulse * data.step.dtRatio); // type is FLOAT value type is FLOAT
                        thisRef.m_angularImpulse = var184;
                        var var186 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2a74095d
                        var local_16_REFERENCE = var186; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3c25043e
                        var var190 = local_16_REFERENCE.ojcVec2setojcVec2(local_16_REFERENCE,thisRef.m_linearImpulse); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@47d9d71e
                        var var193 = local_8_REFERENCE.ojcVec2setojcVec2(local_8_REFERENCE,local_16_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3b6d3a43
                        var var195 = var193.ojcVec2mulLocalFLOAT(var193,local_11_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@31d9f292
                        var var198 = local_3_REFERENCE.ojcVec2subLocalojcVec2(local_3_REFERENCE,local_8_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@25c90463
                        var var199 = local_4_FLOAT; // type is FLOAT value type is FLOAT
                        var var200 = local_13_FLOAT; // type is FLOAT value type is FLOAT
                        var var203 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.m_rA,local_16_REFERENCE); // type is FLOAT value type is FLOAT
                        local_4_FLOAT = (var199 - (var200 * (var203 + thisRef.m_angularImpulse))); // type is FLOAT value type is FLOAT
                        var var211 = local_8_REFERENCE.ojcVec2setojcVec2(local_8_REFERENCE,local_16_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2ca146e3
                        var var213 = var211.ojcVec2mulLocalFLOAT(var211,local_12_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7eccde16
                        var var216 = local_6_REFERENCE.ojcVec2addLocalojcVec2(local_6_REFERENCE,local_8_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7fee3f
                        var var217 = local_7_FLOAT; // type is FLOAT value type is FLOAT
                        var var218 = local_14_FLOAT; // type is FLOAT value type is FLOAT
                        var var221 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.m_rB,local_16_REFERENCE); // type is FLOAT value type is FLOAT
                        local_7_FLOAT = (var217 + (var218 * (var221 + thisRef.m_angularImpulse))); // type is FLOAT value type is FLOAT
                        thisRef.pool.VOIDpushVec2INT(thisRef.pool,1);
                        break $M_678_528;
                }
                $S_690 : {
                // NORMAL
                    var var230 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
                    var var231 = var230.w; // type is FLOAT value type is FLOAT
                    var var232 = local_4_FLOAT; // type is FLOAT value type is FLOAT
                    if ((var231 == var232)) {
                        __label__ = 740;
                        break $S_690;
                    }
                    __label__ = 708;
                    }
                $M_708_740 : for(;;) switch (__label__) {
                    case 708 :
                    // NORMAL
                        $S_708 : {
                        // NORMAL
                            var var234 = ojdjFrictionJoint.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                            if ((var234 != 0)) {
                                __label__ = 740;
                                continue $M_708_740;
                            }
                            }
                        $S_714 : {
                        // NORMAL
                            var var237 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
                            var var238 = var237.w; // type is FLOAT value type is FLOAT
                            var var239 = local_4_FLOAT; // type is FLOAT value type is FLOAT
                            if ((var238 != var239)) {
                                __label__ = 740;
                                continue $M_708_740;
                            }
                            }
                        var var241 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                        jlAssertionError.VOIDinit(var241);
                        throw var241;
                    case 740 :
                    // NORMAL
                        var var244 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
                        var var245 = local_4_FLOAT; // type is FLOAT value type is FLOAT
                        var244.w = var245;
                        var var248 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
                        var var249 = local_7_FLOAT; // type is FLOAT value type is FLOAT
                        var248.w = var249;
                        thisRef.pool.VOIDpushRotINT(thisRef.pool,2);
                        thisRef.pool.VOIDpushVec2INT(thisRef.pool,1);
                        thisRef.pool.VOIDpushMat22INT(thisRef.pool,1);
                        return;
                }
        }
    },

    VOIDsolveVelocityConstraintsojdSolverData : function(thisRef,data) {
        var local_5_FLOAT = null; // type is FLOAT # of inits = 3
        var local_7_FLOAT = null; // type is FLOAT # of inits = 1
        var local_13_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_15_FLOAT = null; // type is FLOAT # of inits = 1
        var local_8_FLOAT = null; // type is FLOAT # of inits = 1
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_12_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_9_FLOAT = null; // type is FLOAT # of inits = 1
        var local_6_FLOAT = null; // type is FLOAT # of inits = 1
        var local_3_FLOAT = null; // type is FLOAT # of inits = 3
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_14_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var2 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_2_REFERENCE = var2.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4d4c1c4
            var var7 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_3_FLOAT = var7.w; // type is FLOAT value type is FLOAT
            var var13 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_4_REFERENCE = var13.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@36c9f289
            var var18 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_5_FLOAT = var18.w; // type is FLOAT value type is FLOAT
            local_6_FLOAT = thisRef.m_invMassA; // type is FLOAT value type is FLOAT
            local_7_FLOAT = thisRef.m_invMassB; // type is FLOAT value type is FLOAT
            local_8_FLOAT = thisRef.m_invIA; // type is FLOAT value type is FLOAT
            local_9_FLOAT = thisRef.m_invIB; // type is FLOAT value type is FLOAT
            var local_10_FLOAT = data.step.dt; // type is FLOAT value type is FLOAT
            var local_11_FLOAT = (local_5_FLOAT - local_3_FLOAT); // type is FLOAT value type is FLOAT
            var local_12_FLOAT = ((-thisRef.m_angularMass) * local_11_FLOAT); // type is FLOAT value type is FLOAT
            var local_13_FLOAT = thisRef.m_angularImpulse; // type is FLOAT value type is FLOAT
            var local_14_FLOAT = (local_10_FLOAT * thisRef.m_maxTorque); // type is FLOAT value type is FLOAT
            var var63 = ojcMathUtils.FLOATclampFLOATFLOATFLOAT((thisRef.m_angularImpulse + local_12_FLOAT),(-local_14_FLOAT),local_14_FLOAT); // type is FLOAT value type is FLOAT
            thisRef.m_angularImpulse = var63;
            var local_12_FLOAT = (thisRef.m_angularImpulse - local_13_FLOAT); // type is FLOAT value type is FLOAT
            local_3_FLOAT = (local_3_FLOAT - (local_8_FLOAT * local_12_FLOAT)); // type is FLOAT value type is FLOAT
            local_5_FLOAT = (local_5_FLOAT + (local_9_FLOAT * local_12_FLOAT)); // type is FLOAT value type is FLOAT
            var var81 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@55cb2b79
            var local_11_REFERENCE = var81; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@140aa191
            var var84 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@36728835
            local_12_REFERENCE = var84; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@21a5624a
            ojcVec2.VOIDcrossToOutUnsafeFLOATojcVec2ojcVec2(local_3_FLOAT,thisRef.m_rA,local_12_REFERENCE);
            ojcVec2.VOIDcrossToOutUnsafeFLOATojcVec2ojcVec2(local_5_FLOAT,thisRef.m_rB,local_11_REFERENCE);
            var var94 = local_11_REFERENCE.ojcVec2addLocalojcVec2(local_11_REFERENCE,local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4fd669c8
            var var96 = var94.ojcVec2subLocalojcVec2(var94,local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@43ca03a8
            var var98 = var96.ojcVec2subLocalojcVec2(var96,local_12_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@20d2469
            var var100 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@209c273d
            local_13_REFERENCE = var100; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@75856c42
            ojcMat22.VOIDmulToOutUnsafeojcMat22ojcVec2ojcVec2(thisRef.m_linearMass,local_11_REFERENCE,local_13_REFERENCE);
            var var106 = local_13_REFERENCE.ojcVec2negateLocal(local_13_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5c7892cf
            var var108 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4fbc0dab
            local_14_REFERENCE = var108; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7e2de5c6
            var var112 = local_14_REFERENCE.ojcVec2setojcVec2(local_14_REFERENCE,thisRef.m_linearImpulse); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@24794659
            var var115 = thisRef.m_linearImpulse.ojcVec2addLocalojcVec2(thisRef.m_linearImpulse,local_13_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@651d3824
            local_15_FLOAT = (local_10_FLOAT * thisRef.m_maxForce); // type is FLOAT value type is FLOAT
            var var122 = thisRef.m_linearImpulse.FLOATlengthSquared(thisRef.m_linearImpulse); // type is FLOAT value type is FLOAT
            var var125 = (local_15_FLOAT * local_15_FLOAT); // type is FLOAT value type is FLOAT
            if ((var122 <= var125)) {
                __label__ = 326;
                break $S_0;
            }
            __label__ = 308;
            }
        $M_326_308 : for(;;) switch (__label__) {
            case 326 :
            // NORMAL
                $S_326 : {
                // NORMAL
                    var var134 = local_13_REFERENCE.ojcVec2setojcVec2(local_13_REFERENCE,thisRef.m_linearImpulse); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7d6b30a2
                    var var136 = var134.ojcVec2subLocalojcVec2(var134,local_14_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5215abf1
                    var var139 = local_12_REFERENCE.ojcVec2setojcVec2(local_12_REFERENCE,local_13_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3c306464
                    var var141 = var139.ojcVec2mulLocalFLOAT(var139,local_6_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3060a7de
                    var var144 = local_2_REFERENCE.ojcVec2subLocalojcVec2(local_2_REFERENCE,local_12_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@142a7f50
                    var var145 = local_3_FLOAT; // type is FLOAT value type is FLOAT
                    var var146 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                    var var149 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.m_rA,local_13_REFERENCE); // type is FLOAT value type is FLOAT
                    local_3_FLOAT = (var145 - (var146 * var149)); // type is FLOAT value type is FLOAT
                    var var155 = local_12_REFERENCE.ojcVec2setojcVec2(local_12_REFERENCE,local_13_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6b9f1407
                    var var157 = var155.ojcVec2mulLocalFLOAT(var155,local_7_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@54335e54
                    var var160 = local_4_REFERENCE.ojcVec2addLocalojcVec2(local_4_REFERENCE,local_12_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@61d85d5b
                    var var161 = local_5_FLOAT; // type is FLOAT value type is FLOAT
                    var var162 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                    var var165 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.m_rB,local_13_REFERENCE); // type is FLOAT value type is FLOAT
                    local_5_FLOAT = (var161 + (var162 * var165)); // type is FLOAT value type is FLOAT
                    var var171 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
                    var var172 = var171.w; // type is FLOAT value type is FLOAT
                    var var173 = local_3_FLOAT; // type is FLOAT value type is FLOAT
                    if ((var172 == var173)) {
                        __label__ = 462;
                        break $S_326;
                    }
                    __label__ = 431;
                    }
                $M_462_431 : for(;;) switch (__label__) {
                    case 431 :
                    // NORMAL
                        $S_431 : {
                        // NORMAL
                            var var175 = ojdjFrictionJoint.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                            if ((var175 != 0)) {
                                __label__ = 462;
                                continue $M_462_431;
                            }
                            }
                        $S_437 : {
                        // NORMAL
                            var var178 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
                            var var179 = var178.w; // type is FLOAT value type is FLOAT
                            var var180 = local_3_FLOAT; // type is FLOAT value type is FLOAT
                            if ((var179 != var180)) {
                                __label__ = 462;
                                continue $M_462_431;
                            }
                            }
                        var var182 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                        jlAssertionError.VOIDinit(var182);
                        throw var182;
                    case 462 :
                    // NORMAL
                        var var185 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
                        var var186 = local_3_FLOAT; // type is FLOAT value type is FLOAT
                        var185.w = var186;
                        var var189 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
                        var var190 = local_5_FLOAT; // type is FLOAT value type is FLOAT
                        var189.w = var190;
                        thisRef.pool.VOIDpushVec2INT(thisRef.pool,4);
                        return;
                }
            case 308 :
            // NORMAL
                var var128 = thisRef.m_linearImpulse.FLOATnormalize(thisRef.m_linearImpulse); // type is FLOAT value type is FLOAT
                var var131 = thisRef.m_linearImpulse.ojcVec2mulLocalFLOAT(thisRef.m_linearImpulse,local_15_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@264f6ecf
                __label__ = 326;
                continue $M_326_308;
        }
    },

    BOOLEANsolvePositionConstraintsojdSolverData : function(thisRef,data) {
        var __label__ = null;
        return 1;
    },

    classInitCheck : function() {
        if (!ojdjFrictionJoint.__initialized) {
            ojdjFrictionJoint.__initialized = true;
            var thePrototype = ojdjFrictionJoint.Create.prototype;
            thePrototype.instanceOf = ojdjFrictionJoint.instanceOf;
            thePrototype.ClassgetClass = ojdjFrictionJoint.ClassgetClass;
            thePrototype.BOOLEANsolvePositionConstraintsojdSolverData = ojdjFrictionJoint.BOOLEANsolvePositionConstraintsojdSolverData;
            thePrototype.VOIDsolveVelocityConstraintsojdSolverData = ojdjFrictionJoint.VOIDsolveVelocityConstraintsojdSolverData;
            thePrototype.VOIDinitVelocityConstraintsojdSolverData = ojdjFrictionJoint.VOIDinitVelocityConstraintsojdSolverData;
            thePrototype.BOOLEANgetCollideConnected = ojdjJoint.BOOLEANgetCollideConnected;
            thePrototype.ojdBodygetBodyB = ojdjJoint.ojdBodygetBodyB;
            thePrototype.ojdBodygetBodyA = ojdjJoint.ojdBodygetBodyA;
            thePrototype.ojdjJointTypegetType = ojdjJoint.ojdjJointTypegetType;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojdjJoint.classInitCheck();
            jlObject.classInitCheck();
            ojdjFrictionJoint.VOIDclinit();
        }
    },

};

var ojdjFrictionJointDef = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 165,
    __implementedTypes : [1,165,149],

    Create : function() {
        this.type = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.userData = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.bodyA = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.bodyB = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.collideConnected = false; // declared in org.jbox2d.dynamics.joints.JointDef
        this.localAnchorA = null; // declared in org.jbox2d.dynamics.joints.FrictionJointDef
        this.localAnchorB = null; // declared in org.jbox2d.dynamics.joints.FrictionJointDef
        this.maxForce = 0; // declared in org.jbox2d.dynamics.joints.FrictionJointDef
        this.maxTorque = 0; // declared in org.jbox2d.dynamics.joints.FrictionJointDef
    },

    instanceOf : function(aType) {
        return ojdjFrictionJointDef.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdjFrictionJointDef;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        ojdjJointDef.VOIDinit(thisRef);
        var var0 = ojdjJointType.FRICTION; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@ab08256
        thisRef.type = var0;
        var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var1);
        thisRef.localAnchorA = var1;
        var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var2);
        thisRef.localAnchorB = var2;
        thisRef.maxForce = 0.0;
        thisRef.maxTorque = 0.0;
        return;
    },

    classInitCheck : function() {
        if (!ojdjFrictionJointDef.__initialized) {
            ojdjFrictionJointDef.__initialized = true;
            var thePrototype = ojdjFrictionJointDef.Create.prototype;
            thePrototype.instanceOf = ojdjFrictionJointDef.instanceOf;
            thePrototype.ClassgetClass = ojdjFrictionJointDef.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojdjJointDef.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var ojdjWheelJoint = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 166,
    __implementedTypes : [1,117,166],
    $assertionsDisabled : false, // declared in org.jbox2d.dynamics.joints.Joint

    Create : function() {
        this.pool = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_type = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_prev = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_next = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_bodyA = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_bodyB = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_collideConnected = false; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_islandFlag = false; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_userData = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_edgeA = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_edgeB = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_localAnchorA = null; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.m_localAnchorB = null; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.m_localXAxisA = null; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.m_localYAxisA = null; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.m_localCenterA = null; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.m_localCenterB = null; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.m_ax = null; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.m_ay = null; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.rA = null; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.rB = null; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.d = null; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.m_motorMass = 0; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.m_motorImpulse = 0; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.m_maxMotorTorque = 0; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.m_motorSpeed = 0; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.m_enableMotor = false; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.m_frequencyHz = 0; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.m_dampingRatio = 0; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.m_indexA = 0; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.m_indexB = 0; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.m_invMassA = 0; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.m_invMassB = 0; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.m_invIA = 0; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.m_invIB = 0; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.m_sAy = 0; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.m_sBy = 0; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.m_mass = 0; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.m_springMass = 0; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.m_bias = 0; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.m_gamma = 0; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.m_sAx = 0; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.m_sBx = 0; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.m_springImpulse = 0; // declared in org.jbox2d.dynamics.joints.WheelJoint
        this.m_impulse = 0; // declared in org.jbox2d.dynamics.joints.WheelJoint
    },

    instanceOf : function(aType) {
        return ojdjWheelJoint.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdjWheelJoint;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    ojdjJointcreateojdWorldojdjJointDef : function(p0,p1) {
         return ojdjJoint.ojdjJointcreateojdWorldojdjJointDef(p0,p1);
    },

    VOIDinitojpIWorldPoolojdjWheelJointDef : function(thisRef,argPool,def) {
        var __label__ = null;
        ojdjJoint.VOIDinitojpIWorldPoolojdjJointDef(thisRef,argPool,def);
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var0);
        thisRef.m_localAnchorA = var0;
        var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var1);
        thisRef.m_localAnchorB = var1;
        var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var2);
        thisRef.m_localXAxisA = var2;
        var var3 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var3);
        thisRef.m_localYAxisA = var3;
        var var4 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var4);
        thisRef.m_localCenterA = var4;
        var var5 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var5);
        thisRef.m_localCenterB = var5;
        var var6 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var6);
        thisRef.m_ax = var6;
        var var7 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var7);
        thisRef.m_ay = var7;
        var var8 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var8);
        thisRef.rA = var8;
        var var9 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var9);
        thisRef.rB = var9;
        var var10 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var10);
        thisRef.d = var10;
        var var13 = thisRef.m_localAnchorA.ojcVec2setojcVec2(thisRef.m_localAnchorA,def.localAnchorA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6820fc70
        var var16 = thisRef.m_localAnchorB.ojcVec2setojcVec2(thisRef.m_localAnchorB,def.localAnchorB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7a6610ad
        var var19 = thisRef.m_localXAxisA.ojcVec2setojcVec2(thisRef.m_localXAxisA,def.localAxisA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6244200f
        ojcVec2.VOIDcrossToOutUnsafeFLOATojcVec2ojcVec2(1.0,thisRef.m_localXAxisA,thisRef.m_localYAxisA);
        thisRef.m_motorMass = 0.0;
        thisRef.m_motorImpulse = 0.0;
        var var22 = def.maxMotorTorque; // type is FLOAT value type is FLOAT
        thisRef.m_maxMotorTorque = var22;
        var var23 = def.motorSpeed; // type is FLOAT value type is FLOAT
        thisRef.m_motorSpeed = var23;
        var var24 = def.enableMotor; // type is BOOLEAN value type is BOOLEAN
        thisRef.m_enableMotor = var24;
        var var25 = def.frequencyHz; // type is FLOAT value type is FLOAT
        thisRef.m_frequencyHz = var25;
        var var26 = def.dampingRatio; // type is FLOAT value type is FLOAT
        thisRef.m_dampingRatio = var26;
        return;
    },

    VOIDinitVelocityConstraintsojdSolverData : function(thisRef,data) {
        var local_9_FLOAT = null; // type is FLOAT # of inits = 2
        var local_13_FLOAT = null; // type is FLOAT # of inits = 2
        var local_5_FLOAT = null; // type is FLOAT # of inits = 1
        var local_16_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_12_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_3_FLOAT = null; // type is FLOAT # of inits = 1
        var local_2_FLOAT = null; // type is FLOAT # of inits = 1
        var local_4_FLOAT = null; // type is FLOAT # of inits = 1
        var local_14_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_22_FLOAT = null; // type is FLOAT # of inits = 1
        var local_17_FLOAT = null; // type is FLOAT # of inits = 1
        var local_8_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_18_FLOAT = null; // type is FLOAT # of inits = 2
        var local_21_FLOAT = null; // type is FLOAT # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var1 = thisRef.m_bodyA.m_islandIndex; // type is INT value type is INT
            thisRef.m_indexA = var1;
            var var3 = thisRef.m_bodyB.m_islandIndex; // type is INT value type is INT
            thisRef.m_indexB = var3;
            var var8 = thisRef.m_localCenterA.ojcVec2setojcVec2(thisRef.m_localCenterA,thisRef.m_bodyA.m_sweep.localCenter); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2a2d8bab
            var var13 = thisRef.m_localCenterB.ojcVec2setojcVec2(thisRef.m_localCenterB,thisRef.m_bodyB.m_sweep.localCenter); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@38c53075
            var var15 = thisRef.m_bodyA.m_invMass; // type is FLOAT value type is FLOAT
            thisRef.m_invMassA = var15;
            var var17 = thisRef.m_bodyB.m_invMass; // type is FLOAT value type is FLOAT
            thisRef.m_invMassB = var17;
            var var19 = thisRef.m_bodyA.m_invI; // type is FLOAT value type is FLOAT
            thisRef.m_invIA = var19;
            var var21 = thisRef.m_bodyB.m_invI; // type is FLOAT value type is FLOAT
            thisRef.m_invIB = var21;
            local_2_FLOAT = thisRef.m_invMassA; // type is FLOAT value type is FLOAT
            local_3_FLOAT = thisRef.m_invMassB; // type is FLOAT value type is FLOAT
            local_4_FLOAT = thisRef.m_invIA; // type is FLOAT value type is FLOAT
            local_5_FLOAT = thisRef.m_invIB; // type is FLOAT value type is FLOAT
            var var36 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            var local_6_REFERENCE = var36.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@34efd052
            var var41 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            var local_7_FLOAT = var41.a; // type is FLOAT value type is FLOAT
            var var47 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_8_REFERENCE = var47.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@79a88181
            var var52 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_9_FLOAT = var52.w; // type is FLOAT value type is FLOAT
            var var58 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            var local_10_REFERENCE = var58.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3f1e2dcc
            var var63 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            var local_11_FLOAT = var63.a; // type is FLOAT value type is FLOAT
            var var69 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_12_REFERENCE = var69.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2ec9e4c2
            var var74 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_13_FLOAT = var74.w; // type is FLOAT value type is FLOAT
            var var79 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@646ecc09
            local_14_REFERENCE = var79; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2b0f6c2c
            var var82 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@59f7fd8c
            var local_15_REFERENCE = var82; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@17c9db33
            var var85 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7647d2fc
            local_16_REFERENCE = var85; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@25ffd022
            var var89 = local_14_REFERENCE.ojcRotsetFLOAT(local_14_REFERENCE,local_7_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@64db46b9
            var var92 = local_15_REFERENCE.ojcRotsetFLOAT(local_15_REFERENCE,local_11_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2a6cc33
            var var93 = local_14_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2b0f6c2c
            var var96 = local_16_REFERENCE.ojcVec2setojcVec2(local_16_REFERENCE,thisRef.m_localAnchorA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5b6f9f17
            var var98 = var96.ojcVec2subLocalojcVec2(var96,thisRef.m_localCenterA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@137766b4
            ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var93,var98,thisRef.rA);
            var var100 = local_15_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@17c9db33
            var var103 = local_16_REFERENCE.ojcVec2setojcVec2(local_16_REFERENCE,thisRef.m_localAnchorB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2d2704ed
            var var105 = var103.ojcVec2subLocalojcVec2(var103,thisRef.m_localCenterB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@19d4822e
            ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var100,var105,thisRef.rB);
            var var109 = thisRef.d.ojcVec2setojcVec2(thisRef.d,local_10_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3ee42124
            var var111 = var109.ojcVec2addLocalojcVec2(var109,thisRef.rB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@160ea28a
            var var113 = var111.ojcVec2subLocalojcVec2(var111,local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@39bdcca
            var var115 = var113.ojcVec2subLocalojcVec2(var113,thisRef.rA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3e63eb65
            ojcRot.VOIDmulToOutojcRotojcVec2ojcVec2(local_14_REFERENCE,thisRef.m_localYAxisA,thisRef.m_ay);
            var var121 = local_16_REFERENCE.ojcVec2setojcVec2(local_16_REFERENCE,thisRef.d); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2191008c
            var var123 = var121.ojcVec2addLocalojcVec2(var121,thisRef.rA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4268ecc6
            var var125 = ojcVec2.FLOATcrossojcVec2ojcVec2(var123,thisRef.m_ay); // type is FLOAT value type is FLOAT
            thisRef.m_sAy = var125;
            var var128 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.rB,thisRef.m_ay); // type is FLOAT value type is FLOAT
            thisRef.m_sBy = var128;
            var var143 = (((local_2_FLOAT + local_3_FLOAT) + ((local_4_FLOAT * thisRef.m_sAy) * thisRef.m_sAy)) + ((local_5_FLOAT * thisRef.m_sBy) * thisRef.m_sBy)); // type is FLOAT value type is FLOAT
            thisRef.m_mass = var143;
            var var144 = thisRef.m_mass; // type is FLOAT value type is FLOAT
            if ((var144 <= 0.0)) {
                __label__ = 471;
                break $S_0;
            }
            __label__ = 461;
            }
        $M_461_471 : for(;;) switch (__label__) {
            case 471 :
            // NORMAL
                $S_471 : {
                // NORMAL
                    thisRef.m_springMass = 0.0;
                    thisRef.m_bias = 0.0;
                    thisRef.m_gamma = 0.0;
                    var var148 = thisRef.m_frequencyHz; // type is FLOAT value type is FLOAT
                    if ((var148 <= 0.0)) {
                        __label__ = 739;
                        break $S_471;
                    }
                    __label__ = 495;
                    }
                $M_495_739 : for(;;) switch (__label__) {
                    case 495 :
                    // NORMAL
                        $S_495 : {
                        // NORMAL
                            ojcRot.VOIDmulToOutojcRotojcVec2ojcVec2(local_14_REFERENCE,thisRef.m_localXAxisA,thisRef.m_ax);
                            var var155 = local_16_REFERENCE.ojcVec2setojcVec2(local_16_REFERENCE,thisRef.d); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1fc805cd
                            var var157 = var155.ojcVec2addLocalojcVec2(var155,thisRef.rA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3ed1fd92
                            var var159 = ojcVec2.FLOATcrossojcVec2ojcVec2(var157,thisRef.m_ax); // type is FLOAT value type is FLOAT
                            thisRef.m_sAx = var159;
                            var var162 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.rB,thisRef.m_ax); // type is FLOAT value type is FLOAT
                            thisRef.m_sBx = var162;
                            local_17_FLOAT = (((local_2_FLOAT + local_3_FLOAT) + ((local_4_FLOAT * thisRef.m_sAx) * thisRef.m_sAx)) + ((local_5_FLOAT * thisRef.m_sBx) * thisRef.m_sBx)); // type is FLOAT value type is FLOAT
                            var var180 = local_17_FLOAT; // type is FLOAT value type is FLOAT
                            if ((var180 <= 0.0)) {
                                __label__ = 736;
                                break $S_495;
                            }
                            __label__ = 588;
                            }
                        $M_736_588 : for(;;) switch (__label__) {
                            case 588 :
                            // NORMAL
                                $S_588 : {
                                // NORMAL
                                    var var183 = (1.0 / local_17_FLOAT); // type is FLOAT value type is FLOAT
                                    thisRef.m_springMass = var183;
                                    var var186 = ojcVec2.FLOATdotojcVec2ojcVec2(thisRef.d,thisRef.m_ax); // type is FLOAT value type is FLOAT
                                    local_18_FLOAT = var186; // type is FLOAT value type is FLOAT
                                    var local_19_FLOAT = (6.2831855 * thisRef.m_frequencyHz); // type is FLOAT value type is FLOAT
                                    var local_20_FLOAT = (((2.0 * thisRef.m_springMass) * thisRef.m_dampingRatio) * local_19_FLOAT); // type is FLOAT value type is FLOAT
                                    local_21_FLOAT = ((thisRef.m_springMass * local_19_FLOAT) * local_19_FLOAT); // type is FLOAT value type is FLOAT
                                    local_22_FLOAT = data.step.dt; // type is FLOAT value type is FLOAT
                                    var var218 = (local_22_FLOAT * (local_20_FLOAT + (local_22_FLOAT * local_21_FLOAT))); // type is FLOAT value type is FLOAT
                                    thisRef.m_gamma = var218;
                                    var var219 = thisRef.m_gamma; // type is FLOAT value type is FLOAT
                                    if ((var219 <= 0.0)) {
                                        __label__ = 689;
                                        break $S_588;
                                    }
                                    __label__ = 679;
                                    }
                                $M_679_689 : for(;;) switch (__label__) {
                                    case 679 :
                                    // NORMAL
                                        var var222 = (1.0 / thisRef.m_gamma); // type is FLOAT value type is FLOAT
                                        thisRef.m_gamma = var222;
                                        __label__ = 689;
                                        continue $M_679_689;
                                    case 689 :
                                    // NORMAL
                                        $S_689 : {
                                        // NORMAL
                                            var var229 = (((local_18_FLOAT * local_22_FLOAT) * local_21_FLOAT) * thisRef.m_gamma); // type is FLOAT value type is FLOAT
                                            thisRef.m_bias = var229;
                                            var var232 = (local_17_FLOAT + thisRef.m_gamma); // type is FLOAT value type is FLOAT
                                            thisRef.m_springMass = var232;
                                            var var233 = thisRef.m_springMass; // type is FLOAT value type is FLOAT
                                            if ((var233 <= 0.0)) {
                                                __label__ = 736;
                                                continue $M_736_588;
                                            }
                                            }
                                        var var236 = (1.0 / thisRef.m_springMass); // type is FLOAT value type is FLOAT
                                        thisRef.m_springMass = var236;
                                        __label__ = 736;
                                        continue $M_736_588;
                                }
                            case 736 :
                            // NORMAL
                                break $M_495_739;
                        }
                    case 739 :
                    // NORMAL
                        thisRef.m_springImpulse = 0.0;
                        break $M_495_739;
                }
                $S_744 : {
                // NORMAL
                    var var237 = thisRef.m_enableMotor; // type is BOOLEAN value type is BOOLEAN
                    if ((var237 == 0)) {
                        __label__ = 782;
                        break $S_744;
                    }
                    __label__ = 751;
                    }
                $M_782_751 : for(;;) switch (__label__) {
                    case 751 :
                    // NORMAL
                        $S_751 : {
                        // NORMAL
                            var var240 = (local_4_FLOAT + local_5_FLOAT); // type is FLOAT value type is FLOAT
                            thisRef.m_motorMass = var240;
                            var var241 = thisRef.m_motorMass; // type is FLOAT value type is FLOAT
                            if ((var241 <= 0.0)) {
                                break $M_782_751;
                            }
                            }
                        var var244 = (1.0 / thisRef.m_motorMass); // type is FLOAT value type is FLOAT
                        thisRef.m_motorMass = var244;
                        break $M_782_751;
                    case 782 :
                    // NORMAL
                        thisRef.m_motorMass = 0.0;
                        thisRef.m_motorImpulse = 0.0;
                        break $M_782_751;
                }
                $S_792 : {
                // NORMAL
                    var var246 = data.step.warmStarting; // type is BOOLEAN value type is BOOLEAN
                    if ((var246 == 0)) {
                        __label__ = 1090;
                        break $S_792;
                    }
                    __label__ = 802;
                    }
                $M_802_1090 : for(;;) switch (__label__) {
                    case 802 :
                    // NORMAL
                        var var248 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@17ed0fa4
                        var local_17_REFERENCE = var248; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1266cf43
                        var var253 = (thisRef.m_impulse * data.step.dtRatio); // type is FLOAT value type is FLOAT
                        thisRef.m_impulse = var253;
                        var var257 = (thisRef.m_springImpulse * data.step.dtRatio); // type is FLOAT value type is FLOAT
                        thisRef.m_springImpulse = var257;
                        var var261 = (thisRef.m_motorImpulse * data.step.dtRatio); // type is FLOAT value type is FLOAT
                        thisRef.m_motorImpulse = var261;
                        var var262 = local_17_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1266cf43
                        var var271 = ((thisRef.m_impulse * thisRef.m_ay.x) + (thisRef.m_springImpulse * thisRef.m_ax.x)); // type is FLOAT value type is FLOAT
                        var262.x = var271;
                        var var272 = local_17_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1266cf43
                        var var281 = ((thisRef.m_impulse * thisRef.m_ay.y) + (thisRef.m_springImpulse * thisRef.m_ax.y)); // type is FLOAT value type is FLOAT
                        var272.y = var281;
                        local_18_FLOAT = (((thisRef.m_impulse * thisRef.m_sAy) + (thisRef.m_springImpulse * thisRef.m_sAx)) + thisRef.m_motorImpulse); // type is FLOAT value type is FLOAT
                        var local_19_FLOAT = (((thisRef.m_impulse * thisRef.m_sBy) + (thisRef.m_springImpulse * thisRef.m_sBx)) + thisRef.m_motorImpulse); // type is FLOAT value type is FLOAT
                        var var302 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@94f1896
                        var var308 = (var302.x - (thisRef.m_invMassA * local_17_REFERENCE.x)); // type is FLOAT value type is FLOAT
                        var302.x = var308;
                        var var309 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@94f1896
                        var var315 = (var309.y - (thisRef.m_invMassA * local_17_REFERENCE.y)); // type is FLOAT value type is FLOAT
                        var309.y = var315;
                        local_9_FLOAT = (local_9_FLOAT - (thisRef.m_invIA * local_18_FLOAT)); // type is FLOAT value type is FLOAT
                        var var322 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@70aaccdb
                        var var328 = (var322.x + (thisRef.m_invMassB * local_17_REFERENCE.x)); // type is FLOAT value type is FLOAT
                        var322.x = var328;
                        var var329 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@70aaccdb
                        var var335 = (var329.y + (thisRef.m_invMassB * local_17_REFERENCE.y)); // type is FLOAT value type is FLOAT
                        var329.y = var335;
                        local_13_FLOAT = (local_13_FLOAT + (thisRef.m_invIB * local_19_FLOAT)); // type is FLOAT value type is FLOAT
                        thisRef.pool.VOIDpushVec2INT(thisRef.pool,1);
                        break $M_802_1090;
                    case 1090 :
                    // NORMAL
                        thisRef.m_impulse = 0.0;
                        thisRef.m_springImpulse = 0.0;
                        thisRef.m_motorImpulse = 0.0;
                        break $M_802_1090;
                }
                thisRef.pool.VOIDpushRotINT(thisRef.pool,2);
                thisRef.pool.VOIDpushVec2INT(thisRef.pool,1);
                var var347 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
                var var348 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                var347.w = var348;
                var var351 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
                var var352 = local_13_FLOAT; // type is FLOAT value type is FLOAT
                var351.w = var352;
                return;
            case 461 :
            // NORMAL
                var var147 = (1.0 / thisRef.m_mass); // type is FLOAT value type is FLOAT
                thisRef.m_mass = var147;
                __label__ = 471;
                continue $M_461_471;
        }
    },

    VOIDsolveVelocityConstraintsojdSolverData : function(thisRef,data) {
        var __label__ = null;
        var local_2_FLOAT = thisRef.m_invMassA; // type is FLOAT value type is FLOAT
        var local_3_FLOAT = thisRef.m_invMassB; // type is FLOAT value type is FLOAT
        var local_4_FLOAT = thisRef.m_invIA; // type is FLOAT value type is FLOAT
        var local_5_FLOAT = thisRef.m_invIB; // type is FLOAT value type is FLOAT
        var var14 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
        var local_6_REFERENCE = var14.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6ecfdef1
        var var19 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
        var local_7_FLOAT = var19.w; // type is FLOAT value type is FLOAT
        var var25 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
        var local_8_REFERENCE = var25.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1203dee0
        var var30 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
        var local_9_FLOAT = var30.w; // type is FLOAT value type is FLOAT
        var var35 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4023aba7
        var local_10_REFERENCE = var35; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@23951bfe
        var var38 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@333d612b
        var local_11_REFERENCE = var38; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3fc54d72
        var var40 = thisRef.m_ax; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6266a7be
        var var43 = local_10_REFERENCE.ojcVec2setojcVec2(local_10_REFERENCE,local_8_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@69271ae7
        var var45 = var43.ojcVec2subLocalojcVec2(var43,local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@31cb0ad1
        var var46 = ojcVec2.FLOATdotojcVec2ojcVec2(var40,var45); // type is FLOAT value type is FLOAT
        var local_12_FLOAT = ((var46 + (thisRef.m_sBx * local_9_FLOAT)) - (thisRef.m_sAx * local_7_FLOAT)); // type is FLOAT value type is FLOAT
        var local_13_FLOAT = ((-thisRef.m_springMass) * ((local_12_FLOAT + thisRef.m_bias) + (thisRef.m_gamma * thisRef.m_springImpulse))); // type is FLOAT value type is FLOAT
        var var71 = (thisRef.m_springImpulse + local_13_FLOAT); // type is FLOAT value type is FLOAT
        thisRef.m_springImpulse = var71;
        var var72 = local_11_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3fc54d72
        var var76 = (local_13_FLOAT * thisRef.m_ax.x); // type is FLOAT value type is FLOAT
        var72.x = var76;
        var var77 = local_11_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3fc54d72
        var var81 = (local_13_FLOAT * thisRef.m_ax.y); // type is FLOAT value type is FLOAT
        var77.y = var81;
        var local_14_FLOAT = (local_13_FLOAT * thisRef.m_sAx); // type is FLOAT value type is FLOAT
        var local_15_FLOAT = (local_13_FLOAT * thisRef.m_sBx); // type is FLOAT value type is FLOAT
        var var92 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@24707f47
        var var98 = (var92.x - (local_2_FLOAT * local_11_REFERENCE.x)); // type is FLOAT value type is FLOAT
        var92.x = var98;
        var var99 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@24707f47
        var var105 = (var99.y - (local_2_FLOAT * local_11_REFERENCE.y)); // type is FLOAT value type is FLOAT
        var99.y = var105;
        var local_7_FLOAT = (local_7_FLOAT - (local_4_FLOAT * local_14_FLOAT)); // type is FLOAT value type is FLOAT
        var var112 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@73fc7720
        var var118 = (var112.x + (local_3_FLOAT * local_11_REFERENCE.x)); // type is FLOAT value type is FLOAT
        var112.x = var118;
        var var119 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@73fc7720
        var var125 = (var119.y + (local_3_FLOAT * local_11_REFERENCE.y)); // type is FLOAT value type is FLOAT
        var119.y = var125;
        var local_9_FLOAT = (local_9_FLOAT + (local_5_FLOAT * local_15_FLOAT)); // type is FLOAT value type is FLOAT
        var local_12_FLOAT = ((local_9_FLOAT - local_7_FLOAT) - thisRef.m_motorSpeed); // type is FLOAT value type is FLOAT
        var local_13_FLOAT = ((-thisRef.m_motorMass) * local_12_FLOAT); // type is FLOAT value type is FLOAT
        var local_14_FLOAT = thisRef.m_motorImpulse; // type is FLOAT value type is FLOAT
        var local_15_FLOAT = (data.step.dt * thisRef.m_maxMotorTorque); // type is FLOAT value type is FLOAT
        var var156 = ojcMathUtils.FLOATclampFLOATFLOATFLOAT((thisRef.m_motorImpulse + local_13_FLOAT),(-local_15_FLOAT),local_15_FLOAT); // type is FLOAT value type is FLOAT
        thisRef.m_motorImpulse = var156;
        var local_13_FLOAT = (thisRef.m_motorImpulse - local_14_FLOAT); // type is FLOAT value type is FLOAT
        var local_7_FLOAT = (local_7_FLOAT - (local_4_FLOAT * local_13_FLOAT)); // type is FLOAT value type is FLOAT
        var local_9_FLOAT = (local_9_FLOAT + (local_5_FLOAT * local_13_FLOAT)); // type is FLOAT value type is FLOAT
        var var173 = thisRef.m_ay; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@22ddbb9a
        var var176 = local_10_REFERENCE.ojcVec2setojcVec2(local_10_REFERENCE,local_8_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4b29a092
        var var178 = var176.ojcVec2subLocalojcVec2(var176,local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6c0464f7
        var var179 = ojcVec2.FLOATdotojcVec2ojcVec2(var173,var178); // type is FLOAT value type is FLOAT
        var local_12_FLOAT = ((var179 + (thisRef.m_sBy * local_9_FLOAT)) - (thisRef.m_sAy * local_7_FLOAT)); // type is FLOAT value type is FLOAT
        var local_13_FLOAT = ((-thisRef.m_mass) * local_12_FLOAT); // type is FLOAT value type is FLOAT
        var var196 = (thisRef.m_impulse + local_13_FLOAT); // type is FLOAT value type is FLOAT
        thisRef.m_impulse = var196;
        var var197 = local_11_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3fc54d72
        var var201 = (local_13_FLOAT * thisRef.m_ay.x); // type is FLOAT value type is FLOAT
        var197.x = var201;
        var var202 = local_11_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3fc54d72
        var var206 = (local_13_FLOAT * thisRef.m_ay.y); // type is FLOAT value type is FLOAT
        var202.y = var206;
        var local_14_FLOAT = (local_13_FLOAT * thisRef.m_sAy); // type is FLOAT value type is FLOAT
        var local_15_FLOAT = (local_13_FLOAT * thisRef.m_sBy); // type is FLOAT value type is FLOAT
        var var215 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@24707f47
        var var221 = (var215.x - (local_2_FLOAT * local_11_REFERENCE.x)); // type is FLOAT value type is FLOAT
        var215.x = var221;
        var var222 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@24707f47
        var var228 = (var222.y - (local_2_FLOAT * local_11_REFERENCE.y)); // type is FLOAT value type is FLOAT
        var222.y = var228;
        var local_7_FLOAT = (local_7_FLOAT - (local_4_FLOAT * local_14_FLOAT)); // type is FLOAT value type is FLOAT
        var var235 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@73fc7720
        var var241 = (var235.x + (local_3_FLOAT * local_11_REFERENCE.x)); // type is FLOAT value type is FLOAT
        var235.x = var241;
        var var242 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@73fc7720
        var var248 = (var242.y + (local_3_FLOAT * local_11_REFERENCE.y)); // type is FLOAT value type is FLOAT
        var242.y = var248;
        var local_9_FLOAT = (local_9_FLOAT + (local_5_FLOAT * local_15_FLOAT)); // type is FLOAT value type is FLOAT
        thisRef.pool.VOIDpushVec2INT(thisRef.pool,2);
        var var258 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
        var var259 = local_7_FLOAT; // type is FLOAT value type is FLOAT
        var258.w = var259;
        var var262 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
        var var263 = local_9_FLOAT; // type is FLOAT value type is FLOAT
        var262.w = var263;
        return;
    },

    BOOLEANsolvePositionConstraintsojdSolverData : function(thisRef,data) {
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_11_FLOAT = null; // type is FLOAT # of inits = 1
        var local_10_FLOAT = null; // type is FLOAT # of inits = 1
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_3_FLOAT = null; // type is FLOAT # of inits = 2
        var local_5_FLOAT = null; // type is FLOAT # of inits = 2
        var local_14_FLOAT = null; // type is FLOAT # of inits = 2
        var local_9_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_12_FLOAT = null; // type is FLOAT # of inits = 1
        var local_13_FLOAT = null; // type is FLOAT # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var2 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_2_REFERENCE = var2.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5434971f
            var var7 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_3_FLOAT = var7.a; // type is FLOAT value type is FLOAT
            var var13 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_4_REFERENCE = var13.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@690e3d3a
            var var18 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_5_FLOAT = var18.a; // type is FLOAT value type is FLOAT
            var var23 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4dc8215e
            var local_6_REFERENCE = var23; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@112acfbd
            var var26 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@61d62ee8
            var local_7_REFERENCE = var26; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@79292805
            var var29 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@75e734af
            var local_8_REFERENCE = var29; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@32f74a89
            var var33 = local_6_REFERENCE.ojcRotsetFLOAT(local_6_REFERENCE,local_3_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@62868351
            var var36 = local_7_REFERENCE.ojcRotsetFLOAT(local_7_REFERENCE,local_5_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@52dff604
            var var37 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@112acfbd
            var var40 = local_8_REFERENCE.ojcVec2setojcVec2(local_8_REFERENCE,thisRef.m_localAnchorA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1ed1e2bc
            var var42 = var40.ojcVec2subLocalojcVec2(var40,thisRef.m_localCenterA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@16fa50ed
            ojcRot.VOIDmulToOutojcRotojcVec2ojcVec2(var37,var42,thisRef.rA);
            var var44 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@79292805
            var var47 = local_8_REFERENCE.ojcVec2setojcVec2(local_8_REFERENCE,thisRef.m_localAnchorB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@40b0c568
            var var49 = var47.ojcVec2subLocalojcVec2(var47,thisRef.m_localCenterB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6df264ac
            ojcRot.VOIDmulToOutojcRotojcVec2ojcVec2(var44,var49,thisRef.rB);
            var var53 = thisRef.d.ojcVec2setojcVec2(thisRef.d,local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7c27bfac
            var var55 = var53.ojcVec2subLocalojcVec2(var53,local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@389ee5fd
            var var57 = var55.ojcVec2addLocalojcVec2(var55,thisRef.rB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7e43fc03
            var var59 = var57.ojcVec2subLocalojcVec2(var57,thisRef.rA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@ea2063
            var var61 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@41f1250d
            local_9_REFERENCE = var61; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7da20574
            ojcRot.VOIDmulToOutojcRotojcVec2ojcVec2(local_6_REFERENCE,thisRef.m_localYAxisA,local_9_REFERENCE);
            var var68 = local_8_REFERENCE.ojcVec2setojcVec2(local_8_REFERENCE,thisRef.d); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@e8f81c3
            var var70 = var68.ojcVec2addLocalojcVec2(var68,thisRef.rA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6f4dc7f5
            var var72 = ojcVec2.FLOATcrossojcVec2ojcVec2(var70,local_9_REFERENCE); // type is FLOAT value type is FLOAT
            local_10_FLOAT = var72; // type is FLOAT value type is FLOAT
            var var77 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.rB,local_9_REFERENCE); // type is FLOAT value type is FLOAT
            local_11_FLOAT = var77; // type is FLOAT value type is FLOAT
            var var82 = ojcVec2.FLOATdotojcVec2ojcVec2(thisRef.d,local_9_REFERENCE); // type is FLOAT value type is FLOAT
            local_12_FLOAT = var82; // type is FLOAT value type is FLOAT
            local_13_FLOAT = (((thisRef.m_invMassA + thisRef.m_invMassB) + ((thisRef.m_invIA * thisRef.m_sAy) * thisRef.m_sAy)) + ((thisRef.m_invIB * thisRef.m_sBy) * thisRef.m_sBy)); // type is FLOAT value type is FLOAT
            var var102 = local_13_FLOAT; // type is FLOAT value type is FLOAT
            if ((var102 == 0.0)) {
                __label__ = 306;
                break $S_0;
            }
            __label__ = 295;
            }
        $M_295_306 : for(;;) switch (__label__) {
            case 295 :
            // NORMAL
                local_14_FLOAT = ((-local_12_FLOAT) / local_13_FLOAT); // type is FLOAT value type is FLOAT
                break $M_295_306;
            case 306 :
            // NORMAL
                local_14_FLOAT = 0.0; // type is FLOAT value type is FLOAT
                break $M_295_306;
        }
        $S_309 : {
        // NORMAL
            var var112 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3ef51b47
            var local_15_REFERENCE = var112; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@766488d9
            var var114 = local_15_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@766488d9
            var var118 = (local_14_FLOAT * local_9_REFERENCE.x); // type is FLOAT value type is FLOAT
            var114.x = var118;
            var var119 = local_15_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@766488d9
            var var123 = (local_14_FLOAT * local_9_REFERENCE.y); // type is FLOAT value type is FLOAT
            var119.y = var123;
            var local_16_FLOAT = (local_14_FLOAT * local_10_FLOAT); // type is FLOAT value type is FLOAT
            var local_17_FLOAT = (local_14_FLOAT * local_11_FLOAT); // type is FLOAT value type is FLOAT
            var var134 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7696c6fc
            var var140 = (var134.x - (thisRef.m_invMassA * local_15_REFERENCE.x)); // type is FLOAT value type is FLOAT
            var134.x = var140;
            var var141 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7696c6fc
            var var147 = (var141.y - (thisRef.m_invMassA * local_15_REFERENCE.y)); // type is FLOAT value type is FLOAT
            var141.y = var147;
            local_3_FLOAT = (local_3_FLOAT - (thisRef.m_invIA * local_16_FLOAT)); // type is FLOAT value type is FLOAT
            var var154 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@73b894a0
            var var160 = (var154.x + (thisRef.m_invMassB * local_15_REFERENCE.x)); // type is FLOAT value type is FLOAT
            var154.x = var160;
            var var161 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@73b894a0
            var var167 = (var161.y + (thisRef.m_invMassB * local_15_REFERENCE.y)); // type is FLOAT value type is FLOAT
            var161.y = var167;
            local_5_FLOAT = (local_5_FLOAT + (thisRef.m_invIB * local_17_FLOAT)); // type is FLOAT value type is FLOAT
            thisRef.pool.VOIDpushVec2INT(thisRef.pool,3);
            thisRef.pool.VOIDpushRotINT(thisRef.pool,2);
            var var178 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            var var179 = local_3_FLOAT; // type is FLOAT value type is FLOAT
            var178.a = var179;
            var var182 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            var var183 = local_5_FLOAT; // type is FLOAT value type is FLOAT
            var182.a = var183;
            var var185 = ojcMathUtils.FLOATabsFLOAT(local_12_FLOAT); // type is FLOAT value type is FLOAT
            if ((var185 > 0.005)) {
                __label__ = 522;
                break $S_309;
            }
            __label__ = 518;
            }
        for(;;) switch (__label__) {
            case 518 :
            // NORMAL
                var var187 = 1; // type is INT value type is INT
                return var187;
            case 522 :
            // NORMAL
                var var187 = 0; // type is INT value type is INT
                return var187;
        }
    },

    classInitCheck : function() {
        if (!ojdjWheelJoint.__initialized) {
            ojdjWheelJoint.__initialized = true;
            var thePrototype = ojdjWheelJoint.Create.prototype;
            thePrototype.instanceOf = ojdjWheelJoint.instanceOf;
            thePrototype.ClassgetClass = ojdjWheelJoint.ClassgetClass;
            thePrototype.BOOLEANsolvePositionConstraintsojdSolverData = ojdjWheelJoint.BOOLEANsolvePositionConstraintsojdSolverData;
            thePrototype.VOIDsolveVelocityConstraintsojdSolverData = ojdjWheelJoint.VOIDsolveVelocityConstraintsojdSolverData;
            thePrototype.VOIDinitVelocityConstraintsojdSolverData = ojdjWheelJoint.VOIDinitVelocityConstraintsojdSolverData;
            thePrototype.BOOLEANgetCollideConnected = ojdjJoint.BOOLEANgetCollideConnected;
            thePrototype.ojdBodygetBodyB = ojdjJoint.ojdBodygetBodyB;
            thePrototype.ojdBodygetBodyA = ojdjJoint.ojdBodygetBodyA;
            thePrototype.ojdjJointTypegetType = ojdjJoint.ojdjJointTypegetType;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojdjJoint.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var ojdjWheelJointDef = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 167,
    __implementedTypes : [1,167,149],

    Create : function() {
        this.type = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.userData = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.bodyA = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.bodyB = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.collideConnected = false; // declared in org.jbox2d.dynamics.joints.JointDef
        this.localAnchorA = null; // declared in org.jbox2d.dynamics.joints.WheelJointDef
        this.localAnchorB = null; // declared in org.jbox2d.dynamics.joints.WheelJointDef
        this.localAxisA = null; // declared in org.jbox2d.dynamics.joints.WheelJointDef
        this.maxMotorTorque = 0; // declared in org.jbox2d.dynamics.joints.WheelJointDef
        this.motorSpeed = 0; // declared in org.jbox2d.dynamics.joints.WheelJointDef
        this.enableMotor = false; // declared in org.jbox2d.dynamics.joints.WheelJointDef
        this.frequencyHz = 0; // declared in org.jbox2d.dynamics.joints.WheelJointDef
        this.dampingRatio = 0; // declared in org.jbox2d.dynamics.joints.WheelJointDef
    },

    instanceOf : function(aType) {
        return ojdjWheelJointDef.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdjWheelJointDef;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        ojdjJointDef.VOIDinit(thisRef);
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var0);
        thisRef.localAnchorA = var0;
        var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var1);
        thisRef.localAnchorB = var1;
        var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var2);
        thisRef.localAxisA = var2;
        var var3 = ojdjJointType.WHEEL; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@90936da
        thisRef.type = var3;
        var var5 = thisRef.localAxisA.ojcVec2setFLOATFLOAT(thisRef.localAxisA,1.0,0.0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@73249c76
        thisRef.enableMotor = 0;
        thisRef.maxMotorTorque = 0.0;
        thisRef.motorSpeed = 0.0;
        return;
    },

    classInitCheck : function() {
        if (!ojdjWheelJointDef.__initialized) {
            ojdjWheelJointDef.__initialized = true;
            var thePrototype = ojdjWheelJointDef.Create.prototype;
            thePrototype.instanceOf = ojdjWheelJointDef.instanceOf;
            thePrototype.ClassgetClass = ojdjWheelJointDef.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojdjJointDef.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var ojdjGearJoint = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 168,
    __implementedTypes : [1,117,168],
    $assertionsDisabled : false, // declared in org.jbox2d.dynamics.joints.Joint
    $assertionsDisabled : false, // declared in org.jbox2d.dynamics.joints.GearJoint

    Create : function() {
        this.pool = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_type = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_prev = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_next = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_bodyA = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_bodyB = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_collideConnected = false; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_islandFlag = false; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_userData = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_edgeA = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_edgeB = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_localAnchorA = null; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_localAnchorB = null; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_localAnchorC = null; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_localAnchorD = null; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_localAxisC = null; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_localAxisD = null; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_lcA = null; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_lcB = null; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_lcC = null; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_lcD = null; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_JvAC = null; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_JvBD = null; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_joint1 = null; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_joint2 = null; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_typeA = null; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_typeB = null; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_bodyC = null; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_referenceAngleA = 0; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_bodyD = null; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_referenceAngleB = 0; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_ratio = 0; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_constant = 0; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_impulse = 0; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_indexA = 0; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_indexB = 0; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_indexC = 0; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_indexD = 0; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_mA = 0; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_mB = 0; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_mC = 0; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_mD = 0; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_iA = 0; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_iB = 0; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_iC = 0; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_iD = 0; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_mass = 0; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_JwA = 0; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_JwC = 0; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_JwB = 0; // declared in org.jbox2d.dynamics.joints.GearJoint
        this.m_JwD = 0; // declared in org.jbox2d.dynamics.joints.GearJoint
    },

    instanceOf : function(aType) {
        return ojdjGearJoint.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdjGearJoint;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    ojdjJointcreateojdWorldojdjJointDef : function(p0,p1) {
         return ojdjJoint.ojdjJointcreateojdWorldojdjJointDef(p0,p1);
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdjGearJoint.BOOLEANdesiredAssertionStatus(ojdjGearJoint); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_9_13 : for(;;) switch (__label__) {
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_9_13;
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_9_13;
        }
        ojdjGearJoint.$assertionsDisabled = var1;
        return;
    },

    VOIDinitojpIWorldPoolojdjGearJointDef : function(thisRef,argWorldPool,def) {
        var local_9_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_3_FLOAT = null; // type is FLOAT # of inits = 2
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_7_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_10_FLOAT = null; // type is FLOAT # of inits = 1
        var local_11_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_4_FLOAT = null; // type is FLOAT # of inits = 2
        var local_6_FLOAT = null; // type is FLOAT # of inits = 1
        var local_8_FLOAT = null; // type is FLOAT # of inits = 1
        var local_12_FLOAT = null; // type is FLOAT # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            ojdjJoint.VOIDinitojpIWorldPoolojdjJointDef(thisRef,argWorldPool,def);
            var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var0);
            thisRef.m_localAnchorA = var0;
            var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var1);
            thisRef.m_localAnchorB = var1;
            var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var2);
            thisRef.m_localAnchorC = var2;
            var var3 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var3);
            thisRef.m_localAnchorD = var3;
            var var4 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var4);
            thisRef.m_localAxisC = var4;
            var var5 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var5);
            thisRef.m_localAxisD = var5;
            var var6 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var6);
            thisRef.m_lcA = var6;
            var var7 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var7);
            thisRef.m_lcB = var7;
            var var8 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var8);
            thisRef.m_lcC = var8;
            var var9 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var9);
            thisRef.m_lcD = var9;
            var var10 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var10);
            thisRef.m_JvAC = var10;
            var var11 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var11);
            thisRef.m_JvBD = var11;
            var var12 = def.joint1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@76370f54
            thisRef.m_joint1 = var12;
            var var13 = def.joint2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@64b4cfd8
            thisRef.m_joint2 = var13;
            var var15 = thisRef.m_joint1.ojdjJointTypegetType(thisRef.m_joint1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7294adc9
            thisRef.m_typeA = var15;
            var var17 = thisRef.m_joint2.ojdjJointTypegetType(thisRef.m_joint2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@77988335
            thisRef.m_typeB = var17;
            var var18 = ojdjGearJoint.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var18 != 0)) {
                __label__ = 210;
                break $S_0;
            }
            __label__ = 182;
            }
        $M_182_210 : for(;;) switch (__label__) {
            case 182 :
            // NORMAL
                $S_182 : {
                // NORMAL
                    var var19 = thisRef.m_typeA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@391b7f3d
                    var var20 = ojdjJointType.REVOLUTE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7b13bdc9
                    if ((var19 == var20)) {
                        __label__ = 210;
                        continue $M_182_210;
                    }
                    }
                $S_192 : {
                // NORMAL
                    var var21 = thisRef.m_typeA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2cbebd87
                    var var22 = ojdjJointType.PRISMATIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1f0c020e
                    if ((var21 == var22)) {
                        __label__ = 210;
                        continue $M_182_210;
                    }
                    }
                var var23 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var23);
                throw var23;
            case 210 :
            // NORMAL
                $S_210 : {
                // NORMAL
                    var var24 = ojdjGearJoint.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                    if ((var24 != 0)) {
                        __label__ = 244;
                        break $S_210;
                    }
                    __label__ = 216;
                    }
                $M_216_244 : for(;;) switch (__label__) {
                    case 216 :
                    // NORMAL
                        $S_216 : {
                        // NORMAL
                            var var25 = thisRef.m_typeB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7d0c6445
                            var var26 = ojdjJointType.REVOLUTE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1b9763d8
                            if ((var25 == var26)) {
                                __label__ = 244;
                                continue $M_216_244;
                            }
                            }
                        $S_226 : {
                        // NORMAL
                            var var27 = thisRef.m_typeB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@429cb7a8
                            var var28 = ojdjJointType.PRISMATIC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3d7fd187
                            if ((var27 == var28)) {
                                __label__ = 244;
                                continue $M_216_244;
                            }
                            }
                        var var207 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                        jlAssertionError.VOIDinit(var207);
                        throw var207;
                    case 244 :
                    // NORMAL
                        $S_244 : {
                        // NORMAL
                            var var30 = thisRef.m_joint1.ojdBodygetBodyA(thisRef.m_joint1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@234fa421
                            thisRef.m_bodyC = var30;
                            var var32 = thisRef.m_joint1.ojdBodygetBodyB(thisRef.m_joint1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3669a33
                            thisRef.m_bodyA = var32;
                            local_5_REFERENCE = thisRef.m_bodyA.m_xf; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@24e04c00
                            local_6_FLOAT = thisRef.m_bodyA.m_sweep.a; // type is FLOAT value type is FLOAT
                            local_7_REFERENCE = thisRef.m_bodyC.m_xf; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@675042f2
                            local_8_FLOAT = thisRef.m_bodyC.m_sweep.a; // type is FLOAT value type is FLOAT
                            var var49 = thisRef.m_typeA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@39e09c95
                            var var50 = ojdjJointType.REVOLUTE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@e602e98
                            if ((var49 != var50)) {
                                __label__ = 383;
                                break $S_244;
                            }
                            __label__ = 318;
                            }
                        $M_318_383 : for(;;) switch (__label__) {
                            case 383 :
                            // NORMAL
                                var var72 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2846e318
                                local_9_REFERENCE = var72; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7b126da9
                                var var74 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4d646330
                                var local_10_REFERENCE = var74; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@705d4a3d
                                var var76 = def.joint1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7f46ae40
                                local_11_REFERENCE = var76; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@d33ae04
                                var var81 = thisRef.m_localAnchorC.ojcVec2setojcVec2(thisRef.m_localAnchorC,local_11_REFERENCE.m_localAnchorA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6087cc93
                                var var85 = thisRef.m_localAnchorA.ojcVec2setojcVec2(thisRef.m_localAnchorA,local_11_REFERENCE.m_localAnchorB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@e145e50
                                var var87 = local_11_REFERENCE.m_referenceAngle; // type is FLOAT value type is FLOAT
                                thisRef.m_referenceAngleA = var87;
                                var var91 = thisRef.m_localAxisC.ojcVec2setojcVec2(thisRef.m_localAxisC,local_11_REFERENCE.m_localXAxisA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1402e10d
                                var local_12_REFERENCE = thisRef.m_localAnchorC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5efc6963
                                ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(local_5_REFERENCE.q,thisRef.m_localAnchorA,local_10_REFERENCE);
                                var var101 = local_10_REFERENCE.ojcVec2addLocalojcVec2(local_10_REFERENCE,local_5_REFERENCE.p); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@41d57b
                                var var104 = var101.ojcVec2subLocalojcVec2(var101,local_7_REFERENCE.p); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2c8bedfd
                                ojcRot.VOIDmulTransUnsafeojcRotojcVec2ojcVec2(local_7_REFERENCE.q,local_10_REFERENCE,local_9_REFERENCE);
                                var var111 = local_9_REFERENCE.ojcVec2subLocalojcVec2(local_9_REFERENCE,local_12_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2f026be8
                                var var113 = ojcVec2.FLOATdotojcVec2ojcVec2(var111,thisRef.m_localAxisC); // type is FLOAT value type is FLOAT
                                local_3_FLOAT = var113; // type is FLOAT value type is FLOAT
                                thisRef.pool.VOIDpushVec2INT(thisRef.pool,2);
                                break $M_318_383;
                            case 318 :
                            // NORMAL
                                var var51 = def.joint1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1208b81a
                                local_9_REFERENCE = var51; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2b49a1f1
                                var var56 = thisRef.m_localAnchorC.ojcVec2setojcVec2(thisRef.m_localAnchorC,local_9_REFERENCE.m_localAnchorA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1cec5d2d
                                var var60 = thisRef.m_localAnchorA.ojcVec2setojcVec2(thisRef.m_localAnchorA,local_9_REFERENCE.m_localAnchorB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6f7bbf48
                                var var62 = local_9_REFERENCE.m_referenceAngle; // type is FLOAT value type is FLOAT
                                thisRef.m_referenceAngleA = var62;
                                thisRef.m_localAxisC.VOIDsetZero(thisRef.m_localAxisC);
                                local_3_FLOAT = ((local_6_FLOAT - local_8_FLOAT) - thisRef.m_referenceAngleA); // type is FLOAT value type is FLOAT
                                break $M_318_383;
                        }
                        $S_538 : {
                        // NORMAL
                            var var117 = thisRef.m_joint2.ojdBodygetBodyA(thisRef.m_joint2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@539ac464
                            thisRef.m_bodyD = var117;
                            var var119 = thisRef.m_joint2.ojdBodygetBodyB(thisRef.m_joint2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4057e65
                            thisRef.m_bodyB = var119;
                            local_9_REFERENCE = thisRef.m_bodyB.m_xf; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7a7e5efd
                            local_10_FLOAT = thisRef.m_bodyB.m_sweep.a; // type is FLOAT value type is FLOAT
                            local_11_REFERENCE = thisRef.m_bodyD.m_xf; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@484d3f05
                            local_12_FLOAT = thisRef.m_bodyD.m_sweep.a; // type is FLOAT value type is FLOAT
                            var var134 = thisRef.m_typeB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4df16b8c
                            var var135 = ojdjJointType.REVOLUTE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@62a8c201
                            if ((var134 != var135)) {
                                __label__ = 678;
                                break $S_538;
                            }
                            __label__ = 612;
                            }
                        $M_678_612 : for(;;) switch (__label__) {
                            case 678 :
                            // NORMAL
                                var var137 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6a29e11f
                                var local_13_REFERENCE = var137; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4bbd5e48
                                var var140 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@dd6e1b8
                                var local_14_REFERENCE = var140; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@29ca92c9
                                var var142 = def.joint2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@c4ebff6
                                var local_15_REFERENCE = var142; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2d20ef29
                                var var147 = thisRef.m_localAnchorD.ojcVec2setojcVec2(thisRef.m_localAnchorD,local_15_REFERENCE.m_localAnchorA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@17411014
                                var var151 = thisRef.m_localAnchorB.ojcVec2setojcVec2(thisRef.m_localAnchorB,local_15_REFERENCE.m_localAnchorB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6ae084ef
                                var var153 = local_15_REFERENCE.m_referenceAngle; // type is FLOAT value type is FLOAT
                                thisRef.m_referenceAngleB = var153;
                                var var157 = thisRef.m_localAxisD.ojcVec2setojcVec2(thisRef.m_localAxisD,local_15_REFERENCE.m_localXAxisA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1328374a
                                var local_16_REFERENCE = thisRef.m_localAnchorD; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@395bcba1
                                ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(local_9_REFERENCE.q,thisRef.m_localAnchorB,local_14_REFERENCE);
                                var var167 = local_14_REFERENCE.ojcVec2addLocalojcVec2(local_14_REFERENCE,local_9_REFERENCE.p); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2605bd2e
                                var var170 = var167.ojcVec2subLocalojcVec2(var167,local_11_REFERENCE.p); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@48ac92fd
                                ojcRot.VOIDmulTransUnsafeojcRotojcVec2ojcVec2(local_11_REFERENCE.q,local_14_REFERENCE,local_13_REFERENCE);
                                var var177 = local_13_REFERENCE.ojcVec2subLocalojcVec2(local_13_REFERENCE,local_16_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1a6c7ec5
                                var var179 = ojcVec2.FLOATdotojcVec2ojcVec2(var177,thisRef.m_localAxisD); // type is FLOAT value type is FLOAT
                                local_4_FLOAT = var179; // type is FLOAT value type is FLOAT
                                thisRef.pool.VOIDpushVec2INT(thisRef.pool,2);
                                break $M_678_612;
                            case 612 :
                            // NORMAL
                                var var183 = def.joint2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7d8da8ea
                                var local_13_REFERENCE = var183; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@76ea86b8
                                var var187 = thisRef.m_localAnchorD.ojcVec2setojcVec2(thisRef.m_localAnchorD,local_13_REFERENCE.m_localAnchorA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5a7dd9e2
                                var var191 = thisRef.m_localAnchorB.ojcVec2setojcVec2(thisRef.m_localAnchorB,local_13_REFERENCE.m_localAnchorB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@231e1e3e
                                var var193 = local_13_REFERENCE.m_referenceAngle; // type is FLOAT value type is FLOAT
                                thisRef.m_referenceAngleB = var193;
                                thisRef.m_localAxisD.VOIDsetZero(thisRef.m_localAxisD);
                                local_4_FLOAT = ((local_10_FLOAT - local_12_FLOAT) - thisRef.m_referenceAngleB); // type is FLOAT value type is FLOAT
                                break $M_678_612;
                        }
                        var var201 = def.ratio; // type is FLOAT value type is FLOAT
                        thisRef.m_ratio = var201;
                        var var206 = (local_3_FLOAT + (thisRef.m_ratio * local_4_FLOAT)); // type is FLOAT value type is FLOAT
                        thisRef.m_constant = var206;
                        thisRef.m_impulse = 0.0;
                        return;
                }
        }
    },

    VOIDinitVelocityConstraintsojdSolverData : function(thisRef,data) {
        var local_9_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_17_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_12_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_18_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_7_FLOAT = null; // type is FLOAT # of inits = 2
        var local_13_FLOAT = null; // type is FLOAT # of inits = 2
        var local_16_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_4_FLOAT = null; // type is FLOAT # of inits = 2
        var var273 = null; // type is FLOAT # of inits = 2
        var local_15_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_14_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_10_FLOAT = null; // type is FLOAT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var1 = thisRef.m_bodyA.m_islandIndex; // type is INT value type is INT
            thisRef.m_indexA = var1;
            var var3 = thisRef.m_bodyB.m_islandIndex; // type is INT value type is INT
            thisRef.m_indexB = var3;
            var var5 = thisRef.m_bodyC.m_islandIndex; // type is INT value type is INT
            thisRef.m_indexC = var5;
            var var7 = thisRef.m_bodyD.m_islandIndex; // type is INT value type is INT
            thisRef.m_indexD = var7;
            var var12 = thisRef.m_lcA.ojcVec2setojcVec2(thisRef.m_lcA,thisRef.m_bodyA.m_sweep.localCenter); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4c0819df
            var var17 = thisRef.m_lcB.ojcVec2setojcVec2(thisRef.m_lcB,thisRef.m_bodyB.m_sweep.localCenter); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@28016a5
            var var22 = thisRef.m_lcC.ojcVec2setojcVec2(thisRef.m_lcC,thisRef.m_bodyC.m_sweep.localCenter); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7ed74f0b
            var var27 = thisRef.m_lcD.ojcVec2setojcVec2(thisRef.m_lcD,thisRef.m_bodyD.m_sweep.localCenter); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@70b59904
            var var29 = thisRef.m_bodyA.m_invMass; // type is FLOAT value type is FLOAT
            thisRef.m_mA = var29;
            var var31 = thisRef.m_bodyB.m_invMass; // type is FLOAT value type is FLOAT
            thisRef.m_mB = var31;
            var var33 = thisRef.m_bodyC.m_invMass; // type is FLOAT value type is FLOAT
            thisRef.m_mC = var33;
            var var35 = thisRef.m_bodyD.m_invMass; // type is FLOAT value type is FLOAT
            thisRef.m_mD = var35;
            var var37 = thisRef.m_bodyA.m_invI; // type is FLOAT value type is FLOAT
            thisRef.m_iA = var37;
            var var39 = thisRef.m_bodyB.m_invI; // type is FLOAT value type is FLOAT
            thisRef.m_iB = var39;
            var var41 = thisRef.m_bodyC.m_invI; // type is FLOAT value type is FLOAT
            thisRef.m_iC = var41;
            var var43 = thisRef.m_bodyD.m_invI; // type is FLOAT value type is FLOAT
            thisRef.m_iD = var43;
            var var46 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            var local_2_FLOAT = var46.a; // type is FLOAT value type is FLOAT
            var var52 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_3_REFERENCE = var52.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7c7fb02c
            var var57 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_4_FLOAT = var57.w; // type is FLOAT value type is FLOAT
            var var63 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            var local_5_FLOAT = var63.a; // type is FLOAT value type is FLOAT
            var var69 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_6_REFERENCE = var69.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7ec8b438
            var var74 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_7_FLOAT = var74.w; // type is FLOAT value type is FLOAT
            var var80 = data.positions.data[thisRef.m_indexC]; // type is REFERENCE value type is REFERENCE
            var local_8_FLOAT = var80.a; // type is FLOAT value type is FLOAT
            var var86 = data.velocities.data[thisRef.m_indexC]; // type is REFERENCE value type is REFERENCE
            local_9_REFERENCE = var86.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3aa313fd
            var var91 = data.velocities.data[thisRef.m_indexC]; // type is REFERENCE value type is REFERENCE
            local_10_FLOAT = var91.w; // type is FLOAT value type is FLOAT
            var var97 = data.positions.data[thisRef.m_indexD]; // type is REFERENCE value type is REFERENCE
            var local_11_FLOAT = var97.a; // type is FLOAT value type is FLOAT
            var var103 = data.velocities.data[thisRef.m_indexD]; // type is REFERENCE value type is REFERENCE
            local_12_REFERENCE = var103.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6602d014
            var var108 = data.velocities.data[thisRef.m_indexD]; // type is REFERENCE value type is REFERENCE
            local_13_FLOAT = var108.w; // type is FLOAT value type is FLOAT
            var var113 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@677de228
            local_14_REFERENCE = var113; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7647acb1
            var var116 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5caff38b
            local_15_REFERENCE = var116; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@ff92f3d
            var var119 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7eb12f18
            local_16_REFERENCE = var119; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@46980713
            var var122 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@ec3c2aa
            local_17_REFERENCE = var122; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@595d3c16
            var var126 = local_14_REFERENCE.ojcRotsetFLOAT(local_14_REFERENCE,local_2_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6270df8
            var var129 = local_15_REFERENCE.ojcRotsetFLOAT(local_15_REFERENCE,local_5_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@25b7851c
            var var132 = local_16_REFERENCE.ojcRotsetFLOAT(local_16_REFERENCE,local_8_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5209a75d
            var var135 = local_17_REFERENCE.ojcRotsetFLOAT(local_17_REFERENCE,local_11_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@42cfe924
            thisRef.m_mass = 0.0;
            var var137 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7c396448
            local_18_REFERENCE = var137; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@123431a8
            var var139 = thisRef.m_typeA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@653f81b6
            var var140 = ojdjJointType.REVOLUTE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7a13f103
            if ((var139 != var140)) {
                __label__ = 509;
                break $S_0;
            }
            __label__ = 471;
            }
        $M_509_471 : for(;;) switch (__label__) {
            case 471 :
            // NORMAL
                thisRef.m_JvAC.VOIDsetZero(thisRef.m_JvAC);
                thisRef.m_JwA = 1.0;
                thisRef.m_JwC = 1.0;
                var var193 = (thisRef.m_mass + (thisRef.m_iA + thisRef.m_iC)); // type is FLOAT value type is FLOAT
                thisRef.m_mass = var193;
                break $M_509_471;
            case 509 :
            // NORMAL
                var var142 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@47a8b1ac
                var local_19_REFERENCE = var142; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@70848635
                var var145 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@692f8ba2
                var local_20_REFERENCE = var145; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@c51e46d
                ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(local_16_REFERENCE,thisRef.m_localAxisC,thisRef.m_JvAC);
                var var150 = local_16_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@46980713
                var var153 = local_18_REFERENCE.ojcVec2setojcVec2(local_18_REFERENCE,thisRef.m_localAnchorC); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@e76119a
                var var155 = var153.ojcVec2subLocalojcVec2(var153,thisRef.m_lcC); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5a978b4f
                ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var150,var155,local_19_REFERENCE);
                var var157 = local_14_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7647acb1
                var var160 = local_18_REFERENCE.ojcVec2setojcVec2(local_18_REFERENCE,thisRef.m_localAnchorA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4f706924
                var var162 = var160.ojcVec2subLocalojcVec2(var160,thisRef.m_lcA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4c818e2b
                ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var157,var162,local_20_REFERENCE);
                var var166 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_19_REFERENCE,thisRef.m_JvAC); // type is FLOAT value type is FLOAT
                thisRef.m_JwC = var166;
                var var169 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_20_REFERENCE,thisRef.m_JvAC); // type is FLOAT value type is FLOAT
                thisRef.m_JwA = var169;
                var var186 = (thisRef.m_mass + (((thisRef.m_mC + thisRef.m_mA) + ((thisRef.m_iC * thisRef.m_JwC) * thisRef.m_JwC)) + ((thisRef.m_iA * thisRef.m_JwA) * thisRef.m_JwA))); // type is FLOAT value type is FLOAT
                thisRef.m_mass = var186;
                thisRef.pool.VOIDpushVec2INT(thisRef.pool,2);
                break $M_509_471;
        }
        $S_674 : {
        // NORMAL
            var var194 = thisRef.m_typeB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@72c5bce0
            var var195 = ojdjJointType.REVOLUTE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@14ee9c04
            if ((var194 != var195)) {
                __label__ = 738;
                break $S_674;
            }
            __label__ = 684;
            }
        $M_738_684 : for(;;) switch (__label__) {
            case 738 :
            // NORMAL
                var var197 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@589beef4
                var local_19_REFERENCE = var197; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@182bc31a
                var var199 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@47d65e43
                var local_20_REFERENCE = var199; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@27b8f401
                var var201 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@20d3424c
                var local_21_REFERENCE = var201; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@66a6665f
                ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(local_17_REFERENCE,thisRef.m_localAxisD,local_19_REFERENCE);
                var var206 = local_17_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@595d3c16
                var var209 = local_18_REFERENCE.ojcVec2setojcVec2(local_18_REFERENCE,thisRef.m_localAnchorD); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@13f7088e
                var var211 = var209.ojcVec2subLocalojcVec2(var209,thisRef.m_lcD); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@738fee0d
                ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var206,var211,local_20_REFERENCE);
                var var213 = local_15_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@ff92f3d
                var var216 = local_18_REFERENCE.ojcVec2setojcVec2(local_18_REFERENCE,thisRef.m_localAnchorB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@49f40312
                var var218 = var216.ojcVec2subLocalojcVec2(var216,thisRef.m_lcB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1c3510ed
                ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var213,var218,local_21_REFERENCE);
                var var222 = thisRef.m_JvBD.ojcVec2setojcVec2(thisRef.m_JvBD,local_19_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@372dc89d
                var var224 = var222.ojcVec2mulLocalFLOAT(var222,thisRef.m_ratio); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3bdeb7f3
                var var225 = thisRef.m_ratio; // type is FLOAT value type is FLOAT
                var var228 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_20_REFERENCE,local_19_REFERENCE); // type is FLOAT value type is FLOAT
                var var229 = (var225 * var228); // type is FLOAT value type is FLOAT
                thisRef.m_JwD = var229;
                var var230 = thisRef.m_ratio; // type is FLOAT value type is FLOAT
                var var233 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_21_REFERENCE,local_19_REFERENCE); // type is FLOAT value type is FLOAT
                var var234 = (var230 * var233); // type is FLOAT value type is FLOAT
                thisRef.m_JwB = var234;
                var var255 = (thisRef.m_mass + ((((thisRef.m_ratio * thisRef.m_ratio) * (thisRef.m_mD + thisRef.m_mB)) + ((thisRef.m_iD * thisRef.m_JwD) * thisRef.m_JwD)) + ((thisRef.m_iB * thisRef.m_JwB) * thisRef.m_JwB))); // type is FLOAT value type is FLOAT
                thisRef.m_mass = var255;
                thisRef.pool.VOIDpushVec2INT(thisRef.pool,3);
                break $M_738_684;
            case 684 :
            // NORMAL
                thisRef.m_JvBD.VOIDsetZero(thisRef.m_JvBD);
                var var258 = thisRef.m_ratio; // type is FLOAT value type is FLOAT
                thisRef.m_JwB = var258;
                var var259 = thisRef.m_ratio; // type is FLOAT value type is FLOAT
                thisRef.m_JwD = var259;
                var var268 = (thisRef.m_mass + ((thisRef.m_ratio * thisRef.m_ratio) * (thisRef.m_iB + thisRef.m_iD))); // type is FLOAT value type is FLOAT
                thisRef.m_mass = var268;
                break $M_738_684;
        }
        $S_945 : {
        // NORMAL
            var var269 = thisRef.m_mass; // type is FLOAT value type is FLOAT
            if ((var269 <= 0.0)) {
                __label__ = 964;
                break $S_945;
            }
            __label__ = 955;
            }
        $M_964_955 : for(;;) switch (__label__) {
            case 955 :
            // NORMAL
                var273 = (1.0 / thisRef.m_mass); // type is FLOAT value type is FLOAT
                break $M_964_955;
            case 964 :
            // NORMAL
                var273 = 0.0; // type is FLOAT value type is FLOAT
                break $M_964_955;
        }
        $S_965 : {
        // NORMAL
            thisRef.m_mass = var273;
            var var275 = data.step.warmStarting; // type is BOOLEAN value type is BOOLEAN
            if ((var275 == 0)) {
                __label__ = 1271;
                break $S_965;
            }
            __label__ = 978;
            }
        $M_1271_978 : for(;;) switch (__label__) {
            case 1271 :
            // NORMAL
                thisRef.m_impulse = 0.0;
                break $M_1271_978;
            case 978 :
            // NORMAL
                var var276 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5901081c
                var var284 = (var276.x + ((thisRef.m_mA * thisRef.m_impulse) * thisRef.m_JvAC.x)); // type is FLOAT value type is FLOAT
                var276.x = var284;
                var var285 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5901081c
                var var293 = (var285.y + ((thisRef.m_mA * thisRef.m_impulse) * thisRef.m_JvAC.y)); // type is FLOAT value type is FLOAT
                var285.y = var293;
                local_4_FLOAT = (local_4_FLOAT + ((thisRef.m_iA * thisRef.m_impulse) * thisRef.m_JwA)); // type is FLOAT value type is FLOAT
                var var302 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6493ba8e
                var var310 = (var302.x + ((thisRef.m_mB * thisRef.m_impulse) * thisRef.m_JvBD.x)); // type is FLOAT value type is FLOAT
                var302.x = var310;
                var var311 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6493ba8e
                var var319 = (var311.y + ((thisRef.m_mB * thisRef.m_impulse) * thisRef.m_JvBD.y)); // type is FLOAT value type is FLOAT
                var311.y = var319;
                local_7_FLOAT = (local_7_FLOAT + ((thisRef.m_iB * thisRef.m_impulse) * thisRef.m_JwB)); // type is FLOAT value type is FLOAT
                var var328 = local_9_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@79a611c0
                var var336 = (var328.x - ((thisRef.m_mC * thisRef.m_impulse) * thisRef.m_JvAC.x)); // type is FLOAT value type is FLOAT
                var328.x = var336;
                var var337 = local_9_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@79a611c0
                var var345 = (var337.y - ((thisRef.m_mC * thisRef.m_impulse) * thisRef.m_JvAC.y)); // type is FLOAT value type is FLOAT
                var337.y = var345;
                local_10_FLOAT = (local_10_FLOAT - ((thisRef.m_iC * thisRef.m_impulse) * thisRef.m_JwC)); // type is FLOAT value type is FLOAT
                var var354 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@275701af
                var var362 = (var354.x - ((thisRef.m_mD * thisRef.m_impulse) * thisRef.m_JvBD.x)); // type is FLOAT value type is FLOAT
                var354.x = var362;
                var var363 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@275701af
                var var371 = (var363.y - ((thisRef.m_mD * thisRef.m_impulse) * thisRef.m_JvBD.y)); // type is FLOAT value type is FLOAT
                var363.y = var371;
                local_13_FLOAT = (local_13_FLOAT - ((thisRef.m_iD * thisRef.m_impulse) * thisRef.m_JwD)); // type is FLOAT value type is FLOAT
                break $M_1271_978;
        }
        thisRef.pool.VOIDpushVec2INT(thisRef.pool,1);
        thisRef.pool.VOIDpushRotINT(thisRef.pool,4);
        var var384 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
        var var385 = local_4_FLOAT; // type is FLOAT value type is FLOAT
        var384.w = var385;
        var var388 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
        var var389 = local_7_FLOAT; // type is FLOAT value type is FLOAT
        var388.w = var389;
        var var392 = data.velocities.data[thisRef.m_indexC]; // type is REFERENCE value type is REFERENCE
        var var393 = local_10_FLOAT; // type is FLOAT value type is FLOAT
        var392.w = var393;
        var var396 = data.velocities.data[thisRef.m_indexD]; // type is REFERENCE value type is REFERENCE
        var var397 = local_13_FLOAT; // type is FLOAT value type is FLOAT
        var396.w = var397;
        return;
    },

    VOIDsolveVelocityConstraintsojdSolverData : function(thisRef,data) {
        var __label__ = null;
        var var2 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
        var local_2_REFERENCE = var2.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@565e0a41
        var var7 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
        var local_3_FLOAT = var7.w; // type is FLOAT value type is FLOAT
        var var13 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
        var local_4_REFERENCE = var13.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@8ebd6f2
        var var18 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
        var local_5_FLOAT = var18.w; // type is FLOAT value type is FLOAT
        var var24 = data.velocities.data[thisRef.m_indexC]; // type is REFERENCE value type is REFERENCE
        var local_6_REFERENCE = var24.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@65c15bfb
        var var29 = data.velocities.data[thisRef.m_indexC]; // type is REFERENCE value type is REFERENCE
        var local_7_FLOAT = var29.w; // type is FLOAT value type is FLOAT
        var var35 = data.velocities.data[thisRef.m_indexD]; // type is REFERENCE value type is REFERENCE
        var local_8_REFERENCE = var35.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6ae752bd
        var var40 = data.velocities.data[thisRef.m_indexD]; // type is REFERENCE value type is REFERENCE
        var local_9_FLOAT = var40.w; // type is FLOAT value type is FLOAT
        var var45 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4ccd51a2
        var local_10_REFERENCE = var45; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1a47428f
        var var48 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@75b6ccbf
        var local_11_REFERENCE = var48; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@25940a0e
        var var50 = thisRef.m_JvAC; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3f20f5f
        var var53 = local_10_REFERENCE.ojcVec2setojcVec2(local_10_REFERENCE,local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@23016694
        var var55 = var53.ojcVec2subLocalojcVec2(var53,local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6011957f
        var var56 = ojcVec2.FLOATdotojcVec2ojcVec2(var50,var55); // type is FLOAT value type is FLOAT
        var var57 = thisRef.m_JvBD; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@65502709
        var var60 = local_11_REFERENCE.ojcVec2setojcVec2(local_11_REFERENCE,local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@764b440b
        var var62 = var60.ojcVec2subLocalojcVec2(var60,local_8_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5ed6b990
        var var63 = ojcVec2.FLOATdotojcVec2ojcVec2(var57,var62); // type is FLOAT value type is FLOAT
        var local_12_FLOAT = (var56 + var63); // type is FLOAT value type is FLOAT
        var local_12_FLOAT = (local_12_FLOAT + (((thisRef.m_JwA * local_3_FLOAT) - (thisRef.m_JwC * local_7_FLOAT)) + ((thisRef.m_JwB * local_5_FLOAT) - (thisRef.m_JwD * local_9_FLOAT)))); // type is FLOAT value type is FLOAT
        thisRef.pool.VOIDpushVec2INT(thisRef.pool,2);
        var local_13_FLOAT = ((-thisRef.m_mass) * local_12_FLOAT); // type is FLOAT value type is FLOAT
        var var94 = (thisRef.m_impulse + local_13_FLOAT); // type is FLOAT value type is FLOAT
        thisRef.m_impulse = var94;
        var var95 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@32807558
        var var103 = (var95.x + ((thisRef.m_mA * local_13_FLOAT) * thisRef.m_JvAC.x)); // type is FLOAT value type is FLOAT
        var95.x = var103;
        var var104 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@32807558
        var var112 = (var104.y + ((thisRef.m_mA * local_13_FLOAT) * thisRef.m_JvAC.y)); // type is FLOAT value type is FLOAT
        var104.y = var112;
        var local_3_FLOAT = (local_3_FLOAT + ((thisRef.m_iA * local_13_FLOAT) * thisRef.m_JwA)); // type is FLOAT value type is FLOAT
        var var121 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@568c746e
        var var129 = (var121.x + ((thisRef.m_mB * local_13_FLOAT) * thisRef.m_JvBD.x)); // type is FLOAT value type is FLOAT
        var121.x = var129;
        var var130 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@568c746e
        var var138 = (var130.y + ((thisRef.m_mB * local_13_FLOAT) * thisRef.m_JvBD.y)); // type is FLOAT value type is FLOAT
        var130.y = var138;
        var local_5_FLOAT = (local_5_FLOAT + ((thisRef.m_iB * local_13_FLOAT) * thisRef.m_JwB)); // type is FLOAT value type is FLOAT
        var var147 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7acb09a8
        var var155 = (var147.x - ((thisRef.m_mC * local_13_FLOAT) * thisRef.m_JvAC.x)); // type is FLOAT value type is FLOAT
        var147.x = var155;
        var var156 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7acb09a8
        var var164 = (var156.y - ((thisRef.m_mC * local_13_FLOAT) * thisRef.m_JvAC.y)); // type is FLOAT value type is FLOAT
        var156.y = var164;
        var local_7_FLOAT = (local_7_FLOAT - ((thisRef.m_iC * local_13_FLOAT) * thisRef.m_JwC)); // type is FLOAT value type is FLOAT
        var var173 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@11ba2558
        var var181 = (var173.x - ((thisRef.m_mD * local_13_FLOAT) * thisRef.m_JvBD.x)); // type is FLOAT value type is FLOAT
        var173.x = var181;
        var var182 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@11ba2558
        var var190 = (var182.y - ((thisRef.m_mD * local_13_FLOAT) * thisRef.m_JvBD.y)); // type is FLOAT value type is FLOAT
        var182.y = var190;
        var local_9_FLOAT = (local_9_FLOAT - ((thisRef.m_iD * local_13_FLOAT) * thisRef.m_JwD)); // type is FLOAT value type is FLOAT
        var var201 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
        var var202 = local_3_FLOAT; // type is FLOAT value type is FLOAT
        var201.w = var202;
        var var205 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
        var var206 = local_5_FLOAT; // type is FLOAT value type is FLOAT
        var205.w = var206;
        var var209 = data.velocities.data[thisRef.m_indexC]; // type is REFERENCE value type is REFERENCE
        var var210 = local_7_FLOAT; // type is FLOAT value type is FLOAT
        var209.w = var210;
        var var213 = data.velocities.data[thisRef.m_indexD]; // type is REFERENCE value type is REFERENCE
        var var214 = local_9_FLOAT; // type is FLOAT value type is FLOAT
        var213.w = var214;
        return;
    },

    BOOLEANsolvePositionConstraintsojdSolverData : function(thisRef,data) {
        var local_9_FLOAT = null; // type is FLOAT # of inits = 2
        var local_26_FLOAT = null; // type is FLOAT # of inits = 2
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_15_FLOAT = null; // type is FLOAT # of inits = 2
        var local_13_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_18_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_19_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_3_FLOAT = null; // type is FLOAT # of inits = 2
        var local_20_FLOAT = null; // type is FLOAT # of inits = 2
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_17_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_10_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_7_FLOAT = null; // type is FLOAT # of inits = 2
        var local_21_FLOAT = null; // type is FLOAT # of inits = 2
        var local_22_FLOAT = null; // type is FLOAT # of inits = 2
        var local_16_FLOAT = null; // type is FLOAT # of inits = 2
        var local_11_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_12_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_5_FLOAT = null; // type is FLOAT # of inits = 2
        var local_25_FLOAT = null; // type is FLOAT # of inits = 1
        var local_23_FLOAT = null; // type is FLOAT # of inits = 2
        var local_24_FLOAT = null; // type is FLOAT # of inits = 5
        var local_14_FLOAT = null; // type is FLOAT # of inits = 1
        var local_8_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var2 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_2_REFERENCE = var2.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3f874661
            var var7 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_3_FLOAT = var7.a; // type is FLOAT value type is FLOAT
            var var13 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_4_REFERENCE = var13.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6898f7a4
            var var18 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_5_FLOAT = var18.a; // type is FLOAT value type is FLOAT
            var var24 = data.positions.data[thisRef.m_indexC]; // type is REFERENCE value type is REFERENCE
            local_6_REFERENCE = var24.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@233484a1
            var var29 = data.positions.data[thisRef.m_indexC]; // type is REFERENCE value type is REFERENCE
            local_7_FLOAT = var29.a; // type is FLOAT value type is FLOAT
            var var35 = data.positions.data[thisRef.m_indexD]; // type is REFERENCE value type is REFERENCE
            local_8_REFERENCE = var35.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7d2e8b14
            var var40 = data.positions.data[thisRef.m_indexD]; // type is REFERENCE value type is REFERENCE
            local_9_FLOAT = var40.a; // type is FLOAT value type is FLOAT
            var var45 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@781f6e9e
            local_10_REFERENCE = var45; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1cabf0df
            var var48 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@571593ee
            local_11_REFERENCE = var48; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@24cc8670
            var var51 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@50830421
            local_12_REFERENCE = var51; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@15ba0eac
            var var54 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@597c430e
            local_13_REFERENCE = var54; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5fc3c8aa
            var var58 = local_10_REFERENCE.ojcRotsetFLOAT(local_10_REFERENCE,local_3_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5a94bd21
            var var61 = local_11_REFERENCE.ojcRotsetFLOAT(local_11_REFERENCE,local_5_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@21e5cf7e
            var var64 = local_12_REFERENCE.ojcRotsetFLOAT(local_12_REFERENCE,local_7_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@698f656f
            var var67 = local_13_REFERENCE.ojcRotsetFLOAT(local_13_REFERENCE,local_9_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@52502f63
            local_14_FLOAT = 0.0; // type is FLOAT value type is FLOAT
            var var71 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2d52edbd
            local_17_REFERENCE = var71; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1cadf685
            var var74 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@22c34956
            local_18_REFERENCE = var74; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5c121c66
            var var77 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@30f5f47c
            local_19_REFERENCE = var77; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1998a626
            local_24_FLOAT = 0.0; // type is FLOAT value type is FLOAT
            var var81 = thisRef.m_typeA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@630dfe36
            var var82 = ojdjJointType.REVOLUTE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5988c8ef
            if ((var81 != var82)) {
                __label__ = 273;
                break $S_0;
            }
            __label__ = 234;
            }
        $M_234_273 : for(;;) switch (__label__) {
            case 273 :
            // NORMAL
                var var102 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6139a371
                var local_25_REFERENCE = var102; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7e70fd3e
                var var105 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@72805088
                var local_26_REFERENCE = var105; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6dd03187
                var var108 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@41de3567
                var local_27_REFERENCE = var108; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@383ea96f
                var var111 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@48cabaf0
                var local_28_REFERENCE = var111; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@247af667
                ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(local_12_REFERENCE,thisRef.m_localAxisC,local_18_REFERENCE);
                var var116 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@15ba0eac
                var var119 = local_17_REFERENCE.ojcVec2setojcVec2(local_17_REFERENCE,thisRef.m_localAnchorC); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@14bf8a82
                var var121 = var119.ojcVec2subLocalojcVec2(var119,thisRef.m_lcC); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@59073cab
                ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var116,var121,local_25_REFERENCE);
                var var123 = local_10_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1cabf0df
                var var126 = local_17_REFERENCE.ojcVec2setojcVec2(local_17_REFERENCE,thisRef.m_localAnchorA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@44871041
                var var128 = var126.ojcVec2subLocalojcVec2(var126,thisRef.m_lcA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@37bd0f78
                ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var123,var128,local_26_REFERENCE);
                var var132 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_25_REFERENCE,local_18_REFERENCE); // type is FLOAT value type is FLOAT
                local_22_FLOAT = var132; // type is FLOAT value type is FLOAT
                var var136 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_26_REFERENCE,local_18_REFERENCE); // type is FLOAT value type is FLOAT
                local_20_FLOAT = var136; // type is FLOAT value type is FLOAT
                local_24_FLOAT = (local_24_FLOAT + (((thisRef.m_mC + thisRef.m_mA) + ((thisRef.m_iC * local_22_FLOAT) * local_22_FLOAT)) + ((thisRef.m_iA * local_20_FLOAT) * local_20_FLOAT))); // type is FLOAT value type is FLOAT
                var var158 = local_27_REFERENCE.ojcVec2setojcVec2(local_27_REFERENCE,thisRef.m_localAnchorC); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5f3e7897
                var var160 = var158.ojcVec2subLocalojcVec2(var158,thisRef.m_lcC); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3fbcf5bf
                var var161 = local_12_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@15ba0eac
                var var164 = local_17_REFERENCE.ojcVec2setojcVec2(local_17_REFERENCE,local_26_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4345ef11
                var var166 = var164.ojcVec2addLocalojcVec2(var164,local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1c5cfece
                var var168 = var166.ojcVec2subLocalojcVec2(var166,local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@300ac712
                ojcRot.VOIDmulTransUnsafeojcRotojcVec2ojcVec2(var161,var168,local_28_REFERENCE);
                var var172 = local_28_REFERENCE.ojcVec2subLocalojcVec2(local_28_REFERENCE,local_27_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@68c3cda1
                var var174 = ojcVec2.FLOATdotojcVec2ojcVec2(var172,thisRef.m_localAxisC); // type is FLOAT value type is FLOAT
                local_15_FLOAT = var174; // type is FLOAT value type is FLOAT
                thisRef.pool.VOIDpushVec2INT(thisRef.pool,4);
                break $M_234_273;
            case 234 :
            // NORMAL
                local_18_REFERENCE.VOIDsetZero(local_18_REFERENCE);
                local_20_FLOAT = 1.0; // type is FLOAT value type is FLOAT
                local_22_FLOAT = 1.0; // type is FLOAT value type is FLOAT
                local_24_FLOAT = (local_24_FLOAT + (thisRef.m_iA + thisRef.m_iC)); // type is FLOAT value type is FLOAT
                local_15_FLOAT = ((local_3_FLOAT - local_7_FLOAT) - thisRef.m_referenceAngleA); // type is FLOAT value type is FLOAT
                break $M_234_273;
        }
        $S_494 : {
        // NORMAL
            var var177 = thisRef.m_typeB; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4129acf
            var var178 = ojdjJointType.REVOLUTE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7f43ae0d
            if ((var177 != var178)) {
                __label__ = 560;
                break $S_494;
            }
            __label__ = 504;
            }
        $M_560_504 : for(;;) switch (__label__) {
            case 504 :
            // NORMAL
                local_19_REFERENCE.VOIDsetZero(local_19_REFERENCE);
                local_21_FLOAT = thisRef.m_ratio; // type is FLOAT value type is FLOAT
                local_23_FLOAT = thisRef.m_ratio; // type is FLOAT value type is FLOAT
                local_24_FLOAT = (local_24_FLOAT + ((thisRef.m_ratio * thisRef.m_ratio) * (thisRef.m_iB + thisRef.m_iD))); // type is FLOAT value type is FLOAT
                local_16_FLOAT = ((local_5_FLOAT - local_9_FLOAT) - thisRef.m_referenceAngleB); // type is FLOAT value type is FLOAT
                break $M_560_504;
            case 560 :
            // NORMAL
                var var180 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1997c4a0
                var local_25_REFERENCE = var180; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6f4fbcf6
                var var182 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7f9b8732
                var local_26_REFERENCE = var182; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1dca6d0a
                var var184 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3a5f08d7
                var local_27_REFERENCE = var184; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2865bb66
                var var186 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@be40b4f
                var local_28_REFERENCE = var186; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@45889504
                var var188 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7d324d2
                var local_29_REFERENCE = var188; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@26801c5
                ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(local_13_REFERENCE,thisRef.m_localAxisD,local_25_REFERENCE);
                var var193 = local_13_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5fc3c8aa
                var var196 = local_17_REFERENCE.ojcVec2setojcVec2(local_17_REFERENCE,thisRef.m_localAnchorD); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@29fddcb4
                var var198 = var196.ojcVec2subLocalojcVec2(var196,thisRef.m_lcD); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@285c5c3a
                ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var193,var198,local_26_REFERENCE);
                var var200 = local_11_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@24cc8670
                var var203 = local_17_REFERENCE.ojcVec2setojcVec2(local_17_REFERENCE,thisRef.m_localAnchorB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@36b71857
                var var205 = var203.ojcVec2subLocalojcVec2(var203,thisRef.m_lcB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7413516d
                ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var200,var205,local_27_REFERENCE);
                var var209 = local_19_REFERENCE.ojcVec2setojcVec2(local_19_REFERENCE,local_25_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@334c2b27
                var var211 = var209.ojcVec2mulLocalFLOAT(var209,thisRef.m_ratio); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@793b0cf8
                var var214 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_26_REFERENCE,local_25_REFERENCE); // type is FLOAT value type is FLOAT
                local_23_FLOAT = var214; // type is FLOAT value type is FLOAT
                var var219 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_27_REFERENCE,local_25_REFERENCE); // type is FLOAT value type is FLOAT
                local_21_FLOAT = var219; // type is FLOAT value type is FLOAT
                local_24_FLOAT = (local_24_FLOAT + ((((thisRef.m_ratio * thisRef.m_ratio) * (thisRef.m_mD + thisRef.m_mB)) + ((thisRef.m_iD * local_23_FLOAT) * local_23_FLOAT)) + ((thisRef.m_iB * local_21_FLOAT) * local_21_FLOAT))); // type is FLOAT value type is FLOAT
                var var246 = local_28_REFERENCE.ojcVec2setojcVec2(local_28_REFERENCE,thisRef.m_localAnchorD); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@77c0d628
                var var248 = var246.ojcVec2subLocalojcVec2(var246,thisRef.m_lcD); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@19366984
                var var249 = local_13_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5fc3c8aa
                var var252 = local_17_REFERENCE.ojcVec2setojcVec2(local_17_REFERENCE,local_27_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4bf17c96
                var var254 = var252.ojcVec2addLocalojcVec2(var252,local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6a0ce5dc
                var var256 = var254.ojcVec2subLocalojcVec2(var254,local_8_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1b8c1f23
                ojcRot.VOIDmulTransUnsafeojcRotojcVec2ojcVec2(var249,var256,local_29_REFERENCE);
                var var260 = local_29_REFERENCE.ojcVec2subLocalojcVec2(local_29_REFERENCE,local_28_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@31dc2f9f
                var var262 = ojcVec2.FLOATdotojcVec2ojcVec2(var260,thisRef.m_localAxisD); // type is FLOAT value type is FLOAT
                local_16_FLOAT = var262; // type is FLOAT value type is FLOAT
                thisRef.pool.VOIDpushVec2INT(thisRef.pool,5);
                break $M_560_504;
        }
        $S_818 : {
        // NORMAL
            local_25_FLOAT = ((local_15_FLOAT + (thisRef.m_ratio * local_16_FLOAT)) - thisRef.m_constant); // type is FLOAT value type is FLOAT
            local_26_FLOAT = 0.0; // type is FLOAT value type is FLOAT
            var var298 = local_24_FLOAT; // type is FLOAT value type is FLOAT
            if ((var298 <= 0.0)) {
                __label__ = 853;
                break $S_818;
            }
            __label__ = 845;
            }
        $M_845_853 : for(;;) switch (__label__) {
            case 853 :
            // NORMAL
                $S_853 : {
                // NORMAL
                    thisRef.pool.VOIDpushVec2INT(thisRef.pool,3);
                    thisRef.pool.VOIDpushRotINT(thisRef.pool,4);
                    var var307 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@28b69101
                    var var315 = (var307.x + ((thisRef.m_mA * local_26_FLOAT) * local_18_REFERENCE.x)); // type is FLOAT value type is FLOAT
                    var307.x = var315;
                    var var316 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@28b69101
                    var var324 = (var316.y + ((thisRef.m_mA * local_26_FLOAT) * local_18_REFERENCE.y)); // type is FLOAT value type is FLOAT
                    var316.y = var324;
                    local_3_FLOAT = (local_3_FLOAT + ((thisRef.m_iA * local_26_FLOAT) * local_20_FLOAT)); // type is FLOAT value type is FLOAT
                    var var333 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@450faa10
                    var var341 = (var333.x + ((thisRef.m_mB * local_26_FLOAT) * local_19_REFERENCE.x)); // type is FLOAT value type is FLOAT
                    var333.x = var341;
                    var var342 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@450faa10
                    var var350 = (var342.y + ((thisRef.m_mB * local_26_FLOAT) * local_19_REFERENCE.y)); // type is FLOAT value type is FLOAT
                    var342.y = var350;
                    local_5_FLOAT = (local_5_FLOAT + ((thisRef.m_iB * local_26_FLOAT) * local_21_FLOAT)); // type is FLOAT value type is FLOAT
                    var var359 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@481f3b0e
                    var var367 = (var359.x - ((thisRef.m_mC * local_26_FLOAT) * local_18_REFERENCE.x)); // type is FLOAT value type is FLOAT
                    var359.x = var367;
                    var var368 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@481f3b0e
                    var var376 = (var368.y - ((thisRef.m_mC * local_26_FLOAT) * local_18_REFERENCE.y)); // type is FLOAT value type is FLOAT
                    var368.y = var376;
                    local_7_FLOAT = (local_7_FLOAT - ((thisRef.m_iC * local_26_FLOAT) * local_22_FLOAT)); // type is FLOAT value type is FLOAT
                    var var385 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@895756
                    var var393 = (var385.x - ((thisRef.m_mD * local_26_FLOAT) * local_19_REFERENCE.x)); // type is FLOAT value type is FLOAT
                    var385.x = var393;
                    var var394 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@895756
                    var var402 = (var394.y - ((thisRef.m_mD * local_26_FLOAT) * local_19_REFERENCE.y)); // type is FLOAT value type is FLOAT
                    var394.y = var402;
                    local_9_FLOAT = (local_9_FLOAT - ((thisRef.m_iD * local_26_FLOAT) * local_23_FLOAT)); // type is FLOAT value type is FLOAT
                    var var413 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
                    var var414 = local_3_FLOAT; // type is FLOAT value type is FLOAT
                    var413.a = var414;
                    var var417 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
                    var var418 = local_5_FLOAT; // type is FLOAT value type is FLOAT
                    var417.a = var418;
                    var var421 = data.positions.data[thisRef.m_indexC]; // type is REFERENCE value type is REFERENCE
                    var var422 = local_7_FLOAT; // type is FLOAT value type is FLOAT
                    var421.a = var422;
                    var var425 = data.positions.data[thisRef.m_indexD]; // type is REFERENCE value type is REFERENCE
                    var var426 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                    var425.a = var426;
                    var var427 = local_14_FLOAT; // type is FLOAT value type is FLOAT
                    if ((var427 >= 0.005)) {
                        __label__ = 1180;
                        break $S_853;
                    }
                    __label__ = 1176;
                    }
                for(;;) switch (__label__) {
                    case 1176 :
                    // NORMAL
                        var var429 = 1; // type is INT value type is INT
                        return var429;
                    case 1180 :
                    // NORMAL
                        var var429 = 0; // type is INT value type is INT
                        return var429;
                }
            case 845 :
            // NORMAL
                local_26_FLOAT = ((-local_25_FLOAT) / local_24_FLOAT); // type is FLOAT value type is FLOAT
                __label__ = 853;
                continue $M_845_853;
        }
    },

    classInitCheck : function() {
        if (!ojdjGearJoint.__initialized) {
            ojdjGearJoint.__initialized = true;
            var thePrototype = ojdjGearJoint.Create.prototype;
            thePrototype.instanceOf = ojdjGearJoint.instanceOf;
            thePrototype.ClassgetClass = ojdjGearJoint.ClassgetClass;
            thePrototype.BOOLEANsolvePositionConstraintsojdSolverData = ojdjGearJoint.BOOLEANsolvePositionConstraintsojdSolverData;
            thePrototype.VOIDsolveVelocityConstraintsojdSolverData = ojdjGearJoint.VOIDsolveVelocityConstraintsojdSolverData;
            thePrototype.VOIDinitVelocityConstraintsojdSolverData = ojdjGearJoint.VOIDinitVelocityConstraintsojdSolverData;
            thePrototype.BOOLEANgetCollideConnected = ojdjJoint.BOOLEANgetCollideConnected;
            thePrototype.ojdBodygetBodyB = ojdjJoint.ojdBodygetBodyB;
            thePrototype.ojdBodygetBodyA = ojdjJoint.ojdBodygetBodyA;
            thePrototype.ojdjJointTypegetType = ojdjJoint.ojdjJointTypegetType;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojdjJoint.classInitCheck();
            jlObject.classInitCheck();
            ojdjGearJoint.VOIDclinit();
        }
    },

};

var ojdjGearJointDef = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 169,
    __implementedTypes : [1,169,149],

    Create : function() {
        this.type = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.userData = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.bodyA = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.bodyB = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.collideConnected = false; // declared in org.jbox2d.dynamics.joints.JointDef
        this.joint1 = null; // declared in org.jbox2d.dynamics.joints.GearJointDef
        this.joint2 = null; // declared in org.jbox2d.dynamics.joints.GearJointDef
        this.ratio = 0; // declared in org.jbox2d.dynamics.joints.GearJointDef
    },

    instanceOf : function(aType) {
        return ojdjGearJointDef.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdjGearJointDef;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        ojdjJointDef.VOIDinit(thisRef);
        var var0 = ojdjJointType.GEAR; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@69e8570e
        thisRef.type = var0;
        thisRef.joint1 = null;
        thisRef.joint2 = null;
        return;
    },

    classInitCheck : function() {
        if (!ojdjGearJointDef.__initialized) {
            ojdjGearJointDef.__initialized = true;
            var thePrototype = ojdjGearJointDef.Create.prototype;
            thePrototype.instanceOf = ojdjGearJointDef.instanceOf;
            thePrototype.ClassgetClass = ojdjGearJointDef.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojdjJointDef.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var ojdjPulleyJoint = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 170,
    __implementedTypes : [1,170,117],
    $assertionsDisabled : false, // declared in org.jbox2d.dynamics.joints.Joint
    $assertionsDisabled : false, // declared in org.jbox2d.dynamics.joints.PulleyJoint

    Create : function() {
        this.pool = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_type = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_prev = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_next = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_bodyA = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_bodyB = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_collideConnected = false; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_islandFlag = false; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_userData = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_edgeA = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_edgeB = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_groundAnchorA = null; // declared in org.jbox2d.dynamics.joints.PulleyJoint
        this.m_groundAnchorB = null; // declared in org.jbox2d.dynamics.joints.PulleyJoint
        this.m_localAnchorA = null; // declared in org.jbox2d.dynamics.joints.PulleyJoint
        this.m_localAnchorB = null; // declared in org.jbox2d.dynamics.joints.PulleyJoint
        this.m_uA = null; // declared in org.jbox2d.dynamics.joints.PulleyJoint
        this.m_uB = null; // declared in org.jbox2d.dynamics.joints.PulleyJoint
        this.m_rA = null; // declared in org.jbox2d.dynamics.joints.PulleyJoint
        this.m_rB = null; // declared in org.jbox2d.dynamics.joints.PulleyJoint
        this.m_localCenterA = null; // declared in org.jbox2d.dynamics.joints.PulleyJoint
        this.m_localCenterB = null; // declared in org.jbox2d.dynamics.joints.PulleyJoint
        this.m_ratio = 0; // declared in org.jbox2d.dynamics.joints.PulleyJoint
        this.m_lengthA = 0; // declared in org.jbox2d.dynamics.joints.PulleyJoint
        this.m_lengthB = 0; // declared in org.jbox2d.dynamics.joints.PulleyJoint
        this.m_constant = 0; // declared in org.jbox2d.dynamics.joints.PulleyJoint
        this.m_impulse = 0; // declared in org.jbox2d.dynamics.joints.PulleyJoint
        this.m_indexA = 0; // declared in org.jbox2d.dynamics.joints.PulleyJoint
        this.m_indexB = 0; // declared in org.jbox2d.dynamics.joints.PulleyJoint
        this.m_invMassA = 0; // declared in org.jbox2d.dynamics.joints.PulleyJoint
        this.m_invMassB = 0; // declared in org.jbox2d.dynamics.joints.PulleyJoint
        this.m_invIA = 0; // declared in org.jbox2d.dynamics.joints.PulleyJoint
        this.m_invIB = 0; // declared in org.jbox2d.dynamics.joints.PulleyJoint
        this.m_mass = 0; // declared in org.jbox2d.dynamics.joints.PulleyJoint
    },

    instanceOf : function(aType) {
        return ojdjPulleyJoint.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdjPulleyJoint;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    ojdjJointcreateojdWorldojdjJointDef : function(p0,p1) {
         return ojdjJoint.ojdjJointcreateojdWorldojdjJointDef(p0,p1);
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdjPulleyJoint.BOOLEANdesiredAssertionStatus(ojdjPulleyJoint); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_13_9 : for(;;) switch (__label__) {
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_13_9;
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_13_9;
        }
        ojdjPulleyJoint.$assertionsDisabled = var1;
        return;
    },

    VOIDinitojpIWorldPoolojdjPulleyJointDef : function(thisRef,argWorldPool,def) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            ojdjJoint.VOIDinitojpIWorldPoolojdjJointDef(thisRef,argWorldPool,def);
            var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var0);
            thisRef.m_groundAnchorA = var0;
            var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var1);
            thisRef.m_groundAnchorB = var1;
            var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var2);
            thisRef.m_localAnchorA = var2;
            var var3 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var3);
            thisRef.m_localAnchorB = var3;
            var var4 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var4);
            thisRef.m_uA = var4;
            var var5 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var5);
            thisRef.m_uB = var5;
            var var6 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var6);
            thisRef.m_rA = var6;
            var var7 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var7);
            thisRef.m_rB = var7;
            var var8 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var8);
            thisRef.m_localCenterA = var8;
            var var9 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
            ojcVec2.VOIDinit(var9);
            thisRef.m_localCenterB = var9;
            var var12 = thisRef.m_groundAnchorA.ojcVec2setojcVec2(thisRef.m_groundAnchorA,def.groundAnchorA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@27348ceb
            var var15 = thisRef.m_groundAnchorB.ojcVec2setojcVec2(thisRef.m_groundAnchorB,def.groundAnchorB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@71da6685
            var var18 = thisRef.m_localAnchorA.ojcVec2setojcVec2(thisRef.m_localAnchorA,def.localAnchorA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@17ea3088
            var var21 = thisRef.m_localAnchorB.ojcVec2setojcVec2(thisRef.m_localAnchorB,def.localAnchorB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6c006f73
            var var22 = ojdjPulleyJoint.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var22 != 0)) {
                __label__ = 187;
                break $S_0;
            }
            __label__ = 170;
            }
        $M_187_170 : for(;;) switch (__label__) {
            case 170 :
            // NORMAL
                $S_170 : {
                // NORMAL
                    var var23 = def.ratio; // type is FLOAT value type is FLOAT
                    if ((var23 != 0.0)) {
                        __label__ = 187;
                        continue $M_187_170;
                    }
                    }
                var var25 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var25);
                throw var25;
            case 187 :
            // NORMAL
                var var26 = def.ratio; // type is FLOAT value type is FLOAT
                thisRef.m_ratio = var26;
                var var27 = def.lengthA; // type is FLOAT value type is FLOAT
                thisRef.m_lengthA = var27;
                var var28 = def.lengthB; // type is FLOAT value type is FLOAT
                thisRef.m_lengthB = var28;
                var var33 = (def.lengthA + (thisRef.m_ratio * def.lengthB)); // type is FLOAT value type is FLOAT
                thisRef.m_constant = var33;
                thisRef.m_impulse = 0.0;
                return;
        }
    },

    VOIDinitVelocityConstraintsojdSolverData : function(thisRef,data) {
        var local_14_FLOAT = null; // type is FLOAT # of inits = 1
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_5_FLOAT = null; // type is FLOAT # of inits = 2
        var local_8_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_9_FLOAT = null; // type is FLOAT # of inits = 2
        var local_13_FLOAT = null; // type is FLOAT # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var1 = thisRef.m_bodyA.m_islandIndex; // type is INT value type is INT
            thisRef.m_indexA = var1;
            var var3 = thisRef.m_bodyB.m_islandIndex; // type is INT value type is INT
            thisRef.m_indexB = var3;
            var var8 = thisRef.m_localCenterA.ojcVec2setojcVec2(thisRef.m_localCenterA,thisRef.m_bodyA.m_sweep.localCenter); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@32ab65cb
            var var13 = thisRef.m_localCenterB.ojcVec2setojcVec2(thisRef.m_localCenterB,thisRef.m_bodyB.m_sweep.localCenter); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6610949b
            var var15 = thisRef.m_bodyA.m_invMass; // type is FLOAT value type is FLOAT
            thisRef.m_invMassA = var15;
            var var17 = thisRef.m_bodyB.m_invMass; // type is FLOAT value type is FLOAT
            thisRef.m_invMassB = var17;
            var var19 = thisRef.m_bodyA.m_invI; // type is FLOAT value type is FLOAT
            thisRef.m_invIA = var19;
            var var21 = thisRef.m_bodyB.m_invI; // type is FLOAT value type is FLOAT
            thisRef.m_invIB = var21;
            var var24 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            var local_2_REFERENCE = var24.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@29d898b0
            var var29 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            var local_3_FLOAT = var29.a; // type is FLOAT value type is FLOAT
            var var35 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_4_REFERENCE = var35.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4252367a
            var var40 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_5_FLOAT = var40.w; // type is FLOAT value type is FLOAT
            var var46 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            var local_6_REFERENCE = var46.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2b3e96c6
            var var51 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            var local_7_FLOAT = var51.a; // type is FLOAT value type is FLOAT
            var var57 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_8_REFERENCE = var57.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@49686b76
            var var62 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_9_FLOAT = var62.w; // type is FLOAT value type is FLOAT
            var var67 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@249877f3
            var local_10_REFERENCE = var67; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@772a74fc
            var var70 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@287d5479
            var local_11_REFERENCE = var70; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@22c4a9db
            var var73 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4504659f
            var local_12_REFERENCE = var73; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@61ad6457
            var var77 = local_10_REFERENCE.ojcRotsetFLOAT(local_10_REFERENCE,local_3_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@23313a87
            var var80 = local_11_REFERENCE.ojcRotsetFLOAT(local_11_REFERENCE,local_7_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@24bcd54b
            var var81 = local_10_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@772a74fc
            var var84 = local_12_REFERENCE.ojcVec2setojcVec2(local_12_REFERENCE,thisRef.m_localAnchorA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@427274de
            var var86 = var84.ojcVec2subLocalojcVec2(var84,thisRef.m_localCenterA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@48772f1b
            ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var81,var86,thisRef.m_rA);
            var var88 = local_11_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@22c4a9db
            var var91 = local_12_REFERENCE.ojcVec2setojcVec2(local_12_REFERENCE,thisRef.m_localAnchorB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@62b8d190
            var var93 = var91.ojcVec2subLocalojcVec2(var91,thisRef.m_localCenterB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@20ec5601
            ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var88,var93,thisRef.m_rB);
            var var97 = thisRef.m_uA.ojcVec2setojcVec2(thisRef.m_uA,local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@71e91246
            var var99 = var97.ojcVec2addLocalojcVec2(var97,thisRef.m_rA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@97e497
            var var101 = var99.ojcVec2subLocalojcVec2(var99,thisRef.m_groundAnchorA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@24878144
            var var104 = thisRef.m_uB.ojcVec2setojcVec2(thisRef.m_uB,local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6619878b
            var var106 = var104.ojcVec2addLocalojcVec2(var104,thisRef.m_rB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5f5bc22c
            var var108 = var106.ojcVec2subLocalojcVec2(var106,thisRef.m_groundAnchorB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6057360c
            var var110 = thisRef.m_uA.FLOATlength(thisRef.m_uA); // type is FLOAT value type is FLOAT
            local_13_FLOAT = var110; // type is FLOAT value type is FLOAT
            var var114 = thisRef.m_uB.FLOATlength(thisRef.m_uB); // type is FLOAT value type is FLOAT
            local_14_FLOAT = var114; // type is FLOAT value type is FLOAT
            var var117 = local_13_FLOAT; // type is FLOAT value type is FLOAT
            if ((var117 <= 0.049999997)) {
                __label__ = 398;
                break $S_0;
            }
            __label__ = 383;
            }
        $M_383_398 : for(;;) switch (__label__) {
            case 398 :
            // NORMAL
                thisRef.m_uA.VOIDsetZero(thisRef.m_uA);
                break $M_383_398;
            case 383 :
            // NORMAL
                var var122 = thisRef.m_uA.ojcVec2mulLocalFLOAT(thisRef.m_uA,(1.0 / local_13_FLOAT)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@78c216e3
                break $M_383_398;
        }
        $S_405 : {
        // NORMAL
            var var124 = local_14_FLOAT; // type is FLOAT value type is FLOAT
            if ((var124 <= 0.049999997)) {
                __label__ = 428;
                break $S_405;
            }
            __label__ = 413;
            }
        $M_428_413 : for(;;) switch (__label__) {
            case 428 :
            // NORMAL
                thisRef.m_uB.VOIDsetZero(thisRef.m_uB);
                break $M_428_413;
            case 413 :
            // NORMAL
                var var130 = thisRef.m_uB.ojcVec2mulLocalFLOAT(thisRef.m_uB,(1.0 / local_14_FLOAT)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@52cde3af
                break $M_428_413;
        }
        $S_435 : {
        // NORMAL
            var var133 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.m_rA,thisRef.m_uA); // type is FLOAT value type is FLOAT
            var local_15_FLOAT = var133; // type is FLOAT value type is FLOAT
            var var138 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.m_rB,thisRef.m_uB); // type is FLOAT value type is FLOAT
            var local_16_FLOAT = var138; // type is FLOAT value type is FLOAT
            var local_17_FLOAT = (thisRef.m_invMassA + ((thisRef.m_invIA * local_15_FLOAT) * local_15_FLOAT)); // type is FLOAT value type is FLOAT
            var local_18_FLOAT = (thisRef.m_invMassB + ((thisRef.m_invIB * local_16_FLOAT) * local_16_FLOAT)); // type is FLOAT value type is FLOAT
            var var165 = (local_17_FLOAT + ((thisRef.m_ratio * thisRef.m_ratio) * local_18_FLOAT)); // type is FLOAT value type is FLOAT
            thisRef.m_mass = var165;
            var var166 = thisRef.m_mass; // type is FLOAT value type is FLOAT
            if ((var166 <= 0.0)) {
                __label__ = 533;
                break $S_435;
            }
            __label__ = 523;
            }
        $M_533_523 : for(;;) switch (__label__) {
            case 533 :
            // NORMAL
                $S_533 : {
                // NORMAL
                    var var171 = data.step.warmStarting; // type is BOOLEAN value type is BOOLEAN
                    if ((var171 == 0)) {
                        __label__ = 753;
                        break $S_533;
                    }
                    __label__ = 543;
                    }
                $M_543_753 : for(;;) switch (__label__) {
                    case 753 :
                    // NORMAL
                        thisRef.m_impulse = 0.0;
                        break $M_543_753;
                    case 543 :
                    // NORMAL
                        var var175 = (thisRef.m_impulse * data.step.dtRatio); // type is FLOAT value type is FLOAT
                        thisRef.m_impulse = var175;
                        var var177 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@53860178
                        var local_19_REFERENCE = var177; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@ab8ba52
                        var var180 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@62a5d0e8
                        var local_20_REFERENCE = var180; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5f488788
                        var var184 = local_19_REFERENCE.ojcVec2setojcVec2(local_19_REFERENCE,thisRef.m_uA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3ca6d0d8
                        var var187 = var184.ojcVec2mulLocalFLOAT(var184,(-thisRef.m_impulse)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@73838734
                        var var190 = local_20_REFERENCE.ojcVec2setojcVec2(local_20_REFERENCE,thisRef.m_uB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3f6d2b3c
                        var var195 = var190.ojcVec2mulLocalFLOAT(var190,((-thisRef.m_ratio) * thisRef.m_impulse)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@24829f9e
                        var var196 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@32894c16
                        var var202 = (var196.x + (thisRef.m_invMassA * local_19_REFERENCE.x)); // type is FLOAT value type is FLOAT
                        var196.x = var202;
                        var var203 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@32894c16
                        var var209 = (var203.y + (thisRef.m_invMassA * local_19_REFERENCE.y)); // type is FLOAT value type is FLOAT
                        var203.y = var209;
                        var var210 = local_5_FLOAT; // type is FLOAT value type is FLOAT
                        var var211 = thisRef.m_invIA; // type is FLOAT value type is FLOAT
                        var var214 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.m_rA,local_19_REFERENCE); // type is FLOAT value type is FLOAT
                        local_5_FLOAT = (var210 + (var211 * var214)); // type is FLOAT value type is FLOAT
                        var var218 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4f10c117
                        var var224 = (var218.x + (thisRef.m_invMassB * local_20_REFERENCE.x)); // type is FLOAT value type is FLOAT
                        var218.x = var224;
                        var var225 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4f10c117
                        var var231 = (var225.y + (thisRef.m_invMassB * local_20_REFERENCE.y)); // type is FLOAT value type is FLOAT
                        var225.y = var231;
                        var var232 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                        var var233 = thisRef.m_invIB; // type is FLOAT value type is FLOAT
                        var var236 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.m_rB,local_20_REFERENCE); // type is FLOAT value type is FLOAT
                        local_9_FLOAT = (var232 + (var233 * var236)); // type is FLOAT value type is FLOAT
                        thisRef.pool.VOIDpushVec2INT(thisRef.pool,2);
                        break $M_543_753;
                }
                var var243 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
                var var244 = local_5_FLOAT; // type is FLOAT value type is FLOAT
                var243.w = var244;
                var var247 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
                var var248 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                var247.w = var248;
                thisRef.pool.VOIDpushVec2INT(thisRef.pool,1);
                thisRef.pool.VOIDpushRotINT(thisRef.pool,2);
                return;
            case 523 :
            // NORMAL
                var var169 = (1.0 / thisRef.m_mass); // type is FLOAT value type is FLOAT
                thisRef.m_mass = var169;
                __label__ = 533;
                continue $M_533_523;
        }
    },

    VOIDsolveVelocityConstraintsojdSolverData : function(thisRef,data) {
        var __label__ = null;
        var var2 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
        var local_2_REFERENCE = var2.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@711960d5
        var var7 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
        var local_3_FLOAT = var7.w; // type is FLOAT value type is FLOAT
        var var13 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
        var local_4_REFERENCE = var13.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@591451b8
        var var18 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
        var local_5_FLOAT = var18.w; // type is FLOAT value type is FLOAT
        var var23 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@71ac6024
        var local_6_REFERENCE = var23; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@24254005
        var var26 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1e80939c
        var local_7_REFERENCE = var26; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@65628865
        var var29 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@77dd79ad
        var local_8_REFERENCE = var29; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@79f62a3b
        var var32 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@63705aea
        var local_9_REFERENCE = var32; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@12a0d741
        ojcVec2.VOIDcrossToOutUnsafeFLOATojcVec2ojcVec2(local_3_FLOAT,thisRef.m_rA,local_6_REFERENCE);
        var var39 = local_6_REFERENCE.ojcVec2addLocalojcVec2(local_6_REFERENCE,local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@eacc4a9
        ojcVec2.VOIDcrossToOutUnsafeFLOATojcVec2ojcVec2(local_5_FLOAT,thisRef.m_rB,local_7_REFERENCE);
        var var45 = local_7_REFERENCE.ojcVec2addLocalojcVec2(local_7_REFERENCE,local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@464380b5
        var var48 = ojcVec2.FLOATdotojcVec2ojcVec2(thisRef.m_uA,local_6_REFERENCE); // type is FLOAT value type is FLOAT
        var var49 = (-var48); // type is FLOAT value type is FLOAT
        var var50 = thisRef.m_ratio; // type is FLOAT value type is FLOAT
        var var53 = ojcVec2.FLOATdotojcVec2ojcVec2(thisRef.m_uB,local_7_REFERENCE); // type is FLOAT value type is FLOAT
        var local_10_FLOAT = (var49 - (var50 * var53)); // type is FLOAT value type is FLOAT
        var local_11_FLOAT = ((-thisRef.m_mass) * local_10_FLOAT); // type is FLOAT value type is FLOAT
        var var66 = (thisRef.m_impulse + local_11_FLOAT); // type is FLOAT value type is FLOAT
        thisRef.m_impulse = var66;
        var var69 = local_8_REFERENCE.ojcVec2setojcVec2(local_8_REFERENCE,thisRef.m_uA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2705359d
        var var72 = var69.ojcVec2mulLocalFLOAT(var69,(-local_11_FLOAT)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@338bf4e3
        var var75 = local_9_REFERENCE.ojcVec2setojcVec2(local_9_REFERENCE,thisRef.m_uB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5beae7b7
        var var80 = var75.ojcVec2mulLocalFLOAT(var75,((-thisRef.m_ratio) * local_11_FLOAT)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1768257
        var var81 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@fd1e639
        var var87 = (var81.x + (thisRef.m_invMassA * local_8_REFERENCE.x)); // type is FLOAT value type is FLOAT
        var81.x = var87;
        var var88 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@fd1e639
        var var94 = (var88.y + (thisRef.m_invMassA * local_8_REFERENCE.y)); // type is FLOAT value type is FLOAT
        var88.y = var94;
        var var95 = local_3_FLOAT; // type is FLOAT value type is FLOAT
        var var96 = thisRef.m_invIA; // type is FLOAT value type is FLOAT
        var var99 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.m_rA,local_8_REFERENCE); // type is FLOAT value type is FLOAT
        var local_3_FLOAT = (var95 + (var96 * var99)); // type is FLOAT value type is FLOAT
        var var103 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@631137cc
        var var109 = (var103.x + (thisRef.m_invMassB * local_9_REFERENCE.x)); // type is FLOAT value type is FLOAT
        var103.x = var109;
        var var110 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@631137cc
        var var116 = (var110.y + (thisRef.m_invMassB * local_9_REFERENCE.y)); // type is FLOAT value type is FLOAT
        var110.y = var116;
        var var117 = local_5_FLOAT; // type is FLOAT value type is FLOAT
        var var118 = thisRef.m_invIB; // type is FLOAT value type is FLOAT
        var var121 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.m_rB,local_9_REFERENCE); // type is FLOAT value type is FLOAT
        var local_5_FLOAT = (var117 + (var118 * var121)); // type is FLOAT value type is FLOAT
        var var127 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
        var var128 = local_3_FLOAT; // type is FLOAT value type is FLOAT
        var127.w = var128;
        var var131 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
        var var132 = local_5_FLOAT; // type is FLOAT value type is FLOAT
        var131.w = var132;
        thisRef.pool.VOIDpushVec2INT(thisRef.pool,4);
        return;
    },

    BOOLEANsolvePositionConstraintsojdSolverData : function(thisRef,data) {
        var local_9_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_14_FLOAT = null; // type is FLOAT # of inits = 2
        var local_15_FLOAT = null; // type is FLOAT # of inits = 1
        var local_13_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_7_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_11_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_10_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_16_FLOAT = null; // type is FLOAT # of inits = 1
        var local_12_FLOAT = null; // type is FLOAT # of inits = 2
        var local_21_FLOAT = null; // type is FLOAT # of inits = 2
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var1 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6d308167
            var local_2_REFERENCE = var1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@609ad135
            var var4 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1cca510b
            var local_3_REFERENCE = var4; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1c9069a5
            var var7 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@75c2f8e9
            local_4_REFERENCE = var7; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7dcbe5e8
            var var10 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@43e78c1d
            local_5_REFERENCE = var10; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3743a19e
            var var13 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@debdf63
            local_6_REFERENCE = var13; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3812f7eb
            var var16 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1229523a
            local_7_REFERENCE = var16; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6b050a05
            var var19 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@70cef526
            var local_8_REFERENCE = var19; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@fb61846
            var var22 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5c75de14
            local_9_REFERENCE = var22; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@49c35628
            var var25 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@415ef22
            local_10_REFERENCE = var25; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@632651df
            var var29 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_11_REFERENCE = var29.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3755d43
            var var34 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_12_FLOAT = var34.a; // type is FLOAT value type is FLOAT
            var var40 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_13_REFERENCE = var40.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3c3e1143
            var var45 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_14_FLOAT = var45.a; // type is FLOAT value type is FLOAT
            var var51 = local_2_REFERENCE.ojcRotsetFLOAT(local_2_REFERENCE,local_12_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4e49fdae
            var var54 = local_3_REFERENCE.ojcRotsetFLOAT(local_3_REFERENCE,local_14_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@650e67ba
            var var55 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@609ad135
            var var58 = local_8_REFERENCE.ojcVec2setojcVec2(local_8_REFERENCE,thisRef.m_localAnchorA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4cb8b11d
            var var60 = var58.ojcVec2subLocalojcVec2(var58,thisRef.m_localCenterA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4005c0
            ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var55,var60,local_4_REFERENCE);
            var var62 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1c9069a5
            var var65 = local_8_REFERENCE.ojcVec2setojcVec2(local_8_REFERENCE,thisRef.m_localAnchorB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1e52ceb
            var var67 = var65.ojcVec2subLocalojcVec2(var65,thisRef.m_localCenterB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@17c0a8da
            ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var62,var67,local_5_REFERENCE);
            var var71 = local_6_REFERENCE.ojcVec2setojcVec2(local_6_REFERENCE,local_11_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1e79c366
            var var73 = var71.ojcVec2addLocalojcVec2(var71,local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1e17bb6c
            var var75 = var73.ojcVec2subLocalojcVec2(var73,thisRef.m_groundAnchorA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@36bd5e31
            var var78 = local_7_REFERENCE.ojcVec2setojcVec2(local_7_REFERENCE,local_13_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2429b644
            var var80 = var78.ojcVec2addLocalojcVec2(var78,local_5_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@741b3354
            var var82 = var80.ojcVec2subLocalojcVec2(var80,thisRef.m_groundAnchorB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@57f43a60
            var var84 = local_6_REFERENCE.FLOATlength(local_6_REFERENCE); // type is FLOAT value type is FLOAT
            local_15_FLOAT = var84; // type is FLOAT value type is FLOAT
            var var88 = local_7_REFERENCE.FLOATlength(local_7_REFERENCE); // type is FLOAT value type is FLOAT
            local_16_FLOAT = var88; // type is FLOAT value type is FLOAT
            var var91 = local_15_FLOAT; // type is FLOAT value type is FLOAT
            if ((var91 <= 0.049999997)) {
                __label__ = 286;
                break $S_0;
            }
            __label__ = 273;
            }
        $M_286_273 : for(;;) switch (__label__) {
            case 273 :
            // NORMAL
                var var97 = local_6_REFERENCE.ojcVec2mulLocalFLOAT(local_6_REFERENCE,(1.0 / local_15_FLOAT)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@be4ba79
                break $M_286_273;
            case 286 :
            // NORMAL
                local_6_REFERENCE.VOIDsetZero(local_6_REFERENCE);
                break $M_286_273;
        }
        $S_291 : {
        // NORMAL
            var var98 = local_16_FLOAT; // type is FLOAT value type is FLOAT
            if ((var98 <= 0.049999997)) {
                __label__ = 312;
                break $S_291;
            }
            __label__ = 299;
            }
        $M_312_299 : for(;;) switch (__label__) {
            case 299 :
            // NORMAL
                var var104 = local_7_REFERENCE.ojcVec2mulLocalFLOAT(local_7_REFERENCE,(1.0 / local_16_FLOAT)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6296a6d7
                break $M_312_299;
            case 312 :
            // NORMAL
                local_7_REFERENCE.VOIDsetZero(local_7_REFERENCE);
                break $M_312_299;
        }
        $S_317 : {
        // NORMAL
            var var107 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_4_REFERENCE,local_6_REFERENCE); // type is FLOAT value type is FLOAT
            var local_17_FLOAT = var107; // type is FLOAT value type is FLOAT
            var var112 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_5_REFERENCE,local_7_REFERENCE); // type is FLOAT value type is FLOAT
            var local_18_FLOAT = var112; // type is FLOAT value type is FLOAT
            var local_19_FLOAT = (thisRef.m_invMassA + ((thisRef.m_invIA * local_17_FLOAT) * local_17_FLOAT)); // type is FLOAT value type is FLOAT
            var local_20_FLOAT = (thisRef.m_invMassB + ((thisRef.m_invIB * local_18_FLOAT) * local_18_FLOAT)); // type is FLOAT value type is FLOAT
            local_21_FLOAT = (local_19_FLOAT + ((thisRef.m_ratio * thisRef.m_ratio) * local_20_FLOAT)); // type is FLOAT value type is FLOAT
            var var142 = local_21_FLOAT; // type is FLOAT value type is FLOAT
            if ((var142 <= 0.0)) {
                __label__ = 399;
                break $S_317;
            }
            __label__ = 393;
            }
        $M_393_399 : for(;;) switch (__label__) {
            case 399 :
            // NORMAL
                $S_399 : {
                // NORMAL
                    var local_22_FLOAT = ((thisRef.m_constant - local_15_FLOAT) - (thisRef.m_ratio * local_16_FLOAT)); // type is FLOAT value type is FLOAT
                    var var157 = ojcMathUtils.FLOATabsFLOAT(local_22_FLOAT); // type is FLOAT value type is FLOAT
                    var local_23_FLOAT = var157; // type is FLOAT value type is FLOAT
                    var local_24_FLOAT = ((-local_21_FLOAT) * local_22_FLOAT); // type is FLOAT value type is FLOAT
                    var var168 = local_9_REFERENCE.ojcVec2setojcVec2(local_9_REFERENCE,local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4f3ab842
                    var var171 = var168.ojcVec2mulLocalFLOAT(var168,(-local_24_FLOAT)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@396bacff
                    var var174 = local_10_REFERENCE.ojcVec2setojcVec2(local_10_REFERENCE,local_7_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@17f2eed9
                    var var179 = var174.ojcVec2mulLocalFLOAT(var174,((-thisRef.m_ratio) * local_24_FLOAT)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@408542ee
                    var var180 = local_11_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4c245fff
                    var var186 = (var180.x + (thisRef.m_invMassA * local_9_REFERENCE.x)); // type is FLOAT value type is FLOAT
                    var180.x = var186;
                    var var187 = local_11_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4c245fff
                    var var193 = (var187.y + (thisRef.m_invMassA * local_9_REFERENCE.y)); // type is FLOAT value type is FLOAT
                    var187.y = var193;
                    var var194 = local_12_FLOAT; // type is FLOAT value type is FLOAT
                    var var195 = thisRef.m_invIA; // type is FLOAT value type is FLOAT
                    var var198 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_4_REFERENCE,local_9_REFERENCE); // type is FLOAT value type is FLOAT
                    local_12_FLOAT = (var194 + (var195 * var198)); // type is FLOAT value type is FLOAT
                    var var202 = local_13_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@fb2315c
                    var var208 = (var202.x + (thisRef.m_invMassB * local_10_REFERENCE.x)); // type is FLOAT value type is FLOAT
                    var202.x = var208;
                    var var209 = local_13_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@fb2315c
                    var var215 = (var209.y + (thisRef.m_invMassB * local_10_REFERENCE.y)); // type is FLOAT value type is FLOAT
                    var209.y = var215;
                    var var216 = local_14_FLOAT; // type is FLOAT value type is FLOAT
                    var var217 = thisRef.m_invIB; // type is FLOAT value type is FLOAT
                    var var220 = ojcVec2.FLOATcrossojcVec2ojcVec2(local_5_REFERENCE,local_10_REFERENCE); // type is FLOAT value type is FLOAT
                    local_14_FLOAT = (var216 + (var217 * var220)); // type is FLOAT value type is FLOAT
                    var var226 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
                    var var227 = local_12_FLOAT; // type is FLOAT value type is FLOAT
                    var226.a = var227;
                    var var230 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
                    var var231 = local_14_FLOAT; // type is FLOAT value type is FLOAT
                    var230.a = var231;
                    thisRef.pool.VOIDpushRotINT(thisRef.pool,2);
                    thisRef.pool.VOIDpushVec2INT(thisRef.pool,7);
                    var var234 = local_23_FLOAT; // type is FLOAT value type is FLOAT
                    if ((var234 >= 0.005)) {
                        __label__ = 639;
                        break $S_399;
                    }
                    __label__ = 635;
                    }
                for(;;) switch (__label__) {
                    case 635 :
                    // NORMAL
                        var var236 = 1; // type is INT value type is INT
                        return var236;
                    case 639 :
                    // NORMAL
                        var var236 = 0; // type is INT value type is INT
                        return var236;
                }
            case 393 :
            // NORMAL
                local_21_FLOAT = (1.0 / local_21_FLOAT); // type is FLOAT value type is FLOAT
                __label__ = 399;
                continue $M_393_399;
        }
    },

    classInitCheck : function() {
        if (!ojdjPulleyJoint.__initialized) {
            ojdjPulleyJoint.__initialized = true;
            var thePrototype = ojdjPulleyJoint.Create.prototype;
            thePrototype.instanceOf = ojdjPulleyJoint.instanceOf;
            thePrototype.ClassgetClass = ojdjPulleyJoint.ClassgetClass;
            thePrototype.BOOLEANsolvePositionConstraintsojdSolverData = ojdjPulleyJoint.BOOLEANsolvePositionConstraintsojdSolverData;
            thePrototype.VOIDsolveVelocityConstraintsojdSolverData = ojdjPulleyJoint.VOIDsolveVelocityConstraintsojdSolverData;
            thePrototype.VOIDinitVelocityConstraintsojdSolverData = ojdjPulleyJoint.VOIDinitVelocityConstraintsojdSolverData;
            thePrototype.BOOLEANgetCollideConnected = ojdjJoint.BOOLEANgetCollideConnected;
            thePrototype.ojdBodygetBodyB = ojdjJoint.ojdBodygetBodyB;
            thePrototype.ojdBodygetBodyA = ojdjJoint.ojdBodygetBodyA;
            thePrototype.ojdjJointTypegetType = ojdjJoint.ojdjJointTypegetType;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojdjJoint.classInitCheck();
            jlObject.classInitCheck();
            ojdjPulleyJoint.VOIDclinit();
        }
    },

};

var ojdjPulleyJointDef = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 171,
    __implementedTypes : [1,171,149],
    $assertionsDisabled : false, // declared in org.jbox2d.dynamics.joints.PulleyJointDef

    Create : function() {
        this.type = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.userData = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.bodyA = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.bodyB = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.collideConnected = false; // declared in org.jbox2d.dynamics.joints.JointDef
        this.groundAnchorA = null; // declared in org.jbox2d.dynamics.joints.PulleyJointDef
        this.groundAnchorB = null; // declared in org.jbox2d.dynamics.joints.PulleyJointDef
        this.localAnchorA = null; // declared in org.jbox2d.dynamics.joints.PulleyJointDef
        this.localAnchorB = null; // declared in org.jbox2d.dynamics.joints.PulleyJointDef
        this.ratio = 0; // declared in org.jbox2d.dynamics.joints.PulleyJointDef
        this.lengthA = 0; // declared in org.jbox2d.dynamics.joints.PulleyJointDef
        this.lengthB = 0; // declared in org.jbox2d.dynamics.joints.PulleyJointDef
    },

    instanceOf : function(aType) {
        return ojdjPulleyJointDef.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdjPulleyJointDef;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdjPulleyJointDef.BOOLEANdesiredAssertionStatus(ojdjPulleyJointDef); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_13_9 : for(;;) switch (__label__) {
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_13_9;
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_13_9;
        }
        ojdjPulleyJointDef.$assertionsDisabled = var1;
        return;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        ojdjJointDef.VOIDinit(thisRef);
        var var0 = ojdjJointType.PULLEY; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@44c551bf
        thisRef.type = var0;
        var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinitFLOATFLOAT(var1,-1.0,1.0);
        thisRef.groundAnchorA = var1;
        var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinitFLOATFLOAT(var2,1.0,1.0);
        thisRef.groundAnchorB = var2;
        var var3 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinitFLOATFLOAT(var3,-1.0,0.0);
        thisRef.localAnchorA = var3;
        var var4 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinitFLOATFLOAT(var4,1.0,0.0);
        thisRef.localAnchorB = var4;
        thisRef.lengthA = 0.0;
        thisRef.lengthB = 0.0;
        thisRef.ratio = 1.0;
        thisRef.collideConnected = 1;
        return;
    },

    classInitCheck : function() {
        if (!ojdjPulleyJointDef.__initialized) {
            ojdjPulleyJointDef.__initialized = true;
            var thePrototype = ojdjPulleyJointDef.Create.prototype;
            thePrototype.instanceOf = ojdjPulleyJointDef.instanceOf;
            thePrototype.ClassgetClass = ojdjPulleyJointDef.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojdjJointDef.classInitCheck();
            jlObject.classInitCheck();
            ojdjPulleyJointDef.VOIDclinit();
        }
    },

};

var ojdjConstantVolumeJoint = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 172,
    __implementedTypes : [1,117,172],
    $assertionsDisabled : false, // declared in org.jbox2d.dynamics.joints.Joint

    Create : function() {
        this.pool = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_type = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_prev = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_next = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_bodyA = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_bodyB = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_collideConnected = false; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_islandFlag = false; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_userData = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_edgeA = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_edgeB = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_impulse = 0; // declared in org.jbox2d.dynamics.joints.ConstantVolumeJoint
        this.world = null; // declared in org.jbox2d.dynamics.joints.ConstantVolumeJoint
        this.bodies = null; // declared in org.jbox2d.dynamics.joints.ConstantVolumeJoint
        this.targetLengths = null; // declared in org.jbox2d.dynamics.joints.ConstantVolumeJoint
        this.targetVolume = 0; // declared in org.jbox2d.dynamics.joints.ConstantVolumeJoint
        this.distanceJoints = null; // declared in org.jbox2d.dynamics.joints.ConstantVolumeJoint
        this.normals = null; // declared in org.jbox2d.dynamics.joints.ConstantVolumeJoint
    },

    instanceOf : function(aType) {
        return ojdjConstantVolumeJoint.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdjConstantVolumeJoint;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    ojdjJointcreateojdWorldojdjJointDef : function(p0,p1) {
         return ojdjJoint.ojdjJointcreateojdWorldojdjJointDef(p0,p1);
    },

    VOIDinitojdWorldojdjConstantVolumeJointDef : function(thisRef,argWorld,def) {
        var var87 = null; // type is INT # of inits = 2
        var local_4_INT = null; // type is INT # of inits = 4
        var local_3_INT = null; // type is INT # of inits = 6
        var var52 = null; // type is INT # of inits = 2
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = argWorld.ojpIWorldPoolgetPool(argWorld); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@75fd8483
            ojdjJoint.VOIDinitojpIWorldPoolojdjJointDef(thisRef,var0,def);
            thisRef.m_impulse = 0.0;
            thisRef.world = argWorld;
            var var2 = def.bodies.INTsize(def.bodies); // type is INT value type is INT
            if ((var2 > 2)) {
                __label__ = 40;
                break $S_0;
            }
            __label__ = 30;
            }
        for(;;) switch (__label__) {
            case 40 :
            // NORMAL
                $S_40 : {
                // NORMAL
                    var var5 = def.bodies.A1jlObjecttoArrayA1jlObject(def.bodies,bytecoder.newArray(0,null)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@308cf933
                    thisRef.bodies = var5;
                    var var8 = bytecoder.newArray(thisRef.bodies.data.length,0.0); // type is REFERENCE value type is REFERENCE
                    thisRef.targetLengths = var8;
                    local_3_INT = 0; // type is INT value type is INT
                    __label__ = 71;
                    }
                $L_71 : for (;;) {
                    $S_71 : {
                    // NORMAL
                        var var11 = local_3_INT; // type is INT value type is INT
                        var var13 = thisRef.targetLengths.data.length; // type is INT value type is INT
                        if ((var11 >= var13)) {
                            __label__ = 141;
                            break $S_71;
                        }
                        __label__ = 80;
                        }
                    for(;;) switch (__label__) {
                        case 141 :
                        // NORMAL
                            $S_141 : {
                            // NORMAL
                                var var14 = thisRef.FLOATgetBodyArea(thisRef); // type is FLOAT value type is FLOAT
                                thisRef.targetVolume = var14;
                                var var15 = def.joints; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5867d708
                                if (var15 == null ) {
                                    __label__ = 183;
                                    break $S_141;
                                }
                                __label__ = 156;
                                }
                            $M_156_183 : for(;;) switch (__label__) {
                                case 156 :
                                // NORMAL
                                    $S_156 : {
                                    // NORMAL
                                        var var17 = def.joints.INTsize(def.joints); // type is INT value type is INT
                                        var var19 = def.bodies.INTsize(def.bodies); // type is INT value type is INT
                                        if ((var17 == var19)) {
                                            __label__ = 183;
                                            continue $M_156_183;
                                        }
                                        }
                                    var var41 = new jlIllegalArgumentException.Create(); // type is REFERENCE value type is REFERENCE
                                    jlIllegalArgumentException.VOIDinitjlString(var41,bytecoder.stringpool[57]);
                                    throw var41;
                                case 183 :
                                // NORMAL
                                    $S_183 : {
                                    // NORMAL
                                        var var20 = def.joints; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5a4ffe0d
                                        if (var20 != null ) {
                                            __label__ = 334;
                                            break $S_183;
                                        }
                                        __label__ = 190;
                                        }
                                    $M_334_190 : for(;;) switch (__label__) {
                                        case 190 :
                                        // NORMAL
                                            $S_190 : {
                                            // NORMAL
                                                var var24 = new ojdjDistanceJointDef.Create(); // type is REFERENCE value type is REFERENCE
                                                ojdjDistanceJointDef.VOIDinit(var24);
                                                local_3_REFERENCE = var24; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@655bac2d
                                                var var28 = bytecoder.newArray(thisRef.bodies.data.length,null); // type is REFERENCE value type is REFERENCE
                                                thisRef.distanceJoints = var28;
                                                local_4_INT = 0; // type is INT value type is INT
                                                __label__ = 213;
                                                }
                                            $L_213 : for (;;) {
                                                $S_213 : {
                                                // NORMAL
                                                    var var31 = local_4_INT; // type is INT value type is INT
                                                    var var33 = thisRef.targetLengths.data.length; // type is INT value type is INT
                                                    if ((var31 >= var33)) {
                                                        __label__ = 331;
                                                        break $S_213;
                                                    }
                                                    __label__ = 223;
                                                    }
                                                for(;;) switch (__label__) {
                                                    case 331 :
                                                    // NORMAL
                                                        break $M_334_190;
                                                    case 223 :
                                                    // NORMAL
                                                        $S_223 : {
                                                        // NORMAL
                                                            var var46 = local_4_INT; // type is INT value type is INT
                                                            var var49 = (thisRef.targetLengths.data.length - 1); // type is INT value type is INT
                                                            if ((var46 != var49)) {
                                                                __label__ = 239;
                                                                break $S_223;
                                                            }
                                                            __label__ = 235;
                                                            }
                                                        $M_235_239 : for(;;) switch (__label__) {
                                                            case 239 :
                                                            // NORMAL
                                                                var52 = (local_4_INT + 1); // type is INT value type is INT
                                                                break $M_235_239;
                                                            case 235 :
                                                            // NORMAL
                                                                var52 = 0; // type is INT value type is INT
                                                                break $M_235_239;
                                                        }
                                                        var local_5_INT = var52; // type is INT value type is INT
                                                        var var55 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@655bac2d
                                                        var var56 = def.frequencyHz; // type is FLOAT value type is FLOAT
                                                        var55.frequencyHz = var56;
                                                        var var57 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@655bac2d
                                                        var var58 = def.dampingRatio; // type is FLOAT value type is FLOAT
                                                        var57.dampingRatio = var58;
                                                        var var59 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@655bac2d
                                                        var var60 = def.collideConnected; // type is BOOLEAN value type is BOOLEAN
                                                        var59.collideConnected = var60;
                                                        var var61 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@655bac2d
                                                        var var64 = thisRef.bodies.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                                                        var var67 = thisRef.bodies.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                                                        var var70 = thisRef.bodies.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                                                        var var71 = var70.ojcVec2getWorldCenter(var70); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@d5dc116
                                                        var var74 = thisRef.bodies.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                                                        var var75 = var74.ojcVec2getWorldCenter(var74); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6b649822
                                                        var61.VOIDinitializeojdBodyojdBodyojcVec2ojcVec2(var61,var64,var67,var71,var75);
                                                        var var76 = thisRef.distanceJoints; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@554eba96
                                                        var var77 = local_4_INT; // type is INT value type is INT
                                                        var var80 = thisRef.world.ojdjJointcreateJointojdjJointDef(thisRef.world,local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@705489a4
                                                        var76.data[var77] = var80;
                                                        local_4_INT = (local_4_INT + 1); // type is INT value type is INT
                                                        __label__ = 213;
                                                        continue $L_213;
                                                }
                                            }
                                        case 334 :
                                        // NORMAL
                                            var var23 = def.joints.A1jlObjecttoArrayA1jlObject(def.joints,bytecoder.newArray(0,null)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1362a3c9
                                            thisRef.distanceJoints = var23;
                                            break $M_334_190;
                                    }
                                    $S_352 : {
                                    // NORMAL
                                        var var36 = bytecoder.newArray(thisRef.bodies.data.length,null); // type is REFERENCE value type is REFERENCE
                                        thisRef.normals = var36;
                                        local_3_INT = 0; // type is INT value type is INT
                                        __label__ = 366;
                                        }
                                    $L_366 : for (;;) {
                                        $S_366 : {
                                        // NORMAL
                                            var var38 = local_3_INT; // type is INT value type is INT
                                            var var40 = thisRef.normals.data.length; // type is INT value type is INT
                                            if ((var38 >= var40)) {
                                                return;
                                            }
                                            }
                                        var var42 = thisRef.normals; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@5c888c0f
                                        var var43 = local_3_INT; // type is INT value type is INT
                                        var var44 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
                                        ojcVec2.VOIDinit(var44);
                                        var42.data[var43] = var44;
                                        local_3_INT = (local_3_INT + 1); // type is INT value type is INT
                                        __label__ = 366;
                                        continue $L_366;
                                    }
                            }
                        case 80 :
                        // NORMAL
                            $S_80 : {
                            // NORMAL
                                var var81 = local_3_INT; // type is INT value type is INT
                                var var84 = (thisRef.targetLengths.data.length - 1); // type is INT value type is INT
                                if ((var81 != var84)) {
                                    __label__ = 95;
                                    break $S_80;
                                }
                                __label__ = 91;
                                }
                            $M_91_95 : for(;;) switch (__label__) {
                                case 95 :
                                // NORMAL
                                    var87 = (local_3_INT + 1); // type is INT value type is INT
                                    break $M_91_95;
                                case 91 :
                                // NORMAL
                                    var87 = 0; // type is INT value type is INT
                                    break $M_91_95;
                            }
                            local_4_INT = var87; // type is INT value type is INT
                            var var91 = thisRef.bodies.data[local_3_INT]; // type is REFERENCE value type is REFERENCE
                            var var92 = var91.ojcVec2getWorldCenter(var91); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7cb21702
                            var var95 = thisRef.bodies.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                            var var96 = var95.ojcVec2getWorldCenter(var95); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@287fb899
                            var var97 = var92.ojcVec2subojcVec2(var92,var96); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2e052ab4
                            var var98 = var97.FLOATlength(var97); // type is FLOAT value type is FLOAT
                            var local_5_FLOAT = var98; // type is FLOAT value type is FLOAT
                            var var101 = thisRef.targetLengths; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@36f5338f
                            var var102 = local_3_INT; // type is INT value type is INT
                            var var103 = local_5_FLOAT; // type is FLOAT value type is FLOAT
                            var101.data[var102] = var103;
                            local_3_INT = (local_3_INT + 1); // type is INT value type is INT
                            __label__ = 71;
                            continue $L_71;
                    }
                }
            case 30 :
            // NORMAL
                var var45 = new jlIllegalArgumentException.Create(); // type is REFERENCE value type is REFERENCE
                jlIllegalArgumentException.VOIDinitjlString(var45,bytecoder.stringpool[58]);
                throw var45;
        }
    },

    FLOATgetBodyArea : function(thisRef) {
        var local_1_FLOAT = null; // type is FLOAT # of inits = 4
        var local_2_INT = null; // type is INT # of inits = 3
        var var14 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_1_FLOAT = 0.0; // type is FLOAT value type is FLOAT
            local_2_INT = 0; // type is INT value type is INT
            __label__ = 4;
            }
        $L_4 : for (;;) {
            $S_4 : {
            // NORMAL
                var var4 = local_2_INT; // type is INT value type is INT
                var var7 = (thisRef.bodies.data.length - 1); // type is INT value type is INT
                if ((var4 >= var7)) {
                    __label__ = 94;
                    break $S_4;
                }
                __label__ = 15;
                }
            for(;;) switch (__label__) {
                case 94 :
                // NORMAL
                    local_1_FLOAT = (local_1_FLOAT * 0.5); // type is FLOAT value type is FLOAT
                    return local_1_FLOAT;
                case 15 :
                // NORMAL
                    $S_15 : {
                    // NORMAL
                        var var8 = local_2_INT; // type is INT value type is INT
                        var var11 = (thisRef.bodies.data.length - 1); // type is INT value type is INT
                        if ((var8 != var11)) {
                            __label__ = 30;
                            break $S_15;
                        }
                        __label__ = 26;
                        }
                    $M_30_26 : for(;;) switch (__label__) {
                        case 26 :
                        // NORMAL
                            var14 = 0; // type is INT value type is INT
                            break $M_30_26;
                        case 30 :
                        // NORMAL
                            var14 = (local_2_INT + 1); // type is INT value type is INT
                            break $M_30_26;
                    }
                    var local_3_INT = var14; // type is INT value type is INT
                    var var17 = local_1_FLOAT; // type is FLOAT value type is FLOAT
                    var var20 = thisRef.bodies.data[local_2_INT]; // type is REFERENCE value type is REFERENCE
                    var var21 = var20.ojcVec2getWorldCenter(var20); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6b7d79d2
                    var var22 = var21.x; // type is FLOAT value type is FLOAT
                    var var25 = thisRef.bodies.data[local_3_INT]; // type is REFERENCE value type is REFERENCE
                    var var26 = var25.ojcVec2getWorldCenter(var25); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@58a2562b
                    var var28 = (var22 * var26.y); // type is FLOAT value type is FLOAT
                    var var31 = thisRef.bodies.data[local_3_INT]; // type is REFERENCE value type is REFERENCE
                    var var32 = var31.ojcVec2getWorldCenter(var31); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@a367984
                    var var33 = var32.x; // type is FLOAT value type is FLOAT
                    var var36 = thisRef.bodies.data[local_2_INT]; // type is REFERENCE value type is REFERENCE
                    var var37 = var36.ojcVec2getWorldCenter(var36); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@526142a3
                    local_1_FLOAT = (var17 + (var28 - (var33 * var37.y))); // type is FLOAT value type is FLOAT
                    local_2_INT = (local_2_INT + 1); // type is INT value type is INT
                    __label__ = 4;
                    continue $L_4;
            }
        }
    },

    VOIDinitVelocityConstraintsojdSolverData : function(thisRef,step) {
        var local_5_INT = null; // type is INT # of inits = 6
        var local_6_INT = null; // type is INT # of inits = 1
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 2
        var var20 = null; // type is INT # of inits = 2
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 3
        var var29 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_2_REFERENCE = step.velocities; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1ca86d48
            local_3_REFERENCE = step.positions; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@ef5edd3
            var var7 = thisRef.pool.A1ojcVec2getVec2ArrayINT(thisRef.pool,thisRef.bodies.data.length); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1dbc870e
            local_4_REFERENCE = var7; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@732d1f4b
            local_5_INT = 0; // type is INT value type is INT
            __label__ = 29;
            }
        $L_29 : for (;;) {
            $S_29 : {
            // NORMAL
                var var11 = local_5_INT; // type is INT value type is INT
                var var13 = thisRef.bodies.data.length; // type is INT value type is INT
                if ((var11 >= var13)) {
                    __label__ = 136;
                    break $S_29;
                }
                __label__ = 39;
                }
            for(;;) switch (__label__) {
                case 39 :
                // NORMAL
                    $S_39 : {
                    // NORMAL
                        var var14 = local_5_INT; // type is INT value type is INT
                        if ((var14 != 0)) {
                            __label__ = 54;
                            break $S_39;
                        }
                        __label__ = 44;
                        }
                    $M_54_44 : for(;;) switch (__label__) {
                        case 44 :
                        // NORMAL
                            var20 = (thisRef.bodies.data.length - 1); // type is INT value type is INT
                            break $M_54_44;
                        case 54 :
                        // NORMAL
                            var20 = (local_5_INT - 1); // type is INT value type is INT
                            break $M_54_44;
                    }
                    $S_58 : {
                    // NORMAL
                        local_6_INT = var20; // type is INT value type is INT
                        var var23 = local_5_INT; // type is INT value type is INT
                        var var26 = (thisRef.bodies.data.length - 1); // type is INT value type is INT
                        if ((var23 != var26)) {
                            __label__ = 76;
                            break $S_58;
                        }
                        __label__ = 72;
                        }
                    $M_76_72 : for(;;) switch (__label__) {
                        case 72 :
                        // NORMAL
                            var29 = 0; // type is INT value type is INT
                            break $M_76_72;
                        case 76 :
                        // NORMAL
                            var29 = (local_5_INT + 1); // type is INT value type is INT
                            break $M_76_72;
                    }
                    var local_7_INT = var29; // type is INT value type is INT
                    var var34 = local_4_REFERENCE.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                    var var35 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@4747e1e9
                    var var38 = thisRef.bodies.data[local_7_INT]; // type is REFERENCE value type is REFERENCE
                    var var40 = var35.data[var38.m_islandIndex]; // type is REFERENCE value type is REFERENCE
                    var var42 = var34.ojcVec2setojcVec2(var34,var40.c); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7c1ffcfc
                    var var45 = local_4_REFERENCE.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                    var var46 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@4747e1e9
                    var var49 = thisRef.bodies.data[local_6_INT]; // type is REFERENCE value type is REFERENCE
                    var var51 = var46.data[var49.m_islandIndex]; // type is REFERENCE value type is REFERENCE
                    var var53 = var45.ojcVec2subLocalojcVec2(var45,var51.c); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@23021c1a
                    local_5_INT = (local_5_INT + 1); // type is INT value type is INT
                    __label__ = 29;
                    continue $L_29;
                case 136 :
                // NORMAL
                    $S_136 : {
                    // NORMAL
                        var var55 = step.step.warmStarting; // type is BOOLEAN value type is BOOLEAN
                        if ((var55 == 0)) {
                            __label__ = 285;
                            break $S_136;
                        }
                        __label__ = 146;
                        }
                    for(;;) switch (__label__) {
                        case 146 :
                        // NORMAL
                            $S_146 : {
                            // NORMAL
                                var var59 = (thisRef.m_impulse * step.step.dtRatio); // type is FLOAT value type is FLOAT
                                thisRef.m_impulse = var59;
                                local_5_INT = 0; // type is INT value type is INT
                                __label__ = 165;
                                }
                            $L_165 : for (;;) {
                                $S_165 : {
                                // NORMAL
                                    var var61 = local_5_INT; // type is INT value type is INT
                                    var var63 = thisRef.bodies.data.length; // type is INT value type is INT
                                    if ((var61 >= var63)) {
                                        __label__ = 282;
                                        break $S_165;
                                    }
                                    __label__ = 175;
                                    }
                                for(;;) switch (__label__) {
                                    case 282 :
                                    // NORMAL
                                        return;
                                    case 175 :
                                    // NORMAL
                                        var var64 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@32e88898
                                        var var67 = thisRef.bodies.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                                        var var69 = var64.data[var67.m_islandIndex]; // type is REFERENCE value type is REFERENCE
                                        var var70 = var69.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2b8e6dc
                                        var var71 = var70.x; // type is FLOAT value type is FLOAT
                                        var var74 = thisRef.bodies.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                                        var var75 = var74.m_invMass; // type is FLOAT value type is FLOAT
                                        var var78 = local_4_REFERENCE.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                                        var var84 = (var71 + (((var75 * var78.y) * 0.5) * thisRef.m_impulse)); // type is FLOAT value type is FLOAT
                                        var70.x = var84;
                                        var var85 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@32e88898
                                        var var88 = thisRef.bodies.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                                        var var90 = var85.data[var88.m_islandIndex]; // type is REFERENCE value type is REFERENCE
                                        var var91 = var90.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7b458572
                                        var var92 = var91.y; // type is FLOAT value type is FLOAT
                                        var var95 = thisRef.bodies.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                                        var var96 = var95.m_invMass; // type is FLOAT value type is FLOAT
                                        var var99 = local_4_REFERENCE.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                                        var var106 = (var92 + (((var96 * (-var99.x)) * 0.5) * thisRef.m_impulse)); // type is FLOAT value type is FLOAT
                                        var91.y = var106;
                                        local_5_INT = (local_5_INT + 1); // type is INT value type is INT
                                        __label__ = 165;
                                        continue $L_165;
                                }
                            }
                        case 285 :
                        // NORMAL
                            thisRef.m_impulse = 0.0;
                            return;
                    }
            }
        }
    },

    VOIDsolveVelocityConstraintsojdSolverData : function(thisRef,step) {
        var local_3_FLOAT = null; // type is FLOAT # of inits = 3
        var local_7_FLOAT = null; // type is FLOAT # of inits = 2
        var local_7_INT = null; // type is INT # of inits = 3
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 3
        var var24 = null; // type is INT # of inits = 2
        var local_8_INT = null; // type is INT # of inits = 4
        var local_2_FLOAT = null; // type is FLOAT # of inits = 3
        var var33 = null; // type is INT # of inits = 2
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_2_FLOAT = 0.0; // type is FLOAT value type is FLOAT
            local_3_FLOAT = 0.0; // type is FLOAT value type is FLOAT
            local_4_REFERENCE = step.velocities; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@5f810e87
            local_5_REFERENCE = step.positions; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1548cdeb
            var var11 = thisRef.pool.A1ojcVec2getVec2ArrayINT(thisRef.pool,thisRef.bodies.data.length); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@177e540c
            local_6_REFERENCE = var11; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@62168e19
            local_7_INT = 0; // type is INT value type is INT
            __label__ = 35;
            }
        $L_35 : for (;;) {
            $S_35 : {
            // NORMAL
                var var15 = local_7_INT; // type is INT value type is INT
                var var17 = thisRef.bodies.data.length; // type is INT value type is INT
                if ((var15 >= var17)) {
                    __label__ = 193;
                    break $S_35;
                }
                __label__ = 45;
                }
            for(;;) switch (__label__) {
                case 193 :
                // NORMAL
                    $S_193 : {
                    // NORMAL
                        local_7_FLOAT = ((-2.0 * local_2_FLOAT) / local_3_FLOAT); // type is FLOAT value type is FLOAT
                        var var92 = (thisRef.m_impulse + local_7_FLOAT); // type is FLOAT value type is FLOAT
                        thisRef.m_impulse = var92;
                        local_8_INT = 0; // type is INT value type is INT
                        __label__ = 215;
                        }
                    $L_215 : for (;;) {
                        $S_215 : {
                        // NORMAL
                            var var94 = local_8_INT; // type is INT value type is INT
                            var var96 = thisRef.bodies.data.length; // type is INT value type is INT
                            if ((var94 >= var96)) {
                                return;
                            }
                            }
                        var var97 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@6128549f
                        var var100 = thisRef.bodies.data[local_8_INT]; // type is REFERENCE value type is REFERENCE
                        var var102 = var97.data[var100.m_islandIndex]; // type is REFERENCE value type is REFERENCE
                        var var103 = var102.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@26de8b23
                        var var104 = var103.x; // type is FLOAT value type is FLOAT
                        var var107 = thisRef.bodies.data[local_8_INT]; // type is REFERENCE value type is REFERENCE
                        var var108 = var107.m_invMass; // type is FLOAT value type is FLOAT
                        var var111 = local_6_REFERENCE.data[local_8_INT]; // type is REFERENCE value type is REFERENCE
                        var var117 = (var104 + (((var108 * var111.y) * 0.5) * local_7_FLOAT)); // type is FLOAT value type is FLOAT
                        var103.x = var117;
                        var var118 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@6128549f
                        var var121 = thisRef.bodies.data[local_8_INT]; // type is REFERENCE value type is REFERENCE
                        var var123 = var118.data[var121.m_islandIndex]; // type is REFERENCE value type is REFERENCE
                        var var124 = var123.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@717c5c49
                        var var125 = var124.y; // type is FLOAT value type is FLOAT
                        var var128 = thisRef.bodies.data[local_8_INT]; // type is REFERENCE value type is REFERENCE
                        var var129 = var128.m_invMass; // type is FLOAT value type is FLOAT
                        var var132 = local_6_REFERENCE.data[local_8_INT]; // type is REFERENCE value type is REFERENCE
                        var var139 = (var125 + (((var129 * (-var132.x)) * 0.5) * local_7_FLOAT)); // type is FLOAT value type is FLOAT
                        var124.y = var139;
                        local_8_INT = (local_8_INT + 1); // type is INT value type is INT
                        __label__ = 215;
                        continue $L_215;
                    }
                case 45 :
                // NORMAL
                    $S_45 : {
                    // NORMAL
                        var var18 = local_7_INT; // type is INT value type is INT
                        if ((var18 != 0)) {
                            __label__ = 60;
                            break $S_45;
                        }
                        __label__ = 50;
                        }
                    $M_60_50 : for(;;) switch (__label__) {
                        case 50 :
                        // NORMAL
                            var24 = (thisRef.bodies.data.length - 1); // type is INT value type is INT
                            break $M_60_50;
                        case 60 :
                        // NORMAL
                            var24 = (local_7_INT - 1); // type is INT value type is INT
                            break $M_60_50;
                    }
                    $S_64 : {
                    // NORMAL
                        local_8_INT = var24; // type is INT value type is INT
                        var var27 = local_7_INT; // type is INT value type is INT
                        var var30 = (thisRef.bodies.data.length - 1); // type is INT value type is INT
                        if ((var27 != var30)) {
                            __label__ = 82;
                            break $S_64;
                        }
                        __label__ = 78;
                        }
                    $M_82_78 : for(;;) switch (__label__) {
                        case 82 :
                        // NORMAL
                            var33 = (local_7_INT + 1); // type is INT value type is INT
                            break $M_82_78;
                        case 78 :
                        // NORMAL
                            var33 = 0; // type is INT value type is INT
                            break $M_82_78;
                    }
                    var local_9_INT = var33; // type is INT value type is INT
                    var var38 = local_6_REFERENCE.data[local_7_INT]; // type is REFERENCE value type is REFERENCE
                    var var39 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@672107d2
                    var var42 = thisRef.bodies.data[local_9_INT]; // type is REFERENCE value type is REFERENCE
                    var var44 = var39.data[var42.m_islandIndex]; // type is REFERENCE value type is REFERENCE
                    var var46 = var38.ojcVec2setojcVec2(var38,var44.c); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2288f018
                    var var49 = local_6_REFERENCE.data[local_7_INT]; // type is REFERENCE value type is REFERENCE
                    var var50 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@672107d2
                    var var53 = thisRef.bodies.data[local_8_INT]; // type is REFERENCE value type is REFERENCE
                    var var55 = var50.data[var53.m_islandIndex]; // type is REFERENCE value type is REFERENCE
                    var var57 = var49.ojcVec2subLocalojcVec2(var49,var55.c); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@47b31e71
                    var var58 = local_3_FLOAT; // type is FLOAT value type is FLOAT
                    var var61 = local_6_REFERENCE.data[local_7_INT]; // type is REFERENCE value type is REFERENCE
                    var var62 = var61.FLOATlengthSquared(var61); // type is FLOAT value type is FLOAT
                    var var65 = thisRef.bodies.data[local_7_INT]; // type is REFERENCE value type is REFERENCE
                    var var66 = var65.FLOATgetMass(var65); // type is FLOAT value type is FLOAT
                    local_3_FLOAT = (var58 + (var62 / var66)); // type is FLOAT value type is FLOAT
                    var var70 = local_2_FLOAT; // type is FLOAT value type is FLOAT
                    var var71 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@6128549f
                    var var74 = thisRef.bodies.data[local_7_INT]; // type is REFERENCE value type is REFERENCE
                    var var76 = var71.data[var74.m_islandIndex]; // type is REFERENCE value type is REFERENCE
                    var var77 = var76.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@15661237
                    var var80 = local_6_REFERENCE.data[local_7_INT]; // type is REFERENCE value type is REFERENCE
                    var var81 = ojcVec2.FLOATcrossojcVec2ojcVec2(var77,var80); // type is FLOAT value type is FLOAT
                    local_2_FLOAT = (var70 + var81); // type is FLOAT value type is FLOAT
                    local_7_INT = (local_7_INT + 1); // type is INT value type is INT
                    __label__ = 35;
                    continue $L_35;
            }
        }
    },

    BOOLEANsolvePositionConstraintsojdSolverData : function(thisRef,step) {
        var __label__ = null;
        var var1 = thisRef.BOOLEANconstrainEdgesA1ojdcPosition(thisRef,step.positions); // type is BOOLEAN value type is BOOLEAN
        return var1;
    },

    BOOLEANconstrainEdgesA1ojdcPosition : function(thisRef,positions) {
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 2
        var var103 = null; // type is INT # of inits = 2
        var local_9_FLOAT = null; // type is FLOAT # of inits = 1
        var local_2_FLOAT = null; // type is FLOAT # of inits = 3
        var local_7_INT = null; // type is INT # of inits = 3
        var local_3_INT = null; // type is INT # of inits = 3
        var var36 = null; // type is INT # of inits = 2
        var local_5_FLOAT = null; // type is FLOAT # of inits = 3
        var local_6_FLOAT = null; // type is FLOAT # of inits = 1
        var local_7_FLOAT = null; // type is FLOAT # of inits = 2
        var local_8_INT = null; // type is INT # of inits = 1
        var local_6_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_2_FLOAT = 0.0; // type is FLOAT value type is FLOAT
            local_3_INT = 0; // type is INT value type is INT
            __label__ = 4;
            }
        $L_4 : for (;;) {
            $S_4 : {
            // NORMAL
                var var4 = local_3_INT; // type is INT value type is INT
                var var6 = thisRef.bodies.data.length; // type is INT value type is INT
                if ((var4 >= var6)) {
                    __label__ = 176;
                    break $S_4;
                }
                __label__ = 13;
                }
            for(;;) switch (__label__) {
                case 176 :
                // NORMAL
                    $S_176 : {
                    // NORMAL
                        var var8 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@8541aa8
                        local_3_REFERENCE = var8; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@35dd731d
                        var var10 = thisRef.targetVolume; // type is FLOAT value type is FLOAT
                        var var11 = thisRef.FLOATgetSolverAreaA1ojdcPosition(thisRef,positions); // type is FLOAT value type is FLOAT
                        var local_4_FLOAT = (var10 - var11); // type is FLOAT value type is FLOAT
                        local_5_FLOAT = ((0.5 * local_4_FLOAT) / local_2_FLOAT); // type is FLOAT value type is FLOAT
                        local_6_INT = 1; // type is INT value type is INT
                        local_7_INT = 0; // type is INT value type is INT
                        __label__ = 213;
                        }
                    $L_213 : for (;;) {
                        $S_213 : {
                        // NORMAL
                            var var25 = local_7_INT; // type is INT value type is INT
                            var var27 = thisRef.bodies.data.length; // type is INT value type is INT
                            if ((var25 >= var27)) {
                                __label__ = 396;
                                break $S_213;
                            }
                            __label__ = 223;
                            }
                        for(;;) switch (__label__) {
                            case 223 :
                            // NORMAL
                                $S_223 : {
                                // NORMAL
                                    var var30 = local_7_INT; // type is INT value type is INT
                                    var var33 = (thisRef.bodies.data.length - 1); // type is INT value type is INT
                                    if ((var30 != var33)) {
                                        __label__ = 239;
                                        break $S_223;
                                    }
                                    __label__ = 235;
                                    }
                                $M_235_239 : for(;;) switch (__label__) {
                                    case 235 :
                                    // NORMAL
                                        var36 = 0; // type is INT value type is INT
                                        break $M_235_239;
                                    case 239 :
                                    // NORMAL
                                        var36 = (local_7_INT + 1); // type is INT value type is INT
                                        break $M_235_239;
                                }
                                $S_243 : {
                                // NORMAL
                                    local_8_INT = var36; // type is INT value type is INT
                                    var var39 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@35dd731d
                                    var var40 = local_5_FLOAT; // type is FLOAT value type is FLOAT
                                    var var43 = thisRef.normals.data[local_7_INT]; // type is REFERENCE value type is REFERENCE
                                    var var44 = var43.x; // type is FLOAT value type is FLOAT
                                    var var47 = thisRef.normals.data[local_8_INT]; // type is REFERENCE value type is REFERENCE
                                    var var50 = (var40 * (var44 + var47.x)); // type is FLOAT value type is FLOAT
                                    var var51 = local_5_FLOAT; // type is FLOAT value type is FLOAT
                                    var var54 = thisRef.normals.data[local_7_INT]; // type is REFERENCE value type is REFERENCE
                                    var var55 = var54.y; // type is FLOAT value type is FLOAT
                                    var var58 = thisRef.normals.data[local_8_INT]; // type is REFERENCE value type is REFERENCE
                                    var var62 = var39.ojcVec2setFLOATFLOAT(var39,var50,(var51 * (var55 + var58.y))); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@44fc787a
                                    var var64 = local_3_REFERENCE.FLOATlengthSquared(local_3_REFERENCE); // type is FLOAT value type is FLOAT
                                    local_9_FLOAT = var64; // type is FLOAT value type is FLOAT
                                    var var67 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                                    if ((var67 <= 0.040000003)) {
                                        __label__ = 325;
                                        break $S_243;
                                    }
                                    __label__ = 312;
                                    }
                                $M_325_312 : for(;;) switch (__label__) {
                                    case 325 :
                                    // NORMAL
                                        $S_325 : {
                                        // NORMAL
                                            var var74 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                                            if ((var74 <= 2.5E-5)) {
                                                __label__ = 336;
                                                break $S_325;
                                            }
                                            __label__ = 333;
                                            }
                                        $M_336_333 : for(;;) switch (__label__) {
                                            case 333 :
                                            // NORMAL
                                                local_6_INT = 0; // type is INT value type is INT
                                                __label__ = 336;
                                                continue $M_336_333;
                                            case 336 :
                                            // NORMAL
                                                var var79 = thisRef.bodies.data[local_8_INT]; // type is REFERENCE value type is REFERENCE
                                                var var81 = positions.data[var79.m_islandIndex]; // type is REFERENCE value type is REFERENCE
                                                var var82 = var81.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7b3185cc
                                                var var86 = (var82.x + local_3_REFERENCE.x); // type is FLOAT value type is FLOAT
                                                var82.x = var86;
                                                var var89 = thisRef.bodies.data[local_8_INT]; // type is REFERENCE value type is REFERENCE
                                                var var91 = positions.data[var89.m_islandIndex]; // type is REFERENCE value type is REFERENCE
                                                var var92 = var91.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3edf7eec
                                                var var96 = (var92.y + local_3_REFERENCE.y); // type is FLOAT value type is FLOAT
                                                var92.y = var96;
                                                local_7_INT = (local_7_INT + 1); // type is INT value type is INT
                                                __label__ = 213;
                                                continue $L_213;
                                        }
                                    case 312 :
                                    // NORMAL
                                        var var69 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@35dd731d
                                        var var71 = ojcMathUtils.FLOATsqrtFLOAT(local_9_FLOAT); // type is FLOAT value type is FLOAT
                                        var var73 = var69.ojcVec2mulLocalFLOAT(var69,(0.2 / var71)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@16f6b2c5
                                        __label__ = 325;
                                        continue $M_325_312;
                                }
                            case 396 :
                            // NORMAL
                                thisRef.pool.VOIDpushVec2INT(thisRef.pool,1);
                                return local_6_INT;
                        }
                    }
                case 13 :
                // NORMAL
                    $S_13 : {
                    // NORMAL
                        var var97 = local_3_INT; // type is INT value type is INT
                        var var100 = (thisRef.bodies.data.length - 1); // type is INT value type is INT
                        if ((var97 != var100)) {
                            __label__ = 28;
                            break $S_13;
                        }
                        __label__ = 24;
                        }
                    $M_28_24 : for(;;) switch (__label__) {
                        case 24 :
                        // NORMAL
                            var103 = 0; // type is INT value type is INT
                            break $M_28_24;
                        case 28 :
                        // NORMAL
                            var103 = (local_3_INT + 1); // type is INT value type is INT
                            break $M_28_24;
                    }
                    $S_31 : {
                    // NORMAL
                        var local_4_INT = var103; // type is INT value type is INT
                        var var108 = thisRef.bodies.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                        var var110 = positions.data[var108.m_islandIndex]; // type is REFERENCE value type is REFERENCE
                        var var112 = var110.c.x; // type is FLOAT value type is FLOAT
                        var var115 = thisRef.bodies.data[local_3_INT]; // type is REFERENCE value type is REFERENCE
                        var var117 = positions.data[var115.m_islandIndex]; // type is REFERENCE value type is REFERENCE
                        local_5_FLOAT = (var112 - var117.c.x); // type is FLOAT value type is FLOAT
                        var var124 = thisRef.bodies.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                        var var126 = positions.data[var124.m_islandIndex]; // type is REFERENCE value type is REFERENCE
                        var var128 = var126.c.y; // type is FLOAT value type is FLOAT
                        var var131 = thisRef.bodies.data[local_3_INT]; // type is REFERENCE value type is REFERENCE
                        var var133 = positions.data[var131.m_islandIndex]; // type is REFERENCE value type is REFERENCE
                        local_6_FLOAT = (var128 - var133.c.y); // type is FLOAT value type is FLOAT
                        var var146 = ojcMathUtils.FLOATsqrtFLOAT(((local_5_FLOAT * local_5_FLOAT) + (local_6_FLOAT * local_6_FLOAT))); // type is FLOAT value type is FLOAT
                        local_7_FLOAT = var146; // type is FLOAT value type is FLOAT
                        var var149 = local_7_FLOAT; // type is FLOAT value type is FLOAT
                        if ((var149 >= 1.1920929E-7)) {
                            __label__ = 136;
                            break $S_31;
                        }
                        __label__ = 133;
                        }
                    $M_136_133 : for(;;) switch (__label__) {
                        case 133 :
                        // NORMAL
                            local_7_FLOAT = 1.0; // type is FLOAT value type is FLOAT
                            __label__ = 136;
                            continue $M_136_133;
                        case 136 :
                        // NORMAL
                            var var154 = thisRef.normals.data[local_3_INT]; // type is REFERENCE value type is REFERENCE
                            var var157 = (local_6_FLOAT / local_7_FLOAT); // type is FLOAT value type is FLOAT
                            var154.x = var157;
                            var var160 = thisRef.normals.data[local_3_INT]; // type is REFERENCE value type is REFERENCE
                            var var164 = ((-local_5_FLOAT) / local_7_FLOAT); // type is FLOAT value type is FLOAT
                            var160.y = var164;
                            local_2_FLOAT = (local_2_FLOAT + local_7_FLOAT); // type is FLOAT value type is FLOAT
                            local_3_INT = (local_3_INT + 1); // type is INT value type is INT
                            __label__ = 4;
                            continue $L_4;
                    }
            }
        }
    },

    FLOATgetSolverAreaA1ojdcPosition : function(thisRef,positions) {
        var local_2_FLOAT = null; // type is FLOAT # of inits = 4
        var var17 = null; // type is INT # of inits = 2
        var local_3_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_2_FLOAT = 0.0; // type is FLOAT value type is FLOAT
            local_3_INT = 0; // type is INT value type is INT
            __label__ = 4;
            }
        $L_4 : for (;;) {
            $S_4 : {
            // NORMAL
                var var4 = local_3_INT; // type is INT value type is INT
                var var6 = thisRef.bodies.data.length; // type is INT value type is INT
                if ((var4 >= var6)) {
                    __label__ = 115;
                    break $S_4;
                }
                __label__ = 13;
                }
            for(;;) switch (__label__) {
                case 115 :
                // NORMAL
                    local_2_FLOAT = (local_2_FLOAT * 0.5); // type is FLOAT value type is FLOAT
                    return local_2_FLOAT;
                case 13 :
                // NORMAL
                    $S_13 : {
                    // NORMAL
                        var var11 = local_3_INT; // type is INT value type is INT
                        var var14 = (thisRef.bodies.data.length - 1); // type is INT value type is INT
                        if ((var11 != var14)) {
                            __label__ = 28;
                            break $S_13;
                        }
                        __label__ = 24;
                        }
                    $M_24_28 : for(;;) switch (__label__) {
                        case 28 :
                        // NORMAL
                            var17 = (local_3_INT + 1); // type is INT value type is INT
                            break $M_24_28;
                        case 24 :
                        // NORMAL
                            var17 = 0; // type is INT value type is INT
                            break $M_24_28;
                    }
                    var local_4_INT = var17; // type is INT value type is INT
                    var var20 = local_2_FLOAT; // type is FLOAT value type is FLOAT
                    var var23 = thisRef.bodies.data[local_3_INT]; // type is REFERENCE value type is REFERENCE
                    var var25 = positions.data[var23.m_islandIndex]; // type is REFERENCE value type is REFERENCE
                    var var27 = var25.c.x; // type is FLOAT value type is FLOAT
                    var var30 = thisRef.bodies.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                    var var32 = positions.data[var30.m_islandIndex]; // type is REFERENCE value type is REFERENCE
                    var var35 = (var27 * var32.c.y); // type is FLOAT value type is FLOAT
                    var var38 = thisRef.bodies.data[local_4_INT]; // type is REFERENCE value type is REFERENCE
                    var var40 = positions.data[var38.m_islandIndex]; // type is REFERENCE value type is REFERENCE
                    var var42 = var40.c.x; // type is FLOAT value type is FLOAT
                    var var45 = thisRef.bodies.data[local_3_INT]; // type is REFERENCE value type is REFERENCE
                    var var47 = positions.data[var45.m_islandIndex]; // type is REFERENCE value type is REFERENCE
                    local_2_FLOAT = (var20 + (var35 - (var42 * var47.c.y))); // type is FLOAT value type is FLOAT
                    local_3_INT = (local_3_INT + 1); // type is INT value type is INT
                    __label__ = 4;
                    continue $L_4;
            }
        }
    },

    classInitCheck : function() {
        if (!ojdjConstantVolumeJoint.__initialized) {
            ojdjConstantVolumeJoint.__initialized = true;
            var thePrototype = ojdjConstantVolumeJoint.Create.prototype;
            thePrototype.instanceOf = ojdjConstantVolumeJoint.instanceOf;
            thePrototype.ClassgetClass = ojdjConstantVolumeJoint.ClassgetClass;
            thePrototype.FLOATgetSolverAreaA1ojdcPosition = ojdjConstantVolumeJoint.FLOATgetSolverAreaA1ojdcPosition;
            thePrototype.BOOLEANconstrainEdgesA1ojdcPosition = ojdjConstantVolumeJoint.BOOLEANconstrainEdgesA1ojdcPosition;
            thePrototype.BOOLEANsolvePositionConstraintsojdSolverData = ojdjConstantVolumeJoint.BOOLEANsolvePositionConstraintsojdSolverData;
            thePrototype.VOIDsolveVelocityConstraintsojdSolverData = ojdjConstantVolumeJoint.VOIDsolveVelocityConstraintsojdSolverData;
            thePrototype.VOIDinitVelocityConstraintsojdSolverData = ojdjConstantVolumeJoint.VOIDinitVelocityConstraintsojdSolverData;
            thePrototype.FLOATgetBodyArea = ojdjConstantVolumeJoint.FLOATgetBodyArea;
            thePrototype.BOOLEANgetCollideConnected = ojdjJoint.BOOLEANgetCollideConnected;
            thePrototype.ojdBodygetBodyB = ojdjJoint.ojdBodygetBodyB;
            thePrototype.ojdBodygetBodyA = ojdjJoint.ojdBodygetBodyA;
            thePrototype.ojdjJointTypegetType = ojdjJoint.ojdjJointTypegetType;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojdjJoint.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var ojdjConstantVolumeJointDef = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 173,
    __implementedTypes : [1,173,149],

    Create : function() {
        this.type = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.userData = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.bodyA = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.bodyB = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.collideConnected = false; // declared in org.jbox2d.dynamics.joints.JointDef
        this.bodies = null; // declared in org.jbox2d.dynamics.joints.ConstantVolumeJointDef
        this.joints = null; // declared in org.jbox2d.dynamics.joints.ConstantVolumeJointDef
        this.frequencyHz = 0; // declared in org.jbox2d.dynamics.joints.ConstantVolumeJointDef
        this.dampingRatio = 0; // declared in org.jbox2d.dynamics.joints.ConstantVolumeJointDef
    },

    instanceOf : function(aType) {
        return ojdjConstantVolumeJointDef.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdjConstantVolumeJointDef;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        ojdjJointDef.VOIDinit(thisRef);
        var var0 = ojdjJointType.CONSTANT_VOLUME; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3756f0a5
        thisRef.type = var0;
        var var1 = new juArrayList.Create(); // type is REFERENCE value type is REFERENCE
        juArrayList.VOIDinit(var1);
        thisRef.bodies = var1;
        thisRef.joints = null;
        thisRef.collideConnected = 0;
        thisRef.frequencyHz = 0.0;
        thisRef.dampingRatio = 0.0;
        return;
    },

    classInitCheck : function() {
        if (!ojdjConstantVolumeJointDef.__initialized) {
            ojdjConstantVolumeJointDef.__initialized = true;
            var thePrototype = ojdjConstantVolumeJointDef.Create.prototype;
            thePrototype.instanceOf = ojdjConstantVolumeJointDef.instanceOf;
            thePrototype.ClassgetClass = ojdjConstantVolumeJointDef.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojdjJointDef.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var juArrayList = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 174,
    __implementedTypes : [1,180,175,179,178,174,26,2,176,177],
    EMPTY_ELEMENTDATA : null, // declared in java.util.ArrayList
    DEFAULTCAPACITY_EMPTY_ELEMENTDATA : null, // declared in java.util.ArrayList

    Create : function() {
        this.modCount = 0; // declared in java.util.AbstractList
        this.size = 0; // declared in java.util.ArrayList
        this.elementData = null; // declared in java.util.ArrayList
    },

    instanceOf : function(aType) {
        return juArrayList.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return juArrayList;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    A1jlObjectfinishToArrayA1jlObjectjuIterator : function(p0,p1) {
         return juAbstractCollection.A1jlObjectfinishToArrayA1jlObjectjuIterator(p0,p1);
    },

    INThugeCapacityINT : function(p0) {
         return juAbstractCollection.INThugeCapacityINT(p0);
    },

    juListofA1jlObject : function(p0) {
         return juList.juListofA1jlObject(p0);
    },

    VOIDclinit : function() {
        var __label__ = null;
        var var0 = bytecoder.newArray(0,null); // type is REFERENCE value type is REFERENCE
        juArrayList.EMPTY_ELEMENTDATA = var0;
        var var1 = bytecoder.newArray(0,null); // type is REFERENCE value type is REFERENCE
        juArrayList.DEFAULTCAPACITY_EMPTY_ELEMENTDATA = var1;
        return;
    },

    INTsize : function(thisRef) {
        var __label__ = null;
        return thisRef.size;
    },

    A1jlObjecttoArrayA1jlObject : function(thisRef,a) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = a.data.length; // type is INT value type is INT
            var var1 = thisRef.size; // type is INT value type is INT
            if ((var0 >= var1)) {
                __label__ = 25;
                break $S_0;
            }
            __label__ = 9;
            }
        for(;;) switch (__label__) {
            case 9 :
            // NORMAL
                var var5 = juArrays.A1jlObjectcopyOfA1jlObjectINTjlClass(thisRef.elementData,thisRef.size,a.ClassgetClass()); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3b7302c3
                return var5;
            case 25 :
            // NORMAL
                $S_25 : {
                // NORMAL
                    jlSystem.VOIDarraycopyjlObjectINTjlObjectINTINT(thisRef.elementData,0,a,0,thisRef.size);
                    var var8 = a.data.length; // type is INT value type is INT
                    var var9 = thisRef.size; // type is INT value type is INT
                    if ((var8 <= var9)) {
                        return a;
                    }
                    }
                var var10 = thisRef.size; // type is INT value type is INT
                a.data[var10] = null;
                return a;
        }
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        juAbstractList.VOIDinit(thisRef);
        var var0 = juArrayList.DEFAULTCAPACITY_EMPTY_ELEMENTDATA; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1ef82a87
        thisRef.elementData = var0;
        return;
    },

    INThashCode : function(thisRef) {
        var __label__ = null;
        var local_1_INT = thisRef.modCount; // type is INT value type is INT
        var var4 = thisRef.INThashCodeRangeINTINT(thisRef,0,thisRef.size); // type is INT value type is INT
        var local_2_INT = var4; // type is INT value type is INT
        thisRef.VOIDcheckForComodificationINT(thisRef,local_1_INT);
        return local_2_INT;
    },

    INThashCodeRangeINTINT : function(thisRef,from,to) {
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 2
        var var13 = null; // type is INT # of inits = 1
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_5_INT = null; // type is INT # of inits = 3
        var local_4_INT = null; // type is INT # of inits = 3
        var var17 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_3_REFERENCE = thisRef.elementData; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@660adf45
            var var3 = local_3_REFERENCE.data.length; // type is INT value type is INT
            if ((to <= var3)) {
                __label__ = 19;
                break $S_0;
            }
            __label__ = 11;
            }
        for(;;) switch (__label__) {
            case 11 :
            // NORMAL
                var var21 = new juConcurrentModificationException.Create(); // type is REFERENCE value type is REFERENCE
                juConcurrentModificationException.VOIDinit(var21);
                throw var21;
            case 19 :
            // NORMAL
                $S_19 : {
                // NORMAL
                    local_4_INT = 1; // type is INT value type is INT
                    local_5_INT = from; // type is INT value type is INT
                    __label__ = 25;
                    }
                $L_25 : for (;;) {
                    $S_25 : {
                    // NORMAL
                        var var7 = local_5_INT; // type is INT value type is INT
                        if ((var7 >= to)) {
                            return local_4_INT;
                        }
                        }
                    $S_31 : {
                    // NORMAL
                        var var10 = local_3_REFERENCE.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                        local_6_REFERENCE = var10; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@6a59cb11
                        var13 = (31 * local_4_INT); // type is INT value type is INT
                        var var14 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@6a59cb11
                        if (var14 != null ) {
                            __label__ = 51;
                            break $S_31;
                        }
                        __label__ = 47;
                        }
                    $M_51_47 : for(;;) switch (__label__) {
                        case 51 :
                        // NORMAL
                            var var16 = local_6_REFERENCE.INThashCode(local_6_REFERENCE); // type is INT value type is INT
                            var17 = var16; // type is INT value type is INT
                            break $M_51_47;
                        case 47 :
                        // NORMAL
                            var17 = 0; // type is INT value type is INT
                            break $M_51_47;
                    }
                    local_4_INT = (var13 + var17); // type is INT value type is INT
                    local_5_INT = (local_5_INT + 1); // type is INT value type is INT
                    __label__ = 25;
                    continue $L_25;
                }
        }
    },

    VOIDcheckForComodificationINT : function(thisRef,expectedModCount) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.modCount; // type is INT value type is INT
            if ((var0 == expectedModCount)) {
                return;
            }
            }
        var var1 = new juConcurrentModificationException.Create(); // type is REFERENCE value type is REFERENCE
        juConcurrentModificationException.VOIDinit(var1);
        throw var1;
    },

    BOOLEANequalsjlObject : function(thisRef,o) {
        var var8 = null; // type is BOOLEAN # of inits = 2
        var local_2_INT = null; // type is INT # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((o != thisRef)) {
                break $S_0;
            }
            return 1;
            }
        $S_7 : {
        // NORMAL
            var var0 = (o == null ? false : o.instanceOf(juList)); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                break $S_7;
            }
            return 0;
            }
        $S_16 : {
        // NORMAL
            local_2_INT = thisRef.modCount; // type is INT value type is INT
            var var4 = o.ClassgetClass(); // type is REFERENCE value type is REFERENCE
            if ((var4 != juArrayList)) {
                __label__ = 41;
                break $S_16;
            }
            __label__ = 30;
            }
        $M_41_30 : for(;;) switch (__label__) {
            case 41 :
            // NORMAL
                var var6 = thisRef.BOOLEANequalsRangejuListINTINT(thisRef,o,0,thisRef.size); // type is BOOLEAN value type is BOOLEAN
                var8 = var6; // type is BOOLEAN value type is BOOLEAN
                break $M_41_30;
            case 30 :
            // NORMAL
                var var7 = thisRef.BOOLEANequalsArrayListjuArrayList(thisRef,o); // type is BOOLEAN value type is BOOLEAN
                var8 = var7; // type is BOOLEAN value type is BOOLEAN
                break $M_41_30;
        }
        var local_3_BOOLEAN = var8; // type is BOOLEAN value type is BOOLEAN
        thisRef.VOIDcheckForComodificationINT(thisRef,local_2_INT);
        return local_3_BOOLEAN;
    },

    BOOLEANequalsArrayListjuArrayList : function(thisRef,other) {
        var local_3_INT = null; // type is INT # of inits = 2
        var var8 = null; // type is INT # of inits = 2
        var local_4_INT = null; // type is INT # of inits = 3
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_2_INT = null; // type is INT # of inits = 2
        var local_7_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_2_INT = other.modCount; // type is INT value type is INT
            local_3_INT = thisRef.size; // type is INT value type is INT
            var var6 = local_3_INT; // type is INT value type is INT
            var var7 = other.size; // type is INT value type is INT
            if ((var6 != var7)) {
                __label__ = 22;
                break $S_0;
            }
            __label__ = 18;
            }
        $M_22_18 : for(;;) switch (__label__) {
            case 18 :
            // NORMAL
                var8 = 1; // type is INT value type is INT
                break $M_22_18;
            case 22 :
            // NORMAL
                var8 = 0; // type is INT value type is INT
                break $M_22_18;
        }
        $S_23 : {
        // NORMAL
            local_4_INT = var8; // type is INT value type is INT
            if ((var8 == 0)) {
                __label__ = 100;
                break $S_23;
            }
            __label__ = 29;
            }
        $M_29_100 : for(;;) switch (__label__) {
            case 100 :
            // NORMAL
                other.VOIDcheckForComodificationINT(other,local_2_INT);
                return local_4_INT;
            case 29 :
            // NORMAL
                $S_29 : {
                // NORMAL
                    local_5_REFERENCE = other.elementData; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@7997e42a
                    local_6_REFERENCE = thisRef.elementData; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@2ce0e3c8
                    var var15 = local_3_INT; // type is INT value type is INT
                    var var17 = local_6_REFERENCE.data.length; // type is INT value type is INT
                    if ((var15 > var17)) {
                        __label__ = 55;
                        break $S_29;
                    }
                    __label__ = 48;
                    }
                $M_55_48 : for(;;) switch (__label__) {
                    case 55 :
                    // NORMAL
                        var var21 = new juConcurrentModificationException.Create(); // type is REFERENCE value type is REFERENCE
                        juConcurrentModificationException.VOIDinit(var21);
                        throw var21;
                    case 48 :
                    // NORMAL
                        $S_48 : {
                        // NORMAL
                            var var18 = local_3_INT; // type is INT value type is INT
                            var var20 = local_5_REFERENCE.data.length; // type is INT value type is INT
                            if ((var18 <= var20)) {
                                break $S_48;
                            }
                            __label__ = 55;
                            continue $M_55_48;
                            }
                        $S_63 : {
                        // NORMAL
                            local_7_INT = 0; // type is INT value type is INT
                            __label__ = 66;
                            }
                        $L_66 : for (;;) {
                            $S_66 : {
                            // NORMAL
                                var var24 = local_7_INT; // type is INT value type is INT
                                var var25 = local_3_INT; // type is INT value type is INT
                                if ((var24 >= var25)) {
                                    __label__ = 100;
                                    continue $M_29_100;
                                }
                                }
                            $S_72 : {
                            // NORMAL
                                var var28 = local_6_REFERENCE.data[local_7_INT]; // type is REFERENCE value type is REFERENCE
                                var var31 = local_5_REFERENCE.data[local_7_INT]; // type is REFERENCE value type is REFERENCE
                                var var32 = juObjects.BOOLEANequalsjlObjectjlObject(var28,var31); // type is BOOLEAN value type is BOOLEAN
                                if ((var32 != 0)) {
                                    __label__ = 94;
                                    break $S_72;
                                }
                                __label__ = 88;
                                }
                            for(;;) switch (__label__) {
                                case 88 :
                                // NORMAL
                                    local_4_INT = 0; // type is INT value type is INT
                                    __label__ = 100;
                                    continue $M_29_100;
                                case 94 :
                                // NORMAL
                                    local_7_INT = (local_7_INT + 1); // type is INT value type is INT
                                    __label__ = 66;
                                    continue $L_66;
                            }
                        }
                }
        }
    },

    BOOLEANequalsRangejuListINTINT : function(thisRef,other,from,to) {
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_4_REFERENCE = thisRef.elementData; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@7d47dd4
            var var3 = local_4_REFERENCE.data.length; // type is INT value type is INT
            if ((to <= var3)) {
                __label__ = 21;
                break $S_0;
            }
            __label__ = 13;
            }
        for(;;) switch (__label__) {
            case 13 :
            // NORMAL
                var var4 = new juConcurrentModificationException.Create(); // type is REFERENCE value type is REFERENCE
                juConcurrentModificationException.VOIDinit(var4);
                throw var4;
            case 21 :
            // NORMAL
                $S_21 : {
                // NORMAL
                    var var5 = other.juIteratoriterator(other); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@47e74b6a
                    local_5_REFERENCE = var5; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@f3b06b
                    __label__ = 29;
                    }
                $L_29 : for (;;) {
                    $S_29 : {
                    // NORMAL
                        if ((from >= to)) {
                            __label__ = 69;
                            break $S_29;
                        }
                        __label__ = 34;
                        }
                    for(;;) switch (__label__) {
                        case 34 :
                        // NORMAL
                            $S_34 : {
                            // NORMAL
                                var var8 = local_5_REFERENCE.BOOLEANhasNext(local_5_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                if ((var8 == 0)) {
                                    return 0;
                                }
                                }
                            $S_44 : {
                            // NORMAL
                                var var10 = local_4_REFERENCE.data[from]; // type is REFERENCE value type is REFERENCE
                                var var12 = local_5_REFERENCE.jlObjectnext(local_5_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@ee0599d
                                var var13 = juObjects.BOOLEANequalsjlObjectjlObject(var10,var12); // type is BOOLEAN value type is BOOLEAN
                                if ((var13 != 0)) {
                                    break $S_44;
                                }
                                return 0;
                                }
                            var local_2_INT = (from + 1); // type is INT value type is INT
                            from = local_2_INT; // type is INT value type is INT
                            __label__ = 29;
                            continue $L_29;
                        case 69 :
                        // NORMAL
                            $S_69 : {
                            // NORMAL
                                var var16 = local_5_REFERENCE.BOOLEANhasNext(local_5_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                if ((var16 != 0)) {
                                    __label__ = 83;
                                    break $S_69;
                                }
                                __label__ = 79;
                                }
                            for(;;) switch (__label__) {
                                case 79 :
                                // NORMAL
                                    var var17 = 1; // type is INT value type is INT
                                    return var17;
                                case 83 :
                                // NORMAL
                                    var var17 = 0; // type is INT value type is INT
                                    return var17;
                            }
                    }
                }
        }
    },

    juIteratoriterator : function(thisRef) {
        var __label__ = null;
        var var0 = new juArrayList$Itr.Create(); // type is REFERENCE value type is REFERENCE
        juArrayList$Itr.VOIDinitjuArrayList(var0,thisRef);
        return var0;
    },

    juListIteratorlistIterator : function(thisRef) {
        var __label__ = null;
        var var0 = new juArrayList$ListItr.Create(); // type is REFERENCE value type is REFERENCE
        juArrayList$ListItr.VOIDinitjuArrayListINT(var0,thisRef,0);
        return var0;
    },

    juListIteratorlistIteratorINT : function(thisRef,index) {
        var __label__ = null;
        thisRef.VOIDrangeCheckForAddINT(thisRef,index);
        var var0 = new juArrayList$ListItr.Create(); // type is REFERENCE value type is REFERENCE
        juArrayList$ListItr.VOIDinitjuArrayListINT(var0,thisRef,index);
        return var0;
    },

    VOIDrangeCheckForAddINT : function(thisRef,index) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.size; // type is INT value type is INT
            if ((index > var0)) {
                __label__ = 12;
                break $S_0;
            }
            __label__ = 8;
            }
        $M_8_12 : for(;;) switch (__label__) {
            case 12 :
            // NORMAL
                var var1 = new jlIndexOutOfBoundsException.Create(); // type is REFERENCE value type is REFERENCE
                var var2 = thisRef.jlStringoutOfBoundsMsgINT(thisRef,index); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1a2c419
                jlIndexOutOfBoundsException.VOIDinitjlString(var1,var2);
                throw var1;
            case 8 :
            // NORMAL
                if ((index >= 0)) {
                    return;
                }
                __label__ = 12;
                continue $M_8_12;
        }
    },

    jlStringoutOfBoundsMsgINT : function(thisRef,index) {
        var __label__ = null;
        var var0 = new jlStringBuilder.Create(); // type is REFERENCE value type is REFERENCE
        jlStringBuilder.VOIDinit(var0);
        var var1 = var0.jlStringBuilderappendjlString(var0,bytecoder.stringpool[59]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2bf4fb00
        var var2 = var1.jlStringBuilderappendINT(var1,index); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1d147d61
        var var3 = var2.jlStringBuilderappendjlString(var2,bytecoder.stringpool[60]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@56b30e68
        var var5 = var3.jlStringBuilderappendINT(var3,thisRef.size); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6baa8d57
        var var6 = var5.jlStringtoString(var5); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@678a57d9
        return var6;
    },

    BOOLEANcontainsjlObject : function(thisRef,o) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.INTindexOfjlObject(thisRef,o); // type is INT value type is INT
            if ((var0 < 0)) {
                __label__ = 12;
                break $S_0;
            }
            __label__ = 8;
            }
        for(;;) switch (__label__) {
            case 12 :
            // NORMAL
                var var1 = 0; // type is INT value type is INT
                return var1;
            case 8 :
            // NORMAL
                var var1 = 1; // type is INT value type is INT
                return var1;
        }
    },

    INTindexOfjlObject : function(thisRef,o) {
        var __label__ = null;
        var var1 = thisRef.INTindexOfRangejlObjectINTINT(thisRef,o,0,thisRef.size); // type is INT value type is INT
        return var1;
    },

    INTindexOfRangejlObjectINTINT : function(thisRef,o,start,end) {
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_5_INT = null; // type is INT # of inits = 6
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_4_REFERENCE = thisRef.elementData; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@13af9c29
            if (o != null ) {
                __label__ = 39;
                break $S_0;
            }
            __label__ = 10;
            }
        for(;;) switch (__label__) {
            case 39 :
            // NORMAL
                $S_39 : {
                // NORMAL
                    local_5_INT = start; // type is INT value type is INT
                    __label__ = 42;
                    }
                $L_42 : for (;;) {
                    $S_42 : {
                    // NORMAL
                        var var3 = local_5_INT; // type is INT value type is INT
                        if ((var3 >= end)) {
                            return -1;
                        }
                        }
                    $S_48 : {
                    // NORMAL
                        var var6 = local_4_REFERENCE.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                        var var7 = o.BOOLEANequalsjlObject(o,var6); // type is BOOLEAN value type is BOOLEAN
                        if ((var7 == 0)) {
                            break $S_48;
                        }
                        return local_5_INT;
                        }
                    local_5_INT = (local_5_INT + 1); // type is INT value type is INT
                    __label__ = 42;
                    continue $L_42;
                }
            case 10 :
            // NORMAL
                $S_10 : {
                // NORMAL
                    local_5_INT = start; // type is INT value type is INT
                    __label__ = 13;
                    }
                $L_13 : for (;;) {
                    $S_13 : {
                    // NORMAL
                        var var8 = local_5_INT; // type is INT value type is INT
                        if ((var8 >= end)) {
                            __label__ = 36;
                            break $S_13;
                        }
                        __label__ = 19;
                        }
                    for(;;) switch (__label__) {
                        case 19 :
                        // NORMAL
                            $S_19 : {
                            // NORMAL
                                var var11 = local_4_REFERENCE.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                                if (var11 != null ) {
                                    break $S_19;
                                }
                                return local_5_INT;
                                }
                            local_5_INT = (local_5_INT + 1); // type is INT value type is INT
                            __label__ = 13;
                            continue $L_13;
                        case 36 :
                        // NORMAL
                            return -1;
                    }
                }
        }
    },

    jlObjectgetINT : function(thisRef,index) {
        var __label__ = null;
        var var1 = juObjects.INTcheckIndexINTINT(index,thisRef.size); // type is INT value type is INT
        var var2 = thisRef.jlObjectelementDataINT(thisRef,index); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2a4299da
        return var2;
    },

    jlObjectelementDataINT : function(thisRef,index) {
        var __label__ = null;
        var var1 = thisRef.elementData.data[index]; // type is REFERENCE value type is REFERENCE
        return var1;
    },

    classInitCheck : function() {
        if (!juArrayList.__initialized) {
            juArrayList.__initialized = true;
            var thePrototype = juArrayList.Create.prototype;
            thePrototype.instanceOf = juArrayList.instanceOf;
            thePrototype.ClassgetClass = juArrayList.ClassgetClass;
            thePrototype.jlObjectelementDataINT = juArrayList.jlObjectelementDataINT;
            thePrototype.jlObjectgetINT = juArrayList.jlObjectgetINT;
            thePrototype.INTindexOfRangejlObjectINTINT = juArrayList.INTindexOfRangejlObjectINTINT;
            thePrototype.INTindexOfjlObject = juArrayList.INTindexOfjlObject;
            thePrototype.BOOLEANcontainsjlObject = juArrayList.BOOLEANcontainsjlObject;
            thePrototype.jlStringoutOfBoundsMsgINT = juArrayList.jlStringoutOfBoundsMsgINT;
            thePrototype.VOIDrangeCheckForAddINT = juArrayList.VOIDrangeCheckForAddINT;
            thePrototype.juListIteratorlistIteratorINT = juArrayList.juListIteratorlistIteratorINT;
            thePrototype.juListIteratorlistIterator = juArrayList.juListIteratorlistIterator;
            thePrototype.juIteratoriterator = juArrayList.juIteratoriterator;
            thePrototype.BOOLEANequalsRangejuListINTINT = juArrayList.BOOLEANequalsRangejuListINTINT;
            thePrototype.BOOLEANequalsArrayListjuArrayList = juArrayList.BOOLEANequalsArrayListjuArrayList;
            thePrototype.BOOLEANequalsjlObject = juArrayList.BOOLEANequalsjlObject;
            thePrototype.VOIDcheckForComodificationINT = juArrayList.VOIDcheckForComodificationINT;
            thePrototype.INThashCodeRangeINTINT = juArrayList.INThashCodeRangeINTINT;
            thePrototype.INThashCode = juArrayList.INThashCode;
            thePrototype.A1jlObjecttoArrayA1jlObject = juArrayList.A1jlObjecttoArrayA1jlObject;
            thePrototype.INTsize = juArrayList.INTsize;
            thePrototype.BOOLEANcontainsAlljuCollection = juAbstractCollection.BOOLEANcontainsAlljuCollection;
            thePrototype.jlStringtoString = juAbstractCollection.jlStringtoString;
            juAbstractList.classInitCheck();
            jlObject.classInitCheck();
            juRandomAccess.classInitCheck();
            juList.classInitCheck();
            jlIterable.classInitCheck();
            jlCloneable.classInitCheck();
            jiSerializable.classInitCheck();
            juAbstractCollection.classInitCheck();
            juCollection.classInitCheck();
            jlrArray.classInitCheck();
            juArrayList.VOIDclinit();
        }
    },

};

var juAbstractList = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 175,
    __implementedTypes : [1,175,179,178,176,177],

    instanceOf : function(aType) {
        return juAbstractList.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return juAbstractList;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    A1jlObjectfinishToArrayA1jlObjectjuIterator : function(p0,p1) {
         return juAbstractCollection.A1jlObjectfinishToArrayA1jlObjectjuIterator(p0,p1);
    },

    INThugeCapacityINT : function(p0) {
         return juAbstractCollection.INThugeCapacityINT(p0);
    },

    juListofA1jlObject : function(p0) {
         return juList.juListofA1jlObject(p0);
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        juAbstractCollection.VOIDinit(thisRef);
        thisRef.modCount = 0;
        return;
    },

    INThashCode : function(thisRef) {
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 2
        var var10 = null; // type is INT # of inits = 1
        var var14 = null; // type is INT # of inits = 2
        var local_1_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_1_INT = 1; // type is INT value type is INT
            var var2 = thisRef.juIteratoriterator(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@48cd44ab
            local_2_REFERENCE = var2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@223207ad
            __label__ = 7;
            }
        $L_7 : for (;;) {
            $S_7 : {
            // NORMAL
                var var5 = local_2_REFERENCE.BOOLEANhasNext(local_2_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                if ((var5 == 0)) {
                    return local_1_INT;
                }
                }
            $S_16 : {
            // NORMAL
                var var7 = local_2_REFERENCE.jlObjectnext(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@51e782ed
                local_3_REFERENCE = var7; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@16b8a6fc
                var10 = (31 * local_1_INT); // type is INT value type is INT
                var var11 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@16b8a6fc
                if (var11 != null ) {
                    __label__ = 35;
                    break $S_16;
                }
                __label__ = 31;
                }
            $M_35_31 : for(;;) switch (__label__) {
                case 31 :
                // NORMAL
                    var14 = 0; // type is INT value type is INT
                    break $M_35_31;
                case 35 :
                // NORMAL
                    var var13 = local_3_REFERENCE.INThashCode(local_3_REFERENCE); // type is INT value type is INT
                    var14 = var13; // type is INT value type is INT
                    break $M_35_31;
            }
            local_1_INT = (var10 + var14); // type is INT value type is INT
            __label__ = 7;
            continue $L_7;
        }
    },

    juIteratoriterator : function(thisRef) {
        var __label__ = null;
        var var0 = new juAbstractList$Itr.Create(); // type is REFERENCE value type is REFERENCE
        juAbstractList$Itr.VOIDinitjuAbstractList(var0,thisRef);
        return var0;
    },

    BOOLEANequalsjlObject : function(thisRef,o) {
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((o != thisRef)) {
                break $S_0;
            }
            return 1;
            }
        $S_7 : {
        // NORMAL
            var var0 = (o == null ? false : o.instanceOf(juList)); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                break $S_7;
            }
            return 0;
            }
        $S_16 : {
        // NORMAL
            var var1 = thisRef.juListIteratorlistIterator(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3081c98
            local_2_REFERENCE = var1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5d148614
            var var3 = o.juListIteratorlistIterator(o); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@30c1ac84
            local_3_REFERENCE = var3; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@47921b20
            __label__ = 31;
            }
        $L_31 : for (;;) {
            $S_31 : {
            // NORMAL
                var var6 = local_2_REFERENCE.BOOLEANhasNext(local_2_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                if ((var6 == 0)) {
                    __label__ = 93;
                    break $S_31;
                }
                __label__ = 40;
                }
            $M_40_93 : for(;;) switch (__label__) {
                case 93 :
                // NORMAL
                    $S_93 : {
                    // NORMAL
                        var var21 = local_2_REFERENCE.BOOLEANhasNext(local_2_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                        if ((var21 != 0)) {
                            __label__ = 115;
                            break $S_93;
                        }
                        __label__ = 102;
                        }
                    $M_115_102 : for(;;) switch (__label__) {
                        case 115 :
                        // NORMAL
                            var var24 = 0; // type is INT value type is INT
                            return var24;
                        case 102 :
                        // NORMAL
                            $S_102 : {
                            // NORMAL
                                var var23 = local_3_REFERENCE.BOOLEANhasNext(local_3_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                                if ((var23 != 0)) {
                                    __label__ = 115;
                                    continue $M_115_102;
                                }
                                }
                            var var24 = 1; // type is INT value type is INT
                            return var24;
                    }
                case 40 :
                // NORMAL
                    $S_40 : {
                    // NORMAL
                        var var8 = local_3_REFERENCE.BOOLEANhasNext(local_3_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                        if ((var8 == 0)) {
                            __label__ = 93;
                            continue $M_40_93;
                        }
                        }
                    $S_49 : {
                    // NORMAL
                        var var10 = local_2_REFERENCE.jlObjectnext(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@533d533d
                        local_4_REFERENCE = var10; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@79cd6113
                        var var13 = local_3_REFERENCE.jlObjectnext(local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4ebe075
                        local_5_REFERENCE = var13; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@cc154f1
                        var var15 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@79cd6113
                        if (var15 != null ) {
                            __label__ = 78;
                            break $S_49;
                        }
                        __label__ = 70;
                        }
                    $M_78_70 : for(;;) switch (__label__) {
                        case 78 :
                        // NORMAL
                            var var18 = local_4_REFERENCE.BOOLEANequalsjlObject(local_4_REFERENCE,local_5_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                            if ((var18 != 0)) {
                                break $M_78_70;
                            }
                            return 0;
                        case 70 :
                        // NORMAL
                            $S_70 : {
                            // NORMAL
                                var var19 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@cc154f1
                                if (var19 != null ) {
                                    return 0;
                                }
                                }
                            break $M_78_70;
                    }
                    __label__ = 31;
                    continue $L_31;
            }
        }
    },

    juListIteratorlistIterator : function(thisRef) {
        var __label__ = null;
        var var0 = thisRef.juListIteratorlistIteratorINT(thisRef,0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@187259d4
        return var0;
    },

    juListIteratorlistIteratorINT : function(thisRef,index) {
        var __label__ = null;
        thisRef.VOIDrangeCheckForAddINT(thisRef,index);
        var var0 = new juAbstractList$ListItr.Create(); // type is REFERENCE value type is REFERENCE
        juAbstractList$ListItr.VOIDinitjuAbstractListINT(var0,thisRef,index);
        return var0;
    },

    VOIDrangeCheckForAddINT : function(thisRef,index) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((index < 0)) {
                __label__ = 12;
                break $S_0;
            }
            __label__ = 4;
            }
        $M_12_4 : for(;;) switch (__label__) {
            case 4 :
            // NORMAL
                var var0 = thisRef.INTsize(thisRef); // type is INT value type is INT
                if ((index <= var0)) {
                    return;
                }
                __label__ = 12;
                continue $M_12_4;
            case 12 :
            // NORMAL
                var var1 = new jlIndexOutOfBoundsException.Create(); // type is REFERENCE value type is REFERENCE
                var var2 = thisRef.jlStringoutOfBoundsMsgINT(thisRef,index); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@57951c50
                jlIndexOutOfBoundsException.VOIDinitjlString(var1,var2);
                throw var1;
        }
    },

    jlStringoutOfBoundsMsgINT : function(thisRef,index) {
        var __label__ = null;
        var var0 = new jlStringBuilder.Create(); // type is REFERENCE value type is REFERENCE
        jlStringBuilder.VOIDinit(var0);
        var var1 = var0.jlStringBuilderappendjlString(var0,bytecoder.stringpool[59]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5a958bc3
        var var2 = var1.jlStringBuilderappendINT(var1,index); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@58c8e865
        var var3 = var2.jlStringBuilderappendjlString(var2,bytecoder.stringpool[60]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7bb5c96
        var var4 = thisRef.INTsize(thisRef); // type is INT value type is INT
        var var5 = var3.jlStringBuilderappendINT(var3,var4); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@60e7979a
        var var6 = var5.jlStringtoString(var5); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@165ad3d6
        return var6;
    },

    INTindexOfjlObject : function(thisRef,o) {
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.juListIteratorlistIterator(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4750a38
            local_2_REFERENCE = var0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@62e451
            if (o != null ) {
                __label__ = 34;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_34_9 : for(;;) switch (__label__) {
            case 34 :
            // NORMAL
                for (;;) {
                    $S_34 : {
                    // NORMAL
                        var var9 = local_2_REFERENCE.BOOLEANhasNext(local_2_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                        if ((var9 == 0)) {
                            return -1;
                        }
                        }
                    $S_43 : {
                    // NORMAL
                        var var11 = local_2_REFERENCE.jlObjectnext(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2c7b181f
                        var var12 = o.BOOLEANequalsjlObject(o,var11); // type is BOOLEAN value type is BOOLEAN
                        if ((var12 == 0)) {
                            __label__ = 34;
                            continue $M_34_9;
                        }
                        }
                    var var14 = local_2_REFERENCE.INTpreviousIndex(local_2_REFERENCE); // type is INT value type is INT
                    return var14;
                }
            case 9 :
            // NORMAL
                for (;;) {
                    $S_9 : {
                    // NORMAL
                        var var3 = local_2_REFERENCE.BOOLEANhasNext(local_2_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                        if ((var3 == 0)) {
                            return -1;
                        }
                        }
                    $S_18 : {
                    // NORMAL
                        var var5 = local_2_REFERENCE.jlObjectnext(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@56caa7c1
                        if (var5 != null ) {
                            __label__ = 9;
                            continue $M_34_9;
                        }
                        }
                    var var7 = local_2_REFERENCE.INTpreviousIndex(local_2_REFERENCE); // type is INT value type is INT
                    return var7;
                }
        }
    },

    classInitCheck : function() {
        if (!juAbstractList.__initialized) {
            juAbstractList.__initialized = true;
            juAbstractCollection.classInitCheck();
            jlObject.classInitCheck();
            juList.classInitCheck();
            jlIterable.classInitCheck();
            juCollection.classInitCheck();
        }
    },

};

var juAbstractCollection = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 176,
    __implementedTypes : [1,178,176,177],

    instanceOf : function(aType) {
        return juAbstractCollection.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return juAbstractCollection;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    jlStringtoString : function(thisRef) {
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_1_REFERENCE = null; // type is REFERENCE # of inits = 2
        var var14 = null; // type is REFERENCE # of inits = 2
        var var11 = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.juIteratoriterator(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@18cc23f3
            local_1_REFERENCE = var0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5cc10e80
            var var3 = local_1_REFERENCE.BOOLEANhasNext(local_1_REFERENCE); // type is BOOLEAN value type is BOOLEAN
            if ((var3 != 0)) {
                break $S_0;
            }
            return bytecoder.stringpool[61];
            }
        $S_17 : {
        // NORMAL
            var var4 = new jlStringBuilder.Create(); // type is REFERENCE value type is REFERENCE
            jlStringBuilder.VOIDinit(var4);
            local_2_REFERENCE = var4; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@154c3ed2
            var var7 = local_2_REFERENCE.jlStringBuilderappendCHAR(local_2_REFERENCE,91); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5d9ac716
            __label__ = 32;
            }
        $L_32 : for (;;) {
            $S_32 : {
            // NORMAL
                var var9 = local_1_REFERENCE.jlObjectnext(local_1_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@15b3bcda
                local_3_REFERENCE = var9; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4884231c
                var11 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@154c3ed2
                var var12 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4884231c
                if ((var12 != thisRef)) {
                    __label__ = 50;
                    break $S_32;
                }
                __label__ = 45;
                }
            $M_50_45 : for(;;) switch (__label__) {
                case 50 :
                // NORMAL
                    var14 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4884231c
                    break $M_50_45;
                case 45 :
                // NORMAL
                    var14 = bytecoder.stringpool[62]; // type is REFERENCE value type is REFERENCE
                    break $M_50_45;
            }
            $S_51 : {
            // NORMAL
                var var15 = var11.jlStringBuilderappendjlObject(var11,var14); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@92f9f75
                var var17 = local_1_REFERENCE.BOOLEANhasNext(local_1_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                if ((var17 != 0)) {
                    __label__ = 74;
                    break $S_51;
                }
                __label__ = 64;
                }
            for(;;) switch (__label__) {
                case 74 :
                // NORMAL
                    var var19 = local_2_REFERENCE.jlStringBuilderappendCHAR(local_2_REFERENCE,44); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7085e618
                    var var20 = var19.jlStringBuilderappendCHAR(var19,32); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7b2c2d69
                    __label__ = 32;
                    continue $L_32;
                case 64 :
                // NORMAL
                    var var22 = local_2_REFERENCE.jlStringBuilderappendCHAR(local_2_REFERENCE,93); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@73f10bba
                    var var23 = var22.jlStringtoString(var22); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6d0e686
                    return var23;
            }
        }
    },

    A1jlObjecttoArrayA1jlObject : function(thisRef,a) {
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_5_INT = null; // type is INT # of inits = 3
        var local_2_INT = null; // type is INT # of inits = 1
        var var9 = null; // type is REFERENCE # of inits = 2
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.INTsize(thisRef); // type is INT value type is INT
            local_2_INT = var0; // type is INT value type is INT
            var var3 = a.data.length; // type is INT value type is INT
            var var4 = local_2_INT; // type is INT value type is INT
            if ((var3 < var4)) {
                __label__ = 15;
                break $S_0;
            }
            __label__ = 11;
            }
        $M_15_11 : for(;;) switch (__label__) {
            case 15 :
            // NORMAL
                var var6 = a.ClassgetClass().jlClassgetComponentType(a.ClassgetClass()); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@147ec837
                var var8 = bytecoder.newArray(local_2_INT,null); // type is REFERENCE value type is REFERENCE
                var9 = var8; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1a89a11
                break $M_15_11;
            case 11 :
            // NORMAL
                var9 = a; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@15e28738
                break $M_15_11;
        }
        $S_29 : {
        // NORMAL
            local_3_REFERENCE = var9; // type is REFERENCE value type is REFERENCE
            var var11 = thisRef.juIteratoriterator(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@22694be8
            local_4_REFERENCE = var11; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5d309f22
            local_5_INT = 0; // type is INT value type is INT
            __label__ = 39;
            }
        $L_39 : for (;;) {
            $S_39 : {
            // NORMAL
                var var15 = local_5_INT; // type is INT value type is INT
                var var17 = local_3_REFERENCE.data.length; // type is INT value type is INT
                if ((var15 >= var17)) {
                    __label__ = 123;
                    break $S_39;
                }
                __label__ = 46;
                }
            for(;;) switch (__label__) {
                case 46 :
                // NORMAL
                    $S_46 : {
                    // NORMAL
                        var var19 = local_4_REFERENCE.BOOLEANhasNext(local_4_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                        if ((var19 != 0)) {
                            __label__ = 106;
                            break $S_46;
                        }
                        __label__ = 56;
                        }
                    for(;;) switch (__label__) {
                        case 56 :
                        // NORMAL
                            $S_56 : {
                            // NORMAL
                                var var20 = local_3_REFERENCE; // type is REFERENCE value type is REFERENCE
                                if ((a != var20)) {
                                    __label__ = 69;
                                    break $S_56;
                                }
                                __label__ = 61;
                                }
                            for(;;) switch (__label__) {
                                case 69 :
                                // NORMAL
                                    $S_69 : {
                                    // NORMAL
                                        var var21 = a.data.length; // type is INT value type is INT
                                        var var22 = local_5_INT; // type is INT value type is INT
                                        if ((var21 >= var22)) {
                                            __label__ = 83;
                                            break $S_69;
                                        }
                                        __label__ = 76;
                                        }
                                    for(;;) switch (__label__) {
                                        case 76 :
                                        // NORMAL
                                            var var43 = juArrays.A1jlObjectcopyOfA1jlObjectINT(local_3_REFERENCE,local_5_INT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@6b1cba0a
                                            return var43;
                                        case 83 :
                                        // NORMAL
                                            $S_83 : {
                                            // NORMAL
                                                jlSystem.VOIDarraycopyjlObjectINTjlObjectINTINT(local_3_REFERENCE,0,a,0,local_5_INT);
                                                var var25 = a.data.length; // type is INT value type is INT
                                                var var26 = local_5_INT; // type is INT value type is INT
                                                if ((var25 <= var26)) {
                                                    return a;
                                                }
                                                }
                                            var var27 = local_5_INT; // type is INT value type is INT
                                            a.data[var27] = null;
                                            return a;
                                    }
                                case 61 :
                                // NORMAL
                                    var var28 = local_3_REFERENCE; // type is REFERENCE value type is REFERENCE
                                    var var29 = local_5_INT; // type is INT value type is INT
                                    var28.data[var29] = null;
                                    return a;
                            }
                        case 106 :
                        // NORMAL
                            var var37 = local_3_REFERENCE; // type is REFERENCE value type is REFERENCE
                            var var38 = local_5_INT; // type is INT value type is INT
                            var var40 = local_4_REFERENCE.jlObjectnext(local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@fdcf0b0
                            var37.data[var38] = var40;
                            local_5_INT = (local_5_INT + 1); // type is INT value type is INT
                            __label__ = 39;
                            continue $L_39;
                    }
                case 123 :
                // NORMAL
                    $S_123 : {
                    // NORMAL
                        var var31 = local_4_REFERENCE.BOOLEANhasNext(local_4_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                        if ((var31 == 0)) {
                            __label__ = 142;
                            break $S_123;
                        }
                        __label__ = 133;
                        }
                    for(;;) switch (__label__) {
                        case 133 :
                        // NORMAL
                            var var35 = juAbstractCollection.A1jlObjectfinishToArrayA1jlObjectjuIterator(local_3_REFERENCE,local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@6d81ae0c
                            var var36 = var35; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@73a68944
                            return var36;
                        case 142 :
                        // NORMAL
                            var var36 = local_3_REFERENCE; // type is REFERENCE value type is REFERENCE
                            return var36;
                    }
            }
        }
    },

    A1jlObjectfinishToArrayA1jlObjectjuIterator : function(r,it) {
        var local_3_INT = null; // type is INT # of inits = 1
        var local_4_INT = null; // type is INT # of inits = 2
        var local_2_INT = null; // type is INT # of inits = 3
        var var30 = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_2_INT = r.data.length; // type is INT value type is INT
            __label__ = 3;
            }
        $L_3 : for (;;) {
            $S_3 : {
            // NORMAL
                var var3 = it.BOOLEANhasNext(it); // type is BOOLEAN value type is BOOLEAN
                if ((var3 == 0)) {
                    __label__ = 67;
                    break $S_3;
                }
                __label__ = 12;
                }
            for(;;) switch (__label__) {
                case 67 :
                // NORMAL
                    $S_67 : {
                    // NORMAL
                        var var4 = local_2_INT; // type is INT value type is INT
                        var var5 = r.data.length; // type is INT value type is INT
                        if ((var4 != var5)) {
                            __label__ = 77;
                            break $S_67;
                        }
                        __label__ = 73;
                        }
                    for(;;) switch (__label__) {
                        case 77 :
                        // NORMAL
                            var var7 = juArrays.A1jlObjectcopyOfA1jlObjectINT(r,local_2_INT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3e3b1519
                            var var8 = var7; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@126ff503
                            return var8;
                        case 73 :
                        // NORMAL
                            var var8 = r; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@4d88dff1
                            return var8;
                    }
                case 12 :
                // NORMAL
                    $S_12 : {
                    // NORMAL
                        local_3_INT = r.data.length; // type is INT value type is INT
                        var var12 = local_2_INT; // type is INT value type is INT
                        var var13 = local_3_INT; // type is INT value type is INT
                        if ((var12 != var13)) {
                            var30 = r; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@4d88dff1
                            __label__ = 52;
                            break $S_12;
                        }
                        __label__ = 20;
                        }
                    $M_20_52 : for(;;) switch (__label__) {
                        case 20 :
                        // NORMAL
                            $S_20 : {
                            // NORMAL
                                local_4_INT = ((local_3_INT + (local_3_INT >> 1)) + 1); // type is INT value type is INT
                                var var22 = (local_4_INT - 2147483639); // type is INT value type is INT
                                if ((var22 <= 0)) {
                                    __label__ = 45;
                                    break $S_20;
                                }
                                __label__ = 37;
                                }
                            $M_45_37 : for(;;) switch (__label__) {
                                case 45 :
                                // NORMAL
                                    var var28 = juArrays.A1jlObjectcopyOfA1jlObjectINT(r,local_4_INT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@27594842
                                    var local_0_REFERENCE = var28; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@61916d0b
                                    var30 = local_0_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@61916d0b
                                    __label__ = 52;
                                    continue $M_20_52;
                                case 37 :
                                // NORMAL
                                    var var25 = juAbstractCollection.INThugeCapacityINT((local_3_INT + 1)); // type is INT value type is INT
                                    local_4_INT = var25; // type is INT value type is INT
                                    __label__ = 45;
                                    continue $M_45_37;
                            }
                        case 52 :
                        // NORMAL
                            var var31 = var30; // type is REFERENCE value type is REFERENCE
                            var var32 = local_2_INT; // type is INT value type is INT
                            local_2_INT = (local_2_INT + 1); // type is INT value type is INT
                            var var33 = it.jlObjectnext(it); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@26388bb8
                            var31.data[var32] = var33;
                            r = var30; // type is REFERENCE value type is REFERENCE
                            __label__ = 3;
                            continue $L_3;
                    }
            }
        }
    },

    INThugeCapacityINT : function(minCapacity) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((minCapacity >= 0)) {
                __label__ = 14;
                break $S_0;
            }
            __label__ = 4;
            }
        for(;;) switch (__label__) {
            case 4 :
            // NORMAL
                var var0 = new jlOutOfMemoryError.Create(); // type is REFERENCE value type is REFERENCE
                jlOutOfMemoryError.VOIDinitjlString(var0,bytecoder.stringpool[63]);
                throw var0;
            case 14 :
            // NORMAL
                $S_14 : {
                // NORMAL
                    if ((minCapacity <= 2147483639)) {
                        __label__ = 25;
                        break $S_14;
                    }
                    __label__ = 20;
                    }
                for(;;) switch (__label__) {
                    case 25 :
                    // NORMAL
                        var var1 = 2147483639; // type is INT value type is INT
                        return var1;
                    case 20 :
                    // NORMAL
                        var var1 = 2147483647; // type is INT value type is INT
                        return var1;
                }
        }
    },

    BOOLEANcontainsAlljuCollection : function(thisRef,c) {
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = c.juIteratoriterator(c); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@141078f8
            local_2_REFERENCE = var0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@193b3bb1
            __label__ = 7;
            }
        $L_7 : for (;;) {
            $S_7 : {
            // NORMAL
                var var3 = local_2_REFERENCE.BOOLEANhasNext(local_2_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                if ((var3 == 0)) {
                    return 1;
                }
                }
            $S_16 : {
            // NORMAL
                var var5 = local_2_REFERENCE.jlObjectnext(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@48562eb8
                var local_3_REFERENCE = var5; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2eb21815
                var var8 = thisRef.BOOLEANcontainsjlObject(thisRef,local_3_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                if ((var8 != 0)) {
                    break $S_16;
                }
                return 0;
                }
            __label__ = 7;
            continue $L_7;
        }
    },

    BOOLEANcontainsjlObject : function(thisRef,o) {
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.juIteratoriterator(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6cde5f21
            local_2_REFERENCE = var0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@767ccb15
            if (o != null ) {
                __label__ = 29;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_29_9 : for(;;) switch (__label__) {
            case 9 :
            // NORMAL
                for (;;) {
                    $S_9 : {
                    // NORMAL
                        var var5 = local_2_REFERENCE.BOOLEANhasNext(local_2_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                        if ((var5 == 0)) {
                            return 0;
                        }
                        }
                    var var10 = local_2_REFERENCE.jlObjectnext(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@531921d0
                    if (var10 != null ) {
                        __label__ = 9;
                        continue $M_29_9;
                    }
                    return 1;
                }
            case 29 :
            // NORMAL
                for (;;) {
                    $S_29 : {
                    // NORMAL
                        var var3 = local_2_REFERENCE.BOOLEANhasNext(local_2_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                        if ((var3 == 0)) {
                            return 0;
                        }
                        }
                    var var7 = local_2_REFERENCE.jlObjectnext(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6d0dcc2e
                    var var8 = o.BOOLEANequalsjlObject(o,var7); // type is BOOLEAN value type is BOOLEAN
                    if ((var8 == 0)) {
                        __label__ = 29;
                        continue $M_29_9;
                    }
                    return 1;
                }
        }
    },

    classInitCheck : function() {
        if (!juAbstractCollection.__initialized) {
            juAbstractCollection.__initialized = true;
            jlObject.classInitCheck();
            jlIterable.classInitCheck();
            juCollection.classInitCheck();
        }
    },

};

var juCollection = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 177,
    __implementedTypes : [1,178,177],


    classInitCheck : function() {
        if (!juCollection.__initialized) {
            juCollection.__initialized = true;
            jlObject.classInitCheck();
            jlIterable.classInitCheck();
        }
    },

};

var jlIterable = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 178,
    __implementedTypes : [1,178],


    classInitCheck : function() {
        if (!jlIterable.__initialized) {
            jlIterable.__initialized = true;
            jlObject.classInitCheck();
        }
    },

};

var juList = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 179,
    __implementedTypes : [1,179,178,177],


    juListofA1jlObject : function(elements) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = elements.data.length; // type is INT value type is INT
            if (var0 < 0 || var0 > 2) {
             __label__ = 57;
            break $S_0;
            }
            switch(var0 - 0) {
             case 0:
                 __label__ = 28;
            break $S_0;
             case 1:
                 __label__ = 32;
            break $S_0;
             case 2:
                 __label__ = 43;
            break $S_0;
            }
            throw 'Illegal jump target!';
            }
        for(;;) switch (__label__) {
            case 43 :
            // NORMAL
                var var4 = new juImmutableCollections$List12.Create(); // type is REFERENCE value type is REFERENCE
                var var5 = elements.data[0]; // type is REFERENCE value type is REFERENCE
                var var6 = elements.data[1]; // type is REFERENCE value type is REFERENCE
                juImmutableCollections$List12.VOIDinitjlObjectjlObject(var4,var5,var6);
                return var4;
            case 28 :
            // NORMAL
                var var7 = juImmutableCollections.juListemptyList(); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2d61316
                return var7;
            case 32 :
            // NORMAL
                var var2 = new juImmutableCollections$List12.Create(); // type is REFERENCE value type is REFERENCE
                var var3 = elements.data[0]; // type is REFERENCE value type is REFERENCE
                juImmutableCollections$List12.VOIDinitjlObject(var2,var3);
                return var2;
            case 57 :
            // NORMAL
                var var1 = new juImmutableCollections$ListN.Create(); // type is REFERENCE value type is REFERENCE
                juImmutableCollections$ListN.VOIDinitA1jlObject(var1,elements);
                return var1;
        }
    },

    classInitCheck : function() {
        if (!juList.__initialized) {
            juList.__initialized = true;
            jlObject.classInitCheck();
            jlIterable.classInitCheck();
            juCollection.classInitCheck();
        }
    },

};

var juRandomAccess = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 180,
    __implementedTypes : [1,180],


    classInitCheck : function() {
        if (!juRandomAccess.__initialized) {
            juRandomAccess.__initialized = true;
            jlObject.classInitCheck();
        }
    },

};

var jlIllegalArgumentException = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 181,
    __implementedTypes : [1,182,64,183,181,2],

    Create : function() {
    },

    instanceOf : function(aType) {
        return jlIllegalArgumentException.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jlIllegalArgumentException;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitjlString : function(thisRef,s) {
        var __label__ = null;
        jlRuntimeException.VOIDinitjlString(thisRef,s);
        return;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        jlRuntimeException.VOIDinit(thisRef);
        return;
    },

    classInitCheck : function() {
        if (!jlIllegalArgumentException.__initialized) {
            jlIllegalArgumentException.__initialized = true;
            var thePrototype = jlIllegalArgumentException.Create.prototype;
            thePrototype.instanceOf = jlIllegalArgumentException.instanceOf;
            thePrototype.ClassgetClass = jlIllegalArgumentException.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlRuntimeException.classInitCheck();
            jlObject.classInitCheck();
            jlThrowable.classInitCheck();
            jlException.classInitCheck();
            jiSerializable.classInitCheck();
        }
    },

};

var jlRuntimeException = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 182,
    __implementedTypes : [1,182,64,183,2],

    Create : function() {
    },

    instanceOf : function(aType) {
        return jlRuntimeException.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jlRuntimeException;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitjlString : function(thisRef,message) {
        var __label__ = null;
        jlException.VOIDinitjlString(thisRef,message);
        return;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        jlException.VOIDinit(thisRef);
        return;
    },

    classInitCheck : function() {
        if (!jlRuntimeException.__initialized) {
            jlRuntimeException.__initialized = true;
            var thePrototype = jlRuntimeException.Create.prototype;
            thePrototype.instanceOf = jlRuntimeException.instanceOf;
            thePrototype.ClassgetClass = jlRuntimeException.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlException.classInitCheck();
            jlObject.classInitCheck();
            jlThrowable.classInitCheck();
            jiSerializable.classInitCheck();
        }
    },

};

var jlException = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 183,
    __implementedTypes : [1,64,183,2],

    Create : function() {
    },

    instanceOf : function(aType) {
        return jlException.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jlException;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitjlString : function(thisRef,message) {
        var __label__ = null;
        jlThrowable.VOIDinitjlString(thisRef,message);
        return;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        jlThrowable.VOIDinit(thisRef);
        return;
    },

    classInitCheck : function() {
        if (!jlException.__initialized) {
            jlException.__initialized = true;
            var thePrototype = jlException.Create.prototype;
            thePrototype.instanceOf = jlException.instanceOf;
            thePrototype.ClassgetClass = jlException.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlThrowable.classInitCheck();
            jlObject.classInitCheck();
            jiSerializable.classInitCheck();
        }
    },

};

var juArrays = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 184,
    __implementedTypes : [1,184],

    Create : function() {
    },

    instanceOf : function(aType) {
        return juArrays.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return juArrays;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    A1jlObjectcopyOfA1jlObjectINTjlClass : function(original,newLength,aType) {
        var local_3_INT = null; // type is INT # of inits = 3
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_5_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_3_INT = original.data.length; // type is INT value type is INT
            var var3 = local_3_INT; // type is INT value type is INT
            if ((newLength >= var3)) {
                __label__ = 10;
                break $S_0;
            }
            __label__ = 8;
            }
        $M_10_8 : for(;;) switch (__label__) {
            case 10 :
            // NORMAL
                $S_10 : {
                // NORMAL
                    local_4_REFERENCE = bytecoder.newArray(newLength,null); // type is REFERENCE value type is REFERENCE
                    local_5_INT = 0; // type is INT value type is INT
                    __label__ = 19;
                    }
                $L_19 : for (;;) {
                    $S_19 : {
                    // NORMAL
                        var var8 = local_5_INT; // type is INT value type is INT
                        var var9 = local_3_INT; // type is INT value type is INT
                        if ((var8 >= var9)) {
                            return local_4_REFERENCE;
                        }
                        }
                    var var10 = local_4_REFERENCE; // type is REFERENCE value type is REFERENCE
                    var var11 = local_5_INT; // type is INT value type is INT
                    var var13 = original.data[local_5_INT]; // type is REFERENCE value type is REFERENCE
                    var10.data[var11] = var13;
                    local_5_INT = (local_5_INT + 1); // type is INT value type is INT
                    __label__ = 19;
                    continue $L_19;
                }
            case 8 :
            // NORMAL
                local_3_INT = newLength; // type is INT value type is INT
                __label__ = 10;
                continue $M_10_8;
        }
    },

    A1jlObjectcopyOfA1jlObjectINT : function(original,newLength) {
        var __label__ = null;
        var var0 = juArrays.A1jlObjectcopyOfA1jlObjectINTjlClass(original,newLength,null); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@2a0a752c
        return var0;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    VOIDsortA1jlObjectINTINT : function(aData,aStart,aEnd) {
        var __label__ = null;
        return;
    },

    classInitCheck : function() {
        if (!juArrays.__initialized) {
            juArrays.__initialized = true;
            var thePrototype = juArrays.Create.prototype;
            thePrototype.instanceOf = juArrays.instanceOf;
            thePrototype.ClassgetClass = juArrays.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojdjRopeJoint = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 185,
    __implementedTypes : [1,185,117],
    $assertionsDisabled : false, // declared in org.jbox2d.dynamics.joints.Joint

    Create : function() {
        this.pool = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_type = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_prev = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_next = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_bodyA = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_bodyB = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_collideConnected = false; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_islandFlag = false; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_userData = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_edgeA = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_edgeB = null; // declared in org.jbox2d.dynamics.joints.Joint
        this.m_localAnchorA = null; // declared in org.jbox2d.dynamics.joints.RopeJoint
        this.m_localAnchorB = null; // declared in org.jbox2d.dynamics.joints.RopeJoint
        this.m_u = null; // declared in org.jbox2d.dynamics.joints.RopeJoint
        this.m_rA = null; // declared in org.jbox2d.dynamics.joints.RopeJoint
        this.m_rB = null; // declared in org.jbox2d.dynamics.joints.RopeJoint
        this.m_localCenterA = null; // declared in org.jbox2d.dynamics.joints.RopeJoint
        this.m_localCenterB = null; // declared in org.jbox2d.dynamics.joints.RopeJoint
        this.m_maxLength = 0; // declared in org.jbox2d.dynamics.joints.RopeJoint
        this.m_mass = 0; // declared in org.jbox2d.dynamics.joints.RopeJoint
        this.m_impulse = 0; // declared in org.jbox2d.dynamics.joints.RopeJoint
        this.m_state = null; // declared in org.jbox2d.dynamics.joints.RopeJoint
        this.m_length = 0; // declared in org.jbox2d.dynamics.joints.RopeJoint
        this.m_indexA = 0; // declared in org.jbox2d.dynamics.joints.RopeJoint
        this.m_indexB = 0; // declared in org.jbox2d.dynamics.joints.RopeJoint
        this.m_invMassA = 0; // declared in org.jbox2d.dynamics.joints.RopeJoint
        this.m_invMassB = 0; // declared in org.jbox2d.dynamics.joints.RopeJoint
        this.m_invIA = 0; // declared in org.jbox2d.dynamics.joints.RopeJoint
        this.m_invIB = 0; // declared in org.jbox2d.dynamics.joints.RopeJoint
    },

    instanceOf : function(aType) {
        return ojdjRopeJoint.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdjRopeJoint;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    ojdjJointcreateojdWorldojdjJointDef : function(p0,p1) {
         return ojdjJoint.ojdjJointcreateojdWorldojdjJointDef(p0,p1);
    },

    VOIDinitojpIWorldPoolojdjRopeJointDef : function(thisRef,worldPool,def) {
        var __label__ = null;
        ojdjJoint.VOIDinitojpIWorldPoolojdjJointDef(thisRef,worldPool,def);
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var0);
        thisRef.m_localAnchorA = var0;
        var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var1);
        thisRef.m_localAnchorB = var1;
        var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var2);
        thisRef.m_u = var2;
        var var3 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var3);
        thisRef.m_rA = var3;
        var var4 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var4);
        thisRef.m_rB = var4;
        var var5 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var5);
        thisRef.m_localCenterA = var5;
        var var6 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var6);
        thisRef.m_localCenterB = var6;
        var var9 = thisRef.m_localAnchorA.ojcVec2setojcVec2(thisRef.m_localAnchorA,def.localAnchorA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@650ffed2
        var var12 = thisRef.m_localAnchorB.ojcVec2setojcVec2(thisRef.m_localAnchorB,def.localAnchorB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1f094064
        var var13 = def.maxLength; // type is FLOAT value type is FLOAT
        thisRef.m_maxLength = var13;
        thisRef.m_mass = 0.0;
        thisRef.m_impulse = 0.0;
        var var14 = ojdjLimitState.INACTIVE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@20475a53
        thisRef.m_state = var14;
        thisRef.m_length = 0.0;
        return;
    },

    VOIDinitVelocityConstraintsojdSolverData : function(thisRef,data) {
        var local_5_FLOAT = null; // type is FLOAT # of inits = 2
        var local_9_FLOAT = null; // type is FLOAT # of inits = 2
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_8_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_16_FLOAT = null; // type is FLOAT # of inits = 1
        var var153 = null; // type is FLOAT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var1 = thisRef.m_bodyA.m_islandIndex; // type is INT value type is INT
            thisRef.m_indexA = var1;
            var var3 = thisRef.m_bodyB.m_islandIndex; // type is INT value type is INT
            thisRef.m_indexB = var3;
            var var8 = thisRef.m_localCenterA.ojcVec2setojcVec2(thisRef.m_localCenterA,thisRef.m_bodyA.m_sweep.localCenter); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1a562434
            var var13 = thisRef.m_localCenterB.ojcVec2setojcVec2(thisRef.m_localCenterB,thisRef.m_bodyB.m_sweep.localCenter); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@111774b6
            var var15 = thisRef.m_bodyA.m_invMass; // type is FLOAT value type is FLOAT
            thisRef.m_invMassA = var15;
            var var17 = thisRef.m_bodyB.m_invMass; // type is FLOAT value type is FLOAT
            thisRef.m_invMassB = var17;
            var var19 = thisRef.m_bodyA.m_invI; // type is FLOAT value type is FLOAT
            thisRef.m_invIA = var19;
            var var21 = thisRef.m_bodyB.m_invI; // type is FLOAT value type is FLOAT
            thisRef.m_invIB = var21;
            var var24 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            var local_2_REFERENCE = var24.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1406ec34
            var var29 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            var local_3_FLOAT = var29.a; // type is FLOAT value type is FLOAT
            var var35 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_4_REFERENCE = var35.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5d044c45
            var var40 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_5_FLOAT = var40.w; // type is FLOAT value type is FLOAT
            var var46 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            var local_6_REFERENCE = var46.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@76d8a455
            var var51 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            var local_7_FLOAT = var51.a; // type is FLOAT value type is FLOAT
            var var57 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_8_REFERENCE = var57.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5c40dcfc
            var var62 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_9_FLOAT = var62.w; // type is FLOAT value type is FLOAT
            var var67 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7f04fc0c
            var local_10_REFERENCE = var67; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@9df1cd
            var var70 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@33d41787
            var local_11_REFERENCE = var70; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@69298a3d
            var var73 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3195ff88
            var local_12_REFERENCE = var73; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5ee973ee
            var var77 = local_10_REFERENCE.ojcRotsetFLOAT(local_10_REFERENCE,local_3_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4d123f9b
            var var80 = local_11_REFERENCE.ojcRotsetFLOAT(local_11_REFERENCE,local_7_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@684f3c66
            var var81 = local_10_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@9df1cd
            var var84 = local_12_REFERENCE.ojcVec2setojcVec2(local_12_REFERENCE,thisRef.m_localAnchorA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@76b8f758
            var var86 = var84.ojcVec2subLocalojcVec2(var84,thisRef.m_localCenterA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@63db8c62
            ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var81,var86,thisRef.m_rA);
            var var88 = local_11_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@69298a3d
            var var91 = local_12_REFERENCE.ojcVec2setojcVec2(local_12_REFERENCE,thisRef.m_localAnchorB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3f698965
            var var93 = var91.ojcVec2subLocalojcVec2(var91,thisRef.m_localCenterB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2e542ee2
            ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var88,var93,thisRef.m_rB);
            var var97 = thisRef.m_u.ojcVec2setojcVec2(thisRef.m_u,local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1fe70e47
            var var99 = var97.ojcVec2addLocalojcVec2(var97,thisRef.m_rB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@20e02945
            var var101 = var99.ojcVec2subLocalojcVec2(var99,local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@53b1be9d
            var var103 = var101.ojcVec2subLocalojcVec2(var101,thisRef.m_rA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5c9db937
            var var105 = thisRef.m_u.FLOATlength(thisRef.m_u); // type is FLOAT value type is FLOAT
            thisRef.m_length = var105;
            var local_13_FLOAT = (thisRef.m_length - thisRef.m_maxLength); // type is FLOAT value type is FLOAT
            var var111 = local_13_FLOAT; // type is FLOAT value type is FLOAT
            if ((var111 <= 0.0)) {
                __label__ = 377;
                break $S_0;
            }
            __label__ = 367;
            }
        $M_367_377 : for(;;) switch (__label__) {
            case 377 :
            // NORMAL
                var var114 = ojdjLimitState.INACTIVE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7b2f01d5
                thisRef.m_state = var114;
                break $M_367_377;
            case 367 :
            // NORMAL
                var var113 = ojdjLimitState.AT_UPPER; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5a24b5f4
                thisRef.m_state = var113;
                break $M_367_377;
        }
        $S_384 : {
        // NORMAL
            var var115 = thisRef.m_length; // type is FLOAT value type is FLOAT
            if ((var115 <= 0.005)) {
                __label__ = 411;
                break $S_384;
            }
            __label__ = 394;
            }
        for(;;) switch (__label__) {
            case 411 :
            // NORMAL
                thisRef.m_u.VOIDsetZero(thisRef.m_u);
                thisRef.m_mass = 0.0;
                thisRef.m_impulse = 0.0;
                return;
            case 394 :
            // NORMAL
                $S_394 : {
                // NORMAL
                    var var121 = thisRef.m_u.ojcVec2mulLocalFLOAT(thisRef.m_u,(1.0 / thisRef.m_length)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@43fad7b
                    }
                $S_429 : {
                // NORMAL
                    var var124 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.m_rA,thisRef.m_u); // type is FLOAT value type is FLOAT
                    var local_14_FLOAT = var124; // type is FLOAT value type is FLOAT
                    var var129 = ojcVec2.FLOATcrossojcVec2ojcVec2(thisRef.m_rB,thisRef.m_u); // type is FLOAT value type is FLOAT
                    var local_15_FLOAT = var129; // type is FLOAT value type is FLOAT
                    local_16_FLOAT = (((thisRef.m_invMassA + ((thisRef.m_invIA * local_14_FLOAT) * local_14_FLOAT)) + thisRef.m_invMassB) + ((thisRef.m_invIB * local_15_FLOAT) * local_15_FLOAT)); // type is FLOAT value type is FLOAT
                    var var149 = local_16_FLOAT; // type is FLOAT value type is FLOAT
                    if ((var149 == 0.0)) {
                        __label__ = 503;
                        break $S_429;
                    }
                    __label__ = 496;
                    }
                $M_496_503 : for(;;) switch (__label__) {
                    case 503 :
                    // NORMAL
                        var153 = 0.0; // type is FLOAT value type is FLOAT
                        break $M_496_503;
                    case 496 :
                    // NORMAL
                        var153 = (1.0 / local_16_FLOAT); // type is FLOAT value type is FLOAT
                        break $M_496_503;
                }
                $S_504 : {
                // NORMAL
                    thisRef.m_mass = var153;
                    var var155 = data.step.warmStarting; // type is BOOLEAN value type is BOOLEAN
                    if ((var155 == 0)) {
                        __label__ = 694;
                        break $S_504;
                    }
                    __label__ = 517;
                    }
                $M_517_694 : for(;;) switch (__label__) {
                    case 517 :
                    // NORMAL
                        var var159 = (thisRef.m_impulse * data.step.dtRatio); // type is FLOAT value type is FLOAT
                        thisRef.m_impulse = var159;
                        var local_17_FLOAT = (thisRef.m_impulse * thisRef.m_u.x); // type is FLOAT value type is FLOAT
                        var local_18_FLOAT = (thisRef.m_impulse * thisRef.m_u.y); // type is FLOAT value type is FLOAT
                        var var172 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5458bed0
                        var var177 = (var172.x - (thisRef.m_invMassA * local_17_FLOAT)); // type is FLOAT value type is FLOAT
                        var172.x = var177;
                        var var178 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5458bed0
                        var var183 = (var178.y - (thisRef.m_invMassA * local_18_FLOAT)); // type is FLOAT value type is FLOAT
                        var178.y = var183;
                        local_5_FLOAT = (local_5_FLOAT - (thisRef.m_invIA * ((thisRef.m_rA.x * local_18_FLOAT) - (thisRef.m_rA.y * local_17_FLOAT)))); // type is FLOAT value type is FLOAT
                        var var198 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@28fe00d3
                        var var203 = (var198.x + (thisRef.m_invMassB * local_17_FLOAT)); // type is FLOAT value type is FLOAT
                        var198.x = var203;
                        var var204 = local_8_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@28fe00d3
                        var var209 = (var204.y + (thisRef.m_invMassB * local_18_FLOAT)); // type is FLOAT value type is FLOAT
                        var204.y = var209;
                        local_9_FLOAT = (local_9_FLOAT + (thisRef.m_invIB * ((thisRef.m_rB.x * local_18_FLOAT) - (thisRef.m_rB.y * local_17_FLOAT)))); // type is FLOAT value type is FLOAT
                        break $M_517_694;
                    case 694 :
                    // NORMAL
                        thisRef.m_impulse = 0.0;
                        break $M_517_694;
                }
                thisRef.pool.VOIDpushRotINT(thisRef.pool,2);
                thisRef.pool.VOIDpushVec2INT(thisRef.pool,1);
                var var228 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
                var var229 = local_5_FLOAT; // type is FLOAT value type is FLOAT
                var228.w = var229;
                var var232 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
                var var233 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                var232.w = var233;
                return;
        }
    },

    VOIDsolveVelocityConstraintsojdSolverData : function(thisRef,data) {
        var local_10_FLOAT = null; // type is FLOAT # of inits = 2
        var local_3_FLOAT = null; // type is FLOAT # of inits = 2
        var local_9_FLOAT = null; // type is FLOAT # of inits = 1
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_5_FLOAT = null; // type is FLOAT # of inits = 2
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var2 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_2_REFERENCE = var2.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@ab1df71
            var var7 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            local_3_FLOAT = var7.w; // type is FLOAT value type is FLOAT
            var var13 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_4_REFERENCE = var13.v; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@cf7ce7a
            var var18 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            local_5_FLOAT = var18.w; // type is FLOAT value type is FLOAT
            var var23 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2348391b
            var local_6_REFERENCE = var23; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6cf42a2e
            var var26 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@68ba2a96
            var local_7_REFERENCE = var26; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5a0cade5
            var var29 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@386ed75e
            var local_8_REFERENCE = var29; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@75862f27
            ojcVec2.VOIDcrossToOutUnsafeFLOATojcVec2ojcVec2(local_3_FLOAT,thisRef.m_rA,local_6_REFERENCE);
            var var36 = local_6_REFERENCE.ojcVec2addLocalojcVec2(local_6_REFERENCE,local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4c51559b
            ojcVec2.VOIDcrossToOutUnsafeFLOATojcVec2ojcVec2(local_5_FLOAT,thisRef.m_rB,local_7_REFERENCE);
            var var42 = local_7_REFERENCE.ojcVec2addLocalojcVec2(local_7_REFERENCE,local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@738dba71
            local_9_FLOAT = (thisRef.m_length - thisRef.m_maxLength); // type is FLOAT value type is FLOAT
            var var48 = thisRef.m_u; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3d175779
            var var51 = local_8_REFERENCE.ojcVec2setojcVec2(local_8_REFERENCE,local_7_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@79aca8eb
            var var53 = var51.ojcVec2subLocalojcVec2(var51,local_6_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3f97c7c8
            var var54 = ojcVec2.FLOATdotojcVec2ojcVec2(var48,var53); // type is FLOAT value type is FLOAT
            local_10_FLOAT = var54; // type is FLOAT value type is FLOAT
            var var57 = local_9_FLOAT; // type is FLOAT value type is FLOAT
            if ((var57 >= 0.0)) {
                __label__ = 177;
                break $S_0;
            }
            __label__ = 162;
            }
        $M_162_177 : for(;;) switch (__label__) {
            case 162 :
            // NORMAL
                local_10_FLOAT = (local_10_FLOAT + (data.step.inv_dt * local_9_FLOAT)); // type is FLOAT value type is FLOAT
                __label__ = 177;
                continue $M_162_177;
            case 177 :
            // NORMAL
                var local_11_FLOAT = ((-thisRef.m_mass) * local_10_FLOAT); // type is FLOAT value type is FLOAT
                var local_12_FLOAT = thisRef.m_impulse; // type is FLOAT value type is FLOAT
                var var78 = ojcMathUtils.FLOATminFLOATFLOAT(0.0,(thisRef.m_impulse + local_11_FLOAT)); // type is FLOAT value type is FLOAT
                thisRef.m_impulse = var78;
                var local_11_FLOAT = (thisRef.m_impulse - local_12_FLOAT); // type is FLOAT value type is FLOAT
                var local_13_FLOAT = (local_11_FLOAT * thisRef.m_u.x); // type is FLOAT value type is FLOAT
                var local_14_FLOAT = (local_11_FLOAT * thisRef.m_u.y); // type is FLOAT value type is FLOAT
                var var95 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7ff9d87
                var var100 = (var95.x - (thisRef.m_invMassA * local_13_FLOAT)); // type is FLOAT value type is FLOAT
                var95.x = var100;
                var var101 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7ff9d87
                var var106 = (var101.y - (thisRef.m_invMassA * local_14_FLOAT)); // type is FLOAT value type is FLOAT
                var101.y = var106;
                local_3_FLOAT = (local_3_FLOAT - (thisRef.m_invIA * ((thisRef.m_rA.x * local_14_FLOAT) - (thisRef.m_rA.y * local_13_FLOAT)))); // type is FLOAT value type is FLOAT
                var var121 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@745b458f
                var var126 = (var121.x + (thisRef.m_invMassB * local_13_FLOAT)); // type is FLOAT value type is FLOAT
                var121.x = var126;
                var var127 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@745b458f
                var var132 = (var127.y + (thisRef.m_invMassB * local_14_FLOAT)); // type is FLOAT value type is FLOAT
                var127.y = var132;
                local_5_FLOAT = (local_5_FLOAT + (thisRef.m_invIB * ((thisRef.m_rB.x * local_14_FLOAT) - (thisRef.m_rB.y * local_13_FLOAT)))); // type is FLOAT value type is FLOAT
                thisRef.pool.VOIDpushVec2INT(thisRef.pool,3);
                var var150 = data.velocities.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
                var var151 = local_3_FLOAT; // type is FLOAT value type is FLOAT
                var150.w = var151;
                var var154 = data.velocities.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
                var var155 = local_5_FLOAT; // type is FLOAT value type is FLOAT
                var154.w = var155;
                return;
        }
    },

    BOOLEANsolvePositionConstraintsojdSolverData : function(thisRef,data) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var2 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            var local_2_REFERENCE = var2.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@68f5a47b
            var var7 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            var local_3_FLOAT = var7.a; // type is FLOAT value type is FLOAT
            var var13 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            var local_4_REFERENCE = var13.c; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@72e906c1
            var var18 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            var local_5_FLOAT = var18.a; // type is FLOAT value type is FLOAT
            var var23 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@95f1491
            var local_6_REFERENCE = var23; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@51e9b521
            var var26 = thisRef.pool.ojcRotpopRot(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@14fa151b
            var local_7_REFERENCE = var26; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2e9fd64b
            var var29 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5f15b495
            var local_8_REFERENCE = var29; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@434942eb
            var var32 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@75fd554
            var local_9_REFERENCE = var32; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@57a2767a
            var var35 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@25e1c107
            var local_10_REFERENCE = var35; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2cb6814a
            var var38 = thisRef.pool.ojcVec2popVec2(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@55ba04fd
            var local_11_REFERENCE = var38; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@116fa996
            var var42 = local_6_REFERENCE.ojcRotsetFLOAT(local_6_REFERENCE,local_3_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3aadbb45
            var var45 = local_7_REFERENCE.ojcRotsetFLOAT(local_7_REFERENCE,local_5_FLOAT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2289d18b
            var var46 = local_6_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@51e9b521
            var var49 = local_11_REFERENCE.ojcVec2setojcVec2(local_11_REFERENCE,thisRef.m_localAnchorA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2711b4cb
            var var51 = var49.ojcVec2subLocalojcVec2(var49,thisRef.m_localCenterA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4b5e9aa6
            ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var46,var51,local_9_REFERENCE);
            var var53 = local_7_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2e9fd64b
            var var56 = local_11_REFERENCE.ojcVec2setojcVec2(local_11_REFERENCE,thisRef.m_localAnchorB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1c7e671b
            var var58 = var56.ojcVec2subLocalojcVec2(var56,thisRef.m_localCenterB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7097f896
            ojcRot.VOIDmulToOutUnsafeojcRotojcVec2ojcVec2(var53,var58,local_10_REFERENCE);
            var var62 = local_8_REFERENCE.ojcVec2setojcVec2(local_8_REFERENCE,local_4_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5a0aada3
            var var64 = var62.ojcVec2addLocalojcVec2(var62,local_10_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@65be87ee
            var var66 = var64.ojcVec2subLocalojcVec2(var64,local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@a9772fd
            var var68 = var66.ojcVec2subLocalojcVec2(var66,local_9_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@450b6871
            var var70 = local_8_REFERENCE.FLOATnormalize(local_8_REFERENCE); // type is FLOAT value type is FLOAT
            var local_12_FLOAT = var70; // type is FLOAT value type is FLOAT
            var local_13_FLOAT = (local_12_FLOAT - thisRef.m_maxLength); // type is FLOAT value type is FLOAT
            var var79 = ojcMathUtils.FLOATclampFLOATFLOATFLOAT(local_13_FLOAT,0.0,0.2); // type is FLOAT value type is FLOAT
            var local_13_FLOAT = var79; // type is FLOAT value type is FLOAT
            var local_14_FLOAT = ((-thisRef.m_mass) * local_13_FLOAT); // type is FLOAT value type is FLOAT
            var local_15_FLOAT = (local_14_FLOAT * local_8_REFERENCE.x); // type is FLOAT value type is FLOAT
            var local_16_FLOAT = (local_14_FLOAT * local_8_REFERENCE.y); // type is FLOAT value type is FLOAT
            var var99 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4a63a2c6
            var var104 = (var99.x - (thisRef.m_invMassA * local_15_FLOAT)); // type is FLOAT value type is FLOAT
            var99.x = var104;
            var var105 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4a63a2c6
            var var110 = (var105.y - (thisRef.m_invMassA * local_16_FLOAT)); // type is FLOAT value type is FLOAT
            var105.y = var110;
            var local_3_FLOAT = (local_3_FLOAT - (thisRef.m_invIA * ((local_9_REFERENCE.x * local_16_FLOAT) - (local_9_REFERENCE.y * local_15_FLOAT)))); // type is FLOAT value type is FLOAT
            var var125 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5b73cd93
            var var130 = (var125.x + (thisRef.m_invMassB * local_15_FLOAT)); // type is FLOAT value type is FLOAT
            var125.x = var130;
            var var131 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5b73cd93
            var var136 = (var131.y + (thisRef.m_invMassB * local_16_FLOAT)); // type is FLOAT value type is FLOAT
            var131.y = var136;
            var local_5_FLOAT = (local_5_FLOAT + (thisRef.m_invIB * ((local_10_REFERENCE.x * local_16_FLOAT) - (local_10_REFERENCE.y * local_15_FLOAT)))); // type is FLOAT value type is FLOAT
            thisRef.pool.VOIDpushRotINT(thisRef.pool,2);
            thisRef.pool.VOIDpushVec2INT(thisRef.pool,4);
            var var155 = data.positions.data[thisRef.m_indexA]; // type is REFERENCE value type is REFERENCE
            var var156 = local_3_FLOAT; // type is FLOAT value type is FLOAT
            var155.a = var156;
            var var159 = data.positions.data[thisRef.m_indexB]; // type is REFERENCE value type is REFERENCE
            var var160 = local_5_FLOAT; // type is FLOAT value type is FLOAT
            var159.a = var160;
            var var163 = (local_12_FLOAT - thisRef.m_maxLength); // type is FLOAT value type is FLOAT
            if ((var163 >= 0.005)) {
                __label__ = 441;
                break $S_0;
            }
            __label__ = 437;
            }
        for(;;) switch (__label__) {
            case 437 :
            // NORMAL
                var var165 = 1; // type is INT value type is INT
                return var165;
            case 441 :
            // NORMAL
                var var165 = 0; // type is INT value type is INT
                return var165;
        }
    },

    classInitCheck : function() {
        if (!ojdjRopeJoint.__initialized) {
            ojdjRopeJoint.__initialized = true;
            var thePrototype = ojdjRopeJoint.Create.prototype;
            thePrototype.instanceOf = ojdjRopeJoint.instanceOf;
            thePrototype.ClassgetClass = ojdjRopeJoint.ClassgetClass;
            thePrototype.BOOLEANsolvePositionConstraintsojdSolverData = ojdjRopeJoint.BOOLEANsolvePositionConstraintsojdSolverData;
            thePrototype.VOIDsolveVelocityConstraintsojdSolverData = ojdjRopeJoint.VOIDsolveVelocityConstraintsojdSolverData;
            thePrototype.VOIDinitVelocityConstraintsojdSolverData = ojdjRopeJoint.VOIDinitVelocityConstraintsojdSolverData;
            thePrototype.BOOLEANgetCollideConnected = ojdjJoint.BOOLEANgetCollideConnected;
            thePrototype.ojdBodygetBodyB = ojdjJoint.ojdBodygetBodyB;
            thePrototype.ojdBodygetBodyA = ojdjJoint.ojdBodygetBodyA;
            thePrototype.ojdjJointTypegetType = ojdjJoint.ojdjJointTypegetType;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojdjJoint.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var ojdjRopeJointDef = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 186,
    __implementedTypes : [1,186,149],

    Create : function() {
        this.type = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.userData = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.bodyA = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.bodyB = null; // declared in org.jbox2d.dynamics.joints.JointDef
        this.collideConnected = false; // declared in org.jbox2d.dynamics.joints.JointDef
        this.localAnchorA = null; // declared in org.jbox2d.dynamics.joints.RopeJointDef
        this.localAnchorB = null; // declared in org.jbox2d.dynamics.joints.RopeJointDef
        this.maxLength = 0; // declared in org.jbox2d.dynamics.joints.RopeJointDef
    },

    instanceOf : function(aType) {
        return ojdjRopeJointDef.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdjRopeJointDef;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        ojdjJointDef.VOIDinit(thisRef);
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var0);
        thisRef.localAnchorA = var0;
        var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var1);
        thisRef.localAnchorB = var1;
        var var2 = ojdjJointType.ROPE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@60d7c047
        thisRef.type = var2;
        var var4 = thisRef.localAnchorA.ojcVec2setFLOATFLOAT(thisRef.localAnchorA,-1.0,0.0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4c5d2d9a
        var var6 = thisRef.localAnchorB.ojcVec2setFLOATFLOAT(thisRef.localAnchorB,1.0,0.0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2f81ac26
        return;
    },

    classInitCheck : function() {
        if (!ojdjRopeJointDef.__initialized) {
            ojdjRopeJointDef.__initialized = true;
            var thePrototype = ojdjRopeJointDef.Create.prototype;
            thePrototype.instanceOf = ojdjRopeJointDef.instanceOf;
            thePrototype.ClassgetClass = ojdjRopeJointDef.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojdjJointDef.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var dmbawWindow = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 187,
    __implementedTypes : [1,187,188,8],

    instanceOf : function(aType) {
        return dmbawWindow.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return dmbawWindow;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    dmbawWindowwindow : function() {
         return bytecoder.imports.runtime.nativewindow();
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    classInitCheck : function() {
        if (!dmbawWindow.__initialized) {
            dmbawWindow.__initialized = true;
            jlObject.classInitCheck();
            dmbawEventTarget.classInitCheck();
            dmbaOpaqueReferenceType.classInitCheck();
        }
    },

};

var dmbawEventTarget = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 188,
    __implementedTypes : [1,188,8],


    classInitCheck : function() {
        if (!dmbawEventTarget.__initialized) {
            dmbawEventTarget.__initialized = true;
            jlObject.classInitCheck();
            dmbaOpaqueReferenceType.classInitCheck();
        }
    },

};

var dmbawHTMLDocument = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 189,
    __implementedTypes : [1,192,190,188,189,191,8],


    classInitCheck : function() {
        if (!dmbawHTMLDocument.__initialized) {
            dmbawHTMLDocument.__initialized = true;
            jlObject.classInitCheck();
            dmbawParentNode.classInitCheck();
            dmbawDocument.classInitCheck();
            dmbawEventTarget.classInitCheck();
            dmbawNode.classInitCheck();
            dmbaOpaqueReferenceType.classInitCheck();
        }
    },

};

var dmbawDocument = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 190,
    __implementedTypes : [1,192,190,188,191,8],


    classInitCheck : function() {
        if (!dmbawDocument.__initialized) {
            dmbawDocument.__initialized = true;
            jlObject.classInitCheck();
            dmbawParentNode.classInitCheck();
            dmbawEventTarget.classInitCheck();
            dmbawNode.classInitCheck();
            dmbaOpaqueReferenceType.classInitCheck();
        }
    },

};

var dmbawNode = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 191,
    __implementedTypes : [1,188,191,8],


    classInitCheck : function() {
        if (!dmbawNode.__initialized) {
            dmbawNode.__initialized = true;
            jlObject.classInitCheck();
            dmbawEventTarget.classInitCheck();
            dmbaOpaqueReferenceType.classInitCheck();
        }
    },

};

var dmbawParentNode = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 192,
    __implementedTypes : [1,192,8],


    classInitCheck : function() {
        if (!dmbawParentNode.__initialized) {
            dmbawParentNode.__initialized = true;
            jlObject.classInitCheck();
            dmbaOpaqueReferenceType.classInitCheck();
        }
    },

};

var dmbawElement = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 193,
    __implementedTypes : [1,192,188,191,193,8],


    classInitCheck : function() {
        if (!dmbawElement.__initialized) {
            dmbawElement.__initialized = true;
            jlObject.classInitCheck();
            dmbawParentNode.classInitCheck();
            dmbawEventTarget.classInitCheck();
            dmbawNode.classInitCheck();
            dmbaOpaqueReferenceType.classInitCheck();
        }
    },

};

var dmbawHTMLCanvasElement = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 194,
    __implementedTypes : [1,192,195,188,194,191,193,8],


    classInitCheck : function() {
        if (!dmbawHTMLCanvasElement.__initialized) {
            dmbawHTMLCanvasElement.__initialized = true;
            jlObject.classInitCheck();
            dmbawParentNode.classInitCheck();
            dmbawHTMLElement.classInitCheck();
            dmbawEventTarget.classInitCheck();
            dmbawNode.classInitCheck();
            dmbawElement.classInitCheck();
            dmbaOpaqueReferenceType.classInitCheck();
        }
    },

};

var dmbawHTMLElement = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 195,
    __implementedTypes : [1,192,195,188,191,193,8],


    classInitCheck : function() {
        if (!dmbawHTMLElement.__initialized) {
            dmbawHTMLElement.__initialized = true;
            jlObject.classInitCheck();
            dmbawParentNode.classInitCheck();
            dmbawEventTarget.classInitCheck();
            dmbawNode.classInitCheck();
            dmbawElement.classInitCheck();
            dmbaOpaqueReferenceType.classInitCheck();
        }
    },

};

var dmbawCanvasRenderingContext2D = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 196,
    __implementedTypes : [196,1,8],


    classInitCheck : function() {
        if (!dmbawCanvasRenderingContext2D.__initialized) {
            dmbawCanvasRenderingContext2D.__initialized = true;
            jlObject.classInitCheck();
            dmbaOpaqueReferenceType.classInitCheck();
        }
    },

};

var dmbiJBox2DSimulation$1 = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 197,
    __implementedTypes : [1,7,197],

    Create : function() {
    },

    instanceOf : function(aType) {
        return dmbiJBox2DSimulation$1.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return dmbiJBox2DSimulation$1;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    VOIDrundmbaOpaqueReferenceType : function(thisRef,p1) {
        var __label__ = null;
        thisRef.VOIDrundmbawEvent(thisRef,p1);
        return;
    },

    VOIDrundmbawEvent : function(thisRef,aValue) {
        var __label__ = null;
        var var0 = jlSystem.LONGcurrentTimeMillis(); // type is LONG value type is LONG
        var local_2_LONG = var0; // type is LONG value type is LONG
        dmbiJBox2DSimulation.VOIDstatsBegin();
        var var3 = dmbiJBox2DSimulation.dmbiJBox2DSimulation$Sceneaccess$000(); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@45eeb186
        var3.VOIDcalculate(var3);
        dmbiJBox2DSimulation.VOIDaccess$100();
        dmbiJBox2DSimulation.VOIDstatsEnd();
        var var4 = jlSystem.LONGcurrentTimeMillis(); // type is LONG value type is LONG
        var local_4_INT = Math.floor((var4 - local_2_LONG)); // type is INT value type is INT
        dmbiJBox2DSimulation.VOIDlogRuntimeINT(local_4_INT);
        var var11 = dmbiJBox2DSimulation.dmbawWindowaccess$300(); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4e00732c
        var var12 = dmbiJBox2DSimulation.dmbaCallbackaccess$200(); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5c0205a8
        var11.requestAnimationFrame(function(event) {var v = var12;v.VOIDrundmbaOpaqueReferenceType(v, event);});
        return;
    },

    classInitCheck : function() {
        if (!dmbiJBox2DSimulation$1.__initialized) {
            dmbiJBox2DSimulation$1.__initialized = true;
            var thePrototype = dmbiJBox2DSimulation$1.Create.prototype;
            thePrototype.instanceOf = dmbiJBox2DSimulation$1.instanceOf;
            thePrototype.ClassgetClass = dmbiJBox2DSimulation$1.ClassgetClass;
            thePrototype.VOIDrundmbawEvent = dmbiJBox2DSimulation$1.VOIDrundmbawEvent;
            thePrototype.VOIDrundmbaOpaqueReferenceType = dmbiJBox2DSimulation$1.VOIDrundmbaOpaqueReferenceType;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            dmbaCallback.classInitCheck();
        }
    },

};

var dmbiJBox2DSimulation$2 = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 198,
    __implementedTypes : [1,7,198],

    Create : function() {
        this.val$button = null; // declared in de.mirkosertic.bytecoder.integrationtest.JBox2DSimulation$2
    },

    instanceOf : function(aType) {
        return dmbiJBox2DSimulation$2.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return dmbiJBox2DSimulation$2;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitdmbawHTMLElement : function(thisRef,p1) {
        var __label__ = null;
        thisRef.val$button = p1;
        return;
    },

    VOIDrundmbaOpaqueReferenceType : function(thisRef,p1) {
        var __label__ = null;
        thisRef.VOIDrundmbawClickEvent(thisRef,p1);
        return;
    },

    VOIDrundmbawClickEvent : function(thisRef,aValue) {
        var __label__ = null;
        var var1 = thisRef.val$button.style; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3dbcc9d5
        var1.setProperty(bytecoder.toJSString(bytecoder.stringpool[64]),bytecoder.toJSString(bytecoder.stringpool[65]));
        var var2 = dmbiJBox2DSimulation.dmbawWindowaccess$300(); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@160cc0b2
        var var3 = dmbiJBox2DSimulation.dmbaCallbackaccess$200(); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@104511f0
        var2.requestAnimationFrame(function(event) {var v = var3;v.VOIDrundmbaOpaqueReferenceType(v, event);});
        return;
    },

    classInitCheck : function() {
        if (!dmbiJBox2DSimulation$2.__initialized) {
            dmbiJBox2DSimulation$2.__initialized = true;
            var thePrototype = dmbiJBox2DSimulation$2.Create.prototype;
            thePrototype.instanceOf = dmbiJBox2DSimulation$2.instanceOf;
            thePrototype.ClassgetClass = dmbiJBox2DSimulation$2.ClassgetClass;
            thePrototype.VOIDrundmbawClickEvent = dmbiJBox2DSimulation$2.VOIDrundmbawClickEvent;
            thePrototype.VOIDrundmbaOpaqueReferenceType = dmbiJBox2DSimulation$2.VOIDrundmbaOpaqueReferenceType;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            dmbaCallback.classInitCheck();
        }
    },

};

var jlStringBuilder = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 199,
    __implementedTypes : [1,14,15,199,200,40,2],
    FORMAT_SYMBOLS : null, // declared in java.lang.StringBuilder

    Create : function() {
        this.byteData = null; // declared in java.lang.StringBuilder
    },

    instanceOf : function(aType) {
        return jlStringBuilder.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jlStringBuilder;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var __label__ = null;
        var var0 = new jtDecimalFormatSymbols.Create(); // type is REFERENCE value type is REFERENCE
        jtDecimalFormatSymbols.VOIDinit(var0);
        jlStringBuilder.FORMAT_SYMBOLS = var0;
        return;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = bytecoder.newArray(0,0); // type is REFERENCE value type is REFERENCE
        thisRef.byteData = var0;
        return;
    },

    jlStringBuilderappendINT : function(thisRef,aValue) {
        var __label__ = null;
        var var1 = thisRef.jlStringBuilderappendLONG(thisRef,Math.floor(aValue)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@398fabbd
        return var1;
    },

    jlStringBuilderappendLONG : function(thisRef,aValue) {
        var var11 = null; // type is LONG # of inits = 3
        var local_6_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_3_INT = null; // type is INT # of inits = 3
        var local_8_INT = null; // type is INT # of inits = 3
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_7_INT = null; // type is INT # of inits = 3
        var local_5_INT = null; // type is INT # of inits = 4
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_3_INT = 0; // type is INT value type is INT
            if ((aValue >= 0)) {
                var11 = aValue; // type is LONG value type is LONG
                __label__ = 13;
                break $S_0;
            }
            __label__ = 8;
            }
        $M_8_13 : for(;;) switch (__label__) {
            case 8 :
            // NORMAL
                local_3_INT = 1; // type is INT value type is INT
                var local_1_LONG = (-aValue); // type is LONG value type is LONG
                var11 = local_1_LONG; // type is LONG value type is LONG
                __label__ = 13;
                continue $M_8_13;
            case 13 :
            // NORMAL
                $S_13 : {
                // NORMAL
                    local_4_REFERENCE = bytecoder.newArray(20,0); // type is REFERENCE value type is REFERENCE
                    local_5_INT = 0; // type is INT value type is INT
                    __label__ = 22;
                    }
                $L_22 : for (;;) {
                    $S_22 : {
                    // NORMAL
                        var local_6_INT = (Math.floor(var11) % 10); // type is INT value type is INT
                        var var17 = local_4_REFERENCE; // type is REFERENCE value type is REFERENCE
                        var var18 = local_5_INT; // type is INT value type is INT
                        local_5_INT = (local_5_INT + 1); // type is INT value type is INT
                        var var20 = Math.floor(local_6_INT); // type is BYTE value type is BYTE
                        var17.data[var18] = var20;
                        var local_1_LONG = Math.floor((var11 / 10)); // type is LONG value type is LONG
                        var var24 = local_1_LONG; // type is LONG value type is LONG
                        if ((var24 > 0)) {
                            var11 = local_1_LONG; // type is LONG value type is LONG
                            __label__ = 22;
                            continue $L_22;
                        }
                        }
                    $S_52 : {
                    // NORMAL
                        var var26 = local_3_INT; // type is INT value type is INT
                        if ((var26 == 0)) {
                            __label__ = 76;
                            break $S_52;
                        }
                        __label__ = 56;
                        }
                    $M_56_76 : for(;;) switch (__label__) {
                        case 56 :
                        // NORMAL
                            local_6_REFERENCE = bytecoder.newArray((local_5_INT + 1),0); // type is REFERENCE value type is REFERENCE
                            var var31 = local_6_REFERENCE; // type is REFERENCE value type is REFERENCE
                            var31.data[0] = 45;
                            local_7_INT = 1; // type is INT value type is INT
                            break $M_56_76;
                        case 76 :
                        // NORMAL
                            local_6_REFERENCE = bytecoder.newArray(local_5_INT,0); // type is REFERENCE value type is REFERENCE
                            local_7_INT = 0; // type is INT value type is INT
                            break $M_56_76;
                    }
                    $S_85 : {
                    // NORMAL
                        local_8_INT = 0; // type is INT value type is INT
                        __label__ = 88;
                        }
                    $L_88 : for (;;) {
                        $S_88 : {
                        // NORMAL
                            var var39 = local_8_INT; // type is INT value type is INT
                            var var40 = local_5_INT; // type is INT value type is INT
                            if ((var39 >= var40)) {
                                __label__ = 123;
                                break $S_88;
                            }
                            __label__ = 95;
                            }
                        for(;;) switch (__label__) {
                            case 123 :
                            // NORMAL
                                thisRef.VOIDinternalAddA1BYTE(thisRef,local_6_REFERENCE);
                                return thisRef;
                            case 95 :
                            // NORMAL
                                var var41 = local_6_REFERENCE; // type is REFERENCE value type is REFERENCE
                                var var44 = (local_7_INT + local_8_INT); // type is INT value type is INT
                                var var50 = local_4_REFERENCE.data[((local_5_INT - 1) - local_8_INT)]; // type is BYTE value type is BYTE
                                var var52 = Math.floor((48 + var50)); // type is BYTE value type is BYTE
                                var41.data[var44] = var52;
                                local_8_INT = (local_8_INT + 1); // type is INT value type is INT
                                __label__ = 88;
                                continue $L_88;
                        }
                    }
                }
        }
    },

    VOIDinternalAddA1BYTE : function(thisRef,aOtherData) {
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_4_INT = null; // type is INT # of inits = 6
        var local_3_INT = null; // type is INT # of inits = 5
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_2_REFERENCE = bytecoder.newArray((thisRef.byteData.data.length + aOtherData.data.length),0); // type is REFERENCE value type is REFERENCE
            local_3_INT = 0; // type is INT value type is INT
            local_4_INT = 0; // type is INT value type is INT
            __label__ = 16;
            }
        $L_16 : for (;;) {
            $S_16 : {
            // NORMAL
                var var10 = local_4_INT; // type is INT value type is INT
                var var12 = thisRef.byteData.data.length; // type is INT value type is INT
                if ((var10 >= var12)) {
                    __label__ = 45;
                    break $S_16;
                }
                __label__ = 26;
                }
            for(;;) switch (__label__) {
                case 45 :
                // NORMAL
                    $S_45 : {
                    // NORMAL
                        local_4_INT = 0; // type is INT value type is INT
                        __label__ = 48;
                        }
                    $L_48 : for (;;) {
                        $S_48 : {
                        // NORMAL
                            var var14 = local_4_INT; // type is INT value type is INT
                            var var15 = aOtherData.data.length; // type is INT value type is INT
                            if ((var14 >= var15)) {
                                __label__ = 71;
                                break $S_48;
                            }
                            __label__ = 55;
                            }
                        for(;;) switch (__label__) {
                            case 55 :
                            // NORMAL
                                var var16 = local_2_REFERENCE; // type is REFERENCE value type is REFERENCE
                                var var17 = local_3_INT; // type is INT value type is INT
                                local_3_INT = (local_3_INT + 1); // type is INT value type is INT
                                var var19 = aOtherData.data[local_4_INT]; // type is BYTE value type is BYTE
                                var16.data[var17] = var19;
                                local_4_INT = (local_4_INT + 1); // type is INT value type is INT
                                __label__ = 48;
                                continue $L_48;
                            case 71 :
                            // NORMAL
                                var var25 = local_2_REFERENCE; // type is REFERENCE value type is REFERENCE
                                thisRef.byteData = var25;
                                return;
                        }
                    }
                case 26 :
                // NORMAL
                    var var20 = local_2_REFERENCE; // type is REFERENCE value type is REFERENCE
                    var var21 = local_3_INT; // type is INT value type is INT
                    local_3_INT = (local_3_INT + 1); // type is INT value type is INT
                    var var24 = thisRef.byteData.data[local_4_INT]; // type is BYTE value type is BYTE
                    var20.data[var21] = var24;
                    local_4_INT = (local_4_INT + 1); // type is INT value type is INT
                    __label__ = 16;
                    continue $L_16;
            }
        }
    },

    jlStringtoString : function(thisRef) {
        var __label__ = null;
        var var0 = new jlString.Create(); // type is REFERENCE value type is REFERENCE
        jlString.VOIDinitA1BYTE(var0,thisRef.byteData);
        return var0;
    },

    jlStringBuilderappendjlString : function(thisRef,aString) {
        var __label__ = null;
        var var0 = aString.A1BYTEgetBytes(aString); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@9f25a4c
        var local_2_REFERENCE = var0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@362f51d8
        thisRef.VOIDinternalAddA1BYTE(thisRef,local_2_REFERENCE);
        return thisRef;
    },

    jlStringBuilderappendFLOAT : function(thisRef,aValue) {
        var __label__ = null;
        thisRef.VOIDappendInternalDOUBLELONG(thisRef,aValue,1000000000);
        return thisRef;
    },

    VOIDappendInternalDOUBLELONG : function(thisRef,aValue,aMultiplier) {
        var local_5_LONG = null; // type is LONG # of inits = 2
        var local_12_INT = null; // type is INT # of inits = 3
        var local_9_REFERENCE = null; // type is REFERENCE # of inits = 3
        var local_7_LONG = null; // type is LONG # of inits = 2
        var local_10_INT = null; // type is INT # of inits = 4
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((aValue >= 0.0)) {
                __label__ = 30;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_6_30 : for(;;) switch (__label__) {
            case 30 :
            // NORMAL
                local_5_LONG = Math.floor(Math.floor(aValue)); // type is LONG value type is LONG
                local_7_LONG = Math.floor(Math.floor(((aValue % 1.0) * 10000.0))); // type is LONG value type is LONG
                break $M_6_30;
            case 6 :
            // NORMAL
                local_5_LONG = Math.floor(Math.ceil(aValue)); // type is LONG value type is LONG
                local_7_LONG = (-Math.floor(Math.ceil(((aValue % 1.0) * 10000.0)))); // type is LONG value type is LONG
                break $M_6_30;
        }
        $S_50 : {
        // NORMAL
            var var21 = thisRef.jlStringBuilderappendLONG(thisRef,local_5_LONG); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@f569ea9
            var var22 = new jlStringBuilder.Create(); // type is REFERENCE value type is REFERENCE
            jlStringBuilder.VOIDinit(var22);
            local_9_REFERENCE = var22; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5c074d08
            var var26 = local_9_REFERENCE.jlStringBuilderappendLONG(local_9_REFERENCE,local_7_LONG); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@747e08c9
            var var28 = local_9_REFERENCE.INTlength(local_9_REFERENCE); // type is INT value type is INT
            local_10_INT = (var28 - 1); // type is INT value type is INT
            __label__ = 83;
            }
        $L_83 : for (;;) {
            $S_83 : {
            // NORMAL
                var var32 = local_10_INT; // type is INT value type is INT
                if ((var32 < 0)) {
                    __label__ = 150;
                    break $S_83;
                }
                __label__ = 88;
                }
            for(;;) switch (__label__) {
                case 88 :
                // NORMAL
                    $S_88 : {
                    // NORMAL
                        var var35 = local_9_REFERENCE.CHARcharAtINT(local_9_REFERENCE,local_10_INT); // type is CHAR value type is CHAR
                        var local_11_CHAR = var35; // type is CHAR value type is CHAR
                        var var38 = local_11_CHAR; // type is CHAR value type is CHAR
                        if ((var38 == 48)) {
                            __label__ = 144;
                            break $S_88;
                        }
                        __label__ = 104;
                        }
                    for(;;) switch (__label__) {
                        case 144 :
                        // NORMAL
                            local_10_INT = (local_10_INT + -1); // type is INT value type is INT
                            __label__ = 83;
                            continue $L_83;
                        case 104 :
                        // NORMAL
                            $S_104 : {
                            // NORMAL
                                var var40 = jlStringBuilder.FORMAT_SYMBOLS.CHARgetDecimalSeparator(jlStringBuilder.FORMAT_SYMBOLS); // type is CHAR value type is CHAR
                                var var41 = thisRef.jlStringBuilderappendCHAR(thisRef,var40); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@e37f43e
                                local_12_INT = 0; // type is INT value type is INT
                                __label__ = 118;
                                }
                            $L_118 : for (;;) {
                                $S_118 : {
                                // NORMAL
                                    var var44 = local_12_INT; // type is INT value type is INT
                                    var var45 = local_10_INT; // type is INT value type is INT
                                    if ((var44 > var45)) {
                                        return;
                                    }
                                    }
                                var var48 = local_9_REFERENCE.CHARcharAtINT(local_9_REFERENCE,local_12_INT); // type is CHAR value type is CHAR
                                var var49 = thisRef.jlStringBuilderappendCHAR(thisRef,var48); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@55c770d6
                                local_12_INT = (local_12_INT + 1); // type is INT value type is INT
                                __label__ = 118;
                                continue $L_118;
                            }
                    }
                case 150 :
                // NORMAL
                    var var51 = jlStringBuilder.FORMAT_SYMBOLS.CHARgetDecimalSeparator(jlStringBuilder.FORMAT_SYMBOLS); // type is CHAR value type is CHAR
                    var var52 = thisRef.jlStringBuilderappendCHAR(thisRef,var51); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6e5f1f11
                    var var53 = thisRef.jlStringBuilderappendCHAR(thisRef,48); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6ae37a53
                    return;
            }
        }
    },

    INTlength : function(thisRef) {
        var __label__ = null;
        return thisRef.byteData.data.length;
    },

    CHARcharAtINT : function(thisRef,aIndex) {
        var __label__ = null;
        var var1 = thisRef.byteData.data[aIndex]; // type is BYTE value type is BYTE
        return Math.floor(var1);
    },

    jlStringBuilderappendCHAR : function(thisRef,aValue) {
        var __label__ = null;
        var var0 = bytecoder.newArray(1,0); // type is REFERENCE value type is REFERENCE
        var var1 = Math.floor(aValue); // type is BYTE value type is BYTE
        var0.data[0] = var1;
        thisRef.VOIDinternalAddA1BYTE(thisRef,var0);
        return thisRef;
    },

    jlStringBuilderappendjlObject : function(thisRef,aObject) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if (aObject != null ) {
                __label__ = 15;
                break $S_0;
            }
            __label__ = 4;
            }
        for(;;) switch (__label__) {
            case 4 :
            // NORMAL
                var var0 = bytecoder.stringpool[7].A1BYTEgetBytes(bytecoder.stringpool[7]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@134b7248
                thisRef.VOIDinternalAddA1BYTE(thisRef,var0);
                return thisRef;
            case 15 :
            // NORMAL
                $S_15 : {
                // NORMAL
                    var var1 = (aObject == null ? false : aObject.instanceOf(jlString)); // type is BOOLEAN value type is BOOLEAN
                    if ((var1 == 0)) {
                        __label__ = 35;
                        break $S_15;
                    }
                    __label__ = 22;
                    }
                for(;;) switch (__label__) {
                    case 35 :
                    // NORMAL
                        $S_35 : {
                        // NORMAL
                            var var2 = (aObject == null ? false : aObject.instanceOf(jlLong)); // type is BOOLEAN value type is BOOLEAN
                            if ((var2 == 0)) {
                                __label__ = 56;
                                break $S_35;
                            }
                            __label__ = 42;
                            }
                        for(;;) switch (__label__) {
                            case 56 :
                            // NORMAL
                                $S_56 : {
                                // NORMAL
                                    var var3 = (aObject == null ? false : aObject.instanceOf(jlInteger)); // type is BOOLEAN value type is BOOLEAN
                                    if ((var3 == 0)) {
                                        __label__ = 77;
                                        break $S_56;
                                    }
                                    __label__ = 63;
                                    }
                                for(;;) switch (__label__) {
                                    case 63 :
                                    // NORMAL
                                        var var4 = aObject.INTintValue(aObject); // type is INT value type is INT
                                        var var5 = thisRef.jlStringBuilderappendINT(thisRef,var4); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@330f8dc6
                                        return thisRef;
                                    case 77 :
                                    // NORMAL
                                        $S_77 : {
                                        // NORMAL
                                            var var6 = (aObject == null ? false : aObject.instanceOf(jlFloat)); // type is BOOLEAN value type is BOOLEAN
                                            if ((var6 == 0)) {
                                                __label__ = 98;
                                                break $S_77;
                                            }
                                            __label__ = 84;
                                            }
                                        for(;;) switch (__label__) {
                                            case 84 :
                                            // NORMAL
                                                var var7 = aObject.FLOATfloatValue(aObject); // type is FLOAT value type is FLOAT
                                                var var8 = thisRef.jlStringBuilderappendFLOAT(thisRef,var7); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@b410ff
                                                return thisRef;
                                            case 98 :
                                            // NORMAL
                                                $S_98 : {
                                                // NORMAL
                                                    var var9 = (aObject == null ? false : aObject.instanceOf(jlDouble)); // type is BOOLEAN value type is BOOLEAN
                                                    if ((var9 == 0)) {
                                                        __label__ = 119;
                                                        break $S_98;
                                                    }
                                                    __label__ = 105;
                                                    }
                                                for(;;) switch (__label__) {
                                                    case 105 :
                                                    // NORMAL
                                                        var var10 = aObject.DOUBLEdoubleValue(aObject); // type is DOUBLE value type is DOUBLE
                                                        var var11 = thisRef.jlStringBuilderappendDOUBLE(thisRef,var10); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5509e52e
                                                        return thisRef;
                                                    case 119 :
                                                    // NORMAL
                                                        var var15 = aObject.jlStringtoString(aObject); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1a2733f4
                                                        var var16 = var15.A1BYTEgetBytes(var15); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@3a34eba7
                                                        var local_2_REFERENCE = var16; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@671e2e33
                                                        thisRef.VOIDinternalAddA1BYTE(thisRef,local_2_REFERENCE);
                                                        return thisRef;
                                                }
                                        }
                                }
                            case 42 :
                            // NORMAL
                                var var12 = aObject.LONGlongValue(aObject); // type is LONG value type is LONG
                                var var13 = thisRef.jlStringBuilderappendLONG(thisRef,var12); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5ebfb3a8
                                return thisRef;
                        }
                    case 22 :
                    // NORMAL
                        var var14 = aObject.A1BYTEgetBytes(aObject); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@434b120b
                        thisRef.VOIDinternalAddA1BYTE(thisRef,var14);
                        return thisRef;
                }
        }
    },

    jlStringBuilderappendDOUBLE : function(thisRef,aValue) {
        var __label__ = null;
        thisRef.VOIDappendInternalDOUBLELONG(thisRef,aValue,1000000000);
        return thisRef;
    },

    classInitCheck : function() {
        if (!jlStringBuilder.__initialized) {
            jlStringBuilder.__initialized = true;
            var thePrototype = jlStringBuilder.Create.prototype;
            thePrototype.instanceOf = jlStringBuilder.instanceOf;
            thePrototype.ClassgetClass = jlStringBuilder.ClassgetClass;
            thePrototype.jlStringBuilderappendDOUBLE = jlStringBuilder.jlStringBuilderappendDOUBLE;
            thePrototype.jlStringBuilderappendjlObject = jlStringBuilder.jlStringBuilderappendjlObject;
            thePrototype.jlStringBuilderappendCHAR = jlStringBuilder.jlStringBuilderappendCHAR;
            thePrototype.CHARcharAtINT = jlStringBuilder.CHARcharAtINT;
            thePrototype.INTlength = jlStringBuilder.INTlength;
            thePrototype.VOIDappendInternalDOUBLELONG = jlStringBuilder.VOIDappendInternalDOUBLELONG;
            thePrototype.jlStringBuilderappendFLOAT = jlStringBuilder.jlStringBuilderappendFLOAT;
            thePrototype.jlStringBuilderappendjlString = jlStringBuilder.jlStringBuilderappendjlString;
            thePrototype.jlStringtoString = jlStringBuilder.jlStringtoString;
            thePrototype.VOIDinternalAddA1BYTE = jlStringBuilder.VOIDinternalAddA1BYTE;
            thePrototype.jlStringBuilderappendLONG = jlStringBuilder.jlStringBuilderappendLONG;
            thePrototype.jlStringBuilderappendINT = jlStringBuilder.jlStringBuilderappendINT;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlAbstractStringBuilder.classInitCheck();
            jlObject.classInitCheck();
            jlComparable.classInitCheck();
            jlCharSequence.classInitCheck();
            jlAppendable.classInitCheck();
            jiSerializable.classInitCheck();
            jtDecimalFormatSymbols.classInitCheck();
            jlStringBuilder.VOIDclinit();
        }
    },

};

var jlAbstractStringBuilder = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 200,
    __implementedTypes : [1,15,200,40],

    instanceOf : function(aType) {
        return jlAbstractStringBuilder.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jlAbstractStringBuilder;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    classInitCheck : function() {
        if (!jlAbstractStringBuilder.__initialized) {
            jlAbstractStringBuilder.__initialized = true;
            jlObject.classInitCheck();
            jlCharSequence.classInitCheck();
            jlAppendable.classInitCheck();
        }
    },

};

var jtDecimalFormatSymbols = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 201,
    __implementedTypes : [1,26,2,201],
    INSTANCE : null, // declared in java.text.DecimalFormatSymbols

    Create : function() {
    },

    instanceOf : function(aType) {
        return jtDecimalFormatSymbols.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jtDecimalFormatSymbols;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var __label__ = null;
        var var0 = new jtDecimalFormatSymbols.Create(); // type is REFERENCE value type is REFERENCE
        jtDecimalFormatSymbols.VOIDinit(var0);
        jtDecimalFormatSymbols.INSTANCE = var0;
        return;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    CHARgetDecimalSeparator : function(thisRef) {
        var __label__ = null;
        return 46;
    },

    classInitCheck : function() {
        if (!jtDecimalFormatSymbols.__initialized) {
            jtDecimalFormatSymbols.__initialized = true;
            var thePrototype = jtDecimalFormatSymbols.Create.prototype;
            thePrototype.instanceOf = jtDecimalFormatSymbols.instanceOf;
            thePrototype.ClassgetClass = jtDecimalFormatSymbols.ClassgetClass;
            thePrototype.CHARgetDecimalSeparator = jtDecimalFormatSymbols.CHARgetDecimalSeparator;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            jlCloneable.classInitCheck();
            jiSerializable.classInitCheck();
            jtDecimalFormatSymbols.VOIDclinit();
        }
    },

};

var dmbcjlTMath$FloatExponents = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 202,
    __implementedTypes : [202,1],
    exponents : null, // declared in de.mirkosertic.bytecoder.classlib.java.lang.TMath$FloatExponents
    negativeExponents : null, // declared in de.mirkosertic.bytecoder.classlib.java.lang.TMath$FloatExponents
    negativeExponents2 : null, // declared in de.mirkosertic.bytecoder.classlib.java.lang.TMath$FloatExponents

    Create : function() {
    },

    instanceOf : function(aType) {
        return dmbcjlTMath$FloatExponents.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return dmbcjlTMath$FloatExponents;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var __label__ = null;
        var var0 = bytecoder.newArray(7,0.0); // type is REFERENCE value type is REFERENCE
        var0.data[0] = 2.0;
        var0.data[1] = 4.0;
        var0.data[2] = 16.0;
        var0.data[3] = 256.0;
        var0.data[4] = 65536.0;
        var0.data[5] = 4.2949673E9;
        var0.data[6] = 1.8446744E19;
        dmbcjlTMath$FloatExponents.exponents = var0;
        var var1 = bytecoder.newArray(7,0.0); // type is REFERENCE value type is REFERENCE
        var1.data[0] = 0.5;
        var1.data[1] = 0.25;
        var1.data[2] = 0.0625;
        var1.data[3] = 0.00390625;
        var1.data[4] = 1.5258789E-5;
        var1.data[5] = 2.3283064E-10;
        var1.data[6] = 5.421011E-20;
        dmbcjlTMath$FloatExponents.negativeExponents = var1;
        var var2 = bytecoder.newArray(7,0.0); // type is REFERENCE value type is REFERENCE
        var2.data[0] = 1.0;
        var2.data[1] = 0.5;
        var2.data[2] = 0.125;
        var2.data[3] = 0.0078125;
        var2.data[4] = 3.0517578E-5;
        var2.data[5] = 4.656613E-10;
        var2.data[6] = 1.0842022E-19;
        dmbcjlTMath$FloatExponents.negativeExponents2 = var2;
        return;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    classInitCheck : function() {
        if (!dmbcjlTMath$FloatExponents.__initialized) {
            dmbcjlTMath$FloatExponents.__initialized = true;
            var thePrototype = dmbcjlTMath$FloatExponents.Create.prototype;
            thePrototype.instanceOf = dmbcjlTMath$FloatExponents.instanceOf;
            thePrototype.ClassgetClass = dmbcjlTMath$FloatExponents.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            dmbcjlTMath$FloatExponents.VOIDclinit();
        }
    },

};

var juSet = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 203,
    __implementedTypes : [1,178,203,177],


    classInitCheck : function() {
        if (!juSet.__initialized) {
            juSet.__initialized = true;
            jlObject.classInitCheck();
            jlIterable.classInitCheck();
            juCollection.classInitCheck();
        }
    },

};

var juIterator = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 204,
    __implementedTypes : [1,204],


    classInitCheck : function() {
        if (!juIterator.__initialized) {
            juIterator.__initialized = true;
            jlObject.classInitCheck();
        }
    },

};

var jlClassCastException = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 205,
    __implementedTypes : [1,182,64,205,183,2],

    Create : function() {
    },

    instanceOf : function(aType) {
        return jlClassCastException.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jlClassCastException;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        jlRuntimeException.VOIDinit(thisRef);
        return;
    },

    VOIDinitjlString : function(thisRef,s) {
        var __label__ = null;
        jlRuntimeException.VOIDinitjlString(thisRef,s);
        return;
    },

    classInitCheck : function() {
        if (!jlClassCastException.__initialized) {
            jlClassCastException.__initialized = true;
            var thePrototype = jlClassCastException.Create.prototype;
            thePrototype.instanceOf = jlClassCastException.instanceOf;
            thePrototype.ClassgetClass = jlClassCastException.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlRuntimeException.classInitCheck();
            jlObject.classInitCheck();
            jlThrowable.classInitCheck();
            jlException.classInitCheck();
            jiSerializable.classInitCheck();
        }
    },

};

var jlNullPointerException = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 206,
    __implementedTypes : [1,182,64,183,206,2],

    Create : function() {
    },

    instanceOf : function(aType) {
        return jlNullPointerException.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jlNullPointerException;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        jlRuntimeException.VOIDinit(thisRef);
        return;
    },

    VOIDinitjlString : function(thisRef,s) {
        var __label__ = null;
        jlRuntimeException.VOIDinitjlString(thisRef,s);
        return;
    },

    classInitCheck : function() {
        if (!jlNullPointerException.__initialized) {
            jlNullPointerException.__initialized = true;
            var thePrototype = jlNullPointerException.Create.prototype;
            thePrototype.instanceOf = jlNullPointerException.instanceOf;
            thePrototype.ClassgetClass = jlNullPointerException.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlRuntimeException.classInitCheck();
            jlObject.classInitCheck();
            jlThrowable.classInitCheck();
            jlException.classInitCheck();
            jiSerializable.classInitCheck();
        }
    },

};

var jlLong = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 207,
    __implementedTypes : [1,14,2,19,207],

    Create : function() {
        this.longValue = 0; // declared in java.lang.Long
    },

    instanceOf : function(aType) {
        return jlLong.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jlLong;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    LONGlongValue : function(thisRef) {
        var __label__ = null;
        return thisRef.longValue;
    },

    INThashCode : function(thisRef) {
        var __label__ = null;
        return Math.floor(thisRef.longValue);
    },

    BOOLEANequalsjlObject : function(thisRef,o) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((thisRef != o)) {
                break $S_0;
            }
            return 1;
            }
        $S_7 : {
        // NORMAL
            if (o == null ) {
                return 0;
            }
            }
        $S_11 : {
        // NORMAL
            var var0 = thisRef.ClassgetClass(); // type is REFERENCE value type is REFERENCE
            var var1 = o.ClassgetClass(); // type is REFERENCE value type is REFERENCE
            if ((var0 == var1)) {
                break $S_11;
            }
            return 0;
            }
        var local_2_REFERENCE = o; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@764c1460
        var var3 = thisRef.longValue; // type is LONG value type is LONG
        var var5 = local_2_REFERENCE.LONGlongValue(local_2_REFERENCE); // type is LONG value type is LONG
        if ((var3 == var5)) {
            return 1;
        }
        return 0;
    },

    jlStringtoString : function(thisRef) {
        var __label__ = null;
        var var1 = jlLong.jlStringtoStringLONG(thisRef.longValue); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3110aa94
        return var1;
    },

    jlStringtoStringLONG : function(aValue) {
        var __label__ = null;
        var var0 = new jlStringBuilder.Create(); // type is REFERENCE value type is REFERENCE
        jlStringBuilder.VOIDinit(var0);
        var local_2_REFERENCE = var0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1b8aa190
        var var3 = local_2_REFERENCE.jlStringBuilderappendLONG(local_2_REFERENCE,aValue); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@795d3f7f
        var var5 = local_2_REFERENCE.jlStringtoString(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1cd98420
        return var5;
    },

    classInitCheck : function() {
        if (!jlLong.__initialized) {
            jlLong.__initialized = true;
            var thePrototype = jlLong.Create.prototype;
            thePrototype.instanceOf = jlLong.instanceOf;
            thePrototype.ClassgetClass = jlLong.ClassgetClass;
            thePrototype.jlStringtoString = jlLong.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlLong.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlLong.INThashCode;
            thePrototype.LONGlongValue = jlLong.LONGlongValue;
            jlNumber.classInitCheck();
            jlObject.classInitCheck();
            jlComparable.classInitCheck();
            jiSerializable.classInitCheck();
        }
    },

};

var jlDouble = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 208,
    __implementedTypes : [1,14,2,19,208],

    Create : function() {
        this.doubleValue = 0; // declared in java.lang.Double
    },

    instanceOf : function(aType) {
        return jlDouble.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jlDouble;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    DOUBLEdoubleValue : function(thisRef) {
        var __label__ = null;
        return thisRef.doubleValue;
    },

    INThashCode : function(thisRef) {
        var __label__ = null;
        return Math.floor(thisRef.doubleValue);
    },

    BOOLEANequalsjlObject : function(thisRef,o) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((thisRef != o)) {
                break $S_0;
            }
            return 1;
            }
        $S_7 : {
        // NORMAL
            if (o == null ) {
                return 0;
            }
            }
        $S_11 : {
        // NORMAL
            var var0 = thisRef.ClassgetClass(); // type is REFERENCE value type is REFERENCE
            var var1 = o.ClassgetClass(); // type is REFERENCE value type is REFERENCE
            if ((var0 == var1)) {
                break $S_11;
            }
            return 0;
            }
        var local_2_REFERENCE = o; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@420816f0
        var var4 = local_2_REFERENCE.DOUBLEdoubleValue(local_2_REFERENCE); // type is DOUBLE value type is DOUBLE
        var var6 = jlDouble.INTcompareDOUBLEDOUBLE(var4,thisRef.doubleValue); // type is INT value type is INT
        if ((var6 == 0)) {
            return 1;
        }
        return 0;
    },

    INTcompareDOUBLEDOUBLE : function(d1,d2) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((d1 >= d2)) {
                break $S_0;
            }
            return -1;
            }
        if ((d1 <= d2)) {
            return 0;
        }
        return 1;
    },

    jlStringtoString : function(thisRef) {
        var __label__ = null;
        var var1 = jlDouble.jlStringtoStringDOUBLE(thisRef.doubleValue); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@423e6f67
        return var1;
    },

    jlStringtoStringDOUBLE : function(aValue) {
        var __label__ = null;
        var var0 = new jlStringBuilder.Create(); // type is REFERENCE value type is REFERENCE
        jlStringBuilder.VOIDinit(var0);
        var local_2_REFERENCE = var0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3745eee4
        var var3 = local_2_REFERENCE.jlStringBuilderappendDOUBLE(local_2_REFERENCE,aValue); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1d2ccf9f
        var var5 = local_2_REFERENCE.jlStringtoString(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@906dd6f
        return var5;
    },

    classInitCheck : function() {
        if (!jlDouble.__initialized) {
            jlDouble.__initialized = true;
            var thePrototype = jlDouble.Create.prototype;
            thePrototype.instanceOf = jlDouble.instanceOf;
            thePrototype.ClassgetClass = jlDouble.ClassgetClass;
            thePrototype.jlStringtoString = jlDouble.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlDouble.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlDouble.INThashCode;
            thePrototype.DOUBLEdoubleValue = jlDouble.DOUBLEdoubleValue;
            jlNumber.classInitCheck();
            jlObject.classInitCheck();
            jlComparable.classInitCheck();
            jiSerializable.classInitCheck();
        }
    },

};

var juHashMap$EntrySet = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 209,
    __implementedTypes : [1,209,210,178,203,176,177],

    Create : function() {
        this.this$0 = null; // declared in java.util.HashMap$EntrySet
    },

    instanceOf : function(aType) {
        return juHashMap$EntrySet.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return juHashMap$EntrySet;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    A1jlObjectfinishToArrayA1jlObjectjuIterator : function(p0,p1) {
         return juAbstractCollection.A1jlObjectfinishToArrayA1jlObjectjuIterator(p0,p1);
    },

    INThugeCapacityINT : function(p0) {
         return juAbstractCollection.INThugeCapacityINT(p0);
    },

    VOIDinitjuHashMap : function(thisRef,this$0) {
        var __label__ = null;
        thisRef.this$0 = this$0;
        juAbstractSet.VOIDinit(thisRef);
        return;
    },

    juIteratoriterator : function(thisRef) {
        var __label__ = null;
        var var0 = new juHashMap$EntryIterator.Create(); // type is REFERENCE value type is REFERENCE
        juHashMap$EntryIterator.VOIDinitjuHashMap(var0,thisRef.this$0);
        return var0;
    },

    INTsize : function(thisRef) {
        var __label__ = null;
        return thisRef.this$0.size;
    },

    BOOLEANcontainsjlObject : function(thisRef,o) {
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = (o == null ? false : o.instanceOf(juMap$Entry)); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                break $S_0;
            }
            return 0;
            }
        $S_9 : {
        // NORMAL
            local_2_REFERENCE = o; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@36d79f00
            var var3 = local_2_REFERENCE.jlObjectgetKey(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@16d95bfd
            var local_3_REFERENCE = var3; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@484791a5
            var var5 = thisRef.this$0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6d86a06b
            var var7 = juHashMap.INThashjlObject(local_3_REFERENCE); // type is INT value type is INT
            var var9 = var5.juHashMap$NodegetNodeINTjlObject(var5,var7,local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1855ea63
            local_4_REFERENCE = var9; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@55c30f56
            var var11 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@55c30f56
            if (var11 == null ) {
                __label__ = 53;
                break $S_9;
            }
            __label__ = 40;
            }
        $M_40_53 : for(;;) switch (__label__) {
            case 53 :
            // NORMAL
                var var15 = 0; // type is INT value type is INT
                return var15;
            case 40 :
            // NORMAL
                $S_40 : {
                // NORMAL
                    var var14 = local_4_REFERENCE.BOOLEANequalsjlObject(local_4_REFERENCE,local_2_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                    if ((var14 == 0)) {
                        __label__ = 53;
                        continue $M_40_53;
                    }
                    }
                var var15 = 1; // type is INT value type is INT
                return var15;
        }
    },

    classInitCheck : function() {
        if (!juHashMap$EntrySet.__initialized) {
            juHashMap$EntrySet.__initialized = true;
            var thePrototype = juHashMap$EntrySet.Create.prototype;
            thePrototype.instanceOf = juHashMap$EntrySet.instanceOf;
            thePrototype.ClassgetClass = juHashMap$EntrySet.ClassgetClass;
            thePrototype.BOOLEANcontainsjlObject = juHashMap$EntrySet.BOOLEANcontainsjlObject;
            thePrototype.INTsize = juHashMap$EntrySet.INTsize;
            thePrototype.juIteratoriterator = juHashMap$EntrySet.juIteratoriterator;
            thePrototype.BOOLEANequalsjlObject = juAbstractSet.BOOLEANequalsjlObject;
            thePrototype.INThashCode = juAbstractSet.INThashCode;
            thePrototype.BOOLEANcontainsAlljuCollection = juAbstractCollection.BOOLEANcontainsAlljuCollection;
            thePrototype.A1jlObjecttoArrayA1jlObject = juAbstractCollection.A1jlObjecttoArrayA1jlObject;
            thePrototype.jlStringtoString = juAbstractCollection.jlStringtoString;
            juAbstractSet.classInitCheck();
            jlObject.classInitCheck();
            jlIterable.classInitCheck();
            juSet.classInitCheck();
            juAbstractCollection.classInitCheck();
            juCollection.classInitCheck();
        }
    },

};

var juAbstractSet = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 210,
    __implementedTypes : [1,210,178,203,176,177],

    instanceOf : function(aType) {
        return juAbstractSet.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return juAbstractSet;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    A1jlObjectfinishToArrayA1jlObjectjuIterator : function(p0,p1) {
         return juAbstractCollection.A1jlObjectfinishToArrayA1jlObjectjuIterator(p0,p1);
    },

    INThugeCapacityINT : function(p0) {
         return juAbstractCollection.INThugeCapacityINT(p0);
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        juAbstractCollection.VOIDinit(thisRef);
        return;
    },

    INThashCode : function(thisRef) {
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_1_INT = null; // type is INT # of inits = 3
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_1_INT = 0; // type is INT value type is INT
            var var2 = thisRef.juIteratoriterator(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2e3bd32e
            local_2_REFERENCE = var2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1558370a
            __label__ = 7;
            }
        $L_7 : for (;;) {
            $S_7 : {
            // NORMAL
                var var5 = local_2_REFERENCE.BOOLEANhasNext(local_2_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                if ((var5 == 0)) {
                    return local_1_INT;
                }
                }
            $S_16 : {
            // NORMAL
                var var7 = local_2_REFERENCE.jlObjectnext(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@462183d3
                local_3_REFERENCE = var7; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@27d99ecc
                var var9 = local_3_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@27d99ecc
                if (var9 == null ) {
                    __label__ = 34;
                    break $S_16;
                }
                __label__ = 27;
                }
            $M_34_27 : for(;;) switch (__label__) {
                case 34 :
                // NORMAL
                    __label__ = 7;
                    continue $L_7;
                case 27 :
                // NORMAL
                    var var10 = local_1_INT; // type is INT value type is INT
                    var var12 = local_3_REFERENCE.INThashCode(local_3_REFERENCE); // type is INT value type is INT
                    local_1_INT = (var10 + var12); // type is INT value type is INT
                    __label__ = 34;
                    continue $M_34_27;
            }
        }
    },

    BOOLEANequalsjlObject : function(thisRef,o) {
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((o != thisRef)) {
                break $S_0;
            }
            return 1;
            }
        $S_7 : {
        // NORMAL
            var var0 = (o == null ? false : o.instanceOf(juSet)); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                break $S_7;
            }
            return 0;
            }
        $S_16 : {
        // NORMAL
            local_2_REFERENCE = o; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@312e8aba
            var var3 = local_2_REFERENCE.INTsize(local_2_REFERENCE); // type is INT value type is INT
            var var4 = thisRef.INTsize(thisRef); // type is INT value type is INT
            if ((var3 == var4)) {
                break $S_16;
            }
            return 0;
            }
        try {
            var var6 = thisRef.BOOLEANcontainsAlljuCollection(thisRef,local_2_REFERENCE); // type is BOOLEAN value type is BOOLEAN
            return var6;
        } catch (e) {
            dmbcExceptionManager.VOIDpushjlThrowable(e);
            if (e.instanceOf(jlNullPointerException)) {
                __label__ = 42;
            } else {
                throw dmbcExceptionManager.jlThrowablepop();
            }
        }
        var local_0_REFERENCE = thisRef; // type is REFERENCE value type is REFERENCE
        var var8 = dmbcExceptionManager.jlThrowablepop(); // type is REFERENCE value type is REFERENCE
        var local_3_REFERENCE = var8; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@60340b48
        return 0;
    },

    classInitCheck : function() {
        if (!juAbstractSet.__initialized) {
            juAbstractSet.__initialized = true;
            juAbstractCollection.classInitCheck();
            jlObject.classInitCheck();
            jlIterable.classInitCheck();
            juSet.classInitCheck();
            juCollection.classInitCheck();
        }
    },

};

var jlUnsupportedOperationException = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 211,
    __implementedTypes : [1,182,64,183,211,2],

    Create : function() {
    },

    instanceOf : function(aType) {
        return jlUnsupportedOperationException.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jlUnsupportedOperationException;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        jlRuntimeException.VOIDinit(thisRef);
        return;
    },

    VOIDinitjlString : function(thisRef,message) {
        var __label__ = null;
        jlRuntimeException.VOIDinitjlString(thisRef,message);
        return;
    },

    classInitCheck : function() {
        if (!jlUnsupportedOperationException.__initialized) {
            jlUnsupportedOperationException.__initialized = true;
            var thePrototype = jlUnsupportedOperationException.Create.prototype;
            thePrototype.instanceOf = jlUnsupportedOperationException.instanceOf;
            thePrototype.ClassgetClass = jlUnsupportedOperationException.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlRuntimeException.classInitCheck();
            jlObject.classInitCheck();
            jlThrowable.classInitCheck();
            jlException.classInitCheck();
            jiSerializable.classInitCheck();
        }
    },

};

var ojdcPolygonContact = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 212,
    __implementedTypes : [1,120,212],
    $assertionsDisabled : false, // declared in org.jbox2d.dynamics.contacts.PolygonContact

    Create : function() {
        this.m_flags = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_nodeA = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_nodeB = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.oldManifold = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_fixtureA = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_fixtureB = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_manifold = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.pool = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_indexA = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_indexB = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_next = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_prev = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_friction = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_restitution = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_tangentSpeed = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_toiCount = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_toi = 0; // declared in org.jbox2d.dynamics.contacts.Contact
    },

    instanceOf : function(aType) {
        return ojdcPolygonContact.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdcPolygonContact;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    FLOATmixFrictionFLOATFLOAT : function(p0,p1) {
         return ojdcContact.FLOATmixFrictionFLOATFLOAT(p0,p1);
    },

    FLOATmixRestitutionFLOATFLOAT : function(p0,p1) {
         return ojdcContact.FLOATmixRestitutionFLOATFLOAT(p0,p1);
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdcPolygonContact.BOOLEANdesiredAssertionStatus(ojdcPolygonContact); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_9_13 : for(;;) switch (__label__) {
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_9_13;
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_9_13;
        }
        ojdcPolygonContact.$assertionsDisabled = var1;
        return;
    },

    VOIDinitojpIWorldPool : function(thisRef,argPool) {
        var __label__ = null;
        ojdcContact.VOIDinitojpIWorldPool(thisRef,argPool);
        return;
    },

    VOIDevaluateojcManifoldojcTransformojcTransform : function(thisRef,manifold,xfA,xfB) {
        var __label__ = null;
        var var1 = thisRef.pool.ojcCollisiongetCollision(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@24dfd412
        var var3 = thisRef.m_fixtureA.ojcsShapegetShape(thisRef.m_fixtureA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@30506255
        var var5 = thisRef.m_fixtureB.ojcsShapegetShape(thisRef.m_fixtureB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@14acb24
        var1.VOIDcollidePolygonsojcManifoldojcsPolygonShapeojcTransformojcsPolygonShapeojcTransform(var1,manifold,var3,xfA,var5,xfB);
        return;
    },

    classInitCheck : function() {
        if (!ojdcPolygonContact.__initialized) {
            ojdcPolygonContact.__initialized = true;
            var thePrototype = ojdcPolygonContact.Create.prototype;
            thePrototype.instanceOf = ojdcPolygonContact.instanceOf;
            thePrototype.ClassgetClass = ojdcPolygonContact.ClassgetClass;
            thePrototype.VOIDevaluateojcManifoldojcTransformojcTransform = ojdcPolygonContact.VOIDevaluateojcManifoldojcTransformojcTransform;
            thePrototype.VOIDinitojdFixtureINTojdFixtureINT = ojdcContact.VOIDinitojdFixtureINTojdFixtureINT;
            thePrototype.VOIDsetEnabledBOOLEAN = ojdcContact.VOIDsetEnabledBOOLEAN;
            thePrototype.ojcManifoldgetManifold = ojdcContact.ojcManifoldgetManifold;
            thePrototype.BOOLEANisEnabled = ojdcContact.BOOLEANisEnabled;
            thePrototype.VOIDupdateojcContactListener = ojdcContact.VOIDupdateojcContactListener;
            thePrototype.BOOLEANisTouching = ojdcContact.BOOLEANisTouching;
            thePrototype.ojdcContactgetNext = ojdcContact.ojdcContactgetNext;
            thePrototype.INTgetChildIndexB = ojdcContact.INTgetChildIndexB;
            thePrototype.INTgetChildIndexA = ojdcContact.INTgetChildIndexA;
            thePrototype.ojdFixturegetFixtureB = ojdcContact.ojdFixturegetFixtureB;
            thePrototype.ojdFixturegetFixtureA = ojdcContact.ojdFixturegetFixtureA;
            thePrototype.VOIDflagForFiltering = ojdcContact.VOIDflagForFiltering;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojdcContact.classInitCheck();
            jlObject.classInitCheck();
            ojdcPolygonContact.VOIDclinit();
        }
    },

};

var ojcManifold = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 213,
    __implementedTypes : [213,1],

    Create : function() {
        this.points = null; // declared in org.jbox2d.collision.Manifold
        this.localNormal = null; // declared in org.jbox2d.collision.Manifold
        this.localPoint = null; // declared in org.jbox2d.collision.Manifold
        this.pointCount = 0; // declared in org.jbox2d.collision.Manifold
        this.type = null; // declared in org.jbox2d.collision.Manifold
    },

    instanceOf : function(aType) {
        return ojcManifold.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcManifold;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var local_1_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = bytecoder.newArray(2,null); // type is REFERENCE value type is REFERENCE
            thisRef.points = var0;
            local_1_INT = 0; // type is INT value type is INT
            __label__ = 14;
            }
        $L_14 : for (;;) {
            $S_14 : {
            // NORMAL
                var var3 = local_1_INT; // type is INT value type is INT
                if ((var3 >= 2)) {
                    __label__ = 38;
                    break $S_14;
                }
                __label__ = 19;
                }
            for(;;) switch (__label__) {
                case 38 :
                // NORMAL
                    var var7 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
                    ojcVec2.VOIDinit(var7);
                    thisRef.localNormal = var7;
                    var var8 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
                    ojcVec2.VOIDinit(var8);
                    thisRef.localPoint = var8;
                    thisRef.pointCount = 0;
                    return;
                case 19 :
                // NORMAL
                    var var4 = thisRef.points; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@836453e
                    var var5 = local_1_INT; // type is INT value type is INT
                    var var6 = new ojcManifoldPoint.Create(); // type is REFERENCE value type is REFERENCE
                    ojcManifoldPoint.VOIDinit(var6);
                    var4.data[var5] = var6;
                    local_1_INT = (local_1_INT + 1); // type is INT value type is INT
                    __label__ = 14;
                    continue $L_14;
            }
        }
    },

    VOIDsetojcManifold : function(thisRef,cp) {
        var local_2_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_2_INT = 0; // type is INT value type is INT
            __label__ = 2;
            }
        $L_2 : for (;;) {
            $S_2 : {
            // NORMAL
                var var2 = local_2_INT; // type is INT value type is INT
                var var3 = cp.pointCount; // type is INT value type is INT
                if ((var2 >= var3)) {
                    __label__ = 31;
                    break $S_2;
                }
                __label__ = 10;
                }
            for(;;) switch (__label__) {
                case 31 :
                // NORMAL
                    var var4 = cp.type; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6e4ee15a
                    thisRef.type = var4;
                    var var7 = thisRef.localNormal.ojcVec2setojcVec2(thisRef.localNormal,cp.localNormal); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@64d2ece
                    var var10 = thisRef.localPoint.ojcVec2setojcVec2(thisRef.localPoint,cp.localPoint); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@304a1e16
                    var var11 = cp.pointCount; // type is INT value type is INT
                    thisRef.pointCount = var11;
                    return;
                case 10 :
                // NORMAL
                    var var14 = thisRef.points.data[local_2_INT]; // type is REFERENCE value type is REFERENCE
                    var var17 = cp.points.data[local_2_INT]; // type is REFERENCE value type is REFERENCE
                    var14.VOIDsetojcManifoldPoint(var14,var17);
                    local_2_INT = (local_2_INT + 1); // type is INT value type is INT
                    __label__ = 2;
                    continue $L_2;
            }
        }
    },

    classInitCheck : function() {
        if (!ojcManifold.__initialized) {
            ojcManifold.__initialized = true;
            var thePrototype = ojcManifold.Create.prototype;
            thePrototype.instanceOf = ojcManifold.instanceOf;
            thePrototype.ClassgetClass = ojcManifold.ClassgetClass;
            thePrototype.VOIDsetojcManifold = ojcManifold.VOIDsetojcManifold;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojcManifoldPoint = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 214,
    __implementedTypes : [1,214],

    Create : function() {
        this.localPoint = null; // declared in org.jbox2d.collision.ManifoldPoint
        this.tangentImpulse = 0; // declared in org.jbox2d.collision.ManifoldPoint
        this.normalImpulse = 0; // declared in org.jbox2d.collision.ManifoldPoint
        this.id = null; // declared in org.jbox2d.collision.ManifoldPoint
    },

    instanceOf : function(aType) {
        return ojcManifoldPoint.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcManifoldPoint;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var0);
        thisRef.localPoint = var0;
        thisRef.tangentImpulse = 0.0;
        thisRef.normalImpulse = 0.0;
        var var1 = new ojcContactID.Create(); // type is REFERENCE value type is REFERENCE
        ojcContactID.VOIDinit(var1);
        thisRef.id = var1;
        return;
    },

    VOIDsetojcManifoldPoint : function(thisRef,cp) {
        var __label__ = null;
        var var2 = thisRef.localPoint.ojcVec2setojcVec2(thisRef.localPoint,cp.localPoint); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3311a4a2
        var var3 = cp.normalImpulse; // type is FLOAT value type is FLOAT
        thisRef.normalImpulse = var3;
        var var4 = cp.tangentImpulse; // type is FLOAT value type is FLOAT
        thisRef.tangentImpulse = var4;
        thisRef.id.VOIDsetojcContactID(thisRef.id,cp.id);
        return;
    },

    classInitCheck : function() {
        if (!ojcManifoldPoint.__initialized) {
            ojcManifoldPoint.__initialized = true;
            var thePrototype = ojcManifoldPoint.Create.prototype;
            thePrototype.instanceOf = ojcManifoldPoint.instanceOf;
            thePrototype.ClassgetClass = ojcManifoldPoint.ClassgetClass;
            thePrototype.VOIDsetojcManifoldPoint = ojcManifoldPoint.VOIDsetojcManifoldPoint;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojdcCircleContact = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 215,
    __implementedTypes : [1,215,120],
    $assertionsDisabled : false, // declared in org.jbox2d.dynamics.contacts.CircleContact

    Create : function() {
        this.m_flags = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_nodeA = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_nodeB = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.oldManifold = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_fixtureA = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_fixtureB = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_manifold = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.pool = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_indexA = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_indexB = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_next = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_prev = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_friction = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_restitution = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_tangentSpeed = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_toiCount = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_toi = 0; // declared in org.jbox2d.dynamics.contacts.Contact
    },

    instanceOf : function(aType) {
        return ojdcCircleContact.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdcCircleContact;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    FLOATmixFrictionFLOATFLOAT : function(p0,p1) {
         return ojdcContact.FLOATmixFrictionFLOATFLOAT(p0,p1);
    },

    FLOATmixRestitutionFLOATFLOAT : function(p0,p1) {
         return ojdcContact.FLOATmixRestitutionFLOATFLOAT(p0,p1);
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdcCircleContact.BOOLEANdesiredAssertionStatus(ojdcCircleContact); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_13_9 : for(;;) switch (__label__) {
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_13_9;
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_13_9;
        }
        ojdcCircleContact.$assertionsDisabled = var1;
        return;
    },

    VOIDinitojpIWorldPool : function(thisRef,argPool) {
        var __label__ = null;
        ojdcContact.VOIDinitojpIWorldPool(thisRef,argPool);
        return;
    },

    VOIDevaluateojcManifoldojcTransformojcTransform : function(thisRef,manifold,xfA,xfB) {
        var __label__ = null;
        var var1 = thisRef.pool.ojcCollisiongetCollision(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@169d8c7c
        var var3 = thisRef.m_fixtureA.ojcsShapegetShape(thisRef.m_fixtureA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1d0c50e8
        var var5 = thisRef.m_fixtureB.ojcsShapegetShape(thisRef.m_fixtureB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6a57a8dd
        var1.VOIDcollideCirclesojcManifoldojcsCircleShapeojcTransformojcsCircleShapeojcTransform(var1,manifold,var3,xfA,var5,xfB);
        return;
    },

    classInitCheck : function() {
        if (!ojdcCircleContact.__initialized) {
            ojdcCircleContact.__initialized = true;
            var thePrototype = ojdcCircleContact.Create.prototype;
            thePrototype.instanceOf = ojdcCircleContact.instanceOf;
            thePrototype.ClassgetClass = ojdcCircleContact.ClassgetClass;
            thePrototype.VOIDevaluateojcManifoldojcTransformojcTransform = ojdcCircleContact.VOIDevaluateojcManifoldojcTransformojcTransform;
            thePrototype.VOIDinitojdFixtureINTojdFixtureINT = ojdcContact.VOIDinitojdFixtureINTojdFixtureINT;
            thePrototype.VOIDsetEnabledBOOLEAN = ojdcContact.VOIDsetEnabledBOOLEAN;
            thePrototype.ojcManifoldgetManifold = ojdcContact.ojcManifoldgetManifold;
            thePrototype.BOOLEANisEnabled = ojdcContact.BOOLEANisEnabled;
            thePrototype.VOIDupdateojcContactListener = ojdcContact.VOIDupdateojcContactListener;
            thePrototype.BOOLEANisTouching = ojdcContact.BOOLEANisTouching;
            thePrototype.ojdcContactgetNext = ojdcContact.ojdcContactgetNext;
            thePrototype.INTgetChildIndexB = ojdcContact.INTgetChildIndexB;
            thePrototype.INTgetChildIndexA = ojdcContact.INTgetChildIndexA;
            thePrototype.ojdFixturegetFixtureB = ojdcContact.ojdFixturegetFixtureB;
            thePrototype.ojdFixturegetFixtureA = ojdcContact.ojdFixturegetFixtureA;
            thePrototype.VOIDflagForFiltering = ojdcContact.VOIDflagForFiltering;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojdcContact.classInitCheck();
            jlObject.classInitCheck();
            ojdcCircleContact.VOIDclinit();
        }
    },

};

var ojdcPolygonAndCircleContact = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 216,
    __implementedTypes : [1,216,120],
    $assertionsDisabled : false, // declared in org.jbox2d.dynamics.contacts.PolygonAndCircleContact

    Create : function() {
        this.m_flags = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_nodeA = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_nodeB = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.oldManifold = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_fixtureA = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_fixtureB = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_manifold = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.pool = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_indexA = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_indexB = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_next = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_prev = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_friction = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_restitution = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_tangentSpeed = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_toiCount = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_toi = 0; // declared in org.jbox2d.dynamics.contacts.Contact
    },

    instanceOf : function(aType) {
        return ojdcPolygonAndCircleContact.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdcPolygonAndCircleContact;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    FLOATmixFrictionFLOATFLOAT : function(p0,p1) {
         return ojdcContact.FLOATmixFrictionFLOATFLOAT(p0,p1);
    },

    FLOATmixRestitutionFLOATFLOAT : function(p0,p1) {
         return ojdcContact.FLOATmixRestitutionFLOATFLOAT(p0,p1);
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdcPolygonAndCircleContact.BOOLEANdesiredAssertionStatus(ojdcPolygonAndCircleContact); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_13_9 : for(;;) switch (__label__) {
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_13_9;
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_13_9;
        }
        ojdcPolygonAndCircleContact.$assertionsDisabled = var1;
        return;
    },

    VOIDinitojpIWorldPool : function(thisRef,argPool) {
        var __label__ = null;
        ojdcContact.VOIDinitojpIWorldPool(thisRef,argPool);
        return;
    },

    VOIDevaluateojcManifoldojcTransformojcTransform : function(thisRef,manifold,xfA,xfB) {
        var __label__ = null;
        var var1 = thisRef.pool.ojcCollisiongetCollision(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1c319d0f
        var var3 = thisRef.m_fixtureA.ojcsShapegetShape(thisRef.m_fixtureA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5f24d702
        var var5 = thisRef.m_fixtureB.ojcsShapegetShape(thisRef.m_fixtureB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7ea590f4
        var1.VOIDcollidePolygonAndCircleojcManifoldojcsPolygonShapeojcTransformojcsCircleShapeojcTransform(var1,manifold,var3,xfA,var5,xfB);
        return;
    },

    classInitCheck : function() {
        if (!ojdcPolygonAndCircleContact.__initialized) {
            ojdcPolygonAndCircleContact.__initialized = true;
            var thePrototype = ojdcPolygonAndCircleContact.Create.prototype;
            thePrototype.instanceOf = ojdcPolygonAndCircleContact.instanceOf;
            thePrototype.ClassgetClass = ojdcPolygonAndCircleContact.ClassgetClass;
            thePrototype.VOIDevaluateojcManifoldojcTransformojcTransform = ojdcPolygonAndCircleContact.VOIDevaluateojcManifoldojcTransformojcTransform;
            thePrototype.VOIDinitojdFixtureINTojdFixtureINT = ojdcContact.VOIDinitojdFixtureINTojdFixtureINT;
            thePrototype.VOIDsetEnabledBOOLEAN = ojdcContact.VOIDsetEnabledBOOLEAN;
            thePrototype.ojcManifoldgetManifold = ojdcContact.ojcManifoldgetManifold;
            thePrototype.BOOLEANisEnabled = ojdcContact.BOOLEANisEnabled;
            thePrototype.VOIDupdateojcContactListener = ojdcContact.VOIDupdateojcContactListener;
            thePrototype.BOOLEANisTouching = ojdcContact.BOOLEANisTouching;
            thePrototype.ojdcContactgetNext = ojdcContact.ojdcContactgetNext;
            thePrototype.INTgetChildIndexB = ojdcContact.INTgetChildIndexB;
            thePrototype.INTgetChildIndexA = ojdcContact.INTgetChildIndexA;
            thePrototype.ojdFixturegetFixtureB = ojdcContact.ojdFixturegetFixtureB;
            thePrototype.ojdFixturegetFixtureA = ojdcContact.ojdFixturegetFixtureA;
            thePrototype.VOIDflagForFiltering = ojdcContact.VOIDflagForFiltering;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojdcContact.classInitCheck();
            jlObject.classInitCheck();
            ojdcPolygonAndCircleContact.VOIDclinit();
        }
    },

};

var ojdcEdgeAndCircleContact = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 217,
    __implementedTypes : [1,217,120],
    $assertionsDisabled : false, // declared in org.jbox2d.dynamics.contacts.EdgeAndCircleContact

    Create : function() {
        this.m_flags = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_nodeA = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_nodeB = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.oldManifold = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_fixtureA = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_fixtureB = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_manifold = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.pool = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_indexA = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_indexB = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_next = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_prev = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_friction = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_restitution = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_tangentSpeed = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_toiCount = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_toi = 0; // declared in org.jbox2d.dynamics.contacts.Contact
    },

    instanceOf : function(aType) {
        return ojdcEdgeAndCircleContact.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdcEdgeAndCircleContact;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    FLOATmixFrictionFLOATFLOAT : function(p0,p1) {
         return ojdcContact.FLOATmixFrictionFLOATFLOAT(p0,p1);
    },

    FLOATmixRestitutionFLOATFLOAT : function(p0,p1) {
         return ojdcContact.FLOATmixRestitutionFLOATFLOAT(p0,p1);
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdcEdgeAndCircleContact.BOOLEANdesiredAssertionStatus(ojdcEdgeAndCircleContact); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_9_13 : for(;;) switch (__label__) {
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_9_13;
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_9_13;
        }
        ojdcEdgeAndCircleContact.$assertionsDisabled = var1;
        return;
    },

    VOIDinitojpIWorldPool : function(thisRef,argPool) {
        var __label__ = null;
        ojdcContact.VOIDinitojpIWorldPool(thisRef,argPool);
        return;
    },

    VOIDevaluateojcManifoldojcTransformojcTransform : function(thisRef,manifold,xfA,xfB) {
        var __label__ = null;
        var var1 = thisRef.pool.ojcCollisiongetCollision(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@37fd90ef
        var var3 = thisRef.m_fixtureA.ojcsShapegetShape(thisRef.m_fixtureA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@63382239
        var var5 = thisRef.m_fixtureB.ojcsShapegetShape(thisRef.m_fixtureB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@18440890
        var1.VOIDcollideEdgeAndCircleojcManifoldojcsEdgeShapeojcTransformojcsCircleShapeojcTransform(var1,manifold,var3,xfA,var5,xfB);
        return;
    },

    VOIDinitojdFixtureINTojdFixtureINT : function(thisRef,fA,indexA,fB,indexB) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            thisRef.VOIDinitojdFixtureINTojdFixtureINT(thisRef,fA,indexA,fB,indexB);
            var var0 = ojdcEdgeAndCircleContact.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 36;
                break $S_0;
            }
            __label__ = 15;
            }
        $M_15_36 : for(;;) switch (__label__) {
            case 15 :
            // NORMAL
                $S_15 : {
                // NORMAL
                    var var2 = thisRef.m_fixtureA.ojcsShapeTypegetType(thisRef.m_fixtureA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@d4edc37
                    var var3 = ojcsShapeType.EDGE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@535752a2
                    if ((var2 == var3)) {
                        __label__ = 36;
                        continue $M_15_36;
                    }
                    }
                var var4 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var4);
                throw var4;
            case 36 :
            // NORMAL
                $S_36 : {
                // NORMAL
                    var var5 = ojdcEdgeAndCircleContact.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                    if ((var5 != 0)) {
                        return;
                    }
                    }
                $S_42 : {
                // NORMAL
                    var var7 = thisRef.m_fixtureB.ojcsShapeTypegetType(thisRef.m_fixtureB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@279badb
                    var var8 = ojcsShapeType.CIRCLE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6c080b5b
                    if ((var7 == var8)) {
                        return;
                    }
                    }
                var var9 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var9);
                throw var9;
        }
    },

    classInitCheck : function() {
        if (!ojdcEdgeAndCircleContact.__initialized) {
            ojdcEdgeAndCircleContact.__initialized = true;
            var thePrototype = ojdcEdgeAndCircleContact.Create.prototype;
            thePrototype.instanceOf = ojdcEdgeAndCircleContact.instanceOf;
            thePrototype.ClassgetClass = ojdcEdgeAndCircleContact.ClassgetClass;
            thePrototype.VOIDinitojdFixtureINTojdFixtureINT = ojdcEdgeAndCircleContact.VOIDinitojdFixtureINTojdFixtureINT;
            thePrototype.VOIDevaluateojcManifoldojcTransformojcTransform = ojdcEdgeAndCircleContact.VOIDevaluateojcManifoldojcTransformojcTransform;
            thePrototype.VOIDsetEnabledBOOLEAN = ojdcContact.VOIDsetEnabledBOOLEAN;
            thePrototype.ojcManifoldgetManifold = ojdcContact.ojcManifoldgetManifold;
            thePrototype.BOOLEANisEnabled = ojdcContact.BOOLEANisEnabled;
            thePrototype.VOIDupdateojcContactListener = ojdcContact.VOIDupdateojcContactListener;
            thePrototype.BOOLEANisTouching = ojdcContact.BOOLEANisTouching;
            thePrototype.ojdcContactgetNext = ojdcContact.ojdcContactgetNext;
            thePrototype.INTgetChildIndexB = ojdcContact.INTgetChildIndexB;
            thePrototype.INTgetChildIndexA = ojdcContact.INTgetChildIndexA;
            thePrototype.ojdFixturegetFixtureB = ojdcContact.ojdFixturegetFixtureB;
            thePrototype.ojdFixturegetFixtureA = ojdcContact.ojdFixturegetFixtureA;
            thePrototype.VOIDflagForFiltering = ojdcContact.VOIDflagForFiltering;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojdcContact.classInitCheck();
            jlObject.classInitCheck();
            ojdcEdgeAndCircleContact.VOIDclinit();
        }
    },

};

var ojdcEdgeAndPolygonContact = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 218,
    __implementedTypes : [1,218,120],
    $assertionsDisabled : false, // declared in org.jbox2d.dynamics.contacts.EdgeAndPolygonContact

    Create : function() {
        this.m_flags = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_nodeA = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_nodeB = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.oldManifold = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_fixtureA = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_fixtureB = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_manifold = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.pool = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_indexA = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_indexB = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_next = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_prev = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_friction = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_restitution = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_tangentSpeed = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_toiCount = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_toi = 0; // declared in org.jbox2d.dynamics.contacts.Contact
    },

    instanceOf : function(aType) {
        return ojdcEdgeAndPolygonContact.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdcEdgeAndPolygonContact;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    FLOATmixFrictionFLOATFLOAT : function(p0,p1) {
         return ojdcContact.FLOATmixFrictionFLOATFLOAT(p0,p1);
    },

    FLOATmixRestitutionFLOATFLOAT : function(p0,p1) {
         return ojdcContact.FLOATmixRestitutionFLOATFLOAT(p0,p1);
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdcEdgeAndPolygonContact.BOOLEANdesiredAssertionStatus(ojdcEdgeAndPolygonContact); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_13_9 : for(;;) switch (__label__) {
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_13_9;
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_13_9;
        }
        ojdcEdgeAndPolygonContact.$assertionsDisabled = var1;
        return;
    },

    VOIDinitojpIWorldPool : function(thisRef,argPool) {
        var __label__ = null;
        ojdcContact.VOIDinitojpIWorldPool(thisRef,argPool);
        return;
    },

    VOIDevaluateojcManifoldojcTransformojcTransform : function(thisRef,manifold,xfA,xfB) {
        var __label__ = null;
        var var1 = thisRef.pool.ojcCollisiongetCollision(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@44effb87
        var var3 = thisRef.m_fixtureA.ojcsShapegetShape(thisRef.m_fixtureA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7dbe6179
        var var5 = thisRef.m_fixtureB.ojcsShapegetShape(thisRef.m_fixtureB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@75b431e6
        var1.VOIDcollideEdgeAndPolygonojcManifoldojcsEdgeShapeojcTransformojcsPolygonShapeojcTransform(var1,manifold,var3,xfA,var5,xfB);
        return;
    },

    VOIDinitojdFixtureINTojdFixtureINT : function(thisRef,fA,indexA,fB,indexB) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            thisRef.VOIDinitojdFixtureINTojdFixtureINT(thisRef,fA,indexA,fB,indexB);
            var var0 = ojdcEdgeAndPolygonContact.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 36;
                break $S_0;
            }
            __label__ = 15;
            }
        $M_15_36 : for(;;) switch (__label__) {
            case 15 :
            // NORMAL
                $S_15 : {
                // NORMAL
                    var var2 = thisRef.m_fixtureA.ojcsShapeTypegetType(thisRef.m_fixtureA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@27c6bd8e
                    var var3 = ojcsShapeType.EDGE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6eb513c7
                    if ((var2 == var3)) {
                        __label__ = 36;
                        continue $M_15_36;
                    }
                    }
                var var4 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var4);
                throw var4;
            case 36 :
            // NORMAL
                $S_36 : {
                // NORMAL
                    var var5 = ojdcEdgeAndPolygonContact.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                    if ((var5 != 0)) {
                        return;
                    }
                    }
                $S_42 : {
                // NORMAL
                    var var7 = thisRef.m_fixtureB.ojcsShapeTypegetType(thisRef.m_fixtureB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@b1f081d
                    var var8 = ojcsShapeType.POLYGON; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@18417d69
                    if ((var7 == var8)) {
                        return;
                    }
                    }
                var var9 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var9);
                throw var9;
        }
    },

    classInitCheck : function() {
        if (!ojdcEdgeAndPolygonContact.__initialized) {
            ojdcEdgeAndPolygonContact.__initialized = true;
            var thePrototype = ojdcEdgeAndPolygonContact.Create.prototype;
            thePrototype.instanceOf = ojdcEdgeAndPolygonContact.instanceOf;
            thePrototype.ClassgetClass = ojdcEdgeAndPolygonContact.ClassgetClass;
            thePrototype.VOIDinitojdFixtureINTojdFixtureINT = ojdcEdgeAndPolygonContact.VOIDinitojdFixtureINTojdFixtureINT;
            thePrototype.VOIDevaluateojcManifoldojcTransformojcTransform = ojdcEdgeAndPolygonContact.VOIDevaluateojcManifoldojcTransformojcTransform;
            thePrototype.VOIDsetEnabledBOOLEAN = ojdcContact.VOIDsetEnabledBOOLEAN;
            thePrototype.ojcManifoldgetManifold = ojdcContact.ojcManifoldgetManifold;
            thePrototype.BOOLEANisEnabled = ojdcContact.BOOLEANisEnabled;
            thePrototype.VOIDupdateojcContactListener = ojdcContact.VOIDupdateojcContactListener;
            thePrototype.BOOLEANisTouching = ojdcContact.BOOLEANisTouching;
            thePrototype.ojdcContactgetNext = ojdcContact.ojdcContactgetNext;
            thePrototype.INTgetChildIndexB = ojdcContact.INTgetChildIndexB;
            thePrototype.INTgetChildIndexA = ojdcContact.INTgetChildIndexA;
            thePrototype.ojdFixturegetFixtureB = ojdcContact.ojdFixturegetFixtureB;
            thePrototype.ojdFixturegetFixtureA = ojdcContact.ojdFixturegetFixtureA;
            thePrototype.VOIDflagForFiltering = ojdcContact.VOIDflagForFiltering;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojdcContact.classInitCheck();
            jlObject.classInitCheck();
            ojdcEdgeAndPolygonContact.VOIDclinit();
        }
    },

};

var ojdcChainAndCircleContact = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 219,
    __implementedTypes : [1,120,219],
    $assertionsDisabled : false, // declared in org.jbox2d.dynamics.contacts.ChainAndCircleContact

    Create : function() {
        this.m_flags = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_nodeA = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_nodeB = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.oldManifold = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_fixtureA = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_fixtureB = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_manifold = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.pool = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_indexA = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_indexB = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_next = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_prev = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_friction = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_restitution = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_tangentSpeed = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_toiCount = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_toi = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.edge = null; // declared in org.jbox2d.dynamics.contacts.ChainAndCircleContact
    },

    instanceOf : function(aType) {
        return ojdcChainAndCircleContact.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdcChainAndCircleContact;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    FLOATmixFrictionFLOATFLOAT : function(p0,p1) {
         return ojdcContact.FLOATmixFrictionFLOATFLOAT(p0,p1);
    },

    FLOATmixRestitutionFLOATFLOAT : function(p0,p1) {
         return ojdcContact.FLOATmixRestitutionFLOATFLOAT(p0,p1);
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdcChainAndCircleContact.BOOLEANdesiredAssertionStatus(ojdcChainAndCircleContact); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_13_9 : for(;;) switch (__label__) {
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_13_9;
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_13_9;
        }
        ojdcChainAndCircleContact.$assertionsDisabled = var1;
        return;
    },

    VOIDinitojpIWorldPool : function(thisRef,argPool) {
        var __label__ = null;
        ojdcContact.VOIDinitojpIWorldPool(thisRef,argPool);
        var var0 = new ojcsEdgeShape.Create(); // type is REFERENCE value type is REFERENCE
        ojcsEdgeShape.VOIDinit(var0);
        thisRef.edge = var0;
        return;
    },

    VOIDevaluateojcManifoldojcTransformojcTransform : function(thisRef,manifold,xfA,xfB) {
        var __label__ = null;
        var var1 = thisRef.m_fixtureA.ojcsShapegetShape(thisRef.m_fixtureA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@30f87633
        var local_4_REFERENCE = var1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7903f7f8
        local_4_REFERENCE.VOIDgetChildEdgeojcsEdgeShapeINT(local_4_REFERENCE,thisRef.edge,thisRef.m_indexA);
        var var7 = thisRef.pool.ojcCollisiongetCollision(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3cbe0f66
        var var8 = thisRef.edge; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4f84bf2c
        var var10 = thisRef.m_fixtureB.ojcsShapegetShape(thisRef.m_fixtureB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@295e2d13
        var7.VOIDcollideEdgeAndCircleojcManifoldojcsEdgeShapeojcTransformojcsCircleShapeojcTransform(var7,manifold,var8,xfA,var10,xfB);
        return;
    },

    VOIDinitojdFixtureINTojdFixtureINT : function(thisRef,fA,indexA,fB,indexB) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            thisRef.VOIDinitojdFixtureINTojdFixtureINT(thisRef,fA,indexA,fB,indexB);
            var var0 = ojdcChainAndCircleContact.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 36;
                break $S_0;
            }
            __label__ = 15;
            }
        $M_36_15 : for(;;) switch (__label__) {
            case 36 :
            // NORMAL
                $S_36 : {
                // NORMAL
                    var var5 = ojdcChainAndCircleContact.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                    if ((var5 != 0)) {
                        return;
                    }
                    }
                $S_42 : {
                // NORMAL
                    var var7 = thisRef.m_fixtureB.ojcsShapeTypegetType(thisRef.m_fixtureB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1a033b62
                    var var8 = ojcsShapeType.CIRCLE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3b40c9
                    if ((var7 == var8)) {
                        return;
                    }
                    }
                var var9 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var9);
                throw var9;
            case 15 :
            // NORMAL
                $S_15 : {
                // NORMAL
                    var var2 = thisRef.m_fixtureA.ojcsShapeTypegetType(thisRef.m_fixtureA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4a3e7ebd
                    var var3 = ojcsShapeType.CHAIN; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@51453c2d
                    if ((var2 == var3)) {
                        __label__ = 36;
                        continue $M_36_15;
                    }
                    }
                var var4 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var4);
                throw var4;
        }
    },

    classInitCheck : function() {
        if (!ojdcChainAndCircleContact.__initialized) {
            ojdcChainAndCircleContact.__initialized = true;
            var thePrototype = ojdcChainAndCircleContact.Create.prototype;
            thePrototype.instanceOf = ojdcChainAndCircleContact.instanceOf;
            thePrototype.ClassgetClass = ojdcChainAndCircleContact.ClassgetClass;
            thePrototype.VOIDinitojdFixtureINTojdFixtureINT = ojdcChainAndCircleContact.VOIDinitojdFixtureINTojdFixtureINT;
            thePrototype.VOIDevaluateojcManifoldojcTransformojcTransform = ojdcChainAndCircleContact.VOIDevaluateojcManifoldojcTransformojcTransform;
            thePrototype.VOIDsetEnabledBOOLEAN = ojdcContact.VOIDsetEnabledBOOLEAN;
            thePrototype.ojcManifoldgetManifold = ojdcContact.ojcManifoldgetManifold;
            thePrototype.BOOLEANisEnabled = ojdcContact.BOOLEANisEnabled;
            thePrototype.VOIDupdateojcContactListener = ojdcContact.VOIDupdateojcContactListener;
            thePrototype.BOOLEANisTouching = ojdcContact.BOOLEANisTouching;
            thePrototype.ojdcContactgetNext = ojdcContact.ojdcContactgetNext;
            thePrototype.INTgetChildIndexB = ojdcContact.INTgetChildIndexB;
            thePrototype.INTgetChildIndexA = ojdcContact.INTgetChildIndexA;
            thePrototype.ojdFixturegetFixtureB = ojdcContact.ojdFixturegetFixtureB;
            thePrototype.ojdFixturegetFixtureA = ojdcContact.ojdFixturegetFixtureA;
            thePrototype.VOIDflagForFiltering = ojdcContact.VOIDflagForFiltering;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojdcContact.classInitCheck();
            jlObject.classInitCheck();
            ojdcChainAndCircleContact.VOIDclinit();
        }
    },

};

var ojcsEdgeShape = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 220,
    __implementedTypes : [220,1,129],

    Create : function() {
        this.m_type = null; // declared in org.jbox2d.collision.shapes.Shape
        this.m_radius = 0; // declared in org.jbox2d.collision.shapes.Shape
        this.m_vertex1 = null; // declared in org.jbox2d.collision.shapes.EdgeShape
        this.m_vertex2 = null; // declared in org.jbox2d.collision.shapes.EdgeShape
        this.m_vertex0 = null; // declared in org.jbox2d.collision.shapes.EdgeShape
        this.m_vertex3 = null; // declared in org.jbox2d.collision.shapes.EdgeShape
        this.m_hasVertex0 = false; // declared in org.jbox2d.collision.shapes.EdgeShape
        this.m_hasVertex3 = false; // declared in org.jbox2d.collision.shapes.EdgeShape
        this.normal = null; // declared in org.jbox2d.collision.shapes.EdgeShape
    },

    instanceOf : function(aType) {
        return ojcsEdgeShape.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcsEdgeShape;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        ojcsShape.VOIDinitojcsShapeType(thisRef,ojcsShapeType.EDGE);
        var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var1);
        thisRef.m_vertex1 = var1;
        var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var2);
        thisRef.m_vertex2 = var2;
        var var3 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var3);
        thisRef.m_vertex0 = var3;
        var var4 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var4);
        thisRef.m_vertex3 = var4;
        thisRef.m_hasVertex0 = 0;
        thisRef.m_hasVertex3 = 0;
        var var5 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var5);
        thisRef.normal = var5;
        thisRef.m_radius = 0.01;
        return;
    },

    ojcsShapeclone : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcsEdgeShape.Create(); // type is REFERENCE value type is REFERENCE
        ojcsEdgeShape.VOIDinit(var0);
        var local_1_REFERENCE = var0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@73bf7de1
        var var2 = local_1_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@73bf7de1
        var var3 = thisRef.m_radius; // type is FLOAT value type is FLOAT
        var2.m_radius = var3;
        var var4 = local_1_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@73bf7de1
        var var5 = thisRef.m_hasVertex0; // type is BOOLEAN value type is BOOLEAN
        var4.m_hasVertex0 = var5;
        var var6 = local_1_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@73bf7de1
        var var7 = thisRef.m_hasVertex3; // type is BOOLEAN value type is BOOLEAN
        var6.m_hasVertex3 = var7;
        var var11 = local_1_REFERENCE.m_vertex0.ojcVec2setojcVec2(local_1_REFERENCE.m_vertex0,thisRef.m_vertex0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@77d948a9
        var var15 = local_1_REFERENCE.m_vertex1.ojcVec2setojcVec2(local_1_REFERENCE.m_vertex1,thisRef.m_vertex1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@578c07f5
        var var19 = local_1_REFERENCE.m_vertex2.ojcVec2setojcVec2(local_1_REFERENCE.m_vertex2,thisRef.m_vertex2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7435eb27
        var var23 = local_1_REFERENCE.m_vertex3.ojcVec2setojcVec2(local_1_REFERENCE.m_vertex3,thisRef.m_vertex3); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7cedd035
        return local_1_REFERENCE;
    },

    INTgetChildCount : function(thisRef) {
        var __label__ = null;
        return 1;
    },

    VOIDcomputeAABBojcAABBojcTransformINT : function(thisRef,aabb,xf,childIndex) {
        var var91 = null; // type is REFERENCE # of inits = 1
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_7_FLOAT = null; // type is FLOAT # of inits = 1
        var local_10_FLOAT = null; // type is FLOAT # of inits = 1
        var var90 = null; // type is FLOAT # of inits = 2
        var local_8_FLOAT = null; // type is FLOAT # of inits = 1
        var var70 = null; // type is REFERENCE # of inits = 1
        var local_9_FLOAT = null; // type is FLOAT # of inits = 1
        var var84 = null; // type is REFERENCE # of inits = 1
        var var76 = null; // type is FLOAT # of inits = 2
        var var83 = null; // type is FLOAT # of inits = 2
        var var97 = null; // type is FLOAT # of inits = 2
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 1
        var var77 = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_4_REFERENCE = aabb.lowerBound; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5b75ea2d
            local_5_REFERENCE = aabb.upperBound; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@141cd7cd
            var local_6_REFERENCE = xf.q; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@ec4217d
            local_7_FLOAT = (((local_6_REFERENCE.c * thisRef.m_vertex1.x) - (local_6_REFERENCE.s * thisRef.m_vertex1.y)) + xf.p.x); // type is FLOAT value type is FLOAT
            local_8_FLOAT = (((local_6_REFERENCE.s * thisRef.m_vertex1.x) + (local_6_REFERENCE.c * thisRef.m_vertex1.y)) + xf.p.y); // type is FLOAT value type is FLOAT
            local_9_FLOAT = (((local_6_REFERENCE.c * thisRef.m_vertex2.x) - (local_6_REFERENCE.s * thisRef.m_vertex2.y)) + xf.p.x); // type is FLOAT value type is FLOAT
            local_10_FLOAT = (((local_6_REFERENCE.s * thisRef.m_vertex2.x) + (local_6_REFERENCE.c * thisRef.m_vertex2.y)) + xf.p.y); // type is FLOAT value type is FLOAT
            var70 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@efddfcb
            var var71 = local_7_FLOAT; // type is FLOAT value type is FLOAT
            var var72 = local_9_FLOAT; // type is FLOAT value type is FLOAT
            if ((var71 >= var72)) {
                __label__ = 181;
                break $S_0;
            }
            __label__ = 176;
            }
        $M_176_181 : for(;;) switch (__label__) {
            case 176 :
            // NORMAL
                var76 = local_7_FLOAT; // type is FLOAT value type is FLOAT
                break $M_176_181;
            case 181 :
            // NORMAL
                var76 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                break $M_176_181;
        }
        $S_183 : {
        // NORMAL
            var70.x = var76;
            var77 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@efddfcb
            var var78 = local_8_FLOAT; // type is FLOAT value type is FLOAT
            var var79 = local_10_FLOAT; // type is FLOAT value type is FLOAT
            if ((var78 >= var79)) {
                __label__ = 201;
                break $S_183;
            }
            __label__ = 196;
            }
        $M_201_196 : for(;;) switch (__label__) {
            case 201 :
            // NORMAL
                var83 = local_10_FLOAT; // type is FLOAT value type is FLOAT
                break $M_201_196;
            case 196 :
            // NORMAL
                var83 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                break $M_201_196;
        }
        $S_203 : {
        // NORMAL
            var77.y = var83;
            var84 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@69ecb5e1
            var var85 = local_7_FLOAT; // type is FLOAT value type is FLOAT
            var var86 = local_9_FLOAT; // type is FLOAT value type is FLOAT
            if ((var85 <= var86)) {
                __label__ = 221;
                break $S_203;
            }
            __label__ = 216;
            }
        $M_221_216 : for(;;) switch (__label__) {
            case 221 :
            // NORMAL
                var90 = local_9_FLOAT; // type is FLOAT value type is FLOAT
                break $M_221_216;
            case 216 :
            // NORMAL
                var90 = local_7_FLOAT; // type is FLOAT value type is FLOAT
                break $M_221_216;
        }
        $S_223 : {
        // NORMAL
            var84.x = var90;
            var91 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@69ecb5e1
            var var92 = local_8_FLOAT; // type is FLOAT value type is FLOAT
            var var93 = local_10_FLOAT; // type is FLOAT value type is FLOAT
            if ((var92 <= var93)) {
                __label__ = 241;
                break $S_223;
            }
            __label__ = 236;
            }
        $M_236_241 : for(;;) switch (__label__) {
            case 236 :
            // NORMAL
                var97 = local_8_FLOAT; // type is FLOAT value type is FLOAT
                break $M_236_241;
            case 241 :
            // NORMAL
                var97 = local_10_FLOAT; // type is FLOAT value type is FLOAT
                break $M_236_241;
        }
        var91.y = var97;
        var var98 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@efddfcb
        var var101 = (var98.x - thisRef.m_radius); // type is FLOAT value type is FLOAT
        var98.x = var101;
        var var102 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@efddfcb
        var var105 = (var102.y - thisRef.m_radius); // type is FLOAT value type is FLOAT
        var102.y = var105;
        var var106 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@69ecb5e1
        var var109 = (var106.x + thisRef.m_radius); // type is FLOAT value type is FLOAT
        var106.x = var109;
        var var110 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@69ecb5e1
        var var113 = (var110.y + thisRef.m_radius); // type is FLOAT value type is FLOAT
        var110.y = var113;
        return;
    },

    VOIDcomputeMassojcsMassDataFLOAT : function(thisRef,massData,density) {
        var __label__ = null;
        massData.mass = 0.0;
        var var2 = massData.center.ojcVec2setojcVec2(massData.center,thisRef.m_vertex1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@16fb1f7f
        var var4 = var2.ojcVec2addLocalojcVec2(var2,thisRef.m_vertex2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@59a938b7
        var var5 = var4.ojcVec2mulLocalFLOAT(var4,0.5); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@e1cd1f8
        massData.I = 0.0;
        return;
    },

    classInitCheck : function() {
        if (!ojcsEdgeShape.__initialized) {
            ojcsEdgeShape.__initialized = true;
            var thePrototype = ojcsEdgeShape.Create.prototype;
            thePrototype.instanceOf = ojcsEdgeShape.instanceOf;
            thePrototype.ClassgetClass = ojcsEdgeShape.ClassgetClass;
            thePrototype.VOIDcomputeMassojcsMassDataFLOAT = ojcsEdgeShape.VOIDcomputeMassojcsMassDataFLOAT;
            thePrototype.VOIDcomputeAABBojcAABBojcTransformINT = ojcsEdgeShape.VOIDcomputeAABBojcAABBojcTransformINT;
            thePrototype.INTgetChildCount = ojcsEdgeShape.INTgetChildCount;
            thePrototype.ojcsShapeclone = ojcsEdgeShape.ojcsShapeclone;
            thePrototype.ojcsShapeTypegetType = ojcsShape.ojcsShapeTypegetType;
            thePrototype.FLOATgetRadius = ojcsShape.FLOATgetRadius;
            thePrototype.VOIDsetRadiusFLOAT = ojcsShape.VOIDsetRadiusFLOAT;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojcsShape.classInitCheck();
            jlObject.classInitCheck();
        }
    },

};

var ojdcChainAndPolygonContact = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 221,
    __implementedTypes : [1,221,120],
    $assertionsDisabled : false, // declared in org.jbox2d.dynamics.contacts.ChainAndPolygonContact

    Create : function() {
        this.m_flags = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_nodeA = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_nodeB = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.oldManifold = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_fixtureA = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_fixtureB = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_manifold = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.pool = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_indexA = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_indexB = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_next = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_prev = null; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_friction = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_restitution = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_tangentSpeed = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_toiCount = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.m_toi = 0; // declared in org.jbox2d.dynamics.contacts.Contact
        this.edge = null; // declared in org.jbox2d.dynamics.contacts.ChainAndPolygonContact
    },

    instanceOf : function(aType) {
        return ojdcChainAndPolygonContact.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdcChainAndPolygonContact;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    FLOATmixFrictionFLOATFLOAT : function(p0,p1) {
         return ojdcContact.FLOATmixFrictionFLOATFLOAT(p0,p1);
    },

    FLOATmixRestitutionFLOATFLOAT : function(p0,p1) {
         return ojdcContact.FLOATmixRestitutionFLOATFLOAT(p0,p1);
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojdcChainAndPolygonContact.BOOLEANdesiredAssertionStatus(ojdcChainAndPolygonContact); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_9_13 : for(;;) switch (__label__) {
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_9_13;
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_9_13;
        }
        ojdcChainAndPolygonContact.$assertionsDisabled = var1;
        return;
    },

    VOIDinitojpIWorldPool : function(thisRef,argPool) {
        var __label__ = null;
        ojdcContact.VOIDinitojpIWorldPool(thisRef,argPool);
        var var0 = new ojcsEdgeShape.Create(); // type is REFERENCE value type is REFERENCE
        ojcsEdgeShape.VOIDinit(var0);
        thisRef.edge = var0;
        return;
    },

    VOIDevaluateojcManifoldojcTransformojcTransform : function(thisRef,manifold,xfA,xfB) {
        var __label__ = null;
        var var1 = thisRef.m_fixtureA.ojcsShapegetShape(thisRef.m_fixtureA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@48744264
        var local_4_REFERENCE = var1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@29669f91
        local_4_REFERENCE.VOIDgetChildEdgeojcsEdgeShapeINT(local_4_REFERENCE,thisRef.edge,thisRef.m_indexA);
        var var7 = thisRef.pool.ojcCollisiongetCollision(thisRef.pool); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4428fb43
        var var8 = thisRef.edge; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2ec29125
        var var10 = thisRef.m_fixtureB.ojcsShapegetShape(thisRef.m_fixtureB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@444f81fb
        var7.VOIDcollideEdgeAndPolygonojcManifoldojcsEdgeShapeojcTransformojcsPolygonShapeojcTransform(var7,manifold,var8,xfA,var10,xfB);
        return;
    },

    VOIDinitojdFixtureINTojdFixtureINT : function(thisRef,fA,indexA,fB,indexB) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            thisRef.VOIDinitojdFixtureINTojdFixtureINT(thisRef,fA,indexA,fB,indexB);
            var var0 = ojdcChainAndPolygonContact.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 36;
                break $S_0;
            }
            __label__ = 15;
            }
        $M_15_36 : for(;;) switch (__label__) {
            case 36 :
            // NORMAL
                $S_36 : {
                // NORMAL
                    var var5 = ojdcChainAndPolygonContact.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                    if ((var5 != 0)) {
                        return;
                    }
                    }
                $S_42 : {
                // NORMAL
                    var var7 = thisRef.m_fixtureB.ojcsShapeTypegetType(thisRef.m_fixtureB); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@137e6d2f
                    var var8 = ojcsShapeType.POLYGON; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@551f85e3
                    if ((var7 == var8)) {
                        return;
                    }
                    }
                var var9 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var9);
                throw var9;
            case 15 :
            // NORMAL
                $S_15 : {
                // NORMAL
                    var var2 = thisRef.m_fixtureA.ojcsShapeTypegetType(thisRef.m_fixtureA); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7730271c
                    var var3 = ojcsShapeType.CHAIN; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7830f83b
                    if ((var2 == var3)) {
                        __label__ = 36;
                        continue $M_15_36;
                    }
                    }
                var var4 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var4);
                throw var4;
        }
    },

    classInitCheck : function() {
        if (!ojdcChainAndPolygonContact.__initialized) {
            ojdcChainAndPolygonContact.__initialized = true;
            var thePrototype = ojdcChainAndPolygonContact.Create.prototype;
            thePrototype.instanceOf = ojdcChainAndPolygonContact.instanceOf;
            thePrototype.ClassgetClass = ojdcChainAndPolygonContact.ClassgetClass;
            thePrototype.VOIDinitojdFixtureINTojdFixtureINT = ojdcChainAndPolygonContact.VOIDinitojdFixtureINTojdFixtureINT;
            thePrototype.VOIDevaluateojcManifoldojcTransformojcTransform = ojdcChainAndPolygonContact.VOIDevaluateojcManifoldojcTransformojcTransform;
            thePrototype.VOIDsetEnabledBOOLEAN = ojdcContact.VOIDsetEnabledBOOLEAN;
            thePrototype.ojcManifoldgetManifold = ojdcContact.ojcManifoldgetManifold;
            thePrototype.BOOLEANisEnabled = ojdcContact.BOOLEANisEnabled;
            thePrototype.VOIDupdateojcContactListener = ojdcContact.VOIDupdateojcContactListener;
            thePrototype.BOOLEANisTouching = ojdcContact.BOOLEANisTouching;
            thePrototype.ojdcContactgetNext = ojdcContact.ojdcContactgetNext;
            thePrototype.INTgetChildIndexB = ojdcContact.INTgetChildIndexB;
            thePrototype.INTgetChildIndexA = ojdcContact.INTgetChildIndexA;
            thePrototype.ojdFixturegetFixtureB = ojdcContact.ojdFixturegetFixtureB;
            thePrototype.ojdFixturegetFixtureA = ojdcContact.ojdFixturegetFixtureA;
            thePrototype.VOIDflagForFiltering = ojdcContact.VOIDflagForFiltering;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojdcContact.classInitCheck();
            jlObject.classInitCheck();
            ojdcChainAndPolygonContact.VOIDclinit();
        }
    },

};

var juObjects = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 222,
    __implementedTypes : [1,222],

    Create : function() {
    },

    instanceOf : function(aType) {
        return juObjects.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return juObjects;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    INThashCodejlObject : function(o) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if (o == null ) {
                __label__ = 11;
                break $S_0;
            }
            __label__ = 4;
            }
        for(;;) switch (__label__) {
            case 4 :
            // NORMAL
                var var0 = o.INThashCode(o); // type is INT value type is INT
                var var1 = var0; // type is INT value type is INT
                return var1;
            case 11 :
            // NORMAL
                var var1 = 0; // type is INT value type is INT
                return var1;
        }
    },

    BOOLEANequalsjlObjectjlObject : function(a,b) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((a == b)) {
                __label__ = 17;
                break $S_0;
            }
            __label__ = 5;
            }
        $M_17_5 : for(;;) switch (__label__) {
            case 17 :
            // NORMAL
                var var1 = 1; // type is INT value type is INT
                return var1;
            case 5 :
            // NORMAL
                $S_5 : {
                // NORMAL
                    if (a == null ) {
                        __label__ = 21;
                        break $S_5;
                    }
                    __label__ = 9;
                    }
                $M_21_9 : for(;;) switch (__label__) {
                    case 9 :
                    // NORMAL
                        var var0 = a.BOOLEANequalsjlObject(a,b); // type is BOOLEAN value type is BOOLEAN
                        if ((var0 == 0)) {
                            __label__ = 21;
                            continue $M_21_9;
                        }
                        __label__ = 17;
                        continue $M_17_5;
                    case 21 :
                    // NORMAL
                        var var1 = 0; // type is INT value type is INT
                        return var1;
                }
        }
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
        jlAssertionError.VOIDinitjlObject(var0,bytecoder.stringpool[66]);
        throw var0;
    },

    INTcheckIndexINTINT : function(index,length) {
        var __label__ = null;
        var var0 = jiuPreconditions.INTcheckIndexINTINTjufBiFunction(index,length,null); // type is INT value type is INT
        return var0;
    },

    jlObjectrequireNonNulljlObject : function(obj) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if (obj != null ) {
                return obj;
            }
            }
        var var0 = new jlNullPointerException.Create(); // type is REFERENCE value type is REFERENCE
        jlNullPointerException.VOIDinit(var0);
        throw var0;
    },

    classInitCheck : function() {
        if (!juObjects.__initialized) {
            juObjects.__initialized = true;
            var thePrototype = juObjects.Create.prototype;
            thePrototype.instanceOf = juObjects.instanceOf;
            thePrototype.ClassgetClass = juObjects.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var juConcurrentModificationException = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 223,
    __implementedTypes : [1,182,64,183,223,2],

    Create : function() {
    },

    instanceOf : function(aType) {
        return juConcurrentModificationException.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return juConcurrentModificationException;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        jlRuntimeException.VOIDinit(thisRef);
        return;
    },

    VOIDinitjlString : function(thisRef,message) {
        var __label__ = null;
        jlRuntimeException.VOIDinitjlString(thisRef,message);
        return;
    },

    classInitCheck : function() {
        if (!juConcurrentModificationException.__initialized) {
            juConcurrentModificationException.__initialized = true;
            var thePrototype = juConcurrentModificationException.Create.prototype;
            thePrototype.instanceOf = juConcurrentModificationException.instanceOf;
            thePrototype.ClassgetClass = juConcurrentModificationException.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlRuntimeException.classInitCheck();
            jlObject.classInitCheck();
            jlThrowable.classInitCheck();
            jlException.classInitCheck();
            jiSerializable.classInitCheck();
        }
    },

};

var juArrayList$Itr = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 224,
    __implementedTypes : [1,204,224],

    Create : function() {
        this.this$0 = null; // declared in java.util.ArrayList$Itr
        this.lastRet = 0; // declared in java.util.ArrayList$Itr
        this.expectedModCount = 0; // declared in java.util.ArrayList$Itr
        this.cursor = 0; // declared in java.util.ArrayList$Itr
    },

    instanceOf : function(aType) {
        return juArrayList$Itr.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return juArrayList$Itr;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitjuArrayList : function(thisRef,p1) {
        var __label__ = null;
        thisRef.this$0 = p1;
        thisRef.lastRet = -1;
        var var1 = thisRef.this$0.modCount; // type is INT value type is INT
        thisRef.expectedModCount = var1;
        return;
    },

    BOOLEANhasNext : function(thisRef) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.cursor; // type is INT value type is INT
            var var2 = thisRef.this$0.size; // type is INT value type is INT
            if ((var0 == var2)) {
                __label__ = 18;
                break $S_0;
            }
            __label__ = 14;
            }
        for(;;) switch (__label__) {
            case 14 :
            // NORMAL
                var var3 = 1; // type is INT value type is INT
                return var3;
            case 18 :
            // NORMAL
                var var3 = 0; // type is INT value type is INT
                return var3;
        }
    },

    jlObjectnext : function(thisRef) {
        var local_1_INT = null; // type is INT # of inits = 1
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            thisRef.VOIDcheckForComodification(thisRef);
            local_1_INT = thisRef.cursor; // type is INT value type is INT
            var var3 = local_1_INT; // type is INT value type is INT
            var var5 = thisRef.this$0.size; // type is INT value type is INT
            if ((var3 < var5)) {
                __label__ = 28;
                break $S_0;
            }
            __label__ = 20;
            }
        for(;;) switch (__label__) {
            case 20 :
            // NORMAL
                var var18 = new juNoSuchElementException.Create(); // type is REFERENCE value type is REFERENCE
                juNoSuchElementException.VOIDinit(var18);
                throw var18;
            case 28 :
            // NORMAL
                $S_28 : {
                // NORMAL
                    local_2_REFERENCE = thisRef.this$0.elementData; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@72f4a1f7
                    var var9 = local_1_INT; // type is INT value type is INT
                    var var11 = local_2_REFERENCE.data.length; // type is INT value type is INT
                    if ((var9 < var11)) {
                        __label__ = 50;
                        break $S_28;
                    }
                    __label__ = 42;
                    }
                for(;;) switch (__label__) {
                    case 42 :
                    // NORMAL
                        var var17 = new juConcurrentModificationException.Create(); // type is REFERENCE value type is REFERENCE
                        juConcurrentModificationException.VOIDinit(var17);
                        throw var17;
                    case 50 :
                    // NORMAL
                        var var13 = (local_1_INT + 1); // type is INT value type is INT
                        thisRef.cursor = var13;
                        var var14 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@f98b93
                        var var15 = local_1_INT; // type is INT value type is INT
                        thisRef.lastRet = var15;
                        var var16 = var14.data[var15]; // type is REFERENCE value type is REFERENCE
                        return var16;
                }
        }
    },

    VOIDcheckForComodification : function(thisRef) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var1 = thisRef.this$0.modCount; // type is INT value type is INT
            var var2 = thisRef.expectedModCount; // type is INT value type is INT
            if ((var1 == var2)) {
                return;
            }
            }
        var var3 = new juConcurrentModificationException.Create(); // type is REFERENCE value type is REFERENCE
        juConcurrentModificationException.VOIDinit(var3);
        throw var3;
    },

    classInitCheck : function() {
        if (!juArrayList$Itr.__initialized) {
            juArrayList$Itr.__initialized = true;
            var thePrototype = juArrayList$Itr.Create.prototype;
            thePrototype.instanceOf = juArrayList$Itr.instanceOf;
            thePrototype.ClassgetClass = juArrayList$Itr.ClassgetClass;
            thePrototype.VOIDcheckForComodification = juArrayList$Itr.VOIDcheckForComodification;
            thePrototype.jlObjectnext = juArrayList$Itr.jlObjectnext;
            thePrototype.BOOLEANhasNext = juArrayList$Itr.BOOLEANhasNext;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            juIterator.classInitCheck();
        }
    },

};

var juAbstractList$Itr = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 225,
    __implementedTypes : [1,204,225],

    Create : function() {
        this.this$0 = null; // declared in java.util.AbstractList$Itr
        this.cursor = 0; // declared in java.util.AbstractList$Itr
        this.lastRet = 0; // declared in java.util.AbstractList$Itr
        this.expectedModCount = 0; // declared in java.util.AbstractList$Itr
    },

    instanceOf : function(aType) {
        return juAbstractList$Itr.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return juAbstractList$Itr;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitjuAbstractList : function(thisRef,p1) {
        var __label__ = null;
        thisRef.this$0 = p1;
        thisRef.cursor = 0;
        thisRef.lastRet = -1;
        var var1 = thisRef.this$0.modCount; // type is INT value type is INT
        thisRef.expectedModCount = var1;
        return;
    },

    BOOLEANhasNext : function(thisRef) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.cursor; // type is INT value type is INT
            var var2 = thisRef.this$0.INTsize(thisRef.this$0); // type is INT value type is INT
            if ((var0 == var2)) {
                __label__ = 18;
                break $S_0;
            }
            __label__ = 14;
            }
        for(;;) switch (__label__) {
            case 14 :
            // NORMAL
                var var3 = 1; // type is INT value type is INT
                return var3;
            case 18 :
            // NORMAL
                var var3 = 0; // type is INT value type is INT
                return var3;
        }
    },

    jlObjectnext : function(thisRef) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            thisRef.VOIDcheckForComodification(thisRef);
            }
        try {
            var local_1_INT = thisRef.cursor; // type is INT value type is INT
            var var5 = thisRef.this$0.jlObjectgetINT(thisRef.this$0,local_1_INT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@41098ec
            var local_2_REFERENCE = var5; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4728b0c5
            var var7 = local_1_INT; // type is INT value type is INT
            thisRef.lastRet = var7;
            var var9 = (local_1_INT + 1); // type is INT value type is INT
            thisRef.cursor = var9;
            return local_2_REFERENCE;
        } catch (e) {
            dmbcExceptionManager.VOIDpushjlThrowable(e);
            if (e.instanceOf(jlIndexOutOfBoundsException)) {
                __label__ = 32;
            } else {
                throw dmbcExceptionManager.jlThrowablepop();
            }
        }
        var local_0_REFERENCE = thisRef; // type is REFERENCE value type is REFERENCE
        var var12 = dmbcExceptionManager.jlThrowablepop(); // type is REFERENCE value type is REFERENCE
        var local_1_REFERENCE = var12; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@137333bc
        local_0_REFERENCE.VOIDcheckForComodification(local_0_REFERENCE);
        var var15 = new juNoSuchElementException.Create(); // type is REFERENCE value type is REFERENCE
        juNoSuchElementException.VOIDinit(var15);
        throw var15;
    },

    VOIDcheckForComodification : function(thisRef) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var1 = thisRef.this$0.modCount; // type is INT value type is INT
            var var2 = thisRef.expectedModCount; // type is INT value type is INT
            if ((var1 == var2)) {
                return;
            }
            }
        var var3 = new juConcurrentModificationException.Create(); // type is REFERENCE value type is REFERENCE
        juConcurrentModificationException.VOIDinit(var3);
        throw var3;
    },

    classInitCheck : function() {
        if (!juAbstractList$Itr.__initialized) {
            juAbstractList$Itr.__initialized = true;
            var thePrototype = juAbstractList$Itr.Create.prototype;
            thePrototype.instanceOf = juAbstractList$Itr.instanceOf;
            thePrototype.ClassgetClass = juAbstractList$Itr.ClassgetClass;
            thePrototype.VOIDcheckForComodification = juAbstractList$Itr.VOIDcheckForComodification;
            thePrototype.jlObjectnext = juAbstractList$Itr.jlObjectnext;
            thePrototype.BOOLEANhasNext = juAbstractList$Itr.BOOLEANhasNext;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            juIterator.classInitCheck();
        }
    },

};

var juListIterator = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 226,
    __implementedTypes : [1,226,204],


    classInitCheck : function() {
        if (!juListIterator.__initialized) {
            juListIterator.__initialized = true;
            jlObject.classInitCheck();
            juIterator.classInitCheck();
        }
    },

};

var jlIndexOutOfBoundsException = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 227,
    __implementedTypes : [1,182,64,183,227,2],

    Create : function() {
    },

    instanceOf : function(aType) {
        return jlIndexOutOfBoundsException.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jlIndexOutOfBoundsException;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitjlString : function(thisRef,s) {
        var __label__ = null;
        jlRuntimeException.VOIDinitjlString(thisRef,s);
        return;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        jlRuntimeException.VOIDinit(thisRef);
        return;
    },

    classInitCheck : function() {
        if (!jlIndexOutOfBoundsException.__initialized) {
            jlIndexOutOfBoundsException.__initialized = true;
            var thePrototype = jlIndexOutOfBoundsException.Create.prototype;
            thePrototype.instanceOf = jlIndexOutOfBoundsException.instanceOf;
            thePrototype.ClassgetClass = jlIndexOutOfBoundsException.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlRuntimeException.classInitCheck();
            jlObject.classInitCheck();
            jlThrowable.classInitCheck();
            jlException.classInitCheck();
            jiSerializable.classInitCheck();
        }
    },

};

var juAbstractList$ListItr = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 228,
    __implementedTypes : [1,226,204,228,225],

    Create : function() {
        this.this$0 = null; // declared in java.util.AbstractList$Itr
        this.cursor = 0; // declared in java.util.AbstractList$Itr
        this.lastRet = 0; // declared in java.util.AbstractList$Itr
        this.expectedModCount = 0; // declared in java.util.AbstractList$Itr
        this.this$0 = null; // declared in java.util.AbstractList$ListItr
    },

    instanceOf : function(aType) {
        return juAbstractList$ListItr.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return juAbstractList$ListItr;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitjuAbstractListINT : function(thisRef,p1,index) {
        var __label__ = null;
        thisRef.this$0 = p1;
        juAbstractList$Itr.VOIDinitjuAbstractList(thisRef,p1);
        thisRef.cursor = index;
        return;
    },

    INTpreviousIndex : function(thisRef) {
        var __label__ = null;
        return (thisRef.cursor - 1);
    },

    classInitCheck : function() {
        if (!juAbstractList$ListItr.__initialized) {
            juAbstractList$ListItr.__initialized = true;
            var thePrototype = juAbstractList$ListItr.Create.prototype;
            thePrototype.instanceOf = juAbstractList$ListItr.instanceOf;
            thePrototype.ClassgetClass = juAbstractList$ListItr.ClassgetClass;
            thePrototype.INTpreviousIndex = juAbstractList$ListItr.INTpreviousIndex;
            thePrototype.VOIDcheckForComodification = juAbstractList$Itr.VOIDcheckForComodification;
            thePrototype.jlObjectnext = juAbstractList$Itr.jlObjectnext;
            thePrototype.BOOLEANhasNext = juAbstractList$Itr.BOOLEANhasNext;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            juAbstractList$Itr.classInitCheck();
            jlObject.classInitCheck();
            juListIterator.classInitCheck();
            juIterator.classInitCheck();
        }
    },

};

var jlIllegalStateException = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 229,
    __implementedTypes : [1,182,64,183,229,2],

    Create : function() {
    },

    instanceOf : function(aType) {
        return jlIllegalStateException.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jlIllegalStateException;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        jlRuntimeException.VOIDinit(thisRef);
        return;
    },

    VOIDinitjlString : function(thisRef,s) {
        var __label__ = null;
        jlRuntimeException.VOIDinitjlString(thisRef,s);
        return;
    },

    classInitCheck : function() {
        if (!jlIllegalStateException.__initialized) {
            jlIllegalStateException.__initialized = true;
            var thePrototype = jlIllegalStateException.Create.prototype;
            thePrototype.instanceOf = jlIllegalStateException.instanceOf;
            thePrototype.ClassgetClass = jlIllegalStateException.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlRuntimeException.classInitCheck();
            jlObject.classInitCheck();
            jlThrowable.classInitCheck();
            jlException.classInitCheck();
            jiSerializable.classInitCheck();
        }
    },

};

var jlOutOfMemoryError = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 230,
    __implementedTypes : [231,1,64,63,230,2],

    Create : function() {
    },

    instanceOf : function(aType) {
        return jlOutOfMemoryError.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jlOutOfMemoryError;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitjlString : function(thisRef,s) {
        var __label__ = null;
        jlVirtualMachineError.VOIDinitjlString(thisRef,s);
        return;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        jlVirtualMachineError.VOIDinit(thisRef);
        return;
    },

    classInitCheck : function() {
        if (!jlOutOfMemoryError.__initialized) {
            jlOutOfMemoryError.__initialized = true;
            var thePrototype = jlOutOfMemoryError.Create.prototype;
            thePrototype.instanceOf = jlOutOfMemoryError.instanceOf;
            thePrototype.ClassgetClass = jlOutOfMemoryError.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlVirtualMachineError.classInitCheck();
            jlObject.classInitCheck();
            jlThrowable.classInitCheck();
            jlError.classInitCheck();
            jiSerializable.classInitCheck();
        }
    },

};

var jlVirtualMachineError = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 231,
    __implementedTypes : [231,1,64,63,2],

    instanceOf : function(aType) {
        return jlVirtualMachineError.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jlVirtualMachineError;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitjlString : function(thisRef,message) {
        var __label__ = null;
        jlError.VOIDinitjlString(thisRef,message);
        return;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        jlError.VOIDinit(thisRef);
        return;
    },

    classInitCheck : function() {
        if (!jlVirtualMachineError.__initialized) {
            jlVirtualMachineError.__initialized = true;
            jlError.classInitCheck();
            jlObject.classInitCheck();
            jlThrowable.classInitCheck();
            jiSerializable.classInitCheck();
        }
    },

};

var dmbawEvent = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 232,
    __implementedTypes : [1,232,8],


    classInitCheck : function() {
        if (!dmbawEvent.__initialized) {
            dmbawEvent.__initialized = true;
            jlObject.classInitCheck();
            dmbaOpaqueReferenceType.classInitCheck();
        }
    },

};

var ojcManifold$ManifoldType = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 233,
    __implementedTypes : [1,14,233,59,2],
    CIRCLES : null, // declared in org.jbox2d.collision.Manifold$ManifoldType
    FACE_A : null, // declared in org.jbox2d.collision.Manifold$ManifoldType
    FACE_B : null, // declared in org.jbox2d.collision.Manifold$ManifoldType
    $VALUES : null, // declared in org.jbox2d.collision.Manifold$ManifoldType

    Create : function() {
        this.name = null; // declared in java.lang.Enum
        this.ordinalNumber = 0; // declared in java.lang.Enum
    },

    instanceOf : function(aType) {
        return ojcManifold$ManifoldType.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcManifold$ManifoldType;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var __label__ = null;
        var var0 = new ojcManifold$ManifoldType.Create(); // type is REFERENCE value type is REFERENCE
        ojcManifold$ManifoldType.VOIDinitjlStringINT(var0,bytecoder.stringpool[67],0);
        ojcManifold$ManifoldType.CIRCLES = var0;
        var var1 = new ojcManifold$ManifoldType.Create(); // type is REFERENCE value type is REFERENCE
        ojcManifold$ManifoldType.VOIDinitjlStringINT(var1,bytecoder.stringpool[68],1);
        ojcManifold$ManifoldType.FACE_A = var1;
        var var2 = new ojcManifold$ManifoldType.Create(); // type is REFERENCE value type is REFERENCE
        ojcManifold$ManifoldType.VOIDinitjlStringINT(var2,bytecoder.stringpool[69],2);
        ojcManifold$ManifoldType.FACE_B = var2;
        var var3 = bytecoder.newArray(3,null); // type is REFERENCE value type is REFERENCE
        var var4 = ojcManifold$ManifoldType.CIRCLES; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6084feae
        var3.data[0] = var4;
        var var5 = ojcManifold$ManifoldType.FACE_A; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4b190713
        var3.data[1] = var5;
        var var6 = ojcManifold$ManifoldType.FACE_B; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7317f01e
        var3.data[2] = var6;
        ojcManifold$ManifoldType.$VALUES = var3;
        return;
    },

    VOIDinitjlStringINT : function(thisRef,p1,p2) {
        var __label__ = null;
        jlEnum.VOIDinitjlStringINT(thisRef,p1,p2);
        return;
    },

    A1ojcManifold$ManifoldTypevalues : function() {
        var __label__ = null;
        var var1 = ojcManifold$ManifoldType.$VALUES.jlObjectclone(ojcManifold$ManifoldType.$VALUES); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1a5e0f05
        return var1;
    },

    classInitCheck : function() {
        if (!ojcManifold$ManifoldType.__initialized) {
            ojcManifold$ManifoldType.__initialized = true;
            var thePrototype = ojcManifold$ManifoldType.Create.prototype;
            thePrototype.instanceOf = ojcManifold$ManifoldType.instanceOf;
            thePrototype.ClassgetClass = ojcManifold$ManifoldType.ClassgetClass;
            thePrototype.INTordinal = jlEnum.INTordinal;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlEnum.classInitCheck();
            jlObject.classInitCheck();
            jlComparable.classInitCheck();
            jiSerializable.classInitCheck();
            jlrArray.classInitCheck();
            ojcManifold$ManifoldType.VOIDclinit();
        }
    },

};

var ojcsChainShape = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 234,
    __implementedTypes : [1,129,234],
    $assertionsDisabled : false, // declared in org.jbox2d.collision.shapes.ChainShape

    Create : function() {
        this.m_type = null; // declared in org.jbox2d.collision.shapes.Shape
        this.m_radius = 0; // declared in org.jbox2d.collision.shapes.Shape
        this.m_count = 0; // declared in org.jbox2d.collision.shapes.ChainShape
        this.m_vertices = null; // declared in org.jbox2d.collision.shapes.ChainShape
        this.m_prevVertex = null; // declared in org.jbox2d.collision.shapes.ChainShape
        this.m_hasPrevVertex = false; // declared in org.jbox2d.collision.shapes.ChainShape
        this.m_nextVertex = null; // declared in org.jbox2d.collision.shapes.ChainShape
        this.m_hasNextVertex = false; // declared in org.jbox2d.collision.shapes.ChainShape
        this.pool0 = null; // declared in org.jbox2d.collision.shapes.ChainShape
    },

    instanceOf : function(aType) {
        return ojcsChainShape.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcsChainShape;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var var1 = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcsChainShape.BOOLEANdesiredAssertionStatus(ojcsChainShape); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_9_13 : for(;;) switch (__label__) {
            case 9 :
            // NORMAL
                var1 = 1; // type is INT value type is INT
                break $M_9_13;
            case 13 :
            // NORMAL
                var1 = 0; // type is INT value type is INT
                break $M_9_13;
        }
        ojcsChainShape.$assertionsDisabled = var1;
        return;
    },

    VOIDgetChildEdgeojcsEdgeShapeINT : function(thisRef,edge,index) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcsChainShape.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 29;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_29_6 : for(;;) switch (__label__) {
            case 29 :
            // NORMAL
                $S_29 : {
                // NORMAL
                    var var4 = thisRef.m_radius; // type is FLOAT value type is FLOAT
                    edge.m_radius = var4;
                    var var7 = thisRef.m_vertices.data[(index + 0)]; // type is REFERENCE value type is REFERENCE
                    var local_3_REFERENCE = var7; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1f117b55
                    var var11 = thisRef.m_vertices.data[(index + 1)]; // type is REFERENCE value type is REFERENCE
                    var local_4_REFERENCE = var11; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@38f8bc2f
                    var var13 = edge.m_vertex1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2099c21
                    var var15 = local_3_REFERENCE.x; // type is FLOAT value type is FLOAT
                    var13.x = var15;
                    var var16 = edge.m_vertex1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@702a5448
                    var var18 = local_3_REFERENCE.y; // type is FLOAT value type is FLOAT
                    var16.y = var18;
                    var var19 = edge.m_vertex2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@64f542cb
                    var var21 = local_4_REFERENCE.x; // type is FLOAT value type is FLOAT
                    var19.x = var21;
                    var var22 = edge.m_vertex2; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@199193be
                    var var24 = local_4_REFERENCE.y; // type is FLOAT value type is FLOAT
                    var22.y = var24;
                    if ((index <= 0)) {
                        __label__ = 148;
                        break $S_29;
                    }
                    __label__ = 106;
                    }
                $M_106_148 : for(;;) switch (__label__) {
                    case 106 :
                    // NORMAL
                        var var27 = thisRef.m_vertices.data[(index - 1)]; // type is REFERENCE value type is REFERENCE
                        var local_5_REFERENCE = var27; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@57b7ec39
                        var var29 = edge.m_vertex0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@751d6a93
                        var var31 = local_5_REFERENCE.x; // type is FLOAT value type is FLOAT
                        var29.x = var31;
                        var var32 = edge.m_vertex0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3b308de1
                        var var34 = local_5_REFERENCE.y; // type is FLOAT value type is FLOAT
                        var32.y = var34;
                        edge.m_hasVertex0 = 1;
                        break $M_106_148;
                    case 148 :
                    // NORMAL
                        var var35 = edge.m_vertex0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2ea9e55a
                        var var37 = thisRef.m_prevVertex.x; // type is FLOAT value type is FLOAT
                        var35.x = var37;
                        var var38 = edge.m_vertex0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@46170292
                        var var40 = thisRef.m_prevVertex.y; // type is FLOAT value type is FLOAT
                        var38.y = var40;
                        var var41 = thisRef.m_hasPrevVertex; // type is BOOLEAN value type is BOOLEAN
                        edge.m_hasVertex0 = var41;
                        break $M_106_148;
                }
                $S_184 : {
                // NORMAL
                    var var43 = (thisRef.m_count - 2); // type is INT value type is INT
                    if ((index >= var43)) {
                        __label__ = 236;
                        break $S_184;
                    }
                    __label__ = 194;
                    }
                for(;;) switch (__label__) {
                    case 194 :
                    // NORMAL
                        var var46 = thisRef.m_vertices.data[(index + 2)]; // type is REFERENCE value type is REFERENCE
                        var local_5_REFERENCE = var46; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@5840a131
                        var var47 = edge.m_vertex3; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@67a0605d
                        var var49 = local_5_REFERENCE.x; // type is FLOAT value type is FLOAT
                        var47.x = var49;
                        var var50 = edge.m_vertex3; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6c2dac6
                        var var52 = local_5_REFERENCE.y; // type is FLOAT value type is FLOAT
                        var50.y = var52;
                        edge.m_hasVertex3 = 1;
                        return;
                    case 236 :
                    // NORMAL
                        var var53 = edge.m_vertex3; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@78bf5b1e
                        var var55 = thisRef.m_nextVertex.x; // type is FLOAT value type is FLOAT
                        var53.x = var55;
                        var var56 = edge.m_vertex3; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@252b2411
                        var var58 = thisRef.m_nextVertex.y; // type is FLOAT value type is FLOAT
                        var56.y = var58;
                        var var59 = thisRef.m_hasNextVertex; // type is BOOLEAN value type is BOOLEAN
                        edge.m_hasVertex3 = var59;
                        return;
                }
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    if ((0 > index)) {
                        __label__ = 21;
                        break $S_6;
                    }
                    __label__ = 11;
                    }
                $M_11_21 : for(;;) switch (__label__) {
                    case 21 :
                    // NORMAL
                        var var3 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                        jlAssertionError.VOIDinit(var3);
                        throw var3;
                    case 11 :
                    // NORMAL
                        var var2 = (thisRef.m_count - 1); // type is INT value type is INT
                        if ((index < var2)) {
                            __label__ = 29;
                            continue $M_29_6;
                        }
                        __label__ = 21;
                        continue $M_11_21;
                }
        }
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        ojcsShape.VOIDinitojcsShapeType(thisRef,ojcsShapeType.CHAIN);
        var var1 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var1);
        thisRef.m_prevVertex = var1;
        var var2 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var2);
        thisRef.m_nextVertex = var2;
        thisRef.m_hasPrevVertex = 0;
        thisRef.m_hasNextVertex = 0;
        var var3 = new ojcsEdgeShape.Create(); // type is REFERENCE value type is REFERENCE
        ojcsEdgeShape.VOIDinit(var3);
        thisRef.pool0 = var3;
        thisRef.m_vertices = null;
        thisRef.m_radius = 0.01;
        thisRef.m_count = 0;
        return;
    },

    ojcsShapeclone : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcsChainShape.Create(); // type is REFERENCE value type is REFERENCE
        ojcsChainShape.VOIDinit(var0);
        var local_1_REFERENCE = var0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1f6cf67f
        local_1_REFERENCE.VOIDcreateChainA1ojcVec2INT(local_1_REFERENCE,thisRef.m_vertices,thisRef.m_count);
        var var8 = local_1_REFERENCE.m_prevVertex.ojcVec2setojcVec2(local_1_REFERENCE.m_prevVertex,thisRef.m_prevVertex); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5f481a0
        var var12 = local_1_REFERENCE.m_nextVertex.ojcVec2setojcVec2(local_1_REFERENCE.m_nextVertex,thisRef.m_nextVertex); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7f9cb71f
        var var13 = local_1_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1f6cf67f
        var var14 = thisRef.m_hasPrevVertex; // type is BOOLEAN value type is BOOLEAN
        var13.m_hasPrevVertex = var14;
        var var15 = local_1_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1f6cf67f
        var var16 = thisRef.m_hasNextVertex; // type is BOOLEAN value type is BOOLEAN
        var15.m_hasNextVertex = var16;
        return local_1_REFERENCE;
    },

    VOIDcreateChainA1ojcVec2INT : function(thisRef,vertices,count) {
        var local_3_INT = null; // type is INT # of inits = 6
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcsChainShape.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 28;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_6_28 : for(;;) switch (__label__) {
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    var var1 = thisRef.m_vertices; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1670a682
                    if (var1 != null ) {
                        __label__ = 20;
                        break $S_6;
                    }
                    __label__ = 13;
                    }
                $M_20_13 : for(;;) switch (__label__) {
                    case 13 :
                    // NORMAL
                        var var2 = thisRef.m_count; // type is INT value type is INT
                        if ((var2 == 0)) {
                            __label__ = 28;
                            continue $M_6_28;
                        }
                        __label__ = 20;
                        continue $M_20_13;
                    case 20 :
                    // NORMAL
                        var var22 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                        jlAssertionError.VOIDinit(var22);
                        throw var22;
                }
            case 28 :
            // NORMAL
                $S_28 : {
                // NORMAL
                    var var3 = ojcsChainShape.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
                    if ((var3 != 0)) {
                        __label__ = 47;
                        break $S_28;
                    }
                    __label__ = 34;
                    }
                $M_47_34 : for(;;) switch (__label__) {
                    case 47 :
                    // NORMAL
                        $S_47 : {
                        // NORMAL
                            thisRef.m_count = count;
                            var var5 = bytecoder.newArray(thisRef.m_count,null); // type is REFERENCE value type is REFERENCE
                            thisRef.m_vertices = var5;
                            local_3_INT = 1; // type is INT value type is INT
                            __label__ = 65;
                            }
                        $L_65 : for (;;) {
                            $S_65 : {
                            // NORMAL
                                var var8 = local_3_INT; // type is INT value type is INT
                                var var9 = thisRef.m_count; // type is INT value type is INT
                                if ((var8 >= var9)) {
                                    __label__ = 114;
                                    break $S_65;
                                }
                                __label__ = 73;
                                }
                            for(;;) switch (__label__) {
                                case 73 :
                                // NORMAL
                                    $S_73 : {
                                    // NORMAL
                                        var var12 = vertices.data[(local_3_INT - 1)]; // type is REFERENCE value type is REFERENCE
                                        var local_4_REFERENCE = var12; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@693183d6
                                        var var15 = vertices.data[local_3_INT]; // type is REFERENCE value type is REFERENCE
                                        var local_5_REFERENCE = var15; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@289adaad
                                        var var19 = ojcMathUtils.FLOATdistanceSquaredojcVec2ojcVec2(local_4_REFERENCE,local_5_REFERENCE); // type is FLOAT value type is FLOAT
                                        if ((var19 >= 2.5E-5)) {
                                            __label__ = 108;
                                            break $S_73;
                                        }
                                        __label__ = 98;
                                        }
                                    for(;;) switch (__label__) {
                                        case 108 :
                                        // NORMAL
                                            local_3_INT = (local_3_INT + 1); // type is INT value type is INT
                                            __label__ = 65;
                                            continue $L_65;
                                        case 98 :
                                        // NORMAL
                                            var var31 = new jlRuntimeException.Create(); // type is REFERENCE value type is REFERENCE
                                            jlRuntimeException.VOIDinitjlString(var31,bytecoder.stringpool[70]);
                                            throw var31;
                                    }
                                case 114 :
                                // NORMAL
                                    $S_114 : {
                                    // NORMAL
                                        local_3_INT = 0; // type is INT value type is INT
                                        __label__ = 116;
                                        }
                                    $L_116 : for (;;) {
                                        $S_116 : {
                                        // NORMAL
                                            var var24 = local_3_INT; // type is INT value type is INT
                                            var var25 = thisRef.m_count; // type is INT value type is INT
                                            if ((var24 >= var25)) {
                                                __label__ = 146;
                                                break $S_116;
                                            }
                                            __label__ = 124;
                                            }
                                        for(;;) switch (__label__) {
                                            case 146 :
                                            // NORMAL
                                                thisRef.m_hasPrevVertex = 0;
                                                thisRef.m_hasNextVertex = 0;
                                                return;
                                            case 124 :
                                            // NORMAL
                                                var var26 = thisRef.m_vertices; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@6230cbdb
                                                var var27 = local_3_INT; // type is INT value type is INT
                                                var var28 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
                                                var var30 = vertices.data[local_3_INT]; // type is REFERENCE value type is REFERENCE
                                                ojcVec2.VOIDinitojcVec2(var28,var30);
                                                var26.data[var27] = var28;
                                                local_3_INT = (local_3_INT + 1); // type is INT value type is INT
                                                __label__ = 116;
                                                continue $L_116;
                                        }
                                    }
                            }
                        }
                    case 34 :
                    // NORMAL
                        $S_34 : {
                        // NORMAL
                            if ((count >= 2)) {
                                __label__ = 47;
                                continue $M_47_34;
                            }
                            }
                        var var21 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                        jlAssertionError.VOIDinit(var21);
                        throw var21;
                }
        }
    },

    INTgetChildCount : function(thisRef) {
        var __label__ = null;
        return (thisRef.m_count - 1);
    },

    VOIDcomputeAABBojcAABBojcTransformINT : function(thisRef,aabb,xf,childIndex) {
        var local_7_INT = null; // type is INT # of inits = 2
        var var110 = null; // type is FLOAT # of inits = 2
        var local_13_FLOAT = null; // type is FLOAT # of inits = 1
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_15_FLOAT = null; // type is FLOAT # of inits = 1
        var var104 = null; // type is REFERENCE # of inits = 1
        var var111 = null; // type is REFERENCE # of inits = 1
        var var90 = null; // type is REFERENCE # of inits = 1
        var var96 = null; // type is FLOAT # of inits = 2
        var var103 = null; // type is FLOAT # of inits = 2
        var var97 = null; // type is REFERENCE # of inits = 1
        var var117 = null; // type is FLOAT # of inits = 2
        var local_5_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_14_FLOAT = null; // type is FLOAT # of inits = 1
        var local_6_INT = null; // type is INT # of inits = 1
        var local_12_FLOAT = null; // type is FLOAT # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcsChainShape.$assertionsDisabled; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                __label__ = 22;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_6_22 : for(;;) switch (__label__) {
            case 22 :
            // NORMAL
                $S_22 : {
                // NORMAL
                    local_4_REFERENCE = aabb.lowerBound; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5e2a4f00
                    local_5_REFERENCE = aabb.upperBound; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@442f8f8f
                    local_6_INT = childIndex; // type is INT value type is INT
                    local_7_INT = (childIndex + 1); // type is INT value type is INT
                    var var11 = local_7_INT; // type is INT value type is INT
                    var var12 = thisRef.m_count; // type is INT value type is INT
                    if ((var11 != var12)) {
                        __label__ = 54;
                        break $S_22;
                    }
                    __label__ = 51;
                    }
                $M_51_54 : for(;;) switch (__label__) {
                    case 54 :
                    // NORMAL
                        $S_54 : {
                        // NORMAL
                            var var16 = thisRef.m_vertices.data[local_6_INT]; // type is REFERENCE value type is REFERENCE
                            var local_8_REFERENCE = var16; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@2e514061
                            var var20 = thisRef.m_vertices.data[local_7_INT]; // type is REFERENCE value type is REFERENCE
                            var local_9_REFERENCE = var20; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@55867441
                            var local_10_REFERENCE = xf.q; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@595873be
                            var local_11_REFERENCE = xf.p; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6133dced
                            local_12_FLOAT = (((local_10_REFERENCE.c * local_8_REFERENCE.x) - (local_10_REFERENCE.s * local_8_REFERENCE.y)) + local_11_REFERENCE.x); // type is FLOAT value type is FLOAT
                            local_13_FLOAT = (((local_10_REFERENCE.s * local_8_REFERENCE.x) + (local_10_REFERENCE.c * local_8_REFERENCE.y)) + local_11_REFERENCE.y); // type is FLOAT value type is FLOAT
                            local_14_FLOAT = (((local_10_REFERENCE.c * local_9_REFERENCE.x) - (local_10_REFERENCE.s * local_9_REFERENCE.y)) + local_11_REFERENCE.x); // type is FLOAT value type is FLOAT
                            local_15_FLOAT = (((local_10_REFERENCE.s * local_9_REFERENCE.x) + (local_10_REFERENCE.c * local_9_REFERENCE.y)) + local_11_REFERENCE.y); // type is FLOAT value type is FLOAT
                            var90 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6007afc3
                            var var91 = local_12_FLOAT; // type is FLOAT value type is FLOAT
                            var var92 = local_14_FLOAT; // type is FLOAT value type is FLOAT
                            if ((var91 >= var92)) {
                                __label__ = 223;
                                break $S_54;
                            }
                            __label__ = 218;
                            }
                        $M_223_218 : for(;;) switch (__label__) {
                            case 218 :
                            // NORMAL
                                var96 = local_12_FLOAT; // type is FLOAT value type is FLOAT
                                break $M_223_218;
                            case 223 :
                            // NORMAL
                                var96 = local_14_FLOAT; // type is FLOAT value type is FLOAT
                                break $M_223_218;
                        }
                        $S_225 : {
                        // NORMAL
                            var90.x = var96;
                            var97 = local_4_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6007afc3
                            var var98 = local_13_FLOAT; // type is FLOAT value type is FLOAT
                            var var99 = local_15_FLOAT; // type is FLOAT value type is FLOAT
                            if ((var98 >= var99)) {
                                __label__ = 243;
                                break $S_225;
                            }
                            __label__ = 238;
                            }
                        $M_243_238 : for(;;) switch (__label__) {
                            case 243 :
                            // NORMAL
                                var103 = local_15_FLOAT; // type is FLOAT value type is FLOAT
                                break $M_243_238;
                            case 238 :
                            // NORMAL
                                var103 = local_13_FLOAT; // type is FLOAT value type is FLOAT
                                break $M_243_238;
                        }
                        $S_245 : {
                        // NORMAL
                            var97.y = var103;
                            var104 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@83e050b
                            var var105 = local_12_FLOAT; // type is FLOAT value type is FLOAT
                            var var106 = local_14_FLOAT; // type is FLOAT value type is FLOAT
                            if ((var105 <= var106)) {
                                __label__ = 263;
                                break $S_245;
                            }
                            __label__ = 258;
                            }
                        $M_263_258 : for(;;) switch (__label__) {
                            case 263 :
                            // NORMAL
                                var110 = local_14_FLOAT; // type is FLOAT value type is FLOAT
                                break $M_263_258;
                            case 258 :
                            // NORMAL
                                var110 = local_12_FLOAT; // type is FLOAT value type is FLOAT
                                break $M_263_258;
                        }
                        $S_265 : {
                        // NORMAL
                            var104.x = var110;
                            var111 = local_5_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@83e050b
                            var var112 = local_13_FLOAT; // type is FLOAT value type is FLOAT
                            var var113 = local_15_FLOAT; // type is FLOAT value type is FLOAT
                            if ((var112 <= var113)) {
                                __label__ = 283;
                                break $S_265;
                            }
                            __label__ = 278;
                            }
                        $M_283_278 : for(;;) switch (__label__) {
                            case 278 :
                            // NORMAL
                                var117 = local_13_FLOAT; // type is FLOAT value type is FLOAT
                                break $M_283_278;
                            case 283 :
                            // NORMAL
                                var117 = local_15_FLOAT; // type is FLOAT value type is FLOAT
                                break $M_283_278;
                        }
                        var111.y = var117;
                        return;
                    case 51 :
                    // NORMAL
                        local_7_INT = 0; // type is INT value type is INT
                        __label__ = 54;
                        continue $M_51_54;
                }
            case 6 :
            // NORMAL
                $S_6 : {
                // NORMAL
                    var var1 = thisRef.m_count; // type is INT value type is INT
                    if ((childIndex < var1)) {
                        __label__ = 22;
                        continue $M_6_22;
                    }
                    }
                var var2 = new jlAssertionError.Create(); // type is REFERENCE value type is REFERENCE
                jlAssertionError.VOIDinit(var2);
                throw var2;
        }
    },

    VOIDcomputeMassojcsMassDataFLOAT : function(thisRef,massData,density) {
        var __label__ = null;
        massData.mass = 0.0;
        massData.center.VOIDsetZero(massData.center);
        massData.I = 0.0;
        return;
    },

    classInitCheck : function() {
        if (!ojcsChainShape.__initialized) {
            ojcsChainShape.__initialized = true;
            var thePrototype = ojcsChainShape.Create.prototype;
            thePrototype.instanceOf = ojcsChainShape.instanceOf;
            thePrototype.ClassgetClass = ojcsChainShape.ClassgetClass;
            thePrototype.VOIDcomputeMassojcsMassDataFLOAT = ojcsChainShape.VOIDcomputeMassojcsMassDataFLOAT;
            thePrototype.VOIDcomputeAABBojcAABBojcTransformINT = ojcsChainShape.VOIDcomputeAABBojcAABBojcTransformINT;
            thePrototype.INTgetChildCount = ojcsChainShape.INTgetChildCount;
            thePrototype.VOIDcreateChainA1ojcVec2INT = ojcsChainShape.VOIDcreateChainA1ojcVec2INT;
            thePrototype.ojcsShapeclone = ojcsChainShape.ojcsShapeclone;
            thePrototype.VOIDgetChildEdgeojcsEdgeShapeINT = ojcsChainShape.VOIDgetChildEdgeojcsEdgeShapeINT;
            thePrototype.ojcsShapeTypegetType = ojcsShape.ojcsShapeTypegetType;
            thePrototype.FLOATgetRadius = ojcsShape.FLOATgetRadius;
            thePrototype.VOIDsetRadiusFLOAT = ojcsShape.VOIDsetRadiusFLOAT;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            ojcsShape.classInitCheck();
            jlObject.classInitCheck();
            ojcsChainShape.VOIDclinit();
        }
    },

};

var ojdcVelocity = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 235,
    __implementedTypes : [1,235],

    Create : function() {
        this.v = null; // declared in org.jbox2d.dynamics.contacts.Velocity
        this.w = 0; // declared in org.jbox2d.dynamics.contacts.Velocity
    },

    instanceOf : function(aType) {
        return ojdcVelocity.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdcVelocity;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var0);
        thisRef.v = var0;
        return;
    },

    classInitCheck : function() {
        if (!ojdcVelocity.__initialized) {
            ojdcVelocity.__initialized = true;
            var thePrototype = ojdcVelocity.Create.prototype;
            thePrototype.instanceOf = ojdcVelocity.instanceOf;
            thePrototype.ClassgetClass = ojdcVelocity.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojdcPosition = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 236,
    __implementedTypes : [1,236],

    Create : function() {
        this.c = null; // declared in org.jbox2d.dynamics.contacts.Position
        this.a = 0; // declared in org.jbox2d.dynamics.contacts.Position
    },

    instanceOf : function(aType) {
        return ojdcPosition.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdcPosition;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        var var0 = new ojcVec2.Create(); // type is REFERENCE value type is REFERENCE
        ojcVec2.VOIDinit(var0);
        thisRef.c = var0;
        return;
    },

    classInitCheck : function() {
        if (!ojdcPosition.__initialized) {
            ojdcPosition.__initialized = true;
            var thePrototype = ojdcPosition.Create.prototype;
            thePrototype.instanceOf = ojdcPosition.instanceOf;
            thePrototype.ClassgetClass = ojdcPosition.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var ojcWorldManifold$1 = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 237,
    __implementedTypes : [1,237],
    $SwitchMap$org$jbox2d$collision$Manifold$ManifoldType : null, // declared in org.jbox2d.collision.WorldManifold$1

    Create : function() {
    },

    instanceOf : function(aType) {
        return ojcWorldManifold$1.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcWorldManifold$1;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcManifold$ManifoldType.A1ojcManifold$ManifoldTypevalues(); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@74b86e
            var var2 = bytecoder.newArray(var0.data.length,0); // type is REFERENCE value type is REFERENCE
            ojcWorldManifold$1.$SwitchMap$org$jbox2d$collision$Manifold$ManifoldType = var2;
            }
        try {
            $S_9 : {
            // NORMAL
                var var3 = ojcWorldManifold$1.$SwitchMap$org$jbox2d$collision$Manifold$ManifoldType; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@766b2d19
                var var5 = ojcManifold$ManifoldType.CIRCLES.INTordinal(ojcManifold$ManifoldType.CIRCLES); // type is INT value type is INT
                var3.data[var5] = 1;
                __label__ = 24;
                }
        } catch (e) {
            dmbcExceptionManager.VOIDpushjlThrowable(e);
            if (e.instanceOf(jlNoSuchFieldError)) {
                __label__ = 23;
            } else {
                throw dmbcExceptionManager.jlThrowablepop();
            }
        }
        $M_24_23 : for(;;) switch (__label__) {
            case 24 :
            // NORMAL
                try {
                    $S_24 : {
                    // NORMAL
                        var var8 = ojcWorldManifold$1.$SwitchMap$org$jbox2d$collision$Manifold$ManifoldType; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@420f1135
                        var var10 = ojcManifold$ManifoldType.FACE_A.INTordinal(ojcManifold$ManifoldType.FACE_A); // type is INT value type is INT
                        var8.data[var10] = 2;
                        __label__ = 39;
                        }
                } catch (e) {
                    dmbcExceptionManager.VOIDpushjlThrowable(e);
                    if (e.instanceOf(jlNoSuchFieldError)) {
                        __label__ = 38;
                    } else {
                        throw dmbcExceptionManager.jlThrowablepop();
                    }
                }
                $M_38_39 : for(;;) switch (__label__) {
                    case 39 :
                    // NORMAL
                        try {
                            var var12 = ojcWorldManifold$1.$SwitchMap$org$jbox2d$collision$Manifold$ManifoldType; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@6fa2183c
                            var var14 = ojcManifold$ManifoldType.FACE_B.INTordinal(ojcManifold$ManifoldType.FACE_B); // type is INT value type is INT
                            var12.data[var14] = 3;
                            return;
                        } catch (e) {
                            dmbcExceptionManager.VOIDpushjlThrowable(e);
                            if (e.instanceOf(jlNoSuchFieldError)) {
                                __label__ = 53;
                            } else {
                                throw dmbcExceptionManager.jlThrowablepop();
                            }
                        }
                        var var15 = dmbcExceptionManager.jlThrowablepop(); // type is REFERENCE value type is REFERENCE
                        var local_0_REFERENCE = var15; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4ab06a6e
                        return;
                    case 38 :
                    // EXCEPTION_HANDLER
                        var var11 = dmbcExceptionManager.jlThrowablepop(); // type is REFERENCE value type is REFERENCE
                        var local_0_REFERENCE = var11; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@659c95c4
                        __label__ = 39;
                        continue $M_38_39;
                }
            case 23 :
            // EXCEPTION_HANDLER
                var var6 = dmbcExceptionManager.jlThrowablepop(); // type is REFERENCE value type is REFERENCE
                var local_0_REFERENCE = var6; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5fa0b6fb
                __label__ = 24;
                continue $M_24_23;
        }
    },

    classInitCheck : function() {
        if (!ojcWorldManifold$1.__initialized) {
            ojcWorldManifold$1.__initialized = true;
            var thePrototype = ojcWorldManifold$1.Create.prototype;
            thePrototype.instanceOf = ojcWorldManifold$1.instanceOf;
            thePrototype.ClassgetClass = ojcWorldManifold$1.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            ojcManifold$ManifoldType.classInitCheck();
            ojcWorldManifold$1.VOIDclinit();
        }
    },

};

var ojdcPositionSolverManifold$1 = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 238,
    __implementedTypes : [1,238],
    $SwitchMap$org$jbox2d$collision$Manifold$ManifoldType : null, // declared in org.jbox2d.dynamics.contacts.PositionSolverManifold$1

    Create : function() {
    },

    instanceOf : function(aType) {
        return ojdcPositionSolverManifold$1.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojdcPositionSolverManifold$1;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcManifold$ManifoldType.A1ojcManifold$ManifoldTypevalues(); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@5a7fa054
            var var2 = bytecoder.newArray(var0.data.length,0); // type is REFERENCE value type is REFERENCE
            ojdcPositionSolverManifold$1.$SwitchMap$org$jbox2d$collision$Manifold$ManifoldType = var2;
            }
        try {
            $S_9 : {
            // NORMAL
                var var3 = ojdcPositionSolverManifold$1.$SwitchMap$org$jbox2d$collision$Manifold$ManifoldType; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@573c3a6b
                var var5 = ojcManifold$ManifoldType.CIRCLES.INTordinal(ojcManifold$ManifoldType.CIRCLES); // type is INT value type is INT
                var3.data[var5] = 1;
                __label__ = 24;
                }
        } catch (e) {
            dmbcExceptionManager.VOIDpushjlThrowable(e);
            if (e.instanceOf(jlNoSuchFieldError)) {
                __label__ = 23;
            } else {
                throw dmbcExceptionManager.jlThrowablepop();
            }
        }
        $M_24_23 : for(;;) switch (__label__) {
            case 24 :
            // NORMAL
                try {
                    $S_24 : {
                    // NORMAL
                        var var8 = ojdcPositionSolverManifold$1.$SwitchMap$org$jbox2d$collision$Manifold$ManifoldType; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@37d3d72c
                        var var10 = ojcManifold$ManifoldType.FACE_A.INTordinal(ojcManifold$ManifoldType.FACE_A); // type is INT value type is INT
                        var8.data[var10] = 2;
                        __label__ = 39;
                        }
                } catch (e) {
                    dmbcExceptionManager.VOIDpushjlThrowable(e);
                    if (e.instanceOf(jlNoSuchFieldError)) {
                        __label__ = 38;
                    } else {
                        throw dmbcExceptionManager.jlThrowablepop();
                    }
                }
                $M_39_38 : for(;;) switch (__label__) {
                    case 39 :
                    // NORMAL
                        try {
                            var var12 = ojdcPositionSolverManifold$1.$SwitchMap$org$jbox2d$collision$Manifold$ManifoldType; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@8efff7d
                            var var14 = ojcManifold$ManifoldType.FACE_B.INTordinal(ojcManifold$ManifoldType.FACE_B); // type is INT value type is INT
                            var12.data[var14] = 3;
                            return;
                        } catch (e) {
                            dmbcExceptionManager.VOIDpushjlThrowable(e);
                            if (e.instanceOf(jlNoSuchFieldError)) {
                                __label__ = 53;
                            } else {
                                throw dmbcExceptionManager.jlThrowablepop();
                            }
                        }
                        var var15 = dmbcExceptionManager.jlThrowablepop(); // type is REFERENCE value type is REFERENCE
                        var local_0_REFERENCE = var15; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2f358334
                        return;
                    case 38 :
                    // EXCEPTION_HANDLER
                        var var11 = dmbcExceptionManager.jlThrowablepop(); // type is REFERENCE value type is REFERENCE
                        var local_0_REFERENCE = var11; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@196c1bdb
                        __label__ = 39;
                        continue $M_39_38;
                }
            case 23 :
            // EXCEPTION_HANDLER
                var var6 = dmbcExceptionManager.jlThrowablepop(); // type is REFERENCE value type is REFERENCE
                var local_0_REFERENCE = var6; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@30afc56d
                __label__ = 24;
                continue $M_24_23;
        }
    },

    classInitCheck : function() {
        if (!ojdcPositionSolverManifold$1.__initialized) {
            ojdcPositionSolverManifold$1.__initialized = true;
            var thePrototype = ojdcPositionSolverManifold$1.Create.prototype;
            thePrototype.instanceOf = ojdcPositionSolverManifold$1.instanceOf;
            thePrototype.ClassgetClass = ojdcPositionSolverManifold$1.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            ojcManifold$ManifoldType.classInitCheck();
            ojdcPositionSolverManifold$1.VOIDclinit();
        }
    },

};

var ojcTimeOfImpact$TOIOutputState = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 239,
    __implementedTypes : [1,14,59,2,239],
    UNKNOWN : null, // declared in org.jbox2d.collision.TimeOfImpact$TOIOutputState
    FAILED : null, // declared in org.jbox2d.collision.TimeOfImpact$TOIOutputState
    OVERLAPPED : null, // declared in org.jbox2d.collision.TimeOfImpact$TOIOutputState
    TOUCHING : null, // declared in org.jbox2d.collision.TimeOfImpact$TOIOutputState
    SEPARATED : null, // declared in org.jbox2d.collision.TimeOfImpact$TOIOutputState
    $VALUES : null, // declared in org.jbox2d.collision.TimeOfImpact$TOIOutputState

    Create : function() {
        this.name = null; // declared in java.lang.Enum
        this.ordinalNumber = 0; // declared in java.lang.Enum
    },

    instanceOf : function(aType) {
        return ojcTimeOfImpact$TOIOutputState.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcTimeOfImpact$TOIOutputState;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var __label__ = null;
        var var0 = new ojcTimeOfImpact$TOIOutputState.Create(); // type is REFERENCE value type is REFERENCE
        ojcTimeOfImpact$TOIOutputState.VOIDinitjlStringINT(var0,bytecoder.stringpool[41],0);
        ojcTimeOfImpact$TOIOutputState.UNKNOWN = var0;
        var var1 = new ojcTimeOfImpact$TOIOutputState.Create(); // type is REFERENCE value type is REFERENCE
        ojcTimeOfImpact$TOIOutputState.VOIDinitjlStringINT(var1,bytecoder.stringpool[71],1);
        ojcTimeOfImpact$TOIOutputState.FAILED = var1;
        var var2 = new ojcTimeOfImpact$TOIOutputState.Create(); // type is REFERENCE value type is REFERENCE
        ojcTimeOfImpact$TOIOutputState.VOIDinitjlStringINT(var2,bytecoder.stringpool[72],2);
        ojcTimeOfImpact$TOIOutputState.OVERLAPPED = var2;
        var var3 = new ojcTimeOfImpact$TOIOutputState.Create(); // type is REFERENCE value type is REFERENCE
        ojcTimeOfImpact$TOIOutputState.VOIDinitjlStringINT(var3,bytecoder.stringpool[73],3);
        ojcTimeOfImpact$TOIOutputState.TOUCHING = var3;
        var var4 = new ojcTimeOfImpact$TOIOutputState.Create(); // type is REFERENCE value type is REFERENCE
        ojcTimeOfImpact$TOIOutputState.VOIDinitjlStringINT(var4,bytecoder.stringpool[74],4);
        ojcTimeOfImpact$TOIOutputState.SEPARATED = var4;
        var var5 = bytecoder.newArray(5,null); // type is REFERENCE value type is REFERENCE
        var var6 = ojcTimeOfImpact$TOIOutputState.UNKNOWN; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7362901d
        var5.data[0] = var6;
        var var7 = ojcTimeOfImpact$TOIOutputState.FAILED; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@528f9223
        var5.data[1] = var7;
        var var8 = ojcTimeOfImpact$TOIOutputState.OVERLAPPED; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@88973a9
        var5.data[2] = var8;
        var var9 = ojcTimeOfImpact$TOIOutputState.TOUCHING; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@702a47ae
        var5.data[3] = var9;
        var var10 = ojcTimeOfImpact$TOIOutputState.SEPARATED; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@17afc3ce
        var5.data[4] = var10;
        ojcTimeOfImpact$TOIOutputState.$VALUES = var5;
        return;
    },

    VOIDinitjlStringINT : function(thisRef,p1,p2) {
        var __label__ = null;
        jlEnum.VOIDinitjlStringINT(thisRef,p1,p2);
        return;
    },

    classInitCheck : function() {
        if (!ojcTimeOfImpact$TOIOutputState.__initialized) {
            ojcTimeOfImpact$TOIOutputState.__initialized = true;
            var thePrototype = ojcTimeOfImpact$TOIOutputState.Create.prototype;
            thePrototype.instanceOf = ojcTimeOfImpact$TOIOutputState.instanceOf;
            thePrototype.ClassgetClass = ojcTimeOfImpact$TOIOutputState.ClassgetClass;
            thePrototype.INTordinal = jlEnum.INTordinal;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlEnum.classInitCheck();
            jlObject.classInitCheck();
            jlComparable.classInitCheck();
            jiSerializable.classInitCheck();
            jlrArray.classInitCheck();
            ojcTimeOfImpact$TOIOutputState.VOIDclinit();
        }
    },

};

var ojcType = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 240,
    __implementedTypes : [1,14,240,59,2],
    POINTS : null, // declared in org.jbox2d.collision.Type
    FACE_A : null, // declared in org.jbox2d.collision.Type
    FACE_B : null, // declared in org.jbox2d.collision.Type
    $VALUES : null, // declared in org.jbox2d.collision.Type

    Create : function() {
        this.name = null; // declared in java.lang.Enum
        this.ordinalNumber = 0; // declared in java.lang.Enum
    },

    instanceOf : function(aType) {
        return ojcType.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcType;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var __label__ = null;
        var var0 = new ojcType.Create(); // type is REFERENCE value type is REFERENCE
        ojcType.VOIDinitjlStringINT(var0,bytecoder.stringpool[75],0);
        ojcType.POINTS = var0;
        var var1 = new ojcType.Create(); // type is REFERENCE value type is REFERENCE
        ojcType.VOIDinitjlStringINT(var1,bytecoder.stringpool[68],1);
        ojcType.FACE_A = var1;
        var var2 = new ojcType.Create(); // type is REFERENCE value type is REFERENCE
        ojcType.VOIDinitjlStringINT(var2,bytecoder.stringpool[69],2);
        ojcType.FACE_B = var2;
        var var3 = bytecoder.newArray(3,null); // type is REFERENCE value type is REFERENCE
        var var4 = ojcType.POINTS; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3d2250d9
        var3.data[0] = var4;
        var var5 = ojcType.FACE_A; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@19448482
        var3.data[1] = var5;
        var var6 = ojcType.FACE_B; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4e43ff3c
        var3.data[2] = var6;
        ojcType.$VALUES = var3;
        return;
    },

    VOIDinitjlStringINT : function(thisRef,p1,p2) {
        var __label__ = null;
        jlEnum.VOIDinitjlStringINT(thisRef,p1,p2);
        return;
    },

    A1ojcTypevalues : function() {
        var __label__ = null;
        var var1 = ojcType.$VALUES.jlObjectclone(ojcType.$VALUES); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@647a412a
        return var1;
    },

    classInitCheck : function() {
        if (!ojcType.__initialized) {
            ojcType.__initialized = true;
            var thePrototype = ojcType.Create.prototype;
            thePrototype.instanceOf = ojcType.instanceOf;
            thePrototype.ClassgetClass = ojcType.ClassgetClass;
            thePrototype.INTordinal = jlEnum.INTordinal;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlEnum.classInitCheck();
            jlObject.classInitCheck();
            jlComparable.classInitCheck();
            jiSerializable.classInitCheck();
            jlrArray.classInitCheck();
            ojcType.VOIDclinit();
        }
    },

};

var ojcSeparationFunction$1 = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 241,
    __implementedTypes : [1,241],
    $SwitchMap$org$jbox2d$collision$Type : null, // declared in org.jbox2d.collision.SeparationFunction$1

    Create : function() {
    },

    instanceOf : function(aType) {
        return ojcSeparationFunction$1.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcSeparationFunction$1;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = ojcType.A1ojcTypevalues(); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@a854290
            var var2 = bytecoder.newArray(var0.data.length,0); // type is REFERENCE value type is REFERENCE
            ojcSeparationFunction$1.$SwitchMap$org$jbox2d$collision$Type = var2;
            }
        try {
            $S_9 : {
            // NORMAL
                var var3 = ojcSeparationFunction$1.$SwitchMap$org$jbox2d$collision$Type; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@59199d79
                var var5 = ojcType.POINTS.INTordinal(ojcType.POINTS); // type is INT value type is INT
                var3.data[var5] = 1;
                __label__ = 24;
                }
        } catch (e) {
            dmbcExceptionManager.VOIDpushjlThrowable(e);
            if (e.instanceOf(jlNoSuchFieldError)) {
                __label__ = 23;
            } else {
                throw dmbcExceptionManager.jlThrowablepop();
            }
        }
        $M_24_23 : for(;;) switch (__label__) {
            case 23 :
            // EXCEPTION_HANDLER
                var var6 = dmbcExceptionManager.jlThrowablepop(); // type is REFERENCE value type is REFERENCE
                var local_0_REFERENCE = var6; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@19c3fd
                __label__ = 24;
                continue $M_24_23;
            case 24 :
            // NORMAL
                try {
                    $S_24 : {
                    // NORMAL
                        var var8 = ojcSeparationFunction$1.$SwitchMap$org$jbox2d$collision$Type; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@11a0b667
                        var var10 = ojcType.FACE_A.INTordinal(ojcType.FACE_A); // type is INT value type is INT
                        var8.data[var10] = 2;
                        __label__ = 39;
                        }
                } catch (e) {
                    dmbcExceptionManager.VOIDpushjlThrowable(e);
                    if (e.instanceOf(jlNoSuchFieldError)) {
                        __label__ = 38;
                    } else {
                        throw dmbcExceptionManager.jlThrowablepop();
                    }
                }
                $M_38_39 : for(;;) switch (__label__) {
                    case 38 :
                    // EXCEPTION_HANDLER
                        var var11 = dmbcExceptionManager.jlThrowablepop(); // type is REFERENCE value type is REFERENCE
                        var local_0_REFERENCE = var11; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3111f701
                        __label__ = 39;
                        continue $M_38_39;
                    case 39 :
                    // NORMAL
                        try {
                            var var12 = ojcSeparationFunction$1.$SwitchMap$org$jbox2d$collision$Type; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@24f6460f
                            var var14 = ojcType.FACE_B.INTordinal(ojcType.FACE_B); // type is INT value type is INT
                            var12.data[var14] = 3;
                            return;
                        } catch (e) {
                            dmbcExceptionManager.VOIDpushjlThrowable(e);
                            if (e.instanceOf(jlNoSuchFieldError)) {
                                __label__ = 53;
                            } else {
                                throw dmbcExceptionManager.jlThrowablepop();
                            }
                        }
                        var var15 = dmbcExceptionManager.jlThrowablepop(); // type is REFERENCE value type is REFERENCE
                        var local_0_REFERENCE = var15; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6abe7f47
                        return;
                }
        }
    },

    classInitCheck : function() {
        if (!ojcSeparationFunction$1.__initialized) {
            ojcSeparationFunction$1.__initialized = true;
            var thePrototype = ojcSeparationFunction$1.Create.prototype;
            thePrototype.instanceOf = ojcSeparationFunction$1.instanceOf;
            thePrototype.ClassgetClass = ojcSeparationFunction$1.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            ojcType.classInitCheck();
            ojcSeparationFunction$1.VOIDclinit();
        }
    },

};

var dmbawClickEvent = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 242,
    __implementedTypes : [242,1,232,8],


    classInitCheck : function() {
        if (!dmbawClickEvent.__initialized) {
            dmbawClickEvent.__initialized = true;
            jlObject.classInitCheck();
            dmbawEvent.classInitCheck();
            dmbaOpaqueReferenceType.classInitCheck();
        }
    },

};

var dmbawCSSStyleDeclaration = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 243,
    __implementedTypes : [1,8,243],


    classInitCheck : function() {
        if (!dmbawCSSStyleDeclaration.__initialized) {
            dmbawCSSStyleDeclaration.__initialized = true;
            jlObject.classInitCheck();
            dmbaOpaqueReferenceType.classInitCheck();
        }
    },

};

var ojcQueryCallback = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 244,
    __implementedTypes : [1,244],


    classInitCheck : function() {
        if (!ojcQueryCallback.__initialized) {
            ojcQueryCallback.__initialized = true;
            jlObject.classInitCheck();
        }
    },

};

var juArrayList$ListItr = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 245,
    __implementedTypes : [1,226,204,245,224],

    Create : function() {
        this.this$0 = null; // declared in java.util.ArrayList$Itr
        this.lastRet = 0; // declared in java.util.ArrayList$Itr
        this.expectedModCount = 0; // declared in java.util.ArrayList$Itr
        this.cursor = 0; // declared in java.util.ArrayList$Itr
        this.this$0 = null; // declared in java.util.ArrayList$ListItr
    },

    instanceOf : function(aType) {
        return juArrayList$ListItr.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return juArrayList$ListItr;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitjuArrayListINT : function(thisRef,p1,index) {
        var __label__ = null;
        thisRef.this$0 = p1;
        juArrayList$Itr.VOIDinitjuArrayList(thisRef,p1);
        thisRef.cursor = index;
        return;
    },

    INTpreviousIndex : function(thisRef) {
        var __label__ = null;
        return (thisRef.cursor - 1);
    },

    classInitCheck : function() {
        if (!juArrayList$ListItr.__initialized) {
            juArrayList$ListItr.__initialized = true;
            var thePrototype = juArrayList$ListItr.Create.prototype;
            thePrototype.instanceOf = juArrayList$ListItr.instanceOf;
            thePrototype.ClassgetClass = juArrayList$ListItr.ClassgetClass;
            thePrototype.INTpreviousIndex = juArrayList$ListItr.INTpreviousIndex;
            thePrototype.VOIDcheckForComodification = juArrayList$Itr.VOIDcheckForComodification;
            thePrototype.jlObjectnext = juArrayList$Itr.jlObjectnext;
            thePrototype.BOOLEANhasNext = juArrayList$Itr.BOOLEANhasNext;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            juArrayList$Itr.classInitCheck();
            jlObject.classInitCheck();
            juListIterator.classInitCheck();
            juIterator.classInitCheck();
        }
    },

};

var juHashMap$EntryIterator = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 246,
    __implementedTypes : [246,1,204,247],

    Create : function() {
        this.this$0 = null; // declared in java.util.HashMap$HashIterator
        this.expectedModCount = 0; // declared in java.util.HashMap$HashIterator
        this.next = null; // declared in java.util.HashMap$HashIterator
        this.current = null; // declared in java.util.HashMap$HashIterator
        this.index = 0; // declared in java.util.HashMap$HashIterator
        this.this$0 = null; // declared in java.util.HashMap$EntryIterator
    },

    instanceOf : function(aType) {
        return juHashMap$EntryIterator.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return juHashMap$EntryIterator;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitjuHashMap : function(thisRef,this$0) {
        var __label__ = null;
        thisRef.this$0 = this$0;
        juHashMap$HashIterator.VOIDinitjuHashMap(thisRef,this$0);
        return;
    },

    jlObjectnext : function(thisRef) {
        var __label__ = null;
        var var0 = thisRef.juMap$Entrynext(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7a97c4f2
        return var0;
    },

    juMap$Entrynext : function(thisRef) {
        var __label__ = null;
        var var0 = thisRef.juHashMap$NodenextNode(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7924955
        return var0;
    },

    classInitCheck : function() {
        if (!juHashMap$EntryIterator.__initialized) {
            juHashMap$EntryIterator.__initialized = true;
            var thePrototype = juHashMap$EntryIterator.Create.prototype;
            thePrototype.instanceOf = juHashMap$EntryIterator.instanceOf;
            thePrototype.ClassgetClass = juHashMap$EntryIterator.ClassgetClass;
            thePrototype.juMap$Entrynext = juHashMap$EntryIterator.juMap$Entrynext;
            thePrototype.jlObjectnext = juHashMap$EntryIterator.jlObjectnext;
            thePrototype.juHashMap$NodenextNode = juHashMap$HashIterator.juHashMap$NodenextNode;
            thePrototype.BOOLEANhasNext = juHashMap$HashIterator.BOOLEANhasNext;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            juHashMap$HashIterator.classInitCheck();
            jlObject.classInitCheck();
            juIterator.classInitCheck();
        }
    },

};

var juHashMap$HashIterator = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 247,
    __implementedTypes : [1,247],

    instanceOf : function(aType) {
        return juHashMap$HashIterator.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return juHashMap$HashIterator;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitjuHashMap : function(thisRef,this$0) {
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            thisRef.this$0 = this$0;
            var var0 = this$0.modCount; // type is INT value type is INT
            thisRef.expectedModCount = var0;
            local_2_REFERENCE = this$0.table; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@14dbd5c9
            thisRef.next = null;
            thisRef.current = null;
            thisRef.index = 0;
            var var3 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@548539f7
            if (var3 == null ) {
                return;
            }
            }
        $S_41 : {
        // NORMAL
            var var4 = this$0.size; // type is INT value type is INT
            if ((var4 <= 0)) {
                return;
            }
            __label__ = 48;
            }
        $L_48 : for (;;) {
            $S_48 : {
            // NORMAL
                var var5 = thisRef.index; // type is INT value type is INT
                var var7 = local_2_REFERENCE.data.length; // type is INT value type is INT
                if ((var5 >= var7)) {
                    return;
                }
                }
            var var8 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@548539f7
            var var9 = thisRef.index; // type is INT value type is INT
            var var10 = (var9 + 1); // type is INT value type is INT
            thisRef.index = var10;
            var var11 = var8.data[var9]; // type is REFERENCE value type is REFERENCE
            thisRef.next = var11;
            if (var11 == null ) {
                __label__ = 48;
                continue $L_48;
            }
            return;
        }
    },

    BOOLEANhasNext : function(thisRef) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@749ab2e8
            if (var0 == null ) {
                __label__ = 11;
                break $S_0;
            }
            __label__ = 7;
            }
        for(;;) switch (__label__) {
            case 11 :
            // NORMAL
                var var1 = 0; // type is INT value type is INT
                return var1;
            case 7 :
            // NORMAL
                var var1 = 1; // type is INT value type is INT
                return var1;
        }
    },

    juHashMap$NodenextNode : function(thisRef) {
        var local_1_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_2_REFERENCE = thisRef.next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1035b55
            var var3 = thisRef.this$0.modCount; // type is INT value type is INT
            var var4 = thisRef.expectedModCount; // type is INT value type is INT
            if ((var3 == var4)) {
                __label__ = 27;
                break $S_0;
            }
            __label__ = 19;
            }
        for(;;) switch (__label__) {
            case 27 :
            // NORMAL
                $S_27 : {
                // NORMAL
                    var var6 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2461e239
                    if (var6 != null ) {
                        __label__ = 39;
                        break $S_27;
                    }
                    __label__ = 31;
                    }
                for(;;) switch (__label__) {
                    case 31 :
                    // NORMAL
                        var var20 = new juNoSuchElementException.Create(); // type is REFERENCE value type is REFERENCE
                        juNoSuchElementException.VOIDinit(var20);
                        throw var20;
                    case 39 :
                    // NORMAL
                        $S_39 : {
                        // NORMAL
                            var var7 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2461e239
                            thisRef.current = var7;
                            var var8 = var7.next; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@23ee17f6
                            thisRef.next = var8;
                            if (var8 != null ) {
                                return local_2_REFERENCE;
                            }
                            }
                        $S_56 : {
                        // NORMAL
                            var var10 = thisRef.this$0.table; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1b03fc44
                            local_1_REFERENCE = var10; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@67ea0f4e
                            if (var10 == null ) {
                                return local_2_REFERENCE;
                            }
                            __label__ = 68;
                            }
                        $L_68 : for (;;) {
                            $S_68 : {
                            // NORMAL
                                var var12 = thisRef.index; // type is INT value type is INT
                                var var14 = local_1_REFERENCE.data.length; // type is INT value type is INT
                                if ((var12 >= var14)) {
                                    return local_2_REFERENCE;
                                }
                                }
                            var var15 = local_1_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@67ea0f4e
                            var var16 = thisRef.index; // type is INT value type is INT
                            var var17 = (var16 + 1); // type is INT value type is INT
                            thisRef.index = var17;
                            var var18 = var15.data[var16]; // type is REFERENCE value type is REFERENCE
                            thisRef.next = var18;
                            if (var18 == null ) {
                                __label__ = 68;
                                continue $L_68;
                            }
                            return local_2_REFERENCE;
                        }
                }
            case 19 :
            // NORMAL
                var var5 = new juConcurrentModificationException.Create(); // type is REFERENCE value type is REFERENCE
                juConcurrentModificationException.VOIDinit(var5);
                throw var5;
        }
    },

    classInitCheck : function() {
        if (!juHashMap$HashIterator.__initialized) {
            juHashMap$HashIterator.__initialized = true;
            jlObject.classInitCheck();
        }
    },

};

var ojcContactID$Type = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 248,
    __implementedTypes : [1,14,248,59,2],
    VERTEX : null, // declared in org.jbox2d.collision.ContactID$Type
    FACE : null, // declared in org.jbox2d.collision.ContactID$Type
    $VALUES : null, // declared in org.jbox2d.collision.ContactID$Type

    Create : function() {
        this.name = null; // declared in java.lang.Enum
        this.ordinalNumber = 0; // declared in java.lang.Enum
    },

    instanceOf : function(aType) {
        return ojcContactID$Type.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcContactID$Type;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var __label__ = null;
        var var0 = new ojcContactID$Type.Create(); // type is REFERENCE value type is REFERENCE
        ojcContactID$Type.VOIDinitjlStringINT(var0,bytecoder.stringpool[76],0);
        ojcContactID$Type.VERTEX = var0;
        var var1 = new ojcContactID$Type.Create(); // type is REFERENCE value type is REFERENCE
        ojcContactID$Type.VOIDinitjlStringINT(var1,bytecoder.stringpool[77],1);
        ojcContactID$Type.FACE = var1;
        var var2 = bytecoder.newArray(2,null); // type is REFERENCE value type is REFERENCE
        var var3 = ojcContactID$Type.VERTEX; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@50846859
        var2.data[0] = var3;
        var var4 = ojcContactID$Type.FACE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@40b3c58b
        var2.data[1] = var4;
        ojcContactID$Type.$VALUES = var2;
        return;
    },

    VOIDinitjlStringINT : function(thisRef,p1,p2) {
        var __label__ = null;
        jlEnum.VOIDinitjlStringINT(thisRef,p1,p2);
        return;
    },

    classInitCheck : function() {
        if (!ojcContactID$Type.__initialized) {
            ojcContactID$Type.__initialized = true;
            var thePrototype = ojcContactID$Type.Create.prototype;
            thePrototype.instanceOf = ojcContactID$Type.instanceOf;
            thePrototype.ClassgetClass = ojcContactID$Type.ClassgetClass;
            thePrototype.INTordinal = jlEnum.INTordinal;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlEnum.classInitCheck();
            jlObject.classInitCheck();
            jlComparable.classInitCheck();
            jiSerializable.classInitCheck();
            jlrArray.classInitCheck();
            ojcContactID$Type.VOIDclinit();
        }
    },

};

var ojcCollision$EPAxis$Type = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 249,
    __implementedTypes : [1,14,249,59,2],
    UNKNOWN : null, // declared in org.jbox2d.collision.Collision$EPAxis$Type
    EDGE_A : null, // declared in org.jbox2d.collision.Collision$EPAxis$Type
    EDGE_B : null, // declared in org.jbox2d.collision.Collision$EPAxis$Type
    $VALUES : null, // declared in org.jbox2d.collision.Collision$EPAxis$Type

    Create : function() {
        this.name = null; // declared in java.lang.Enum
        this.ordinalNumber = 0; // declared in java.lang.Enum
    },

    instanceOf : function(aType) {
        return ojcCollision$EPAxis$Type.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return ojcCollision$EPAxis$Type;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var __label__ = null;
        var var0 = new ojcCollision$EPAxis$Type.Create(); // type is REFERENCE value type is REFERENCE
        ojcCollision$EPAxis$Type.VOIDinitjlStringINT(var0,bytecoder.stringpool[41],0);
        ojcCollision$EPAxis$Type.UNKNOWN = var0;
        var var1 = new ojcCollision$EPAxis$Type.Create(); // type is REFERENCE value type is REFERENCE
        ojcCollision$EPAxis$Type.VOIDinitjlStringINT(var1,bytecoder.stringpool[78],1);
        ojcCollision$EPAxis$Type.EDGE_A = var1;
        var var2 = new ojcCollision$EPAxis$Type.Create(); // type is REFERENCE value type is REFERENCE
        ojcCollision$EPAxis$Type.VOIDinitjlStringINT(var2,bytecoder.stringpool[79],2);
        ojcCollision$EPAxis$Type.EDGE_B = var2;
        var var3 = bytecoder.newArray(3,null); // type is REFERENCE value type is REFERENCE
        var var4 = ojcCollision$EPAxis$Type.UNKNOWN; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6877ebc3
        var3.data[0] = var4;
        var var5 = ojcCollision$EPAxis$Type.EDGE_A; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4a6fbc81
        var3.data[1] = var5;
        var var6 = ojcCollision$EPAxis$Type.EDGE_B; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1611ba2
        var3.data[2] = var6;
        ojcCollision$EPAxis$Type.$VALUES = var3;
        return;
    },

    VOIDinitjlStringINT : function(thisRef,p1,p2) {
        var __label__ = null;
        jlEnum.VOIDinitjlStringINT(thisRef,p1,p2);
        return;
    },

    classInitCheck : function() {
        if (!ojcCollision$EPAxis$Type.__initialized) {
            ojcCollision$EPAxis$Type.__initialized = true;
            var thePrototype = ojcCollision$EPAxis$Type.Create.prototype;
            thePrototype.instanceOf = ojcCollision$EPAxis$Type.instanceOf;
            thePrototype.ClassgetClass = ojcCollision$EPAxis$Type.ClassgetClass;
            thePrototype.INTordinal = jlEnum.INTordinal;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlEnum.classInitCheck();
            jlObject.classInitCheck();
            jlComparable.classInitCheck();
            jiSerializable.classInitCheck();
            jlrArray.classInitCheck();
            ojcCollision$EPAxis$Type.VOIDclinit();
        }
    },

};

var juNoSuchElementException = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 250,
    __implementedTypes : [1,182,250,64,183,2],

    Create : function() {
    },

    instanceOf : function(aType) {
        return juNoSuchElementException.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return juNoSuchElementException;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        jlRuntimeException.VOIDinit(thisRef);
        return;
    },

    VOIDinitjlString : function(thisRef,s) {
        var __label__ = null;
        jlRuntimeException.VOIDinitjlString(thisRef,s);
        return;
    },

    classInitCheck : function() {
        if (!juNoSuchElementException.__initialized) {
            juNoSuchElementException.__initialized = true;
            var thePrototype = juNoSuchElementException.Create.prototype;
            thePrototype.instanceOf = juNoSuchElementException.instanceOf;
            thePrototype.ClassgetClass = juNoSuchElementException.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlRuntimeException.classInitCheck();
            jlObject.classInitCheck();
            jlThrowable.classInitCheck();
            jlException.classInitCheck();
            jiSerializable.classInitCheck();
        }
    },

};

var jiuPreconditions = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 251,
    __implementedTypes : [1,251],

    Create : function() {
    },

    instanceOf : function(aType) {
        return jiuPreconditions.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jiuPreconditions;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    INTcheckIndexINTINTjufBiFunction : function(index,length,oobef) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((index < 0)) {
                __label__ = 9;
                break $S_0;
            }
            __label__ = 4;
            }
        $M_9_4 : for(;;) switch (__label__) {
            case 9 :
            // NORMAL
                var var0 = jiuPreconditions.jlRuntimeExceptionoutOfBoundsCheckIndexjufBiFunctionINTINT(oobef,index,length); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@32162beb
                throw var0;
            case 4 :
            // NORMAL
                if ((index < length)) {
                    return index;
                }
                __label__ = 9;
                continue $M_9_4;
        }
    },

    jlRuntimeExceptionoutOfBoundsCheckIndexjufBiFunctionINTINT : function(oobe,index,length) {
        var __label__ = null;
        var var0 = bytecoder.newArray(2,null); // type is REFERENCE value type is REFERENCE
        var var1 = jlInteger.jlIntegervalueOfINT(index); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@247206c1
        var0.data[0] = var1;
        var var2 = jlInteger.jlIntegervalueOfINT(length); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3a284f16
        var0.data[1] = var2;
        var var3 = jiuPreconditions.jlRuntimeExceptionoutOfBoundsjufBiFunctionjlStringA1jlInteger(oobe,bytecoder.stringpool[80],var0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7670ae28
        return var3;
    },

    jlRuntimeExceptionoutOfBoundsjufBiFunctionjlStringA1jlInteger : function(oobef,checkKind,args) {
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 1
        var local_4_REFERENCE = null; // type is REFERENCE # of inits = 1
        var var4 = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = juList.juListofA1jlObject(args); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@535b1fc4
            local_3_REFERENCE = var0; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6d950ef3
            if (oobef != null ) {
                __label__ = 13;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_9_13 : for(;;) switch (__label__) {
            case 13 :
            // NORMAL
                var var3 = oobef.jlObjectapplyjlObjectjlObject(oobef,checkKind,local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@65ca860a
                var4 = var3; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@131e95e7
                break $M_9_13;
            case 9 :
            // NORMAL
                var4 = null; // type is REFERENCE value type is REFERENCE
                break $M_9_13;
        }
        $S_24 : {
        // NORMAL
            local_4_REFERENCE = var4; // type is REFERENCE value type is REFERENCE
            var var6 = local_4_REFERENCE; // type is REFERENCE value type is REFERENCE
            if (var6 != null ) {
                __label__ = 46;
                break $S_24;
            }
            __label__ = 31;
            }
        for(;;) switch (__label__) {
            case 46 :
            // NORMAL
                var var11 = local_4_REFERENCE; // type is REFERENCE value type is REFERENCE
                return var11;
            case 31 :
            // NORMAL
                var var7 = new jlIndexOutOfBoundsException.Create(); // type is REFERENCE value type is REFERENCE
                var var9 = jiuPreconditions.jlStringoutOfBoundsMessagejlStringjuList(checkKind,local_3_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7f0869ff
                jlIndexOutOfBoundsException.VOIDinitjlString(var7,var9);
                var var11 = var7; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2ff65a07
                return var11;
        }
    },

    jlStringoutOfBoundsMessagejlStringjuList : function(checkKind,args) {
        var local_2_INT = null; // type is INT # of inits = 3
        var local_4_INT = null; // type is INT # of inits = 8
        var var21 = null; // type is REFERENCE # of inits = 2
        var local_3_REFERENCE = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if (checkKind != null ) {
                __label__ = 18;
                break $S_0;
            }
            __label__ = 4;
            }
        $M_18_4 : for(;;) switch (__label__) {
            case 18 :
            // NORMAL
                $S_18 : {
                // NORMAL
                    if (checkKind != null ) {
                        __label__ = 36;
                        break $S_18;
                    }
                    __label__ = 22;
                    }
                for(;;) switch (__label__) {
                    case 36 :
                    // NORMAL
                        $S_36 : {
                        // NORMAL
                            if (args != null ) {
                                __label__ = 54;
                                break $S_36;
                            }
                            __label__ = 40;
                            }
                        for(;;) switch (__label__) {
                            case 40 :
                            // NORMAL
                                var var47 = bytecoder.newArray(1,null); // type is REFERENCE value type is REFERENCE
                                var47.data[0] = checkKind;
                                var var48 = jlString.jlStringformatjlStringA1jlObject(bytecoder.stringpool[81],var47); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6d7a81f1
                                return var48;
                            case 54 :
                            // NORMAL
                                $S_54 : {
                                // NORMAL
                                    local_2_INT = 0; // type is INT value type is INT
                                    local_3_REFERENCE = checkKind; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@790ce51
                                    local_4_INT = -1; // type is INT value type is INT
                                    var var6 = local_3_REFERENCE.INThashCode(local_3_REFERENCE); // type is INT value type is INT
                                    switch(var6) {
                                     case 1848935233:
                                         __label__ = 130;
                                    break $S_54;
                                     case -538822486:
                                         __label__ = 100;
                                    break $S_54;
                                     case 1844394469:
                                         __label__ = 115;
                                    break $S_54;
                                    }
                                    __label__ = 142;
                                    break $S_54;
                                    }
                                $M_115_142_130_100 : for(;;) switch (__label__) {
                                    case 130 :
                                    // NORMAL
                                        $S_130 : {
                                        // NORMAL
                                            var var14 = local_3_REFERENCE.BOOLEANequalsjlObject(local_3_REFERENCE,bytecoder.stringpool[82]); // type is BOOLEAN value type is BOOLEAN
                                            if ((var14 == 0)) {
                                                __label__ = 142;
                                                continue $M_115_142_130_100;
                                            }
                                            }
                                        local_4_INT = 2; // type is INT value type is INT
                                        __label__ = 142;
                                        continue $M_115_142_130_100;
                                    case 115 :
                                    // NORMAL
                                        $S_115 : {
                                        // NORMAL
                                            var var8 = local_3_REFERENCE.BOOLEANequalsjlObject(local_3_REFERENCE,bytecoder.stringpool[83]); // type is BOOLEAN value type is BOOLEAN
                                            if ((var8 == 0)) {
                                                __label__ = 142;
                                                continue $M_115_142_130_100;
                                            }
                                            }
                                        local_4_INT = 1; // type is INT value type is INT
                                        __label__ = 142;
                                        continue $M_115_142_130_100;
                                    case 142 :
                                    // NORMAL
                                        $S_142 : {
                                        // NORMAL
                                            var var16 = local_4_INT; // type is INT value type is INT
                                            if (var16 < 0 || var16 > 2) {
                                             __label__ = 182;
                                            break $S_142;
                                            }
                                            switch(var16 - 0) {
                                             case 0:
                                                 __label__ = 172;
                                            break $S_142;
                                             case 1:
                                                 __label__ = 177;
                                            break $S_142;
                                             case 2:
                                                 __label__ = 177;
                                            break $S_142;
                                            }
                                            throw 'Illegal jump target!';
                                            }
                                        $M_182_172_177 : for(;;) switch (__label__) {
                                            case 172 :
                                            // NORMAL
                                                local_2_INT = 2; // type is INT value type is INT
                                                __label__ = 182;
                                                continue $M_182_172_177;
                                            case 182 :
                                            // NORMAL
                                                $S_182 : {
                                                // NORMAL
                                                    var var19 = args.INTsize(args); // type is INT value type is INT
                                                    var var20 = local_2_INT; // type is INT value type is INT
                                                    if ((var19 == var20)) {
                                                        __label__ = 197;
                                                        break $S_182;
                                                    }
                                                    __label__ = 192;
                                                    }
                                                $M_197_192 : for(;;) switch (__label__) {
                                                    case 197 :
                                                    // NORMAL
                                                        var21 = checkKind; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@790ce51
                                                        break $M_197_192;
                                                    case 192 :
                                                    // NORMAL
                                                        var21 = bytecoder.stringpool[0]; // type is REFERENCE value type is REFERENCE
                                                        break $M_197_192;
                                                }
                                                $S_198 : {
                                                // NORMAL
                                                    local_3_REFERENCE = var21; // type is REFERENCE value type is REFERENCE
                                                    local_4_INT = -1; // type is INT value type is INT
                                                    var var24 = local_3_REFERENCE.INThashCode(local_3_REFERENCE); // type is INT value type is INT
                                                    switch(var24) {
                                                     case 1848935233:
                                                         __label__ = 270;
                                                    break $S_198;
                                                     case -538822486:
                                                         __label__ = 240;
                                                    break $S_198;
                                                     case 1844394469:
                                                         __label__ = 255;
                                                    break $S_198;
                                                    }
                                                    __label__ = 282;
                                                    break $S_198;
                                                    }
                                                $M_282_270_255_240 : for(;;) switch (__label__) {
                                                    case 255 :
                                                    // NORMAL
                                                        $S_255 : {
                                                        // NORMAL
                                                            var var26 = local_3_REFERENCE.BOOLEANequalsjlObject(local_3_REFERENCE,bytecoder.stringpool[83]); // type is BOOLEAN value type is BOOLEAN
                                                            if ((var26 == 0)) {
                                                                __label__ = 282;
                                                                continue $M_282_270_255_240;
                                                            }
                                                            }
                                                        local_4_INT = 1; // type is INT value type is INT
                                                        __label__ = 282;
                                                        continue $M_282_270_255_240;
                                                    case 270 :
                                                    // NORMAL
                                                        $S_270 : {
                                                        // NORMAL
                                                            var var29 = local_3_REFERENCE.BOOLEANequalsjlObject(local_3_REFERENCE,bytecoder.stringpool[82]); // type is BOOLEAN value type is BOOLEAN
                                                            if ((var29 == 0)) {
                                                                __label__ = 282;
                                                                continue $M_282_270_255_240;
                                                            }
                                                            }
                                                        local_4_INT = 2; // type is INT value type is INT
                                                        __label__ = 282;
                                                        continue $M_282_270_255_240;
                                                    case 282 :
                                                    // NORMAL
                                                        $S_282 : {
                                                        // NORMAL
                                                            var var34 = local_4_INT; // type is INT value type is INT
                                                            if (var34 < 0 || var34 > 2) {
                                                             __label__ = 422;
                                                            break $S_282;
                                                            }
                                                            switch(var34 - 0) {
                                                             case 0:
                                                                 __label__ = 312;
                                                            break $S_282;
                                                             case 1:
                                                                 __label__ = 342;
                                                            break $S_282;
                                                             case 2:
                                                                 __label__ = 382;
                                                            break $S_282;
                                                            }
                                                            throw 'Illegal jump target!';
                                                            }
                                                        for(;;) switch (__label__) {
                                                            case 342 :
                                                            // NORMAL
                                                                var var35 = bytecoder.newArray(3,null); // type is REFERENCE value type is REFERENCE
                                                                var var36 = args.jlObjectgetINT(args,0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1ae24cdb
                                                                var35.data[0] = var36;
                                                                var var37 = args.jlObjectgetINT(args,1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@68bc3595
                                                                var35.data[1] = var37;
                                                                var var38 = args.jlObjectgetINT(args,2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@54ad5a61
                                                                var35.data[2] = var38;
                                                                var var39 = jlString.jlStringformatjlStringA1jlObject(bytecoder.stringpool[84],var35); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6d612c0c
                                                                return var39;
                                                            case 382 :
                                                            // NORMAL
                                                                var var42 = bytecoder.newArray(3,null); // type is REFERENCE value type is REFERENCE
                                                                var var43 = args.jlObjectgetINT(args,0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@65ed21ef
                                                                var42.data[0] = var43;
                                                                var var44 = args.jlObjectgetINT(args,1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6c74b05a
                                                                var42.data[1] = var44;
                                                                var var45 = args.jlObjectgetINT(args,2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@523491e7
                                                                var42.data[2] = var45;
                                                                var var46 = jlString.jlStringformatjlStringA1jlObject(bytecoder.stringpool[85],var42); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@36d1d6e1
                                                                return var46;
                                                            case 422 :
                                                            // NORMAL
                                                                var var55 = bytecoder.newArray(2,null); // type is REFERENCE value type is REFERENCE
                                                                var55.data[0] = checkKind;
                                                                var55.data[1] = args;
                                                                var var56 = jlString.jlStringformatjlStringA1jlObject(bytecoder.stringpool[86],var55); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3abf7b8d
                                                                return var56;
                                                            case 312 :
                                                            // NORMAL
                                                                var var49 = bytecoder.newArray(2,null); // type is REFERENCE value type is REFERENCE
                                                                var var50 = args.jlObjectgetINT(args,0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7380eae0
                                                                var49.data[0] = var50;
                                                                var var51 = args.jlObjectgetINT(args,1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5cde6de
                                                                var49.data[1] = var51;
                                                                var var52 = jlString.jlStringformatjlStringA1jlObject(bytecoder.stringpool[87],var49); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3d935e58
                                                                return var52;
                                                        }
                                                    case 240 :
                                                    // NORMAL
                                                        $S_240 : {
                                                        // NORMAL
                                                            var var32 = local_3_REFERENCE.BOOLEANequalsjlObject(local_3_REFERENCE,bytecoder.stringpool[80]); // type is BOOLEAN value type is BOOLEAN
                                                            if ((var32 == 0)) {
                                                                __label__ = 282;
                                                                continue $M_282_270_255_240;
                                                            }
                                                            }
                                                        local_4_INT = 0; // type is INT value type is INT
                                                        __label__ = 282;
                                                        continue $M_282_270_255_240;
                                                }
                                            case 177 :
                                            // NORMAL
                                                local_2_INT = 3; // type is INT value type is INT
                                                __label__ = 182;
                                                continue $M_182_172_177;
                                        }
                                    case 100 :
                                    // NORMAL
                                        $S_100 : {
                                        // NORMAL
                                            var var11 = local_3_REFERENCE.BOOLEANequalsjlObject(local_3_REFERENCE,bytecoder.stringpool[80]); // type is BOOLEAN value type is BOOLEAN
                                            if ((var11 == 0)) {
                                                __label__ = 142;
                                                continue $M_115_142_130_100;
                                            }
                                            }
                                        local_4_INT = 0; // type is INT value type is INT
                                        __label__ = 142;
                                        continue $M_115_142_130_100;
                                }
                        }
                    case 22 :
                    // NORMAL
                        var var40 = bytecoder.newArray(1,null); // type is REFERENCE value type is REFERENCE
                        var40.data[0] = args;
                        var var41 = jlString.jlStringformatjlStringA1jlObject(bytecoder.stringpool[81],var40); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7c312974
                        return var41;
                }
            case 4 :
            // NORMAL
                $S_4 : {
                // NORMAL
                    if (args != null ) {
                        __label__ = 18;
                        continue $M_18_4;
                    }
                    }
                var var54 = jlString.jlStringformatjlStringA1jlObject(bytecoder.stringpool[88],bytecoder.newArray(0,null)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@8120bf8
                return var54;
        }
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    classInitCheck : function() {
        if (!jiuPreconditions.__initialized) {
            jiuPreconditions.__initialized = true;
            var thePrototype = jiuPreconditions.Create.prototype;
            thePrototype.instanceOf = jiuPreconditions.instanceOf;
            thePrototype.ClassgetClass = jiuPreconditions.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
        }
    },

};

var jufBiFunction = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 252,
    __implementedTypes : [1,252],


    classInitCheck : function() {
        if (!jufBiFunction.__initialized) {
            jufBiFunction.__initialized = true;
            jlObject.classInitCheck();
        }
    },

};

var juImmutableCollections = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 253,
    __implementedTypes : [1,253],
    SALT : 0, // declared in java.util.ImmutableCollections

    Create : function() {
    },

    instanceOf : function(aType) {
        return juImmutableCollections.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return juImmutableCollections;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var __label__ = null;
        var var0 = jlSystem.LONGnanoTime(); // type is LONG value type is LONG
        var local_0_LONG = var0; // type is LONG value type is LONG
        var var7 = Math.floor(((local_0_LONG >>> 32) ^ local_0_LONG)); // type is INT value type is INT
        juImmutableCollections.SALT = var7;
        return;
    },

    juListemptyList : function() {
        var __label__ = null;
        return juImmutableCollections$ListN.EMPTY_LIST;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        return;
    },

    jlUnsupportedOperationExceptionuoe : function() {
        var __label__ = null;
        var var0 = new jlUnsupportedOperationException.Create(); // type is REFERENCE value type is REFERENCE
        jlUnsupportedOperationException.VOIDinit(var0);
        return var0;
    },

    classInitCheck : function() {
        if (!juImmutableCollections.__initialized) {
            juImmutableCollections.__initialized = true;
            var thePrototype = juImmutableCollections.Create.prototype;
            thePrototype.instanceOf = juImmutableCollections.instanceOf;
            thePrototype.ClassgetClass = juImmutableCollections.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            jlSystem.classInitCheck();
            juImmutableCollections.VOIDclinit();
        }
    },

};

var juImmutableCollections$ListN = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 254,
    __implementedTypes : [1,180,179,178,256,255,2,176,254,177],
    EMPTY_LIST : null, // declared in java.util.ImmutableCollections$ListN

    Create : function() {
        this.elements = null; // declared in java.util.ImmutableCollections$ListN
    },

    instanceOf : function(aType) {
        return juImmutableCollections$ListN.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return juImmutableCollections$ListN;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    A1jlObjectfinishToArrayA1jlObjectjuIterator : function(p0,p1) {
         return juAbstractCollection.A1jlObjectfinishToArrayA1jlObjectjuIterator(p0,p1);
    },

    INThugeCapacityINT : function(p0) {
         return juAbstractCollection.INThugeCapacityINT(p0);
    },

    juListofA1jlObject : function(p0) {
         return juList.juListofA1jlObject(p0);
    },

    VOIDclinit : function() {
        var __label__ = null;
        var var0 = new juImmutableCollections$ListN.Create(); // type is REFERENCE value type is REFERENCE
        juImmutableCollections$ListN.VOIDinitA1jlObject(var0,bytecoder.newArray(0,null));
        juImmutableCollections$ListN.EMPTY_LIST = var0;
        return;
    },

    VOIDinitA1jlObject : function(thisRef,input) {
        var local_3_INT = null; // type is INT # of inits = 3
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            juImmutableCollections$AbstractImmutableList.VOIDinit(thisRef);
            local_2_REFERENCE = bytecoder.newArray(input.data.length,null); // type is REFERENCE value type is REFERENCE
            local_3_INT = 0; // type is INT value type is INT
            __label__ = 12;
            }
        $L_12 : for (;;) {
            $S_12 : {
            // NORMAL
                var var5 = local_3_INT; // type is INT value type is INT
                var var6 = input.data.length; // type is INT value type is INT
                if ((var5 >= var6)) {
                    __label__ = 33;
                    break $S_12;
                }
                __label__ = 18;
                }
            for(;;) switch (__label__) {
                case 18 :
                // NORMAL
                    var var7 = local_2_REFERENCE; // type is REFERENCE value type is REFERENCE
                    var var8 = local_3_INT; // type is INT value type is INT
                    var var10 = input.data[local_3_INT]; // type is REFERENCE value type is REFERENCE
                    var var11 = juObjects.jlObjectrequireNonNulljlObject(var10); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@691930d5
                    var7.data[var8] = var11;
                    local_3_INT = (local_3_INT + 1); // type is INT value type is INT
                    __label__ = 12;
                    continue $L_12;
                case 33 :
                // NORMAL
                    var var12 = local_2_REFERENCE; // type is REFERENCE value type is REFERENCE
                    thisRef.elements = var12;
                    return;
            }
        }
    },

    INTsize : function(thisRef) {
        var __label__ = null;
        return thisRef.elements.data.length;
    },

    jlObjectgetINT : function(thisRef,index) {
        var __label__ = null;
        var var1 = thisRef.elements.data[index]; // type is REFERENCE value type is REFERENCE
        return var1;
    },

    classInitCheck : function() {
        if (!juImmutableCollections$ListN.__initialized) {
            juImmutableCollections$ListN.__initialized = true;
            var thePrototype = juImmutableCollections$ListN.Create.prototype;
            thePrototype.instanceOf = juImmutableCollections$ListN.instanceOf;
            thePrototype.ClassgetClass = juImmutableCollections$ListN.ClassgetClass;
            thePrototype.jlObjectgetINT = juImmutableCollections$ListN.jlObjectgetINT;
            thePrototype.INTsize = juImmutableCollections$ListN.INTsize;
            thePrototype.jlIndexOutOfBoundsExceptionoutOfBoundsINT = juImmutableCollections$AbstractImmutableList.jlIndexOutOfBoundsExceptionoutOfBoundsINT;
            thePrototype.juListIteratorlistIteratorINT = juImmutableCollections$AbstractImmutableList.juListIteratorlistIteratorINT;
            thePrototype.juListIteratorlistIterator = juImmutableCollections$AbstractImmutableList.juListIteratorlistIterator;
            thePrototype.INTindexOfjlObject = juImmutableCollections$AbstractImmutableList.INTindexOfjlObject;
            thePrototype.BOOLEANcontainsjlObject = juImmutableCollections$AbstractImmutableList.BOOLEANcontainsjlObject;
            thePrototype.juIteratoriterator = juImmutableCollections$AbstractImmutableList.juIteratoriterator;
            thePrototype.BOOLEANequalsjlObject = juImmutableCollections$AbstractImmutableList.BOOLEANequalsjlObject;
            thePrototype.INThashCode = juImmutableCollections$AbstractImmutableList.INThashCode;
            thePrototype.BOOLEANcontainsAlljuCollection = juAbstractCollection.BOOLEANcontainsAlljuCollection;
            thePrototype.A1jlObjecttoArrayA1jlObject = juAbstractCollection.A1jlObjecttoArrayA1jlObject;
            thePrototype.jlStringtoString = juAbstractCollection.jlStringtoString;
            juImmutableCollections$AbstractImmutableList.classInitCheck();
            jlObject.classInitCheck();
            juRandomAccess.classInitCheck();
            juList.classInitCheck();
            jlIterable.classInitCheck();
            juImmutableCollections$AbstractImmutableCollection.classInitCheck();
            jiSerializable.classInitCheck();
            juAbstractCollection.classInitCheck();
            juCollection.classInitCheck();
            juImmutableCollections$ListN.VOIDclinit();
        }
    },

};

var juImmutableCollections$AbstractImmutableList = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 255,
    __implementedTypes : [1,180,179,178,256,255,176,177],

    instanceOf : function(aType) {
        return juImmutableCollections$AbstractImmutableList.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return juImmutableCollections$AbstractImmutableList;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    A1jlObjectfinishToArrayA1jlObjectjuIterator : function(p0,p1) {
         return juAbstractCollection.A1jlObjectfinishToArrayA1jlObjectjuIterator(p0,p1);
    },

    INThugeCapacityINT : function(p0) {
         return juAbstractCollection.INThugeCapacityINT(p0);
    },

    juListofA1jlObject : function(p0) {
         return juList.juListofA1jlObject(p0);
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        juImmutableCollections$AbstractImmutableCollection.VOIDinit(thisRef);
        return;
    },

    INThashCode : function(thisRef) {
        var local_2_INT = null; // type is INT # of inits = 3
        var local_3_INT = null; // type is INT # of inits = 2
        var local_1_INT = null; // type is INT # of inits = 3
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_1_INT = 1; // type is INT value type is INT
            local_2_INT = 0; // type is INT value type is INT
            var var4 = thisRef.INTsize(thisRef); // type is INT value type is INT
            local_3_INT = var4; // type is INT value type is INT
            __label__ = 9;
            }
        $L_9 : for (;;) {
            $S_9 : {
            // NORMAL
                var var7 = local_2_INT; // type is INT value type is INT
                var var8 = local_3_INT; // type is INT value type is INT
                if ((var7 >= var8)) {
                    return local_1_INT;
                }
                }
            var var10 = (31 * local_1_INT); // type is INT value type is INT
            var var12 = thisRef.jlObjectgetINT(thisRef,local_2_INT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@66d95002
            var var13 = var12.INThashCode(var12); // type is INT value type is INT
            local_1_INT = (var10 + var13); // type is INT value type is INT
            local_2_INT = (local_2_INT + 1); // type is INT value type is INT
            __label__ = 9;
            continue $L_9;
        }
    },

    BOOLEANequalsjlObject : function(thisRef,o) {
        var local_2_REFERENCE = null; // type is REFERENCE # of inits = 2
        var local_3_INT = null; // type is INT # of inits = 3
        var local_4_INT = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((o != thisRef)) {
                break $S_0;
            }
            return 1;
            }
        $S_7 : {
        // NORMAL
            var var0 = (o == null ? false : o.instanceOf(juList)); // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                break $S_7;
            }
            return 0;
            }
        $S_16 : {
        // NORMAL
            var var1 = o.juIteratoriterator(o); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1698d8ca
            local_2_REFERENCE = var1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2972e3f7
            local_3_INT = 0; // type is INT value type is INT
            var var5 = thisRef.INTsize(thisRef); // type is INT value type is INT
            local_4_INT = var5; // type is INT value type is INT
            __label__ = 34;
            }
        $L_34 : for (;;) {
            $S_34 : {
            // NORMAL
                var var8 = local_3_INT; // type is INT value type is INT
                var var9 = local_4_INT; // type is INT value type is INT
                if ((var8 >= var9)) {
                    __label__ = 74;
                    break $S_34;
                }
                __label__ = 40;
                }
            for(;;) switch (__label__) {
                case 74 :
                // NORMAL
                    $S_74 : {
                    // NORMAL
                        var var18 = local_2_REFERENCE.BOOLEANhasNext(local_2_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                        if ((var18 != 0)) {
                            __label__ = 87;
                            break $S_74;
                        }
                        __label__ = 83;
                        }
                    for(;;) switch (__label__) {
                        case 87 :
                        // NORMAL
                            var var19 = 0; // type is INT value type is INT
                            return var19;
                        case 83 :
                        // NORMAL
                            var var19 = 1; // type is INT value type is INT
                            return var19;
                    }
                case 40 :
                // NORMAL
                    $S_40 : {
                    // NORMAL
                        var var11 = local_2_REFERENCE.BOOLEANhasNext(local_2_REFERENCE); // type is BOOLEAN value type is BOOLEAN
                        if ((var11 == 0)) {
                            return 0;
                        }
                        }
                    $S_49 : {
                    // NORMAL
                        var var13 = thisRef.jlObjectgetINT(thisRef,local_3_INT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2fcb410b
                        var var15 = local_2_REFERENCE.jlObjectnext(local_2_REFERENCE); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@275e6d0a
                        var var16 = var13.BOOLEANequalsjlObject(var13,var15); // type is BOOLEAN value type is BOOLEAN
                        if ((var16 != 0)) {
                            break $S_49;
                        }
                        return 0;
                        }
                    local_3_INT = (local_3_INT + 1); // type is INT value type is INT
                    __label__ = 34;
                    continue $L_34;
            }
        }
    },

    juIteratoriterator : function(thisRef) {
        var __label__ = null;
        var var0 = new juImmutableCollections$ListItr.Create(); // type is REFERENCE value type is REFERENCE
        var var1 = thisRef.INTsize(thisRef); // type is INT value type is INT
        juImmutableCollections$ListItr.VOIDinitjuListINT(var0,thisRef,var1);
        return var0;
    },

    BOOLEANcontainsjlObject : function(thisRef,o) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.INTindexOfjlObject(thisRef,o); // type is INT value type is INT
            if ((var0 < 0)) {
                __label__ = 12;
                break $S_0;
            }
            __label__ = 8;
            }
        for(;;) switch (__label__) {
            case 12 :
            // NORMAL
                var var1 = 0; // type is INT value type is INT
                return var1;
            case 8 :
            // NORMAL
                var var1 = 1; // type is INT value type is INT
                return var1;
        }
    },

    INTindexOfjlObject : function(thisRef,o) {
        var local_2_INT = null; // type is INT # of inits = 3
        var local_3_INT = null; // type is INT # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = juObjects.jlObjectrequireNonNulljlObject(o); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@51009356
            local_2_INT = 0; // type is INT value type is INT
            var var3 = thisRef.INTsize(thisRef); // type is INT value type is INT
            local_3_INT = var3; // type is INT value type is INT
            __label__ = 12;
            }
        $L_12 : for (;;) {
            $S_12 : {
            // NORMAL
                var var6 = local_2_INT; // type is INT value type is INT
                var var7 = local_3_INT; // type is INT value type is INT
                if ((var6 >= var7)) {
                    return -1;
                }
                }
            $S_17 : {
            // NORMAL
                var var9 = thisRef.jlObjectgetINT(thisRef,local_2_INT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1bfca25f
                var var10 = o.BOOLEANequalsjlObject(o,var9); // type is BOOLEAN value type is BOOLEAN
                if ((var10 == 0)) {
                    break $S_17;
                }
                return local_2_INT;
                }
            local_2_INT = (local_2_INT + 1); // type is INT value type is INT
            __label__ = 12;
            continue $L_12;
        }
    },

    juListIteratorlistIterator : function(thisRef) {
        var __label__ = null;
        var var0 = thisRef.juListIteratorlistIteratorINT(thisRef,0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@468db7ae
        return var0;
    },

    juListIteratorlistIteratorINT : function(thisRef,index) {
        var local_2_INT = null; // type is INT # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.INTsize(thisRef); // type is INT value type is INT
            local_2_INT = var0; // type is INT value type is INT
            if ((index < 0)) {
                __label__ = 14;
                break $S_0;
            }
            __label__ = 9;
            }
        $M_9_14 : for(;;) switch (__label__) {
            case 9 :
            // NORMAL
                $S_9 : {
                // NORMAL
                    var var3 = local_2_INT; // type is INT value type is INT
                    if ((index <= var3)) {
                        break $S_9;
                    }
                    __label__ = 14;
                    continue $M_9_14;
                    }
                var var5 = new juImmutableCollections$ListItr.Create(); // type is REFERENCE value type is REFERENCE
                juImmutableCollections$ListItr.VOIDinitjuListINTINT(var5,thisRef,local_2_INT,index);
                return var5;
            case 14 :
            // NORMAL
                var var4 = thisRef.jlIndexOutOfBoundsExceptionoutOfBoundsINT(thisRef,index); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@11bb8144
                throw var4;
        }
    },

    jlIndexOutOfBoundsExceptionoutOfBoundsINT : function(thisRef,index) {
        var __label__ = null;
        var var0 = new jlIndexOutOfBoundsException.Create(); // type is REFERENCE value type is REFERENCE
        var var1 = new jlStringBuilder.Create(); // type is REFERENCE value type is REFERENCE
        jlStringBuilder.VOIDinit(var1);
        var var2 = var1.jlStringBuilderappendjlString(var1,bytecoder.stringpool[59]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5657d292
        var var3 = var2.jlStringBuilderappendINT(var2,index); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2f3e50f0
        var var4 = var3.jlStringBuilderappendjlString(var3,bytecoder.stringpool[89]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@f3c240b
        var var5 = thisRef.INTsize(thisRef); // type is INT value type is INT
        var var6 = var4.jlStringBuilderappendINT(var4,var5); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2ad3262
        var var7 = var6.jlStringtoString(var6); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6a86b3e7
        jlIndexOutOfBoundsException.VOIDinitjlString(var0,var7);
        return var0;
    },

    classInitCheck : function() {
        if (!juImmutableCollections$AbstractImmutableList.__initialized) {
            juImmutableCollections$AbstractImmutableList.__initialized = true;
            juImmutableCollections$AbstractImmutableCollection.classInitCheck();
            jlObject.classInitCheck();
            juRandomAccess.classInitCheck();
            juList.classInitCheck();
            jlIterable.classInitCheck();
            juAbstractCollection.classInitCheck();
            juCollection.classInitCheck();
        }
    },

};

var juImmutableCollections$AbstractImmutableCollection = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 256,
    __implementedTypes : [1,178,256,176,177],

    instanceOf : function(aType) {
        return juImmutableCollections$AbstractImmutableCollection.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return juImmutableCollections$AbstractImmutableCollection;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    A1jlObjectfinishToArrayA1jlObjectjuIterator : function(p0,p1) {
         return juAbstractCollection.A1jlObjectfinishToArrayA1jlObjectjuIterator(p0,p1);
    },

    INThugeCapacityINT : function(p0) {
         return juAbstractCollection.INThugeCapacityINT(p0);
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        juAbstractCollection.VOIDinit(thisRef);
        return;
    },

    classInitCheck : function() {
        if (!juImmutableCollections$AbstractImmutableCollection.__initialized) {
            juImmutableCollections$AbstractImmutableCollection.__initialized = true;
            juAbstractCollection.classInitCheck();
            jlObject.classInitCheck();
            jlIterable.classInitCheck();
            juCollection.classInitCheck();
        }
    },

};

var juImmutableCollections$List12 = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 257,
    __implementedTypes : [1,180,179,257,178,256,255,2,176,177],

    Create : function() {
        this.e0 = null; // declared in java.util.ImmutableCollections$List12
        this.e1 = null; // declared in java.util.ImmutableCollections$List12
    },

    instanceOf : function(aType) {
        return juImmutableCollections$List12.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return juImmutableCollections$List12;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    A1jlObjectfinishToArrayA1jlObjectjuIterator : function(p0,p1) {
         return juAbstractCollection.A1jlObjectfinishToArrayA1jlObjectjuIterator(p0,p1);
    },

    INThugeCapacityINT : function(p0) {
         return juAbstractCollection.INThugeCapacityINT(p0);
    },

    juListofA1jlObject : function(p0) {
         return juList.juListofA1jlObject(p0);
    },

    VOIDinitjlObject : function(thisRef,e0) {
        var __label__ = null;
        juImmutableCollections$AbstractImmutableList.VOIDinit(thisRef);
        var var0 = juObjects.jlObjectrequireNonNulljlObject(e0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7b340e3d
        thisRef.e0 = var0;
        thisRef.e1 = null;
        return;
    },

    VOIDinitjlObjectjlObject : function(thisRef,e0,e1) {
        var __label__ = null;
        juImmutableCollections$AbstractImmutableList.VOIDinit(thisRef);
        var var0 = juObjects.jlObjectrequireNonNulljlObject(e0); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6c5923f0
        thisRef.e0 = var0;
        var var1 = juObjects.jlObjectrequireNonNulljlObject(e1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@186cc82d
        thisRef.e1 = var1;
        return;
    },

    INTsize : function(thisRef) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.e1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4991b93c
            if (var0 == null ) {
                __label__ = 11;
                break $S_0;
            }
            __label__ = 7;
            }
        for(;;) switch (__label__) {
            case 11 :
            // NORMAL
                var var1 = 1; // type is INT value type is INT
                return var1;
            case 7 :
            // NORMAL
                var var1 = 2; // type is INT value type is INT
                return var1;
        }
    },

    jlObjectgetINT : function(thisRef,index) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((index != 0)) {
                break $S_0;
            }
            return thisRef.e0;
            }
        $S_9 : {
        // NORMAL
            if ((index != 1)) {
                __label__ = 26;
                break $S_9;
            }
            __label__ = 14;
            }
        $M_14_26 : for(;;) switch (__label__) {
            case 26 :
            // NORMAL
                var var2 = thisRef.jlIndexOutOfBoundsExceptionoutOfBoundsINT(thisRef,index); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@44b84e78
                throw var2;
            case 14 :
            // NORMAL
                var var1 = thisRef.e1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@355e9dfe
                if (var1 == null ) {
                    __label__ = 26;
                    continue $M_14_26;
                }
                return thisRef.e1;
        }
    },

    classInitCheck : function() {
        if (!juImmutableCollections$List12.__initialized) {
            juImmutableCollections$List12.__initialized = true;
            var thePrototype = juImmutableCollections$List12.Create.prototype;
            thePrototype.instanceOf = juImmutableCollections$List12.instanceOf;
            thePrototype.ClassgetClass = juImmutableCollections$List12.ClassgetClass;
            thePrototype.jlObjectgetINT = juImmutableCollections$List12.jlObjectgetINT;
            thePrototype.INTsize = juImmutableCollections$List12.INTsize;
            thePrototype.jlIndexOutOfBoundsExceptionoutOfBoundsINT = juImmutableCollections$AbstractImmutableList.jlIndexOutOfBoundsExceptionoutOfBoundsINT;
            thePrototype.juListIteratorlistIteratorINT = juImmutableCollections$AbstractImmutableList.juListIteratorlistIteratorINT;
            thePrototype.juListIteratorlistIterator = juImmutableCollections$AbstractImmutableList.juListIteratorlistIterator;
            thePrototype.INTindexOfjlObject = juImmutableCollections$AbstractImmutableList.INTindexOfjlObject;
            thePrototype.BOOLEANcontainsjlObject = juImmutableCollections$AbstractImmutableList.BOOLEANcontainsjlObject;
            thePrototype.juIteratoriterator = juImmutableCollections$AbstractImmutableList.juIteratoriterator;
            thePrototype.BOOLEANequalsjlObject = juImmutableCollections$AbstractImmutableList.BOOLEANequalsjlObject;
            thePrototype.INThashCode = juImmutableCollections$AbstractImmutableList.INThashCode;
            thePrototype.BOOLEANcontainsAlljuCollection = juAbstractCollection.BOOLEANcontainsAlljuCollection;
            thePrototype.A1jlObjecttoArrayA1jlObject = juAbstractCollection.A1jlObjecttoArrayA1jlObject;
            thePrototype.jlStringtoString = juAbstractCollection.jlStringtoString;
            juImmutableCollections$AbstractImmutableList.classInitCheck();
            jlObject.classInitCheck();
            juRandomAccess.classInitCheck();
            juList.classInitCheck();
            jlIterable.classInitCheck();
            juImmutableCollections$AbstractImmutableCollection.classInitCheck();
            jiSerializable.classInitCheck();
            juAbstractCollection.classInitCheck();
            juCollection.classInitCheck();
        }
    },

};

var juImmutableCollections$ListItr = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 258,
    __implementedTypes : [1,258,226,204],

    Create : function() {
        this.list = null; // declared in java.util.ImmutableCollections$ListItr
        this.size = 0; // declared in java.util.ImmutableCollections$ListItr
        this.cursor = 0; // declared in java.util.ImmutableCollections$ListItr
        this.isListIterator = false; // declared in java.util.ImmutableCollections$ListItr
    },

    instanceOf : function(aType) {
        return juImmutableCollections$ListItr.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return juImmutableCollections$ListItr;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitjuListINT : function(thisRef,list,size) {
        var __label__ = null;
        thisRef.list = list;
        thisRef.size = size;
        thisRef.cursor = 0;
        thisRef.isListIterator = 0;
        return;
    },

    VOIDinitjuListINTINT : function(thisRef,list,size,index) {
        var __label__ = null;
        thisRef.list = list;
        thisRef.size = size;
        thisRef.cursor = index;
        thisRef.isListIterator = 1;
        return;
    },

    BOOLEANhasNext : function(thisRef) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.cursor; // type is INT value type is INT
            var var1 = thisRef.size; // type is INT value type is INT
            if ((var0 == var1)) {
                __label__ = 15;
                break $S_0;
            }
            __label__ = 11;
            }
        for(;;) switch (__label__) {
            case 15 :
            // NORMAL
                var var2 = 0; // type is INT value type is INT
                return var2;
            case 11 :
            // NORMAL
                var var2 = 1; // type is INT value type is INT
                return var2;
        }
    },

    jlObjectnext : function(thisRef) {
        var __label__ = null;
        try {
            var local_1_INT = thisRef.cursor; // type is INT value type is INT
            var var5 = thisRef.list.jlObjectgetINT(thisRef.list,local_1_INT); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6cd1b16a
            var local_2_REFERENCE = var5; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@744b3d1b
            var var8 = (local_1_INT + 1); // type is INT value type is INT
            thisRef.cursor = var8;
            return local_2_REFERENCE;
        } catch (e) {
            dmbcExceptionManager.VOIDpushjlThrowable(e);
            if (e.instanceOf(jlIndexOutOfBoundsException)) {
                __label__ = 25;
            } else {
                throw dmbcExceptionManager.jlThrowablepop();
            }
        }
        var local_0_REFERENCE = thisRef; // type is REFERENCE value type is REFERENCE
        var var11 = dmbcExceptionManager.jlThrowablepop(); // type is REFERENCE value type is REFERENCE
        var local_1_REFERENCE = var11; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@6615f9fb
        var var13 = new juNoSuchElementException.Create(); // type is REFERENCE value type is REFERENCE
        juNoSuchElementException.VOIDinit(var13);
        throw var13;
    },

    INTpreviousIndex : function(thisRef) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.isListIterator; // type is BOOLEAN value type is BOOLEAN
            if ((var0 != 0)) {
                return (thisRef.cursor - 1);
            }
            }
        var var1 = juImmutableCollections.jlUnsupportedOperationExceptionuoe(); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@36fa2aec
        throw var1;
    },

    classInitCheck : function() {
        if (!juImmutableCollections$ListItr.__initialized) {
            juImmutableCollections$ListItr.__initialized = true;
            var thePrototype = juImmutableCollections$ListItr.Create.prototype;
            thePrototype.instanceOf = juImmutableCollections$ListItr.instanceOf;
            thePrototype.ClassgetClass = juImmutableCollections$ListItr.ClassgetClass;
            thePrototype.INTpreviousIndex = juImmutableCollections$ListItr.INTpreviousIndex;
            thePrototype.jlObjectnext = juImmutableCollections$ListItr.jlObjectnext;
            thePrototype.BOOLEANhasNext = juImmutableCollections$ListItr.BOOLEANhasNext;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            juListIterator.classInitCheck();
            juIterator.classInitCheck();
        }
    },

};

var dmbcExceptionManager = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 259,
    __implementedTypes : [1,259],
    exceptions : null, // declared in de.mirkosertic.bytecoder.classlib.ExceptionManager

    Create : function() {
    },

    instanceOf : function(aType) {
        return dmbcExceptionManager.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return dmbcExceptionManager;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDclinit : function() {
        var __label__ = null;
        var var0 = new juStack.Create(); // type is REFERENCE value type is REFERENCE
        juStack.VOIDinit(var0);
        dmbcExceptionManager.exceptions = var0;
        return;
    },

    VOIDpushjlThrowable : function(t) {
        var __label__ = null;
        var var1 = dmbcExceptionManager.exceptions.jlObjectpushjlObject(dmbcExceptionManager.exceptions,t); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4b526895
        return;
    },

    jlThrowablepop : function() {
        var __label__ = null;
        var var1 = dmbcExceptionManager.exceptions.jlObjectpop(dmbcExceptionManager.exceptions); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7748615c
        return var1;
    },

    jlThrowablelastExceptionOrNull : function() {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var1 = dmbcExceptionManager.exceptions.BOOLEANisEmpty(dmbcExceptionManager.exceptions); // type is BOOLEAN value type is BOOLEAN
            if ((var1 == 0)) {
                break $S_0;
            }
            return null;
            }
        var var3 = dmbcExceptionManager.exceptions.jlObjectpop(dmbcExceptionManager.exceptions); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@5468d977
        return var3;
    },

    classInitCheck : function() {
        if (!dmbcExceptionManager.__initialized) {
            dmbcExceptionManager.__initialized = true;
            var thePrototype = dmbcExceptionManager.Create.prototype;
            thePrototype.instanceOf = dmbcExceptionManager.instanceOf;
            thePrototype.ClassgetClass = dmbcExceptionManager.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlObject.classInitCheck();
            juStack.classInitCheck();
            dmbcExceptionManager.VOIDclinit();
        }
    },

};

var juStack = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 260,
    __implementedTypes : [1,180,175,179,178,26,261,2,176,260,177],

    Create : function() {
        this.modCount = 0; // declared in java.util.AbstractList
        this.elementData = null; // declared in java.util.Vector
        this.capacityIncrement = 0; // declared in java.util.Vector
        this.elementCount = 0; // declared in java.util.Vector
    },

    instanceOf : function(aType) {
        return juStack.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return juStack;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    A1jlObjectfinishToArrayA1jlObjectjuIterator : function(p0,p1) {
         return juAbstractCollection.A1jlObjectfinishToArrayA1jlObjectjuIterator(p0,p1);
    },

    INThugeCapacityINT : function(p0) {
         return juAbstractCollection.INThugeCapacityINT(p0);
    },

    juListofA1jlObject : function(p0) {
         return juList.juListofA1jlObject(p0);
    },

    INThugeCapacityINT : function(p0) {
         return juVector.INThugeCapacityINT(p0);
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        juVector.VOIDinit(thisRef);
        return;
    },

    jlObjectpushjlObject : function(thisRef,item) {
        var __label__ = null;
        thisRef.VOIDaddElementjlObject(thisRef,item);
        return item;
    },

    jlObjectpop : function(thisRef) {
        var __label__ = null;
        var var0 = thisRef.INTsize(thisRef); // type is INT value type is INT
        var local_2_INT = var0; // type is INT value type is INT
        var var3 = thisRef.jlObjectpeek(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2bb2e1ca
        var local_1_REFERENCE = var3; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@3dd5adea
        thisRef.VOIDremoveElementAtINT(thisRef,(local_2_INT - 1));
        return local_1_REFERENCE;
    },

    jlObjectpeek : function(thisRef) {
        var local_1_INT = null; // type is INT # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.INTsize(thisRef); // type is INT value type is INT
            local_1_INT = var0; // type is INT value type is INT
            var var3 = local_1_INT; // type is INT value type is INT
            if ((var3 != 0)) {
                __label__ = 17;
                break $S_0;
            }
            __label__ = 9;
            }
        for(;;) switch (__label__) {
            case 9 :
            // NORMAL
                var var4 = new juEmptyStackException.Create(); // type is REFERENCE value type is REFERENCE
                juEmptyStackException.VOIDinit(var4);
                throw var4;
            case 17 :
            // NORMAL
                var var7 = thisRef.jlObjectelementAtINT(thisRef,(local_1_INT - 1)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@28392737
                return var7;
        }
    },

    classInitCheck : function() {
        if (!juStack.__initialized) {
            juStack.__initialized = true;
            var thePrototype = juStack.Create.prototype;
            thePrototype.instanceOf = juStack.instanceOf;
            thePrototype.ClassgetClass = juStack.ClassgetClass;
            thePrototype.jlObjectpeek = juStack.jlObjectpeek;
            thePrototype.jlObjectpop = juStack.jlObjectpop;
            thePrototype.jlObjectpushjlObject = juStack.jlObjectpushjlObject;
            thePrototype.BOOLEANisEmpty = juVector.BOOLEANisEmpty;
            thePrototype.VOIDremoveElementAtINT = juVector.VOIDremoveElementAtINT;
            thePrototype.jlObjectelementDataINT = juVector.jlObjectelementDataINT;
            thePrototype.jlObjectelementAtINT = juVector.jlObjectelementAtINT;
            thePrototype.INTsize = juVector.INTsize;
            thePrototype.INTnewCapacityINT = juVector.INTnewCapacityINT;
            thePrototype.A1jlObjectgrowINT = juVector.A1jlObjectgrowINT;
            thePrototype.A1jlObjectgrow = juVector.A1jlObjectgrow;
            thePrototype.VOIDaddjlObjectA1jlObjectINT = juVector.VOIDaddjlObjectA1jlObjectINT;
            thePrototype.VOIDaddElementjlObject = juVector.VOIDaddElementjlObject;
            thePrototype.INTindexOfjlObject = juAbstractList.INTindexOfjlObject;
            thePrototype.jlStringoutOfBoundsMsgINT = juAbstractList.jlStringoutOfBoundsMsgINT;
            thePrototype.VOIDrangeCheckForAddINT = juAbstractList.VOIDrangeCheckForAddINT;
            thePrototype.juListIteratorlistIteratorINT = juAbstractList.juListIteratorlistIteratorINT;
            thePrototype.juListIteratorlistIterator = juAbstractList.juListIteratorlistIterator;
            thePrototype.BOOLEANequalsjlObject = juAbstractList.BOOLEANequalsjlObject;
            thePrototype.juIteratoriterator = juAbstractList.juIteratoriterator;
            thePrototype.INThashCode = juAbstractList.INThashCode;
            thePrototype.BOOLEANcontainsjlObject = juAbstractCollection.BOOLEANcontainsjlObject;
            thePrototype.BOOLEANcontainsAlljuCollection = juAbstractCollection.BOOLEANcontainsAlljuCollection;
            thePrototype.A1jlObjecttoArrayA1jlObject = juAbstractCollection.A1jlObjecttoArrayA1jlObject;
            thePrototype.jlStringtoString = juAbstractCollection.jlStringtoString;
            juVector.classInitCheck();
            jlObject.classInitCheck();
            juRandomAccess.classInitCheck();
            juAbstractList.classInitCheck();
            juList.classInitCheck();
            jlIterable.classInitCheck();
            jlCloneable.classInitCheck();
            jiSerializable.classInitCheck();
            juAbstractCollection.classInitCheck();
            juCollection.classInitCheck();
        }
    },

};

var juVector = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 261,
    __implementedTypes : [1,180,175,179,178,26,261,2,176,177],

    Create : function() {
        this.modCount = 0; // declared in java.util.AbstractList
        this.elementData = null; // declared in java.util.Vector
        this.capacityIncrement = 0; // declared in java.util.Vector
        this.elementCount = 0; // declared in java.util.Vector
    },

    instanceOf : function(aType) {
        return juVector.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return juVector;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    A1jlObjectfinishToArrayA1jlObjectjuIterator : function(p0,p1) {
         return juAbstractCollection.A1jlObjectfinishToArrayA1jlObjectjuIterator(p0,p1);
    },

    INThugeCapacityINT : function(p0) {
         return juAbstractCollection.INThugeCapacityINT(p0);
    },

    juListofA1jlObject : function(p0) {
         return juList.juListofA1jlObject(p0);
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        juVector.VOIDinitINT(thisRef,10);
        return;
    },

    VOIDinitINT : function(thisRef,initialCapacity) {
        var __label__ = null;
        juVector.VOIDinitINTINT(thisRef,initialCapacity,0);
        return;
    },

    VOIDinitINTINT : function(thisRef,initialCapacity,capacityIncrement) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            juAbstractList.VOIDinit(thisRef);
            if ((initialCapacity >= 0)) {
                __label__ = 35;
                break $S_0;
            }
            __label__ = 8;
            }
        for(;;) switch (__label__) {
            case 35 :
            // NORMAL
                var var0 = bytecoder.newArray(initialCapacity,null); // type is REFERENCE value type is REFERENCE
                thisRef.elementData = var0;
                thisRef.capacityIncrement = capacityIncrement;
                return;
            case 8 :
            // NORMAL
                var var1 = new jlIllegalArgumentException.Create(); // type is REFERENCE value type is REFERENCE
                var var2 = new jlStringBuilder.Create(); // type is REFERENCE value type is REFERENCE
                jlStringBuilder.VOIDinit(var2);
                var var3 = var2.jlStringBuilderappendjlString(var2,bytecoder.stringpool[90]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@21165a33
                var var4 = var3.jlStringBuilderappendINT(var3,initialCapacity); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@31035264
                var var5 = var4.jlStringtoString(var4); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@69660cd1
                jlIllegalArgumentException.VOIDinitjlString(var1,var5);
                throw var1;
        }
    },

    VOIDaddElementjlObject : function(thisRef,obj) {
        var __label__ = null;
        var var1 = (thisRef.modCount + 1); // type is INT value type is INT
        thisRef.modCount = var1;
        thisRef.VOIDaddjlObjectA1jlObjectINT(thisRef,obj,thisRef.elementData,thisRef.elementCount);
        return;
    },

    VOIDaddjlObjectA1jlObjectINT : function(thisRef,e,elementData,s) {
        var var3 = null; // type is REFERENCE # of inits = 2
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = elementData.data.length; // type is INT value type is INT
            if ((s != var0)) {
                var3 = elementData; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@66a75333
                __label__ = 11;
                break $S_0;
            }
            __label__ = 6;
            }
        $M_11_6 : for(;;) switch (__label__) {
            case 11 :
            // NORMAL
                var var4 = var3; // type is REFERENCE value type is REFERENCE
                var4.data[s] = e;
                var var5 = (s + 1); // type is INT value type is INT
                thisRef.elementCount = var5;
                return;
            case 6 :
            // NORMAL
                var var1 = thisRef.A1jlObjectgrow(thisRef); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@670a994e
                var local_2_REFERENCE = var1; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@22822b73
                var3 = local_2_REFERENCE; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@22822b73
                __label__ = 11;
                continue $M_11_6;
        }
    },

    A1jlObjectgrow : function(thisRef) {
        var __label__ = null;
        var var2 = thisRef.A1jlObjectgrowINT(thisRef,(thisRef.elementCount + 1)); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@2835f9cf
        return var2;
    },

    A1jlObjectgrowINT : function(thisRef,minCapacity) {
        var __label__ = null;
        var var0 = thisRef.elementData; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@49219a7f
        var var1 = thisRef.INTnewCapacityINT(thisRef,minCapacity); // type is INT value type is INT
        var var2 = juArrays.A1jlObjectcopyOfA1jlObjectINT(var0,var1); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1f3c3a14
        thisRef.elementData = var2;
        return var2;
    },

    INTnewCapacityINT : function(thisRef,minCapacity) {
        var var4 = null; // type is INT # of inits = 1
        var var8 = null; // type is INT # of inits = 2
        var local_3_INT = null; // type is INT # of inits = 1
        var local_2_INT = null; // type is INT # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            local_2_INT = thisRef.elementData.data.length; // type is INT value type is INT
            var4 = local_2_INT; // type is INT value type is INT
            var var5 = thisRef.capacityIncrement; // type is INT value type is INT
            if ((var5 <= 0)) {
                __label__ = 21;
                break $S_0;
            }
            __label__ = 14;
            }
        $M_14_21 : for(;;) switch (__label__) {
            case 21 :
            // NORMAL
                var8 = local_2_INT; // type is INT value type is INT
                break $M_14_21;
            case 14 :
            // NORMAL
                var8 = thisRef.capacityIncrement; // type is INT value type is INT
                break $M_14_21;
        }
        $S_22 : {
        // NORMAL
            local_3_INT = (var4 + var8); // type is INT value type is INT
            var var13 = (local_3_INT - minCapacity); // type is INT value type is INT
            if ((var13 > 0)) {
                __label__ = 44;
                break $S_22;
            }
            __label__ = 30;
            }
        for(;;) switch (__label__) {
            case 44 :
            // NORMAL
                $S_44 : {
                // NORMAL
                    var var15 = (local_3_INT - 2147483639); // type is INT value type is INT
                    if ((var15 > 0)) {
                        __label__ = 55;
                        break $S_44;
                    }
                    __label__ = 51;
                    }
                for(;;) switch (__label__) {
                    case 51 :
                    // NORMAL
                        var var18 = local_3_INT; // type is INT value type is INT
                        return var18;
                    case 55 :
                    // NORMAL
                        var var16 = juVector.INThugeCapacityINT(minCapacity); // type is INT value type is INT
                        var var18 = var16; // type is INT value type is INT
                        return var18;
                }
            case 30 :
            // NORMAL
                $S_30 : {
                // NORMAL
                    if ((minCapacity >= 0)) {
                        return minCapacity;
                    }
                    }
                var var19 = new jlOutOfMemoryError.Create(); // type is REFERENCE value type is REFERENCE
                jlOutOfMemoryError.VOIDinit(var19);
                throw var19;
        }
    },

    INThugeCapacityINT : function(minCapacity) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            if ((minCapacity >= 0)) {
                __label__ = 12;
                break $S_0;
            }
            __label__ = 4;
            }
        for(;;) switch (__label__) {
            case 4 :
            // NORMAL
                var var0 = new jlOutOfMemoryError.Create(); // type is REFERENCE value type is REFERENCE
                jlOutOfMemoryError.VOIDinit(var0);
                throw var0;
            case 12 :
            // NORMAL
                $S_12 : {
                // NORMAL
                    if ((minCapacity <= 2147483639)) {
                        __label__ = 23;
                        break $S_12;
                    }
                    __label__ = 18;
                    }
                for(;;) switch (__label__) {
                    case 18 :
                    // NORMAL
                        var var1 = 2147483647; // type is INT value type is INT
                        return var1;
                    case 23 :
                    // NORMAL
                        var var1 = 2147483639; // type is INT value type is INT
                        return var1;
                }
        }
    },

    INTsize : function(thisRef) {
        var __label__ = null;
        return thisRef.elementCount;
    },

    jlObjectelementAtINT : function(thisRef,index) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.elementCount; // type is INT value type is INT
            if ((index < var0)) {
                __label__ = 42;
                break $S_0;
            }
            __label__ = 8;
            }
        for(;;) switch (__label__) {
            case 8 :
            // NORMAL
                var var2 = new jlArrayIndexOutOfBoundsException.Create(); // type is REFERENCE value type is REFERENCE
                var var3 = new jlStringBuilder.Create(); // type is REFERENCE value type is REFERENCE
                jlStringBuilder.VOIDinit(var3);
                var var4 = var3.jlStringBuilderappendINT(var3,index); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@57455ccd
                var var5 = var4.jlStringBuilderappendjlString(var4,bytecoder.stringpool[91]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@7995100c
                var var7 = var5.jlStringBuilderappendINT(var5,thisRef.elementCount); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@206f6931
                var var8 = var7.jlStringtoString(var7); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@382c4fe5
                jlArrayIndexOutOfBoundsException.VOIDinitjlString(var2,var8);
                throw var2;
            case 42 :
            // NORMAL
                var var1 = thisRef.jlObjectelementDataINT(thisRef,index); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@14b6a2cb
                return var1;
        }
    },

    jlObjectelementDataINT : function(thisRef,index) {
        var __label__ = null;
        var var1 = thisRef.elementData.data[index]; // type is REFERENCE value type is REFERENCE
        return var1;
    },

    VOIDremoveElementAtINT : function(thisRef,index) {
        var local_2_INT = null; // type is INT # of inits = 1
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.elementCount; // type is INT value type is INT
            if ((index < var0)) {
                __label__ = 42;
                break $S_0;
            }
            __label__ = 8;
            }
        for(;;) switch (__label__) {
            case 42 :
            // NORMAL
                $S_42 : {
                // NORMAL
                    if ((index >= 0)) {
                        __label__ = 55;
                        break $S_42;
                    }
                    __label__ = 46;
                    }
                for(;;) switch (__label__) {
                    case 55 :
                    // NORMAL
                        $S_55 : {
                        // NORMAL
                            local_2_INT = ((thisRef.elementCount - index) - 1); // type is INT value type is INT
                            var var6 = local_2_INT; // type is INT value type is INT
                            if ((var6 <= 0)) {
                                __label__ = 84;
                                break $S_55;
                            }
                            __label__ = 68;
                            }
                        $M_84_68 : for(;;) switch (__label__) {
                            case 68 :
                            // NORMAL
                                jlSystem.VOIDarraycopyjlObjectINTjlObjectINTINT(thisRef.elementData,(index + 1),thisRef.elementData,index,local_2_INT);
                                __label__ = 84;
                                continue $M_84_68;
                            case 84 :
                            // NORMAL
                                var var12 = (thisRef.modCount + 1); // type is INT value type is INT
                                thisRef.modCount = var12;
                                var var14 = (thisRef.elementCount - 1); // type is INT value type is INT
                                thisRef.elementCount = var14;
                                var var15 = thisRef.elementData; // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$1@1ff5d49d
                                var var16 = thisRef.elementCount; // type is INT value type is INT
                                var15.data[var16] = null;
                                return;
                        }
                    case 46 :
                    // NORMAL
                        var var24 = new jlArrayIndexOutOfBoundsException.Create(); // type is REFERENCE value type is REFERENCE
                        jlArrayIndexOutOfBoundsException.VOIDinitINT(var24,index);
                        throw var24;
                }
            case 8 :
            // NORMAL
                var var17 = new jlArrayIndexOutOfBoundsException.Create(); // type is REFERENCE value type is REFERENCE
                var var18 = new jlStringBuilder.Create(); // type is REFERENCE value type is REFERENCE
                jlStringBuilder.VOIDinit(var18);
                var var19 = var18.jlStringBuilderappendINT(var18,index); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@4e0f84df
                var var20 = var19.jlStringBuilderappendjlString(var19,bytecoder.stringpool[91]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@73921c2a
                var var22 = var20.jlStringBuilderappendINT(var20,thisRef.elementCount); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2d794b76
                var var23 = var22.jlStringtoString(var22); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@1c993378
                jlArrayIndexOutOfBoundsException.VOIDinitjlString(var17,var23);
                throw var17;
        }
    },

    BOOLEANisEmpty : function(thisRef) {
        var __label__ = null;
        $S_0 : {
        // NORMAL
            var var0 = thisRef.elementCount; // type is INT value type is INT
            if ((var0 != 0)) {
                __label__ = 11;
                break $S_0;
            }
            __label__ = 7;
            }
        for(;;) switch (__label__) {
            case 11 :
            // NORMAL
                var var1 = 0; // type is INT value type is INT
                return var1;
            case 7 :
            // NORMAL
                var var1 = 1; // type is INT value type is INT
                return var1;
        }
    },

    classInitCheck : function() {
        if (!juVector.__initialized) {
            juVector.__initialized = true;
            var thePrototype = juVector.Create.prototype;
            thePrototype.instanceOf = juVector.instanceOf;
            thePrototype.ClassgetClass = juVector.ClassgetClass;
            thePrototype.BOOLEANisEmpty = juVector.BOOLEANisEmpty;
            thePrototype.VOIDremoveElementAtINT = juVector.VOIDremoveElementAtINT;
            thePrototype.jlObjectelementDataINT = juVector.jlObjectelementDataINT;
            thePrototype.jlObjectelementAtINT = juVector.jlObjectelementAtINT;
            thePrototype.INTsize = juVector.INTsize;
            thePrototype.INTnewCapacityINT = juVector.INTnewCapacityINT;
            thePrototype.A1jlObjectgrowINT = juVector.A1jlObjectgrowINT;
            thePrototype.A1jlObjectgrow = juVector.A1jlObjectgrow;
            thePrototype.VOIDaddjlObjectA1jlObjectINT = juVector.VOIDaddjlObjectA1jlObjectINT;
            thePrototype.VOIDaddElementjlObject = juVector.VOIDaddElementjlObject;
            thePrototype.INTindexOfjlObject = juAbstractList.INTindexOfjlObject;
            thePrototype.jlStringoutOfBoundsMsgINT = juAbstractList.jlStringoutOfBoundsMsgINT;
            thePrototype.VOIDrangeCheckForAddINT = juAbstractList.VOIDrangeCheckForAddINT;
            thePrototype.juListIteratorlistIteratorINT = juAbstractList.juListIteratorlistIteratorINT;
            thePrototype.juListIteratorlistIterator = juAbstractList.juListIteratorlistIterator;
            thePrototype.BOOLEANequalsjlObject = juAbstractList.BOOLEANequalsjlObject;
            thePrototype.juIteratoriterator = juAbstractList.juIteratoriterator;
            thePrototype.INThashCode = juAbstractList.INThashCode;
            thePrototype.BOOLEANcontainsjlObject = juAbstractCollection.BOOLEANcontainsjlObject;
            thePrototype.BOOLEANcontainsAlljuCollection = juAbstractCollection.BOOLEANcontainsAlljuCollection;
            thePrototype.A1jlObjecttoArrayA1jlObject = juAbstractCollection.A1jlObjecttoArrayA1jlObject;
            thePrototype.jlStringtoString = juAbstractCollection.jlStringtoString;
            juAbstractList.classInitCheck();
            jlObject.classInitCheck();
            juRandomAccess.classInitCheck();
            juList.classInitCheck();
            jlIterable.classInitCheck();
            jlCloneable.classInitCheck();
            jiSerializable.classInitCheck();
            juAbstractCollection.classInitCheck();
            juCollection.classInitCheck();
        }
    },

};

var juEmptyStackException = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 262,
    __implementedTypes : [1,182,64,183,262,2],

    Create : function() {
    },

    instanceOf : function(aType) {
        return juEmptyStackException.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return juEmptyStackException;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinit : function(thisRef) {
        var __label__ = null;
        jlRuntimeException.VOIDinit(thisRef);
        return;
    },

    classInitCheck : function() {
        if (!juEmptyStackException.__initialized) {
            juEmptyStackException.__initialized = true;
            var thePrototype = juEmptyStackException.Create.prototype;
            thePrototype.instanceOf = juEmptyStackException.instanceOf;
            thePrototype.ClassgetClass = juEmptyStackException.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlRuntimeException.classInitCheck();
            jlObject.classInitCheck();
            jlThrowable.classInitCheck();
            jlException.classInitCheck();
            jiSerializable.classInitCheck();
        }
    },

};

var jlArrayIndexOutOfBoundsException = {
    __initialized : false,
    __staticCallSites : [],
    __typeId : 263,
    __implementedTypes : [1,182,64,183,263,227,2],

    Create : function() {
    },

    instanceOf : function(aType) {
        return jlArrayIndexOutOfBoundsException.__implementedTypes.includes(aType.__typeId);
    },

    ClassgetClass : function() {
        return jlArrayIndexOutOfBoundsException;
    },

    BOOLEANdesiredAssertionStatus : function() {
        return false;
    },

    A1jlObjectgetEnumConstants : function(aClazz) {
        return aClazz.$VALUES;
    },

    VOIDinitjlString : function(thisRef,s) {
        var __label__ = null;
        jlIndexOutOfBoundsException.VOIDinitjlString(thisRef,s);
        return;
    },

    VOIDinitINT : function(thisRef,index) {
        var __label__ = null;
        var var0 = new jlStringBuilder.Create(); // type is REFERENCE value type is REFERENCE
        jlStringBuilder.VOIDinit(var0);
        var var1 = var0.jlStringBuilderappendjlString(var0,bytecoder.stringpool[92]); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@60f364a1
        var var2 = var1.jlStringBuilderappendINT(var1,index); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@2e85cacc
        var var3 = var2.jlStringtoString(var2); // type is REFERENCE value type is de.mirkosertic.bytecoder.ssa.TypeRef$2@d62b7b5
        jlIndexOutOfBoundsException.VOIDinitjlString(thisRef,var3);
        return;
    },

    classInitCheck : function() {
        if (!jlArrayIndexOutOfBoundsException.__initialized) {
            jlArrayIndexOutOfBoundsException.__initialized = true;
            var thePrototype = jlArrayIndexOutOfBoundsException.Create.prototype;
            thePrototype.instanceOf = jlArrayIndexOutOfBoundsException.instanceOf;
            thePrototype.ClassgetClass = jlArrayIndexOutOfBoundsException.ClassgetClass;
            thePrototype.jlStringtoString = jlObject.jlStringtoString;
            thePrototype.BOOLEANequalsjlObject = jlObject.BOOLEANequalsjlObject;
            thePrototype.INThashCode = jlObject.INThashCode;
            jlIndexOutOfBoundsException.classInitCheck();
            jlObject.classInitCheck();
            jlRuntimeException.classInitCheck();
            jlThrowable.classInitCheck();
            jlException.classInitCheck();
            jiSerializable.classInitCheck();
        }
    },

};


bytecoder.bootstrap = function() {
    bytecoder.stringpool[0] = bytecoder.newString([]);
    bytecoder.stringpool[1] = bytecoder.newString([98,101,110,99,104,109,97,114,107,45,99,97,110,118,97,115]);
    bytecoder.stringpool[2] = bytecoder.newString([50,100]);
    bytecoder.stringpool[3] = bytecoder.newString([98,117,116,116,111,110]);
    bytecoder.stringpool[4] = bytecoder.newString([99,108,105,99,107]);
    bytecoder.stringpool[5] = bytecoder.newString([119,104,105,116,101]);
    bytecoder.stringpool[6] = bytecoder.newString([98,108,97,99,107]);
    bytecoder.stringpool[7] = bytecoder.newString([110,117,108,108]);
    bytecoder.stringpool[8] = bytecoder.newString([40]);
    bytecoder.stringpool[9] = bytecoder.newString([44]);
    bytecoder.stringpool[10] = bytecoder.newString([41]);
    bytecoder.stringpool[11] = bytecoder.newString([65,114,114,97,121,32,110,111,116,32,98,117,105,108,116,32,119,105,116,104,32,99,111,114,114,101,99,116,32,108,101,110,103,116,104]);
    bytecoder.stringpool[12] = bytecoder.newString([123,125]);
    bytecoder.stringpool[13] = bytecoder.newString([40,116,104,105,115,32,77,97,112,41]);
    bytecoder.stringpool[14] = bytecoder.newString([69,110,100,32,111,102,32,115,116,97,99,107,32,114,101,97,99,104,101,100,44,32,116,104,101,114,101,32,105,115,32,112,114,111,98,97,98,108,121,32,97,32,108,101,97,107,32,115,111,109,101,119,104,101,114,101]);
    bytecoder.stringpool[15] = bytecoder.newString([66,101,103,105,110,110,105,110,103,32,111,102,32,115,116,97,99,107,32,114,101,97,99,104,101,100,44,32,112,117,115,104,47,112,111,112,115,32,97,114,101,32,117,110,109,97,116,99,104,101,100]);
    bytecoder.stringpool[16] = bytecoder.newString([67,73,82,67,76,69]);
    bytecoder.stringpool[17] = bytecoder.newString([69,68,71,69]);
    bytecoder.stringpool[18] = bytecoder.newString([80,79,76,89,71,79,78]);
    bytecoder.stringpool[19] = bytecoder.newString([67,72,65,73,78]);
    bytecoder.stringpool[20] = bytecoder.newString([88,70,111,114,109,58,10]);
    bytecoder.stringpool[21] = bytecoder.newString([80,111,115,105,116,105,111,110,58,32]);
    bytecoder.stringpool[22] = bytecoder.newString([10]);
    bytecoder.stringpool[23] = bytecoder.newString([82,58,32,10]);
    bytecoder.stringpool[24] = bytecoder.newString([82,111,116,40,115,58]);
    bytecoder.stringpool[25] = bytecoder.newString([44,32,99,58]);
    bytecoder.stringpool[26] = bytecoder.newString([83,119,101,101,112,58,10,108,111,99,97,108,67,101,110,116,101,114,58,32]);
    bytecoder.stringpool[27] = bytecoder.newString([99,48,58,32]);
    bytecoder.stringpool[28] = bytecoder.newString([44,32,99,58,32]);
    bytecoder.stringpool[29] = bytecoder.newString([97,48,58,32]);
    bytecoder.stringpool[30] = bytecoder.newString([44,32,97,58,32]);
    bytecoder.stringpool[31] = bytecoder.newString([65,65,66,66,91]);
    bytecoder.stringpool[32] = bytecoder.newString([32,46,32]);
    bytecoder.stringpool[33] = bytecoder.newString([93]);
    bytecoder.stringpool[34] = bytecoder.newString([65,114,114,97,121,32,110,111,116,32,98,117,105,108,116,32,111,102,32,99,111,114,114,101,99,116,32,108,101,110,103,116,104]);
    bytecoder.stringpool[35] = bytecoder.newString([91]);
    bytecoder.stringpool[36] = bytecoder.newString([93,10]);
    bytecoder.stringpool[37] = bytecoder.newString([83,84,65,84,73,67]);
    bytecoder.stringpool[38] = bytecoder.newString([75,73,78,69,77,65,84,73,67]);
    bytecoder.stringpool[39] = bytecoder.newString([68,89,78,65,77,73,67]);
    bytecoder.stringpool[40] = bytecoder.newString([61]);
    bytecoder.stringpool[41] = bytecoder.newString([85,78,75,78,79,87,78]);
    bytecoder.stringpool[42] = bytecoder.newString([82,69,86,79,76,85,84,69]);
    bytecoder.stringpool[43] = bytecoder.newString([80,82,73,83,77,65,84,73,67]);
    bytecoder.stringpool[44] = bytecoder.newString([68,73,83,84,65,78,67,69]);
    bytecoder.stringpool[45] = bytecoder.newString([80,85,76,76,69,89]);
    bytecoder.stringpool[46] = bytecoder.newString([77,79,85,83,69]);
    bytecoder.stringpool[47] = bytecoder.newString([71,69,65,82]);
    bytecoder.stringpool[48] = bytecoder.newString([87,72,69,69,76]);
    bytecoder.stringpool[49] = bytecoder.newString([87,69,76,68]);
    bytecoder.stringpool[50] = bytecoder.newString([70,82,73,67,84,73,79,78]);
    bytecoder.stringpool[51] = bytecoder.newString([82,79,80,69]);
    bytecoder.stringpool[52] = bytecoder.newString([67,79,78,83,84,65,78,84,95,86,79,76,85,77,69]);
    bytecoder.stringpool[53] = bytecoder.newString([73,78,65,67,84,73,86,69]);
    bytecoder.stringpool[54] = bytecoder.newString([65,84,95,76,79,87,69,82]);
    bytecoder.stringpool[55] = bytecoder.newString([65,84,95,85,80,80,69,82]);
    bytecoder.stringpool[56] = bytecoder.newString([69,81,85,65,76]);
    bytecoder.stringpool[57] = bytecoder.newString([73,110,99,111,114,114,101,99,116,32,106,111,105,110,116,32,100,101,102,105,110,105,116,105,111,110,46,32,32,74,111,105,110,116,115,32,104,97,118,101,32,116,111,32,99,111,114,114,101,115,112,111,110,100,32,116,111,32,116,104,101,32,98,111,100,105,101,115]);
    bytecoder.stringpool[58] = bytecoder.newString([89,111,117,32,99,97,110,110,111,116,32,99,114,101,97,116,101,32,97,32,99,111,110,115,116,97,110,116,32,118,111,108,117,109,101,32,106,111,105,110,116,32,119,105,116,104,32,108,101,115,115,32,116,104,97,110,32,116,104,114,101,101,32,98,111,100,105,101,115,46]);
    bytecoder.stringpool[59] = bytecoder.newString([73,110,100,101,120,58,32]);
    bytecoder.stringpool[60] = bytecoder.newString([44,32,83,105,122,101,58,32]);
    bytecoder.stringpool[61] = bytecoder.newString([91,93]);
    bytecoder.stringpool[62] = bytecoder.newString([40,116,104,105,115,32,67,111,108,108,101,99,116,105,111,110,41]);
    bytecoder.stringpool[63] = bytecoder.newString([82,101,113,117,105,114,101,100,32,97,114,114,97,121,32,115,105,122,101,32,116,111,111,32,108,97,114,103,101]);
    bytecoder.stringpool[64] = bytecoder.newString([100,105,115,97,98,108,101,100]);
    bytecoder.stringpool[65] = bytecoder.newString([116,114,117,101]);
    bytecoder.stringpool[66] = bytecoder.newString([78,111,32,106,97,118,97,46,117,116,105,108,46,79,98,106,101,99,116,115,32,105,110,115,116,97,110,99,101,115,32,102,111,114,32,121,111,117,33]);
    bytecoder.stringpool[67] = bytecoder.newString([67,73,82,67,76,69,83]);
    bytecoder.stringpool[68] = bytecoder.newString([70,65,67,69,95,65]);
    bytecoder.stringpool[69] = bytecoder.newString([70,65,67,69,95,66]);
    bytecoder.stringpool[70] = bytecoder.newString([86,101,114,116,105,99,101,115,32,111,102,32,99,104,97,105,110,32,115,104,97,112,101,32,97,114,101,32,116,111,111,32,99,108,111,115,101,32,116,111,103,101,116,104,101,114]);
    bytecoder.stringpool[71] = bytecoder.newString([70,65,73,76,69,68]);
    bytecoder.stringpool[72] = bytecoder.newString([79,86,69,82,76,65,80,80,69,68]);
    bytecoder.stringpool[73] = bytecoder.newString([84,79,85,67,72,73,78,71]);
    bytecoder.stringpool[74] = bytecoder.newString([83,69,80,65,82,65,84,69,68]);
    bytecoder.stringpool[75] = bytecoder.newString([80,79,73,78,84,83]);
    bytecoder.stringpool[76] = bytecoder.newString([86,69,82,84,69,88]);
    bytecoder.stringpool[77] = bytecoder.newString([70,65,67,69]);
    bytecoder.stringpool[78] = bytecoder.newString([69,68,71,69,95,65]);
    bytecoder.stringpool[79] = bytecoder.newString([69,68,71,69,95,66]);
    bytecoder.stringpool[80] = bytecoder.newString([99,104,101,99,107,73,110,100,101,120]);
    bytecoder.stringpool[81] = bytecoder.newString([82,97,110,103,101,32,99,104,101,99,107,32,102,97,105,108,101,100,58,32,37,115]);
    bytecoder.stringpool[82] = bytecoder.newString([99,104,101,99,107,70,114,111,109,73,110,100,101,120,83,105,122,101]);
    bytecoder.stringpool[83] = bytecoder.newString([99,104,101,99,107,70,114,111,109,84,111,73,110,100,101,120]);
    bytecoder.stringpool[84] = bytecoder.newString([82,97,110,103,101,32,91,37,100,44,32,37,100,41,32,111,117,116,32,111,102,32,98,111,117,110,100,115,32,102,111,114,32,108,101,110,103,116,104,32,37,100]);
    bytecoder.stringpool[85] = bytecoder.newString([82,97,110,103,101,32,91,37,100,44,32,37,60,100,32,43,32,37,100,41,32,111,117,116,32,111,102,32,98,111,117,110,100,115,32,102,111,114,32,108,101,110,103,116,104,32,37,100]);
    bytecoder.stringpool[86] = bytecoder.newString([82,97,110,103,101,32,99,104,101,99,107,32,102,97,105,108,101,100,58,32,37,115,32,37,115]);
    bytecoder.stringpool[87] = bytecoder.newString([73,110,100,101,120,32,37,100,32,111,117,116,32,111,102,32,98,111,117,110,100,115,32,102,111,114,32,108,101,110,103,116,104,32,37,100]);
    bytecoder.stringpool[88] = bytecoder.newString([82,97,110,103,101,32,99,104,101,99,107,32,102,97,105,108,101,100]);
    bytecoder.stringpool[89] = bytecoder.newString([32,83,105,122,101,58,32]);
    bytecoder.stringpool[90] = bytecoder.newString([73,108,108,101,103,97,108,32,67,97,112,97,99,105,116,121,58,32]);
    bytecoder.stringpool[91] = bytecoder.newString([32,62,61,32]);
    bytecoder.stringpool[92] = bytecoder.newString([65,114,114,97,121,32,105,110,100,101,120,32,111,117,116,32,111,102,32,114,97,110,103,101,58,32]);
    jlClass.classInitCheck();
    jlObject.classInitCheck();
    dmbcGlobals.classInitCheck();
    bytecoder.exports.summonCallback = dmbcGlobals.VOIDsummonCallbackdmbaCallbackdmbaOpaqueReferenceType;
    dmbcVM$ImplementingCallsite.classInitCheck();
    jliConstantCallSite.classInitCheck();
    jliCallSite.classInitCheck();
    dmbiJBox2DSimulation.classInitCheck();
    bytecoder.exports.main = dmbiJBox2DSimulation.VOIDmainA1jlString;
    jlString.classInitCheck();
    dmbiJBox2DSimulation$Scene.classInitCheck();
    ojdWorld.classInitCheck();
    jlInteger.classInitCheck();
    jlNumber.classInitCheck();
    ojcVec2.classInitCheck();
    ojpnDefaultWorldPool.classInitCheck();
    juHashMap.classInitCheck();
    juAbstractMap.classInitCheck();
    ojpnDefaultWorldPool$1.classInitCheck();
    ojpnMutableStack.classInitCheck();
    ojcSettings.classInitCheck();
    jlMath.classInitCheck();
    jlrArray.classInitCheck();
    jlSystem.classInitCheck();
    jiPrintStream.classInitCheck();
    jiFilterOutputStream.classInitCheck();
    jiOutputStream.classInitCheck();
    dmbcjlTSystem$1.classInitCheck();
    ojpnDefaultWorldPool$2.classInitCheck();
    ojpnDefaultWorldPool$3.classInitCheck();
    ojpnDefaultWorldPool$4.classInitCheck();
    ojpnDefaultWorldPool$5.classInitCheck();
    ojpnDefaultWorldPool$6.classInitCheck();
    ojpnDefaultWorldPool$7.classInitCheck();
    ojpnDefaultWorldPool$8.classInitCheck();
    ojpnOrderedStack.classInitCheck();
    ojpnDefaultWorldPool$9.classInitCheck();
    ojpnDefaultWorldPool$10.classInitCheck();
    ojpnDefaultWorldPool$11.classInitCheck();
    ojpnDefaultWorldPool$12.classInitCheck();
    ojpnDefaultWorldPool$13.classInitCheck();
    ojcDistance.classInitCheck();
    ojcDistance$Simplex.classInitCheck();
    ojcDistance$1.classInitCheck();
    ojcsShapeType.classInitCheck();
    jlEnum.classInitCheck();
    jlNoSuchFieldError.classInitCheck();
    jlIncompatibleClassChangeError.classInitCheck();
    jlLinkageError.classInitCheck();
    jlError.classInitCheck();
    jlThrowable.classInitCheck();
    ojcDistance$SimplexVertex.classInitCheck();
    ojcCollision.classInitCheck();
    ojcDistanceInput.classInitCheck();
    ojcDistance$DistanceProxy.classInitCheck();
    ojcTransform.classInitCheck();
    ojcRot.classInitCheck();
    ojcDistance$SimplexCache.classInitCheck();
    ojcDistanceOutput.classInitCheck();
    ojcCollision$EdgeResults.classInitCheck();
    ojcCollision$1.classInitCheck();
    ojcCollision$ClipVertex.classInitCheck();
    ojcContactID.classInitCheck();
    ojcCollision$EPCollider.classInitCheck();
    ojcCollision$TempPolygon.classInitCheck();
    ojcCollision$ReferenceFace.classInitCheck();
    ojcCollision$EPAxis.classInitCheck();
    ojcTimeOfImpact.classInitCheck();
    ojcSeparationFunction.classInitCheck();
    ojcSweep.classInitCheck();
    ojcbDynamicTree.classInitCheck();
    ojcbDynamicTree$TreeNodeStack.classInitCheck();
    ojcbDynamicTreeNode.classInitCheck();
    ojcAABB.classInitCheck();
    ojcRayCastInput.classInitCheck();
    ojcColor3f.classInitCheck();
    ojdcContactRegister.classInitCheck();
    ojdTimeStep.classInitCheck();
    ojcTimer.classInitCheck();
    ojpaVec2Array.classInitCheck();
    ojdWorldQueryWrapper.classInitCheck();
    ojdWorldRayCastWrapper.classInitCheck();
    ojcRayCastOutput.classInitCheck();
    ojdIsland.classInitCheck();
    ojdcContactSolver.classInitCheck();
    ojcWorldManifold.classInitCheck();
    ojdcPositionSolverManifold.classInitCheck();
    ojdcContactPositionConstraint.classInitCheck();
    ojdcContactVelocityConstraint.classInitCheck();
    ojdcContactVelocityConstraint$VelocityConstraintPoint.classInitCheck();
    ojcMat22.classInitCheck();
    ojdSolverData.classInitCheck();
    ojdcContactSolver$ContactSolverDef.classInitCheck();
    ojcContactImpulse.classInitCheck();
    ojdBody.classInitCheck();
    ojdProfile.classInitCheck();
    ojcTimeOfImpact$TOIInput.classInitCheck();
    ojcTimeOfImpact$TOIOutput.classInitCheck();
    ojcDebugDraw.classInitCheck();
    ojdjJoint.classInitCheck();
    ojdContactManager.classInitCheck();
    ojdcContact.classInitCheck();
    ojcContactFilter.classInitCheck();
    ojcbBroadPhase.classInitCheck();
    ojcbPair.classInitCheck();
    ojdBodyDef.classInitCheck();
    ojdBodyType.classInitCheck();
    jlAssertionError.classInitCheck();
    ojdFixtureDef.classInitCheck();
    ojcsShape.classInitCheck();
    ojdFilter.classInitCheck();
    ojcsMassData.classInitCheck();
    jlFloat.classInitCheck();
    ojcMathUtils.classInitCheck();
    ojcPlatformMathUtils.classInitCheck();
    jlStrictMath.classInitCheck();
    ojdjJointEdge.classInitCheck();
    ojdcContactEdge.classInitCheck();
    ojdFixture.classInitCheck();
    ojcsCircleShape.classInitCheck();
    ojdFixtureProxy.classInitCheck();
    ojcsPolygonShape.classInitCheck();
    ojpaIntArray.classInitCheck();
    juHashMap$Node.classInitCheck();
    juHashMap$TreeNode.classInitCheck();
    juLinkedHashMap$Entry.classInitCheck();
    ojdjRevoluteJointDef.classInitCheck();
    ojdjJointDef.classInitCheck();
    ojdjJointType.classInitCheck();
    ojdjJoint$1.classInitCheck();
    ojdjMouseJoint.classInitCheck();
    ojdjMouseJointDef.classInitCheck();
    ojdjDistanceJoint.classInitCheck();
    ojdjDistanceJointDef.classInitCheck();
    ojdjPrismaticJoint.classInitCheck();
    ojdjPrismaticJointDef.classInitCheck();
    ojcVec3.classInitCheck();
    ojdjLimitState.classInitCheck();
    ojcMat33.classInitCheck();
    ojdjRevoluteJoint.classInitCheck();
    ojdjWeldJoint.classInitCheck();
    ojdjWeldJointDef.classInitCheck();
    ojdjFrictionJoint.classInitCheck();
    ojdjFrictionJointDef.classInitCheck();
    ojdjWheelJoint.classInitCheck();
    ojdjWheelJointDef.classInitCheck();
    ojdjGearJoint.classInitCheck();
    ojdjGearJointDef.classInitCheck();
    ojdjPulleyJoint.classInitCheck();
    ojdjPulleyJointDef.classInitCheck();
    ojdjConstantVolumeJoint.classInitCheck();
    ojdjConstantVolumeJointDef.classInitCheck();
    juArrayList.classInitCheck();
    juAbstractList.classInitCheck();
    juAbstractCollection.classInitCheck();
    jlIllegalArgumentException.classInitCheck();
    jlRuntimeException.classInitCheck();
    jlException.classInitCheck();
    juArrays.classInitCheck();
    ojdjRopeJoint.classInitCheck();
    ojdjRopeJointDef.classInitCheck();
    dmbawWindow.classInitCheck();
    dmbiJBox2DSimulation$1.classInitCheck();
    dmbiJBox2DSimulation$2.classInitCheck();
    jlStringBuilder.classInitCheck();
    jlAbstractStringBuilder.classInitCheck();
    jtDecimalFormatSymbols.classInitCheck();
    dmbcjlTMath$FloatExponents.classInitCheck();
    jlClassCastException.classInitCheck();
    jlNullPointerException.classInitCheck();
    jlLong.classInitCheck();
    jlDouble.classInitCheck();
    juHashMap$EntrySet.classInitCheck();
    juAbstractSet.classInitCheck();
    jlUnsupportedOperationException.classInitCheck();
    ojdcPolygonContact.classInitCheck();
    ojcManifold.classInitCheck();
    ojcManifoldPoint.classInitCheck();
    ojdcCircleContact.classInitCheck();
    ojdcPolygonAndCircleContact.classInitCheck();
    ojdcEdgeAndCircleContact.classInitCheck();
    ojdcEdgeAndPolygonContact.classInitCheck();
    ojdcChainAndCircleContact.classInitCheck();
    ojcsEdgeShape.classInitCheck();
    ojdcChainAndPolygonContact.classInitCheck();
    juObjects.classInitCheck();
    juConcurrentModificationException.classInitCheck();
    juArrayList$Itr.classInitCheck();
    juAbstractList$Itr.classInitCheck();
    jlIndexOutOfBoundsException.classInitCheck();
    juAbstractList$ListItr.classInitCheck();
    jlIllegalStateException.classInitCheck();
    jlOutOfMemoryError.classInitCheck();
    jlVirtualMachineError.classInitCheck();
    ojcManifold$ManifoldType.classInitCheck();
    ojcsChainShape.classInitCheck();
    ojdcVelocity.classInitCheck();
    ojdcPosition.classInitCheck();
    ojcWorldManifold$1.classInitCheck();
    ojdcPositionSolverManifold$1.classInitCheck();
    ojcTimeOfImpact$TOIOutputState.classInitCheck();
    ojcType.classInitCheck();
    ojcSeparationFunction$1.classInitCheck();
    juArrayList$ListItr.classInitCheck();
    juHashMap$EntryIterator.classInitCheck();
    juHashMap$HashIterator.classInitCheck();
    ojcContactID$Type.classInitCheck();
    ojcCollision$EPAxis$Type.classInitCheck();
    juNoSuchElementException.classInitCheck();
    jiuPreconditions.classInitCheck();
    juImmutableCollections.classInitCheck();
    juImmutableCollections$ListN.classInitCheck();
    juImmutableCollections$AbstractImmutableList.classInitCheck();
    juImmutableCollections$AbstractImmutableCollection.classInitCheck();
    juImmutableCollections$List12.classInitCheck();
    juImmutableCollections$ListItr.classInitCheck();
    dmbcExceptionManager.classInitCheck();
    juStack.classInitCheck();
    juVector.classInitCheck();
    juEmptyStackException.classInitCheck();
    jlArrayIndexOutOfBoundsException.classInitCheck();
}
