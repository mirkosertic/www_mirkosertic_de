{"version":3,"sources":["../../src/extras/cacheAsBitmap.js"],"names":["core","DisplayObject","_tempMatrix","Matrix","prototype","_cacheAsBitmap","_cacheData","CacheData","originalRenderWebGL","originalRenderCanvas","originalCalculateBounds","originalGetLocalBounds","originalUpdateTransform","originalHitTest","originalDestroy","originalMask","originalFilterArea","sprite","Object","defineProperties","cacheAsBitmap","get","set","value","data","renderWebGL","renderCanvas","updateTransform","_calculateBounds","getLocalBounds","destroy","originalContainsPoint","containsPoint","_mask","filterArea","_renderCachedWebGL","_renderCachedCanvas","_cacheAsBitmapDestroy","_destroyCachedDisplayObject","renderer","visible","worldAlpha","renderable","_initCachedDisplayObject","_transformID","_renderWebGL","cacheAlpha","alpha","currentRenderer","flush","bounds","clone","_filters","padding","pad","cachedRenderTarget","_activeRenderTarget","stack","filterManager","filterStack","renderTexture","RenderTexture","create","width","height","m","tx","x","ty","y","transform","worldTransform","identity","render","bindRenderTarget","displayObjectUpdateTransform","cachedSprite","Sprite","anchor","_bounds","_calculateCachedBounds","_getCachedLocalBounds","_parentID","bind","_initCachedDisplayObjectCanvas","context","copy","invert","_texture"],"mappings":"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","file":"cacheAsBitmap.js","sourcesContent":["import * as core from '../core';\n\nconst DisplayObject = core.DisplayObject;\nconst _tempMatrix = new core.Matrix();\n\nDisplayObject.prototype._cacheAsBitmap = false;\nDisplayObject.prototype._cacheData = false;\n\n// figured theres no point adding ALL the extra variables to prototype.\n// this model can hold the information needed. This can also be generated on demand as\n// most objects are not cached as bitmaps.\n/**\n * @class\n * @ignore\n */\nclass CacheData\n{\n    /**\n     *\n     */\n    constructor()\n    {\n        this.originalRenderWebGL = null;\n        this.originalRenderCanvas = null;\n        this.originalCalculateBounds = null;\n        this.originalGetLocalBounds = null;\n\n        this.originalUpdateTransform = null;\n        this.originalHitTest = null;\n        this.originalDestroy = null;\n        this.originalMask = null;\n        this.originalFilterArea = null;\n        this.sprite = null;\n    }\n}\n\nObject.defineProperties(DisplayObject.prototype, {\n    /**\n     * Set this to true if you want this display object to be cached as a bitmap.\n     * This basically takes a snap shot of the display object as it is at that moment. It can\n     * provide a performance benefit for complex static displayObjects.\n     * To remove simply set this property to 'false'\n     *\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     */\n    cacheAsBitmap: {\n        get()\n        {\n            return this._cacheAsBitmap;\n        },\n        set(value)\n        {\n            if (this._cacheAsBitmap === value)\n            {\n                return;\n            }\n\n            this._cacheAsBitmap = value;\n\n            let data;\n\n            if (value)\n            {\n                if (!this._cacheData)\n                {\n                    this._cacheData = new CacheData();\n                }\n\n                data = this._cacheData;\n\n                data.originalRenderWebGL = this.renderWebGL;\n                data.originalRenderCanvas = this.renderCanvas;\n\n                data.originalUpdateTransform = this.updateTransform;\n                data.originalCalculateBounds = this._calculateBounds;\n                data.originalGetLocalBounds = this.getLocalBounds;\n\n                data.originalDestroy = this.destroy;\n\n                data.originalContainsPoint = this.containsPoint;\n\n                data.originalMask = this._mask;\n                data.originalFilterArea = this.filterArea;\n\n                this.renderWebGL = this._renderCachedWebGL;\n                this.renderCanvas = this._renderCachedCanvas;\n\n                this.destroy = this._cacheAsBitmapDestroy;\n            }\n            else\n            {\n                data = this._cacheData;\n\n                if (data.sprite)\n                {\n                    this._destroyCachedDisplayObject();\n                }\n\n                this.renderWebGL = data.originalRenderWebGL;\n                this.renderCanvas = data.originalRenderCanvas;\n                this._calculateBounds = data.originalCalculateBounds;\n                this.getLocalBounds = data.originalGetLocalBounds;\n\n                this.destroy = data.originalDestroy;\n\n                this.updateTransform = data.originalUpdateTransform;\n                this.containsPoint = data.originalContainsPoint;\n\n                this._mask = data.originalMask;\n                this.filterArea = data.originalFilterArea;\n            }\n        },\n    },\n});\n\n/**\n * Renders a cached version of the sprite with WebGL\n *\n * @private\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.WebGLRenderer} renderer - the WebGL renderer\n */\nDisplayObject.prototype._renderCachedWebGL = function _renderCachedWebGL(renderer)\n{\n    if (!this.visible || this.worldAlpha <= 0 || !this.renderable)\n    {\n        return;\n    }\n\n    this._initCachedDisplayObject(renderer);\n\n    this._cacheData.sprite._transformID = -1;\n    this._cacheData.sprite.worldAlpha = this.worldAlpha;\n    this._cacheData.sprite._renderWebGL(renderer);\n};\n\n/**\n * Prepares the WebGL renderer to cache the sprite\n *\n * @private\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.WebGLRenderer} renderer - the WebGL renderer\n */\nDisplayObject.prototype._initCachedDisplayObject = function _initCachedDisplayObject(renderer)\n{\n    if (this._cacheData && this._cacheData.sprite)\n    {\n        return;\n    }\n\n    // make sure alpha is set to 1 otherwise it will get rendered as invisible!\n    const cacheAlpha = this.alpha;\n\n    this.alpha = 1;\n\n    // first we flush anything left in the renderer (otherwise it would get rendered to the cached texture)\n    renderer.currentRenderer.flush();\n    // this.filters= [];\n\n    // next we find the dimensions of the untransformed object\n    // this function also calls updatetransform on all its children as part of the measuring.\n    // This means we don't need to update the transform again in this function\n    // TODO pass an object to clone too? saves having to create a new one each time!\n    const bounds = this.getLocalBounds().clone();\n\n    // add some padding!\n    if (this._filters)\n    {\n        const padding = this._filters[0].padding;\n\n        bounds.pad(padding);\n    }\n\n    // for now we cache the current renderTarget that the webGL renderer is currently using.\n    // this could be more elegent..\n    const cachedRenderTarget = renderer._activeRenderTarget;\n    // We also store the filter stack - I will definitely look to change how this works a little later down the line.\n    const stack = renderer.filterManager.filterStack;\n\n    // this renderTexture will be used to store the cached DisplayObject\n\n    const renderTexture = core.RenderTexture.create(bounds.width | 0, bounds.height | 0);\n\n    // need to set //\n    const m = _tempMatrix;\n\n    m.tx = -bounds.x;\n    m.ty = -bounds.y;\n\n    // reset\n    this.transform.worldTransform.identity();\n\n    // set all properties to there original so we can render to a texture\n    this.renderWebGL = this._cacheData.originalRenderWebGL;\n\n    renderer.render(this, renderTexture, true, m, true);\n    // now restore the state be setting the new properties\n\n    renderer.bindRenderTarget(cachedRenderTarget);\n\n    renderer.filterManager.filterStack = stack;\n\n    this.renderWebGL = this._renderCachedWebGL;\n    this.updateTransform = this.displayObjectUpdateTransform;\n\n    this._mask = null;\n    this.filterArea = null;\n\n    // create our cached sprite\n    const cachedSprite = new core.Sprite(renderTexture);\n\n    cachedSprite.transform.worldTransform = this.transform.worldTransform;\n    cachedSprite.anchor.x = -(bounds.x / bounds.width);\n    cachedSprite.anchor.y = -(bounds.y / bounds.height);\n    cachedSprite.alpha = cacheAlpha;\n    cachedSprite._bounds = this._bounds;\n\n    // easy bounds..\n    this._calculateBounds = this._calculateCachedBounds;\n    this.getLocalBounds = this._getCachedLocalBounds;\n\n    this._cacheData.sprite = cachedSprite;\n\n    this.transform._parentID = -1;\n    // restore the transform of the cached sprite to avoid the nasty flicker..\n    this.updateTransform();\n\n    // map the hit test..\n    this.containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\n\n/**\n * Renders a cached version of the sprite with canvas\n *\n * @private\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.WebGLRenderer} renderer - the WebGL renderer\n */\nDisplayObject.prototype._renderCachedCanvas = function _renderCachedCanvas(renderer)\n{\n    if (!this.visible || this.worldAlpha <= 0 || !this.renderable)\n    {\n        return;\n    }\n\n    this._initCachedDisplayObjectCanvas(renderer);\n\n    this._cacheData.sprite.worldAlpha = this.worldAlpha;\n\n    this._cacheData.sprite.renderCanvas(renderer);\n};\n\n// TODO this can be the same as the webGL verison.. will need to do a little tweaking first though..\n/**\n * Prepares the Canvas renderer to cache the sprite\n *\n * @private\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.WebGLRenderer} renderer - the WebGL renderer\n */\nDisplayObject.prototype._initCachedDisplayObjectCanvas = function _initCachedDisplayObjectCanvas(renderer)\n{\n    if (this._cacheData && this._cacheData.sprite)\n    {\n        return;\n    }\n\n    // get bounds actually transforms the object for us already!\n    const bounds = this.getLocalBounds();\n\n    const cacheAlpha = this.alpha;\n\n    this.alpha = 1;\n\n    const cachedRenderTarget = renderer.context;\n\n    const renderTexture = core.RenderTexture.create(bounds.width | 0, bounds.height | 0);\n\n    // need to set //\n    const m = _tempMatrix;\n\n    this.transform.worldTransform.copy(m);\n    m.invert();\n\n    m.tx -= bounds.x;\n    m.ty -= bounds.y;\n\n    // m.append(this.transform.worldTransform.)\n     // set all properties to there original so we can render to a texture\n    this.renderCanvas = this._cacheData.originalRenderCanvas;\n\n    // renderTexture.render(this, m, true);\n    renderer.render(this, renderTexture, true, m, false);\n\n    // now restore the state be setting the new properties\n    renderer.context = cachedRenderTarget;\n\n    this.renderCanvas = this._renderCachedCanvas;\n    this._calculateBounds = this._calculateCachedBounds;\n\n    this._mask = null;\n    this.filterArea = null;\n\n    // create our cached sprite\n    const cachedSprite = new core.Sprite(renderTexture);\n\n    cachedSprite.transform.worldTransform = this.transform.worldTransform;\n    cachedSprite.anchor.x = -(bounds.x / bounds.width);\n    cachedSprite.anchor.y = -(bounds.y / bounds.height);\n    cachedSprite._bounds = this._bounds;\n    cachedSprite.alpha = cacheAlpha;\n\n    this.updateTransform();\n    this.updateTransform = this.displayObjectUpdateTransform;\n\n    this._cacheData.sprite = cachedSprite;\n\n    this.containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\n\n/**\n * Calculates the bounds of the cached sprite\n *\n * @private\n */\nDisplayObject.prototype._calculateCachedBounds = function _calculateCachedBounds()\n{\n    this._cacheData.sprite._calculateBounds();\n};\n\n/**\n * Gets the bounds of the cached sprite.\n *\n * @private\n * @return {Rectangle} The local bounds.\n */\nDisplayObject.prototype._getCachedLocalBounds = function _getCachedLocalBounds()\n{\n    return this._cacheData.sprite.getLocalBounds();\n};\n\n/**\n * Destroys the cached sprite.\n *\n * @private\n */\nDisplayObject.prototype._destroyCachedDisplayObject = function _destroyCachedDisplayObject()\n{\n    this._cacheData.sprite._texture.destroy(true);\n    this._cacheData.sprite = null;\n};\n\n/**\n * Destroys the cached object.\n *\n * @private\n */\nDisplayObject.prototype._cacheAsBitmapDestroy = function _cacheAsBitmapDestroy()\n{\n    this.cacheAsBitmap = false;\n    this.destroy();\n};\n"]}