{"version":3,"sources":["../../../src/mesh/webgl/MeshRenderer.js"],"names":["core","MeshRenderer","renderer","shader","onContextChange","gl","Shader","render","mesh","texture","_texture","valid","glData","_glDatas","CONTEXT_UID","bindVao","vertexBuffer","GLBuffer","createVertexBuffer","vertices","STREAM_DRAW","uvBuffer","uvs","indexBuffer","createIndexBuffer","indices","STATIC_DRAW","vao","dirty","indexDirty","VertexArrayObject","addIndex","addAttribute","attributes","aVertexPosition","FLOAT","aTextureCoord","upload","bindShader","uniforms","uSampler","bindTexture","state","setBlendMode","blendMode","translationMatrix","worldTransform","toArray","alpha","worldAlpha","tint","tintRgb","drawMode","DRAW_MODES","TRIANGLE_MESH","TRIANGLE_STRIP","TRIANGLES","draw","length","ObjectRenderer","WebGLRenderer","registerPlugin"],"mappings":"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","file":"MeshRenderer.js","sourcesContent":["import * as core from '../../core';\nimport glCore from 'pixi-gl-core';\nimport { default as Mesh } from '../Mesh';\nimport { readFileSync } from 'fs';\nimport { join } from 'path';\n\n/**\n * WebGL renderer plugin for tiling sprites\n */\nexport default class MeshRenderer extends core.ObjectRenderer {\n\n    /**\n     * constructor for renderer\n     *\n     * @param {WebGLRenderer} renderer The renderer this tiling awesomeness works for.\n     */\n    constructor(renderer)\n    {\n        super(renderer);\n\n        this.shader = null;\n    }\n\n    /**\n     * Sets up the renderer context and necessary buffers.\n     *\n     * @private\n     */\n    onContextChange()\n    {\n        const gl = this.renderer.gl;\n\n        this.shader = new core.Shader(gl,\n            readFileSync(join(__dirname, './mesh.vert'), 'utf8'),\n            readFileSync(join(__dirname, './mesh.frag'), 'utf8'));\n    }\n\n    /**\n     * renders mesh\n     *\n     * @param {PIXI.mesh.Mesh} mesh mesh instance\n     */\n    render(mesh)\n    {\n        const renderer = this.renderer;\n        const gl = renderer.gl;\n        const texture = mesh._texture;\n\n        if (!texture.valid)\n        {\n            return;\n        }\n\n        let glData = mesh._glDatas[renderer.CONTEXT_UID];\n\n        if (!glData)\n        {\n            renderer.bindVao(null);\n\n            glData = {\n                shader: this.shader,\n                vertexBuffer: glCore.GLBuffer.createVertexBuffer(gl, mesh.vertices, gl.STREAM_DRAW),\n                uvBuffer: glCore.GLBuffer.createVertexBuffer(gl, mesh.uvs, gl.STREAM_DRAW),\n                indexBuffer: glCore.GLBuffer.createIndexBuffer(gl, mesh.indices, gl.STATIC_DRAW),\n                // build the vao object that will render..\n                vao: null,\n                dirty: mesh.dirty,\n                indexDirty: mesh.indexDirty,\n            };\n\n            // build the vao object that will render..\n            glData.vao = new glCore.VertexArrayObject(gl)\n                .addIndex(glData.indexBuffer)\n                .addAttribute(glData.vertexBuffer, glData.shader.attributes.aVertexPosition, gl.FLOAT, false, 2 * 4, 0)\n                .addAttribute(glData.uvBuffer, glData.shader.attributes.aTextureCoord, gl.FLOAT, false, 2 * 4, 0);\n\n            mesh._glDatas[renderer.CONTEXT_UID] = glData;\n        }\n\n        if (mesh.dirty !== glData.dirty)\n        {\n            glData.dirty = mesh.dirty;\n            glData.uvBuffer.upload(mesh.uvs);\n        }\n\n        if (mesh.indexDirty !== glData.indexDirty)\n        {\n            glData.indexDirty = mesh.indexDirty;\n            glData.indexBuffer.upload(mesh.indices);\n        }\n\n        glData.vertexBuffer.upload(mesh.vertices);\n\n        renderer.bindShader(glData.shader);\n\n        glData.shader.uniforms.uSampler = renderer.bindTexture(texture);\n\n        renderer.state.setBlendMode(mesh.blendMode);\n\n        glData.shader.uniforms.translationMatrix = mesh.worldTransform.toArray(true);\n        glData.shader.uniforms.alpha = mesh.worldAlpha;\n        glData.shader.uniforms.tint = mesh.tintRgb;\n\n        const drawMode = mesh.drawMode === Mesh.DRAW_MODES.TRIANGLE_MESH ? gl.TRIANGLE_STRIP : gl.TRIANGLES;\n\n        renderer.bindVao(glData.vao);\n        glData.vao.draw(drawMode, mesh.indices.length, 0);\n    }\n}\n\ncore.WebGLRenderer.registerPlugin('mesh', MeshRenderer);\n"]}