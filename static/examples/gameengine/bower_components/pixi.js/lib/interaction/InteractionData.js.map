{"version":3,"sources":["../../src/interaction/InteractionData.js"],"names":["core","InteractionData","global","Point","target","originalEvent","getLocalPosition","displayObject","point","globalPos","worldTransform","applyInverse"],"mappings":";;;;AAAA;;IAAYA,I;;;;;;AAEZ;;;;;;IAMqBC,e;AAEjB;;;AAGA,6BACA;AAAA;;AACI;;;;;AAKA,SAAKC,MAAL,GAAc,IAAIF,KAAKG,KAAT,EAAd;;AAEA;;;;;AAKA,SAAKC,MAAL,GAAc,IAAd;;AAEA;;;;;AAKA,SAAKC,aAAL,GAAqB,IAArB;AACH;;AAED;;;;;;;;;;;;;;4BAYAC,gB,6BAAiBC,a,EAAeC,K,EAAOC,S,EACvC;AACI,WAAOF,cAAcG,cAAd,CAA6BC,YAA7B,CAA0CF,aAAa,KAAKP,MAA5D,EAAoEM,KAApE,CAAP;AACH,G;;;;;kBA5CgBP,e","file":"InteractionData.js","sourcesContent":["import * as core from '../core';\n\n/**\n * Holds all information related to an Interaction event\n *\n * @class\n * @memberof PIXI.interaction\n */\nexport default class InteractionData\n{\n    /**\n     *\n     */\n    constructor()\n    {\n        /**\n         * This point stores the global coords of where the touch/mouse event happened\n         *\n         * @member {PIXI.Point}\n         */\n        this.global = new core.Point();\n\n        /**\n         * The target Sprite that was interacted with\n         *\n         * @member {PIXI.Sprite}\n         */\n        this.target = null;\n\n        /**\n         * When passed to an event handler, this will be the original DOM Event that was captured\n         *\n         * @member {Event}\n         */\n        this.originalEvent = null;\n    }\n\n    /**\n     * This will return the local coordinates of the specified displayObject for this InteractionData\n     *\n     * @param {PIXI.DisplayObject} displayObject - The DisplayObject that you would like the local\n     *  coords off\n     * @param {PIXI.Point} [point] - A Point object in which to store the value, optional (otherwise\n     *  will create a new point)\n     * @param {PIXI.Point} [globalPos] - A Point object containing your custom global coords, optional\n     *  (otherwise will use the current global coords)\n     * @return {PIXI.Point} A point containing the coordinates of the InteractionData position relative\n     *  to the DisplayObject\n     */\n    getLocalPosition(displayObject, point, globalPos)\n    {\n        return displayObject.worldTransform.applyInverse(globalPos || this.global, point);\n    }\n}\n"]}