{"version":3,"sources":["../../../src/prepare/canvas/CanvasPrepare.js"],"names":["core","CANVAS_START_SIZE","CanvasPrepare","renderer","uploadHookHelper","canvas","document","createElement","width","height","ctx","getContext","register","findBaseTextures","uploadBaseTextures","destroy","prepare","item","BaseTexture","image","source","imageWidth","Math","min","imageHeight","drawImage","queue","indexOf","push","_texture","Texture","texture","baseTexture","CanvasRenderer","registerPlugin"],"mappings":";;;;AAAA;;IAAYA,I;;AACZ;;;;;;;;;;;;;;AAEA,IAAMC,oBAAoB,EAA1B;;AAEA;;;;;;;;;;IASqBC,a;;;AAEjB;;;AAGA,2BAAYC,QAAZ,EACA;AAAA;;AAAA,qDACI,wBAAMA,QAAN,CADJ;;AAGI,cAAKC,gBAAL;;AAEA;;;;;AAKA,cAAKC,MAAL,GAAcC,SAASC,aAAT,CAAuB,QAAvB,CAAd;AACA,cAAKF,MAAL,CAAYG,KAAZ,GAAoBP,iBAApB;AACA,cAAKI,MAAL,CAAYI,MAAZ,GAAqBR,iBAArB;;AAEA;;;;;AAKA,cAAKS,GAAL,GAAW,MAAKL,MAAL,CAAYM,UAAZ,CAAuB,IAAvB,CAAX;;AAEA;AACA,cAAKC,QAAL,CAAcC,gBAAd,EAAgCC,kBAAhC;AAtBJ;AAuBC;;AAED;;;;;;4BAIAC,O,sBACA;AACI,+BAAMA,OAAN;AACA,aAAKL,GAAL,GAAW,IAAX;AACA,aAAKL,MAAL,GAAc,IAAd;AACH,K;;;;;AAIL;;;;;;;;;;kBA5CqBH,a;AAoDrB,SAASY,kBAAT,CAA4BE,OAA5B,EAAqCC,IAArC,EACA;AACI,QAAIA,gBAAgBjB,KAAKkB,WAAzB,EACA;AACI,YAAMC,QAAQF,KAAKG,MAAnB;;AAEA;AACA;AACA;AACA,YAAMC,aAAaF,MAAMX,KAAN,KAAgB,CAAhB,GAAoBQ,QAAQX,MAAR,CAAeG,KAAnC,GAA2Cc,KAAKC,GAAL,CAASP,QAAQX,MAAR,CAAeG,KAAxB,EAA+BW,MAAMX,KAArC,CAA9D;AACA,YAAMgB,cAAcL,MAAMV,MAAN,KAAiB,CAAjB,GAAqBO,QAAQX,MAAR,CAAeI,MAApC,GAA6Ca,KAAKC,GAAL,CAASP,QAAQX,MAAR,CAAeI,MAAxB,EAAgCU,MAAMV,MAAtC,CAAjE;;AAEA;AACA;AACAO,gBAAQN,GAAR,CAAYe,SAAZ,CAAsBN,KAAtB,EAA6B,CAA7B,EAAgC,CAAhC,EAAmCE,UAAnC,EAA+CG,WAA/C,EAA4D,CAA5D,EAA+D,CAA/D,EAAkER,QAAQX,MAAR,CAAeG,KAAjF,EAAwFQ,QAAQX,MAAR,CAAeI,MAAvG;;AAEA,eAAO,IAAP;AACH;;AAED,WAAO,KAAP;AACH;;AAED;;;;;;;;AAQA,SAASI,gBAAT,CAA0BI,IAA1B,EAAgCS,KAAhC,EACA;AACI;AACA,QAAIT,gBAAgBjB,KAAKkB,WAAzB,EACA;AACI,YAAIQ,MAAMC,OAAN,CAAcV,IAAd,MAAwB,CAAC,CAA7B,EACA;AACIS,kBAAME,IAAN,CAAWX,IAAX;AACH;;AAED,eAAO,IAAP;AACH,KARD,MASK,IAAIA,KAAKY,QAAL,IAAiBZ,KAAKY,QAAL,YAAyB7B,KAAK8B,OAAnD,EACL;AACI,YAAMC,UAAUd,KAAKY,QAAL,CAAcG,WAA9B;;AAEA,YAAIN,MAAMC,OAAN,CAAcI,OAAd,MAA2B,CAAC,CAAhC,EACA;AACIL,kBAAME,IAAN,CAAWG,OAAX;AACH;;AAED,eAAO,IAAP;AACH;;AAED,WAAO,KAAP;AACH;;AAED/B,KAAKiC,cAAL,CAAoBC,cAApB,CAAmC,SAAnC,EAA8ChC,aAA9C","file":"CanvasPrepare.js","sourcesContent":["import * as core from '../../core';\nimport BasePrepare from '../BasePrepare';\n\nconst CANVAS_START_SIZE = 16;\n\n/**\n * The prepare manager provides functionality to upload content to the GPU\n * This cannot be done directly for Canvas like in WebGL, but the effect can be achieved by drawing\n * textures to an offline canvas.\n * This draw call will force the texture to be moved onto the GPU.\n *\n * @class\n * @memberof PIXI\n */\nexport default class CanvasPrepare extends BasePrepare\n{\n    /**\n     * @param {PIXI.CanvasRenderer} renderer - A reference to the current renderer\n     */\n    constructor(renderer)\n    {\n        super(renderer);\n\n        this.uploadHookHelper = this;\n\n        /**\n        * An offline canvas to render textures to\n        * @type {HTMLCanvasElement}\n        * @private\n        */\n        this.canvas = document.createElement('canvas');\n        this.canvas.width = CANVAS_START_SIZE;\n        this.canvas.height = CANVAS_START_SIZE;\n\n        /**\n         * The context to the canvas\n        * @type {CanvasRenderingContext2D}\n        * @private\n        */\n        this.ctx = this.canvas.getContext('2d');\n\n        // Add textures to upload\n        this.register(findBaseTextures, uploadBaseTextures);\n    }\n\n    /**\n     * Destroys the plugin, don't use after this.\n     *\n     */\n    destroy()\n    {\n        super.destroy();\n        this.ctx = null;\n        this.canvas = null;\n    }\n\n}\n\n/**\n * Built-in hook to upload PIXI.Texture objects to the GPU.\n *\n * @private\n * @param {*} prepare - Instance of CanvasPrepare\n * @param {*} item - Item to check\n * @return {boolean} If item was uploaded.\n */\nfunction uploadBaseTextures(prepare, item)\n{\n    if (item instanceof core.BaseTexture)\n    {\n        const image = item.source;\n\n        // Sometimes images (like atlas images) report a size of zero, causing errors on windows phone.\n        // So if the width or height is equal to zero then use the canvas size\n        // Otherwise use whatever is smaller, the image dimensions or the canvas dimensions.\n        const imageWidth = image.width === 0 ? prepare.canvas.width : Math.min(prepare.canvas.width, image.width);\n        const imageHeight = image.height === 0 ? prepare.canvas.height : Math.min(prepare.canvas.height, image.height);\n\n        // Only a small subsections is required to be drawn to have the whole texture uploaded to the GPU\n        // A smaller draw can be faster.\n        prepare.ctx.drawImage(image, 0, 0, imageWidth, imageHeight, 0, 0, prepare.canvas.width, prepare.canvas.height);\n\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Built-in hook to find textures from Sprites.\n *\n * @private\n * @param {PIXI.DisplayObject} item  -Display object to check\n * @param {Array<*>} queue - Collection of items to upload\n * @return {boolean} if a PIXI.Texture object was found.\n */\nfunction findBaseTextures(item, queue)\n{\n    // Objects with textures, like Sprites/Text\n    if (item instanceof core.BaseTexture)\n    {\n        if (queue.indexOf(item) === -1)\n        {\n            queue.push(item);\n        }\n\n        return true;\n    }\n    else if (item._texture && item._texture instanceof core.Texture)\n    {\n        const texture = item._texture.baseTexture;\n\n        if (queue.indexOf(texture) === -1)\n        {\n            queue.push(texture);\n        }\n\n        return true;\n    }\n\n    return false;\n}\n\ncore.CanvasRenderer.registerPlugin('prepare', CanvasPrepare);\n"]}