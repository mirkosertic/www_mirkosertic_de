{"version":3,"sources":["../../../src/prepare/webgl/WebGLPrepare.js"],"names":["core","WebGLPrepare","renderer","uploadHookHelper","register","findBaseTextures","uploadBaseTextures","findGraphics","uploadGraphics","item","BaseTexture","_glTextures","CONTEXT_UID","textureManager","updateTexture","Graphics","dirty","clearDirty","_webGL","plugins","graphics","updateGraphics","queue","indexOf","push","_texture","Texture","texture","baseTexture","WebGLRenderer","registerPlugin"],"mappings":";;;;AAAA;;IAAYA,I;;AACZ;;;;;;;;;;;;;;AAEA;;;;;;IAMqBC,Y;;;AAEjB;;;AAGA,0BAAYC,QAAZ,EACA;AAAA;;AAAA,qDACI,wBAAMA,QAAN,CADJ;;AAGI,cAAKC,gBAAL,GAAwB,MAAKD,QAA7B;;AAEA;AACA,cAAKE,QAAL,CAAcC,gBAAd,EAAgCC,kBAAhC,EACKF,QADL,CACcG,YADd,EAC4BC,cAD5B;AANJ;AAQC;;;;;AAIL;;;;;;;;;;kBAlBqBP,Y;AA0BrB,SAASK,kBAAT,CAA4BJ,QAA5B,EAAsCO,IAAtC,EACA;AACI,QAAIA,gBAAgBT,KAAKU,WAAzB,EACA;AACI;AACA;AACA;AACA,YAAI,CAACD,KAAKE,WAAL,CAAiBT,SAASU,WAA1B,CAAL,EACA;AACIV,qBAASW,cAAT,CAAwBC,aAAxB,CAAsCL,IAAtC;AACH;;AAED,eAAO,IAAP;AACH;;AAED,WAAO,KAAP;AACH;;AAED;;;;;;;;AAQA,SAASD,cAAT,CAAwBN,QAAxB,EAAkCO,IAAlC,EACA;AACI,QAAIA,gBAAgBT,KAAKe,QAAzB,EACA;AACI;AACA;AACA,YAAIN,KAAKO,KAAL,IAAcP,KAAKQ,UAAnB,IAAiC,CAACR,KAAKS,MAAL,CAAYhB,SAASiB,OAAT,CAAiBC,QAAjB,CAA0BR,WAAtC,CAAtC,EACA;AACIV,qBAASiB,OAAT,CAAiBC,QAAjB,CAA0BC,cAA1B,CAAyCZ,IAAzC;AACH;;AAED,eAAO,IAAP;AACH;;AAED,WAAO,KAAP;AACH;;AAED;;;;;;;;AAQA,SAASJ,gBAAT,CAA0BI,IAA1B,EAAgCa,KAAhC,EACA;AACI;AACA,QAAIb,gBAAgBT,KAAKU,WAAzB,EACA;AACI,YAAIY,MAAMC,OAAN,CAAcd,IAAd,MAAwB,CAAC,CAA7B,EACA;AACIa,kBAAME,IAAN,CAAWf,IAAX;AACH;;AAED,eAAO,IAAP;AACH,KARD,MASK,IAAIA,KAAKgB,QAAL,IAAiBhB,KAAKgB,QAAL,YAAyBzB,KAAK0B,OAAnD,EACL;AACI,YAAMC,UAAUlB,KAAKgB,QAAL,CAAcG,WAA9B;;AAEA,YAAIN,MAAMC,OAAN,CAAcI,OAAd,MAA2B,CAAC,CAAhC,EACA;AACIL,kBAAME,IAAN,CAAWG,OAAX;AACH;;AAED,eAAO,IAAP;AACH;;AAED,WAAO,KAAP;AACH;;AAED;;;;;;;;AAQA,SAASpB,YAAT,CAAsBE,IAAtB,EAA4Ba,KAA5B,EACA;AACI,QAAIb,gBAAgBT,KAAKe,QAAzB,EACA;AACIO,cAAME,IAAN,CAAWf,IAAX;;AAEA,eAAO,IAAP;AACH;;AAED,WAAO,KAAP;AACH;;AAEDT,KAAK6B,aAAL,CAAmBC,cAAnB,CAAkC,SAAlC,EAA6C7B,YAA7C","file":"WebGLPrepare.js","sourcesContent":["import * as core from '../../core';\nimport BasePrepare from '../BasePrepare';\n\n/**\n * The prepare manager provides functionality to upload content to the GPU.\n *\n * @class\n * @memberof PIXI\n */\nexport default class WebGLPrepare extends BasePrepare\n{\n    /**\n     * @param {PIXI.WebGLRenderer} renderer - A reference to the current renderer\n     */\n    constructor(renderer)\n    {\n        super(renderer);\n\n        this.uploadHookHelper = this.renderer;\n\n        // Add textures and graphics to upload\n        this.register(findBaseTextures, uploadBaseTextures)\n            .register(findGraphics, uploadGraphics);\n    }\n\n}\n\n/**\n * Built-in hook to upload PIXI.Texture objects to the GPU.\n *\n * @private\n * @param {PIXI.WebGLRenderer} renderer - instance of the webgl renderer\n * @param {PIXI.DisplayObject} item - Item to check\n * @return {boolean} If item was uploaded.\n */\nfunction uploadBaseTextures(renderer, item)\n{\n    if (item instanceof core.BaseTexture)\n    {\n        // if the texture already has a GL texture, then the texture has been prepared or rendered\n        // before now. If the texture changed, then the changer should be calling texture.update() which\n        // reuploads the texture without need for preparing it again\n        if (!item._glTextures[renderer.CONTEXT_UID])\n        {\n            renderer.textureManager.updateTexture(item);\n        }\n\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Built-in hook to upload PIXI.Graphics to the GPU.\n *\n * @private\n * @param {PIXI.WebGLRenderer} renderer - instance of the webgl renderer\n * @param {PIXI.DisplayObject} item - Item to check\n * @return {boolean} If item was uploaded.\n */\nfunction uploadGraphics(renderer, item)\n{\n    if (item instanceof core.Graphics)\n    {\n        // if the item is not dirty and already has webgl data, then it got prepared or rendered\n        // before now and we shouldn't waste time updating it again\n        if (item.dirty || item.clearDirty || !item._webGL[renderer.plugins.graphics.CONTEXT_UID])\n        {\n            renderer.plugins.graphics.updateGraphics(item);\n        }\n\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Built-in hook to find textures from Sprites.\n *\n * @private\n * @param {PIXI.DisplayObject} item - Display object to check\n * @param {Array<*>} queue - Collection of items to upload\n * @return {boolean} if a PIXI.Texture object was found.\n */\nfunction findBaseTextures(item, queue)\n{\n    // Objects with textures, like Sprites/Text\n    if (item instanceof core.BaseTexture)\n    {\n        if (queue.indexOf(item) === -1)\n        {\n            queue.push(item);\n        }\n\n        return true;\n    }\n    else if (item._texture && item._texture instanceof core.Texture)\n    {\n        const texture = item._texture.baseTexture;\n\n        if (queue.indexOf(texture) === -1)\n        {\n            queue.push(texture);\n        }\n\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Built-in hook to find graphics.\n *\n * @private\n * @param {PIXI.DisplayObject} item - Display object to check\n * @param {Array<*>} queue - Collection of items to upload\n * @return {boolean} if a PIXI.Graphics object was found.\n */\nfunction findGraphics(item, queue)\n{\n    if (item instanceof core.Graphics)\n    {\n        queue.push(item);\n\n        return true;\n    }\n\n    return false;\n}\n\ncore.WebGLRenderer.registerPlugin('prepare', WebGLPrepare);\n"]}