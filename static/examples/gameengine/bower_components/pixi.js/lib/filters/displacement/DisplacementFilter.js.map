{"version":3,"sources":["../../../src/filters/displacement/DisplacementFilter.js"],"names":["core","DisplacementFilter","sprite","scale","maskMatrix","Matrix","renderable","maskSprite","uniforms","mapSampler","texture","filterMatrix","toArray","x","y","undefined","Point","apply","filterManager","input","output","ratio","destinationFrame","width","size","calculateSpriteMatrix","applyFilter","value","Filter"],"mappings":";;;;;;AAAA;;IAAYA,I;;AAEZ;;;;;;;;;;AAEA;;;;;;;;;;;IAWqBC,kB;;;AAEjB;;;;AAIA,gCAAYC,MAAZ,EAAoBC,KAApB,EACA;AAAA;;AACI,YAAMC,aAAa,IAAIJ,KAAKK,MAAT,EAAnB;;AAEAH,eAAOI,UAAP,GAAoB,KAApB;;AAHJ,qDAKI;AACI;AADJ;AAGI;AAHJ,obALJ;;AAYI,cAAKC,UAAL,GAAkBL,MAAlB;AACA,cAAKE,UAAL,GAAkBA,UAAlB;;AAEA,cAAKI,QAAL,CAAcC,UAAd,GAA2BP,OAAOQ,OAAlC;AACA,cAAKF,QAAL,CAAcG,YAAd,GAA6BP,WAAWQ,OAAX,CAAmB,IAAnB,CAA7B;AACA,cAAKJ,QAAL,CAAcL,KAAd,GAAsB,EAAEU,GAAG,CAAL,EAAQC,GAAG,CAAX,EAAtB;;AAEA,YAAIX,UAAU,IAAV,IAAkBA,UAAUY,SAAhC,EACA;AACIZ,oBAAQ,EAAR;AACH;;AAED,cAAKA,KAAL,GAAa,IAAIH,KAAKgB,KAAT,CAAeb,KAAf,EAAsBA,KAAtB,CAAb;AAxBJ;AAyBC;;AAED;;;;;;;;;iCAOAc,K,kBAAMC,a,EAAeC,K,EAAOC,M,EAC5B;AACI,YAAMC,QAAU,IAAID,OAAOE,gBAAP,CAAwBC,KAA7B,IAAuCH,OAAOI,IAAP,CAAYD,KAAZ,GAAoBJ,MAAMK,IAAN,CAAWD,KAAtE,CAAf;;AAEA,aAAKf,QAAL,CAAcG,YAAd,GAA6BO,cAAcO,qBAAd,CAAoC,KAAKrB,UAAzC,EAAqD,KAAKG,UAA1D,CAA7B;AACA,aAAKC,QAAL,CAAcL,KAAd,CAAoBU,CAApB,GAAwB,KAAKV,KAAL,CAAWU,CAAX,GAAeQ,KAAvC;AACA,aAAKb,QAAL,CAAcL,KAAd,CAAoBW,CAApB,GAAwB,KAAKX,KAAL,CAAWW,CAAX,GAAeO,KAAvC;;AAEC;AACDH,sBAAcQ,WAAd,CAA0B,IAA1B,EAAgCP,KAAhC,EAAuCC,MAAvC;AACH,K;;AAED;;;;;;;;;;4BAOA;AACI,mBAAO,KAAKZ,QAAL,CAAcC,UAArB;AACH;;AAED;;;;;;0BAKQkB,K,EACR;AACI,iBAAKnB,QAAL,CAAcC,UAAd,GAA2BkB,KAA3B;AACH;;;;EAxE2C3B,KAAK4B,M;;kBAAhC3B,kB","file":"DisplacementFilter.js","sourcesContent":["import * as core from '../../core';\nimport { readFileSync } from 'fs';\nimport { join } from 'path';\n\n/**\n * The DisplacementFilter class uses the pixel values from the specified texture\n * (called the displacement map) to perform a displacement of an object. You can\n * use this filter to apply all manor of crazy warping effects. Currently the r\n * property of the texture is used to offset the x and the g property of the texture\n * is used to offset the y.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n */\nexport default class DisplacementFilter extends core.Filter\n{\n    /**\n     * @param {PIXI.Sprite} sprite - The sprite used for the displacement map. (make sure its added to the scene!)\n     * @param {number} scale - The scale of the displacement\n     */\n    constructor(sprite, scale)\n    {\n        const maskMatrix = new core.Matrix();\n\n        sprite.renderable = false;\n\n        super(\n            // vertex shader\n            readFileSync(join(__dirname, '../fragments/default-filter-matrix.vert'), 'utf8'),\n            // fragment shader\n            readFileSync(join(__dirname, './displacement.frag'), 'utf8')\n        );\n\n        this.maskSprite = sprite;\n        this.maskMatrix = maskMatrix;\n\n        this.uniforms.mapSampler = sprite.texture;\n        this.uniforms.filterMatrix = maskMatrix.toArray(true);\n        this.uniforms.scale = { x: 1, y: 1 };\n\n        if (scale === null || scale === undefined)\n        {\n            scale = 20;\n        }\n\n        this.scale = new core.Point(scale, scale);\n    }\n\n    /**\n     * Applies the filter.\n     *\n     * @param {PIXI.FilterManager} filterManager - The manager.\n     * @param {PIXI.RenderTarget} input - The input target.\n     * @param {PIXI.RenderTarget} output - The output target.\n     */\n    apply(filterManager, input, output)\n    {\n        const ratio =  (1 / output.destinationFrame.width) * (output.size.width / input.size.width);\n\n        this.uniforms.filterMatrix = filterManager.calculateSpriteMatrix(this.maskMatrix, this.maskSprite);\n        this.uniforms.scale.x = this.scale.x * ratio;\n        this.uniforms.scale.y = this.scale.y * ratio;\n\n         // draw the filter...\n        filterManager.applyFilter(this, input, output);\n    }\n\n    /**\n     * The texture used for the displacement map. Must be power of 2 sized texture.\n     *\n     * @member {PIXI.Texture}\n     * @memberof PIXI.filters.DisplacementFilter#\n     */\n    get map()\n    {\n        return this.uniforms.mapSampler;\n    }\n\n    /**\n     * Sets the texture to use for the displacement.\n     *\n     * @param {PIXI.Texture} value - The texture to set to.\n     */\n    set map(value)\n    {\n        this.uniforms.mapSampler = value;\n    }\n}\n"]}