{"version":3,"sources":["../../../src/core/renderers/SystemRenderer.js"],"names":["tempMatrix","SystemRenderer","system","width","height","options","i","RENDER_OPTIONS","type","UNKNOWN","view","document","createElement","resolution","RESOLUTION","transparent","autoResize","blendModes","preserveDrawingBuffer","clearBeforeRender","roundPixels","_backgroundColor","_backgroundColorRgba","_backgroundColorString","backgroundColor","_tempDisplayObjectParent","_lastObjectRendered","resize","style","generateTexture","displayObject","scaleMode","bounds","getLocalBounds","renderTexture","create","tx","x","ty","y","render","destroy","removeView","parentNode","removeChild","value"],"mappings":"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","file":"SystemRenderer.js","sourcesContent":["import { sayHello, hex2string, hex2rgb } from '../utils';\nimport { Matrix } from '../math';\nimport { RENDERER_TYPE } from '../const';\nimport settings from '../settings';\nimport Container from '../display/Container';\nimport RenderTexture from '../textures/RenderTexture';\nimport EventEmitter from 'eventemitter3';\n\nconst tempMatrix = new Matrix();\n\n/**\n * The SystemRenderer is the base for a Pixi Renderer. It is extended by the {@link PIXI.CanvasRenderer}\n * and {@link PIXI.WebGLRenderer} which can be used for rendering a Pixi scene.\n *\n * @abstract\n * @class\n * @extends EventEmitter\n * @memberof PIXI\n */\nexport default class SystemRenderer extends EventEmitter\n{\n    /**\n     * @param {string} system - The name of the system this renderer is for.\n     * @param {number} [width=800] - the width of the canvas view\n     * @param {number} [height=600] - the height of the canvas view\n     * @param {object} [options] - The optional renderer parameters\n     * @param {HTMLCanvasElement} [options.view] - the canvas to use as a view, optional\n     * @param {boolean} [options.transparent=false] - If the render view is transparent, default false\n     * @param {boolean} [options.autoResize=false] - If the render view is automatically resized, default false\n     * @param {boolean} [options.antialias=false] - sets antialias (only applicable in chrome at the moment)\n     * @param {number} [options.resolution=1] - The resolution / device pixel ratio of the renderer. The\n     *  resolution of the renderer retina would be 2.\n     * @param {boolean} [options.clearBeforeRender=true] - This sets if the CanvasRenderer will clear the canvas or\n     *      not before the new render pass.\n     * @param {number} [options.backgroundColor=0x000000] - The background color of the rendered area\n     *  (shown if not transparent).\n     * @param {boolean} [options.roundPixels=false] - If true Pixi will Math.floor() x/y values when rendering,\n     *  stopping pixel interpolation.\n     */\n    constructor(system, width, height, options)\n    {\n        super();\n\n        sayHello(system);\n\n        // prepare options\n        if (options)\n        {\n            for (const i in settings.RENDER_OPTIONS)\n            {\n                if (typeof options[i] === 'undefined')\n                {\n                    options[i] = settings.RENDER_OPTIONS[i];\n                }\n            }\n        }\n        else\n        {\n            options = settings.RENDER_OPTIONS;\n        }\n\n        /**\n         * The type of the renderer.\n         *\n         * @member {number}\n         * @default PIXI.RENDERER_TYPE.UNKNOWN\n         * @see PIXI.RENDERER_TYPE\n         */\n        this.type = RENDERER_TYPE.UNKNOWN;\n\n        /**\n         * The width of the canvas view\n         *\n         * @member {number}\n         * @default 800\n         */\n        this.width = width || 800;\n\n        /**\n         * The height of the canvas view\n         *\n         * @member {number}\n         * @default 600\n         */\n        this.height = height || 600;\n\n        /**\n         * The canvas element that everything is drawn to\n         *\n         * @member {HTMLCanvasElement}\n         */\n        this.view = options.view || document.createElement('canvas');\n\n        /**\n         * The resolution / device pixel ratio of the renderer\n         *\n         * @member {number}\n         * @default 1\n         */\n        this.resolution = options.resolution || settings.RESOLUTION;\n\n        /**\n         * Whether the render view is transparent\n         *\n         * @member {boolean}\n         */\n        this.transparent = options.transparent;\n\n        /**\n         * Whether the render view should be resized automatically\n         *\n         * @member {boolean}\n         */\n        this.autoResize = options.autoResize || false;\n\n        /**\n         * Tracks the blend modes useful for this renderer.\n         *\n         * @member {object<string, mixed>}\n         */\n        this.blendModes = null;\n\n        /**\n         * The value of the preserveDrawingBuffer flag affects whether or not the contents of\n         * the stencil buffer is retained after rendering.\n         *\n         * @member {boolean}\n         */\n        this.preserveDrawingBuffer = options.preserveDrawingBuffer;\n\n        /**\n         * This sets if the CanvasRenderer will clear the canvas or not before the new render pass.\n         * If the scene is NOT transparent Pixi will use a canvas sized fillRect operation every\n         * frame to set the canvas background color. If the scene is transparent Pixi will use clearRect\n         * to clear the canvas every frame. Disable this by setting this to false. For example if\n         * your game has a canvas filling background image you often don't need this set.\n         *\n         * @member {boolean}\n         * @default\n         */\n        this.clearBeforeRender = options.clearBeforeRender;\n\n        /**\n         * If true Pixi will Math.floor() x/y values when rendering, stopping pixel interpolation.\n         * Handy for crisp pixel art and speed on legacy devices.\n         *\n         * @member {boolean}\n         */\n        this.roundPixels = options.roundPixels;\n\n        /**\n         * The background color as a number.\n         *\n         * @member {number}\n         * @private\n         */\n        this._backgroundColor = 0x000000;\n\n        /**\n         * The background color as an [R, G, B] array.\n         *\n         * @member {number[]}\n         * @private\n         */\n        this._backgroundColorRgba = [0, 0, 0, 0];\n\n        /**\n         * The background color as a string.\n         *\n         * @member {string}\n         * @private\n         */\n        this._backgroundColorString = '#000000';\n\n        this.backgroundColor = options.backgroundColor || this._backgroundColor; // run bg color setter\n\n        /**\n         * This temporary display object used as the parent of the currently being rendered item\n         *\n         * @member {PIXI.DisplayObject}\n         * @private\n         */\n        this._tempDisplayObjectParent = new Container();\n\n        /**\n         * The last root object that the renderer tried to render.\n         *\n         * @member {PIXI.DisplayObject}\n         * @private\n         */\n        this._lastObjectRendered = this._tempDisplayObjectParent;\n    }\n\n    /**\n     * Resizes the canvas view to the specified width and height\n     *\n     * @param {number} width - the new width of the canvas view\n     * @param {number} height - the new height of the canvas view\n     */\n    resize(width, height)\n    {\n        this.width = width * this.resolution;\n        this.height = height * this.resolution;\n\n        this.view.width = this.width;\n        this.view.height = this.height;\n\n        if (this.autoResize)\n        {\n            this.view.style.width = `${this.width / this.resolution}px`;\n            this.view.style.height = `${this.height / this.resolution}px`;\n        }\n    }\n\n    /**\n     * Useful function that returns a texture of the display object that can then be used to create sprites\n     * This can be quite useful if your displayObject is complicated and needs to be reused multiple times.\n     *\n     * @param {PIXI.DisplayObject} displayObject - The displayObject the object will be generated from\n     * @param {number} scaleMode - Should be one of the scaleMode consts\n     * @param {number} resolution - The resolution / device pixel ratio of the texture being generated\n     * @return {PIXI.Texture} a texture of the graphics object\n     */\n    generateTexture(displayObject, scaleMode, resolution)\n    {\n        const bounds = displayObject.getLocalBounds();\n\n        const renderTexture = RenderTexture.create(bounds.width | 0, bounds.height | 0, scaleMode, resolution);\n\n        tempMatrix.tx = -bounds.x;\n        tempMatrix.ty = -bounds.y;\n\n        this.render(displayObject, renderTexture, false, tempMatrix, true);\n\n        return renderTexture;\n    }\n\n    /**\n     * Removes everything from the renderer and optionally removes the Canvas DOM element.\n     *\n     * @param {boolean} [removeView=false] - Removes the Canvas element from the DOM.\n     */\n    destroy(removeView)\n    {\n        if (removeView && this.view.parentNode)\n        {\n            this.view.parentNode.removeChild(this.view);\n        }\n\n        this.type = RENDERER_TYPE.UNKNOWN;\n\n        this.width = 0;\n        this.height = 0;\n\n        this.view = null;\n\n        this.resolution = 0;\n\n        this.transparent = false;\n\n        this.autoResize = false;\n\n        this.blendModes = null;\n\n        this.preserveDrawingBuffer = false;\n        this.clearBeforeRender = false;\n\n        this.roundPixels = false;\n\n        this._backgroundColor = 0;\n        this._backgroundColorRgba = null;\n        this._backgroundColorString = null;\n\n        this.backgroundColor = 0;\n        this._tempDisplayObjectParent = null;\n        this._lastObjectRendered = null;\n    }\n\n    /**\n     * The background color to fill if not transparent\n     *\n     * @member {number}\n     * @memberof PIXI.SystemRenderer#\n     */\n    get backgroundColor()\n    {\n        return this._backgroundColor;\n    }\n\n    /**\n     * Sets the background color.\n     *\n     * @param {number} value - The value to set to.\n     */\n    set backgroundColor(value)\n    {\n        this._backgroundColor = value;\n        this._backgroundColorString = hex2string(value);\n        hex2rgb(value, this._backgroundColorRgba);\n    }\n}\n"]}