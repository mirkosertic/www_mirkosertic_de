{"version":3,"sources":["../../../../../../src/core/renderers/webgl/filters/spriteMask/SpriteMaskFilter.js"],"names":["SpriteMaskFilter","sprite","maskMatrix","renderable","maskSprite","apply","filterManager","input","output","uniforms","mask","_texture","otherMatrix","calculateSpriteMatrix","alpha","worldAlpha","applyFilter"],"mappings":";;;;AAAA;;;;AACA;;AAEA;;;;;;;;;;AAEA;;;;;;;IAOqBA,gB;;;AAEjB;;;AAGA,8BAAYC,MAAZ,EACA;AAAA;;AACI,YAAMC,aAAa,kBAAnB;;AADJ,qDAGI,o8BAHJ;;AAQID,eAAOE,UAAP,GAAoB,KAApB;;AAEA,cAAKC,UAAL,GAAkBH,MAAlB;AACA,cAAKC,UAAL,GAAkBA,UAAlB;AAXJ;AAYC;;AAED;;;;;;;;;+BAOAG,K,kBAAMC,a,EAAeC,K,EAAOC,M,EAC5B;AACI,YAAMJ,aAAa,KAAKA,UAAxB;;AAEA,aAAKK,QAAL,CAAcC,IAAd,GAAqBN,WAAWO,QAAhC;AACA,aAAKF,QAAL,CAAcG,WAAd,GAA4BN,cAAcO,qBAAd,CAAoC,KAAKX,UAAzC,EAAqDE,UAArD,CAA5B;AACA,aAAKK,QAAL,CAAcK,KAAd,GAAsBV,WAAWW,UAAjC;;AAEAT,sBAAcU,WAAd,CAA0B,IAA1B,EAAgCT,KAAhC,EAAuCC,MAAvC;AACH,K;;;;;kBApCgBR,gB","file":"SpriteMaskFilter.js","sourcesContent":["import Filter from '../Filter';\nimport { Matrix } from '../../../../math';\nimport { readFileSync } from 'fs';\nimport { join } from 'path';\n\n/**\n * The SpriteMaskFilter class\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI\n */\nexport default class SpriteMaskFilter extends Filter\n{\n    /**\n     * @param {PIXI.Sprite} sprite - the target sprite\n     */\n    constructor(sprite)\n    {\n        const maskMatrix = new Matrix();\n\n        super(\n            readFileSync(join(__dirname, './spriteMaskFilter.vert'), 'utf8'),\n            readFileSync(join(__dirname, './spriteMaskFilter.frag'), 'utf8')\n        );\n\n        sprite.renderable = false;\n\n        this.maskSprite = sprite;\n        this.maskMatrix = maskMatrix;\n    }\n\n    /**\n     * Applies the filter\n     *\n     * @param {PIXI.FilterManager} filterManager - The renderer to retrieve the filter from\n     * @param {PIXI.RenderTarget} input - The input render target.\n     * @param {PIXI.RenderTarget} output - The target to output to.\n     */\n    apply(filterManager, input, output)\n    {\n        const maskSprite = this.maskSprite;\n\n        this.uniforms.mask = maskSprite._texture;\n        this.uniforms.otherMatrix = filterManager.calculateSpriteMatrix(this.maskMatrix, maskSprite);\n        this.uniforms.alpha = maskSprite.worldAlpha;\n\n        filterManager.applyFilter(this, input, output);\n    }\n}\n"]}