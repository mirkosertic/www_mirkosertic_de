{"version":3,"sources":["../../../src/core/display/TransformStatic.js"],"names":["TransformStatic","position","onChange","scale","pivot","skew","updateSkew","_rotation","_cx","_sx","_cy","_sy","_localID","_currentLocalID","Math","cos","_y","sin","_x","updateLocalTransform","lt","localTransform","a","b","c","d","tx","ty","_parentID","updateTransform","parentTransform","_worldID","pt","worldTransform","wt","setFromMatrix","matrix","decompose","value"],"mappings":"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","file":"TransformStatic.js","sourcesContent":["import { ObservablePoint } from '../math';\nimport TransformBase from './TransformBase';\n\n/**\n * Transform that takes care about its versions\n *\n * @class\n * @extends PIXI.TransformBase\n * @memberof PIXI\n */\nexport default class TransformStatic extends TransformBase\n{\n    /**\n     *\n     */\n    constructor()\n    {\n        super();\n\n         /**\n         * The coordinate of the object relative to the local coordinates of the parent.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        this.position = new ObservablePoint(this.onChange, this, 0, 0);\n\n        /**\n         * The scale factor of the object.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        this.scale = new ObservablePoint(this.onChange, this, 1, 1);\n\n        /**\n         * The pivot point of the displayObject that it rotates around\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        this.pivot = new ObservablePoint(this.onChange, this, 0, 0);\n\n        /**\n         * The skew amount, on the x and y axis.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        this.skew = new ObservablePoint(this.updateSkew, this, 0, 0);\n\n        this._rotation = 0;\n\n        this._cx = 1; // cos rotation + skewY;\n        this._sx = 0; // sin rotation + skewY;\n        this._cy = 0; // cos rotation + Math.PI/2 - skewX;\n        this._sy = 1; // sin rotation + Math.PI/2 - skewX;\n\n        this._localID = 0;\n        this._currentLocalID = 0;\n    }\n\n    /**\n     * Called when a value changes.\n     *\n     * @private\n     */\n    onChange()\n    {\n        this._localID ++;\n    }\n\n    /**\n     * Called when skew or rotation changes\n     *\n     * @private\n     */\n    updateSkew()\n    {\n        this._cx = Math.cos(this._rotation + this.skew._y);\n        this._sx = Math.sin(this._rotation + this.skew._y);\n        this._cy = -Math.sin(this._rotation - this.skew._x); // cos, added PI/2\n        this._sy = Math.cos(this._rotation - this.skew._x); // sin, added PI/2\n\n        this._localID ++;\n    }\n\n    /**\n     * Updates only local matrix\n     */\n    updateLocalTransform()\n    {\n        const lt = this.localTransform;\n\n        if (this._localID !== this._currentLocalID)\n        {\n            // get the matrix values of the displayobject based on its transform properties..\n            lt.a = this._cx * this.scale._x;\n            lt.b = this._sx * this.scale._x;\n            lt.c = this._cy * this.scale._y;\n            lt.d = this._sy * this.scale._y;\n\n            lt.tx = this.position._x - ((this.pivot._x * lt.a) + (this.pivot._y * lt.c));\n            lt.ty = this.position._y - ((this.pivot._x * lt.b) + (this.pivot._y * lt.d));\n            this._currentLocalID = this._localID;\n\n            // force an update..\n            this._parentID = -1;\n        }\n    }\n\n    /**\n     * Updates the values of the object and applies the parent's transform.\n     *\n     * @param {PIXI.Transform} parentTransform - The transform of the parent of this object\n     */\n    updateTransform(parentTransform)\n    {\n        const lt = this.localTransform;\n\n        if (this._localID !== this._currentLocalID)\n        {\n            // get the matrix values of the displayobject based on its transform properties..\n            lt.a = this._cx * this.scale._x;\n            lt.b = this._sx * this.scale._x;\n            lt.c = this._cy * this.scale._y;\n            lt.d = this._sy * this.scale._y;\n\n            lt.tx = this.position._x - ((this.pivot._x * lt.a) + (this.pivot._y * lt.c));\n            lt.ty = this.position._y - ((this.pivot._x * lt.b) + (this.pivot._y * lt.d));\n            this._currentLocalID = this._localID;\n\n            // force an update..\n            this._parentID = -1;\n        }\n\n        if (this._parentID !== parentTransform._worldID)\n        {\n            // concat the parent matrix with the objects transform.\n            const pt = parentTransform.worldTransform;\n            const wt = this.worldTransform;\n\n            wt.a = (lt.a * pt.a) + (lt.b * pt.c);\n            wt.b = (lt.a * pt.b) + (lt.b * pt.d);\n            wt.c = (lt.c * pt.a) + (lt.d * pt.c);\n            wt.d = (lt.c * pt.b) + (lt.d * pt.d);\n            wt.tx = (lt.tx * pt.a) + (lt.ty * pt.c) + pt.tx;\n            wt.ty = (lt.tx * pt.b) + (lt.ty * pt.d) + pt.ty;\n\n            this._parentID = parentTransform._worldID;\n\n            // update the id of the transform..\n            this._worldID ++;\n        }\n    }\n\n    /**\n     * Decomposes a matrix and sets the transforms properties based on it.\n     *\n     * @param {PIXI.Matrix} matrix - The matrix to decompose\n     */\n    setFromMatrix(matrix)\n    {\n        matrix.decompose(this);\n        this._localID ++;\n    }\n\n    /**\n     * The rotation of the object in radians.\n     *\n     * @member {number}\n     * @memberof PIXI.TransformStatic#\n     */\n    get rotation()\n    {\n        return this._rotation;\n    }\n\n    /**\n     * Sets the rotation of the transform.\n     *\n     * @param {number} value - The value to set to.\n     */\n    set rotation(value)\n    {\n        this._rotation = value;\n        this.updateSkew();\n    }\n}\n"]}