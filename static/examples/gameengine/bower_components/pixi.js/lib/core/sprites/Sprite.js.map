{"version":3,"sources":["../../../src/core/sprites/Sprite.js"],"names":["tempPoint","Sprite","texture","_anchor","_onAnchorUpdate","_texture","_width","_height","_tint","_tintRGB","tint","blendMode","NORMAL","shader","cachedTint","EMPTY","vertexData","Float32Array","vertexTrimmedData","_transformID","_textureID","pluginName","_onTextureUpdate","scale","x","orig","width","y","height","calculateVertices","transform","_worldID","_updateID","wt","worldTransform","a","b","c","d","tx","ty","trim","anchor","w0","w1","h0","h1","_x","_y","calculateTrimmedVertices","_renderWebGL","renderer","setObjectRenderer","plugins","render","_renderCanvas","_calculateBounds","_bounds","addQuad","getLocalBounds","rect","children","length","minX","minY","maxX","maxY","_localBoundsRect","getRectangle","call","containsPoint","point","applyInverse","x1","y1","destroy","options","destroyTexture","destroyBaseTexture","baseTexture","from","source","fromFrame","frameId","Error","fromImage","imageId","crossorigin","scaleMode","Math","abs","value","s","copy","hasLoaded","once"],"mappings":"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","file":"Sprite.js","sourcesContent":["import { Point, ObservablePoint, Rectangle } from '../math';\nimport { sign, TextureCache } from '../utils';\nimport { BLEND_MODES } from '../const';\nimport Texture from '../textures/Texture';\nimport Container from '../display/Container';\n\nconst tempPoint = new Point();\n\n/**\n * The Sprite object is the base for all textured objects that are rendered to the screen\n *\n * A sprite can be created directly from an image like this:\n *\n * ```js\n * let sprite = new PIXI.Sprite.fromImage('assets/image.png');\n * ```\n *\n * @class\n * @extends PIXI.Container\n * @memberof PIXI\n */\nexport default class Sprite extends Container\n{\n    /**\n     * @param {PIXI.Texture} texture - The texture for this sprite\n     */\n    constructor(texture)\n    {\n        super();\n\n        /**\n         * The anchor sets the origin point of the texture.\n         * The default is 0,0 this means the texture's origin is the top left\n         * Setting the anchor to 0.5,0.5 means the texture's origin is centered\n         * Setting the anchor to 1,1 would mean the texture's origin point will be the bottom right corner\n         *\n         * @member {PIXI.ObservablePoint}\n         * @private\n         */\n        this._anchor = new ObservablePoint(this._onAnchorUpdate, this);\n\n        /**\n         * The texture that the sprite is using\n         *\n         * @private\n         * @member {PIXI.Texture}\n         */\n        this._texture = null;\n\n        /**\n         * The width of the sprite (this is initially set by the texture)\n         *\n         * @private\n         * @member {number}\n         */\n        this._width = 0;\n\n        /**\n         * The height of the sprite (this is initially set by the texture)\n         *\n         * @private\n         * @member {number}\n         */\n        this._height = 0;\n\n        /**\n         * The tint applied to the sprite. This is a hex value. A value of 0xFFFFFF will remove any tint effect.\n         *\n         * @private\n         * @member {number}\n         * @default 0xFFFFFF\n         */\n        this._tint = null;\n        this._tintRGB = null;\n        this.tint = 0xFFFFFF;\n\n        /**\n         * The blend mode to be applied to the sprite. Apply a value of `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.\n         *\n         * @member {number}\n         * @default PIXI.BLEND_MODES.NORMAL\n         * @see PIXI.BLEND_MODES\n         */\n        this.blendMode = BLEND_MODES.NORMAL;\n\n        /**\n         * The shader that will be used to render the sprite. Set to null to remove a current shader.\n         *\n         * @member {PIXI.Filter|PIXI.Shader}\n         */\n        this.shader = null;\n\n        /**\n         * An internal cached value of the tint.\n         *\n         * @private\n         * @member {number}\n         * @default 0xFFFFFF\n         */\n        this.cachedTint = 0xFFFFFF;\n\n        // call texture setter\n        this.texture = texture || Texture.EMPTY;\n\n        /**\n         * this is used to store the vertex data of the sprite (basically a quad)\n         *\n         * @private\n         * @member {Float32Array}\n         */\n        this.vertexData = new Float32Array(8);\n\n        /**\n         * This is used to calculate the bounds of the object IF it is a trimmed sprite\n         *\n         * @private\n         * @member {Float32Array}\n         */\n        this.vertexTrimmedData = null;\n\n        this._transformID = -1;\n        this._textureID = -1;\n\n        /**\n         * Plugin that is responsible for rendering this element.\n         * Allows to customize the rendering process without overriding '_renderWebGL' & '_renderCanvas' methods.\n         *\n         * @member {string}\n         * @default 'sprite'\n         */\n        this.pluginName = 'sprite';\n    }\n\n    /**\n     * When the texture is updated, this event will fire to update the scale and frame\n     *\n     * @private\n     */\n    _onTextureUpdate()\n    {\n        this._textureID = -1;\n\n        // so if _width is 0 then width was not set..\n        if (this._width)\n        {\n            this.scale.x = sign(this.scale.x) * this._width / this.texture.orig.width;\n        }\n\n        if (this._height)\n        {\n            this.scale.y = sign(this.scale.y) * this._height / this.texture.orig.height;\n        }\n    }\n\n    /**\n     * Called when the anchor position updates.\n     *\n     * @private\n     */\n    _onAnchorUpdate()\n    {\n        this._transformID = -1;\n    }\n\n    /**\n     * calculates worldTransform * vertices, store it in vertexData\n     */\n    calculateVertices()\n    {\n        if (this._transformID === this.transform._worldID && this._textureID === this._texture._updateID)\n        {\n            return;\n        }\n\n        this._transformID = this.transform._worldID;\n        this._textureID = this._texture._updateID;\n\n        // set the vertex data\n\n        const texture = this._texture;\n        const wt = this.transform.worldTransform;\n        const a = wt.a;\n        const b = wt.b;\n        const c = wt.c;\n        const d = wt.d;\n        const tx = wt.tx;\n        const ty = wt.ty;\n        const vertexData = this.vertexData;\n        const trim = texture.trim;\n        const orig = texture.orig;\n        const anchor = this._anchor;\n\n        let w0 = 0;\n        let w1 = 0;\n        let h0 = 0;\n        let h1 = 0;\n\n        if (trim)\n        {\n            // if the sprite is trimmed and is not a tilingsprite then we need to add the extra\n            // space before transforming the sprite coords.\n            w1 = trim.x - (anchor._x * orig.width);\n            w0 = w1 + trim.width;\n\n            h1 = trim.y - (anchor._y * orig.height);\n            h0 = h1 + trim.height;\n        }\n        else\n        {\n            w0 = orig.width * (1 - anchor._x);\n            w1 = orig.width * -anchor._x;\n\n            h0 = orig.height * (1 - anchor._y);\n            h1 = orig.height * -anchor._y;\n        }\n\n        // xy\n        vertexData[0] = (a * w1) + (c * h1) + tx;\n        vertexData[1] = (d * h1) + (b * w1) + ty;\n\n        // xy\n        vertexData[2] = (a * w0) + (c * h1) + tx;\n        vertexData[3] = (d * h1) + (b * w0) + ty;\n\n         // xy\n        vertexData[4] = (a * w0) + (c * h0) + tx;\n        vertexData[5] = (d * h0) + (b * w0) + ty;\n\n        // xy\n        vertexData[6] = (a * w1) + (c * h0) + tx;\n        vertexData[7] = (d * h0) + (b * w1) + ty;\n    }\n\n    /**\n     * calculates worldTransform * vertices for a non texture with a trim. store it in vertexTrimmedData\n     * This is used to ensure that the true width and height of a trimmed texture is respected\n     */\n    calculateTrimmedVertices()\n    {\n        if (!this.vertexTrimmedData)\n        {\n            this.vertexTrimmedData = new Float32Array(8);\n        }\n\n        // lets do some special trim code!\n        const texture = this._texture;\n        const vertexData = this.vertexTrimmedData;\n        const orig = texture.orig;\n        const anchor = this._anchor;\n\n        // lets calculate the new untrimmed bounds..\n        const wt = this.transform.worldTransform;\n        const a = wt.a;\n        const b = wt.b;\n        const c = wt.c;\n        const d = wt.d;\n        const tx = wt.tx;\n        const ty = wt.ty;\n\n        const w0 = (orig.width) * (1 - anchor._x);\n        const w1 = (orig.width) * -anchor._x;\n\n        const h0 = orig.height * (1 - anchor._y);\n        const h1 = orig.height * -anchor._y;\n\n        // xy\n        vertexData[0] = (a * w1) + (c * h1) + tx;\n        vertexData[1] = (d * h1) + (b * w1) + ty;\n\n        // xy\n        vertexData[2] = (a * w0) + (c * h1) + tx;\n        vertexData[3] = (d * h1) + (b * w0) + ty;\n\n        // xy\n        vertexData[4] = (a * w0) + (c * h0) + tx;\n        vertexData[5] = (d * h0) + (b * w0) + ty;\n\n        // xy\n        vertexData[6] = (a * w1) + (c * h0) + tx;\n        vertexData[7] = (d * h0) + (b * w1) + ty;\n    }\n\n    /**\n    *\n    * Renders the object using the WebGL renderer\n    *\n    * @private\n    * @param {PIXI.WebGLRenderer} renderer - The webgl renderer to use.\n    */\n    _renderWebGL(renderer)\n    {\n        this.calculateVertices();\n\n        renderer.setObjectRenderer(renderer.plugins[this.pluginName]);\n        renderer.plugins[this.pluginName].render(this);\n    }\n\n    /**\n    * Renders the object using the Canvas renderer\n    *\n    * @private\n    * @param {PIXI.CanvasRenderer} renderer - The renderer\n    */\n    _renderCanvas(renderer)\n    {\n        renderer.plugins[this.pluginName].render(this);\n    }\n\n    /**\n     * Updates the bounds of the sprite.\n     *\n     * @private\n     */\n    _calculateBounds()\n    {\n        const trim = this._texture.trim;\n        const orig = this._texture.orig;\n\n        // First lets check to see if the current texture has a trim..\n        if (!trim || (trim.width === orig.width && trim.height === orig.height))\n        {\n            // no trim! lets use the usual calculations..\n            this.calculateVertices();\n            this._bounds.addQuad(this.vertexData);\n        }\n        else\n        {\n            // lets calculate a special trimmed bounds...\n            this.calculateTrimmedVertices();\n            this._bounds.addQuad(this.vertexTrimmedData);\n        }\n    }\n\n    /**\n     * Gets the local bounds of the sprite object.\n     *\n     * @param {Rectangle} rect - The output rectangle.\n     * @return {Rectangle} The bounds.\n     */\n    getLocalBounds(rect)\n    {\n        // we can do a fast local bounds if the sprite has no children!\n        if (this.children.length === 0)\n        {\n            this._bounds.minX = this._texture.orig.width * -this._anchor._x;\n            this._bounds.minY = this._texture.orig.height * -this._anchor._y;\n            this._bounds.maxX = this._texture.orig.width * (1 - this._anchor._x);\n            this._bounds.maxY = this._texture.orig.height * (1 - this._anchor._x);\n\n            if (!rect)\n            {\n                if (!this._localBoundsRect)\n                {\n                    this._localBoundsRect = new Rectangle();\n                }\n\n                rect = this._localBoundsRect;\n            }\n\n            return this._bounds.getRectangle(rect);\n        }\n\n        return super.getLocalBounds.call(this, rect);\n    }\n\n    /**\n     * Tests if a point is inside this sprite\n     *\n     * @param {PIXI.Point} point - the point to test\n     * @return {boolean} the result of the test\n     */\n    containsPoint(point)\n    {\n        this.worldTransform.applyInverse(point, tempPoint);\n\n        const width = this._texture.orig.width;\n        const height = this._texture.orig.height;\n        const x1 = -width * this.anchor.x;\n        let y1 = 0;\n\n        if (tempPoint.x > x1 && tempPoint.x < x1 + width)\n        {\n            y1 = -height * this.anchor.y;\n\n            if (tempPoint.y > y1 && tempPoint.y < y1 + height)\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Destroys this sprite and optionally its texture and children\n     *\n     * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have their destroy\n     *      method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=false] - Should it destroy the current texture of the sprite as well\n     * @param {boolean} [options.baseTexture=false] - Should it destroy the base texture of the sprite as well\n     */\n    destroy(options)\n    {\n        super.destroy(options);\n\n        this._anchor = null;\n\n        const destroyTexture = typeof options === 'boolean' ? options : options && options.texture;\n\n        if (destroyTexture)\n        {\n            const destroyBaseTexture = typeof options === 'boolean' ? options : options && options.baseTexture;\n\n            this._texture.destroy(!!destroyBaseTexture);\n        }\n\n        this._texture = null;\n        this.shader = null;\n    }\n\n    // some helper functions..\n\n    /**\n     * Helper function that creates a new sprite based on the source you provide.\n     * The source can be - frame id, image url, video url, canvas element, video element, base texture\n     *\n     * @static\n     * @param {number|string|PIXI.BaseTexture|HTMLCanvasElement|HTMLVideoElement} source Source to create texture from\n     * @return {PIXI.Texture} The newly created texture\n     */\n    static from(source)\n    {\n        return new Sprite(Texture.from(source));\n    }\n\n    /**\n     * Helper function that creates a sprite that will contain a texture from the TextureCache based on the frameId\n     * The frame ids are created when a Texture packer file has been loaded\n     *\n     * @static\n     * @param {string} frameId - The frame Id of the texture in the cache\n     * @return {PIXI.Sprite} A new Sprite using a texture from the texture cache matching the frameId\n     */\n    static fromFrame(frameId)\n    {\n        const texture = TextureCache[frameId];\n\n        if (!texture)\n        {\n            throw new Error(`The frameId \"${frameId}\" does not exist in the texture cache`);\n        }\n\n        return new Sprite(texture);\n    }\n\n    /**\n     * Helper function that creates a sprite that will contain a texture based on an image url\n     * If the image is not in the texture cache it will be loaded\n     *\n     * @static\n     * @param {string} imageId - The image url of the texture\n     * @param {boolean} [crossorigin=(auto)] - if you want to specify the cross-origin parameter\n     * @param {number} [scaleMode=PIXI.settings.SCALE_MODE] - if you want to specify the scale mode,\n     *  see {@link PIXI.SCALE_MODES} for possible values\n     * @return {PIXI.Sprite} A new Sprite using a texture from the texture cache matching the image id\n     */\n    static fromImage(imageId, crossorigin, scaleMode)\n    {\n        return new Sprite(Texture.fromImage(imageId, crossorigin, scaleMode));\n    }\n\n    /**\n     * The width of the sprite, setting this will actually modify the scale to achieve the value set\n     *\n     * @member {number}\n     * @memberof PIXI.Sprite#\n     */\n    get width()\n    {\n        return Math.abs(this.scale.x) * this.texture.orig.width;\n    }\n\n    /**\n     * Sets the width of the sprite by modifying the scale.\n     *\n     * @param {number} value - The value to set to.\n     */\n    set width(value)\n    {\n        const s = sign(this.scale.x) || 1;\n\n        this.scale.x = s * value / this.texture.orig.width;\n        this._width = value;\n    }\n\n    /**\n     * The height of the sprite, setting this will actually modify the scale to achieve the value set\n     *\n     * @member {number}\n     * @memberof PIXI.Sprite#\n     */\n    get height()\n    {\n        return Math.abs(this.scale.y) * this.texture.orig.height;\n    }\n\n    /**\n     * Sets the height of the sprite by modifying the scale.\n     *\n     * @param {number} value - The value to set to.\n     */\n    set height(value)\n    {\n        const s = sign(this.scale.y) || 1;\n\n        this.scale.y = s * value / this.texture.orig.height;\n        this._height = value;\n    }\n\n    /**\n     * The anchor sets the origin point of the texture.\n     * The default is 0,0 this means the texture's origin is the top left\n     * Setting the anchor to 0.5,0.5 means the texture's origin is centered\n     * Setting the anchor to 1,1 would mean the texture's origin point will be the bottom right corner\n     *\n     * @member {PIXI.ObservablePoint}\n     * @memberof PIXI.Sprite#\n     */\n    get anchor()\n    {\n        return this._anchor;\n    }\n\n    /**\n     * Copies the anchor to the sprite.\n     *\n     * @param {number} value - The value to set to.\n     */\n    set anchor(value)\n    {\n        this._anchor.copy(value);\n    }\n\n    /**\n     * The tint applied to the sprite. This is a hex value. A value of\n     * 0xFFFFFF will remove any tint effect.\n     *\n     * @member {number}\n     * @memberof PIXI.Sprite#\n     * @default 0xFFFFFF\n     */\n    get tint()\n    {\n        return this._tint;\n    }\n\n    /**\n     * Sets the tint of the sprite.\n     *\n     * @param {number} value - The value to set to.\n     */\n    set tint(value)\n    {\n        this._tint = value;\n        this._tintRGB = (value >> 16) + (value & 0xff00) + ((value & 0xff) << 16);\n    }\n\n    /**\n     * The texture that the sprite is using\n     *\n     * @member {PIXI.Texture}\n     * @memberof PIXI.Sprite#\n     */\n    get texture()\n    {\n        return this._texture;\n    }\n\n    /**\n     * Sets the texture of the sprite.\n     *\n     * @param {PIXI.Texture} value - The value to set to.\n     */\n    set texture(value)\n    {\n        if (this._texture === value)\n        {\n            return;\n        }\n\n        this._texture = value;\n        this.cachedTint = 0xFFFFFF;\n\n        this._textureID = -1;\n\n        if (value)\n        {\n            // wait for the texture to load\n            if (value.baseTexture.hasLoaded)\n            {\n                this._onTextureUpdate();\n            }\n            else\n            {\n                value.once('update', this._onTextureUpdate, this);\n            }\n        }\n    }\n}\n"]}