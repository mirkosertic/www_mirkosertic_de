<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>www.mirkosertic.de</title>
    <link>https://www.mirkosertic.de/</link>
    <description>Recent content on www.mirkosertic.de</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>Mirko Sertic</copyright>
    <lastBuildDate>Mon, 25 Nov 2024 21:30:18 +0100</lastBuildDate>
    <atom:link href="https://www.mirkosertic.de/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Essential Books for Modern Software Engineers</title>
      <link>https://www.mirkosertic.de/global/interestingbooks/</link>
      <pubDate>Sun, 24 Nov 2024 00:00:00 +0200</pubDate>
      <guid>https://www.mirkosertic.de/global/interestingbooks/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_core_software_engineering_fundamentals&#34;&gt;Core Software Engineering Fundamentals&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;These foundational books will help you build a strong base in software engineering principles and practices.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;sect2&#34;&gt;&#xA;&lt;h3 id=&#34;_project_management_process&#34;&gt;Project Management &amp;amp; Process&lt;/h3&gt;&#xA;&lt;div class=&#34;ulist&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;The Mythical Man-Month. Essays on Software Engineering. Frederick P. Brooks&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;The Deadline: A Novel About Project Management. Tom DeMarco&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;The Goal: A Process of Ongoing Improvement. Eliyahu M. Goldratt, Jeff Cox&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Software Estimation: Demystifying the Black Art. Steve McConnell&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Peopleware: Productive Projects and Teams. Tom DeMarco&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>My personal Technology Radar</title>
      <link>https://www.mirkosertic.de/global/toolsgoodies/</link>
      <pubDate>Sun, 17 Nov 2024 00:00:00 +0200</pubDate>
      <guid>https://www.mirkosertic.de/global/toolsgoodies/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_section_1_developer_tooling_testing&#34;&gt;Section 1: Developer Tooling &amp;amp; Testing&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Tools and frameworks that support the development and testing process&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;strong&gt;Adopt&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;ulist&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://www.jetbrains.com/idea&#34;&gt;IntelliJ IDEA&lt;/a&gt; IntelliJ IDEA, the one and only IDE you will ever need!&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://playwright.dev&#34;&gt;Playwright&lt;/a&gt; Industry standard for end-to-end testing, offering superior reliability and features compared to alternatives&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.testcontainers.org/&#34;&gt;Testcontainers&lt;/a&gt; Essential for modern integration testing, especially in microservices environments&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://storybook.js.org/&#34;&gt;Storybook&lt;/a&gt; De facto standard for component development and documentation in modern frontend development. Alternative: Histoire for Vue.js project&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Supercharge Your Hugo Blog with Claude: Automated Content Enhancement using Anthropic&#39;s API</title>
      <link>https://www.mirkosertic.de/blog/2024/11/enhance-blog-with-ai/</link>
      <pubDate>Sun, 10 Nov 2024 00:00:00 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2024/11/enhance-blog-with-ai/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Maintaining a technical blog requires constant attention to quality, readability, and SEO optimization. While creating fresh content is important, enhancing existing posts can be equally valuable. This guide explores how to&#xA;leverage Anthropic’s Claude API to automatically improve your Hugo blog posts while preserving their core message and authenticity. In fact, this blog was target of such an optimization.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_the_power_of_ai_enhanced_content&#34;&gt;The Power of AI-Enhanced Content&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Traditional content updates are time-consuming and often overlooked. By automating the enhancement process with Claude, you can systematically improve your entire blog archive without manual rewrites. The AI assists in refining&#xA;titles for better click-through rates, crafting compelling descriptions, and generating comprehensive abstracts that accurately represent your content.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Transform Wonky Magnetometer Data into Perfect Circles: A Python Guide</title>
      <link>https://www.mirkosertic.de/blog/2023/01/magnetometer-calibration-ellipsoid/</link>
      <pubDate>Thu, 12 Jan 2023 00:00:00 +0100</pubDate>
      <guid>https://www.mirkosertic.de/blog/2023/01/magnetometer-calibration-ellipsoid/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_how_to_calibrate_a_2d_magnetometer_with_ellipsoid_fitting&#34;&gt;How to calibrate a 2D magnetometer with ellipsoid fitting&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;sect2&#34;&gt;&#xA;&lt;h3 id=&#34;_step_1_load_uncalibrated_magnetometer_data_as_csv&#34;&gt;Step 1: Load uncalibrated magnetometer data as CSV&lt;/h3&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;The data was recorded by logging data from the magnetometer.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Take care! This calibration process should be done while all systems of&#xA;your robot or solution are running, so in a real life environment. This&#xA;will make sure we take all hard iron influences into consideration.&#xA;Place the robot in the middle of a room and let your robot turn to the&#xA;left and to the right for a minute, and record the data.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Building a Smart Roomba: A Symphony of Hardware and ROS</title>
      <link>https://www.mirkosertic.de/blog/2022/10/roomba-series-1/</link>
      <pubDate>Thu, 13 Oct 2022 00:00:00 +0100</pubDate>
      <guid>https://www.mirkosertic.de/blog/2022/10/roomba-series-1/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_standing_on_the_shoulders_of_giants&#34;&gt;Standing on the shoulders of giants&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;My custom Roomba vacuum uses a lot of free available open source software. Without it, it wouldn’t be possible to create&#xA;and compose a complex system such as an autonomous robot in a reasonable amount of time.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;The core ingredients are:&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;ulist&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Raspberry Pi Zero 2 W&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Ubuntu 64bit OS&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Additional sensors, connected by USB, UART or I2C bus.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Robot Operating System (ROS), Noetic Release&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>DIY Robot Revolution: Transforming an Old Roomba into a Smart Autonomous System</title>
      <link>https://www.mirkosertic.de/blog/2022/02/roomba-series/</link>
      <pubDate>Sat, 19 Feb 2022 00:00:00 +0100</pubDate>
      <guid>https://www.mirkosertic.de/blog/2022/02/roomba-series/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_maybe_too_much_time&#34;&gt;Maybe too much time&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;I found an outdated Roomba 581 vacuum robot in the attic. I just couldn’t throw it away, so&#xA;I decided to pimp it a little.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;A new hobby project was born!&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;openblock float-group&#34;&gt;&#xA;&lt;div class=&#34;content&#34;&gt;&#xA;&lt;div class=&#34;paragraph left text-center&#34;&gt;&#xA;&lt;p&gt;Prototype:&#xA;&lt;span class=&#34;image&#34;&gt;&lt;img src=&#34;https://www.mirkosertic.de/media/roomba500.png&#34; alt=&#34;300&#34; width=&#34;300&#34;/&gt;&lt;/span&gt;&#xA;Release version:&#xA;&lt;span class=&#34;image&#34;&gt;&lt;img src=&#34;https://www.mirkosertic.de/media/roomba500_2.png&#34; alt=&#34;300&#34; width=&#34;300&#34;/&gt;&lt;/span&gt;&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;After all, the Roomba hardware is a good vacuum, and it offers a serial interface to read sensors and control the actuators. Only the robot brain and navigation systems are really outdated. I decided to give it a new brain with better navigation hardware, and reuse the&#xA;Roomba platform as a whole. Here are the ingredients:&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Transform Legacy Swing Apps into Modern Web Applications with JetBrains Projector</title>
      <link>https://www.mirkosertic.de/blog/2021/08/swing-jetbrains-projector/</link>
      <pubDate>Sun, 15 Aug 2021 00:00:00 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2021/08/swing-jetbrains-projector/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_a_story_of_two_worlds&#34;&gt;A story of two worlds&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Java Swing is part of the Java Runtime since version 1.2. Swing is also part of the Java Foundation Classes, which are the library for creating component bases, modular, portable, and cross-platform graphical user interfaces. Being part of the core runtime, Java Swing is a valid choice for a lot of projects running in a different environment, starting from tiny calculator applications to humongous insurance or tax administration systems.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Self-Contained Systems: A Practical Guide to Independent Software Architecture</title>
      <link>https://www.mirkosertic.de/blog/2021/04/scs-light-and-shadow/</link>
      <pubDate>Wed, 07 Apr 2021 00:00:00 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2021/04/scs-light-and-shadow/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_self_contained_cystem_what_is_it&#34;&gt;Self-Contained-Cystem, what is it?&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Self-Contained-System, referred to the following short SCS, is an architectural approach. The idea is to map requirements using individual,&#xA;functionally independent systems. These systems include everything for mapping the necessary requirements, starting with data management,&#xA;the actual business logic and finally a complete user interface. This makes these systems self-contained.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Each SCS should be looked after by its own development team. In addition to the technical separation of the systems, this architectural approach&#xA;should also facilitate the organizational separation. By avoiding dependencies, the teams also become more independent and therefore more flexible.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Modern Desktop Distribution Guide: Packaging JavaFX Apps Like a Pro</title>
      <link>https://www.mirkosertic.de/blog/2019/04/java-desktop-packaging/</link>
      <pubDate>Tue, 23 Apr 2019 00:00:00 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2019/04/java-desktop-packaging/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Packaging Java applications for the Desktop has never been an easy task. In this blog post I want to look at the past&#xA;to show where we are coming from, look at the present to see what we have now and finally try to take a look into the&#xA;future to get a glimpse of what might be coming.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_the_past_of_java_packaging&#34;&gt;The Past of Java Packaging&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Before Java 5.0 there was no built-in support in Java for application distribution, as far as what we would consider&#xA;an application. But there was hope. We had &lt;a href=&#34;https://www.oracle.com/technetwork/java/applets-137637.html&#34;&gt;Java Applets&lt;/a&gt;.&#xA;Applets used to be Java programs executed by a special plugin installed in our browser. This plugin downloaded the jar&#xA;files of the applet, and executed the code in an isolated, restricted sandbox. We used signed applets to escape this&#xA;sandbox and get full access to system resources. One problem remained: there was no built-in update mechanism. We only&#xA;had the browser cache to prevent jar files from being downloaded every time.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>My favorite postings</title>
      <link>https://www.mirkosertic.de/global/favorites/</link>
      <pubDate>Thu, 20 Dec 2018 00:00:00 +0200</pubDate>
      <guid>https://www.mirkosertic.de/global/favorites/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Here is a list of my favorite and evergreen postings so far:&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;ulist&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.mirkosertic.de/blog/2018/12/webassembly-and-vuejs/&#34;&gt;WebAssembly with vue.js&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.mirkosertic.de/blog/2018/02/alicebobcaroldaveopencl/&#34;&gt;Alice, Bob, Carol and Dave OpenCL Edition&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.mirkosertic.de/blog/2018/01/object-oriented-webassembly/&#34;&gt;Object-Oriented WebAssembly&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.mirkosertic.de/blog/2017/06/compiling-bytecode-to-javascript/&#34;&gt;Bytecoder : A Low Level Bytecode to JavaScript Transpiler&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.mirkosertic.de/blog/2013/04/domain-driven-design-example/&#34;&gt;A Domain-driven Design Example&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.mirkosertic.de/blog/2017/02/improve-test-quality-with-mutationtesting/&#34;&gt;Improve Test Quality with Mutation Testing&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.mirkosertic.de/blog/2013/11/a-javafx-based-game-authoring-system/&#34;&gt;A JavaFX based Game Authoring System&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.mirkosertic.de/blog/2017/01/why-i-switched-to-static-html-generators/&#34;&gt;Why I switched to static HTML generators&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.mirkosertic.de/blog/2013/04/a-javafx-based-desktop-search-engine/&#34;&gt;A JavaFX based Desktop Search Engine&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.mirkosertic.de/blog/2014/12/gwt-vs-dragome-vs-teavm-for-game-programming/&#34;&gt;GWT vs. Dragome vs. TeaVM for Game Programming&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.mirkosertic.de/blog/2015/04/a-javafx-based-lua-editor/&#34;&gt;A JavaFX based LUA editor&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Supercharging Vue.js with WebAssembly and Java</title>
      <link>https://www.mirkosertic.de/blog/2018/12/webassembly-and-vuejs/</link>
      <pubDate>Thu, 20 Dec 2018 00:00:00 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2018/12/webassembly-and-vuejs/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_state_of_the_union&#34;&gt;State of the union&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;WebAssembly for starters is a standard for high-performance, size-optimized executable code for the Web.&#xA;It was released in March 2017 by the &lt;a href=&#34;https://www.w3.org/wasm/&#34;&gt;WebAssembly working group&lt;/a&gt; as version 1.0, which is basically a MVP&#xA;(Minimum Viable Product), but the initial development started in June 2017. WebAssembly is the successor&#xA;&lt;a href=&#34;http://asmjs.org/&#34;&gt;asm.js&lt;/a&gt; and the &lt;a href=&#34;https://developer.chrome.com/native-client&#34;&gt;Google Native Client (NaCL)&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;WebAssembly itself is merely a sandboxed runtime environment. It was designed as a compile target. High&#xA;level languages such as C/C++, Rust, .NET or Java can be compiled to WebAssembly. As a compile target, it&#xA;implements a set of binary opcodes, a module system and a stack machine making the opcodes executable. Modern&#xA;compiler can translate and optimize high level languages to low level WebAssembly modules.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Finding Love with GPU-Accelerated Matchmaking: A Tech Fairy Tale</title>
      <link>https://www.mirkosertic.de/blog/2018/02/alicebobcaroldaveopencl/</link>
      <pubDate>Thu, 01 Feb 2018 00:00:00 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2018/02/alicebobcaroldaveopencl/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_an_office_fairy_tale&#34;&gt;An office fairy tale&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Once upon a time in an office far far away worked four very nice IT people very hard&#xA;in their office cubicles. Their names were Alice, Bob, Carol and Dave.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;They worked very hard each day. They started work at 9 o’clock, and finished often&#xA;after sunset. They were very happy in their business, but they were very lonely&#xA;in their private life due to the amount of work they did every day.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Mastering Object-Oriented Programming in WebAssembly: From High-Level to Low-Level</title>
      <link>https://www.mirkosertic.de/blog/2018/01/object-oriented-webassembly/</link>
      <pubDate>Mon, 01 Jan 2018 12:00:00 +0100</pubDate>
      <guid>https://www.mirkosertic.de/blog/2018/01/object-oriented-webassembly/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Today, I want to write a little bit about object orientation and WebAssembly. For starters, what is WebAssembly?&#xA;WebAssembly is a new portable, size and load-time efficient format suitable for compilation to the web. It is an open&#xA;standard by a W3C community group and is currently integrated into all major browsers such as Firefox, Chrome, Edge and&#xA;WebKit. WebAssembly aims to keep download speed and parsing time of program code low and execute at native speed by&#xA;taking advance of common hardware capabilities available on a wide range of platforms. WebAssembly is basically bytecode&#xA;for the Web.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Crafting Smart Search: Building a Custom Query Parser for Apache Solr</title>
      <link>https://www.mirkosertic.de/blog/2017/10/custom-query-parser-for-solr/</link>
      <pubDate>Thu, 26 Oct 2017 00:00:00 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2017/10/custom-query-parser-for-solr/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Apache Solr is a very powerful and mature enterprise search server. It comes with a lot of handy&#xA;and useful features. One of its features is the query API.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Now, what is the query API? This API is used to search thru the indexed documents, as the name suggests.&#xA;But how are the documents searched? Well, the search is based on a search query. Basically the search query&#xA;is a string, and this string is passed to a so called query parser. The query parser then transforms the query&#xA;string to a Lucene query instance, which is then used by Solr to crawl the index and return found documents.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Bytecoder : A Low Level Bytecode to JavaScript Transpiler</title>
      <link>https://www.mirkosertic.de/blog/2017/06/compiling-bytecode-to-javascript/</link>
      <pubDate>Tue, 20 Jun 2017 00:00:00 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2017/06/compiling-bytecode-to-javascript/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_the_idea&#34;&gt;The Idea&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;JavaScript is everywhere! Almost every device we use today is connected to the Internet and supports JavaScript by its runtime environment. But in the same way new devices arrive on the market, old software written in plain old Java is still alive and useful. The idea is now to bridge the gap between this shiny new JavaScript world and our old but still useful legacy software written in Java.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Taming Microservices Chaos: Smart UI Integration with Server-Side Includes</title>
      <link>https://www.mirkosertic.de/blog/2017/03/integration-at-ui-level-with-server-side-includes/</link>
      <pubDate>Mon, 06 Mar 2017 00:00:00 +0100</pubDate>
      <guid>https://www.mirkosertic.de/blog/2017/03/integration-at-ui-level-with-server-side-includes/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_microservices_everywhere&#34;&gt;Microservices everywhere&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Today, &lt;a href=&#34;https://en.wikipedia.org/wiki/Microservices&#34;&gt;Microservices&lt;/a&gt; are a common software modeling technique. This style&#xA;is based on the principles behind &lt;a href=&#34;https://en.wikipedia.org/wiki/Domain-driven_design&#34;&gt;Domain-driven Design&lt;/a&gt;, where every&#xA;bounded context is equivalent to a service. If we also take the &lt;a href=&#34;https://12factor.net&#34;&gt;Twelve-Factor App&lt;/a&gt; manifesto into&#xA;consideration, we able to create scalable and cloud ready systems.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;But this design can also lead to problems. If we take the Microservice design too far(&lt;a href=&#34;https://en.wikipedia.org/wiki/Microservices&#34;&gt;Nanoservices&lt;/a&gt;), we are quickly getting way to&#xA;much services we can handle and maintain. There is also the risk that we are somehow violating the original bounded context&#xA;of our services, leading to lack of responsibility and functional encapsulation. Maybe the Microservices could degenerate&#xA;to some kind of remote data access object. If we do not respect the principle of independently deployable units, we&#xA;would be quickly creating a distributed, complex and very slow monolith.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Beyond Code Coverage: Supercharging Your Tests with Mutation Testing</title>
      <link>https://www.mirkosertic.de/blog/2017/02/improve-test-quality-with-mutationtesting/</link>
      <pubDate>Tue, 14 Feb 2017 00:00:00 +0100</pubDate>
      <guid>https://www.mirkosertic.de/blog/2017/02/improve-test-quality-with-mutationtesting/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_a_very_common_problem&#34;&gt;A very common problem&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Unit testing is a today must have. Together with &lt;a href=&#34;https://en.wikipedia.org/wiki/Test-driven_development&#34;&gt;Test-driven Development&lt;/a&gt;&#xA;and Frameworks such as &lt;a href=&#34;http://junit.org/junit4&#34;&gt;JUnit&lt;/a&gt; we can easily prove that our code fulfills a set of requirements and business invariants. We use metrics&#xA;like &amp;#34;Test coverage&amp;#34; to get insight about the completeness of our tests. A very common assumption taken from a test coverage of 80 percent&#xA;is that 80 percent of our code is tested and working correctly.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>From CMS to Static: A Journey to Blazing Fast Blogging</title>
      <link>https://www.mirkosertic.de/blog/2017/01/why-i-switched-to-static-html-generators/</link>
      <pubDate>Mon, 30 Jan 2017 01:43:48 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2017/01/why-i-switched-to-static-html-generators/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_the_beginning&#34;&gt;The Beginning&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;This Blog started its life a few years ago. At the beginning, I was using &lt;a href=&#34;https://www.dokuwiki.org&#34;&gt;DokuWiki&lt;/a&gt; for writing&#xA;and editing. This was good, but I was very limited by the provided editors and markup. So I came to the point that I needed&#xA;something else. And you will of course ask &amp;#34;what else&amp;#34;? Well, for a Blog, there is a very popular answer: Use &lt;a href=&#34;https://wordpress.org&#34;&gt;Wordpress&lt;/a&gt;!&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;So I installed Wordpress on my web host, and migrated the whole content. The migration task was easy. But I spent a lot of&#xA;time with decisions like &amp;#34;Which theme? Which plugin? What about SEO? I really spent too much time on this.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Spring Boot Admin UI: Your Mission Control for Spring Applications</title>
      <link>https://www.mirkosertic.de/blog/2016/12/a-spring-boot-admin-ui/</link>
      <pubDate>Sat, 31 Dec 2016 01:08:59 +0100</pubDate>
      <guid>https://www.mirkosertic.de/blog/2016/12/a-spring-boot-admin-ui/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Spring Boot is a very cool framework for building modern, cloud-ready software. It also comes with a set of production ready endpoints which allow to administrate and monitor running applications. Unfortunately there is no admin user interface included in Spring Boot.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;The good people at &lt;a href=&#34;https://www.codecentric.de/&#34;&gt;Codecentric&lt;/a&gt; recently released a very nice one, which is also available at GitHub. Here is a screenshot:&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;span class=&#34;image&#34;&gt;&lt;img src=&#34;https://www.mirkosertic.de/media/springbootadminui.png&#34; alt=&#34;springbootadminui&#34;/&gt;&lt;/span&gt;&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;This user interface is basically a Spring Boot Starter, so you have to include it into your own application to make it runnable. It comes with the following features:&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Beyond Null Checks: Smart Validation in Java with Lombok, JSR 303, and JSR 308</title>
      <link>https://www.mirkosertic.de/blog/2016/12/preconditions-lombok-jsr-303-and-jsr-308/</link>
      <pubDate>Wed, 14 Dec 2016 12:33:44 +0100</pubDate>
      <guid>https://www.mirkosertic.de/blog/2016/12/preconditions-lombok-jsr-303-and-jsr-308/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;A good method implementation validates all of its preconditions before it continues. Luckily there are different frameworks such as Project Lombok, JSR 303 Bean Validation API and JSR 308 Java Type Annotations available for this job.  All of them are based on Java Annotations at method arguments, but they differ in runtime and compile time behavior. Here are some examples.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_project_lombok&#34;&gt;Project Lombok&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Project Lombok adds language features for boilerplate free code to the Java ecosystem. It is based on the Java Annotation Processor facility of the Java compiler. One of the features is null check of method preconditions. This is basically done by annotating the method arguments with @lombok.NonNull as shown in the following example:&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Java to JavaScript: TeaVM Outperforms GWT in Compilation Speed Race</title>
      <link>https://www.mirkosertic.de/blog/2016/11/compile-time-speed-gwt-2-8-0-vs-teavm-0-4-3/</link>
      <pubDate>Thu, 24 Nov 2016 06:14:41 +0100</pubDate>
      <guid>https://www.mirkosertic.de/blog/2016/11/compile-time-speed-gwt-2-8-0-vs-teavm-0-4-3/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Some years ago I wrote a JavaFX based &lt;a href=&#34;https://www.mirkosertic.de/blog/2013/11/a-javafx-based-game-authoring-system/&#34;&gt;Game authoring system&lt;/a&gt;. It was also written to be ported to different run time environments by using transpiler technologies such as GWT or TeaVM. While TeaVM was heavily improved over time, I haven’t seen a new GWT release in the wild. Now, GWT 2.8.0 is released, and the question arises: Is the compiler still as slow as in 2.7? Well, lets take a look!&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Maven Magic: Removing Primary Artifacts While Keeping RPMs</title>
      <link>https://www.mirkosertic.de/blog/2016/06/how-to-remove-the-maven-primary-artifact-during-install-and-deploy-phase/</link>
      <pubDate>Fri, 17 Jun 2016 04:35:13 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2016/06/how-to-remove-the-maven-primary-artifact-during-install-and-deploy-phase/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Sometimes we use Maven “war” packaging and add the RPM Plugin to create a rpm which contains the project primary artifact. When this rpm needs to be published to the Maven repository, it can be added as a secondary artifact to the build. Here is an example of the plugin configuration in pom.xml:&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;listingblock&#34;&gt;&#xA;&lt;div class=&#34;content&#34;&gt;&#xA;&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&amp;lt;plugin&amp;gt;&#xA;&#x9;&amp;lt;groupId&amp;gt;org.codehaus.mojo&amp;lt;/groupId&amp;gt;&#xA;&#x9;&amp;lt;artifactId&amp;gt;rpm-maven-plugin&amp;lt;/artifactId&amp;gt;&#xA;&#x9;&amp;lt;executions&amp;gt;&#xA;&#x9;    &amp;lt;execution&amp;gt;&#xA;&#x9;&#x9;&amp;lt;goals&amp;gt;&#xA;&#x9;&#x9;    &amp;lt;goal&amp;gt;attached-rpm&amp;lt;/goal&amp;gt;&#xA;&#x9;&#x9;&amp;lt;/goals&amp;gt;&#xA;&#x9;&#x9;&amp;lt;phase&amp;gt;package&amp;lt;/phase&amp;gt;&#xA;&#x9;    &amp;lt;/execution&amp;gt;&#xA;&#x9;&amp;lt;/executions&amp;gt;&#xA;&amp;lt;/plugin&amp;gt;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;This configuration also installs the war and the rpm to the local and even remote repository. If you setup your Maven repository, for instance Nexus, as a yum repository, we are only interested in the rpm, so deploying the war to the repository is a waste of disk space.&#xA;Of course we could change the Maven packaging to RPM, but then we would have to declare the war plugin configuration by hand. But there is also another solution to remove the primary artifact from install and deploy phase. With a little bit of Groovy, we can do the following:&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Building a Dynamic Material Design List with Polymer Web Components</title>
      <link>https://www.mirkosertic.de/blog/2016/02/a-very-simple-polymer-web-component/</link>
      <pubDate>Mon, 01 Feb 2016 12:03:15 +0100</pubDate>
      <guid>https://www.mirkosertic.de/blog/2016/02/a-very-simple-polymer-web-component/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Web Components are a very amazing new feature of HTML5. Google released its &lt;a href=&#34;https://www.polymer-project.org/&#34;&gt;Polymer&lt;/a&gt; project which adds Web Components support to modern Web Browsers. Using Web Components, we can create very complex custom HTML Tags which are based on a very powerful templating engine, pretty cool JavaScript bindings, data model abstractions and also JavaScript and CSS encapsulation. Polymer comes with a set of already implemented components based on Googles Material Design which can be easily integrated into custom applications. Finally, Polymer has a &lt;a href=&#34;https://developers.google.com/web/tools/polymer-starter-kit&#34;&gt;Starter Kit&lt;/a&gt; Project, which can bring you up in a minimum amount of time to development speed with Polymer, Web Components and Single Page Web Applications.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Simple Job Scheduling in Java CDI with Quartz Integration</title>
      <link>https://www.mirkosertic.de/blog/2016/01/how-to-schedule-jobs-in-a-java-cdi-environment/</link>
      <pubDate>Sun, 24 Jan 2016 04:01:55 +0100</pubDate>
      <guid>https://www.mirkosertic.de/blog/2016/01/how-to-schedule-jobs-in-a-java-cdi-environment/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Often we need to schedule Jobs. Standard Java &lt;a href=&#34;http://weld.cdi-spec.org/&#34;&gt;CDI&lt;/a&gt; does not have a build in Job Scheduler feature. But this functionality can be easily implemented by using the CDI extension mechanism.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;I wrote a simple CDI extension for Job scheduling backed by the &lt;a href=&#34;https://quartz-scheduler.org/&#34;&gt;Quartz&lt;/a&gt; Framework. It is hosted at &lt;a href=&#34;https://github.com/mirkosertic/cdicron&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;To schedule a Job, we basically need to do the following things:&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;a) add the following Maven dependency(available from Central Repository):&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;listingblock xml&#34;&gt;&#xA;&lt;div class=&#34;content&#34;&gt;&#xA;&lt;pre class=&#34;highlight&#34;&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;&#xA;    &amp;lt;groupId&amp;gt;de.mirkosertic.cdicron&amp;lt;/groupId&amp;gt;&#xA;    &amp;lt;artifactId&amp;gt;cdi-cron-quartz-scheduler&amp;lt;/artifactId&amp;gt;&#xA;    &amp;lt;version&amp;gt;1.0&amp;lt;/version&amp;gt;&#xA;&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Mastering Maven Artifact Downloads with Eclipse Aether: A Developer&#39;s Guide</title>
      <link>https://www.mirkosertic.de/blog/2015/12/how-to-download-maven-artifacts-with-maven-3-1-and-eclipse-aether/</link>
      <pubDate>Tue, 29 Dec 2015 11:50:42 +0100</pubDate>
      <guid>https://www.mirkosertic.de/blog/2015/12/how-to-download-maven-artifacts-with-maven-3-1-and-eclipse-aether/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Starting with Maven 3.1, Sonatype Aether(&lt;a href=&#34;https://github.com/sonatype/sonatype-aether&#34;&gt;github.com/sonatype/sonatype-aether&lt;/a&gt; ) was replaced with Eclipse Eather(&lt;a href=&#34;http://www.eclipse.org/aether&#34;&gt;www.eclipse.org/aether&lt;/a&gt; ). Now, sometimes we need do download additional Artifacts from Maven repositories during execution time of custom Maven plugins. As the Maven and Aether documentation is not very handsome, here is a short example about how to programmatically download and resolve Maven Artifacts using Maven 3.1 and later with the Eclipse Aether API:&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;listingblock&#34;&gt;&#xA;&lt;div class=&#34;content&#34;&gt;&#xA;&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;import java.io.File;&#xA;import java.util.ArrayList;&#xA;import java.util.List;&#xA;&#xA;import org.apache.maven.execution.MavenSession;&#xA;import org.apache.maven.plugin.AbstractMojo;&#xA;import org.apache.maven.plugin.BuildPluginManager;&#xA;import org.apache.maven.plugin.MojoExecutionException;&#xA;import org.apache.maven.plugins.annotations.Component;&#xA;import org.apache.maven.plugins.annotations.LifecyclePhase;&#xA;import org.apache.maven.plugins.annotations.Mojo;&#xA;import org.apache.maven.plugins.annotations.Parameter;&#xA;import org.apache.maven.project.MavenProject;&#xA;&#xA;import org.eclipse.aether.RepositorySystem;&#xA;import org.eclipse.aether.RepositorySystemSession;&#xA;import org.eclipse.aether.artifact.Artifact;&#xA;import org.eclipse.aether.artifact.DefaultArtifact;&#xA;import org.eclipse.aether.collection.CollectRequest;&#xA;import org.eclipse.aether.graph.DependencyFilter;&#xA;import org.eclipse.aether.repository.RemoteRepository;&#xA;import org.eclipse.aether.resolution.ArtifactResult;&#xA;import org.eclipse.aether.resolution.DependencyRequest;&#xA;import org.eclipse.aether.resolution.DependencyResolutionException;&#xA;import org.eclipse.aether.resolution.DependencyResult;&#xA;import org.eclipse.aether.util.artifact.JavaScopes;&#xA;import org.eclipse.aether.util.filter.DependencyFilterUtils;&#xA;&#xA;@Mojo(name = &amp;#34;download-mojo&amp;#34;, defaultPhase = LifecyclePhase.PACKAGE)&#xA;public class DownloadMojo extends AbstractMojo {&#xA;&#xA;    @Component&#xA;    private MavenProject mavenProject;&#xA;&#xA;    @Component&#xA;    private MavenSession mavenSession;&#xA;&#xA;    @Component&#xA;    private BuildPluginManager pluginManager;&#xA;&#xA;    @Component&#xA;    private RepositorySystem repositorySystem;&#xA;&#xA;    @Parameter(defaultValue = &amp;#34;${repositorySystemSession}&amp;#34;, readonly = true)&#xA;    private RepositorySystemSession repositorySystemSession;&#xA;&#xA;    @Parameter(defaultValue = &amp;#34;${project.remotePluginRepositories}&amp;#34;, readonly = true)&#xA;    private List&amp;lt;RemoteRepository&amp;gt; remoteRepositories;&#xA;&#xA;    public void execute() throws MojoExecutionException {&#xA;              // We want to collect the files in our local repository here&#xA;              List theResult = new ArrayList&amp;lt;&amp;gt;();&#xA;&#xA;              String theGroupId = &amp;#34;&amp;#34;; // Replace with your Artifact&#xA;              String theArtifactId = &amp;#34;&amp;#34;; // Replace with your Artifact&#xA;              String theArtifactVersion = &amp;#34;&amp;#34;; // Replace with your Artifact&#xA;              String theClassifier = &amp;#34;&amp;#34;; // Replace with your Artifact&#xA;              String theExtension = &amp;#34;&amp;#34;; // Replace with your Artifact&#xA;              String theScope = JavaScopes.COMPILE; // Replace with your Artifact&#xA;&#xA;              // We create a collect request here&#xA;              // By adding the remote repositories we force Aether to download artifacts if they&#xA;              // are not already in the local reposaitory&#xA;              CollectRequest theCollectRequest = new CollectRequest();&#xA;              theCollectRequest.setRoot(new org.eclipse.aether.graph.Dependency(new DefaultArtifact(theGroupId, theArtifactId,&#xA;                               theClassifier, theExtension, theArtifactVersion), theScope));&#xA;              for (RemoteRepository theRepository : remoteRepositories) {&#xA;                        theCollectRequest.addRepository(theRepository);&#xA;              }&#xA;&#xA;              // We filter dependencies here, as we only want compile scope&#xA;              DependencyFilter theDependencyFilter = DependencyFilterUtils.classpathFilter(theScope);&#xA;              DependencyRequest theDependencyRequest = new DependencyRequest(theCollectRequest, theDependencyFilter);&#xA;              try {&#xA;                        DependencyResult theDependencyResult = repositorySystem.resolveDependencies(repositorySystemSession, theDependencyRequest);&#xA;                        for (ArtifactResult theArtifactResult : theDependencyResult.getArtifactResults()) {&#xA;                                  Artifact theResolved = theArtifactResult.getArtifact();&#xA;                                  // Now we have the artifact file locally stored available&#xA;                                  // and we can do something with it&#xA;                                  File theLocallyStoredFile = theResolved.getFile();&#xA;                                  theResult.add(theLocallyStoredFile);&#xA;                        }&#xA;               } catch (DependencyResolutionException e) {&#xA;                        throw new MojoExecutionException(&amp;#34;Error while resolving dependency&amp;#34;, e);&#xA;               }&#xA;    }&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Building a Powerful LUA Script Editor with JavaFX and Ace</title>
      <link>https://www.mirkosertic.de/blog/2015/04/a-javafx-based-lua-editor/</link>
      <pubDate>Fri, 03 Apr 2015 05:32:40 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2015/04/a-javafx-based-lua-editor/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;One of my favorite projects is my JavaFX based &lt;a href=&#34;https://www.mirkosertic.de/blog/2013/11/a-javafx-based-game-authoring-system/&#34;&gt;Gameengine&lt;/a&gt;. It has a flexible entity component system, supports WYSIWYG game design and also has multiplayer network support. The entity component system is backed by a LUA based scripting system, the game designer can react freely on game events and script entity behaviors with the wonderful LUA scripting engine.&#xA;Now, the game designer needs a visual tool with syntax highlighting, clipboard support and also some kind of testing mode to write bug free LUA scripts. Luckily I was able to build this with JavaFX, and here is a final screenshot:&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Supercharging HTML5 Canvas Text Performance: A Game-Changing Optimization</title>
      <link>https://www.mirkosertic.de/blog/2015/03/tuning-html5-canvas-filltext/</link>
      <pubDate>Wed, 25 Mar 2015 07:33:48 +0100</pubDate>
      <guid>https://www.mirkosertic.de/blog/2015/03/tuning-html5-canvas-filltext/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Two years ago I wrote a Java based &lt;a href=&#34;https://www.mirkosertic.de/blog/2013/11/a-javafx-based-game-authoring-system/&#34;&gt;GameEngine&lt;/a&gt;. I used technologies such as GWT and TeaVM to transpile the Java source code to JavaScript. The Game Engine used the HTML5 Canvas to render the current game state representation to the user. For the past few weeks I had some time to implement new features for this cool engine. I also did some profiling to see if there are bottlenecks in the rendering code. During the profiling sessions already known facts became visible: some browsers perform better than others.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Impressum</title>
      <link>https://www.mirkosertic.de/global/impressum/</link>
      <pubDate>Tue, 30 Dec 2014 00:00:00 +0200</pubDate>
      <guid>https://www.mirkosertic.de/global/impressum/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_impressum&#34;&gt;Impressum&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;strong&gt;Angaben gemäß § 5 TMG&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Mirko Sertic&lt;br/&gt;&#xA;Josefine-Mauser-Straße 66&lt;br/&gt;&#xA;48157 Münster&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;strong&gt;Kontakt&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Telefon: 01575-1337193&lt;br/&gt;&#xA;E-Mail: &lt;a href=&#34;mailto:mirko@mirkosertic.de&#34;&gt;mirko@mirkosertic.de&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;sect2&#34;&gt;&#xA;&lt;h3 id=&#34;_haftungsausschluss&#34;&gt;Haftungsausschluss&lt;/h3&gt;&#xA;&lt;div class=&#34;sect3&#34;&gt;&#xA;&lt;h4 id=&#34;_haftung_für_inhalte&#34;&gt;Haftung für Inhalte&lt;/h4&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Die Inhalte dieser Seiten wurden mit größter Sorgfalt erstellt. Für die Richtigkeit, Vollständigkeit und Aktualität der&#xA;Inhalte kann ich jedoch keine Gewähr übernehmen. Als Diensteanbieter bin ich gemäß § 7 Abs.1 TMG für eigene Inhalte auf&#xA;diesen Seiten nach den allgemeinen Gesetzen verantwortlich. Nach §§ 8 bis 10 TMG bin ich als Diensteanbieter jedoch nicht&#xA;verpflichtet, übermittelte oder gespeicherte fremde Informationen zu überwachen oder nach Umständen zu forschen, die auf&#xA;eine rechtswidrige Tätigkeit hinweisen. Verpflichtungen zur Entfernung oder Sperrung der Nutzung von Informationen nach&#xA;den allgemeinen Gesetzen bleiben hiervon unberührt. Eine diesbezügliche Haftung ist jedoch erst ab dem Zeitpunkt der&#xA;Kenntnis einer konkreten Rechtsverletzung möglich. Bei Bekanntwerden von entsprechenden Rechtsverletzungen werde ich&#xA;diese Inhalte umgehend entfernen.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Java-to-JavaScript Game Development: Battle of the Transpilers</title>
      <link>https://www.mirkosertic.de/blog/2014/12/gwt-vs-dragome-vs-teavm-for-game-programming/</link>
      <pubDate>Thu, 18 Dec 2014 11:43:01 +0100</pubDate>
      <guid>https://www.mirkosertic.de/blog/2014/12/gwt-vs-dragome-vs-teavm-for-game-programming/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Last year I wrote a &lt;a href=&#34;https://www.mirkosertic.de/blog/2013/11/a-javafx-based-game-authoring-system/&#34;&gt;cross platform game engine&lt;/a&gt;. It used a JavaFX based Game Authoring System and had a Java based Game Runtime, which was transpiled to different platforms such as Android, JavaScript over GWT and JavaFX.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Here is a screenshot of a simple platform game based on the GameEngine, some physics stuff and a lot of Java code:&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;span class=&#34;image&#34;&gt;&lt;img src=&#34;https://www.mirkosertic.de/media/dukejumprunchrome.png&#34; alt=&#34;dukejumprunchrome&#34;/&gt;&lt;/span&gt;&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Here is also a screenshot of the JavaFX based game authoring system while editing the example game:&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Dynamic HTML Base Tag Generation in JSP: A Clean Solution</title>
      <link>https://www.mirkosertic.de/blog/2014/10/how-to-set-the-html-base-tag-in-a-jsp-page/</link>
      <pubDate>Fri, 31 Oct 2014 03:57:50 +0100</pubDate>
      <guid>https://www.mirkosertic.de/blog/2014/10/how-to-set-the-html-base-tag-in-a-jsp-page/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Sometimes we have to set the HTML base Tag from within a JSP page. For this purpose, we have to compute the correct URL, because the JSP API does not fully expose it. The following shipped shows how it can be cone:&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;listingblock&#34;&gt;&#xA;&lt;div class=&#34;content&#34;&gt;&#xA;&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-jsp&#34; data-lang=&#34;jsp&#34;&gt;&amp;lt;%@ page contentType=&amp;#34;text/html;charset=UTF-8&amp;#34; language=&amp;#34;java&amp;#34; %&amp;gt;&#xA;&amp;lt;%@ taglib prefix=&amp;#34;fn&amp;#34; uri=&amp;#34;http://java.sun.com/jsp/jstl/functions&amp;#34; %&amp;gt;&#xA;&amp;lt;c:set var=&amp;#34;req&amp;#34; value=&amp;#34;${pageContext.request}&amp;#34; /&amp;gt;&#xA;&amp;lt;c:set var=&amp;#34;url&amp;#34;&amp;gt;${req.requestURL}&amp;lt;/c:set&amp;gt;&#xA;&amp;lt;c:set var=&amp;#34;uri&amp;#34; value=&amp;#34;${req.requestURI}&amp;#34; /&amp;gt;&#xA;&amp;lt;!doctype html&amp;gt;&#xA;&amp;lt;html&amp;gt;&#xA;    &amp;lt;head&amp;gt;&#xA;        &amp;lt;base href=&amp;#34;${fn:substring(url, 0, fn:length(url) - fn:length(uri))}${req.contextPath}/&amp;#34;&amp;gt;&#xA;        &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;style.css&amp;#34;&amp;gt;&#xA;    &amp;lt;/head&amp;gt;&#xA;    &amp;lt;body&amp;gt;&#xA;    &amp;lt;/body&amp;gt;&#xA;&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Log4J Magic: Creating Human-Friendly, Scannable Log Files</title>
      <link>https://www.mirkosertic.de/blog/2014/06/how-to-create-user-and-eye-friendly-scannable-log4j-log-files/</link>
      <pubDate>Fri, 13 Jun 2014 09:07:11 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2014/06/how-to-create-user-and-eye-friendly-scannable-log4j-log-files/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Often we are writing logs files for our program execution. The logs are sometimes hard to parse, we have to look twice at them to detect error patterns. But it is possible to create a log file layout that is very fast human scannable. Using such kind of log file layout, we can easier scan for common error patterns.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;This can easily be achieved using Log4J and some custom configuration using the Log4J EnhancedPatternLayout. Here is an example:&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Building Cross-Platform Games with JavaFX: A Modern Game Engine Adventure</title>
      <link>https://www.mirkosertic.de/blog/2013/11/a-javafx-based-game-authoring-system/</link>
      <pubDate>Fri, 15 Nov 2013 08:35:32 +0100</pubDate>
      <guid>https://www.mirkosertic.de/blog/2013/11/a-javafx-based-game-authoring-system/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;A few weeks ago I decided to enhance my knowledge in game coding, so I bought two very interesting books: “Real-Time Rendering, Third Edition by Thomas Akenine-Möller, Eric Haines and Nety Hoffmann” and “Game Coding Complete, Fourth Edition by Mike McShaffry and David “Rez” Graham”. After some insightful moments, hundreds of pages read and sleepless nights, I wanted to create my own game. So this project was born.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Primary Goals&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Type-Safe Property Access in Java: The Owner Library Revolution</title>
      <link>https://www.mirkosertic.de/blog/2013/11/java-properties-reinvented/</link>
      <pubDate>Tue, 05 Nov 2013 04:28:08 +0100</pubDate>
      <guid>https://www.mirkosertic.de/blog/2013/11/java-properties-reinvented/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Recently i stumbled across the Owner Library(&lt;a href=&#34;http://owner.aeonbits.org&#34;&gt;owner.aeonbits.org&lt;/a&gt; ). Using this small piece of technology, usage of Java property files can be reinvented! Now we can access properties using a refactoring safe interface the following way:&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;listingblock&#34;&gt;&#xA;&lt;div class=&#34;content&#34;&gt;&#xA;&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;public interface ServerConfig extends Config {&#xA;    @Key(&amp;#34;server.http.port&amp;#34;)&#xA;    int port();&#xA;&#xA;&#xA;    @Key(&amp;#34;server.host.name&amp;#34;)&#xA;    String hostname();&#xA;&#xA;&#xA;    @Key(&amp;#34;server.max.threads&amp;#34;);&#xA;    @DefaultValue(&amp;#34;42&amp;#34;)&#xA;    int maxThreads();&#xA;}&#xA;&#xA;Properties props = new Properties(); // Load properties from a known source&#xA;&#xA;&#xA;ServerConfig cfg = ConfigFactory&#xA;    .create(ServerConfig.class, props);&#xA;&#xA;&#xA;System.out.println(cfg.hostname()); // And simply use them&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>The Hidden Cost of Array Iteration: A Java Performance Deep Dive</title>
      <link>https://www.mirkosertic.de/blog/2013/10/java-array-iterator-performance/</link>
      <pubDate>Sun, 13 Oct 2013 04:25:52 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2013/10/java-array-iterator-performance/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Lets check a very simple example: we want to fill a multi-dimensional array with values. What is the fastest way to do so? The following piece of code gives us surprising results:&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;listingblock&#34;&gt;&#xA;&lt;div class=&#34;content&#34;&gt;&#xA;&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;public class CacheTest {&#xA;&#xA;    final int SIZE = 256;&#xA;&#xA;    void rowOrderTest() {&#xA;        int theArray[][][] = new int[SIZE][SIZE][SIZE];&#xA;        long theTime = System.currentTimeMillis();&#xA;        for (int i = 0; i &amp;lt;SIZE; i++) {&#xA;            for (int j = 0; j &amp;lt;SIZE; j++) {&#xA;                for (int k = 0; k &amp;lt;SIZE; k++) {&#xA;                    theArray[i][j][k] = 1;&#xA;                }&#xA;            }&#xA;        }&#xA;        System.out.println(&amp;#34;RowOrder : &amp;#34; + (System.currentTimeMillis() - theTime));&#xA;    }&#xA;&#xA;    void columnOrderTest() {&#xA;        int theArray[][][] = new int[SIZE][SIZE][SIZE];&#xA;        long theTime = System.currentTimeMillis();&#xA;        for (int k = 0; k &amp;lt;SIZE; k++) {&#xA;            for (int j = 0; j &amp;lt;SIZE; j++) {&#xA;                for (int i = 0; i &amp;lt;SIZE; i++) {&#xA;                    theArray[i][j][k] = 1;&#xA;                }&#xA;            }&#xA;        }&#xA;        System.out.println(&amp;#34;ColumnOrder : &amp;#34; + (System.currentTimeMillis() - theTime));&#xA;    }&#xA;&#xA;    void arrayTest1() {&#xA;&#xA;        long theCounter = 0;&#xA;&#xA;        int theArray[] = new int[SIZE*SIZE*SIZE];&#xA;        long theTime = System.currentTimeMillis();&#xA;        for (int i = 0; i &amp;lt;SIZE; i++) {&#xA;            for (int j = 0; j &amp;lt;SIZE; j++) {&#xA;                for (int k = 0; k &amp;lt;SIZE; k++) {&#xA;                    theArray[i*SIZE*SIZE+j*SIZE+k] = 1;&#xA;                    theCounter++;&#xA;                }&#xA;            }&#xA;        }&#xA;        System.out.println(&amp;#34;ArrayTest1 : &amp;#34; + (System.currentTimeMillis() - theTime) + &amp;#34; #&amp;#34; + theCounter);&#xA;    }&#xA;&#xA;    void arrayTest2() {&#xA;&#xA;        int theArray[] = new int[SIZE*SIZE*SIZE];&#xA;        long theTime = System.currentTimeMillis();&#xA;        Arrays.fill(theArray, 0);&#xA;        System.out.println(&amp;#34;ArrayTest2 : &amp;#34; + (System.currentTimeMillis() - theTime));&#xA;    }&#xA;&#xA;    void arrayTest3() {&#xA;&#xA;        int theCounter = 0;&#xA;&#xA;        int theArray[] = new int[SIZE*SIZE*SIZE];&#xA;        long theTime = System.currentTimeMillis();&#xA;        for (int i = 0; i &amp;lt;SIZE; i++) {&#xA;            for (int j = 0; j &amp;lt;SIZE; j++) {&#xA;                for (int k = 0; k &amp;lt;SIZE; k++) {&#xA;                    theArray[theCounter] = 1;&#xA;                    theCounter++;&#xA;                }&#xA;            }&#xA;        }&#xA;        System.out.println(&amp;#34;ArrayTest3 : &amp;#34; + (System.currentTimeMillis() - theTime) + &amp;#34; #&amp;#34; + theCounter);&#xA;    }&#xA;&#xA;     public static void main(String[] args) {&#xA;        CacheTest theTest = new CacheTest();&#xA;        theTest.rowOrderTest();&#xA;        theTest.columnOrderTest();&#xA;        theTest.arrayTest1();&#xA;        theTest.arrayTest2();&#xA;        theTest.arrayTest3();&#xA;    }&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Enabling Java EE Features in CDI SE: A Portable Extension Magic Trick</title>
      <link>https://www.mirkosertic.de/blog/2013/10/java-se-context-and-dependency-injection-with-java-ee-support/</link>
      <pubDate>Thu, 03 Oct 2013 06:02:44 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2013/10/java-se-context-and-dependency-injection-with-java-ee-support/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Java CDI(Context and Dependency Injection) JSR-299 is available on Java EE application servers, but CDI(Weld is the reference implementation) is also embeddable in Java SE standard edition. Unfortunately Java EE functionalities like security or transaction support are not available here, for instance the following code just does not work as expected when running on CDI SE:&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;listingblock&#34;&gt;&#xA;&lt;div class=&#34;content&#34;&gt;&#xA;&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;@Singleton&#xA;public class WeldBean {&#xA;&#xA;    @Resource&#xA;    Principal principal;&#xA;&#xA;    @RolesAllowed(&amp;#34;securedrole&amp;#34;)&#xA;    public void run() {&#xA;        System.out.println(&amp;#34;Hello World : &amp;#34;+principal);&#xA;    }&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>JUnit Test Assertions Made Easy: Generate Instead of Write</title>
      <link>https://www.mirkosertic.de/blog/2013/10/how-to-create-junit-assertions-from-running-applications/</link>
      <pubDate>Tue, 01 Oct 2013 07:20:37 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2013/10/how-to-create-junit-assertions-from-running-applications/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;JUnit is a cool and powerful framework for unit test creation. But there is a drawback: we need to create a lot of assertions! Without assertions, we can create a very good path coverage, but it is not guaranteed that the code works correctly. This can be really cumbersome while we are working with big JavaBeans or Entities. Check for instance the following piece of code:&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;listingblock&#34;&gt;&#xA;&lt;div class=&#34;content&#34;&gt;&#xA;&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;public class BeanTest {&#xA;&#xA;    @Test&#xA;    public void testCreate() {&#xA;        ClassToTest theCandidate = new ClassToTest();&#xA;        TestBean theTestBean = theCandidate.create();&#xA;&#xA;        // Here we need to generate assertions?&#xA;        System.out.println(theTestBean);&#xA;    }&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Building Modern Enterprise Apps: DDD meets JSF, EJB, and CDI</title>
      <link>https://www.mirkosertic.de/blog/2013/09/domain-driven-design-with-jsf-ejb-and-cdi/</link>
      <pubDate>Sun, 22 Sep 2013 06:08:29 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2013/09/domain-driven-design-with-jsf-ejb-and-cdi/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Based on my previous post about &lt;a href=&#34;https://www.mirkosertic.de/blog/2013/04/domain-driven-design-example/&#34;&gt;Domain-driven Design Architecture&lt;/a&gt; i want to offer some implementation details about how to build a DDD-style application based on JSF2, PrettyFaces, EJB and CDI. I will give some code samples to give you an idea about how to start with this topic. Everything else is up to you :-). Also please note that most of the ideas in this example is inspired by the CEC-ECB(CDI-EJB-CDI Entity-Control-Boundary) patterns as described by Oracle for the JEE6 design.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Simple CDI Magic: Command Line Apps with Weld and Static Producers</title>
      <link>https://www.mirkosertic.de/blog/2013/09/bootstrapping-weld-cdi-from-command-line-with-java-se/</link>
      <pubDate>Sat, 21 Sep 2013 03:03:19 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2013/09/bootstrapping-weld-cdi-from-command-line-with-java-se/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;It is possible to use CDI and Weld in a Java command line program. There are several options to bootstrap the CDI container. Weld offers a special Main class that does the job for us. But sometimes we just want to shield the CDI dependencies and provide our own main method. Now comes the tricky part: how do we pass command line arguments to the container, or even boot managed beans by injecting command line argument?&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Building a Touch-Responsive OpenGL Triangle on Android</title>
      <link>https://www.mirkosertic.de/blog/2013/09/opengl2-on-android-example/</link>
      <pubDate>Thu, 05 Sep 2013 08:46:56 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2013/09/opengl2-on-android-example/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;The last days i fiddled a bit with OpenGL 2 on Android. The Android OpenGL tutorials are a bit outdated, so i had to do some API research by myself and copy and merge the provided examples together. Here is a screenshot of the running OpenGL App:&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;span class=&#34;image&#34;&gt;&lt;img src=&#34;https://www.mirkosertic.de/media/openglandroidapp.png&#34; alt=&#34;openglandroidapp&#34;/&gt;&lt;/span&gt;&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;It supports touch events to rotate a triangle around and render the animation.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;To run OpenGL, we need the base Activity class as follows:&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Java String Iteration: The Hidden Performance Trap</title>
      <link>https://www.mirkosertic.de/blog/2013/09/comparison-of-string-iterator-performance/</link>
      <pubDate>Thu, 05 Sep 2013 08:35:15 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2013/09/comparison-of-string-iterator-performance/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Often we need to iterate over a String. Java gives use several options. We can either use a simple loop with an index using the following style:&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;listingblock&#34;&gt;&#xA;&lt;div class=&#34;content&#34;&gt;&#xA;&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;for (int i=0;i&amp;lt;theLine.length();i++) {&#xA;   char theCurrentChar = theLine.charAt(i);&#xA;   // Do something with the character&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Or we can use the advanced for style using a character array the following way:&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;listingblock&#34;&gt;&#xA;&lt;div class=&#34;content&#34;&gt;&#xA;&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;for (char theCurrentChar : theLine.toCharArray())  {&#xA;  // Do something with the character&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Building a Real-time Face Detection App: OpenCV meets Android</title>
      <link>https://www.mirkosertic.de/blog/2013/07/realtime-face-detection-on-android-using-opencv/</link>
      <pubDate>Sat, 27 Jul 2013 06:20:34 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2013/07/realtime-face-detection-on-android-using-opencv/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;There is a cool computer vision library called &lt;a href=&#34;http://opencv.org/&#34;&gt;OpenCV&lt;/a&gt; available. Using OpenCV, we can do stuff like object detection, feature extraction and other computer vision tasks. OpenCV is a native library, but it also comes with JNI Wrappers for Java and the Android platform.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;For the beginning, i want to implement real time face detection on my Samsung Galaxy S3 with OpenCV and some Java code. Here is a screenshot of the final result:&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>High performance Android handwriting</title>
      <link>https://www.mirkosertic.de/blog/2013/07/high-performance-android-handwriting/</link>
      <pubDate>Tue, 09 Jul 2013 07:56:21 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2013/07/high-performance-android-handwriting/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;For one of my Android Apps &lt;a href=&#34;https://play.google.com/store/apps/details?id=de.mirkosertic.easypaint&#34;&gt;Leas Painting App&lt;/a&gt; i needed to implement a sketching and handwriting functionality. The user must be able to draw with his fingers on the canvas and sketch something. This is a screenshot of my App:&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;span class=&#34;image&#34;&gt;&lt;img src=&#34;https://www.mirkosertic.de/media/leaspaintingapp.png&#34; alt=&#34;leaspaintingapp&#34;/&gt;&lt;/span&gt;&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;But on my way i had to tweak with Android to make the App responsive even on slower devices. Here are my findings about how to keep everything responsive and smooth:&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Effortless Method Validation: Combining JSR303 and AspectJ Magic</title>
      <link>https://www.mirkosertic.de/blog/2013/06/method-validation-with-jsr303-and-aspectj/</link>
      <pubDate>Wed, 26 Jun 2013 10:29:19 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2013/06/method-validation-with-jsr303-and-aspectj/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Hibernate Validator since version 4.2 supports method validation. For instance consider the following Java code:&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;listingblock&#34;&gt;&#xA;&lt;div class=&#34;content&#34;&gt;&#xA;&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;package de.mirkosertic.aspectj;&#xA;&#xA;import javax.validation.constraints.NotNull;&#xA;&#xA;public class Example {&#xA;&#xA;    public void doNothing(String aValue) {&#xA;    }&#xA;&#xA;    public String getString(String aValue) {&#xA;        return aValue;&#xA;    }&#xA;&#xA;    public @NotNull String getNullString(String aValue) {&#xA;        return aValue;&#xA;    }&#xA;&#xA;    public void doNothingSingleNotNull(@NotNull String aValue) {&#xA;    }&#xA;&#xA;    public void doNothingMiddleNotNull(String aStart,@NotNull String aValue, String aEnd) {&#xA;    }&#xA;&#xA;    public void doNothingEndNotNull(String aStart,String aValue, @NotNull String aEnd) {&#xA;    }&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Java Serialization Showdown: XML vs JSON vs Native - Surprising Performance Results</title>
      <link>https://www.mirkosertic.de/blog/2013/05/comparison-of-jaxb-xml-and-json-serialization-performance/</link>
      <pubDate>Thu, 23 May 2013 07:33:05 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2013/05/comparison-of-jaxb-xml-and-json-serialization-performance/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Once i tried to figure out the difference between JAXB XML and JSON Java Object serialization performance. I wanted to know which one has the better run time performance and thus scales better. Here are the results!&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;The test setup is a Windows 7 64bit machine with Intel Core2 Quad Q9450 CPU @2,66GHz. Java Runtime is 1.7.0_07(quite old, i know)&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;The profiling test case is to serialize and deserialize a simple Java object with JSON and XML. I wanted to run the process 1000, 10000, 100000 and 1000000 times. In contrast i used JSON, XML, Java ObjectOutputStream and Google Kryo. The following table shows the measures:&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Supercharging Web Integration: JavaFX Meets HTML5 Microdata Magic</title>
      <link>https://www.mirkosertic.de/blog/2013/05/building-portals-with-javafx-html5-and-some-microdata/</link>
      <pubDate>Tue, 07 May 2013 09:37:10 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2013/05/building-portals-with-javafx-html5-and-some-microdata/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Often we need to integrate different applications. This can be done at different integration levels, like integration using the database, integration using services and sometimes integration at user interface level.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Different solutions are available for user interface level application integration. The most famous are Portlets. A Portlet requires a Portlet Container to build a Portal. These containers are expensive, difficult to configure and maintain and the worst point is: the Portlet API is very limited to model complex integration scenarios!&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Supercharge JavaFX Data Visualization with D3.js Integration</title>
      <link>https://www.mirkosertic.de/blog/2013/05/javafx-custom-controls-or-webview-with-d3-js/</link>
      <pubDate>Thu, 02 May 2013 04:27:47 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2013/05/javafx-custom-controls-or-webview-with-d3-js/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Often we need to visualize complex data in a fancy way. The core JavaFX controls are sometimes capable to do it, but most of the time they are not. So the question is: do we need to write a custom control?&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;The answer is: depends! Since JavaFX supports the famous WebView, we can also use some embedded HTML5 with JavaScript libraries like &lt;a href=&#34;http://d3js.org/&#34;&gt;D3.js&lt;/a&gt; to visualize data driven documents.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;To show how this works i used the &lt;a href=&#34;https://www.mirkosertic.de/blog/2013/04/a-javafx-based-desktop-search-engine/&#34;&gt;JavaFX Desktop Search&lt;/a&gt; example and added an animated sunburst chart with D3.js support to show the document distribution by author, last modification time stamp and document type. This is how it looks:&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Building a Better Desktop Search: A JavaFX and Lucene Powered Solution</title>
      <link>https://www.mirkosertic.de/blog/2013/04/a-javafx-based-desktop-search-engine/</link>
      <pubDate>Fri, 26 Apr 2013 09:17:13 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2013/04/a-javafx-based-desktop-search-engine/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Microsoft Windows search is not fast, and it also does not give us good search results. So i thought about writing my own Search Engine for the Desktop. It should crawl the file system, extract the content and meta data and finally should give the same results as Google.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;I also wanted to test some new technologies like JavaFX with embedded HTML5, Apache Lucene as a full text search engine, Apache Tika as the content extraction framework and other stuff. But before we dive deep into internals, lets take a look at the frontend:&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Building a Google-Style Search Parser for Lucene: Simple Yet Powerful</title>
      <link>https://www.mirkosertic.de/blog/2013/04/google-style-query-parser-for-apache-lucene/</link>
      <pubDate>Fri, 26 Apr 2013 08:29:50 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2013/04/google-style-query-parser-for-apache-lucene/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;I needed a query parser for Apache Lucene supporting Google style queries. Basically the following searches should be supported:&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;mirko sertic → Should result in a BooleanQuery with “mirko” and “sertic”&#xA;+mirko+sertic → Should result in a BooleanQuery with “mirko” and “sertic”&#xA;+mirko +sertic → Should result in a BooleanQuery with “mirko” and “sertic”&#xA;mirko sertic -klaus → Should result in a BooleanQuery with “mirko” and “sertic” but not “klaus”&#xA;“mirko sertic” → Should result in a PhraeQuery with terms “mirko” and “sertic” in sequence&#xA;mirko~ → Should result in a FuzzyQuery with “mirko”&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>A Domain-driven Design Example: From Chaos to Clean Architecture</title>
      <link>https://www.mirkosertic.de/blog/2013/04/domain-driven-design-example/</link>
      <pubDate>Mon, 22 Apr 2013 07:09:11 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2013/04/domain-driven-design-example/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;I saw a lot of IT projects in the past. Some of them were pretty good designed, others were really bad. Based on these experiences, I want to write a bit about an example project, and I also want to show how an example project can be modeled with UML and what would happen if we apply Domain-driven Design principles to the model.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Before you continue, you should read the books “Domain-driven Design” by Eric Evans and “Implementing Domain-driven Design” by Vaughn Vernon. Most of this example is based on their work and if you want to dive deeper into Domain-driven Design, their books are a must to read.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Supercharge Your DokuWiki with HTML5 Microdata Magic</title>
      <link>https://www.mirkosertic.de/blog/2013/04/adding-html5-microdata-to-dokuwiki/</link>
      <pubDate>Sat, 13 Apr 2013 12:45:14 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2013/04/adding-html5-microdata-to-dokuwiki/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_microdata_overview&#34;&gt;Microdata overview&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;HTML5 is the new standard for webpage markups. It comes with some pretty cool new features like media support etc. But one of the best things is the &lt;a href=&#34;http://en.wikipedia.org/wiki/Microdata_%28HTML%29&#34;&gt;Microdata&lt;/a&gt; support!&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Now, what is Microdata exactly? Using Microdata we can classify HTML elements or regions with meta data like “This is the name of a person” or “Here comes the copyright information”, so the real semantic Web 2.0. This greatly helps search engines to crawl the page content and also enables us to improve the display of the webpage in the search engine results.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Elegant State Machines: A Java Enum Approach</title>
      <link>https://www.mirkosertic.de/blog/2013/04/implementing-state-machines-with-java-enums/</link>
      <pubDate>Mon, 08 Apr 2013 01:06:42 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2013/04/implementing-state-machines-with-java-enums/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Often we need to implement &lt;a href=&#34;http://en.wikipedia.org/wiki/State_pattern&#34;&gt;State Machines&lt;/a&gt; to encapsulate object behavior depending on a given object state. This can be cumbersome as it often leads to a lot of interfaces and implementation classes, and persisting such an object state often leads to problems, as we would need to implement a Hibernate custom type for instance to solve it.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Today i want you to show another approach. We model a State Machine using a Java Enum. The Enum concept fits better to the State Machine concept, and Java Enums are much more like an enumeration, they can also contain behavior!&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Beyond MVC: A Guide to Modern UI Architecture Patterns</title>
      <link>https://www.mirkosertic.de/blog/2013/03/mvc-revised-or-what-are-the-alternatives/</link>
      <pubDate>Sat, 30 Mar 2013 05:27:21 +0100</pubDate>
      <guid>https://www.mirkosertic.de/blog/2013/03/mvc-revised-or-what-are-the-alternatives/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_pure_mvc&#34;&gt;Pure MVC&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;The &lt;a href=&#34;http://en.wikipedia.org/wiki/Model_view_controller&#34;&gt;Model View Controller&lt;/a&gt; pattern became a de-facto standard for implementing user interfaces or other kind of interaction with complex systems. Basically it separates the user interface into the following components:&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;table class=&#34;tableblock frame-all grid-all stretch&#34;&gt;&#xA;&lt;colgroup&gt;&#xA;&lt;col style=&#34;width: 50%;&#34;/&gt;&#xA;&lt;col style=&#34;width: 50%;&#34;/&gt;&#xA;&lt;/colgroup&gt;&#xA;&lt;tbody&gt;&#xA;&lt;tr&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Component&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Responsibility&lt;/p&gt;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Model&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;The model contains the data to be presented&lt;/p&gt;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;View&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;The view renders the data and is the user interface. The view also reacts to model changes and updates on such an event&lt;/p&gt;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Controller&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;The controller reacts to user commands and invokes business logic, which itself can change the model&lt;/p&gt;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;See the following diagram taken from Wikipedia to make it clearer:&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Creating Enterprise Scala Beans: When Scala Meets Java EE</title>
      <link>https://www.mirkosertic.de/blog/2013/03/enterprise-scala-beans-or-scala-on-a-jee-application-server/</link>
      <pubDate>Tue, 26 Mar 2013 08:50:41 +0100</pubDate>
      <guid>https://www.mirkosertic.de/blog/2013/03/enterprise-scala-beans-or-scala-on-a-jee-application-server/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Once i was thinking about writing Enterprise Java Beans(EJBs) with the Scala programming language. This should be easy as Scala greatly incorporates with existing Java code bases. But let’s create a small test to verify this!&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;For this example, i am using Apache TomEE 1.5.1 as a JEE Web Profile certified server and Scala 2.10 to create a small stateless session bean and invoke it from a servlet. The stateless bean is injected to the servlet using CDI. I use IntelliJ 12 as my favorite IDE.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Cross-Cutting Concerns: Bridging Scala and AspectJ with Maven</title>
      <link>https://www.mirkosertic.de/blog/2013/03/maven-scala-and-aspectjaop/</link>
      <pubDate>Mon, 25 Mar 2013 10:03:24 +0100</pubDate>
      <guid>https://www.mirkosertic.de/blog/2013/03/maven-scala-and-aspectjaop/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Recently i was thinking about combining AspectJ and Scala in one project. Of course we can argue that functional programming addresses a lot of issues we are trying to solve with AspectJ, but that is not the point. AspectJ is a Bytecode manipulation framework, not a Java code manipulation thing. So why not implement cross cutting concerns like security or transaction handling with AOP/AspectJ in a Scala project? For this short example, i am using AspectJ 1.6.11 and Scala 2.10.1.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Seamlessly Integrating Scala Classes with JPA: A Master-Detail Persistence Guide</title>
      <link>https://www.mirkosertic.de/blog/2013/03/using-scala-with-jpa-2-0/</link>
      <pubDate>Tue, 19 Mar 2013 10:54:04 +0100</pubDate>
      <guid>https://www.mirkosertic.de/blog/2013/03/using-scala-with-jpa-2-0/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Recently i was thinking about persisting Scala classes with JPA. I tried to set up a mixed Java/Scala project as described &lt;a href=&#34;https://www.mirkosertic.de/blog/2013/03/using-scala-in-legacy-applications/&#34;&gt;here&lt;/a&gt; , using Java code to do the JPA stuff and using Scala to create the entities. For a more complex example, i decided to persist a master/detail association to test if the Scala collections can be persisted, too. For the test i am using Scala 2.10.1 and the Hibernate 4.1.10.Final EntityManager as the JPA 2.0 vendor.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Seamlessly Mixing Scala and Java: A Practical Guide for Legacy Applications</title>
      <link>https://www.mirkosertic.de/blog/2013/03/using-scala-in-legacy-applications/</link>
      <pubDate>Mon, 18 Mar 2013 06:09:22 +0100</pubDate>
      <guid>https://www.mirkosertic.de/blog/2013/03/using-scala-in-legacy-applications/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Often we are enhancing and working on Java legacy applications. But time moves on, and new programming languages like Scala(&lt;a href=&#34;http://www.scala-lang.org/&#34;&gt;www.scala-lang.org&lt;/a&gt; ) become popular. But one question arises: is it possible to use Scala in Java based legacy applications?&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;The reason i prefer Scala over Groovy is that Scala is statically typed. So the compiler does a lot of syntax checking for us, things that are not possible with dynamically typed languages like Groovy or Clojure.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>NoSQL Database Showdown: A CAP Theorem Perspective</title>
      <link>https://www.mirkosertic.de/blog/2012/11/an-overview-of-current-nosql-databases/</link>
      <pubDate>Thu, 22 Nov 2012 03:37:03 +0100</pubDate>
      <guid>https://www.mirkosertic.de/blog/2012/11/an-overview-of-current-nosql-databases/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;This summary is taken from the book “Seven Databases in Seven Weeks”. See &lt;a href=&#34;https://www.mirkosertic.de/global/interestingbooks/&#34;&gt;the Books section&lt;/a&gt; for details.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;table class=&#34;tableblock frame-all grid-all stretch&#34;&gt;&#xA;&lt;colgroup&gt;&#xA;&lt;col style=&#34;width: 9.0909%;&#34;/&gt;&#xA;&lt;col style=&#34;width: 9.0909%;&#34;/&gt;&#xA;&lt;col style=&#34;width: 9.0909%;&#34;/&gt;&#xA;&lt;col style=&#34;width: 9.0909%;&#34;/&gt;&#xA;&lt;col style=&#34;width: 9.0909%;&#34;/&gt;&#xA;&lt;col style=&#34;width: 9.0909%;&#34;/&gt;&#xA;&lt;col style=&#34;width: 9.0909%;&#34;/&gt;&#xA;&lt;col style=&#34;width: 9.0909%;&#34;/&gt;&#xA;&lt;col style=&#34;width: 9.0909%;&#34;/&gt;&#xA;&lt;col style=&#34;width: 9.0909%;&#34;/&gt;&#xA;&lt;col style=&#34;width: 9.091%;&#34;/&gt;&#xA;&lt;/colgroup&gt;&#xA;&lt;tbody&gt;&#xA;&lt;tr&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Database&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Version&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Genre&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Data Types&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Data Relations&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Standard Object&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Written in&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Transactions&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Triggers&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Main Differentiator&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Weaknesses&lt;/p&gt;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;MongoDB&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;2.0&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Document&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Typed&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;None&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;JSON&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;C++&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;No&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;No&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Easily query Big Data&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Embed-ability&lt;/p&gt;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;CouchDB&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;1.1&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Document&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Typed&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;None&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;JSON&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Erlang&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;No&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Update validation or Changes API&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Durable and embeddable clusters&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Query-ability&lt;/p&gt;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Riak&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;1.0&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Key-value&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Blob&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Ad hoc(Links)&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Text&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Erlang&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;No&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Ore/post commits&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;High available&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Query-ability&lt;/p&gt;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Redis&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;2.4&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Key-value&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Semi-typed&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;None&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;String&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;C/C++&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Multi operation queries&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;No&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Very, very fast&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Complex data&lt;/p&gt;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;PostgreSQL&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;9.1&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Relational&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Predefined and typed&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Predefined&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Table&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;C&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;ACID&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Yes&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Best of OSS RDBMS model&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;distributed availability&lt;/p&gt;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Neo4J&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;1.7&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Graph&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Untyped&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Ad hoc(Edges)&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Hash&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Java&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;ACID&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Transaction event handlers&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Flexible graph&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Blobs or terabyte scale&lt;/p&gt;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;HBase&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;0.90.3&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Columnar&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Predefined and typed&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;None&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Columns&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Java&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Yes&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;No&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Very large-scale, Hadoop infrastructure&lt;/p&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Flexible growth, query-ability&lt;/p&gt;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_the_cap_theorem_and_how_it_matters_in_distributed_systems&#34;&gt;The CAP Theorem and how it matters in distributed systems&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://www.julianbrowne.com/article/viewer/brewers-cap-theorem&#34;&gt;Brewer’s CAP Theorem&lt;/a&gt; proves that you can create a distributed database that is consistent(writes are atomic and all subsequent requests retrieve the new value), available(the database will always return a value as long as a single server is running), or partition tolerant(the system will still function even if server communication is temporarily lost), but you can only have two at one, so either CA, AP or CP.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Streamline Your Web App: Pretty URLs vs Server Round Trips</title>
      <link>https://www.mirkosertic.de/blog/2012/11/how-to-avoid-server-roundtrips-by-using-pretty-urls/</link>
      <pubDate>Mon, 19 Nov 2012 05:51:12 +0100</pubDate>
      <guid>https://www.mirkosertic.de/blog/2012/11/how-to-avoid-server-roundtrips-by-using-pretty-urls/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_problem&#34;&gt;Problem&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Unnecessary server round trips are a common cause for slow application performance. Unfortunately application frameworks like JSF(Java Server Faces) are forcing developers to do so. For instance given the following URL processed by a JSF Implementation:&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://localhost/myapplication/customer.faces&#34;&gt;http://localhost/myapplication/customer.faces&lt;/a&gt; This shows us a customer edit form. We can navigate to other customers, edit a customer or delete the record. So where are the unnecessary round trips to avoid? Let’s take a closer look what happens in case of a JSF navigation rule to be fired. Given is a h:commandLink on the page causing a HTTP postback:&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Supercharging Hibernate with Full-Text Search Capabilities</title>
      <link>https://www.mirkosertic.de/blog/2012/11/using-and-enhancing-hibernate-search/</link>
      <pubDate>Sat, 17 Nov 2012 06:15:15 +0100</pubDate>
      <guid>https://www.mirkosertic.de/blog/2012/11/using-and-enhancing-hibernate-search/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://www.hibernate.org/&#34;&gt;www.hibernate.org&lt;/a&gt; is a very cool and mature Java Object-Relational mapping tool. Using Hibernate we can easily persist or reconstitute Java Objects to or from a relational database like MySQL, PostgreSQL, SQLServer or Oracle.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Hibernate supports us to query the database using the Criteria API or HQL Statements(Or we can use Tools like QueryDSL). But Hibernate core lacks supporting us to do free style or even full text queries. For this purpose, Hibernate Search was created.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Building Interactive Graph Visualizations with JavaFX: A Simple Guide</title>
      <link>https://www.mirkosertic.de/blog/2012/10/displaying-simple-animated-graphs-with-javafx-2-0/</link>
      <pubDate>Mon, 15 Oct 2012 10:03:39 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2012/10/displaying-simple-animated-graphs-with-javafx-2-0/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;JavaFX is quite cool. The scene graph concept is quite powerful, combined with visual effects like animation, shadows or motion blurring can create very nice looking user interfaces.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;At the moment, JavaFX comes with a set of predefined Form elements(called Controls), and other primitive objects(called Shapes). This is enough to create most of user interface currently needed for business purposes.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;But there are also some Controls missing, like a TreeTable and other stuff. I hope this will be added in the near future.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Mastering Log Management with Logstash and Kibana</title>
      <link>https://www.mirkosertic.de/blog/2012/10/logging-made-easy/</link>
      <pubDate>Thu, 04 Oct 2012 03:41:46 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2012/10/logging-made-easy/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;In modern, distributed applications logging is a key requirement. But the problem arises if we try to track down an error using different log files on different servers. This is often a problem, depending on the business organization, access rights and other political forces.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;To avoid wasting time to find and get the logs, we need a good tool to support us. Fortunately the Open Source Community has an answer. Logstash!&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Supercharging Java Entities with CDI: An AspectJ Adventure</title>
      <link>https://www.mirkosertic.de/blog/2012/10/building-cdi-support-with-aop-and-aspectj/</link>
      <pubDate>Mon, 01 Oct 2012 02:47:45 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2012/10/building-cdi-support-with-aop-and-aspectj/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;CDI is a mighty enhancement to the Java programming language. But CDI has also some limitations that might be cumbersome:&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;ulist&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;CDI needs a CDI container&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;All dependency injected beans are also managed beans&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Hibernate or JPA entities are not managed by the CDI container, so there is no CDI support for them&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;So what can we do to get around these limitations, for instance we really want dependency injection in our Entities? The solution is AOP and AspectJ!&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Layered Software Architecture: From Traditional to Onion Pattern</title>
      <link>https://www.mirkosertic.de/blog/2012/09/the-onion-architecture/</link>
      <pubDate>Mon, 10 Sep 2012 06:48:34 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2012/09/the-onion-architecture/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_the_problem&#34;&gt;The Problem&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Often we develop complex business driven applications. While we design our application, it’s architecture and it’s layers, we often feel to use a traditional approach to define the layers. Here is a short structure of what i mean:&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;span class=&#34;image&#34;&gt;&lt;img src=&#34;https://www.mirkosertic.de/media/traditionalpackaging.png&#34; alt=&#34;traditionalpackaging&#34;/&gt;&lt;/span&gt;&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;The problem with this structure is that the packaging is infrastructure driven. We have a user interface which uses the business logic. The business logic uses the data access layer to access data. There are also some cross cutting concerns like transaction control or security. This packaging was often motivated by classic J2EE patterns. But the problems are the dependencies.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Modernizing Legacy Apps: Adding CDI Magic to Swing Applications</title>
      <link>https://www.mirkosertic.de/blog/2012/08/enriching-legacy-applications-with-cdi/</link>
      <pubDate>Wed, 15 Aug 2012 09:45:09 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2012/08/enriching-legacy-applications-with-cdi/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;There are a lot of applications out there. Some of them are legacy, others are in their maintenance phase. While we are developing new applications, we can use the coolest new technologies, think about good design and other stuff. But what about the software maintenance phase? Often, due to lack of time and other constraints, we cannot do everything perfectly, we need to move some refactoring or even re-engineering to the maintenance phase.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>The Hidden Dangers of toString(): Keeping Business and UI Logic Separate</title>
      <link>https://www.mirkosertic.de/blog/2012/08/putting-your-objects-into-context-or-why-overwriting-tostring-can-be-evil/</link>
      <pubDate>Mon, 06 Aug 2012 03:32:14 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2012/08/putting-your-objects-into-context-or-why-overwriting-tostring-can-be-evil/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Often we need to display Java business objects in the user interface. The easiest way is to overwrite the toString() method and give back the String representation of the object. This seems to be easy, but it is an evil temptation.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;I’d consider this as a break of the single responsibility rule in object oriented design. The responsibility of the business object is to contain business logic. The responsibility of ui classes is to display something to the user. Mixing them can be a very bad idea.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Why Perfect Abstractions Are a Myth: Understanding Spolsky&#39;s Law</title>
      <link>https://www.mirkosertic.de/blog/2012/08/the-law-of-leaky-abstractions/</link>
      <pubDate>Thu, 02 Aug 2012 03:42:12 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2012/08/the-law-of-leaky-abstractions/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Personally i really like Joel Spolskys law of &lt;a href=&#34;http://www.joelonsoftware.com/articles/LeakyAbstractions.html&#34;&gt;Leaky abstractions&lt;/a&gt;. Every architect should read and understand his article. Here is a summary of this law taken from Joel’s Website and &lt;a href=&#34;http://en.wikipedia.org/wiki/Leaky_abstraction&#34;&gt;Wikipedia&lt;/a&gt; :&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_history&#34;&gt;History&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;The term “leaky abstraction” appears to have been coined in 2002 by Joel Spolsky. However, an earlier paper by Kiczales clearly describes some of the issues with imperfect abstractions and presents a potential solution to the problem by allowing for the customization of the abstraction itself.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Taming Graph Databases: A Journey from JPA to OrientDB</title>
      <link>https://www.mirkosertic.de/blog/2012/08/a-first-touch-with-nosql-graph-databases-and-orientdb/</link>
      <pubDate>Wed, 01 Aug 2012 01:43:48 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2012/08/a-first-touch-with-nosql-graph-databases-and-orientdb/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_the_experiment&#34;&gt;The experiment&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;I was thinking about the current way we often store data in relational databases like MySQL, PostgreSQL or Oracle. We are using object-relational mapping frameworks like Hibernate, enriching Java classes with JPA annotations and are hoping that the mapping framework does everything for us the right way.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;But wait a minute. What are we storing here? Basically we are storing Java object graphs using our ORM framework. Object graphs. Ok, so why could be not use a graph database to store our objects directly? Shouldn’t this make our life easier, no more database table definitions, indexes, foreign keys? Lets give it a try and test how we can migrate an existing JPA based application to a NoSQL graph database. Although i could implement a new persistence layer and use technologies like &lt;a href=&#34;http://www.springsource.org/spring-data/neo4j&#34;&gt;SpringData Neo4J&lt;/a&gt; , i want to to check if there are JPA compatible solutions around.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Smart Thread Naming: Your Secret Weapon for Debugging Multi-User Applications</title>
      <link>https://www.mirkosertic.de/blog/2012/07/thread-tracking-or-how-to-know-who-causes-an-error/</link>
      <pubDate>Tue, 31 Jul 2012 08:01:03 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2012/07/thread-tracking-or-how-to-know-who-causes-an-error/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Often we are developing applications for multi-user environments. Classic examples are web applications or web services. This also means that technical or business exceptions can occur at the same time for different users. But how do we know you causes which exception?&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;We can use logging frameworks like &lt;a href=&#34;http://logging.apache.org/log4j/2.x/&#34;&gt;Log4J&lt;/a&gt; and write some meta-information like the id of the current user and session to the &lt;a href=&#34;http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/MDC.html&#34;&gt;Mapped Diagnostic Context&lt;/a&gt; and finally use a special logging configuration to output the MDC to the log files. But this also means a lot of configuration work, which can also be error prone.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Building Resilient Spring Applications with Netflix Hystrix: A Simple AOP Approach</title>
      <link>https://www.mirkosertic.de/blog/2012/07/how-to-embed-hystrix-into-existing-spring-applications/</link>
      <pubDate>Tue, 31 Jul 2012 06:01:53 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2012/07/how-to-embed-hystrix-into-existing-spring-applications/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Netflix &lt;a href=&#34;https://github.com/Netflix/Hystrix&#34;&gt;Hystrix&lt;/a&gt; is a very powerful framework to build fault tolerant and resilient applications. It provides common implementations for patterns like Timeout, &lt;a href=&#34;http://martinfowler.com/bliki/CircuitBreaker.html&#34;&gt;CircuitBreaker&lt;/a&gt; and others. It also comes with nice monitoring capabilities using the Hystrix Dashboard or even JMX.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Now, Hystrix should be used as a kind of decorator around interfaces or gateways to other (sub) systems. The tricky part is to do this in a non invasive manner. And here comes Spring and AOP to play:&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Building a Enterprise Search Engine in One Day with Apache Solr</title>
      <link>https://www.mirkosertic.de/blog/2012/07/enterprise-search-with-apache-solr/</link>
      <pubDate>Mon, 30 Jul 2012 10:30:07 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2012/07/enterprise-search-with-apache-solr/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;It you want to build a enterprise search engine, you don’t have to reinvent the wheel. You can use open source engines like &lt;a href=&#34;http://lucene.apache.org/core/&#34;&gt;Apache Lucene&lt;/a&gt; or if you have just one day to implement it &lt;a href=&#34;http://lucene.apache.org/solr/&#34;&gt;Apache Solr&lt;/a&gt;. Solr is a full blown enterprise search server, which comes with a lot of bundled plugins like meta-data and content extraction from a very common set of document types with &lt;a href=&#34;http://tika.apache.org/&#34;&gt;Apache Tika&lt;/a&gt; , search highlighting, fragmented search and also similarity search for search results. This is a short tutorial how to create a search application within one day.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Nullpointer-free Java: Combining AOP with Modern Validation Standards</title>
      <link>https://www.mirkosertic.de/blog/2012/07/software-defect-detection-with-aop-and-jsr-303-jsr-305-jsr-308/</link>
      <pubDate>Mon, 30 Jul 2012 09:49:00 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2012/07/software-defect-detection-with-aop-and-jsr-303-jsr-305-jsr-308/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_summary&#34;&gt;Summary&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;For many years common runtime exceptions like NullPointerException or ClassCastException are haunting poor Java programmers. This often leads to repetitions in the source code for checking method arguments for nullness. This is violating the DRY(Don’t repeat yourself) principle. The Java Community Process created JSR-305 to address this issue. Unfortunately this JSR didn’t become part of the official Java languages, but tools like FindBugs or IDEs like IntelliJ are offering static code analysis to find such NullPointerExceptions at compile time.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Domain-driven Design Demystified: Essential Building Blocks and Patterns</title>
      <link>https://www.mirkosertic.de/blog/2012/07/domain-driven-design-overview-and-building-blocks/</link>
      <pubDate>Sun, 29 Jul 2012 08:42:57 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2012/07/domain-driven-design-overview-and-building-blocks/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;There are a lot of excellent blogs out where about Domain Driven Design and what it’s all about. I prefer &lt;a href=&#34;http://en.wikipedia.org/wiki/Domain-driven_design&#34;&gt;Wikipedia&lt;/a&gt; for a short introduction, but there is also an excellent article at &lt;a href=&#34;http://www.infoq.com/articles/ddd-in-practice&#34;&gt;InfoQ&lt;/a&gt; about Domain Driven Design. If you want to know more about the principles behind DDD, you can also consult the &lt;a href=&#34;http://en.wikipedia.org/wiki/GRASP_(object-oriented_design)&#34;&gt;GRASP Patterns&lt;/a&gt; or the &lt;a href=&#34;http://en.wikipedia.org/wiki/SOLID_(object-oriented_design)&#34;&gt;SOLID Patterns&lt;/a&gt;. Here is a summary of DDD (also taken from Wikipedia):&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_core_definitions&#34;&gt;Core definitions&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;ulist&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Domain: A sphere of knowledge (ontology), influence, or activity. The subject area to which the user applies a program is the domain of the software.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Model: A system of abstractions that describes selected aspects of a domain and can be used to solve problems related to that domain.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Ubiquitous Language: A language structured around the domain model and used by all team members to connect all the activities of the team with the software.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Context: The setting in which a word or statement appears that determines its meaning.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Simplify I18N: XML-Based Resource Bundles for Safer Java Internationalization</title>
      <link>https://www.mirkosertic.de/blog/2012/07/xml-resourcebundles-and-how-to-make-i18n-refactoring-safe/</link>
      <pubDate>Sat, 28 Jul 2012 02:37:33 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2012/07/xml-resourcebundles-and-how-to-make-i18n-refactoring-safe/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Java Resourcebundles are cumbersome. Without good IDE support, you are lost. It is hard to maintain the different property files, keep them in sync and take care of correct character encoding. And even if you manage all this, you still have the resource keys hard coded in your source code. It is very hard to detect where your resource keys are used.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;But fortunately you don’t have to live with these limitations! So instead storing different property files for each resource key, just keep them together in one simple XML file? Instead of using hard coded String constants in your source code, just use a generated Java constant interface to access the bundle?&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Smart Domain-Driven Queries: Leverage Your Domain Objects for Search Specifications</title>
      <link>https://www.mirkosertic.de/blog/2012/07/reusing-domain-objects-to-create-query-specifications/</link>
      <pubDate>Fri, 20 Jul 2012 02:18:59 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2012/07/reusing-domain-objects-to-create-query-specifications/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_problem&#34;&gt;Problem&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Often you need to create query specifications to retrieve data from persistent memory. One of the following patterns is most likely used:&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Bind Entity or Service with a distinct Query Object to the repository. A Service creates a distinct query object, passes it to the repository. Here the query object is translated to a Hibernate or JPA Criteria or HQL Statement and finally executed against the database.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Pros:&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;ulist&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;For every use case a distinct &lt;a href=&#34;http://martinfowler.com/eaaCatalog/queryObject.html&#34;&gt;Query Object&lt;/a&gt; can be created. This helps a lot to encapsulate domain logic.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Effortless Java Swing Data Binding: A Guide to Mogwai Framework</title>
      <link>https://www.mirkosertic.de/blog/2012/06/swing-databinding-with-mogwai-databinding/</link>
      <pubDate>Wed, 27 Jun 2012 07:50:07 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2012/06/swing-databinding-with-mogwai-databinding/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;While you are developing Java Swing based applications, you need a mechanism to bind Java objects to Swing widgets. Project &lt;a href=&#34;http://mogwai.sourceforge.net/&#34;&gt;mogwai.sourceforge.net&lt;/a&gt; provides a very simple but powerful framework called DataBinding to help you with this task. Here is an example.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Given the following piece of code(the model you want to bind):&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;listingblock&#34;&gt;&#xA;&lt;div class=&#34;content&#34;&gt;&#xA;&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;import java.util.Collection;&#xA;import java.util.HashSet;&#xA;&#xA;public class ExampleModel {&#xA;&#xA;    private String string1;&#xA;    private String string2;&#xA;    private boolean bool;&#xA;    private String selected;&#xA;    private String type;&#xA;    private Collection&amp;lt;String&amp;gt; entries = new HashSet&amp;lt;String&amp;gt;();&#xA;    private String[] entriesArray = new String[0];&#xA;&#xA;    public ExampleModel() {&#xA;        entries.add(&amp;#34;A&amp;#34;);&#xA;        entries.add(&amp;#34;B&amp;#34;);&#xA;        entries.add(&amp;#34;C&amp;#34;);&#xA;&#xA;        entriesArray = new String[]{&amp;#34;D&amp;#34;, &amp;#34;E&amp;#34;, &amp;#34;F&amp;#34;};&#xA;    }&#xA;&#xA;    public String getString1() {&#xA;        return string1;&#xA;    }&#xA;&#xA;    public void setString1(String string1) {&#xA;        this.string1 = string1;&#xA;    }&#xA;&#xA;    public boolean isBool() {&#xA;        return bool;&#xA;    }&#xA;&#xA;     public void setBool(boolean bool) {&#xA;        this.bool = bool;&#xA;    }&#xA;&#xA;    public String getSelected() {&#xA;        return selected;&#xA;    }&#xA;&#xA;&#xA;    public void setSelected(String selected) {&#xA;        this.selected = selected;&#xA;    }&#xA;&#xA;&#xA;    public String getString2() {&#xA;        return string2;&#xA;    }&#xA;&#xA;&#xA;    public void setString2(String string2) {&#xA;        this.string2 = string2;&#xA;    }&#xA;&#xA;&#xA;    public String getType() {&#xA;        return type;&#xA;    }&#xA;&#xA;&#xA;    public void setType(String type) {&#xA;        this.type = type;&#xA;    }&#xA;&#xA;&#xA;    public Collection&amp;lt;String&amp;gt; getEntries() {&#xA;        return entries;&#xA;    }&#xA;&#xA;&#xA;    public void setEntries(Collection&amp;lt;String&amp;gt; entries) {&#xA;        this.entries = entries;&#xA;    }&#xA;&#xA;&#xA;    public String[] getEntriesArray() {&#xA;        return entriesArray;&#xA;    }&#xA;&#xA;&#xA;    public void setEntriesArray(String[] entriesArray) {&#xA;        this.entriesArray = entriesArray;&#xA;    }&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;</description>
    </item>
  </channel>
</rss>
