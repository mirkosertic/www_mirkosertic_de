<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>XML on www.mirkosertic.de</title>
    <link>https://www.mirkosertic.de/tags/xml/</link>
    <description>Recent content in XML on www.mirkosertic.de</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>Mirko Sertic</copyright>
    <lastBuildDate>Thu, 21 Nov 2024 21:46:13 +0100</lastBuildDate>
    <atom:link href="https://www.mirkosertic.de/tags/xml/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Simplify I18N: XML-Based Resource Bundles for Safer Java Internationalization</title>
      <link>https://www.mirkosertic.de/blog/2012/07/xml-resourcebundles-and-how-to-make-i18n-refactoring-safe/</link>
      <pubDate>Sat, 28 Jul 2012 02:37:33 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2012/07/xml-resourcebundles-and-how-to-make-i18n-refactoring-safe/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Java Resourcebundles are cumbersome. Without good IDE support, you are lost. It is hard to maintain the different property files, keep them in sync and take care of correct character encoding. And even if you manage all this, you still have the resource keys hard coded in your source code. It is very hard to detect where your resource keys are used.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;But fortunately you donâ€™t have to live with these limitations! So instead storing different property files for each resource key, just keep them together in one simple XML file? Instead of using hard coded String constants in your source code, just use a generated Java constant interface to access the bundle?&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
  </channel>
</rss>
