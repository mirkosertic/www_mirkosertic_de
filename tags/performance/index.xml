<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Performance on www.mirkosertic.de</title>
    <link>https://www.mirkosertic.de/tags/performance/</link>
    <description>Recent content in Performance on www.mirkosertic.de</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Mirko Sertic</copyright>
    <lastBuildDate>Thu, 20 Dec 2018 00:00:00 +0200</lastBuildDate>
    
	<atom:link href="https://www.mirkosertic.de/tags/performance/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>WebAssembly with vue.js</title>
      <link>https://www.mirkosertic.de/blog/2018/12/webassembly-and-vuejs/</link>
      <pubDate>Thu, 20 Dec 2018 00:00:00 +0200</pubDate>
      
      <guid>https://www.mirkosertic.de/blog/2018/12/webassembly-and-vuejs/</guid>
      <description>State of the union WebAssembly for starters is a standard for high-performance, size-optimized executable code for the Web. It was released in March 2017 by the WebAssembly working group as version 1.0, which is basically a MVP (Minimum Viable Product), but the initial development started in June 2017. WebAssembly is the successor asm.js and the Google Native Client (NaCL).
 WebAssembly itself is merely a sandboxed runtime environment. It was designed as a compile target.</description>
    </item>
    
    <item>
      <title>Alice, Bob, Carol and Dave OpenCL Edition</title>
      <link>https://www.mirkosertic.de/blog/2018/02/alicebobcaroldaveopencl/</link>
      <pubDate>Thu, 01 Feb 2018 00:00:00 +0200</pubDate>
      
      <guid>https://www.mirkosertic.de/blog/2018/02/alicebobcaroldaveopencl/</guid>
      <description>An office fairy tale Once upon a time in an office far far away worked four very nice IT people very hard in their office cubicles. Their names were Alice, Bob, Carol and Dave.
 They worked very hard each day. They started work at 9 o&amp;#8217;clock, and finished often after sunset. They were very happy in their business, but they were very lonely in their private life due to the amount of work they did every day.</description>
    </item>
    
    <item>
      <title>Object-Oriented WebAssembly</title>
      <link>https://www.mirkosertic.de/blog/2018/01/object-oriented-webassembly/</link>
      <pubDate>Mon, 01 Jan 2018 12:00:00 +0100</pubDate>
      
      <guid>https://www.mirkosertic.de/blog/2018/01/object-oriented-webassembly/</guid>
      <description>Today, I want to write a little bit about object orientation and WebAssembly. For starters, what is WebAssembly? WebAssembly is a new portable, size and load-time efficient format suitable for compilation to the web. It is an open standard by a W3C community group and is currently integrated into all major browsers such as Firefox, Chrome, Edge and WebKit. WebAssembly aims to keep download speed and parsing time of program code low and execute at native speed by taking advance of common hardware capabilities available on a wide range of platforms.</description>
    </item>
    
    <item>
      <title>Bytecoder : A Low Level Bytecode to JavaScript Transpiler</title>
      <link>https://www.mirkosertic.de/blog/2017/06/compiling-bytecode-to-javascript/</link>
      <pubDate>Tue, 20 Jun 2017 00:00:00 +0200</pubDate>
      
      <guid>https://www.mirkosertic.de/blog/2017/06/compiling-bytecode-to-javascript/</guid>
      <description>The Idea JavaScript is everywhere! Almost every device we use today is connected to the Internet and supports JavaScript by its runtime environment. But in the same way new devices arrive on the market, old software written in plain old Java is still alive and useful. The idea is now to bridge the gap between this shiny new JavaScript world and our old but still useful legacy software written in Java.</description>
    </item>
    
    <item>
      <title>Why I switched to static HTML generators</title>
      <link>https://www.mirkosertic.de/blog/2017/01/why-i-switched-to-static-html-generators/</link>
      <pubDate>Mon, 30 Jan 2017 01:43:48 +0200</pubDate>
      
      <guid>https://www.mirkosertic.de/blog/2017/01/why-i-switched-to-static-html-generators/</guid>
      <description>The Beginning This Blog started its life a few years ago. At the beginning, I was using DokuWiki for writing and editing. This was good, but I was very limited by the provided editors and markup. So I came to the point that I needed something else. And you will of course ask &#34;what else&#34;? Well, for a Blog, there is a very popular answer: Use Wordpress!
 So I installed Wordpress on my web host, and migrated the whole content.</description>
    </item>
    
    <item>
      <title>Compile Time Speed GWT 2.8.0 vs. TeaVM 0.4.3 vs. TeaVM 1.0.0-SNAPSHOT</title>
      <link>https://www.mirkosertic.de/blog/2016/11/compile-time-speed-gwt-2-8-0-vs-teavm-0-4-3/</link>
      <pubDate>Thu, 24 Nov 2016 06:14:41 +0100</pubDate>
      
      <guid>https://www.mirkosertic.de/blog/2016/11/compile-time-speed-gwt-2-8-0-vs-teavm-0-4-3/</guid>
      <description>Some years ago I wrote a JavaFX based Game authoring system. It was also written to be ported to different run time environments by using transpiler technologies such as GWT or TeaVM. While TeaVM was heavily improved over time, I haven&amp;#8217;t seen a new GWT release in the wild. Now, GWT 2.8.0 is released, and the question arises: Is the compiler still as slow as in 2.7? Well, lets take a look!</description>
    </item>
    
    <item>
      <title>Tuning HTML5 Canvas.fillText()</title>
      <link>https://www.mirkosertic.de/blog/2015/03/tuning-html5-canvas-filltext/</link>
      <pubDate>Wed, 25 Mar 2015 07:33:48 +0100</pubDate>
      
      <guid>https://www.mirkosertic.de/blog/2015/03/tuning-html5-canvas-filltext/</guid>
      <description>Two years ago I wrote a Java based GameEngine. I used technologies such as GWT and TeaVM to transpile the Java source code to JavaScript. The Game Engine used the HTML5 Canvas to render the current game state representation to the user. For the past few weeks I had some time to implement new features for this cool engine. I also did some profiling to see if there are bottlenecks in the rendering code.</description>
    </item>
    
    <item>
      <title>GWT vs. Dragome vs. TeaVM for Game Programming</title>
      <link>https://www.mirkosertic.de/blog/2014/12/gwt-vs-dragome-vs-teavm-for-game-programming/</link>
      <pubDate>Thu, 18 Dec 2014 11:43:01 +0100</pubDate>
      
      <guid>https://www.mirkosertic.de/blog/2014/12/gwt-vs-dragome-vs-teavm-for-game-programming/</guid>
      <description>Last year I wrote a cross platform game engine. It used a JavaFX based Game Authoring System and had a Java based Game Runtime, which was transpiled to different platforms such as Android, JavaScript over GWT and JavaFX.
 Here is a screenshot of a simple platform game based on the GameEngine, some physics stuff and a lot of Java code:
 
 Here is also a screenshot of the JavaFX based game authoring system while editing the example game:</description>
    </item>
    
    <item>
      <title>Java Array Iterator Performance</title>
      <link>https://www.mirkosertic.de/blog/2013/10/java-array-iterator-performance/</link>
      <pubDate>Sun, 13 Oct 2013 04:25:52 +0200</pubDate>
      
      <guid>https://www.mirkosertic.de/blog/2013/10/java-array-iterator-performance/</guid>
      <description>Lets check a very simple example: we want to fill a multi-dimensional array with values. What is the fastest way to do so? The following piece of code gives us surprising results:
 public class CacheTest { final int SIZE = 256; void rowOrderTest() { int theArray[][][] = new int[SIZE][SIZE][SIZE]; long theTime = System.currentTimeMillis(); for (int i = 0; i &amp;lt;SIZE; i++) { for (int j = 0; j &amp;lt;SIZE; j++) { for (int k = 0; k &amp;lt;SIZE; k++) { theArray[i][j][k] = 1; } } } System.</description>
    </item>
    
    <item>
      <title>Comparison of String iterator performance</title>
      <link>https://www.mirkosertic.de/blog/2013/09/comparison-of-string-iterator-performance/</link>
      <pubDate>Thu, 05 Sep 2013 08:35:15 +0200</pubDate>
      
      <guid>https://www.mirkosertic.de/blog/2013/09/comparison-of-string-iterator-performance/</guid>
      <description>Often we need to iterate over a String. Java gives use several options. We can either use a simple loop with an index using the following style:
 for (int i=0;i&amp;lt;theLine.length();i++) { char theCurrentChar = theLine.charAt(i); // Do something with the character }   Or we can use the advanced for style using a character array the following way:
 for (char theCurrentChar : theLine.toCharArray()) { // Do something with the character }   Checking both options for performance gives us surprising results: Under heavy stress the first syntax takes in an advanced use case about 200 microseconds , the second syntax takes only 91 microseconds!</description>
    </item>
    
    <item>
      <title>High performance Android handwriting</title>
      <link>https://www.mirkosertic.de/blog/2013/07/high-performance-android-handwriting/</link>
      <pubDate>Tue, 09 Jul 2013 07:56:21 +0200</pubDate>
      
      <guid>https://www.mirkosertic.de/blog/2013/07/high-performance-android-handwriting/</guid>
      <description>For one of my Android Apps Leas Painting App i needed to implement a sketching and handwriting functionality. The user must be able to draw with his fingers on the canvas and sketch something. This is a screenshot of my App:
 
 But on my way i had to tweak with Android to make the App responsive even on slower devices. Here are my findings about how to keep everything responsive and smooth:</description>
    </item>
    
    <item>
      <title>Comparison of JAXB XML and JSON Serialization Performance</title>
      <link>https://www.mirkosertic.de/blog/2013/05/comparison-of-jaxb-xml-and-json-serialization-performance/</link>
      <pubDate>Thu, 23 May 2013 07:33:05 +0200</pubDate>
      
      <guid>https://www.mirkosertic.de/blog/2013/05/comparison-of-jaxb-xml-and-json-serialization-performance/</guid>
      <description>Once i tried to figure out the difference between JAXB XML and JSON Java Object serialization performance. I wanted to know which one has the better run time performance and thus scales better. Here are the results!
 The test setup is a Windows 7 64bit machine with Intel Core2 Quad Q9450 CPU @2,66GHz. Java Runtime is 1.7.0_07(quite old, i know)
 The profiling test case is to serialize and deserialize a simple Java object with JSON and XML.</description>
    </item>
    
    <item>
      <title>How to avoid server round trips by using pretty URLs</title>
      <link>https://www.mirkosertic.de/blog/2012/11/how-to-avoid-server-roundtrips-by-using-pretty-urls/</link>
      <pubDate>Mon, 19 Nov 2012 05:51:12 +0100</pubDate>
      
      <guid>https://www.mirkosertic.de/blog/2012/11/how-to-avoid-server-roundtrips-by-using-pretty-urls/</guid>
      <description>Problem Unnecessary server round trips are a common cause for slow application performance. Unfortunately application frameworks like JSF(Java Server Faces) are forcing developers to do so. For instance given the following URL processed by a JSF Implementation:
 http://localhost/myapplication/customer.faces This shows us a customer edit form. We can navigate to other customers, edit a customer or delete the record. So where are the unnecessary round trips to avoid? Let&amp;#8217;s take a closer look what happens in case of a JSF navigation rule to be fired.</description>
    </item>
    
  </channel>
</rss>