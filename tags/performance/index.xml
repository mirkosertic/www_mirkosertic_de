<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Performance on www.mirkosertic.de</title>
    <link>https://www.mirkosertic.de/tags/performance/</link>
    <description>Recent content in Performance on www.mirkosertic.de</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>Mirko Sertic</copyright>
    <lastBuildDate>Tue, 19 Nov 2024 12:01:27 +0100</lastBuildDate>
    <atom:link href="https://www.mirkosertic.de/tags/performance/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Supercharging Vue.js with WebAssembly and Java</title>
      <link>https://www.mirkosertic.de/blog/2018/12/webassembly-and-vuejs/</link>
      <pubDate>Thu, 20 Dec 2018 00:00:00 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2018/12/webassembly-and-vuejs/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_state_of_the_union&#34;&gt;State of the union&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;WebAssembly for starters is a standard for high-performance, size-optimized executable code for the Web.&#xA;It was released in March 2017 by the &lt;a href=&#34;https://www.w3.org/wasm/&#34;&gt;WebAssembly working group&lt;/a&gt; as version 1.0, which is basically a MVP&#xA;(Minimum Viable Product), but the initial development started in June 2017. WebAssembly is the successor&#xA;&lt;a href=&#34;http://asmjs.org/&#34;&gt;asm.js&lt;/a&gt; and the &lt;a href=&#34;https://developer.chrome.com/native-client&#34;&gt;Google Native Client (NaCL)&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;WebAssembly itself is merely a sandboxed runtime environment. It was designed as a compile target. High&#xA;level languages such as C/C++, Rust, .NET or Java can be compiled to WebAssembly. As a compile target, it&#xA;implements a set of binary opcodes, a module system and a stack machine making the opcodes executable. Modern&#xA;compiler can translate and optimize high level languages to low level WebAssembly modules.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Finding Love with GPU-Accelerated Matchmaking: A Tech Fairy Tale</title>
      <link>https://www.mirkosertic.de/blog/2018/02/alicebobcaroldaveopencl/</link>
      <pubDate>Thu, 01 Feb 2018 00:00:00 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2018/02/alicebobcaroldaveopencl/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_an_office_fairy_tale&#34;&gt;An office fairy tale&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Once upon a time in an office far far away worked four very nice IT people very hard&#xA;in their office cubicles. Their names were Alice, Bob, Carol and Dave.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;They worked very hard each day. They started work at 9 o’clock, and finished often&#xA;after sunset. They were very happy in their business, but they were very lonely&#xA;in their private life due to the amount of work they did every day.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Mastering Object-Oriented Programming in WebAssembly: From High-Level to Low-Level</title>
      <link>https://www.mirkosertic.de/blog/2018/01/object-oriented-webassembly/</link>
      <pubDate>Mon, 01 Jan 2018 12:00:00 +0100</pubDate>
      <guid>https://www.mirkosertic.de/blog/2018/01/object-oriented-webassembly/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Today, I want to write a little bit about object orientation and WebAssembly. For starters, what is WebAssembly?&#xA;WebAssembly is a new portable, size and load-time efficient format suitable for compilation to the web. It is an open&#xA;standard by a W3C community group and is currently integrated into all major browsers such as Firefox, Chrome, Edge and&#xA;WebKit. WebAssembly aims to keep download speed and parsing time of program code low and execute at native speed by&#xA;taking advance of common hardware capabilities available on a wide range of platforms. WebAssembly is basically bytecode&#xA;for the Web.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Bytecoder : A Low Level Bytecode to JavaScript Transpiler</title>
      <link>https://www.mirkosertic.de/blog/2017/06/compiling-bytecode-to-javascript/</link>
      <pubDate>Tue, 20 Jun 2017 00:00:00 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2017/06/compiling-bytecode-to-javascript/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_the_idea&#34;&gt;The Idea&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;JavaScript is everywhere! Almost every device we use today is connected to the Internet and supports JavaScript by its runtime environment. But in the same way new devices arrive on the market, old software written in plain old Java is still alive and useful. The idea is now to bridge the gap between this shiny new JavaScript world and our old but still useful legacy software written in Java.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>From CMS to Static: A Journey to Blazing Fast Blogging</title>
      <link>https://www.mirkosertic.de/blog/2017/01/why-i-switched-to-static-html-generators/</link>
      <pubDate>Mon, 30 Jan 2017 01:43:48 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2017/01/why-i-switched-to-static-html-generators/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_the_beginning&#34;&gt;The Beginning&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;This Blog started its life a few years ago. At the beginning, I was using &lt;a href=&#34;https://www.dokuwiki.org&#34;&gt;DokuWiki&lt;/a&gt; for writing&#xA;and editing. This was good, but I was very limited by the provided editors and markup. So I came to the point that I needed&#xA;something else. And you will of course ask &amp;#34;what else&amp;#34;? Well, for a Blog, there is a very popular answer: Use &lt;a href=&#34;https://wordpress.org&#34;&gt;Wordpress&lt;/a&gt;!&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;So I installed Wordpress on my web host, and migrated the whole content. The migration task was easy. But I spent a lot of&#xA;time with decisions like &amp;#34;Which theme? Which plugin? What about SEO? I really spent too much time on this.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Java to JavaScript: TeaVM Outperforms GWT in Compilation Speed Race</title>
      <link>https://www.mirkosertic.de/blog/2016/11/compile-time-speed-gwt-2-8-0-vs-teavm-0-4-3/</link>
      <pubDate>Thu, 24 Nov 2016 06:14:41 +0100</pubDate>
      <guid>https://www.mirkosertic.de/blog/2016/11/compile-time-speed-gwt-2-8-0-vs-teavm-0-4-3/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Some years ago I wrote a JavaFX based &lt;a href=&#34;https://www.mirkosertic.de/blog/2013/11/a-javafx-based-game-authoring-system/&#34;&gt;Game authoring system&lt;/a&gt;. It was also written to be ported to different run time environments by using transpiler technologies such as GWT or TeaVM. While TeaVM was heavily improved over time, I haven’t seen a new GWT release in the wild. Now, GWT 2.8.0 is released, and the question arises: Is the compiler still as slow as in 2.7? Well, lets take a look!&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Supercharging HTML5 Canvas Text Performance: A Game-Changing Optimization</title>
      <link>https://www.mirkosertic.de/blog/2015/03/tuning-html5-canvas-filltext/</link>
      <pubDate>Wed, 25 Mar 2015 07:33:48 +0100</pubDate>
      <guid>https://www.mirkosertic.de/blog/2015/03/tuning-html5-canvas-filltext/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Two years ago I wrote a Java based &lt;a href=&#34;https://www.mirkosertic.de/blog/2013/11/a-javafx-based-game-authoring-system/&#34;&gt;GameEngine&lt;/a&gt;. I used technologies such as GWT and TeaVM to transpile the Java source code to JavaScript. The Game Engine used the HTML5 Canvas to render the current game state representation to the user. For the past few weeks I had some time to implement new features for this cool engine. I also did some profiling to see if there are bottlenecks in the rendering code. During the profiling sessions already known facts became visible: some browsers perform better than others.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Java-to-JavaScript Game Development: Battle of the Transpilers</title>
      <link>https://www.mirkosertic.de/blog/2014/12/gwt-vs-dragome-vs-teavm-for-game-programming/</link>
      <pubDate>Thu, 18 Dec 2014 11:43:01 +0100</pubDate>
      <guid>https://www.mirkosertic.de/blog/2014/12/gwt-vs-dragome-vs-teavm-for-game-programming/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Last year I wrote a &lt;a href=&#34;https://www.mirkosertic.de/blog/2013/11/a-javafx-based-game-authoring-system/&#34;&gt;cross platform game engine&lt;/a&gt;. It used a JavaFX based Game Authoring System and had a Java based Game Runtime, which was transpiled to different platforms such as Android, JavaScript over GWT and JavaFX.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Here is a screenshot of a simple platform game based on the GameEngine, some physics stuff and a lot of Java code:&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;span class=&#34;image&#34;&gt;&lt;img src=&#34;https://www.mirkosertic.de/media/dukejumprunchrome.png&#34; alt=&#34;dukejumprunchrome&#34;/&gt;&lt;/span&gt;&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Here is also a screenshot of the JavaFX based game authoring system while editing the example game:&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>The Hidden Cost of Array Iteration: A Java Performance Deep Dive</title>
      <link>https://www.mirkosertic.de/blog/2013/10/java-array-iterator-performance/</link>
      <pubDate>Sun, 13 Oct 2013 04:25:52 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2013/10/java-array-iterator-performance/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Lets check a very simple example: we want to fill a multi-dimensional array with values. What is the fastest way to do so? The following piece of code gives us surprising results:&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;listingblock&#34;&gt;&#xA;&lt;div class=&#34;content&#34;&gt;&#xA;&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;public class CacheTest {&#xA;&#xA;    final int SIZE = 256;&#xA;&#xA;    void rowOrderTest() {&#xA;        int theArray[][][] = new int[SIZE][SIZE][SIZE];&#xA;        long theTime = System.currentTimeMillis();&#xA;        for (int i = 0; i &amp;lt;SIZE; i++) {&#xA;            for (int j = 0; j &amp;lt;SIZE; j++) {&#xA;                for (int k = 0; k &amp;lt;SIZE; k++) {&#xA;                    theArray[i][j][k] = 1;&#xA;                }&#xA;            }&#xA;        }&#xA;        System.out.println(&amp;#34;RowOrder : &amp;#34; + (System.currentTimeMillis() - theTime));&#xA;    }&#xA;&#xA;    void columnOrderTest() {&#xA;        int theArray[][][] = new int[SIZE][SIZE][SIZE];&#xA;        long theTime = System.currentTimeMillis();&#xA;        for (int k = 0; k &amp;lt;SIZE; k++) {&#xA;            for (int j = 0; j &amp;lt;SIZE; j++) {&#xA;                for (int i = 0; i &amp;lt;SIZE; i++) {&#xA;                    theArray[i][j][k] = 1;&#xA;                }&#xA;            }&#xA;        }&#xA;        System.out.println(&amp;#34;ColumnOrder : &amp;#34; + (System.currentTimeMillis() - theTime));&#xA;    }&#xA;&#xA;    void arrayTest1() {&#xA;&#xA;        long theCounter = 0;&#xA;&#xA;        int theArray[] = new int[SIZE*SIZE*SIZE];&#xA;        long theTime = System.currentTimeMillis();&#xA;        for (int i = 0; i &amp;lt;SIZE; i++) {&#xA;            for (int j = 0; j &amp;lt;SIZE; j++) {&#xA;                for (int k = 0; k &amp;lt;SIZE; k++) {&#xA;                    theArray[i*SIZE*SIZE+j*SIZE+k] = 1;&#xA;                    theCounter++;&#xA;                }&#xA;            }&#xA;        }&#xA;        System.out.println(&amp;#34;ArrayTest1 : &amp;#34; + (System.currentTimeMillis() - theTime) + &amp;#34; #&amp;#34; + theCounter);&#xA;    }&#xA;&#xA;    void arrayTest2() {&#xA;&#xA;        int theArray[] = new int[SIZE*SIZE*SIZE];&#xA;        long theTime = System.currentTimeMillis();&#xA;        Arrays.fill(theArray, 0);&#xA;        System.out.println(&amp;#34;ArrayTest2 : &amp;#34; + (System.currentTimeMillis() - theTime));&#xA;    }&#xA;&#xA;    void arrayTest3() {&#xA;&#xA;        int theCounter = 0;&#xA;&#xA;        int theArray[] = new int[SIZE*SIZE*SIZE];&#xA;        long theTime = System.currentTimeMillis();&#xA;        for (int i = 0; i &amp;lt;SIZE; i++) {&#xA;            for (int j = 0; j &amp;lt;SIZE; j++) {&#xA;                for (int k = 0; k &amp;lt;SIZE; k++) {&#xA;                    theArray[theCounter] = 1;&#xA;                    theCounter++;&#xA;                }&#xA;            }&#xA;        }&#xA;        System.out.println(&amp;#34;ArrayTest3 : &amp;#34; + (System.currentTimeMillis() - theTime) + &amp;#34; #&amp;#34; + theCounter);&#xA;    }&#xA;&#xA;     public static void main(String[] args) {&#xA;        CacheTest theTest = new CacheTest();&#xA;        theTest.rowOrderTest();&#xA;        theTest.columnOrderTest();&#xA;        theTest.arrayTest1();&#xA;        theTest.arrayTest2();&#xA;        theTest.arrayTest3();&#xA;    }&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Java String Iteration: The Hidden Performance Trap</title>
      <link>https://www.mirkosertic.de/blog/2013/09/comparison-of-string-iterator-performance/</link>
      <pubDate>Thu, 05 Sep 2013 08:35:15 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2013/09/comparison-of-string-iterator-performance/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Often we need to iterate over a String. Java gives use several options. We can either use a simple loop with an index using the following style:&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;listingblock&#34;&gt;&#xA;&lt;div class=&#34;content&#34;&gt;&#xA;&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;for (int i=0;i&amp;lt;theLine.length();i++) {&#xA;   char theCurrentChar = theLine.charAt(i);&#xA;   // Do something with the character&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Or we can use the advanced for style using a character array the following way:&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;listingblock&#34;&gt;&#xA;&lt;div class=&#34;content&#34;&gt;&#xA;&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;for (char theCurrentChar : theLine.toCharArray())  {&#xA;  // Do something with the character&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>High performance Android handwriting</title>
      <link>https://www.mirkosertic.de/blog/2013/07/high-performance-android-handwriting/</link>
      <pubDate>Tue, 09 Jul 2013 07:56:21 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2013/07/high-performance-android-handwriting/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;For one of my Android Apps &lt;a href=&#34;https://play.google.com/store/apps/details?id=de.mirkosertic.easypaint&#34;&gt;Leas Painting App&lt;/a&gt; i needed to implement a sketching and handwriting functionality. The user must be able to draw with his fingers on the canvas and sketch something. This is a screenshot of my App:&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;span class=&#34;image&#34;&gt;&lt;img src=&#34;https://www.mirkosertic.de/media/leaspaintingapp.png&#34; alt=&#34;leaspaintingapp&#34;/&gt;&lt;/span&gt;&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;But on my way i had to tweak with Android to make the App responsive even on slower devices. Here are my findings about how to keep everything responsive and smooth:&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Java Serialization Showdown: XML vs JSON vs Native - Surprising Performance Results</title>
      <link>https://www.mirkosertic.de/blog/2013/05/comparison-of-jaxb-xml-and-json-serialization-performance/</link>
      <pubDate>Thu, 23 May 2013 07:33:05 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2013/05/comparison-of-jaxb-xml-and-json-serialization-performance/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Once i tried to figure out the difference between JAXB XML and JSON Java Object serialization performance. I wanted to know which one has the better run time performance and thus scales better. Here are the results!&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;The test setup is a Windows 7 64bit machine with Intel Core2 Quad Q9450 CPU @2,66GHz. Java Runtime is 1.7.0_07(quite old, i know)&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;The profiling test case is to serialize and deserialize a simple Java object with JSON and XML. I wanted to run the process 1000, 10000, 100000 and 1000000 times. In contrast i used JSON, XML, Java ObjectOutputStream and Google Kryo. The following table shows the measures:&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Streamline Your Web App: Pretty URLs vs Server Round Trips</title>
      <link>https://www.mirkosertic.de/blog/2012/11/how-to-avoid-server-roundtrips-by-using-pretty-urls/</link>
      <pubDate>Mon, 19 Nov 2012 05:51:12 +0100</pubDate>
      <guid>https://www.mirkosertic.de/blog/2012/11/how-to-avoid-server-roundtrips-by-using-pretty-urls/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_problem&#34;&gt;Problem&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Unnecessary server round trips are a common cause for slow application performance. Unfortunately application frameworks like JSF(Java Server Faces) are forcing developers to do so. For instance given the following URL processed by a JSF Implementation:&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://localhost/myapplication/customer.faces&#34;&gt;http://localhost/myapplication/customer.faces&lt;/a&gt; This shows us a customer edit form. We can navigate to other customers, edit a customer or delete the record. So where are the unnecessary round trips to avoid? Let’s take a closer look what happens in case of a JSF navigation rule to be fired. Given is a h:commandLink on the page causing a HTTP postback:&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
  </channel>
</rss>
