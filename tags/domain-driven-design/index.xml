<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Domain-Driven Design on www.mirkosertic.de</title>
    <link>https://www.mirkosertic.de/tags/domain-driven-design/</link>
    <description>Recent content in Domain-Driven Design on www.mirkosertic.de</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>Mirko Sertic</copyright>
    <lastBuildDate>Tue, 19 Nov 2024 12:01:27 +0100</lastBuildDate>
    <atom:link href="https://www.mirkosertic.de/tags/domain-driven-design/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Self-Contained Systems: A Practical Guide to Independent Software Architecture</title>
      <link>https://www.mirkosertic.de/blog/2021/04/scs-light-and-shadow/</link>
      <pubDate>Wed, 07 Apr 2021 00:00:00 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2021/04/scs-light-and-shadow/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_self_contained_cystem_what_is_it&#34;&gt;Self-Contained-Cystem, what is it?&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Self-Contained-System, referred to the following short SCS, is an architectural approach. The idea is to map requirements using individual,&#xA;functionally independent systems. These systems include everything for mapping the necessary requirements, starting with data management,&#xA;the actual business logic and finally a complete user interface. This makes these systems self-contained.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Each SCS should be looked after by its own development team. In addition to the technical separation of the systems, this architectural approach&#xA;should also facilitate the organizational separation. By avoiding dependencies, the teams also become more independent and therefore more flexible.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Taming Microservices Chaos: Smart UI Integration with Server-Side Includes</title>
      <link>https://www.mirkosertic.de/blog/2017/03/integration-at-ui-level-with-server-side-includes/</link>
      <pubDate>Mon, 06 Mar 2017 00:00:00 +0100</pubDate>
      <guid>https://www.mirkosertic.de/blog/2017/03/integration-at-ui-level-with-server-side-includes/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_microservices_everywhere&#34;&gt;Microservices everywhere&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Today, &lt;a href=&#34;https://en.wikipedia.org/wiki/Microservices&#34;&gt;Microservices&lt;/a&gt; are a common software modeling technique. This style&#xA;is based on the principles behind &lt;a href=&#34;https://en.wikipedia.org/wiki/Domain-driven_design&#34;&gt;Domain-driven Design&lt;/a&gt;, where every&#xA;bounded context is equivalent to a service. If we also take the &lt;a href=&#34;https://12factor.net&#34;&gt;Twelve-Factor App&lt;/a&gt; manifesto into&#xA;consideration, we able to create scalable and cloud ready systems.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;But this design can also lead to problems. If we take the Microservice design too far(&lt;a href=&#34;https://en.wikipedia.org/wiki/Microservices&#34;&gt;Nanoservices&lt;/a&gt;), we are quickly getting way to&#xA;much services we can handle and maintain. There is also the risk that we are somehow violating the original bounded context&#xA;of our services, leading to lack of responsibility and functional encapsulation. Maybe the Microservices could degenerate&#xA;to some kind of remote data access object. If we do not respect the principle of independently deployable units, we&#xA;would be quickly creating a distributed, complex and very slow monolith.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Beyond Null Checks: Smart Validation in Java with Lombok, JSR 303, and JSR 308</title>
      <link>https://www.mirkosertic.de/blog/2016/12/preconditions-lombok-jsr-303-and-jsr-308/</link>
      <pubDate>Wed, 14 Dec 2016 12:33:44 +0100</pubDate>
      <guid>https://www.mirkosertic.de/blog/2016/12/preconditions-lombok-jsr-303-and-jsr-308/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;A good method implementation validates all of its preconditions before it continues. Luckily there are different frameworks such as Project Lombok, JSR 303 Bean Validation API and JSR 308 Java Type Annotations available for this job.  All of them are based on Java Annotations at method arguments, but they differ in runtime and compile time behavior. Here are some examples.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_project_lombok&#34;&gt;Project Lombok&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Project Lombok adds language features for boilerplate free code to the Java ecosystem. It is based on the Java Annotation Processor facility of the Java compiler. One of the features is null check of method preconditions. This is basically done by annotating the method arguments with @lombok.NonNull as shown in the following example:&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Building Modern Enterprise Apps: DDD meets JSF, EJB, and CDI</title>
      <link>https://www.mirkosertic.de/blog/2013/09/domain-driven-design-with-jsf-ejb-and-cdi/</link>
      <pubDate>Sun, 22 Sep 2013 06:08:29 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2013/09/domain-driven-design-with-jsf-ejb-and-cdi/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Based on my previous post about &lt;a href=&#34;https://www.mirkosertic.de/blog/2013/04/domain-driven-design-example/&#34;&gt;Domain-driven Design Architecture&lt;/a&gt; i want to offer some implementation details about how to build a DDD-style application based on JSF2, PrettyFaces, EJB and CDI. I will give some code samples to give you an idea about how to start with this topic. Everything else is up to you :-). Also please note that most of the ideas in this example is inspired by the CEC-ECB(CDI-EJB-CDI Entity-Control-Boundary) patterns as described by Oracle for the JEE6 design.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>A Domain-driven Design Example: From Chaos to Clean Architecture</title>
      <link>https://www.mirkosertic.de/blog/2013/04/domain-driven-design-example/</link>
      <pubDate>Mon, 22 Apr 2013 07:09:11 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2013/04/domain-driven-design-example/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;I saw a lot of IT projects in the past. Some of them were pretty good designed, others were really bad. Based on these experiences, I want to write a bit about an example project, and I also want to show how an example project can be modeled with UML and what would happen if we apply Domain-driven Design principles to the model.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Before you continue, you should read the books “Domain-driven Design” by Eric Evans and “Implementing Domain-driven Design” by Vaughn Vernon. Most of this example is based on their work and if you want to dive deeper into Domain-driven Design, their books are a must to read.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Elegant State Machines: A Java Enum Approach</title>
      <link>https://www.mirkosertic.de/blog/2013/04/implementing-state-machines-with-java-enums/</link>
      <pubDate>Mon, 08 Apr 2013 01:06:42 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2013/04/implementing-state-machines-with-java-enums/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Often we need to implement &lt;a href=&#34;http://en.wikipedia.org/wiki/State_pattern&#34;&gt;State Machines&lt;/a&gt; to encapsulate object behavior depending on a given object state. This can be cumbersome as it often leads to a lot of interfaces and implementation classes, and persisting such an object state often leads to problems, as we would need to implement a Hibernate custom type for instance to solve it.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Today i want you to show another approach. We model a State Machine using a Java Enum. The Enum concept fits better to the State Machine concept, and Java Enums are much more like an enumeration, they can also contain behavior!&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Layered Software Architecture: From Traditional to Onion Pattern</title>
      <link>https://www.mirkosertic.de/blog/2012/09/the-onion-architecture/</link>
      <pubDate>Mon, 10 Sep 2012 06:48:34 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2012/09/the-onion-architecture/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_the_problem&#34;&gt;The Problem&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Often we develop complex business driven applications. While we design our application, it’s architecture and it’s layers, we often feel to use a traditional approach to define the layers. Here is a short structure of what i mean:&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;span class=&#34;image&#34;&gt;&lt;img src=&#34;https://www.mirkosertic.de/media/traditionalpackaging.png&#34; alt=&#34;traditionalpackaging&#34;/&gt;&lt;/span&gt;&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;The problem with this structure is that the packaging is infrastructure driven. We have a user interface which uses the business logic. The business logic uses the data access layer to access data. There are also some cross cutting concerns like transaction control or security. This packaging was often motivated by classic J2EE patterns. But the problems are the dependencies.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Domain-driven Design Demystified: Essential Building Blocks and Patterns</title>
      <link>https://www.mirkosertic.de/blog/2012/07/domain-driven-design-overview-and-building-blocks/</link>
      <pubDate>Sun, 29 Jul 2012 08:42:57 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2012/07/domain-driven-design-overview-and-building-blocks/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;There are a lot of excellent blogs out where about Domain Driven Design and what it’s all about. I prefer &lt;a href=&#34;http://en.wikipedia.org/wiki/Domain-driven_design&#34;&gt;Wikipedia&lt;/a&gt; for a short introduction, but there is also an excellent article at &lt;a href=&#34;http://www.infoq.com/articles/ddd-in-practice&#34;&gt;InfoQ&lt;/a&gt; about Domain Driven Design. If you want to know more about the principles behind DDD, you can also consult the &lt;a href=&#34;http://en.wikipedia.org/wiki/GRASP_(object-oriented_design)&#34;&gt;GRASP Patterns&lt;/a&gt; or the &lt;a href=&#34;http://en.wikipedia.org/wiki/SOLID_(object-oriented_design)&#34;&gt;SOLID Patterns&lt;/a&gt;. Here is a summary of DDD (also taken from Wikipedia):&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_core_definitions&#34;&gt;Core definitions&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;ulist&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Domain: A sphere of knowledge (ontology), influence, or activity. The subject area to which the user applies a program is the domain of the software.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Model: A system of abstractions that describes selected aspects of a domain and can be used to solve problems related to that domain.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Ubiquitous Language: A language structured around the domain model and used by all team members to connect all the activities of the team with the software.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Context: The setting in which a word or statement appears that determines its meaning.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;</description>
    </item>
  </channel>
</rss>
