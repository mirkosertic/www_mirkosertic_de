<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Maven on www.mirkosertic.de</title>
    <link>https://www.mirkosertic.de/tags/maven/</link>
    <description>Recent content in Maven on www.mirkosertic.de</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>Mirko Sertic</copyright>
    <lastBuildDate>Tue, 19 Nov 2024 12:01:27 +0100</lastBuildDate>
    <atom:link href="https://www.mirkosertic.de/tags/maven/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Maven Magic: Removing Primary Artifacts While Keeping RPMs</title>
      <link>https://www.mirkosertic.de/blog/2016/06/how-to-remove-the-maven-primary-artifact-during-install-and-deploy-phase/</link>
      <pubDate>Fri, 17 Jun 2016 04:35:13 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2016/06/how-to-remove-the-maven-primary-artifact-during-install-and-deploy-phase/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Sometimes we use Maven “war” packaging and add the RPM Plugin to create a rpm which contains the project primary artifact. When this rpm needs to be published to the Maven repository, it can be added as a secondary artifact to the build. Here is an example of the plugin configuration in pom.xml:&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;listingblock&#34;&gt;&#xA;&lt;div class=&#34;content&#34;&gt;&#xA;&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&amp;lt;plugin&amp;gt;&#xA;&#x9;&amp;lt;groupId&amp;gt;org.codehaus.mojo&amp;lt;/groupId&amp;gt;&#xA;&#x9;&amp;lt;artifactId&amp;gt;rpm-maven-plugin&amp;lt;/artifactId&amp;gt;&#xA;&#x9;&amp;lt;executions&amp;gt;&#xA;&#x9;    &amp;lt;execution&amp;gt;&#xA;&#x9;&#x9;&amp;lt;goals&amp;gt;&#xA;&#x9;&#x9;    &amp;lt;goal&amp;gt;attached-rpm&amp;lt;/goal&amp;gt;&#xA;&#x9;&#x9;&amp;lt;/goals&amp;gt;&#xA;&#x9;&#x9;&amp;lt;phase&amp;gt;package&amp;lt;/phase&amp;gt;&#xA;&#x9;    &amp;lt;/execution&amp;gt;&#xA;&#x9;&amp;lt;/executions&amp;gt;&#xA;&amp;lt;/plugin&amp;gt;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;This configuration also installs the war and the rpm to the local and even remote repository. If you setup your Maven repository, for instance Nexus, as a yum repository, we are only interested in the rpm, so deploying the war to the repository is a waste of disk space.&#xA;Of course we could change the Maven packaging to RPM, but then we would have to declare the war plugin configuration by hand. But there is also another solution to remove the primary artifact from install and deploy phase. With a little bit of Groovy, we can do the following:&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Mastering Maven Artifact Downloads with Eclipse Aether: A Developer&#39;s Guide</title>
      <link>https://www.mirkosertic.de/blog/2015/12/how-to-download-maven-artifacts-with-maven-3-1-and-eclipse-aether/</link>
      <pubDate>Tue, 29 Dec 2015 11:50:42 +0100</pubDate>
      <guid>https://www.mirkosertic.de/blog/2015/12/how-to-download-maven-artifacts-with-maven-3-1-and-eclipse-aether/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Starting with Maven 3.1, Sonatype Aether(&lt;a href=&#34;https://github.com/sonatype/sonatype-aether&#34;&gt;github.com/sonatype/sonatype-aether&lt;/a&gt; ) was replaced with Eclipse Eather(&lt;a href=&#34;http://www.eclipse.org/aether&#34;&gt;www.eclipse.org/aether&lt;/a&gt; ). Now, sometimes we need do download additional Artifacts from Maven repositories during execution time of custom Maven plugins. As the Maven and Aether documentation is not very handsome, here is a short example about how to programmatically download and resolve Maven Artifacts using Maven 3.1 and later with the Eclipse Aether API:&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;listingblock&#34;&gt;&#xA;&lt;div class=&#34;content&#34;&gt;&#xA;&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;import java.io.File;&#xA;import java.util.ArrayList;&#xA;import java.util.List;&#xA;&#xA;import org.apache.maven.execution.MavenSession;&#xA;import org.apache.maven.plugin.AbstractMojo;&#xA;import org.apache.maven.plugin.BuildPluginManager;&#xA;import org.apache.maven.plugin.MojoExecutionException;&#xA;import org.apache.maven.plugins.annotations.Component;&#xA;import org.apache.maven.plugins.annotations.LifecyclePhase;&#xA;import org.apache.maven.plugins.annotations.Mojo;&#xA;import org.apache.maven.plugins.annotations.Parameter;&#xA;import org.apache.maven.project.MavenProject;&#xA;&#xA;import org.eclipse.aether.RepositorySystem;&#xA;import org.eclipse.aether.RepositorySystemSession;&#xA;import org.eclipse.aether.artifact.Artifact;&#xA;import org.eclipse.aether.artifact.DefaultArtifact;&#xA;import org.eclipse.aether.collection.CollectRequest;&#xA;import org.eclipse.aether.graph.DependencyFilter;&#xA;import org.eclipse.aether.repository.RemoteRepository;&#xA;import org.eclipse.aether.resolution.ArtifactResult;&#xA;import org.eclipse.aether.resolution.DependencyRequest;&#xA;import org.eclipse.aether.resolution.DependencyResolutionException;&#xA;import org.eclipse.aether.resolution.DependencyResult;&#xA;import org.eclipse.aether.util.artifact.JavaScopes;&#xA;import org.eclipse.aether.util.filter.DependencyFilterUtils;&#xA;&#xA;@Mojo(name = &amp;#34;download-mojo&amp;#34;, defaultPhase = LifecyclePhase.PACKAGE)&#xA;public class DownloadMojo extends AbstractMojo {&#xA;&#xA;    @Component&#xA;    private MavenProject mavenProject;&#xA;&#xA;    @Component&#xA;    private MavenSession mavenSession;&#xA;&#xA;    @Component&#xA;    private BuildPluginManager pluginManager;&#xA;&#xA;    @Component&#xA;    private RepositorySystem repositorySystem;&#xA;&#xA;    @Parameter(defaultValue = &amp;#34;${repositorySystemSession}&amp;#34;, readonly = true)&#xA;    private RepositorySystemSession repositorySystemSession;&#xA;&#xA;    @Parameter(defaultValue = &amp;#34;${project.remotePluginRepositories}&amp;#34;, readonly = true)&#xA;    private List&amp;lt;RemoteRepository&amp;gt; remoteRepositories;&#xA;&#xA;    public void execute() throws MojoExecutionException {&#xA;              // We want to collect the files in our local repository here&#xA;              List theResult = new ArrayList&amp;lt;&amp;gt;();&#xA;&#xA;              String theGroupId = &amp;#34;&amp;#34;; // Replace with your Artifact&#xA;              String theArtifactId = &amp;#34;&amp;#34;; // Replace with your Artifact&#xA;              String theArtifactVersion = &amp;#34;&amp;#34;; // Replace with your Artifact&#xA;              String theClassifier = &amp;#34;&amp;#34;; // Replace with your Artifact&#xA;              String theExtension = &amp;#34;&amp;#34;; // Replace with your Artifact&#xA;              String theScope = JavaScopes.COMPILE; // Replace with your Artifact&#xA;&#xA;              // We create a collect request here&#xA;              // By adding the remote repositories we force Aether to download artifacts if they&#xA;              // are not already in the local reposaitory&#xA;              CollectRequest theCollectRequest = new CollectRequest();&#xA;              theCollectRequest.setRoot(new org.eclipse.aether.graph.Dependency(new DefaultArtifact(theGroupId, theArtifactId,&#xA;                               theClassifier, theExtension, theArtifactVersion), theScope));&#xA;              for (RemoteRepository theRepository : remoteRepositories) {&#xA;                        theCollectRequest.addRepository(theRepository);&#xA;              }&#xA;&#xA;              // We filter dependencies here, as we only want compile scope&#xA;              DependencyFilter theDependencyFilter = DependencyFilterUtils.classpathFilter(theScope);&#xA;              DependencyRequest theDependencyRequest = new DependencyRequest(theCollectRequest, theDependencyFilter);&#xA;              try {&#xA;                        DependencyResult theDependencyResult = repositorySystem.resolveDependencies(repositorySystemSession, theDependencyRequest);&#xA;                        for (ArtifactResult theArtifactResult : theDependencyResult.getArtifactResults()) {&#xA;                                  Artifact theResolved = theArtifactResult.getArtifact();&#xA;                                  // Now we have the artifact file locally stored available&#xA;                                  // and we can do something with it&#xA;                                  File theLocallyStoredFile = theResolved.getFile();&#xA;                                  theResult.add(theLocallyStoredFile);&#xA;                        }&#xA;               } catch (DependencyResolutionException e) {&#xA;                        throw new MojoExecutionException(&amp;#34;Error while resolving dependency&amp;#34;, e);&#xA;               }&#xA;    }&#xA;}&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;/div&gt;</description>
    </item>
  </channel>
</rss>
