<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Compiler on www.mirkosertic.de</title>
    <link>https://www.mirkosertic.de/tags/compiler/</link>
    <description>Recent content in Compiler on www.mirkosertic.de</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Mirko Sertic</copyright>
    <lastBuildDate>Thu, 20 Dec 2018 00:00:00 +0200</lastBuildDate>
    
	<atom:link href="https://www.mirkosertic.de/tags/compiler/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>WebAssembly with vue.js</title>
      <link>https://www.mirkosertic.de/blog/2018/12/webassembly-and-vuejs/</link>
      <pubDate>Thu, 20 Dec 2018 00:00:00 +0200</pubDate>
      
      <guid>https://www.mirkosertic.de/blog/2018/12/webassembly-and-vuejs/</guid>
      <description>State of the union WebAssembly for starters is a standard for high-performance, size-optimized executable code for the Web. It was released in March 2017 by the WebAssembly working group as version 1.0, which is basically a MVP (Minimum Viable Product), but the initial development started in June 2017. WebAssembly is the successor asm.js and the Google Native Client (NaCL).
 WebAssembly itself is merely a sandboxed runtime environment. It was designed as a compile target.</description>
    </item>
    
    <item>
      <title>Alice, Bob, Carol and Dave OpenCL Edition</title>
      <link>https://www.mirkosertic.de/blog/2018/02/alicebobcaroldaveopencl/</link>
      <pubDate>Thu, 01 Feb 2018 00:00:00 +0200</pubDate>
      
      <guid>https://www.mirkosertic.de/blog/2018/02/alicebobcaroldaveopencl/</guid>
      <description>An office fairy tale Once upon a time in an office far far away worked four very nice IT people very hard in their office cubicles. Their names were Alice, Bob, Carol and Dave.
 They worked very hard each day. They started work at 9 o&amp;#8217;clock, and finished often after sunset. They were very happy in their business, but they were very lonely in their private life due to the amount of work they did every day.</description>
    </item>
    
    <item>
      <title>Object-Oriented WebAssembly</title>
      <link>https://www.mirkosertic.de/blog/2018/01/object-oriented-webassembly/</link>
      <pubDate>Mon, 01 Jan 2018 12:00:00 +0100</pubDate>
      
      <guid>https://www.mirkosertic.de/blog/2018/01/object-oriented-webassembly/</guid>
      <description>Today, I want to write a little bit about object orientation and WebAssembly. For starters, what is WebAssembly? WebAssembly is a new portable, size and load-time efficient format suitable for compilation to the web. It is an open standard by a W3C community group and is currently integrated into all major browsers such as Firefox, Chrome, Edge and WebKit. WebAssembly aims to keep download speed and parsing time of program code low and execute at native speed by taking advance of common hardware capabilities available on a wide range of platforms.</description>
    </item>
    
    <item>
      <title>Bytecoder : A Low Level Bytecode to JavaScript Transpiler</title>
      <link>https://www.mirkosertic.de/blog/2017/06/compiling-bytecode-to-javascript/</link>
      <pubDate>Tue, 20 Jun 2017 00:00:00 +0200</pubDate>
      
      <guid>https://www.mirkosertic.de/blog/2017/06/compiling-bytecode-to-javascript/</guid>
      <description>The Idea JavaScript is everywhere! Almost every device we use today is connected to the Internet and supports JavaScript by its runtime environment. But in the same way new devices arrive on the market, old software written in plain old Java is still alive and useful. The idea is now to bridge the gap between this shiny new JavaScript world and our old but still useful legacy software written in Java.</description>
    </item>
    
    <item>
      <title>Compile Time Speed GWT 2.8.0 vs. TeaVM 0.4.3 vs. TeaVM 1.0.0-SNAPSHOT</title>
      <link>https://www.mirkosertic.de/blog/2016/11/compile-time-speed-gwt-2-8-0-vs-teavm-0-4-3/</link>
      <pubDate>Thu, 24 Nov 2016 06:14:41 +0100</pubDate>
      
      <guid>https://www.mirkosertic.de/blog/2016/11/compile-time-speed-gwt-2-8-0-vs-teavm-0-4-3/</guid>
      <description>Some years ago I wrote a JavaFX based Game authoring system. It was also written to be ported to different run time environments by using transpiler technologies such as GWT or TeaVM. While TeaVM was heavily improved over time, I haven&amp;#8217;t seen a new GWT release in the wild. Now, GWT 2.8.0 is released, and the question arises: Is the compiler still as slow as in 2.7? Well, lets take a look!</description>
    </item>
    
    <item>
      <title>GWT vs. Dragome vs. TeaVM for Game Programming</title>
      <link>https://www.mirkosertic.de/blog/2014/12/gwt-vs-dragome-vs-teavm-for-game-programming/</link>
      <pubDate>Thu, 18 Dec 2014 11:43:01 +0100</pubDate>
      
      <guid>https://www.mirkosertic.de/blog/2014/12/gwt-vs-dragome-vs-teavm-for-game-programming/</guid>
      <description>Last year I wrote a cross platform game engine. It used a JavaFX based Game Authoring System and had a Java based Game Runtime, which was transpiled to different platforms such as Android, JavaScript over GWT and JavaFX.
 Here is a screenshot of a simple platform game based on the GameEngine, some physics stuff and a lot of Java code:
 
 Here is also a screenshot of the JavaFX based game authoring system while editing the example game:</description>
    </item>
    
  </channel>
</rss>