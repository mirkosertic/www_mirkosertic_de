<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Enterprise on www.mirkosertic.de</title>
    <link>https://www.mirkosertic.de/tags/enterprise/</link>
    <description>Recent content in Enterprise on www.mirkosertic.de</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Mirko Sertic</copyright>
    <lastBuildDate>Thu, 26 Oct 2017 00:00:00 +0200</lastBuildDate>
    
	<atom:link href="https://www.mirkosertic.de/tags/enterprise/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Implementing a custom Query Parser for Apache Solr</title>
      <link>https://www.mirkosertic.de/blog/2017/10/custom-query-parser-for-solr/</link>
      <pubDate>Thu, 26 Oct 2017 00:00:00 +0200</pubDate>
      
      <guid>https://www.mirkosertic.de/blog/2017/10/custom-query-parser-for-solr/</guid>
      <description>Apache Solr is a very powerful and mature enterprise search server. It comes with a lot of handy and useful features. One of its features is the query API.
 Now, what is the query API? This API is used to search thru the indexed documents, as the name suggests. But how are the documents searched? Well, the search is based on a search query. Basically the search query is a string, and this string is passed to a so called query parser.</description>
    </item>
    
    <item>
      <title>Service integration at UI level with server side includes(SSI)</title>
      <link>https://www.mirkosertic.de/blog/2017/03/integration-at-ui-level-with-server-side-includes/</link>
      <pubDate>Mon, 06 Mar 2017 00:00:00 +0100</pubDate>
      
      <guid>https://www.mirkosertic.de/blog/2017/03/integration-at-ui-level-with-server-side-includes/</guid>
      <description>Microservices everywhere Today, Microservices are a common software modeling technique. This style is based on the principles behind Domain-driven Design, where every bounded context is equivalent to a service. If we also take the Twelve-Factor App manifesto into consideration, we able to create scalable and cloud ready systems.
 But this design can also lead to problems. If we take the Microservice design too far(Nanoservices), we are quickly getting way to much services we can handle and maintain.</description>
    </item>
    
    <item>
      <title>Domain-driven Design with JSF, EJB and CDI</title>
      <link>https://www.mirkosertic.de/blog/2013/09/domain-driven-design-with-jsf-ejb-and-cdi/</link>
      <pubDate>Sun, 22 Sep 2013 06:08:29 +0200</pubDate>
      
      <guid>https://www.mirkosertic.de/blog/2013/09/domain-driven-design-with-jsf-ejb-and-cdi/</guid>
      <description>Based on my previous post about Domain-driven Design Architecture i want to offer some implementation details about how to build a DDD-style application based on JSF2, PrettyFaces, EJB and CDI. I will give some code samples to give you an idea about how to start with this topic. Everything else is up to you :-). Also please note that most of the ideas in this example is inspired by the CEC-ECB(CDI-EJB-CDI Entity-Control-Boundary) patterns as described by Oracle for the JEE6 design.</description>
    </item>
    
    <item>
      <title>Building Portals with JavaFX, HTML5 and some Microdata</title>
      <link>https://www.mirkosertic.de/blog/2013/05/building-portals-with-javafx-html5-and-some-microdata/</link>
      <pubDate>Tue, 07 May 2013 09:37:10 +0200</pubDate>
      
      <guid>https://www.mirkosertic.de/blog/2013/05/building-portals-with-javafx-html5-and-some-microdata/</guid>
      <description>Often we need to integrate different applications. This can be done at different integration levels, like integration using the database, integration using services and sometimes integration at user interface level.
 Different solutions are available for user interface level application integration. The most famous are Portlets. A Portlet requires a Portlet Container to build a Portal. These containers are expensive, difficult to configure and maintain and the worst point is: the Portlet API is very limited to model complex integration scenarios!</description>
    </item>
    
    <item>
      <title>A JavaFX based Desktop Search Engine</title>
      <link>https://www.mirkosertic.de/blog/2013/04/a-javafx-based-desktop-search-engine/</link>
      <pubDate>Fri, 26 Apr 2013 09:17:13 +0200</pubDate>
      
      <guid>https://www.mirkosertic.de/blog/2013/04/a-javafx-based-desktop-search-engine/</guid>
      <description>Microsoft Windows search is not fast, and it also does not give us good search results. So i thought about writing my own Search Engine for the Desktop. It should crawl the file system, extract the content and meta data and finally should give the same results as Google.
 I also wanted to test some new technologies like JavaFX with embedded HTML5, Apache Lucene as a full text search engine, Apache Tika as the content extraction framework and other stuff.</description>
    </item>
    
    <item>
      <title>Google Style Query Parser for Apache Lucene</title>
      <link>https://www.mirkosertic.de/blog/2013/04/google-style-query-parser-for-apache-lucene/</link>
      <pubDate>Fri, 26 Apr 2013 08:29:50 +0200</pubDate>
      
      <guid>https://www.mirkosertic.de/blog/2013/04/google-style-query-parser-for-apache-lucene/</guid>
      <description>I needed a query parser for Apache Lucene supporting Google style queries. Basically the following searches should be supported:
 mirko sertic → Should result in a BooleanQuery with “mirko” and “sertic” +mirko+sertic → Should result in a BooleanQuery with “mirko” and “sertic” +mirko +sertic → Should result in a BooleanQuery with “mirko” and “sertic” mirko sertic -klaus → Should result in a BooleanQuery with “mirko” and “sertic” but not “klaus” “mirko sertic” → Should result in a PhraeQuery with terms “mirko” and “sertic” in sequence mirko~ → Should result in a FuzzyQuery with “mirko”</description>
    </item>
    
    <item>
      <title>Enterprise Scala Beans or Scala on a JEE application server</title>
      <link>https://www.mirkosertic.de/blog/2013/03/enterprise-scala-beans-or-scala-on-a-jee-application-server/</link>
      <pubDate>Tue, 26 Mar 2013 08:50:41 +0100</pubDate>
      
      <guid>https://www.mirkosertic.de/blog/2013/03/enterprise-scala-beans-or-scala-on-a-jee-application-server/</guid>
      <description>Once i was thinking about writing Enterprise Java Beans(EJBs) with the Scala programming language. This should be easy as Scala greatly incorporates with existing Java code bases. But let&amp;#8217;s create a small test to verify this!
 For this example, i am using Apache TomEE 1.5.1 as a JEE Web Profile certified server and Scala 2.10 to create a small stateless session bean and invoke it from a servlet. The stateless bean is injected to the servlet using CDI.</description>
    </item>
    
    <item>
      <title>Using Scala with JPA 2.0</title>
      <link>https://www.mirkosertic.de/blog/2013/03/using-scala-with-jpa-2-0/</link>
      <pubDate>Tue, 19 Mar 2013 10:54:04 +0100</pubDate>
      
      <guid>https://www.mirkosertic.de/blog/2013/03/using-scala-with-jpa-2-0/</guid>
      <description>Recently i was thinking about persisting Scala classes with JPA. I tried to set up a mixed Java/Scala project as described here , using Java code to do the JPA stuff and using Scala to create the entities. For a more complex example, i decided to persist a master/detail association to test if the Scala collections can be persisted, too. For the test i am using Scala 2.10.1 and the Hibernate 4.</description>
    </item>
    
    <item>
      <title>Using and enhancing Hibernate Search</title>
      <link>https://www.mirkosertic.de/blog/2012/11/using-and-enhancing-hibernate-search/</link>
      <pubDate>Sat, 17 Nov 2012 06:15:15 +0100</pubDate>
      
      <guid>https://www.mirkosertic.de/blog/2012/11/using-and-enhancing-hibernate-search/</guid>
      <description>www.hibernate.org is a very cool and mature Java Object-Relational mapping tool. Using Hibernate we can easily persist or reconstitute Java Objects to or from a relational database like MySQL, PostgreSQL, SQLServer or Oracle.
 Hibernate supports us to query the database using the Criteria API or HQL Statements(Or we can use Tools like QueryDSL). But Hibernate core lacks supporting us to do free style or even full text queries. For this purpose, Hibernate Search was created.</description>
    </item>
    
    <item>
      <title>Logging made easy</title>
      <link>https://www.mirkosertic.de/blog/2012/10/logging-made-easy/</link>
      <pubDate>Thu, 04 Oct 2012 03:41:46 +0200</pubDate>
      
      <guid>https://www.mirkosertic.de/blog/2012/10/logging-made-easy/</guid>
      <description>In modern, distributed applications logging is a key requirement. But the problem arises if we try to track down an error using different log files on different servers. This is often a problem, depending on the business organization, access rights and other political forces.
 To avoid wasting time to find and get the logs, we need a good tool to support us. Fortunately the Open Source Community has an answer.</description>
    </item>
    
    <item>
      <title>Building CDI support with AOP and AspectJ</title>
      <link>https://www.mirkosertic.de/blog/2012/10/building-cdi-support-with-aop-and-aspectj/</link>
      <pubDate>Mon, 01 Oct 2012 02:47:45 +0200</pubDate>
      
      <guid>https://www.mirkosertic.de/blog/2012/10/building-cdi-support-with-aop-and-aspectj/</guid>
      <description>CDI is a mighty enhancement to the Java programming language. But CDI has also some limitations that might be cumbersome:
   CDI needs a CDI container
  All dependency injected beans are also managed beans
  Hibernate or JPA entities are not managed by the CDI container, so there is no CDI support for them
   So what can we do to get around these limitations, for instance we really want dependency injection in our Entities?</description>
    </item>
    
    <item>
      <title>The Onion Architecture</title>
      <link>https://www.mirkosertic.de/blog/2012/09/the-onion-architecture/</link>
      <pubDate>Mon, 10 Sep 2012 06:48:34 +0200</pubDate>
      
      <guid>https://www.mirkosertic.de/blog/2012/09/the-onion-architecture/</guid>
      <description>The Problem Often we develop complex business driven applications. While we design our application, it&amp;#8217;s architecture and it&amp;#8217;s layers, we often feel to use a traditional approach to define the layers. Here is a short structure of what i mean:
 
 The problem with this structure is that the packaging is infrastructure driven. We have a user interface which uses the business logic. The business logic uses the data access layer to access data.</description>
    </item>
    
    <item>
      <title>Enriching legacy applications with CDI</title>
      <link>https://www.mirkosertic.de/blog/2012/08/enriching-legacy-applications-with-cdi/</link>
      <pubDate>Wed, 15 Aug 2012 09:45:09 +0200</pubDate>
      
      <guid>https://www.mirkosertic.de/blog/2012/08/enriching-legacy-applications-with-cdi/</guid>
      <description>There are a lot of applications out there. Some of them are legacy, others are in their maintenance phase. While we are developing new applications, we can use the coolest new technologies, think about good design and other stuff. But what about the software maintenance phase? Often, due to lack of time and other constraints, we cannot do everything perfectly, we need to move some refactoring or even re-engineering to the maintenance phase.</description>
    </item>
    
    <item>
      <title>A first touch with NoSQL, graph databases and OrientDB</title>
      <link>https://www.mirkosertic.de/blog/2012/08/a-first-touch-with-nosql-graph-databases-and-orientdb/</link>
      <pubDate>Wed, 01 Aug 2012 01:43:48 +0200</pubDate>
      
      <guid>https://www.mirkosertic.de/blog/2012/08/a-first-touch-with-nosql-graph-databases-and-orientdb/</guid>
      <description>The experiment I was thinking about the current way we often store data in relational databases like MySQL, PostgreSQL or Oracle. We are using object-relational mapping frameworks like Hibernate, enriching Java classes with JPA annotations and are hoping that the mapping framework does everything for us the right way.
 But wait a minute. What are we storing here? Basically we are storing Java object graphs using our ORM framework. Object graphs.</description>
    </item>
    
    <item>
      <title>Enterprise search with Apache Solr</title>
      <link>https://www.mirkosertic.de/blog/2012/07/enterprise-search-with-apache-solr/</link>
      <pubDate>Mon, 30 Jul 2012 10:30:07 +0200</pubDate>
      
      <guid>https://www.mirkosertic.de/blog/2012/07/enterprise-search-with-apache-solr/</guid>
      <description>It you want to build a enterprise search engine, you don&amp;#8217;t have to reinvent the wheel. You can use open source engines like Apache Lucene or if you have just one day to implement it Apache Solr. Solr is a full blown enterprise search server, which comes with a lot of bundled plugins like meta-data and content extraction from a very common set of document types with Apache Tika , search highlighting, fragmented search and also similarity search for search results.</description>
    </item>
    
    <item>
      <title>Reusing domain objects to create query specifications</title>
      <link>https://www.mirkosertic.de/blog/2012/07/reusing-domain-objects-to-create-query-specifications/</link>
      <pubDate>Fri, 20 Jul 2012 02:18:59 +0200</pubDate>
      
      <guid>https://www.mirkosertic.de/blog/2012/07/reusing-domain-objects-to-create-query-specifications/</guid>
      <description>Problem Often you need to create query specifications to retrieve data from persistent memory. One of the following patterns is most likely used:
 Bind Entity or Service with a distinct Query Object to the repository. A Service creates a distinct query object, passes it to the repository. Here the query object is translated to a Hibernate or JPA Criteria or HQL Statement and finally executed against the database.
 Pros:</description>
    </item>
    
  </channel>
</rss>