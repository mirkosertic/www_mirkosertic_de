<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Enterprise on www.mirkosertic.de</title>
    <link>https://www.mirkosertic.de/tags/enterprise/</link>
    <description>Recent content in Enterprise on www.mirkosertic.de</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>Mirko Sertic</copyright>
    <lastBuildDate>Wed, 04 May 2022 22:44:59 +0200</lastBuildDate>
    <atom:link href="https://www.mirkosertic.de/tags/enterprise/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Running Swing Applications with JetBrains Projector in a browser</title>
      <link>https://www.mirkosertic.de/blog/2021/08/swing-jetbrains-projector/</link>
      <pubDate>Sun, 15 Aug 2021 00:00:00 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2021/08/swing-jetbrains-projector/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_a_story_of_two_worlds&#34;&gt;A story of two worlds&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Java Swing is part of the Java Runtime since version 1.2. Swing is also part of the Java Foundation Classes, which are the library for creating component bases, modular, portable, and cross-platform graphical user interfaces. Being part of the core runtime, Java Swing is a valid choice for a lot of projects running in a different environment, starting from tiny calculator applications to humongous insurance or tax administration systems.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Self-Contained-Systems Light &amp; Shadow</title>
      <link>https://www.mirkosertic.de/blog/2021/04/scs-light-and-shadow/</link>
      <pubDate>Wed, 07 Apr 2021 00:00:00 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2021/04/scs-light-and-shadow/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_self_contained_cystem_what_is_it&#34;&gt;Self-Contained-Cystem, what is it?&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Self-Contained-System, referred to the following short SCS, is an architectural approach. The idea is to map requirements using individual,&#xA;functionally independent systems. These systems include everything for mapping the necessary requirements, starting with data management,&#xA;the actual business logic and finally a complete user interface. This makes these systems self-contained.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Each SCS should be looked after by its own development team. In addition to the technical separation of the systems, this architectural approach&#xA;should also facilitate the organizational separation. By avoiding dependencies, the teams also become more independent and therefore more flexible.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Implementing a custom Query Parser for Apache Solr</title>
      <link>https://www.mirkosertic.de/blog/2017/10/custom-query-parser-for-solr/</link>
      <pubDate>Thu, 26 Oct 2017 00:00:00 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2017/10/custom-query-parser-for-solr/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Apache Solr is a very powerful and mature enterprise search server. It comes with a lot of handy&#xA;and useful features. One of its features is the query API.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Now, what is the query API? This API is used to search thru the indexed documents, as the name suggests.&#xA;But how are the documents searched? Well, the search is based on a search query. Basically the search query&#xA;is a string, and this string is passed to a so called query parser. The query parser then transforms the query&#xA;string to a Lucene query instance, which is then used by Solr to crawl the index and return found documents.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Service integration at UI level with server side includes(SSI)</title>
      <link>https://www.mirkosertic.de/blog/2017/03/integration-at-ui-level-with-server-side-includes/</link>
      <pubDate>Mon, 06 Mar 2017 00:00:00 +0100</pubDate>
      <guid>https://www.mirkosertic.de/blog/2017/03/integration-at-ui-level-with-server-side-includes/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_microservices_everywhere&#34;&gt;Microservices everywhere&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Today, &lt;a href=&#34;https://en.wikipedia.org/wiki/Microservices&#34;&gt;Microservices&lt;/a&gt; are a common software modeling technique. This style&#xA;is based on the principles behind &lt;a href=&#34;https://en.wikipedia.org/wiki/Domain-driven_design&#34;&gt;Domain-driven Design&lt;/a&gt;, where every&#xA;bounded context is equivalent to a service. If we also take the &lt;a href=&#34;https://12factor.net&#34;&gt;Twelve-Factor App&lt;/a&gt; manifesto into&#xA;consideration, we able to create scalable and cloud ready systems.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;But this design can also lead to problems. If we take the Microservice design too far(&lt;a href=&#34;https://en.wikipedia.org/wiki/Microservices&#34;&gt;Nanoservices&lt;/a&gt;), we are quickly getting way to&#xA;much services we can handle and maintain. There is also the risk that we are somehow violating the original bounded context&#xA;of our services, leading to lack of responsibility and functional encapsulation. Maybe the Microservices could degenerate&#xA;to some kind of remote data access object. If we do not respect the principle of independently deployable units, we&#xA;would be quickly creating a distributed, complex and very slow monolith.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Domain-driven Design with JSF, EJB and CDI</title>
      <link>https://www.mirkosertic.de/blog/2013/09/domain-driven-design-with-jsf-ejb-and-cdi/</link>
      <pubDate>Sun, 22 Sep 2013 06:08:29 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2013/09/domain-driven-design-with-jsf-ejb-and-cdi/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Based on my previous post about &lt;a href=&#34;https://www.mirkosertic.de/blog/2013/04/domain-driven-design-example/&#34;&gt;Domain-driven Design Architecture&lt;/a&gt; i want to offer some implementation details about how to build a DDD-style application based on JSF2, PrettyFaces, EJB and CDI. I will give some code samples to give you an idea about how to start with this topic. Everything else is up to you :-). Also please note that most of the ideas in this example is inspired by the CEC-ECB(CDI-EJB-CDI Entity-Control-Boundary) patterns as described by Oracle for the JEE6 design.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Building Portals with JavaFX, HTML5 and some Microdata</title>
      <link>https://www.mirkosertic.de/blog/2013/05/building-portals-with-javafx-html5-and-some-microdata/</link>
      <pubDate>Tue, 07 May 2013 09:37:10 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2013/05/building-portals-with-javafx-html5-and-some-microdata/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Often we need to integrate different applications. This can be done at different integration levels, like integration using the database, integration using services and sometimes integration at user interface level.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Different solutions are available for user interface level application integration. The most famous are Portlets. A Portlet requires a Portlet Container to build a Portal. These containers are expensive, difficult to configure and maintain and the worst point is: the Portlet API is very limited to model complex integration scenarios!&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>A JavaFX based Desktop Search Engine</title>
      <link>https://www.mirkosertic.de/blog/2013/04/a-javafx-based-desktop-search-engine/</link>
      <pubDate>Fri, 26 Apr 2013 09:17:13 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2013/04/a-javafx-based-desktop-search-engine/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Microsoft Windows search is not fast, and it also does not give us good search results. So i thought about writing my own Search Engine for the Desktop. It should crawl the file system, extract the content and meta data and finally should give the same results as Google.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;I also wanted to test some new technologies like JavaFX with embedded HTML5, Apache Lucene as a full text search engine, Apache Tika as the content extraction framework and other stuff. But before we dive deep into internals, lets take a look at the frontend:&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Google Style Query Parser for Apache Lucene</title>
      <link>https://www.mirkosertic.de/blog/2013/04/google-style-query-parser-for-apache-lucene/</link>
      <pubDate>Fri, 26 Apr 2013 08:29:50 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2013/04/google-style-query-parser-for-apache-lucene/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;I needed a query parser for Apache Lucene supporting Google style queries. Basically the following searches should be supported:&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;mirko sertic → Should result in a BooleanQuery with “mirko” and “sertic”&#xA;+mirko+sertic → Should result in a BooleanQuery with “mirko” and “sertic”&#xA;+mirko +sertic → Should result in a BooleanQuery with “mirko” and “sertic”&#xA;mirko sertic -klaus → Should result in a BooleanQuery with “mirko” and “sertic” but not “klaus”&#xA;“mirko sertic” → Should result in a PhraeQuery with terms “mirko” and “sertic” in sequence&#xA;mirko~ → Should result in a FuzzyQuery with “mirko”&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Enterprise Scala Beans or Scala on a JEE application server</title>
      <link>https://www.mirkosertic.de/blog/2013/03/enterprise-scala-beans-or-scala-on-a-jee-application-server/</link>
      <pubDate>Tue, 26 Mar 2013 08:50:41 +0100</pubDate>
      <guid>https://www.mirkosertic.de/blog/2013/03/enterprise-scala-beans-or-scala-on-a-jee-application-server/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Once i was thinking about writing Enterprise Java Beans(EJBs) with the Scala programming language. This should be easy as Scala greatly incorporates with existing Java code bases. But let’s create a small test to verify this!&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;For this example, i am using Apache TomEE 1.5.1 as a JEE Web Profile certified server and Scala 2.10 to create a small stateless session bean and invoke it from a servlet. The stateless bean is injected to the servlet using CDI. I use IntelliJ 12 as my favorite IDE.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Using Scala with JPA 2.0</title>
      <link>https://www.mirkosertic.de/blog/2013/03/using-scala-with-jpa-2-0/</link>
      <pubDate>Tue, 19 Mar 2013 10:54:04 +0100</pubDate>
      <guid>https://www.mirkosertic.de/blog/2013/03/using-scala-with-jpa-2-0/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Recently i was thinking about persisting Scala classes with JPA. I tried to set up a mixed Java/Scala project as described &lt;a href=&#34;https://www.mirkosertic.de/blog/2013/03/using-scala-in-legacy-applications/&#34;&gt;here&lt;/a&gt; , using Java code to do the JPA stuff and using Scala to create the entities. For a more complex example, i decided to persist a master/detail association to test if the Scala collections can be persisted, too. For the test i am using Scala 2.10.1 and the Hibernate 4.1.10.Final EntityManager as the JPA 2.0 vendor.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Using and enhancing Hibernate Search</title>
      <link>https://www.mirkosertic.de/blog/2012/11/using-and-enhancing-hibernate-search/</link>
      <pubDate>Sat, 17 Nov 2012 06:15:15 +0100</pubDate>
      <guid>https://www.mirkosertic.de/blog/2012/11/using-and-enhancing-hibernate-search/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://www.hibernate.org/&#34;&gt;www.hibernate.org&lt;/a&gt; is a very cool and mature Java Object-Relational mapping tool. Using Hibernate we can easily persist or reconstitute Java Objects to or from a relational database like MySQL, PostgreSQL, SQLServer or Oracle.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Hibernate supports us to query the database using the Criteria API or HQL Statements(Or we can use Tools like QueryDSL). But Hibernate core lacks supporting us to do free style or even full text queries. For this purpose, Hibernate Search was created.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Logging made easy</title>
      <link>https://www.mirkosertic.de/blog/2012/10/logging-made-easy/</link>
      <pubDate>Thu, 04 Oct 2012 03:41:46 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2012/10/logging-made-easy/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;In modern, distributed applications logging is a key requirement. But the problem arises if we try to track down an error using different log files on different servers. This is often a problem, depending on the business organization, access rights and other political forces.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;To avoid wasting time to find and get the logs, we need a good tool to support us. Fortunately the Open Source Community has an answer. Logstash!&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Building CDI support with AOP and AspectJ</title>
      <link>https://www.mirkosertic.de/blog/2012/10/building-cdi-support-with-aop-and-aspectj/</link>
      <pubDate>Mon, 01 Oct 2012 02:47:45 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2012/10/building-cdi-support-with-aop-and-aspectj/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;CDI is a mighty enhancement to the Java programming language. But CDI has also some limitations that might be cumbersome:&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;ulist&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;CDI needs a CDI container&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;All dependency injected beans are also managed beans&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Hibernate or JPA entities are not managed by the CDI container, so there is no CDI support for them&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;So what can we do to get around these limitations, for instance we really want dependency injection in our Entities? The solution is AOP and AspectJ!&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>The Onion Architecture</title>
      <link>https://www.mirkosertic.de/blog/2012/09/the-onion-architecture/</link>
      <pubDate>Mon, 10 Sep 2012 06:48:34 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2012/09/the-onion-architecture/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_the_problem&#34;&gt;The Problem&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Often we develop complex business driven applications. While we design our application, it’s architecture and it’s layers, we often feel to use a traditional approach to define the layers. Here is a short structure of what i mean:&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;span class=&#34;image&#34;&gt;&lt;img src=&#34;https://www.mirkosertic.de/media/traditionalpackaging.png&#34; alt=&#34;traditionalpackaging&#34;/&gt;&lt;/span&gt;&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;The problem with this structure is that the packaging is infrastructure driven. We have a user interface which uses the business logic. The business logic uses the data access layer to access data. There are also some cross cutting concerns like transaction control or security. This packaging was often motivated by classic J2EE patterns. But the problems are the dependencies.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Enriching legacy applications with CDI</title>
      <link>https://www.mirkosertic.de/blog/2012/08/enriching-legacy-applications-with-cdi/</link>
      <pubDate>Wed, 15 Aug 2012 09:45:09 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2012/08/enriching-legacy-applications-with-cdi/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;There are a lot of applications out there. Some of them are legacy, others are in their maintenance phase. While we are developing new applications, we can use the coolest new technologies, think about good design and other stuff. But what about the software maintenance phase? Often, due to lack of time and other constraints, we cannot do everything perfectly, we need to move some refactoring or even re-engineering to the maintenance phase.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>A first touch with NoSQL, graph databases and OrientDB</title>
      <link>https://www.mirkosertic.de/blog/2012/08/a-first-touch-with-nosql-graph-databases-and-orientdb/</link>
      <pubDate>Wed, 01 Aug 2012 01:43:48 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2012/08/a-first-touch-with-nosql-graph-databases-and-orientdb/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_the_experiment&#34;&gt;The experiment&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;I was thinking about the current way we often store data in relational databases like MySQL, PostgreSQL or Oracle. We are using object-relational mapping frameworks like Hibernate, enriching Java classes with JPA annotations and are hoping that the mapping framework does everything for us the right way.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;But wait a minute. What are we storing here? Basically we are storing Java object graphs using our ORM framework. Object graphs. Ok, so why could be not use a graph database to store our objects directly? Shouldn’t this make our life easier, no more database table definitions, indexes, foreign keys? Lets give it a try and test how we can migrate an existing JPA based application to a NoSQL graph database. Although i could implement a new persistence layer and use technologies like &lt;a href=&#34;http://www.springsource.org/spring-data/neo4j&#34;&gt;SpringData Neo4J&lt;/a&gt; , i want to to check if there are JPA compatible solutions around.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Enterprise search with Apache Solr</title>
      <link>https://www.mirkosertic.de/blog/2012/07/enterprise-search-with-apache-solr/</link>
      <pubDate>Mon, 30 Jul 2012 10:30:07 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2012/07/enterprise-search-with-apache-solr/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;It you want to build a enterprise search engine, you don’t have to reinvent the wheel. You can use open source engines like &lt;a href=&#34;http://lucene.apache.org/core/&#34;&gt;Apache Lucene&lt;/a&gt; or if you have just one day to implement it &lt;a href=&#34;http://lucene.apache.org/solr/&#34;&gt;Apache Solr&lt;/a&gt;. Solr is a full blown enterprise search server, which comes with a lot of bundled plugins like meta-data and content extraction from a very common set of document types with &lt;a href=&#34;http://tika.apache.org/&#34;&gt;Apache Tika&lt;/a&gt; , search highlighting, fragmented search and also similarity search for search results. This is a short tutorial how to create a search application within one day.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Reusing domain objects to create query specifications</title>
      <link>https://www.mirkosertic.de/blog/2012/07/reusing-domain-objects-to-create-query-specifications/</link>
      <pubDate>Fri, 20 Jul 2012 02:18:59 +0200</pubDate>
      <guid>https://www.mirkosertic.de/blog/2012/07/reusing-domain-objects-to-create-query-specifications/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;&#xA;&lt;h2 id=&#34;_problem&#34;&gt;Problem&lt;/h2&gt;&#xA;&lt;div class=&#34;sectionbody&#34;&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Often you need to create query specifications to retrieve data from persistent memory. One of the following patterns is most likely used:&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Bind Entity or Service with a distinct Query Object to the repository. A Service creates a distinct query object, passes it to the repository. Here the query object is translated to a Hibernate or JPA Criteria or HQL Statement and finally executed against the database.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Pros:&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;ulist&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;For every use case a distinct &lt;a href=&#34;http://martinfowler.com/eaaCatalog/queryObject.html&#34;&gt;Query Object&lt;/a&gt; can be created. This helps a lot to encapsulate domain logic.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;</description>
    </item>
  </channel>
</rss>
